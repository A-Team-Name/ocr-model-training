GC←{
p t k n fr sl rf fd xn sym←⍵ ⋄ A B C E F G K L M N O P S V Z←1+⍳15
⍝ Parameters
⍝  deps  Dependencies for each symbol in syms
⍝  nams  Name codes for each symbol in syms
⍝  P2D   Converter Parent vector to depth vector
⍝  rth   Runtime header for all modules
⍝  rtn   Runtime code for each symbol in syms
⍝  syms  Core instruction set of generated code
gck← (A 1)(A 6)
gcv← 'Aa' 'As'
gck,←(B 1)(B 2)(B 3)(B 4)
gcv,←'Bv' 'Bf' 'Bo' 'Bo'
gck,←(E ¯2)(E ¯1)(E 0)(E 1)(E 2)(E 4)(E 6)
gcv,←'Ec'  'Ek'  'Er' 'Em' 'Ed' 'Eb' 'Ei'
gck,←(F 0)(F 2)(F 3)(F 4)
gcv,←'Fz' 'Fn' 'Fn' 'Fn'
gck,←(G 0)(N 1)
gcv,←'Gd' 'Na'
gck,←(O 1)(O 2)(O 4) (O 5) (O 7) (O 8)
gcv,←'Ov' 'Of' 'Ovv' 'Ofv' 'Ovf' 'Off'
gck,←(P 0)(P 1)(P 2)(P 3)(P 4)
gcv,←'Pv' 'Pv' 'Pf' 'Po' 'Po'
gck,←(V 0)(V 1)(V 2)(V 3)(V 4)
gcv,←'Va' 'Va' 'Vf' 'Vo' 'Vo'
gcv,←⊂'{''/* Unhandled '',(⍕⍺),'' */'',NL}'
NL←⎕UCS 13 10
xi←⍸(t=B)∧k[rf]=0 ⋄ d i←P2D p
I←{(⊂⍵)⌷⍺} ⋄ com←{⊃{⍺,',',⍵}/⍵} ⋄  ks←{⍵⊂[0]⍨(⊃⍵)=⍵[;0]}
nam←{'∆'⎕R'__'∘⍕¨sym[|⍵]} ⋄ slt←{'(*e[',(⍕6⊃⍵),'])[',(⍕7⊃⍵),']'}
ast←(⍉↑d p t k n(⍳≢p)fr sl fd)[i;]
Aa←{0=≢ns←dis¨⍵:'PUSH(A(SHP(1,0),scl(0)));',NL
1=≢ns:'PUSH(scl(scl(',(⊃ns),')));',NL
c←⍕≢⍵ ⋄ v←'VEC<',('DI'⊃⍨∧.=∘⌊⍨⍎¨ns),'>{',(com ns),'}.data()'
'PUSH(A(SHP(1,',c,'),arr(',c,',',v,')));',NL}
As←{c←⍕4⊃⍺ ⋄ z←'{A z(SHP(1,',c,'),VEC<A>(',c,'));',NL
z,←'  VEC<A>&zv=std::get<VEC<A>>(z.v);',NL
z,'  DOB(',c,',POP(A,zv[i]))coal(z);PUSH(z);}',NL}
Bf←{'(*e[fd])[',(⍕4⊃⍺),']=s.top();',NL}
Bv←{'(*e[fd])[',(⍕4⊃⍺),']=s.top();',NL}
Bo←{'(*e[fd])[',(⍕4⊃⍺),']=s.top();',NL}
Eb←{z←'{A x,y;FNP f;POP(A,x);POP(FNP,f);POP(A,y);'
z,'(*f)(std::get<A>(',(slt⍺),'),x,y,e);PUSH(y);}',NL}
Ed←{z←'{A z,x,y;FNP f;POP(A,x);POP(FNP,f);POP(A,y);'
z,'(*f)(z,x,y,e);PUSH(z);}',NL}
Ei←{c←⍕4⊃⍺ ⋄ z←'{A x(SHP(1,',c,'),VEC<A>(',c,'));'
z,'VEC<A>&v=std::get<VEC<A>>(x.v);DOB(',c,',POP(A,v[i]));PUSH(x);}',NL}
Ek←{'s.pop();',NL}
Em←{'{A z,x;FNP f;POP(FNP,f);POP(A,x);(*f)(z,x,e);PUSH(z);}',NL}
Er←{'POP(A,z);e[fd]=std::move(of);R;',NL}
Fn←{z←NL,'DF(',('fn',⍕5⊃⍺),'_','fffoo'[3⊃⍺],'){U fd=',(⍕8⊃⍺),';STK s;',NL
z,←' if(e.size()<=fd)e.resize(fd+1);',NL
z,←' FRMP of=std::move(e[fd]);e[fd]=std::make_unique<FRM>(',(⍕4⊃⍺),');',NL
z,←' try{',NL
do←{'(*e[fd])[',(⍕n[⍵]),']=(*e[',(⍕fr[⍵]),'])[',(⍕sl[⍵]),'];',NL}
z,←⊃,⌿(do¨⍸(p=5⊃⍺)∧(t=B)∧fr≠¯1),' ',¨dis¨⍵
z,←' }catch(U x){e[fd]=std::move(of);throw x;}',NL
z,←' catch(exception&x){e[fd]=std::move(of);throw x;}',NL
z,' e[fd]=std::move(of);}',NL}
Fz←{z←NL,'ENV e',(⍕5⊃⍺),'(1);I is',(⍕5⊃⍺),'=0;',NL
z,←'DF(',('fn',⍕5⊃⍺),'_f){if(is0)R;','' 'I fd=0;'⊃⍨×≢⍵
z,←'STK s;e[0]=std::make_unique<FRM>(',(⍕4⊃⍺),');',NL
z,(⊃,⌿' ',¨dis¨⍵),' is0=1;}',NL,NL}
Gd←{z←'{A x;POP(A,x);if(cnt(x)!=1)err(5);',NL
z,←' if(!(isint(x)||isbool(x)))err(11);',NL
z,←' I t;CVSWITCH(x.v,err(6),t=v.as(s32).scalar<I>(),err(11))',NL
z,←' if(t!=0&&t!=1)err(11);',NL
z,' if(t){',NL,(⊃,/' ',¨dis¨⍵),' }}',NL}
Na←{'¯'⎕R'-'⍕sym⌷⍨|4⊃⍺}
Ov←{z←'{A x;MOKP o;POP(A,x);POP(MOKP,o);'
z,'FNP f=(*o)(x);f->this_p=f;PUSH(f);}',NL}
Of←{z←'{FNP f,g;MOKP o;POP(FNP,g);POP(MOKP,o);'
z,'f=(*o)(g);f->this_p=f;PUSH(f);}',NL}
Ovv←{z←'{A x,y;DOKP o;POP(A,x);POP(DOKP,o);POP(A,y);'
z,'FNP f=(*o)(x,y);f->this_p=f;PUSH(f);}',NL}
Ovf←{z←'{A x;FNP f,g;DOKP o;POP(A,x);POP(DOKP,o);POP(FNP,g);'
z,'f=(*o)(x,g);f->this_p=f;PUSH(f);}',NL}
Ofv←{z←'{A x;FNP f,g;DOKP o;POP(FNP,g);POP(DOKP,o);POP(A,x);'
z,'f=(*o)(g,x);f->this_p=f;PUSH(f);}',NL}
Off←{z←'{FNP f,g,h;DOKP o;POP(FNP,g);POP(DOKP,o);POP(FNP,h);'
z,'f=(*o)(g,h);f->this_p=f;PUSH(f);}',NL}
Pf←{(x←4⊃⍺)∊-1+⍳4:'PUSH(',(,'r' 'l' 'llp' 'rrp'⊃⍨¯1+|x),');',NL
'PUSH(',(nams⊃⍨syms⍳sym⌷⍨|4⊃⍺),'_p);',NL}
Po←{'PUSH(std::make_shared<',(nams⊃⍨syms⍳sym⌷⍨|4⊃⍺),'_k>());',NL}
Pv←{'PUSH(A());',NL}
Va←{(x←4⊃⍺)∊-1+⍳4:'PUSH(',(,'r' 'l' 'aa' 'ww'⊃⍨¯1+|x),');',NL
'PUSH(',(slt ⍺),');',NL}
Vf←{0>x←4⊃⍺:'PUSH(',(slt ⍺),');',NL
'fn',(⍕x),'_p->this_p=fn',(⍕x),'_p;PUSH(fn',(⍕x),'_p);',NL}
Vo←{0>x←4⊃⍺:'PUSH(',(slt ⍺),');',NL
'PUSH(std::make_shared<fn',(⍕x),'_k>());',NL}
Zf←{z←'NM(',⍵,',"',⍵,'",0,0,MT,MFD,DFD,MT,MT)',NL
z,'DEFN(',⍵,')',NL,'MF(',⍵,'_f){this_c(z,A(),r,e);}',NL}
Zm←{z←'OM(',⍵,',"',⍵,'",0,0,MFD,DFD,MT,MT)',NL
z,'MF(',⍵,'_o){this_c(z,A(),r,e);}',NL}
Zd←{z←'OD(',⍵,',"',⍵,'",0,0,MFD,DFD,MT,MT)',NL
z,'MF(',⍵,'_o){this_c(z,A(),r,e);}',NL}
Zp←{n←'fn',⍕⍵ ⋄ k[⍵]∊0 2:Zf n ⋄ k[⍵]=3:Zm n ⋄ k[⍵]=4:Zd n
NOTFOUND t[⍵],k[⍵]}
NOTFOUND←{('[GC] UNSUPPORTED NODE TYPE ',N∆[⊃⍵],⍕⊃⌽⍵)⎕SIGNAL 16}
dis←{0=2⊃h←,1↑⍵:'' ⋄ (≢gck)=i←gck⍳⊂h[2 3]:NOTFOUND h[2 3] ⋄ h(⍎i⊃gcv)ks 1↓⍵}
z←'#include "codfns.h"',NL,,/Zp¨⍸t=F
z←(⊂rth),(rtn[syms⍳{∪⊃,/(deps,⊂⍬)[syms⍳⍵]}⍣≡sym]),,/Zp¨⍸t=F
z,←dis¨ks ast
z,←'E',¨('?VFOO'[k[xi]]),¨'(',¨(⍕¨rf[xi]),¨',',¨(nam xn),¨',',¨(⍕¨n[xi]),¨')',¨⊂NL
⊃,⌿z}
:Namespace OP
⎕IO←0
_o←{0≥⊃c1 a e(i1 d1)←A←⍺ ⍺⍺ ⍵:A ⋄ 0≥⊃c2 a e(i2 d2)←B←⍺ ⍵⍵ ⍵:B
(i1=i2∧c1<c2)∨i1 _less i2:B ⋄ A}
_s←{0<⊃c a e d←p←⍺ ⍺⍺ ⍵:p ⋄ 0<⊃c2 a2 e d←p←e ⍵⍵ d:p ⋄ (c⌈c2)(a⍪a2)e d}
_noenv←{0<⊃c a e d←p←⍺ ⍺⍺ ⍵:p ⋄ c a ⍺ d}
_env←{0<⊃c a e d←p←⍺ ⍺⍺ ⍵:p ⋄ c a ((⊆a)⍵⍵⍪¨e) d}
_then←{0<⊃c a e d←p←⍺ ⍺⍺ ⍵:p ⋄ 0<⊃c a e _←p←e ⍵⍵ a d:p ⋄ c a e d}
_not←{0<⊃c a e d←⍺ ⍺⍺ ⍵:0 a ⍺ ⍵ ⋄ 2 a ⍺ ⍵}
_as←{0<⊃c a e d←⍺ ⍺⍺ ⍵:c a e d ⋄ c (,⊂((⌊/,⌈/)⊃¨⍵ d)⍵⍵ a) e d}
_t←{0<⊃c a e(i d)←p←⍺ ⍺⍺ ⍵:p ⋄ e ⍵⍵ a:p ⋄ i>⊃⍵:6 ⍬ ⍺ ⍵ ⋄ 6 ⍬ ⍺(i d)}
_ign←{c a e d←⍺ ⍺⍺ ⍵ ⋄ c ⍬ e d}
_peek←{0<p←⊃⍺ ⍺⍺ ⍵:p ⋄ 0 ⍬ ⍺ ⍵}
_yes←{0 ⍬ ⍺ ⍵}
_opt←{⍺(⍺⍺ _o _yes)⍵}
_any←{⍺(⍺⍺ _s ∇ _o _yes)⍵}
_some←{⍺(⍺⍺ _s (⍺⍺ _any))⍵}
_set←{i d←⍵ ⋄ 3::2 ⍬ ⍺ ⍵ ⋄ (i⌷d)∊⍺⍺:0(,i⌷d)⍺((i _step 1)d) ⋄ 2 ⍬ ⍺ ⍵}
_tk←{i d←⍵ ⋄ m←(,⍺⍺)=⍥⎕C c↑d⌷⍨⊂x⌿⍨(0≤x)∧(≢d)>x←i _step ⍳c←≢,⍺⍺
x←(i _step +⌿∧⍀m)d ⋄ ∧⌿m:0(⊂,⍺⍺)⍺ x ⋄ 2 ⍬ ⍺ x}
_eat←{i d←⍵ ⋄ i≥≢d:2 ⍬ ⍺ ⍵ ⋄ 0(i⌷d)⍺((i _step 1)d)}
_eot←{i d←⍵ ⋄ (i<0)∨i≥≢d:0 ⍬ ⍺ ((≢d)d) ⋄ 2 ⍬ ⍺ ⍵}
_gof←{_step∘←+ ⋄ _less∘←< ⋄ _←0} ⋄ _gob←{_step∘←- ⋄ _less∘←> ⋄ _←0}
_step←⊢ ⋄ _less←⊢ ⋄ _gof⍬
_bkwd←{c a e d1←⍺ ⍵⍵ ⍵ ⋄ _gob⍬: ⋄ c a e d2←⍺ ⍺⍺ -∘1@0⊢d1 ⋄ _gof⍬:
0<c:c a e((⌈⌿⊃¨⍵ d2),1↓⍵) ⋄ c a e d1}
PEG←{⍺←⎕THIS
A←,¨'`([^`]*)`'    '"([^"]*)"'   '\[\]'   '\[([^]]+)\]'  '\|'  ','
B←  '(''\1''_set)' '(''\1''_tk)' '_noenv' '_env(\1)'     '_o'  '_s'
A,←,¨'→'     '!'    '&'  '∊'    '\?'   '\*'   '\+'    '⍥'    '↓'    '↑'     '⌽'
B,←  '_then' '_not' '_t' '_yes' '_opt' '_any' '_some' '_eat' '_ign' '_peek' '_bkwd'
A,←⊂,'⍬'
B,←⊂,'_eot'
noq←' '@(∊{⍺+⍳⍵}⌿¨'`[^`]*`' '"[^"]*"'⎕S 0 1⊢x)⊢x←' ',⍵
nm peg as←1↓¨3↑x⊂⍨1@(0,⊃∘⍸¨('←'=noq)(':'=noq))⊢0⍴⍨≢x
peg←A ⎕R(' ',¨B,¨' ')⊢peg ⋄ as←{' _as (',⍵,')'}⍣(∨⌿as≠' ')⊢as
⍺.⎕FX(nm,'←{')('Z←⍺(',peg,as,')⍵')(''⊣'⎕←''',nm,': '',⍕(0)(3 0)⊃¨⊂Z')('Z}')}
_report←{c a e(i d)←⍵ ⋄ 0=c:⍵⊣⎕←'Parsing successful.'⊣##.EN←0⊣##.DM←'' '' ''
0>c:('Unhandled return code: ',(⍕c))⎕SIGNAL 16
li←⍸lm←¯1⌽lm∨(CR=d)∧~1⌽lm←LF=d←d,LF⊣CR LF←⎕UCS 13 10
msg←∊CR,'─'⍪⍨'─'⍪↑##.DM[1 2]
⎕SIGNAL⊂('EN' c)('Category' 'Compiler')('Vendor' 'Co-dfns')('Message' msg)}
ws←(' ',⎕UCS 9)_set
crlf←(⎕UCS 10 13)_set
PEG'aws   ← ws * ↓'
PEG'awslf ← crlf | ws * ↓'
PEG'eot   ← aws , ⍬ ↓'
PEG'alpha ← `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz∆_`'
PEG'digit ← `0123456789`'
PEG'jot   ← aws , `∘` , aws'
PEG'dot   ← aws , `.` , aws'
PEG'lbrc  ← aws , `{` , aws ↓'
PEG'rbrc  ← aws , `}` , aws ↓'
PEG'zil   ← aws , "⍬" , aws ↓'
PEG'gets  ← aws , "←" , aws ↓'
PEG'lpar  ← aws , "(" , aws ↓'
PEG'rpar  ← aws , ")" , aws ↓'
PEG'lbrk  ← aws , "[" , aws ↓'
PEG'rbrk  ← aws , "]" , aws ↓'
PEG'semi  ← aws , ";" , aws ↓'
PEG'grd   ← aws , ":" , aws ↓'
PEG'egrd  ← aws , "::" , aws ↓'
PEG'mop   ← aws , `¨/⌿\⍀⍨` , aws'
PEG'dop1  ← aws , `.⍣∘` , aws'
PEG'dop2  ← aws , `⍤⍣∘` , aws'
PEG'dop3  ← aws , `∘` , aws'
PEG'prim  ← aws,`+-÷×|*⍟⌈⌊!<≤=≠≥>∧∨⍲⍱⌷?⍴,⍪⌽⊖⍉∊⍷⊂⊆⊃⍳○~≡≢⊢⊣/⌿\⍀⊤⊥↑↓∪∩⍋⍒∇⌹`,aws'
PEG'ndlm  ← `¯` | (alpha! ↑)'
PEG'int   ← aws , (digit+) , ndlm , aws'
PEG'float ← aws , (digit* , `.` , int | (digit+ , `.` , ndlm)) , aws'
PEG'aw    ← aws , ("⍵" | "⍺") , aws'
PEG'aaww  ← aws , ("⍺⍺" | "⍵⍵") , aws'
PEG'sep   ← aws , (`⋄` | crlf ↓) , aws'
PEG'nss   ← awslf , ":Namespace" , aws , (alpha,(alpha|digit*)?) , awslf ↓'
PEG'nse   ← awslf , ":EndNamespace" , awslf ↓'
PEG'sfn   ← aws , ("TFFI⎕" | "TFF⎕") , aws'
PEG'name  ← aws , (alpha | (digit+ , alpha) +) , (`⎕` !) , aws'
f∆ N∆←'ptknfsrdx' ' ABCEFGKLMNOPSVZ'
⎕FX∘⍉∘⍪¨'GLM',¨'←{⍪/(0 '∘,¨(⍕¨N∆⍳'GLM'),¨⊂' 0 0,1+⍺),1+@0⍉↑(⊂6⍴⊂⍬),⍵}'
⎕FX∘⍉∘⍪¨'AEFO',¨'←{⍪/(0 '∘,¨(⍕¨N∆⍳'AEFO'),¨⊂' ⍺⍺ 0,1+⍺),1+@0⍉↑(⊂6⍴⊂⍬),⍵}'
⎕FX∘⍉∘⍪¨'BNPVZ',¨'←{0(N∆⍳'''∘,¨'BNPVZ',¨''')'∘,¨'⍺⍺(0⌷⍵)' '1(⍎⍵)' '⍺⍺(⊂⍵)' '⍺⍺(⊂⍵)' '0(⊂⍵)',¨⊂',1+⍺}'
Vt←(⊢⍳⍨0⊃⊣)⊃¯1,⍨1⊃⊣
MkAST←{⍪/(⍳≢⍵)+@0⍉↑⌽⍵}
MkAtom←{∧⌿m←(N∆⍳'N')=⊃¨1⊃¨⍵:⍺(1A)⌽⍵ ⋄ 1=≢⍵:0⊃⍵ ⋄ ⍺(6A)⌽({⊃¨⍵[4 5]}1A⊂)¨@{m}⍵}
MkMget←{⍪/(0,1+2<≢⊃z)+@0⊢z←⍉↑⌽⍵}
Atn←{(0 3⊃⍵)@(⊂3 0)⊢⍺ ⍺⍺ ⍵}
Fn←{a(i d)←⍵ ⋄ 0=≢a:0 ⍬ ⍺(i d)
0=≢ss←(4⊃z)⌿⍨m←(((N∆⍳'F')=1⊃⊢)∧¯1=2⊃⊢)⊢z←⍪⌿↑a:0(,⊂z)⍺(i d)
0<c←r⊃⍨0,pi←⊃⍒⊃r←↓⍉↑ps←⍺∘Fa¨ss,¨⊂⊂d:pi⊃ps
0(,⊂(⊂¨¨z)((⊃⍪⌿)⊣@{m})¨⍨↓(m⌿0⊃z)+@0⍉↑⊃¨1⊃r)⍺(i d)}
FnType←{⌈⌿2,3 4×¯1≠(¯1,⍨1⊃⍵)['⍺⍺' '⍵⍵'⍳⍨⊃⍵]}
PEG'Sfn    ← sfn                                              : 2P∘⌽∘∊       '
PEG'Prim   ← prim                                             : 2P           '
PEG'Symbol ← name                                             : ⊢∘⌽          '
PEG'Name   ← Symbol & (⍺⍺=Vt)                                 : ⍺⍺ V∘,∘⊃     '
PEG'Args   ← aaww | aw & (⍺⍺=Vt)                              : ⍺⍺ V∘,∘⊃     '
PEG'Var    ← ⍺⍺ Args | (⍺⍺ Name)                                             '
PEG'Num    ← float | int                                      : N∘⌽          '
PEG'Pex    ← rpar , Ex , lpar                                                '
PEG'Zil    ← zil                                              : 1A           '
PEG'Unit   ← (1 Var) | Num | Zil | Pex                                       '
PEG'Atom   ← Unit+                                            : MkAtom       '
PEG'Semi   ← ∊                                                : ⊣1 P{,'';''} '
PEG'Semx   ← Ex | Semi                                                       '
PEG'Brk    ← rbrk , (Semx , (semi , Semx *)) , lbrk           : 6E∘⌽         '
PEG'Lbrk   ← ∊                                                : ⊣⍺⍺ P{,''[''}'
PEG'Idx    ← Brk , (2 Lbrk) , Atom                            : 2E∘⌽         '
PEG'Slrp   ← ⍺⍺ | (⍵⍵ , ∇) | (⍥ , ∇) ↓                                       '
PEG'Blrp   ← ⍺⍺ , (⍵⍵ Slrp ∇) ↓                                              '
PEG'Bfn    ← rbrc Blrp lbrc                                   : ¯1F          '
PEG'Pfe    ← rpar , Fex , lpar                                               '
PEG'Fnp    ← Prim | Sfn | (2 Var) | Bfn | Pfe                                '
PEG'Pmop   ← mop                                              : 3P           '
PEG'Mop    ← Pmop , Afx                                       : 2O∘⌽         '
PEG'Pdop1  ← dop1                                             : 3P           '
PEG'Dop1   ← Pdop1 , Afx                                      : 8O∘⌽         '
PEG'Pdop2  ← dop2                                             : 3P           '
PEG'Vop    ← Atom , Pdop2 , Afx                               : 5O∘⌽         '
PEG'Pdop3  ← dop3                                             : 3P           '
PEG'Dop3   ← Pdop3 , Atom                                     : 7O∘⌽         '
PEG'Bop    ← rbrk , Ex , lbrk , (4 Lbrk) , Afx                : 5O∘⌽         '
PEG'JotDP  ← dot , jot                                        : 3P∘⌽         '
PEG'JotDot ← Fnp , JotDP                                      : 2O           '
PEG'Fop    ← Fnp , (Dop1 | Dop3 ?)                            : MkAST        '
PEG'Afx    ← Mop | JotDot | Fop | Vop | Bop                                  '
PEG'Trn    ← Afx , (Afx | Idx | Atom , (∇ ?) ?)               : 5F∘⌽         '
PEG'Bind   ← gets , Symbol [⍺⍺]                               : ⍺⍺ B         '
PEG'Gets   ← ∊                                                : ⊣⍺⍺ P{,''←''}'
PEG'Mname  ← Afx , (1 Name)                                   : 4E Atn∘⌽     '
PEG'Ogets  ← Afx , (3 Gets)                                   : 2O           '
PEG'Mbrk   ← Ogets , Brk , (1 Name)                           : 4E∘(1∘↓)Atn∘⌽'
PEG'Mget   ← Mname | Mbrk                                                    '
PEG'Bget   ← 2 Gets , Brk , (1 Name)                          : 4E∘(1∘↓)Atn∘⌽'
PEG'Asgn   ← gets , (Bget | Mget)                                            '
PEG'Fex    ← Afx , (Trn ?) , (2 Bind *)                       : MkAST        '
PEG'IAx    ← Idx | Atom , (dop2 !)                                           '
PEG'App    ← Afx , (IAx ?)                                    : {⍺((≢⍵)E)⌽⍵} '
PEG'ExHd   ← Asgn | (1 Bind) | App , ∇ ?                                     '
PEG'Ex     ← IAx , ExHd                                       : MkAST        '
PEG'Gex    ← Ex , grd , Ex                                    : G∘⌽          '
PEG'Alp    ← ∊                                                : ''⍺''⍨       '
PEG'Omg    ← ∊                                                : ''⍵''⍨       '
PEG'ClrEnv ← (Alp[¯1]),(Alp,Alp[¯1]),(Omg[¯1]),(Omg,Omg[¯1])↓                '
PEG'Fax    ← lbrc , (Gex | Ex | Fex Stmts rbrc) → Fn          : (FnType ⍺)F  '
PEG'FaFnW  ← Omg[1]↓ , Fax []                                                '
PEG'FaFnA  ← Omg[1] , (Alp[1])↓ , Fax []                                     '
PEG'FaFn   ← FaFnW | FaFnA                                                   '
PEG'FaMopV ← Alp,Alp[1]↓ , FaFn []                                           '
PEG'FaMopF ← Alp,Alp[2]↓ , FaFn []                                           '
PEG'FaMop  ← FaMopV , (FaMopF ?) | FaMopF                                    '
PEG'FaDopV ← Omg,Omg[1]↓ , FaMop []                                          '
PEG'FaDopF ← Omg,Omg[2]↓ , FaMop []                                          '
PEG'FaDop  ← FaDopV , (FaDopF ?) | FaDopF                                    '
PEG'Fa     ← ClrEnv , (FaFn | FaMop | FaDop) []                              '
PEG'Nlrp   ← sep | rbrc ↑ Slrp (lbrc Blrp rbrc)                              '
PEG'Stmt   ← sep | (⍺⍺ , (sep | lbrc) ⌽ Nlrp)                                '
PEG'Stmts  ← ⍵⍵ | (⍺⍺ Stmt , ∇)                                              '
PEG'Ns     ← nss , (Ex | Fex Stmts nse) , eot → Fn             : (¯1+⊣)0F⊢   '
ps←{⍺←⍬ ⍬ ⋄ src←∊{⍵/⍨∧\'⍝'≠⍵}¨⍵,¨⎕UCS 10
0≠⊃c a e(i d)←p←⍺ Ns 0,⊂src:_report p
(↓s(-⍳)@3↑⊃a)e(s←∪0(,'⍵')(,'⍺')'⍺⍺' '⍵⍵',3⊃⊃a)src}
:EndNamespace:Namespace RTM
syms ←,¨'+'   '-'   '×'   '÷'   '*'   '⍟'   '|'    '○'     '⌊'    '⌈'   '!'
nams ←  'add' 'sub' 'mul' 'div' 'exp' 'log' 'res'  'cir'   'min'  'max' 'fac'
syms,←,¨'<'   '≤'   '='   '≥'   '>'   '≠'   '~'    '∧'     '∨'    '⍲'   '⍱'
nams,←  'lth' 'lte' 'eql' 'gte' 'gth' 'neq' 'not'  'and'   'lor'  'nan' 'nor'
syms,←,¨'⌷'   '['   '⍳'   '⍴'   ','   '⍪'   '⌽'    '⍉'     '⊖'    '∊'   '⊃'
nams,←  'sqd' 'brk' 'iot' 'rho' 'cat' 'ctf' 'rot'  'trn'   'rtf'  'mem' 'dis'
syms,←,¨'≡'   '≢'   '⊢'   '⊣'   '⊤'   '⊥'   '/'    '⌿'     '\'    '⍀'   '?'
nams,←  'eqv' 'nqv' 'rgt' 'lft' 'enc' 'dec' 'red'  'rdf'   'scn'  'scf' 'rol'
syms,←,¨'↑'   '↓'   '¨'   '⍨'   '.'   '⍤'   '⍣'    '∘'     '∪'    '∩'   '←'
nams,←  'tke' 'drp' 'map' 'com' 'dot' 'rnk' 'pow'  'jot'   'unq'  'int' 'get'
syms,←,¨'⍋'   '⍒'   '∘.'  '⍷'   '⊂'   '⌹'   '⎕FFT' '⎕IFFT' '%s'   '⊆'   '⎕CONV'
nams,←  'gdu' 'gdd' 'oup' 'fnd' 'par' 'mdv' 'fft'  'ift'   'scl'  'nst' 'conv'
syms,←,¨'∇'    ';'    '%u'
nams,←  'this' 'span' ''
deps←⊂¨syms
deps[syms⍳,¨sclsyms]←,¨¨('⍉⍴⍋',⊂'%s')∘,¨sclsyms←'+-×÷*⍟|○⌊⌈!<≤=≠≥>∨⍱⍲~?'
deps[syms⍳,¨'∧⌿/.⍪⍤\↓↑']←,¨¨'∨∧' '/⌿' '¨/' '/.' ',⍪' '↑⌷⍤' '¨\' '⍳↓' '⍳↑'
deps[syms⍳,¨'←⌽⊖⌷⍀¨≢⊂']←,¨¨'[⊃,¨←' '|,⌽' '⌽⊖' '⍳⌷' '\⍀' '⊃,¨' '≡≢' '¨⌷⊂'
deps[syms⍳,¨'⊆']←,¨¨⊂'⊂⊆'
deps[syms⍳⊂'∘.']←⊂(,¨'¨' '∘.')
⍝ rtm←(⊃⎕NPARTS ⎕WSID),'rtm/'
⍝ initsrc←'0inc' '1mac' '2obj' '3ftp' '4utl' '5dat' '6dwa' '7api'
⍝ rth←∊(⎕UCS 10),⍨⍪⊃,⌿⊃¨⎕NGET¨(⊂¨rtm∘,¨initsrc,¨⊂'.c'),¨1
⍝ rtn←{∊(⊃⍵),¨⎕UCS 10}¨⎕NGET¨(⊂¨rtm∘,¨(nams~'this' 'span' ''),¨⊂'.c'),¨1
⍝ rtn,←3⍴⊂''
⍝ ##.(syms nams deps rth rtn)←syms nams deps rth rtn
:EndNamespace
CC←{
data header←⍵
ostype←opsys 'win' 'linux' 'mac'
_←header ⎕NPUT (⍺,'.h')1
_←data ⎕NPUT (⍺,'.c')1
'win'≡ostype:⍺{
vsbat←VS∆PATH,'\VC\Auxiliary\Build\vcvarsall.bat'
~⎕NEXISTS vsbat:'MISSING VISUAL C'⎕SIGNAL 99
vsc←'%comspec% /C ""',vsbat,'" amd64'
vsc,←'	&& cd "',(⊃⎕CMD'echo %CD%'),'"'
vsc,←'  && cl /std:c17 /Zc:preprocessor /MP /W3 /wd4102 /wd4275'
vsc,←'    /DEBUG /O2 /Zc:inline /Zi /FS'
vsc,←'    /Fo".\\" /Fd"',⍺,'.pdb"'
vsc,←'    /WX /MD /EHsc /nologo'
vsc,←'    /D"_CRT_SECURE_NO_WARNINGS"'
vsc,←'    "',⍺,'.c" /link /DLL /OPT:REF'
vsc,←'    /INCREMENTAL:NO /SUBSYSTEM:WINDOWS'
vsc,←'    /DYNAMICBASE "codfns.lib"'
vsc,←'    /OPT:ICF /ERRORREPORT:PROMPT'
vsc,←'    /TLBID:1 /OUT:"',⍺,'.dll" > "',⍺,'.log""'
⎕←⍪⊃⎕NGET(⍺,'.log')1⊣⎕CMD vsc⊣1 ⎕NDELETE ⍺,'.dll'
⎕NEXISTS f←⍺,'.dll':f
'COMPILE ERROR' ⎕SIGNAL 22
}⍵
'linux'≡ostype:⍺{
gcc ←'gcc -std=c17 -O2 -g -Wall -fPIC -shared'
gcc,←' -Wno-parentheses -Wno-misleading-indentation -Wno-unused-variable'
gcc,←' -Wno-incompatible-pointer-types -Wno-missing-braces'
gcc,←' -Wno-unused-but-set-variable'
gcc,←' -L. -o ''',⍺,'.so'' ''',⍺,'.c'' -lcodfns'
gcc,←' > ''',⍺,'.log'' 2>&1'
⎕←⍪⊃⎕NGET(⍺,'.log')1⊣⎕CMD gcc⊣1 ⎕NDELETE ⍺,'.so'
⎕NEXISTS f←⍺,'.so':f
'COMPILE ERROR' ⎕SIGNAL 22
}⍵
'mac'≡ostype:⍺{
clang ←'clang -arch x86_64 -std=c17 -O2 -g -Wall -fPIC -shared'
clang,←' -Wno-parentheses -Wno-misleading-indentation -Wno-unused-variable'
clang,←' -Wno-incompatible-pointer-types -Wno-missing-braces'
clang,←' -Wno-unused-but-set-variable'
clang,←' -o ''',⍺,'.dylib'' ''',⍺,'.c'''
clang,←' -Wl,-rpath,. ./libcodfns.dylib'
clang,←' > ''',⍺,'.log'' 2>&1'
⎕←⍪⊃⎕NGET(⍺,'.log')1⊣⎕CMD clang⊣1 ⎕NDELETE ⍺,'.dylib'
⎕NEXISTS f←⍺,'.dylib':f
'COMPILE ERROR' ⎕SIGNAL 22
}⍵
}
CX←{
data header←⍵
ostype←opsys 'win' 'linux' 'mac'
_←header ⎕NPUT (⍺,'.h')1
_←data ⎕NPUT (⍺,'.c')1
'win'≡ostype:⍺{
vsbat←VS∆PATH,'\VC\Auxiliary\Build\vcvarsall.bat'
~⎕NEXISTS vsbat:'MISSING VISUAL C'⎕SIGNAL 99
vsc←'%comspec% /C ""',vsbat,'" amd64'
vsc,←'	&& cd "',(⊃⎕CMD'echo %CD%'),'"'
vsc,←'  && cl /Zc:preprocessor /MP /W3 /wd4102 /wd4275'
vsc,←'    /DEBUG /Od /Zc:inline /Zi /FS'
vsc,←'    /Fo".\\" /Fd"',⍺,'.pdb"'
vsc,←'    /WX /MD /EHsc /nologo'
vsc,←'    "',⍺,'.c" /link /OPT:REF'
vsc,←'    /INCREMENTAL:NO '
vsc,←'    /DYNAMICBASE "codfns.lib"'
vsc,←'    /OPT:ICF /ERRORREPORT:PROMPT'
vsc,←'    /OUT:"',⍺,'.exe" > "',⍺,'.log""'
log←⍪⊃⎕NGET(⍺,'.log')1⊣⎕CMD vsc⊣1 ⎕NDELETE ⍺,'.exe'
⎕NEXISTS f←⍺,'.exe':f log
⎕←log
'COMPILE ERROR' ⎕SIGNAL 22
}⍵
'linux'≡ostype:⍺{
gcc ←'gcc -std=c99 -Ofast -g -Wall -fPIC'
gcc,←' -Wno-parentheses -Wno-misleading-indentation -Wno-unused-variable'
gcc,←' -Wno-incompatible-pointer-types -Wno-missing-braces'
gcc,←' -Wno-unused-but-set-variable'
gcc,←' -L. -o ''',⍺,''' ''',⍺,'.c'' -lcodfns'
gcc,←' > ''',⍺,'.log'' 2>&1'
log←⍪⊃⎕NGET(⍺,'.log')1⊣⎕CMD gcc⊣1 ⎕NDELETE ⍺
⎕NEXISTS f←⍺:f log
⎕←log
'COMPILE ERROR' ⎕SIGNAL 22
}⍵
'mac'≡ostype:⍺{
clang ←'clang -arch x86_64 -std=c99 -Ofast -g -Wall -fPIC'
clang,←' -Wno-parentheses -Wno-misleading-indentation -Wno-unused-variable'
clang,←' -Wno-incompatible-pointer-types -Wno-missing-braces'
clang,←' -Wno-unused-but-set-variable'
clang,←' -o ''',⍺,''' ''',⍺,'.c'''
clang,←' -Wl,-rpath,. ./libcodfns.dylib'
clang,←' > ''',⍺,'.log'' 2>&1'
log←⍪⊃⎕NGET(⍺,'.log')1⊣⎕CMD clang⊣1 ⎕NDELETE ⍺
⎕NEXISTS f←⍺:f log
⎕←log
'COMPILE ERROR' ⎕SIGNAL 22
}⍵
}
GC←{
p t k n lx mu lv fv sv pos end sym IN←⍵
⍝ Make sure signal retains the stack
SIGNAL←{⍎'⍺ ⎕SIGNAL ⍵'}
⍝ Text utilities
csep←{⎕PP←34 ⋄ ¯2↓⊃,⌿(⍕¨⍵),¨⊂', '}
⍝ Tracing information
linestarts←⍸1⍪IN∊CR LF←⎕UCS 13 10
highlight←{
s←pos[⍵] ⋄ e←end[⍵] ⋄ lineno←linestarts⍸s
line←IN[b+⍳te←linestarts[lineno+1]-b←linestarts[lineno]]
ls le←s e-b ⋄ line←∊'╠'⊂⍤,@ls⊢'╣'⊂⍤,⍨@(¯1+le⌊te)⊢line
'\\'⎕R'\\\\'⊢'"[',(⍕1+lineno),'] ',(line~CR LF),'"'
}
⍝ Variable generation utilities
var_ckinds←{
types←'' 'array' 'func' 'moper' 'doper' 'env' 'void' 'array'
isa←t[⍵]∊A E S
isfn←(t[⍵]=O)∨(t[⍵]=F)∧k[⍵]<5
isdop←(t[⍵]=F)∧k[⍵]≥11
ismop←(~isdop)∧(t[⍵]=F)∧k[⍵]≥5
types[4@{isdop}3@{ismop}2@{isfn}1@{isa}k[⍵]]
}
var_names←{
ceqv←'_del_' '_delubar_'
asym←'∆'     '⍙'
islit←(t[⍵]=A)∧k[⍵]=1
nam←⍵
nam[i]←'l',∘⍕¨|n[⍵[i←⍸islit]]
nam[i]←(⊃¨var_ckinds ⍵[i]),¨⍕¨n[⍵[i←⍸(~islit)∧n[⍵]≥0]]
nam[i]←sym[|n[⍵[i←⍸(~islit)∧n[⍵]<0]]]
'cdf_'∘,¨(,¨asym)⎕R ceqv⊢(0⍴⊂''),nam
}
var_scopes←{
(0⍴⊂''),'loc->' 'lex->' 'dyn->' 'cdf_prim.' '' '' ''[lx[⍵]]
}
var_nmvec←{
0=≢⍵:'char **',⍺,' = NULL;'
z←'char *',⍺,'[] = {'
z,←⊃{⍺,', ',⍵}⌿'"'∘,¨sym[|n[⍵]],¨'"'
z,'};'
}
decl_vars←{⍺←0
0=≢⍵:0⍴⊂''
⍝ ∨⌿(k[⍵]=6)∧lx[⍵]>3:'CANNOT DECLARE AMBIGUOUS GLOBAL'SIGNAL 99
z  ←'' 'extern '[lx[⍵]=5]
z,¨←'' 'struct cell_'[lx[⍵]≠4]
z,¨←var_ckinds ⍵
z,¨←'' '_ptr'[lx[⍵]=4]
z,¨←' ' ' *'[⍺]
z,¨←'' '*'[lx[⍵]≠4]
z,¨←var_names ⍵
z,¨';'
}
init_vars←{
0=≢⍵:0⍴⊂''
z←(≢⍵)⍴⊂''
(var_values ⍵),¨⊂' = NULL;'
⊃⍪⌿z
}
var_refs←{
z←'&' ''[lx[⍵]=1]
z,¨←(var_scopes,¨var_names)⍵
z[⍸(n[,⍵]=0)∧(t[,⍵]=A)⍲k[,⍵]=1]←⊂,'z'
'(',¨z,¨')'
}
var_values←{
z←'' '*'[lx[⍵]=1]
z,¨←(var_scopes,¨var_names)⍵
z[⍸(n[,⍵]=0)∧(t[,⍵]=A)⍲k[,⍵]=1]←⊂,'(*z)'
'(',¨z,¨')'
}
check_vars←{
(highlight¨⍵){'CHK(var_ref(',⍵,'), cleanup, ',⍺,');'}¨var_values ⍵
}
release_vars←{
'release_'∘,¨(var_ckinds ⍵),¨'(',¨(var_values ⍵),¨⊂');'
}
⍝ All code has an initial prefix
pref ←⊂'#include "codfns.h"'
pref,←⊂'#include "',⍺,'.h"'
pref,←⊂''
pref,←⊂'EXPORT int'
pref,←⊂'DyalogGetInterpreterFunctions(void *p)'
pref,←⊂'{'
pref,←⊂'    return set_dwafns(p);'
pref,←⊂'}'
pref,←⊂''
⍝ We declare all external variables in the prefix
pref,←decl_vars ⍸msk∧msk⍀≠n⌿⍨msk←(t=V)∧lx=5
pref,←⊂''
⍝ Define all literals as static values
atypes←'BOOL' 'SINT'    'SINT'    'INT'     'DBL'    'CMPX'
ctypes←'char' 'int16_t' 'int16_t' 'int32_t' 'double' 'struct apl_cmpx'
drtypes←11     83        163       323       645      1289
atypes,←'CHAR8'   'CHAR16'   'CHAR32'
ctypes,←'uint8_t' 'uint16_t' 'uint32_t'
drtypes,←80        160        320
pref,←⊃⍪⌿{
rnk←≢shp←⍴dat←⍵⊃sym ⋄ dri←drtypes⍳⎕DR dat
atp←dri⊃atypes ⋄ ctp←dri⊃ctypes
fmt←{⎕PP←34 ⋄ 1289=⎕DR ⍵:'{',(csep 9 11○⍵),'}' ⋄ ⍕⍵}
dat←'¯'⎕R'-'∘fmt¨⎕UCS⍣(0=10|⎕DR dat)⊃⍣(0=≢,dat)⊢dat
nam←'cdf_l',⍕⍵
z ←⊂'static ',ctp,' ',nam,'_dat[] = {',(csep dat),'};'
z,←⊂'static struct cell_array ',nam,'_val = {'
z,←⊂'	CELL_ARRAY, 1, STG_HOST, ARR_',atp,','
z,←⊂'	',nam,'_dat, NULL, ',(⍕rnk),','
z,←⊂'	{',(csep shp,0),'}'
z,←⊂'};'
z,←⊂'static struct cell_array *',nam,' = &',nam,'_val;'
z,⊂''
}¨∪|n⌿⍨(t=A)∧k=1
⍝ We have a vector output for each node in the AST
zz←(≢p)⍴⊂'' ⋄ kk←(≢p)⍴⊂⍬ ⋄ _←{kk[⍺]←⊂⍵~⍺}⌸p
⍝ Z¯N: Error nodes
i←⍸(t=Z)∧k<0
zz[i],←{
line←highlight ⍵
('CHK(',(⍕|k[⍵]),', cleanup, ',line,');') ''
}¨i
⍝ A7/E6: Stranded Arrays and Indexing
i←⍸((t=A)∧k=7)∨(t=E)∧k=6
zz[i],←{
0=≢i:0⍴⊂''
dbg←highlight ⍵
tgt←⊃var_values ⍵ ⋄ tref←⊃var_refs ⍵ ⋄ vs←var_values⊢ks←⍵⊃kk
z ←check_vars⊢ks←⍵⊃kk
z,←⊂'CHK(mk_nested_array(',tref,', ',(⍕≢ks),'), cleanup, ',dbg,');'
z,←⊂''
z,←⊂'{'
z,←⊂'	struct cell_array **dat = ',tgt,'->values;'
z,←⊂''
z,←'	'∘,¨(⍳≢ks){'dat[',(⍕⍺),'] = retain_cell(',⍵,');'}¨vs
z,←⊂'}'
z,←(n[ks]>0)⌿{'release_array(',⍵,'); ',⍵,' = NULL;'}¨vs
z,⊂''
}¨i
⍝ S0/7: Initial and internal strand assignment
i←⍸t=S
zz[i],←{
0=≢i:0⍴⊂''
dbg←highlight ⍵ ⋄ tgt←⊃var_values ⍵ ⋄ lbl1 lbl2←'l',¨(⍕⍵)∘,¨⍕¨1 2
kc←⍕≢ks←⍵⊃kk ⋄ kv←var_values ks ⋄ kr←var_refs ks ⋄ kd←highlight¨ks
z ←{'release_array(',⍵,');'}¨kv
z,←⊂''
z,←⊂'if (',tgt,'->rank) {'
z,←⊂'	struct cell_func *pick;'
z,←⊂'	struct cell_array *idx;'
z,←⊂'	int32_t *idxv;'
z,←⊂''
z,←⊂'	CHKFN(mk_array_int32(&idx, 0), cleanup);'
z,←⊂'	idxv = idx->values;'
z,←⊂'	pick = cdf_prim.cdf_pick;'
z,←⊂''
z,←kd{'	CHK(pick->fptr_dya(',⍵,', idx, ',tgt,', pick), ',lbl1,', ',⍺,'); (*idxv)++;'}¨kr
z,←⊂''
z,←⊂lbl1,':'
z,←⊂'	release_array(idx);'
z,←⊂''
z,←⊂'	if (err)'
z,←⊂'		goto cleanup;'
z,←⊂'} else {'
z,←⊂'	struct cell_func *first;'
z,←⊂'	struct cell_array *val;'
z,←⊂''
z,←⊂'	first = cdf_prim.cdf_first;'
z,←⊂'	CHK(first->fptr_mon(&val, ',tgt,', first), ',lbl2,', ',dbg,');'
z,←'	'∘,¨kv,¨⊂' = retain_cell(val);'
z,←⊂''
z,←⊂lbl2,':'
z,←⊂'	release_array(val);'
z,←⊂''
z,←⊂'	if (err)'
z,←⊂'		goto cleanup;'
z,←⊂'}'
z,←(k[⍵]≠0)⌿''('release_array(',tgt,'); ',tgt,' = NULL;')
z,⊂''
}¨i
⍝ B: Non-option, non-null bindings
i←⍸(t=B)∧~k∊0 7
zz[i],←{
0=≢i:0⍴⊂''
tgt←⊃var_values ⍵ ⋄ dbg←highlight ⍵ ⋄ kv←⊃var_values ⍵⊃kk
z ←check_vars ⍵⊃kk
z ←⊂'retain_cell(',kv,'); release_cell(',tgt,');'
z,←⊂tgt,' = ',kv,';'
z,⊂''
}¨i
⍝ C: Closures for functions
i←⍸t=C
zz[i],←{
0=≢i:0⍴⊂''
ks←⍵⊃kk
ctyp←k[⍵]⊃'func' 'func' 'func' 'moper' 'doper'
vc←(≢ks)-fc←0 1 2 4 8[k[⍵]]
fs vs←{(fc↑⍵)(fc↓⍵)}ks
fids←var_refs fs ⋄ vids←{var_refs ⍵}vs[⍋n[vs]]
tgt←⊃var_values ⍵ ⋄ tref←⊃var_refs ⍵ ⋄ dbg←highlight ⍵
z ←⊂'CHK(mk_',ctyp,'(',tref,', ',(csep fids),', ',(⍕vc),'), cleanup, ',dbg,');'
z,←⊂''
z,←(⍳vc){tgt,'->fv[',(⍕⍺),'] = ',⍵,';'}¨vids
z,⊂''
}¨i
⍝ E¯1: Non-returning end of line statement
i←⍸(t=E)∧k=¯1
zz[i],←{
0=≢i:0⍴⊂''
vv←⊃var_values⊢vi←⊃⍵⊃kk
(n[vi]>0)⌿('release_cell(',vv,'); ',vv,' = NULL;')''
}¨i
⍝ E0: Returning end of line statement
i←⍸(t=E)∧k=0
zz[i],←{
0=≢i:0⍴⊂''
0≡≢⍵⊃kk:⊂'goto cleanup;'
kv←⊃var_values⊢ki←⊃⍵⊃kk
z ←check_vars ki
z ←((t[ki]=A)∨(n[ki]≠0))⌿⊂'*z = retain_cell(',kv,');'
z,←⊂'goto cleanup;'
z,⊂''
}¨i
⍝ E1: Monadic expression application
i←⍸(t=E)∧k=1
zz[i],←{
0=≢i:0⍴⊂''
tref←⊃var_refs ⍵ ⋄ tgt←⊃var_values ⍵ ⋄ dbg←highlight ⍵
fn y←var_values⊢fi yi←⍵⊃kk
z ←check_vars fi yi
z ←(n[⍵]<0)⌿⊂'tmp = ',tgt,';'
z,←⊂'CHK((',fn,'->fptr_mon)(',tref,', ',y,', ',fn,'), cleanup, ',dbg,');'
z,←(n[⍵]<0)⌿⊂'release_array(tmp); tmp = NULL;'
z,←(n[fi]>0)⌿⊂'release_func(',fn,'); ',fn,' = NULL;'
z,←(n[yi]>0)⌿⊂'release_array(',y,'); ',y,' = NULL;'
z,⊂''
}¨i
⍝ E2: Dyadic expression application
i←⍸(t=E)∧k=2
zz[i],←{
0=≢i:0⍴⊂''
tref←⊃var_refs ⍵ ⋄ tgt←⊃var_values ⍵ ⋄ dbg←highlight ⍵
x fn y←var_values⊢xi fi yi←⍵⊃kk
z ←check_vars xi fi yi
z ←(n[⍵]<0)⌿⊂'tmp = ',tgt,';'
z,←⊂'CHK((',fn,'->fptr_dya)(',tref,', ',x,', ',y,', ',fn,'), cleanup, ',dbg,');'
z,←(n[⍵]<0)⌿⊂'release_array(tmp); tmp = NULL;'
z,←(n[xi]>0)⌿⊂'release_array(',x,'); ',x,' = NULL;'
z,←(n[fi]>0)⌿⊂'release_func(',fn,'); ',fn,' = NULL;'
z,←(n[yi]>0)⌿⊂'release_array(',y,'); ',y,' = NULL;'
z,⊂''
}¨i
⍝ E3: Niladic application
i←⍸(t=E)∧k=3
zz[i],←{
0=≢i:0⍴⊂''
tref←⊃var_refs ⍵ ⋄ tgt←⊃var_values ⍵ ⋄ dbg←highlight ⍵
fn←⊃var_values⊢fi←⊃⍵⊃kk
z ←check_vars fi
z ←(n[⍵]<0)⌿⊂'tmp = ',tgt,';'
z,←⊂'CHK((',fn,'->fptr_mon)(',tref,', NULL, ',fn,'), cleanup, ',dbg,');'
z,←(n[⍵]<0)⌿⊂'release_array(tmp); tmp = NULL;'
z,←(n[fi]>0)⌿⊂'release_func(',fn,'); ',fn,' = NULL;'
z,⊂''
}¨i
⍝ E4: Assignment
i←⍸(t=E)∧k=4
zz[i],←{
0=≢i:0⍴⊂''
tgt←⊃var_values ⍵ ⋄ dbg←highlight ⍵
bxr←⊃var_refs ⊃⍵⊃kk ⋄ bxv x fn y←var_values⊢bi xi fi yi←⍵⊃kk
z ←check_vars xi fi yi
z ←⊂'tmp = ',bxv,';'
z,←⊂tgt,' = retain_cell(',y,');'
z,←⊂'CHK((',fn,'->fptr_dya)(',bxr,', ',x,', ',tgt,', ',fn,'), cleanup, ',dbg,');'
z,←⊂'release_array(tmp); tmp = NULL;'
z,←(n[xi]>0)⌿⊂'release_array(',x,'); ',x,' = NULL;'
z,←(n[fi]>0)⌿⊂'release_func(',fn,'); ',fn,' = NULL;'
z,←(n[yi]>0)⌿⊂'release_array(',y,'); ',y,' = NULL;'
z,⊂''
}¨i
⍝ Om: Monadic operators
i←⍸(t=O)∧k∊1 2
zz[i],←{
0=≢i:0⍴⊂''
lt←⊃ltyp←'array' 'func'⊃⍨k[⍵]=2
tref←'(struct cell_derf **)',⊃var_refs ⍵ ⋄ tgt←⊃var_values ⍵
dbg←highlight ⍵
x op←var_values⊢xi oi←⍵⊃kk
z ←check_vars xi oi
z ←(n[⍵]<0)⌿⊂'tmp = ',tgt,';'
z,←⊂'CHK(mk_derf(',tref,', ',op,'->fptr_',lt,'m, ',op,'->fptr_',lt,'d, 2), cleanup, ',dbg,');'
z,←⊂tgt,'->fv[0] = retain_cell(',op,');'
z,←⊂tgt,'->fv[1] = retain_cell(',x,');'
z,←(n[⍵]<0)⌿⊂'release_func(tmp); tmp = NULL;'
z,←(n[xi]>0)⌿⊂'release_',ltyp,'(',x,'); ',x,' = NULL;'
z,←(n[oi]>0)⌿⊂'release_moper(',op,'); ',op,' = NULL;'
z,⊂''
}¨i
⍝ Od: Dyadic operators
i←⍸(t=O)∧k∊4 5 7 8
zz[i],←{
0=≢i:0⍴⊂''
ltyp←'array' 'func'⊃⍨k[⍵]∊5 8
rtyp←'array' 'func'⊃⍨k[⍵]∊7 8
tref←'(struct cell_derf **)',⊃var_refs ⍵ ⋄ tgt←⊃var_values ⍵
dbg←highlight ⍵
x op y←var_values⊢xi oi yi←⍵⊃kk
fns←csep op∘,¨'->fptr_'∘,¨(⊃rtyp),¨(⊃ltyp),¨'md'
z ←check_vars xi oi yi
z ←(n[⍵]<0)⌿⊂'tmp = ',tgt,';'
z,←⊂'CHK(mk_derf(',tref,', ',fns,', 3), cleanup, ',dbg,');'
z,←⊂tgt,'->fv[0] = retain_cell(',op,');'
z,←⊂tgt,'->fv[1] = retain_cell(',x,');'
z,←⊂tgt,'->fv[2] = retain_cell(',y,');'
z,←(n[⍵]<0)⌿⊂'release_func(tmp); tmp = NULL;'
z,←(n[xi]>0)⌿⊂'release_',ltyp,'(',x,'); ',x,' = NULL;'
z,←(n[oi]>0)⌿⊂'release_doper(',op,'); ',op,' = NULL;'
z,←(n[yi]>0)⌿⊂'release_',rtyp,'(',y,'); ',y,' = NULL;'
z,⊂''
}¨i
⍝ Ox: Axis Operator and Variant Operator
i←⍸(t=O)∧k=¯1
zz[i],←{
0=≢i:0⍴⊂''
tref←'(struct cell_derf **)',⊃var_refs ⍵ ⋄ tgt←⊃var_values ⍵
dbg←highlight ⍵
aa ax←var_values⊢ai xi←⍵⊃kk
z ←check_vars ai xi
z ←(n[⍵]<0)⌿⊂'tmp = ',tgt,';'
z,←⊂'CHK(mk_derf(',tref,', ',aa,'->fptr_mon, ',aa,'->fptr_dya, 2), cleanup, ',dbg,');'
z,←⊂tgt,'->fv = ',aa,'->fv;'
z,←⊂tgt,'->opts = &',tgt,'->fv_[1];'
z,←⊂tgt,'->fv_[0] = retain_cell(',aa,');'
z,←⊂tgt,'->opts[0] = retain_cell(',ax,');'
z,←(n[⍵]<0)⌿⊂'release_func(tmp); tmp = NULL;'
z,←(n[ai]>0)⌿⊂'release_func(',aa,'); ',aa,' = NULL;'
z,←(n[xi]>0)⌿⊂'release_array(',ax,'); ',ax,' = NULL;'
z,⊂''
}¨i
⍝ B7: Option bindings
i←⍸(t=B)∧k=7
zz[i],←{
0=≢i:0⍴⊂''
tref←⊃var_refs ⍵ ⋄ tgt←⊃var_values ⍵ ⋄ dbg←highlight ⍵
opt←⊃var_names ⍵ ⋄ src←⊃var_values⊢si←⊃⍵⊃kk
z ←⊂'if (opts && opts->',opt,') {'
z,←⊂'	retain_cell(opts->',opt,');'
z,←⊂'	release_array(',tgt,');'
z,←⊂'	',tgt,' = opts->',opt,';'
z,←⊂'} else {'
z,← '	'∘,¨⊃⍪⌿(⍵=p)⌿zz
z,←⊂'	retain_cell(',src,');'
z,←⊂'	release_array(',tgt,');'
z,←⊂'	',tgt,' = ',src,';'
z,←(n[si]>0)⌿⊂'	release_array(',src,'); ',src,' = NULL;'
z,←⊂'}'
z,⊂''
}¨i
⍝ G0: Value guards
i←⍸t=G
zz[i],←{
0=≢i:0⍴⊂''
tgt←⊃var_values⊢ti←⊃⍵⊃kk ⋄ dbg←highlight ti
z ←⊂'TRC(guard_check(',tgt,'), ',dbg,');'
z,←(n[ti]>0)⌿⊂'release_array(',tgt,'); ',tgt,' = NULL;'
z,←⊂''
z,←⊂'if (err > 0)'
z,←⊂'	goto cleanup;'
z,←⊂''
z,←⊂'if (!err) {'
z,← '	'∘,¨⊃⍪⌿(⍵=p)⌿zz
z,←⊂'	err = -1;'
z,←⊂'	goto cleanup;'
z,←⊂'}'
z,←⊂''
z,←⊂'err = 0;'
z,⊂''
}¨i
⍝ FN: Non-zero functions
i←⍸(t=F)∧k≠0
zz[i],←{
0=≢i:0⍴⊂''
id←⊃var_values ⍵
atyp←'array' 'func'⊃⍨k[⍵]∊3 6 9 12 15 18 21
ddtyp←'' 'moper' 'doper'⊃⍨0 5 11⍸k[⍵]
aatyp←'array' 'func'⊃⍨k[⍵]∊8 9 10 14 15 16 20 21 22
wwtyp←'array' 'func'⊃⍨k[⍵]∊17 18 19 20 21 22
hassvs←0≠≢svs←⊃sv[⍵]
haslvs←0≠≢lvs←⊃lv[⍵]
hasfvs←0≠≢fvs←{⍵[⍋n[⍵]]}⊃fv[⍵]
hasopts←0≠≢opts←lvs⌿⍨k[lvs]=7
ism←k[⍵]∊2 3 5 6 8 9 11 12 14 15 17 18 20 21
isop←k[⍵]≥5
isdop←k[⍵]≥11
self←'cdf_self' 'cdf_deldel'⊃⍨isop
pref,←⊂'int ',id,'(struct cell_array **,'
pref,←(⊂'    struct cell_array *,')⌿⍨~ism
pref,←⊂'    struct cell_array *,'
pref,←⊂'    struct cell_func *);'
z ←⊂'int'
z,←⊂id,'(struct cell_array **z,'
z,←(⊂'    struct cell_array *cdf_alpha,')⌿⍨~ism
z,←⊂'    struct cell_array *cdf_omega,'
z,←⊂'    struct cell_func *cdf_self)'
z,←⊂'{'
z,←(⊂'	struct cell_',atyp,' *cdf_alpha;')⌿⍨ism
z,←(⊂'	struct cell_',ddtyp,' *cdf_deldel;')⌿⍨isop
z,←(⊂'	struct cell_',aatyp,' *cdf_alphaalpha;')⌿⍨isop
z,←(⊂'	struct cell_',wwtyp,' *cdf_omegaomega;')⌿⍨isdop
z,←'	'∘,¨decl_vars svs
z,←⊂'	void *tmp;'
z,←⊂'	int err;'
z,←⊂''
z,←⊂'	tmp = NULL;'
z,←(⊂'	cdf_alpha = NULL;')⌿⍨ism
z,←(⊂'	cdf_deldel = cdf_self->fv[0];')⌿⍨isop
z,←(⊂'	cdf_alphaalpha = cdf_self->fv[1];')⌿⍨isop
z,←(⊂'	cdf_omegaomega = cdf_self->fv[2];')⌿⍨isdop
z,←(⊂'')⌿⍨ism∨isop
z,←(⊂'	struct {')⌿⍨haslvs
z,←'		'∘,¨decl_vars lvs
z,←(⊂'	} loc_frm, *loc;')⌿⍨haslvs
z,←(⊂'')⌿⍨haslvs
z,←(⊂'	loc = &loc_frm;')⌿⍨haslvs
z,←(⊂'')⌿⍨haslvs
z,←(⊂'	struct lex_vars {')⌿⍨hasfvs
z,←'		'∘,¨1 decl_vars fvs
z,←(⊂'	} *lex;')⌿⍨hasfvs
z,←(⊂'')⌿⍨hasfvs
z,←(⊂'	lex = (struct lex_vars *)',self,'->fv;')⌿⍨hasfvs
z,←(⊂'')⌿⍨hasfvs
z,←(⊂'	struct opt_vars {')⌿⍨hasopts
z,←'		'∘,¨decl_vars opts
z,←(⊂'	} *opts;')⌿⍨hasopts
z,←(⊂'')⌿⍨hasopts
z,←(⊂'	opts = (struct opt_vars *)cdf_self->opts;')⌿⍨hasopts
z,←(⊂'')⌿⍨hasopts
z,←'	'∘,¨init_vars svs
z,←'	'∘,¨init_vars lvs
z,←⊂'	err = 0;'
z,←⊂''
z,←(⊂'	'),¨⊃⍪⌿(p=⍵)⌿zz
z,←⊂'	err = -1;'
z,←⊂''
z,←⊂'cleanup:'
z,←'	'∘,¨release_vars lvs
z,←'	'∘,¨release_vars svs
z,←(⊂'	release_',atyp,'(cdf_alpha);')⌿⍨ism
z,←⊂''
z,←⊂'	if (err)'
z,←⊂'		return err;'
z,←⊂''
⍝ z,←⊂'	TRC(chk_array_valid(*z), '
⍝ z,←⊂'	    ',(highlight ⍵),');'
z,←⊂'	return err;'
z,←⊂'}'
z,⊂''
}¨i
pref,←⊂''
⍝ F0: Initialization functions for namespaces
i←⍸(t=F)∧k=0
zz[i],←{
id←⊃var_names ⍵
z ←⊂'int ',id,'_flag = 0;'
z,←⊂''
z,←⊂(id,'_names')var_nmvec ⊃lv[⍵]
z,←⊂''
z,←⊂'EXPORT int'
z,←⊂id,'_init(void)'
z,←⊂'{'
z,←⊂'	struct ',id,'_loc *loc;'
z,←'	'∘,¨decl_vars ⍵⊃sv
z,←⊂'	void *tmp;'
z,←⊂'	int err;'
z,←⊂''
z,←⊂'	if (',id,'_flag)'
z,←⊂'		return 0;'
z,←⊂''
z,←⊂'	tmp = NULL;'
z,←⊂'	err = 0;'
z,←⊂'	',id,'_flag = 1;'
z,←⊂'	loc = &',id,';'
z,←⊂'	loc->__count = ',(⍕≢⊃lv[⍵]),';'
z,←⊂'	loc->__names = ',id,'_names;'
z,←⊂''
z,←⊂'	release_debug_info();'
z,←⊂''
z,←'	'∘,¨init_vars ⍵⊃sv
z,←'	'∘,¨init_vars ⍵⊃lv
z,←⊂''
z,←⊂'	CHKFN(cdf_prim_init(), cleanup);'
z,←⊂''
z,←'	'∘,¨⊃⍪⌿(p=⍵)⌿zz
z,←⊂''
z,←⊂'cleanup:'
z,←⊂'	if (err) {'
z,←'		'∘,¨release_vars ⍵⊃lv
z,←'		'∘,¨release_vars ⍵⊃sv
z,←⊂'	}'
z,←⊂''
z,←⊂'	return err;'
z,←⊂'}'
z,⊂''
}¨i
⍝ Export headers
header←{∊(⊃⍪⌿⍵),¨⊂⎕UCS 13 10}{
0=≢i:0⍴⊂''
id←⊃var_names ⍵
pref,←⊂'EXPORT struct ',id,'_loc ',id,';'
z ←⊂'struct ',id,'_loc {'
z,←⊂'	unsigned int __count;'
z,←⊂'	char **__names;'
z,←(⊂'	'),¨decl_vars ⊃lv[⍵]
z,←⊂'};'
z,←⊂''
z
}¨i
pref,←⊂''
⍝ Export functions
i←⍸(n<0)∧(t[p]=F)∧(k[p]=0)∧(t=O)∨(t∊B C)∧(k=2)
exp←⊃⍪⌿{
fn ns←var_names ⍵,p[⍵]
fnv←⊃var_values ⍵
z ←⊂'EXPORT int'
z,←⊂fn,'(struct cell_array **z, struct cell_array *l, struct cell_array *r)'
z,←⊂'{'
z,←⊂'	struct cell_func *self;'
z,←⊂'	struct ',ns,'_loc *loc;'
z,←⊂'	int err;'
z,←⊂''
z,←⊂'	CHKFN(',ns,'_init(), fail);'
z,←⊂''
z,←⊂'	loc = &',ns,';'
z,←⊂'	self = ',fnv,';'
z,←⊂''
z,←⊂'	if (l == NULL) {'
z,←⊂'		CHKIG(self->fptr_mon(z, r, self), fail);'
z,←⊂'	} else {'
z,←⊂'		CHKIG(self->fptr_dya(z, l, r, self), fail);'
z,←⊂'	}'
z,←⊂''
z,←⊂'fail:'
z,←⊂'	return err;'
z,←⊂'}'
z,←⊂''
z,←⊂'EXPORT int'
z,←⊂fn,'_dwa(void *z, void *l, void *r)'
z,←⊂'{'
z,←⊂'	return call_dwa(',fn,', z, l, r, "',fn,'");'
z,←⊂'}'
z,⊂''
}¨i
exp,←⊂'int'
exp,←⊂'main(int argc, char *argv[])'
exp,←⊂'{'
exp,←⊂'	struct cell_array *dbg;'
exp,←⊂'	int err;'
exp,←⊂''
exp,←⊃⍪⌿{⊂'	CHKFN(',(⊃var_names ⍵),'_init(), fail);'}¨⍸(t=F)∧k=0
exp,←⊂''
exp,←⊂'	print_cell_stats();'
exp,←⊂'	print_ibeam_stats();'
exp,←⊂''
exp,←⊂'	return 0;'
exp,←⊂''
exp,←⊂'fail:'
exp,←⊂'	dbg = get_debug_info();'
exp,←⊂'	printf("\n%s\n", (char *)dbg->values);'
exp,←⊂'	printf("ERROR %d\n", err);'
exp,←⊂'	release_debug_info();'
exp,←⊂'	return err;'
exp,←⊂'}'
exp,←⊂''
⍝ Warn about nodes that appear which we haven't generated
⍝ ⍞←(∨⌿msk)↑(⎕UCS 10)(⊣,⍨,)⍉⍪'Ungenerated nodes: ',⍕,∪(msk←zz∊⊂'')⌿N∆[t],∘⍕¨k
⍝ Assemble all the data together into a single character vector
data←∊(pref,(⊃⍪⌿zz[⍸p=⍳≢p]),exp),¨⊂⎕UCS 13 10
⍝ Return data+headers
data header
}
∇ {LIB}MK∆RTM path;src;vsbat;vsc;gcc;clang;codfns_h;CR;LF;data;header
⍎'LIB←'''''⌿⍨0=⎕NC'LIB'
src←⊃⎕NGET path,'/rtm/prim.apln'
echo←{⍺←⊢ ⋄ ⍺ ⍺⍺ ⍵⊣⍞←⍵⍵}
data header←'prim'GC echo 'G' TT echo 'C' PS echo 'P' ⊢ src
(path,'/rtm/prim.c')put data
(path,'/rtm/prim.h')put header
codfns_h←⊃⎕NGET path,'/rtm/codfns.h.template'
codfns_h,←CR LF←⎕UCS 13 10
codfns_h,←'/* Runtime primitives */',CR LF
codfns_h,←'#ifndef BUILD_CODFNS',CR LF
codfns_h,←header
codfns_h,←CR LF
codfns_h,←'DECLSPEC struct cdf_prim_loc cdf_prim;',CR LF
codfns_h,←'#endif',CR LF
codfns_h,←CR LF
(path,'/rtm/codfns.h')put codfns_h
→opsys WINDOWS LINUX MAC
WINDOWS:
vsbat←VS∆PATH,'\VC\Auxiliary\Build\vcvarsall.bat'
vsc←'%comspec% /C ""',vsbat,'" amd64'
vsc,←'  && cd "',path,'\rtm"'
vsc,←'  && cl /std:c17 /Zc:preprocessor /MP /W3 /wd4102 /wd4275'
vsc,←'    /DEBUG /O2 /Zc:inline /Zi /FS'
vsc,←'    /Fo".\\" /Fd"codfns.pdb"'
vsc,←'    /WX /MD /EHsc /nologo'
vsc,←'    /I"%AF_PATH%\include"'
vsc,←'    /D"NOMINMAX" /D"AF_DEBUG" /D"BUILD_CODFNS"'
vsc,←'    /D"_CRT_SECURE_NO_WARNINGS"'
vsc,←'    "*.c" /link /DLL /OPT:REF'
vsc,←'    /INCREMENTAL:NO /SUBSYSTEM:WINDOWS'
vsc,←'    /LIBPATH:"%AF_PATH%\lib"'
vsc,←'    /DYNAMICBASE "af',LIB,'.lib"'
vsc,←'    /OPT:ICF /ERRORREPORT:PROMPT'
vsc,←'    /TLBID:1 /OUT:"codfns.dll""'
⎕CMD ⎕←vsc
⎕CMD ⎕←'copy "',path,'\rtm\codfns.h" "',path,'\tests\"'
⎕CMD ⎕←'copy "',path,'\rtm\codfns.exp" "',path,'\tests\"'
⎕CMD ⎕←'copy "',path,'\rtm\codfns.lib" "',path,'\tests\"'
⎕CMD ⎕←'copy "',path,'\rtm\codfns.pdb" "',path,'\tests\"'
⎕CMD ⎕←'copy "',path,'\rtm\codfns.dll" "',path,'\tests\"'
→0
LINUX:
gcc ←'cd ''',path,'/rtm'''
gcc,←'  && gcc -std=c17 -O2 -g -Wall -fPIC -shared'
gcc,←'    -Wno-parentheses -Wno-misleading-indentation -Wno-unused-variable'
gcc,←'    -Wno-incompatible-pointer-types -Wno-missing-braces'
gcc,←'    -Wno-unused-but-set-variable'
gcc,←'    -DNOMINMAX -DAF_DEBUG -DBUILD_CODFNS'
gcc,←'    -I''',AF∆PREFIX,'/include'' -L''',AF∆PREFIX,'/lib64'''
gcc,←'    -o libcodfns.so *.c -lm -laf',LIB
⎕CMD ⎕←gcc
⎕CMD ⎕←'cp "',path,'/rtm/codfns.h" "',path,'/tests/"'
⎕CMD ⎕←'cp "',path,'/rtm/libcodfns.so" "',path,'/tests/"'
→0
MAC:
clang ←'cd ''',path,'/rtm'''
clang,←'  && clang -std=c99 -O2 -g -Wall -fPIC -shared'
clang,←'    -Wno-parentheses -Wno-misleading-indentation -Wno-unused-variable'
clang,←'    -Wno-incompatible-pointer-types -Wno-missing-braces'
clang,←'    -Wno-unused-but-set-variable'
clang,←'    -DNOMINMAX -DAF_DEBUG -DBUILD_CODFNS'
clang,←'    -I''',AF∆PREFIX,'/include'' -L''',AF∆PREFIX,'/lib'''
clang,←'    -o libcodfns.dylib *.c -lm -laf',LIB
⎕CMD ⎕←clang
⎕CMD ⎕←'cp "',path,'/rtm/codfns.h" "',path,'/tests/"'
⎕CMD ⎕←'cp "',path,'/rtm/libcodfns.dylib" "',path,'/tests/"'
→0
∇NS←{
MKA←{mka⊂⍵} ⋄ EXA←{exa ⍬ ⍵}
Display←{⍺←'Co-dfns' ⋄ W←w_new⊂⍺ ⋄ 777::w_del W
w_del W⊣W ⍺⍺{w_close ⍺:⍎'⎕SIGNAL 777' ⋄ ⍺ ⍺⍺ ⍵}⍣⍵⍵⊢⍵}
LoadImage←{⍺←1 ⋄ ~⎕NEXISTS ⍵:⎕SIGNAL 22 ⋄ loadimg ⍬ ⍵ ⍺}
SaveImage←{⍺←'image.png' ⋄ saveimg ⍵ ⍺}
Image←{~2 3∨.=≢⍴⍵:⎕SIGNAL 4 ⋄ (3≠⊃⍴⍵)∧3=≢⍴⍵:⎕SIGNAL 5 ⋄ ⍵⊣w_img ⍵ ⍺}
Plot←{2≠≢⍴⍵:⎕SIGNAL 4 ⋄ ~2 3∨.=1⊃⍴⍵:⎕SIGNAL 5 ⋄ ⍵⊣w_plot (⍉⍵) ⍺}
Histogram←{⍵⊣w_hist ⍵,⍺}
Rtm∆Init←{
_←'w_new'⎕NA'P ',⍵,'|w_new <C[]'
_←'w_close'⎕NA'I ',⍵,'|w_close P'
_←'w_del'⎕NA ⍵,'|w_del P'
_←'w_img'⎕NA ⍵,'|w_img <PP P'
_←'w_plot'⎕NA ⍵,'|w_plot <PP P'
_←'w_hist'⎕NA ⍵,'|w_hist <PP F8 F8 P'
_←'loadimg'⎕NA ⍵,'|loadimg >PP <C[] I'
_←'saveimg'⎕NA ⍵,'|saveimg <PP <C[]'
_←'exa'⎕NA ⍵,'|exarray >PP P'
_←'mka'⎕NA'P ',⍵,'|mkarray <PP'
_←'FREA'⎕NA ⍵,'|frea P'
_←'Sync'⎕NA ⍵,'|cd_sync'
0 0 ⍴ ⍬}
mkna←{'I ',⍺,'|',((,¨'∆⍙')⎕R'_del_' '_delubar_'⊢⍵),' P P P'}
mkf←{
fn←⍺,'|cdf_',((,¨'∆⍙')⎕R'_del_' '_delubar_'⊢⍵),'_dwa '
z←⊂'Z←{A}',⍵,' W;err;res'
z,←⊂':If 0=⎕NC''⍙.',⍵,'_mon'''
z,←⊂'       ''',⍵,'_mon''⍙.⎕NA''I ',fn,'>PP P <PP'''
z,←⊂'       ''',⍵,'_dya''⍙.⎕NA''I ',fn,'>PP <PP <PP'''
z,←⊂':EndIf'
z,←⊂':If 0=⎕NC''A'''
z,←⊂'       err res←⍙.',⍵,'_mon 0 0 W'
z,←⊂':Else'
z,←⊂'       err res←⍙.',⍵,'_dya 0 A W'
z,←⊂':EndIf'
z,←⊂'→0⌿⍨err<0'
z,←⊂'→ret⌿⍨err=0'
z,←⊂'emsg←(⎕UCS 13)@{⍵=⎕UCS 10}''UTF-8''⎕UCS ⎕UCS res'
z,←⊂'(emsg,(⎕UCS 13),⎕EM err)⎕SIGNAL err'
z,←⊂'ret:Z←res'
z
}
ns←#.⎕NS⍬ ⋄ _←'∆⍙'ns.⎕NS¨⊂⍬ ⋄ ∆ ⍙←ns.(∆ ⍙)
∆.names←(0⍴⊂''),(2=1⊃⍺)⌿0⊃⍺
fns←'Rtm∆Init' 'MKA' 'EXA' 'Display'
fns,←'LoadImage' 'SaveImage' 'Image' 'Plot' 'Histogram'
fns,←'soext' 'opsys' 'mkna'
_←∆.⎕FX∘⎕CR¨fns
∆.(decls←⍵∘mkna¨names)
_←ns.⎕FX¨(⊂''),⍵∘mkf¨∆.names
_ ←⊂'Z←Init'
_,←⊂'Z←Rtm∆Init ''',⍵,''''
_,←⊂'→0⌿⍨0=≢names'
_,←⊂'names ##.⍙.⎕NA¨decls'
_←∆.⎕FX _
ns
}
PS←{⍺←⊢
IN←⍵ ⋄ ENVN ENVT←⍺⊣⍬ ⍬
err←'EXPECTED SCALAR OR VECTOR INPUT'
1<≢⍴IN:err ⎕SIGNAL 11
err←'EXPECTED SIMPLE OR VECTOR OF VECTOR INPUT'
2<|≡IN:err ⎕SIGNAL 11
⍝ Basic character classes and names
CR LF←⎕UCS 13 10 ⋄ WS←⎕UCS 9 32
alp←'ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'
alp,←'ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïðñòóôõöøùúûüþ'
alp,←'∆⍙ⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏ'
num←⎕D ⋄ syna←'⍬⎕⍞#' ⋄ synb←'¯[]{}()'':⍺⍵⋄;←'
prmfs←'+-×÷|⌈⌊*⍟○!?~∧∨⍲⍱<≤=>≥≠≡≢⍴,⍪⌽⊖⍉↑↓⊂⊆⊃∊⍷∩∪⍳⍸⌷⍋⍒⍎⍕⊥⊤⊣⊢⌹∇→⌺','⍠←' '∘←'
prmmo←'¨⍨&⌶⌸' ⋄ prmdo←'∘.⍣⍠⍤⍥@⟜⊸' ⋄ prmfo←'/⌿\⍀←'
prms←prmfs,prmmo,prmdo,prmfo
⍝ Guarantee everything is LF-terminated
IN←LF@{⍵=CR}(~CR LF⍷IN)⌿IN←∊(⊆IN),¨LF
err←'PARSER EXPECTS CHARACTER ARRAY'
0≠10|⎕DR IN:err ⎕SIGNAL 11
⍝ Group input into lines as a nested vector
pos←(IN≠LF)⊆⍳≢IN
⍝ Mask potential strings
msk←(''''''∘⍷¨x)∨≠⍀¨''''=x←IN∘I¨pos
⍝ Remove comments
pos msk⌿¨⍨←⊂∧⍀¨msk∨'⍝'≠IN∘I¨pos
⍝ Check for unbalanced strings
lin←⍸⊃∘⌽¨msk
0≠≢lin:('UNBALANCED STRING','S'⌿⍨2≤≢lin)SIGNAL ∊(msk⌿¨pos)[lin]
⍝ Flatten parser representation
t←⊃0⍴⊂pos ⋄ t pos msk(∊,∘⍪⍨)←Z (⊃¨pos) 0
⍝ Tokenize strings
end←1+pos ⋄ t[i←⍸2<⌿0⍪msk]←C ⋄ end[i]←1+end[⍸2>⌿msk⍪0]
t pos end⌿⍨←⊂(t=0)⍲¯1⌽msk
⍝ ⋄ should be Z nodes/groups
t[⍸'⋄'=IN[pos]]←Z
⍝ Remove insignificant whitespace
t pos end⌿⍨←⊂~(t=0)∧(⊢∧1⌽⊢)IN[pos]∊WS
t pos end⌿⍨←⊂(t≠0)∨(~IN[pos]∊WS)∨⊃¯1 1∧.⌽⊂IN[pos]∊alp,num,'¯⍺⍵⎕.:'
⍝ Verify all open characters are valid
msk←~IN[pos]∊alp,num,syna,synb,prms,WS
∨⌿msk:'INVALID CHARACTER(S) IN SOURCE'SIGNAL msk⌿pos
⍝ This simplifies the following expressions
x←' '@{t≠0}IN[pos]
⍝ Tokenize numbers
dm∨←('.'=x)∧(¯1⌽dm)∨1⌽dm←x∊num
∨⌿msk←1<+⌿¨dm⊆'.'=x:'MULTIPLE . IN FLOAT'SIGNAL ∊msk/dm⊆pos
dm∨←('¯'=x)∧1⌽dm
∨⌿msk←('¯'=x)∧¯1⌽dm:'¯ CANNOT APPEAR BETWEEN DIGITS'SIGNAL msk⌿pos
∨⌿msk←1<+⌿¨dm⊆'¯'=x:'MULTIPLE ¯ IN NUMBER'SIGNAL ∊msk⌿dm⊆pos
∨⌿msk←('¯'=x)∧~dm:'ORPHANED ¯'SIGNAL msk⌿pos
dm∨←(msk←x∊'Ee')∧(¯1⌽dm)∧1⌽dm
dm←dm⍀∊{¯1↓1@(⊃⍸⍵)~⍵⍪0}¨dm⊆msk
dm∨←(msk←x∊'Jj')∧(¯1⌽dm)∧1⌽dm
dm←dm⍀∊{¯1↓1@(⊃⍸⍵)~⍵⍪0}¨dm⊆msk
(msk⌿dm)←∊∧⍀¨(msk←x∊alp,num)⊆dm
dm[⍸dm∧(x='.')∧(¯1⌽dm)⍱1⌽dm]←0
msk←∨⌿¨dm⊆dm∧(x='.')∧¯1⌽(~dm)∧x∊num
∨⌿msk:'AMBIGUOUS PLACEMENT OF NUMERIC FORM'SIGNAL ∊msk⌿dm⊆pos
msk←∨⌿¨'.'={1⊃(⍵⊆⍨~⍵∊'Ee'),2⍴⊂''}¨x⊆⍨rm←dm∧~x∊'Jj'
∨⌿msk:'NON-INTEGER EXPONENT'SIGNAL ∊msk⌿rm⊆pos
t[i←⍸2<⌿0⍪dm]←N ⋄ end[i]←end⌿⍨2>⌿dm⍪0
⍝ Tokenize variables
msk←(~dm)∧(t=0)∧x∊alp,num ⋄ t[i←⍸2<⌿0⍪msk]←V ⋄ end[i]←end⌿⍨2>⌿msk⍪0
⍝ Tokenize dfns formals
msk←3≤≢¨grp←(pos⊆⍨'⍺'=x),pos⊆⍨'⍵'=x
∨⌿msk:'AMBIGUOUS FORMALS'SIGNAL ∊msk⌿grp
msk←('⍺⍺'⍷x)∨'⍵⍵'⍷x ⋄ t[i←⍸msk]←P ⋄ end[i]+←1
t[⍸(~msk∨¯1⌽msk)∧x∊'⍺⍵']←A
⍝ Tokenize primitives and atoms
t[⍸x∊syna]←A ⋄ t[⍸(~dm)∧x∊prms]←P
msk←(x∊'⌶∇')∨msk∨¯1⌽msk←(~dm)∧⊃'⍠←' '∘←' '∘.'∨.⍷⊂x
end[⍸m2←2<⌿0⍪msk]←end⌿⍨2>⌿msk⍪0 ⋄ t[⍸msk∧~m2]←0
∨⌿msk←2<end[i]-pos[i←⍸msk∧x='∇']:{
'AMBIGUOUS ∇ CLUSTER'SIGNAL SELECT msk⌿i
}⍬
⍝ Mark depths of dfns regions and give F type, with } as a child
t[⍸'{'=x]←F ⋄ d←+⍀1 ¯1 0['{}'⍳x]
0<⊃⌽d:'MISSING CLOSING BRACE'SIGNAL pos[⊃⌽⍸(d=⊃⌽d)∧2<⌿0⍪d]
∨⌿0>d:'TOO MANY CLOSING BRACES'SIGNAL pos[⊃⍸0>d]
d←¯1⌽d
⍝ Check for out of context dfns formals
msk←(d=0)∧(t∊A P)∧x∊'⍺⍵'
∨⌿msk:'DFN FORMAL REFERENCED OUTSIDE DFNS'SIGNAL msk⌿pos
⍝ Mark trad-fns regions as tm
tm←(d=0)∧'∇'=x
∨⌿msk←Z≠t⌿⍨1⌽tm:'∇ MUST BE FIRST ON A LINE'SIGNAL lineof msk⌿pos
0≠⊃tm←¯1⌽≠⍀tm:'UNBALANCED TRAD-FNS'SIGNAL lineof pos[⊃⌽⍸2<⌿0⍪tm]
msk←Z≠t⌿⍨⊃1 ¯1∨.⌽⊂(2>⌿tm)⍪0
∨⌿msk:'TRAD-FNS END LINE MUST CONTAIN ∇ ALONE'SIGNAL lineof msk⌿pos
⍝ Flatten trad-fns headers
d[⍸msk←∊∨⍀¨(t=Z)⊂2<⌿tm⍪0]←0 ⋄ t[⍸msk∧x∊'{}']←P
⍝ Parse trad-fns into T type
t[⍸msk←2<⌿tm⍪0]←T ⋄ d+←tm∧~msk
⍝ Identify colons belonging to Labels
t[⍸tm∧(d=1)∧∊0,¨(<⍀∧∘~⊃)¨':'=1↓¨(t=Z)⊂x]←L
⍝ Tokenize Keywords
∨⌿msk←3∧⌿(':'=x)∧t=0:'TOO MANY COLONS'SIGNAL SELECT ⍸msk
t[⍸(':'=x)∧t=0]←K
ki←⍸(t=K)∧((1⌽t=K)∧~msk)∨(1⌽t=V)∧msk←(d=0)∨tm∧d=1
end[ki]←end[1+ki] ⋄ t[ki+1]←0
⍝ Tokenize system variables
si←⍸('⎕'=x)∧1⌽t=V ⋄ t[si]←S ⋄ end[si]←end[si+1] ⋄ t[si+1]←0
⍝ Delete all characters we no longer need from the tree
d tm t pos end(⌿⍨)←⊂(t≠0)∨x∊'()[]{};'
⍝ Tokenize labels
ERR←'LABEL MUST CONSIST OF A SINGLE NAME'
∨⌿msk←(Z≠t[li-1])∨V≠t[li←⍸1⌽lm←t=L]:ERR SIGNAL pos[(msk⌿li)∘.+¯1 0 1]
t[li]←L ⋄ d tm t pos end(⌿⍨)←⊂~lm
⍝ With tokens created, reify n field before tree-building
n←IN∘I¨pos+⍳¨end-pos
n←{¯1↓⍎¨⍵,⊂''''''}@{t=C}(⊂'')@{t∊Z F}⎕C@{t∊K S}(⊂⍬)@{n∊⊂,'⍬'}n
msk vals←⎕VFI ⍕n[i←⍸t=N]
~∧⌿msk:'CANNOT REPRESENT NUMBER'SIGNAL SELECT ⍸(t=N)⍀~msk
n[i]←vals
⍝ Split inheritance reference if necessary
msk←(t=K)∧¯1⌽(t=V)∧¯1⌽(t=K)∧n∊⊂':class'
tm d t n pos end msk⌿⍨←⊂1+msk ⋄ i←⍸2<⌿0⍪msk
t[i+1]←V ⋄ n[i]←1↑¨n[i] ⋄ n[i+1]←1↓¨n[i+1] ⋄ end[i]←pos[i+1]←pos[i]+1
⍝ Check that all keywords are valid
KW←'NAMESPACE' 'ENDNAMESPACE' 'END' 'IF' 'ELSEIF' 'ANDIF' 'ORIF' 'ENDIF'
KW,←'WHILE' 'ENDWHILE' 'UNTIL' 'REPEAT' 'ENDREPEAT' 'LEAVE' 'FOR' 'ENDFOR'
KW,←'IN' 'INEACH' 'SELECT' 'ENDSELECT' 'CASE' 'CASELIST' 'ELSE' 'WITH'
KW,←'ENDWITH' 'HOLD' 'ENDHOLD' 'TRAP' 'ENDTRAP' 'GOTO' 'RETURN' 'CONTINUE'
KW,←'SECTION' 'ENDSECTION' 'DISPOSABLE' 'ENDDISPOSABLE' 'CLASS' 'ENDCLASS'
KW,←'IMPLEMENTS' 'BASE' 'ACCESS' 'PROPERTY' 'ENDPROPERTY' 'FIELD' 'USING'
KW,←':' ''
KW,¨⍨←':' ⋄ KW←⎕C KW
msk←~KW∊⍨kws←n⌿⍨km←t=K
∨⌿msk:2'UNRECOGNIZED KEYWORD(S)'SIGNAL SELECT ⍸km⍀msk
⍝ Check that all namespaces/sections are top level
nssec←⎕C':NAMESPACE' ':ENDNAMESPACE' ':CLASS' ':ENDCLASS' ':SECTION' ':ENDSECTION'
msk←(kws∊nssec)∧km⌿tm
∨⌿msk:2'INVALID NAMESPACE/SECTION CONTEXT'SIGNAL SELECT ⍸km⍀msk
⍝ Verify system variables used
SYSV←,¨'Á' 'A' 'AI' 'AN' 'AV' 'ATX' 'AVU' 'BASE' 'CT' 'D' 'DCT' 'DIV' 'DM'
SYSV,←,¨'DMX' 'EXCEPTION' 'FAVAIL' 'FNAMES' 'FNUMS' 'FR' 'IO' 'LC' 'LX'
SYSV,←,¨'ML' 'NNAMES' 'NNUMS' 'NSI' 'NULL' 'PATH' 'PP' 'PW' 'RL' 'RSI'
SYSV,←,¨'RTL' 'SD' 'SE' 'SI' 'SM' 'STACK' 'TC' 'THIS' 'TID' 'TNAME' 'TNUMS'
SYSV,←,¨'TPOOL' 'TRACE' 'TRAP' 'TS' 'USING' 'WA' 'WSID' 'WX' 'XSI'
SYSF←,¨'ARBIN' 'ARBOUT' 'AT' 'C' 'CLASS' 'CLEAR' 'CMD' 'CONV' 'CR' 'CS' 'CSV'
SYSF,←,¨'CY' 'DF' 'DL' 'DQ' 'DR' 'DT' 'ED' 'EM' 'EN' 'EX' 'EXPORT'
SYSF,←,¨'FAPPEND' 'FCHK' 'FCOPY' 'FCREATE' 'FDROP' 'FERASE' 'FFT' 'IFFT'
SYSF,←,¨'FHIST' 'FHOLD' 'FIX' 'FLIB' 'FMT' 'FPROPS' 'FRDAC' 'FRDCI' 'FREAD'
SYSF,←,¨'FRENAME' 'FREPLACE' 'FRESIZE' 'FSIZE' 'FSTAC' 'FSTIE' 'FTIE'
SYSF,←,¨'FUNTIE' 'FX' 'INSTANCES' 'JSON' 'KL' 'LOAD' 'LOCK' 'MAP' 'MKDIR'
SYSF,←,¨'MONITOR' 'NA' 'NAPPEND' 'NC' 'NCOPY' 'NCREATE' 'NDELETE' 'NERASE'
SYSF,←,¨'NEW' 'NEXISTS' 'NGET' 'NINFO' 'NL' 'NLOCK' 'NMOVE' 'NPARTS'
SYSF,←,¨'NPUT' 'NQ' 'NR' 'NREAD' 'NRENAME' 'NREPLACE' 'NRESIZE' 'NS'
SYSF,←,¨'NSIZE' 'NTIE' 'NUNTIE' 'NXLATE' 'OFF' 'OR' 'PFKEY' 'PROFILE'
SYSF,←,¨'REFS' 'SAVE' 'SH' 'SHADOW' 'SIGNAL' 'SIZE' 'SR' 'SRC' 'STATE'
SYSF,←,¨'STOP' 'SVC' 'SVO' 'SVQ' 'SVR' 'SVS' 'TCNUMS' 'TGET' 'TKILL' 'TPUT'
SYSF,←,¨'TREQ' 'TSYNC' 'UCS' 'VR' 'VFI' 'WC' 'WG' 'WN' 'WS' 'XML' 'XT'
SYSF,←⊂,'PRINT_MEMSTATS'
SYSM←,¨,⊂'VEACH'
SYSD←,¨'OPT' 'R' 'S' 'AMBIV'
SYSV SYSF SYSM SYSD←⎕C '⎕',¨¨SYSV SYSF SYSM SYSD
msk←(t=S)∧~n∊SYSV,SYSF,SYSM,SYSD,⎕C¨ENVN
∨⌿msk:'INVALID SYSTEM NAME'SIGNAL SELECT ⍸msk
⍝ Introduce k field
k←2×t∊F
⍝ Kinds of atoms, characters, numbers, primitives, and system variables
k[⍸(t∊A C N)∨(t=S)∧n∊SYSV]←1
k[⍸((t=P)∧n∊,¨prmfs)∨(t=S)∧n∊SYSF]←2
k[⍸(n∊,¨prmmo,⊂'∘.')∨(t=S)∧n∊SYSM]←3
k[⍸(n∊,¨prmdo)∨(t=S)∧n∊SYSD]←4
k[⍸n∊,¨prmfo]←5
k[⍸n∊⊂'⌶⌶']←¯3
k[⍸n∊⊂'⌶⌶⌶']←¯4
k[⍸n∊⊂'⌶⌶⌶⌶']←¯1
⍝ Convert n field to symbols and add a symbol table
sym←∪('')(,'⍵')(,'⍺')'⍺⍺' '⍵⍵'(,'∇')'∇∇'⍬(,';'),n
n←-sym⍳n
⍝ Compute parent vector from d
p←D2P d
⍝ Compute the nameclass of dfns and set ∇∇ kind
k[∪p⌿⍨(t=P)∧n=¯3]←3 ⋄ k[∪p⌿⍨(t=P)∧n=¯4]←4
k[i]←k[p[i←⍸(t=P)∧n=¯6]]
⍝ We will often wrap a set of nodes as children under a Z node
gz←{
z←⍵↑⍨-0≠≢⍵ ⋄ ks←¯1↓⍵
t[z]←Z ⋄ p[ks]←⊃z ⋄ pos[z]←pos[⊃⍵] ⋄ end[z]←end[⊃⌽z,ks]
z
}
⍝ Nest top-level root lines as Z nodes
_←(gz 1⌽⊢)¨(t[i]=Z)⊂i←⍸d=0
'Non-Z top-level node'assert t[⍸p=⍳≢p]=Z:
⍝ Wrap all function expression bodies as Z nodes
_←p[i]{end[⍺]←end[⊃⌽⍵] ⋄ gz¨⍵⊂⍨1,¯1↓t[⍵]=Z}⌸i←⍸(t[p]∊T F)∧~t=L
'Non-Z/L dfns body node'assert t[⍸t[p]=F]∊Z L:
⍝ Parse the first line of a trad-fn as an H node
⍝ N M S A R L Z X Y←(9⍴2)⊤k ⋄ N M←0(2*16)⊤n
t[⍸(≠p)∧t[p]=T]←H
∨⌿msk←(n=-sym⍳⊂,'←')∧(≠p)∧t[p]=H:'EMPTY RETURN HEADER'SIGNAL SELECT ⍸msk
∨⌿msk←(n=-sym⍳⊂,';')∧(≠p)∧t[p]=H:'MISSING SIGNATURE'SIGNAL SELECT ⍸msk
msysv←'⎕IO' '⎕ML' '⎕CT' '⎕PP' '⎕PW' '⎕RTL' '⎕FR' '⎕PATH' '⎕RL' '⎕DIV' '⎕TRAP' '⎕USING'
msk←(t[p]=H)∧~(t=V)∨(n∊-sym⍳,¨'←(){};')∨(t=S)∧n∊-sym⍳⎕C¨msysv
∨⌿msk:'INVALID TRAD-FNS HEADER TOKEN'SIGNAL SELECT ⍸msk
_←p[i]{
0=≢i:0
nt←'←(){};V'['←(){};'⍳⊃¨sym[|n[⍵]]] ⋄ k[⍵⌿⍨nt≠'V']←¯99
k[⍺]←0 ⋄ n[⍺]←0
~∧⌿msk←(nt↓⍨x←nt⍳';')∊'V;':'BAD LOCAL DECLARATION'SIGNAL SELECT msk⌿x↓⍵
⊃⌽+⍀('('=nt)-')'=nt←x↑nt:'UNBALANCED HEADER'SIGNAL SELECT (≢nt)↑⍵
ti←p[⍺] ⋄ ki←ti,⍺,(≢nt)↑⍵ ⋄ zt st←¯2↑(⊂''),'←'(≠⊆⊢)nt
0=≢st:'EMPTY SIGNATURE'SIGNAL SELECT (≢nt)↑⍵
k[⍺]+←4×hsz←'←'∊nt ⋄ k[⍺]+←64×shy←'{'=⊃zt ⋄ k[⍺]+←256×stz←'('∊zt
~∧⌿'V'=x↓(-x←shy+stz)↓zt:'BAD RETURN SPEC'SIGNAL SELECT (≢zt)↑⍵
n[⍺]+←stz×(2*16)×zc←+⌿'V'=zt
k[⍺]+←128×str←')'=⊃⌽st ⋄ k[⍺]+←32×amb←'{'=⊃st
k[⍺]+←hsr←1<≢st ⋄ n[⍺]+←str×rc←hsr⌈str×+⌿∧⍀'V'=1↓⌽st
st←(amb↑1↑1↓st),(3×amb)↓(-rc+2×str)↓st
6=cs←(,'V')'VV' '(VV)' 'V(VV)' '(VVV)' 'V(VVV)'⍳⊂st:{
'BAD TRAD-FNS HEADER'SIGNAL SELECT (≢nt)↑⍵
}⍵
k[⍺]+←cs⊃0 2 8 10 24 26
fi←zc++⌿1 1 2 2 2 2×(hk←⌽(9⍴2)⊤k[⍺])[1 2 3 5 6 8]
k[⍵[fi+1+(⌈⌿1 2×hk[3 4])+str+⍳rc]]←1
k[⍵[hk[1]↑fi-1+amb+2×hk[3]]]←1
k[⍵[shy+stz+⍳zc]]←1
n[p[⍺]]←n[fi⊃⍵] ⋄ k[fi⊃⍵]←¯99 ⋄ k[p[⍺]]←1++⌿hk[0 3 4]
0}⌸i←⍸t[p]=H
n t k pos end⌿⍨←⊂msk←(t∊0 P V)⍲k=¯99 ⋄ p←(⍸~msk)(⊢-1+⍸)msk⌿p
⍝ Drop/eliminate any Z nodes that are empty or blank
_←p[i]{msk[⍺,⍵]←~∧⌿IN[pos[⍵]]∊WS}⌸i←⍸(t[p]=Z)∧p≠⍳≢p⊣msk←t≠Z
n t k pos end(⌿⍨)←⊂msk ⋄ p←(⍸~msk)(⊢-1+⍸)msk⌿p
⍝ Parse :Namespace syntax into M nodes
nss←(t=K)∧n∊-sym⍳⎕C⊂':NAMESPACE' ⋄ nse←(t=K)∧n∊-sym⍳⎕C⊂':ENDNAMESPACE'
ERR←':NAMESPACE KEYWORD MAY ONLY APPEAR AT BEGINNING OF A LINE'
∨⌿msk←Z≠t⌿⍨1⌽nss:ERR SIGNAL SELECT ⍸msk
ERR←'NAMESPACE DECLARATION MAY HAVE ONLY A NAME OR BE EMPTY'
msk←(Z≠t⌿⍨¯1⌽nss)∧(V≠t⌿⍨¯1⌽nss)∨Z≠t⌿⍨¯2⌽nss
∨⌿msk:ERR SIGNAL SELECT ⍸msk
ERR←':ENDNAMESPACE KEYWORD MUST APPEAR ALONE ON A LINE'
∨⌿msk←Z≠t⌿⍨⊃1 ¯1∨.⌽⊂nse:ERR SIGNAL SELECT ⍸msk
t[nsi←⍸1⌽nss]←M ⋄ t[nei←⍸1⌽nse]←-M
n[i]←n[2+i←⍸(t=M)∧V=2⌽t] ⋄ end[nsi]←end[nei]
x←⍸p=⍳≢p ⋄ d←+⍀(t[x]=M)+-t[x]=-M
0<⊃⌽d:':NAMESPACE NOT CLOSED'SIGNAL lineof pos[x[⊃⌽⍸(d=⊃⌽d)∧2<⌿0⍪d]]
∨⌿0>d:'EXCESSIVE :ENDNAMESPACE'SIGNAL lineof pos[x[⊃⍸d<0]]
p[x]←x[D2P ¯1⌽d]
msk←~nss∨((¯1⌽nss)∧t=V)∨nse∨1⌽nse
t k n pos end⌿⍨←⊂msk ⋄ p←(⍸~msk)(⊢-1+⍸)msk⌿p
⍝ Parse guards to (G (Z ...) (Z ...))
_←p[i]{
0=+⌿m←K=t[⍵]:⍬
⊃m:'EMPTY GUARD TEST EXPRESSION'SIGNAL pos[⊃⍵]
1<+⌿m:'TOO MANY GUARDS'SIGNAL pos[m⌿⍵]
t[⍺]←G ⋄ p[ti←gz⊃tx cq←2↑(⊂⍬)⍪⍨⍵⊂⍨1,¯1↓m]←⍺ ⋄ k[ti]←1
ci←≢p ⋄ p,←⍺ ⋄ t k pos end⍪←0 ⋄ n,←0 ⋄ gz cq,ci
0}⌸i←⍸t[p[p]]=F
⍝ Delete keywords we can't handle
t k n pos end⌿⍨←⊂msk←t≠K ⋄ p←(⍸~msk)(⊢-1+⍸)msk⌿p
⍝ Parse brackets and parentheses into ¯1 and Z nodes
_←p[i]{
x←IN[pos[⍵]]
pd←+⍀(x∊'[(')+-pc←x∊'])'
0<⊃⌽pd:'MISMATCHED PARENS/BRACKETS'SIGNAL pos[⍵⌿⍨⌽∧⍀⌽pd=⊃⌽pd]
∨⌿0>pd:'MISMATCHED PARENS/BRACKETS'SIGNAL pos[⍵⌿⍨∨⍀pd<0]
pcp←pc⌿pp←D2P ¯1⌽pd
msk←x[pcp]≠'[('[pt←')'=pc⌿x]
∨⌿msk:'OVERLAPPING PAREN/BRACKET'SIGNAL pos[⍵[(⍸,pp⌿⍨)pc⍀msk]]
p[⍵]←(⍺,⍵)[1+¯1@{⍵=⍳≢⍵}pp]
t[⍵[pcp]]←¯1 Z[pt] ⋄ end[⍵[pcp]]←end[pc⌿⍵]
0}⌸i←⍸(t[p]=Z)∧p≠⍳≢p
t k n pos end⌿⍨←⊂msk←~IN[pos]∊')' ⋄ p←(⍸~msk)(⊢-1+⍸)msk⌿p
⍝ Convert ; groups within brackets into Z nodes
_←p[i]{
k[z←⊃⍪⌿gz¨g←⍵⊂⍨¯1⌽IN[pos[⍵]]∊';]']←1
t[z]←Z P[m←1=≢¨g] ⋄ n[m⌿z]←-sym⍳⊂,';'
0}⌸i←⍸t[p]=¯1
⍝ Convert formal nodes ⍺/⍵ and system variables to P nodes
t[⍸(t=S)∨(t=A)∧n∊¯1 ¯2]←P
⍝ Convert M nodes to F0 nodes
t←F@{t=M}t
⍝ Parse niladic tokens to A0 nodes
t[i←⍸n∊-sym⍳,¨'⎕⍞']←A ⋄ k[i]←0
⍝ Unify A1, N, and C tokens to A1 nodes
t k(⊣@(⍸t∊N C))⍨←A 1
⍝ Mark binding primitives
bp←n∊-sym⍳,¨'←' '⍠←' '∘←'
⍝ Check for empty bindings
i←⍸(t[p]=Z)∧p≠⍳≢p
∨⌿msk←bp[j←i⌿⍨≠p[i]]:{'EMPTY ASSIGNMENT TARGET'SIGNAL SELECT msk⌿p[j]}⍬
∨⌿msk←bp[j←i⌿⍨⌽≠⌽p[i]]:{'EMPTY ASSIGNMENT VALUE'SIGNAL SELECT msk⌿p[j]}⍬
⍝ We use vb to link variables to their binding
vb←¯1⍴⍨≢p ⋄ vb[i]←i←⍸(t=T)∨t[p]=H
⍝ Wrap binding values in Z nodes and link
nz←(≢p)+⍳≢bi←bp[i]⌿⊃i km←⍪⌿p[i]{(⍺⍪⍵)(0,1∨⍵)}⌸i←⍸(t[p]=Z)∧p≠⍳≢p
p,←(np≥≢p)⌿¯1⌽np←(bp[i]∨~km)⌿nz@{bp[i]}i
t k n pos end,←(≢nz)⍴¨Z 0 0(1+pos[bi])(end[p[bi]])
p[km⌿i]←np[¯1+km⌿+⍀¯1⌽bp[i]∨~km]
vb,←bt←i⌿⍨1⌽bp[i]
⍝ Enclosing frames and lines for all nodes
rz←p I@{(t[⍵]∊G H Z)⍲(t[p[⍵]]∊F G T)∨p[⍵]=⍵}⍣≡⍳≢p
r←I@{t[0⌈⍵]=G}⍨I@{rz∊p[i]⊢∘⊃⌸i←⍸t[p]=G}⍨¯1@{~t[⍵]∊F G T}p[rz]
⍝ Link dfns bound names to canonical binding
bm←(t[r]∊F G)∧(t=V)∨(t=A)∧k∊0
bm←{bm⊣p[i]{bm[⍺]←(V ¯1≡t[⍵])∨∧⌿bm[⍵]}⌸i←⍸(~bm[p])∧t[p]=Z}⍣≡bm
bm[⍸(≠p)∧(t=P)∧(n=¯2)∧(t[p[p]]=F)∧1⌽n=-sym⍳⊂,'←']←1
vb[msk⌿⍸bm]←i⌿⍨msk←¯1≠i←(nz,¯1)[bt⍳⍸msk⍪0][bm⌿+⍀0⍪msk←2>⌿bm]
⍝ Mark lexical scope of non-variable primitives and trad-fns locals
lx←(≢p)⍴0 ⋄ lx[⍸t=P]←3 ⋄ lx[⍸(t=F)∨(t=P)∧n∊-1+⍳6]←4
⍝ Link local variables to bindings
i←⍸t∊T V ⋄ i←i[⍋n[i],r[i],pos[rz[i]],⍪end[rz[i]]-pos[i]]
b←(0,i[⍸bm])[1+bm⍸⍥⍸~bm←vb[i]≠¯1] ⋄ i⌿⍨←~bm
vb[i]+←(1+b)∧(n[i]=n[b])∧r[i]=r[b]
⍝ Compute bindings and set of free variables
fb←⍸(t=T)∨(t[p]=H)∨(t=V)∧t[0⌈vb]=Z
fr←n[fb],⍪r[fb] ⋄ fb fr⌿⍨←⊂≠fr ⋄ fb,←¯1
i←⍸(t=V)∧vb=¯1 ⋄ ir←n[i],⍪r[r][i] ⋄ fvr←r[i] ⋄ fvi←i ⋄ lx[i]←1
⍝ Link free variables to bindings
_←{vb[i]←j←fb[fr⍳ir] ⋄ i ir⌿⍨←⊂j=¯1 ⋄ fvr,←⊢/ir ⋄ fvi,←i ⋄ ir[;1]←r[⊢/ir]}⍣≡⊢/ir
⍝ Handle specific known structural forms for assignment/binding
vb[msk⌿bt]←nz⌿⍨msk←((≠p)∨¯1⌽((t∊P C F)∧k∊2 3 5)∨(t=P)∧n=-sym⍳⊂,'.')[bt]
j←j[⍋p[j←⍸(t[p]=Z)∧p≠⍳≢p]]
bm←bm∨((t[j]=¯1)∨(t[j]∊F P)∧k[j]∊3 5)∧1⌽bm←n[j]=-sym⍳⊂,'←'
msk←1⌽((k[j]=2)∧t[j]∊F P)∧1⌽bm
msk∨←((≠p[j])∨¯1⌽(t[j]=P)∧k[j]>1)∧1⌽((t[j]=¯1)∨(k[j]=5)∧t[j]∊F P)∧1⌽bm
k[j←j⌿⍨msk∧t[j]∊V Z]←1 ⋄ vb[j]←j
⍝ Link shadowed variables to bindings
cg←⍸(t=V)∧(t[r]=T)∧t[0⌈vb]=T ⋄ ir←(I@{t[0⌈⍵]≠T}⍣≡⍨r)[i]
_←{
vb[i]⌈←x←fb[fr⍳n[i],⍪ir] ⋄ i ir⌿⍨←⊂x=¯1 ⋄ fvr,←ir ⋄ fvi,←i
msk←vb[cg]∘.=ir ⋄ i←i[(≢i)|⍸,msk] ⋄ ir←r[cg]⌿⍨+/msk
ir}⍣≡ir
⍝ Link global free variables to F0(H) header
rt←I⍣≡⍨r ⋄ j←i⌿⍨≠rt[i],⍪n[i] ⋄ ih←(≢p)+⍳≢ph←∪rt[j]
p,←ph ⋄ rt,←r,←rt[ph] ⋄ t k n vb lx pos end,←(≢ih)⍴¨H 0 0 ¯1 0(pos[ph])(pos[ph]+1)
jv←(≢p)+⍳≢j ⋄ p,←ih[ph⍳rt[j]] ⋄ r,←rt[j] ⋄ t k n rt vb lx pos end(⊣,I)←⊂j
vb[i]←jv[(rt[jv],⍪n[jv])⍳rt[i],⍪n[i]]
⍝ Link bindings to their 1st assignments
fb←⍸(t=V)∧(t[p]≠H)∧t[r]=T
fb←(≠n[fb],⍪r[fb])⌿fb←fb[⍋n[fb],r[fb],pos[rz[fb]],⍪end[rz[fb]]-pos[fb]]
fz←(i,¯1)[fb⍳⍥(p∘I)⍨i←⍸(t=Z)∧vb≠¯1]
fr←n[fb],⍪r[fb] ⋄ fh←n[i],⍪r[i←⍸t[p]=H]
fx←n[fb],r[fb],pos[rz[fb]],⍪end[rz[fb]]-pos[fb]
jx←r[cg],pos[rz[cg]],⍪end[rz[cg]]-pos[cg]
_←{
fvr fvz←(⊂~fr∊⍥↓fh)⌿¨fr fz
rc←+/msk←vb[cg]∘.=fvr[;1] ⋄ jn←fvr[(⊃⌽⍴fvr)|⍸,msk;0]
fx⍪←jn,rc⌿jx ⋄ fr⍪←jn,⍪rc⌿r[cg] ⋄ fz⍪←fvz[(≢fvz)|⍸,msk]
fr fz fx⌿⍨←⊂(≠fx[x;])[⍋x←⍋fx]
fx}⍣≡fx
vb[i]←(fz,¯1)[fr⍳n[i],⍪r[i]]
vb[i]←(fz,¯1)[(⊣/fr)⍳n[i←⍸(t[p]=H)∧vb=¯1]]
⍝ Create closures for functions and trad-fn references
i←cg,⍸(t∊F T)∧k≠0 ⋄ fvi fvr⌿⍨←⊂(k[fvr]≠0)∧≠n[fvi],⍪fvr ⋄ k[cg]←k[vb[cg]]
np←(≢p)+⍳≢i ⋄ p r fvi I⍨←⊂np@i⊢⍳≢p
p,←i ⋄ t k n vb r lx pos end(⊣,I)←⊂i ⋄ t[i]←C
p,←fvr ⋄ t k n vb lx pos end(⊣,I)←⊂fvi ⋄ r,←r[fvr] ⋄ rz,←rz[fvr]
msk←vb[cg]∘.=fvr ⋄ i←fvi[(≢fvi)|⍸,msk] ⋄ ir←cg⌿⍨+/msk
p,←ir ⋄ t k n vb lx pos end(⊣,I)←⊂i ⋄ r,←r[ir] ⋄ rz,←rz[ir]
⍝ Specialize functions to specific formal binding types
rc←(≢p)⍴1 ⋄ isa isd←⊣@p⍨¨↓(⊂3 7)⌷(9⍴2)⊤k
rc←1 1 2 4 8[k[i]]@(i←⍸(t=F)∨isa∧t=T)⊢rc
rc←1 1 1 2 4[k[i]]@(i←⍸(t=T)∧~isa)⊢rc
_←{r[⍵]⊣x×←rc[⍵]}⍣≡r⊣x←rc ⋄ j←(+⍀x)-x ⋄ ro←∊⍳¨x
p t k n r vb lx rc isa isd pos end⌿⍨←⊂x
p r{j[⍺]+⍵}←⊂⌊ro÷rc ⋄ vb[i]←j[vb[i]]+⌊ro[i]÷(x⌿x)[i]÷x[vb[i←⍸vb>0]]
k[i]←0 1 2 4 8[k[i]](⊣+|)ro[i←⍸(t=F)∨(t=T)∧isa]
k[i]←0 1 2 4 8[k[i]](⊣+isd[i]+2×|)ro[i←⍸(t=T)∧~isa]
⍝ Link monadic dfns ⍺ formals to ⍺← bindings
msk←(n=¯2)∧k[r]∊2+2×⍳7 ⋄ j←(⍸msk)~i←msk[i]⌿i←vb⌿⍨(t=Z)∧vb≠¯1
vb[j]←(i,¯1)[(r[i],⍪n[i])⍳r[j],⍪n[j]]
⍝ Unbound variables are lx=¯1
lx[⍸(t=V)∧(vb=¯1)∧t[p]≠H]←¯1
⍝ Mark formals with their appropriate kinds and scopes
k[⍸(t=P)∧n=¯2]←0
k[i]←(0 0,14⍴1)[k[r[i←⍸(t=P)∧(n∊¯1 ¯2)∧vb=¯1]]]
k[i]←(¯16↑12⍴2⌿1 2)[k[r[i←⍸(t=P)∧n=¯3]]]
k[i]←(¯16↑4⌿1 2)[k[r[i←⍸(t=P)∧n=¯4]]]
i←i[⍋p[i←⍸t[p]=H]] ⋄ jp←p[i[j←⍸≠p[i]]] ⋄ hk←(9⍴2)⊤k[jp] ⋄ hn←0(2*16)⊤n[jp]
zc←hk[6;]⌈hn[0;]×hk[0;]
iy←i[∊hk[8;]⌿(j+zc++⌿hk[4 5 7;])+⍳¨hk[8;]⌈hn[1;]×hk[1;]]
ix←i[hk[7;]⌿j+zc]
iz←i[∊hk[6;]⌿j+⍳¨zc]
id←(hk[5;]⌿hk[4;])⌿1+im←hk[5;]⌿j+zc+hk[7;] ⋄ im←i[im] ⋄ id←i[id]
k[iz,iy,ix]←1 ⋄ k[im]←(¯16↑12⍴2⌿1 2)[k[r[im]]] ⋄ k[id]←(¯16↑4⌿1 2)[k[r[id]]]
lx[im,id,iz,ix,iy]←4
⍝ Error if brackets are not addressing something
∨⌿msk←(≠p)∧t=¯1:{
EM←'BRACKET SYNTAX REQUIRES FUNCTION OR ARRAY TO ITS LEFT'
EM SIGNAL SELECT ⍸msk
}⍬
⍝ Infer the type of groups and variables
t[⍸(t=P)∧n=¯2]←V ⋄ v←⍸(t=V)∧(k=0)∧vb≥0
zp←p[zi←{⍵[⍋p[⍵]]}⍸(t[p]=Z)∧(k[p]=0)∧t≠¯1] ⋄ za←zi⌿⍨≠zp ⋄ zc←zi⌿⍨⌽≠⌽zp ⋄ z←p[za]
_←{
zb←(⌽≠⌽p[zb])⌿zb←zi⌿⍨(zp∊z)∧(k[zi]≠1)∨(≠zp)∧k[zi]=1
nk←k[za]×(k[za]≠0)∧za=zc
nk+←3×(nk=0)∧k[za]∊3 4
nk+←(|k[zc])×(nk=0)∧(k[zc]∊¯3 ¯4)∨(t[zb]=P)∧n[zb]=-sym⍳⊂,'.'
nk+←2×(nk=0)∧(k[zc]∊2 3 5)∨4=|k[zb]
nk+←(nk=0)∧((t[zc]=A)∨1=|k[zc])∧(t[zb]=V)⍲k[zb]=0
k[z]←nk ⋄ k[v]←k[vb[v]]
z za zc⌿⍨←⊂nk=0 ⋄ v⌿⍨←k[v]=0
v z}⍣≡⍬
k[⍸(t∊V Z)∧k=0]←1 ⋄ t[⍸(t=V)∧n=¯2]←P
⍝ Enclose V+[X;...] in Z nodes for parsing
i km←⍪⌿p[i]{(⍺⍪⍵)(0,1∨⍵)}⌸i←⍸(t[p]=Z)∧p≠⍳≢p
msk←km∧(t[i]∊A)∨((t[i]∊P V Z)∧k[i]=1)∨(t[i]=P)∧n[i]=-sym⍳⊂,'.'
msk∧←(0,(2>⌿msk⍪0)⌿1⌽t[i]=¯1)[+⍀2<⌿0⍪msk]
msk∨←(t[i]=¯1)∧(¯1⌽msk)∧1⌽msk
msk∧←(0,gm⌿km⍲k[i]=4)[+⍀gm←2<⌿0⍪msk]
j←i⌿⍨jm←(t[i]=¯1)∧msk∨¯1⌽msk ⋄ np←(≢p)+⍳≢j ⋄ p←(np@j⍳≢p)[p] ⋄ p,←j
t k n lx pos end(⊣,I)←⊂j ⋄ t[j]←Z ⋄ k[j]←1
p[msk⌿i]←j[msk⌿+⍀jm]
⍝ Parse Namespace References as Nk(Nk(...), E)
i←i[⍋p[i←⍸(t[p]=Z)∧p≠⍳≢p]]
j←i⌿⍨msk←(t[i]=P)∧(n[i]=-sym⍳⊂,'.')∧(1⌽msk)∨¯1⌽msk←(1=|k[i])∧p[i]=1⌽p[i]
∨⌿m2←msk∧(¯1⌽msk)∨p[i]≠1⌽p[i]:'EMPTY NAMESPACE REFERENCE'SIGNAL SELECT m2⌿i
p[m2⌿i]←i⌿⍨¯2⌽m2←msk∧2⌽msk
p[i⌿⍨¯1⌽msk]←j
p[m2⌿i]←i⌿⍨¯1⌽m2←(1⌽msk)∧~¯1⌽msk
t[j]←N ⋄ k[j]←k[i⌿⍨¯1⌽msk]
⍝ Wrap non-array bindings as B2+(V, Z)
i←i[⍋p[i←⍸(t[p]=Z)∧p≠⍳≢p]] ⋄ j←⍸(n[i]∊-sym⍳,¨'←' '∘←')∧⊃¯1 1∧.⌽⊂k[i]≥2
p[(jt←i[j-1]),jv←i[j+1]]←,⍨ij←i[j] ⋄ t[ij]←B ⋄ k[ij]←k[jv] ⋄ lx[ij]←lx[jt]
pos[ij]←pos[jt] ⋄ end[ij]←end[jv]
⍝ Mark F[X] forms with k=4
_←p[i]{
⊃m←t[⍵]=¯1:'SYNTAX ERROR:NOTHING TO INDEX' SIGNAL SELECT ⍵
k[⍵⌿⍨m∧¯1⌽(k[⍵]∊2 3 5)∨¯1⌽k[⍵]=4]←4
0}⌸i←⍸(t[p]=Z)∧(p≠⍳≢p)∧k[p]∊1 2
⍝ Parse plural value sequences to A7 nodes
i←|i⊣km←0<i←∊p[i](⊂-⍤⊣,⊢)⌸i←⍸(t[p]=Z)∨(t[p]=¯1)∧k[p]=4
msk∧←⊃1 ¯1∨.⌽⊂msk←km∧(t[i]=A)∨(t[i]∊N P V Z)∧k[i]=1
np←(≢p)+⍳≢ai←i⌿⍨am←2>⌿msk⍪0 ⋄ p←(np@ai⍳≢p)[p] ⋄ p,←ai
t k n lx pos end(⊣,I)←⊂ai
t k n lx pos(⊣@ai⍨)←A 7 0 0(pos[i⌿⍨km←2<⌿0⍪msk])
p[msk⌿i]←ai[¯1++⍀km⌿⍨msk←msk∧~am]
⍝ Rationalize F[X] syntax
i←p[j←⍸(t[p]=¯1)∧k[p]=4]
i≢∪i:{
msg←'UNEXPECTED COMPOUND AXIS EXPRESSION'
99 msg SIGNAL SELECT {⊃⍺⌿⍨1<≢⍵}⌸i
}⍬
p[j]←p[i] ⋄ t[i]←P ⋄ lx[i]←3 ⋄ end[i]←1+pos[i]
⍝ Wrap V[X;...] expressions as A¯1 nodes
i←⍸t=¯1 ⋄ p←(p[i]@i⍳≢p)[p] ⋄ t[p[i]]←A ⋄ k[p[i]]←¯1
p t k n lx pos end⌿⍨←⊂t≠¯1 ⋄ p(⊣-1+⍸⍨)←i
⍝ Parse ⌶* nodes to V nodes
i km←⍪⌿p[i]{(⍺⍪⍵)(0,1∨⍵)}⌸i←⍸p∊p[j←⍸pm←(t=P)∧n∊ns←-sym⍳,¨'⌶' '⌶⌶' '⌶⌶⌶' '⌶⌶⌶⌶']
∨⌿msk←(i∊j)∧¯1⌽km∧(t[i]=A)⍲k[i]=1:{
msg←'INVALID ⌶ SYNTAX'
msg SIGNAL SELECT i⌿⍨msk∨¯1⌽msk
}⍬
vi←i⌿⍨1⌽msk←i∊j ⋄ pi←msk⌿i
t[vi]←V ⋄ k[vi]←2 3 4 1[ns⍳n[pi]] ⋄ lx[vi]←5 ⋄ end[vi]←end[pi]
p t k n lx pos end⌿⍨←⊂~pm ⋄ p(⊣-1+⍸⍨)←⍸pm
⍝ Group function and value expressions
i km←⍪⌿p[i]{(⍺⍪⍵)(0,1∨⍵)}⌸i←⍸(t[p]=Z)∧(p≠⍳≢p)∧k[p]∊1 2
⍝ Mask dyadic operator right operands
dm←(¯1⌽(k[i]=4)∧t[i]∊C N P V Z)∧km∧~k[i]∊0 3 4
⍝ Refine schizophrenic types
k[i⌿⍨(k[i]=5)∧dm∨¯1⌽(~km)∨(~dm)∧k[i]∊¯1 0 1 6 7]←2 ⋄ k[i⌿⍨k[i]=5]←3
⍝ Mask and verify monadic and dyadic operator left operands
jm←(t[i]=P)∧n[i]∊-sym⍳⊂,'∘.'
∨⌿msk←jm∧1⌽(~km)∨k[i]∊3 4:{
'MISSING OPERAND TO ∘.'SIGNAL SELECT msk⌿i
}⍬
∨⌿msk←jm∧1⌽k[i]≠2:{
'∘. REQUIRES FUNCTION OPERAND'SIGNAL SELECT msk⌿i
}⍬
mm←(~jm)∧(k[i]=3)∧(t[i]∊C N P V Z)∧(¯2⌽dm⍲km)∧¯1⌽km∧~k[i]∊0 4
⍝ Parse function expressions
msk←jm∨dm∨mm ⋄ np←(≢p)+⍳xc←≢oi←msk⌿i ⋄ p←(np@oi⍳≢p)[p]
p,←oi ⋄ t k n lx pos end(⊣,I)←⊂oi
jl←¯1⌽jm ⋄ ml←(jm∧2⌽mm)∨(~jl)∧1⌽mm ⋄ dl←(jm∧3⌽dm)∨(~jl)∧2⌽dm
p[g⌿i]←oi[(g←(~msk)∧(1⌽dm)∨om←jl∨ml∨dl)⌿(xc-⌽+⍀⌽msk)-jl]
p[g⌿oi]←(g←msk⌿om)⌿1⌽oi ⋄ t[oi]←O ⋄ n[oi]←0
pos[oi]←pos[g⌿i][msk⌿¯1++⍀g←jm∨(~msk)∧ml∨dl] ⋄ end[jm⌿i]←end[jl⌿i]
ol←1+(k[i⌿⍨1⌽om]=4)∨k[i⌿⍨om]∊2 3 ⋄ or←(msk⌿dm)⍀1+k[dm⌿i]=2
k[oi]←3 3⊥↑or ol
⍝ Parse value expressions
i km←⍪⌿p[i]{(⍺⍪⍵)(0,(2≤≢⍵)∧1∨⍵)}⌸i←⍸(t[p]=Z)∧(k[p]=1)∧p≠⍳≢p
am←km∧(t[i]=A)∨(t[i]≠O)∧k[i]=1 ⋄ fm←fm∧1⌽am∨fm←km∧(t[i]=O)∨(t[i]≠A)∧k[i]=2
i km msk m2⌿⍨←⊂msk∨(~km)∨(¯2⌽m2)∨¯1⌽msk←m2∨fm∧~¯1⌽m2←am∧1⌽fm
i km msk m2⌿⍨←⊂km∨1⌽km
t,←E⍴⍨xc←+⌿msk ⋄ k,←msk⌿msk+m2 ⋄ n,←xc⍴0 ⋄ lx,←xc⍴0
pos,←pos[msk⌿i] ⋄ end,←end[p[msk⌿i]]
p,←msk⌿¯1⌽(i×~km)+km×x←¯1+(≢p)++⍀msk ⋄ p[km⌿i]←km⌿x
⍝ Unparsed Z nodes become Z¯2 syntax error nodes
k[⍸(t=Z)∧(k=2)∧(t[p]=E)∧k[p]=6]←¯2
k[zs⌿⍨1<1⊃zs zc←↓⍉p[i],∘≢⌸i←⍸(t[p]=Z)∧p≠⍳≢p]←¯2
k[p[⍸(t[p]=Z)∧(k[p]=1)∧(t=O)∨(t∊B C N P V Z)∧k≠1]]←¯2
k[p[⍸(t[p]=Z)∧(k[p]=2)∧(t∊A E)∨(t∊B C N P V Z)∧k≠2]]←¯2
k[p[⍸(t[p]=Z)∧(k[p]∊3 4)∧(t∊A E O)∨(t∊B C N P V Z)∧k≠k[p]]]←¯2
i←p[⍸(t[p]=G)∧(≠p)∧(~t∊A E)∧k≠1] ⋄ t[i]←Z ⋄ k[i]←¯2
_←{p[⍵]⊣msk∧←msk[⍵]}⍣≡p⊣msk←(t[p]=Z)⍲k[p]=¯2
p t k n lx pos end⌿⍨←⊂msk ⋄ p(⊣-1+⍸⍨)←⍸~msk
⍝ Include parentheses in source range
ip←p[i←⍸(t[p]=Z)∧n[p]∊-sym⍳⊂,'('] ⋄ pos[i]←pos[ip] ⋄ end[i]←end[ip]
⍝ Eliminate non-error Z nodes from the tree
zi←p I@{t[p[⍵]]=Z}⍣≡ki←⍸msk←(t[p]=Z)∧t≠Z
p←(zi@ki⍳≢p)[p] ⋄ t k n lx pos end(⊣@zi⍨)←t k n lx pos end I¨⊂ki
p t k n lx pos end⌿⍨←⊂msk←msk⍱(t=Z)∧k≠¯2 ⋄ p(⊣-1+⍸⍨)←⍸~msk
⍝ Merge simple arrays into single A1 nodes
msk←((t=A)∧0=≡¨sym[|0⌊n])∧(t[p]=A)∧k[p]=7
pm←(t=A)∧k=7 ⋄ pm[p]∧←msk ⋄ msk∧←pm[p]
k[p[i←⍸msk]]←1 ⋄ _←p[i]{0=≢⍵:0 ⋄ n[⍺]←-sym⍳sym∪←⊂⍵}⌸sym[|n[i]]
p t k n lx pos end⌿⍨←⊂~msk ⋄ p←(⍸msk)(⊢-1+⍸)p
⍝ All A1 nodes should be lexical scope 6
lx[⍸(t=A)∧k=1]←6
⍝ Check for bindings/assignments without targets
bp←(t=P)∧n∊-sym⍳,¨'←' '⍠←' '∘←'
∨⌿msk←bp∧((k=2)∧(t[p]=E)⍲k[p]=2)∨(k=3)∧(t[p][p]=E)⍲k[p][p]=2:{
ERR←'MISSING ASSIGNMENT TARGET'
ERR SIGNAL SELECT p[⍸msk∧k=2],p[p][⍸msk∧k=3]
}⍬
⍝ Convert assignment expressions to E4 nodes, bindings to B nodes
i←p[⍸bp∧k=2] ⋄ k[i]←4
msk←(≠p)∧(em←(t[p]=E)∧k[p]=4)∧am←(t∊P V)∨(t=A)∧k∊0 7
m2←(⌽≠⌽p)∧am∧em[p]∧t[p]=N
i←p[j←⍸msk],p[p[j2←⍸m2]] ⋄ t[i]←B ⋄ k[i]←1 ⋄ lx[i]←lx[j,j2]
i←p[p][⍸bp∧k=3] ⋄ k[i]←4
n[p[i]]←n[i←⍸msk←bp∧t[p]=B] ⋄ p t k n lx pos end⌿⍨←⊂~msk ⋄ p←i(⊢-1+⍸)p
⍝ Rationalize V[X;...] → E2(V, P2([), E6)
i←i[⍋p[i←⍸(t[p]=A)∧k[p]=¯1]] ⋄ msk←~2≠⌿¯1,ip←p[i] ⋄ ip←∪ip ⋄ nc←2×≢ip
t[ip]←E ⋄ k[ip]←2 ⋄ n[ip]←0 ⋄ p[msk⌿i]←msk⌿(≢p)+1+2×¯1++⍀~msk
p,←2⌿ip ⋄ t,←nc⍴P E ⋄ k,←nc⍴2 6 ⋄ n,←nc⍴-sym⍳,¨'[' '' ⋄ lx,←nc⍴3 0
pos,←2⌿pos[ip] ⋄ end,←∊(1+pos[ip]),⍪end[ip] ⋄ pos[ip]←pos[i⌿⍨~msk]
⍝ Check for nested ⍠← forms
∨⌿msk←(t=B)∧(n∊-sym⍳⊂'⍠←')∧t[p]≠F:{
ERR←'⍠← MUST BE THE LEFTMOST FORM IN AN UNGUARDED EXPRESSION'
ERR SIGNAL SELECT ⍸msk
}⍬
⍝ Compute exports
msk←(≠p)∧t[p]=B
i←⍸(k[I@{t[⍵]≠F}⍣≡⍨p]=0)∧(t=C)∨(t=V)∧msk[p I@{~msk[⍵]}⍣≡⍳≢p]
xn←sym[|n[i]] ⋄ xt←k[i]
⍝ Sort AST by depth-first pre-order traversal
d i←P2D p ⋄ p d t k n lx pos end I∘⊢←⊂i ⋄ p←i⍳p
(p d t k n lx pos end)(xn xt)sym IN
}
TT←{
(p d t k n lx pos end)exp sym IN←⍵
⍝ Convert primitive niladic references to E3(P2) forms
i←⍸(t=P)∧(k=1)∧'⎕⍞'∊⍨⊃¨sym[|n]
p,←i ⋄ t n lx pos end(⊣,I)←⊂i ⋄ k,←(≢i)⍴2 ⋄ t[i]←E ⋄ k[i]←3 ⋄ n[i]←0
⍝ Compute reference scope
r←I@{t[⍵]≠F}⍣≡⍨p
⍝ Convert ⎕NC calls to static A1 nodes
pi←p[i←⍸mi←(t[p]=E)∧(t=P)∧n=-sym⍳⊂'⎕nc'] ⋄ j←⍸mj←(p∊pi)∧~mi ⋄ x←⍸mx←p∊j
∨⌿msk←k[pi]≠1:'MUST APPLY ⎕NC MONADICALLY'SIGNAL SELECT msk⌿pi
∨⌿msk←(t[j]≠A)∨~k[j]∊1 7:{
ERR←'ONLY LITERAL ARGUMENTS TO ⎕NC ARE SUPPORTED'
16 ERR SIGNAL SELECT msk⌿j
}⍬
∨⌿msk←(t[x]≠A)∨k[x]≠1:{
ERR←'ONLY SIMPLE/NESTED CHAR VECTORS TO ⎕NC ARE SUPPORTED'
16 ERR SIGNAL SELECT msk⌿x
}⍬
ncvar←'⍺' '⍺⍺' '⍵⍵'
ncmap←(0 0 0)(0 0 0)(0 0 0)(2 0 0),,⍉⊃∘.,⌿(0 2)(2 3)(0 2 3)
vx←x,j1←j⌿⍨k[j]=1 ⋄ vp←p[p[x]],p[j1]
_←vp{n[⍺]←-sym⍳sym∪←⊂(k[r[⍺]]⊃ncmap)[ncvar⍳sym[|n[⍵]]]}⌸⍣(0≠≢vx)⊢vx
t[pi]←A ⋄ k[pi]←1 ⋄ lx[pi]←6
p t k n lx r pos end⌿⍨←⊂~msk←mi∨mj∨mx ⋄ p r(⊣-1+⍸⍨)←⊂⍸msk
⍝ Convert O*(F, [, A) to Ox(F, A)
i←⍸msk←(t[p]=O)∧n=-sym⍳⊂,'[' ⋄ k[p[i]]←¯1
p t k n lx r pos end⌿⍨←⊂~msk ⋄ p r(⊣-1+⍸⍨)←⊂i
⍝ axfns←,¨'⌷↓,'
⍝ 0≠≢i←⍸(≠p)∧(t[p]=O)∧(k[p]=¯1)∧~n∊-sym⍳axfns:{
⍝ 	ERR←2 'FUNCTION DOES NOT SUPPORT AXIS OPERATOR'
⍝	ERR SIGNAL SELECT i
⍝ }⍬
⍝ Mark ⍠← bindings as kind 7
k[⍸(t=B)∧n=-sym⍳⊂'⍠←']←7
⍝ Convert B strand targets to B0, S0, and S7 nodes
msk←~(≠p)∧(t[p]=B)∧(t=A)∧k=7 ⋄ i⌿⍨←~msk[p I@{msk[⍵]}⍣≡i←⍸(t=A)∧k=7]
t[i]←S ⋄ k[i,ip←p[i←⍸(t=S)∧t[p]=B]]←0 ⋄ n[ip]←0
⍝ Merge B node bindings
n lx{⍺[⍵]@(p[⍵])⊢⍺}←⊂⍸msk←(≠p)∧(t∊V P)∧t[p]=B
p t k n lx r pos end⌿⍨←⊂~msk ⋄ p r(⊣-1+⍸⍨)←⊂⍸msk
⍝ Mark mutated bindings
rn←r,⍪n ⋄ rni←rn[i←⍸msk←(t∊B E V S)∧(lx∊0 1)∧n<¯6;] ⋄ mu←(≢i)⍴0
j←⍸msk∧(t[p]=C)∨(t=E)∧k=4
_←{mu[⍸rni∊⍥↓rn[⍵;]]←1 ⋄ i⌿⍨rni∊⍥↓r[r[z]],⍪n[z←⍵⌿⍨lx[⍵]=1]}⍣≡j
ci←p[fi←⍸(t=F)∧k≠0]
mu←msk⍀1@{(↓rni)∊⊃⍪⌿{n[⍵],¨⍨fi⌿⍨ci=p[⍵]}¨i⌿⍨⍵∧t[p[i]]=C}⍣≡mu
⍝ Delete ⍺← forms for dyadic specializations
msk←p(⊢∧I⍨)⍣≡~(t=B)∧(n=¯2)∧k[r]∊3+2×⍳7
p t k n lx mu r pos end⌿⍨←⊂msk ⋄ p r(⊣-1+⍸⍨)←⊂⍸~msk
⍝ Mark functions with their internal ⍺ type
⍝    0 1 2 3 4 5 6  7  8  9 10 11 12 13 14 15
k[i]←0 1 2 4 5 7 8 10 11 13 14 16 17 19 20 22[k[i←⍸t=F]]
∨⌿msk←2<k[i←i⌿⍨≠r[i←⍸(t=B)∧n=¯2]]:{
ERR←'⍺ MAY ONLY BE BOUND TO ARRAYS OR FUNCTIONS'
16 ERR SIGNAL SELECT msk⌿i
}⍵
k[r[i]]+←2=k[i]
⍝ Lift dfns to the top-level
p,←n[i]←(≢p)+⍳≢i←⍸(t=F)∧p≠⍳≢p ⋄ t k n lx mu pos end r(⊣,I)←⊂i
p r I⍨←⊂n[i]@i⊢⍳≢p ⋄ t[i]←V ⋄ k[i]←3+5 11⍸k[i]
⍝ Wrap expressions as binding or return statements
i←(⍸(~t∊F G)∧t[p]=F),¯1~⍨p[i]{⊃⌽2↑⍵,¯1}⌸i←⍸t[p]=G
p t k n lx mu r pos end⌿⍨←⊂m←2@i⊢1⍴⍨≢p
p r i I⍨←⊂j←(+⍀m)-1 ⋄ n←j I@(0≤⊢)n ⋄ p[i]←j←i-1
k[j]←-(k[r[j]]=0)∨0@{(⌽≠⌽p×p≠⍳≢p)[j]}(t[j]=B)∨(t[j]=E)∧k[j]=4
t[j]←E
⍝ Convert print bindings to E1(P2(⎕⍞), ∘∘∘)
i←p[j←⍸(≠p)∧(t[p]=B)∧(t=A)∧k=0]
t[i]←E ⋄ k[i]←1 ⋄ n[i]←0 ⋄ t[j]←P ⋄ k[j]←2 ⋄ lx[j]←3
⍝ Convert E4 nodes to have their assigned target as the first child
p t k n lx mu r pos end⌿⍨←⊂1+msk←(t=E)∧k=4
i←(+⍀1+msk)-1 ⋄ p r{⍵[⍺]}←⊂i ⋄ n[j]←i[n[j←⍸n>0]] ⋄ p[j←i-1]←i←msk⌿i
n[i]←0 ⋄ t[j]←V ⋄ k[j]←1 ⋄ mu[j]←1
⍝ Allocate named targets in the n field for bound application nodes
msk←((t[p]=B)∧~k[p]∊0 7)∧(t∊C E O)∨((t=A)∧k=7)∨(t=B)∧~k∊0 7
msk[p⌿⍨(t[p]=B)∧(t∊V P)∨(t=A)∧k=1]←0 ⋄ i←⍸msk
n mu lx{⍺[⍵]@i⊢⍺}←⊂p[i] ⋄ i←⍸msk←(~msk)∧(⍳≢p)∊p[i] ⋄ p←(p[i]@i⍳≢p)[p]
p t k n lx mu r pos end⌿⍨←⊂~msk ⋄ p r(⊣-1+⍸⍨)←⊂i ⋄ n[j]←i(⊢-1+⍸)n[j←⍸n>0]
⍝ Allocate frame variables for unbound application results
msk←((t=B)∧k=0)∨((t[p]=B)⍲k[p]=0)∧(k≠0)∧(t∊C E O)∨(t∊A S)∧k=7
pi←p[i←⍸msk∧n≥0] ⋄ d←⊃P2D p ⋄ msk←(t=E)∧k∊0 ¯1 ⋄ lx[i]←6
cg←(pi∘.=i)∨(∘.=⍨pi)∨(∘.<⍨i)∧(∘.>⍨d[i])∧∘.=⍨p I@{~msk[⍵]}⍣≡i
cg∨←i∘.=(t[ppi]=B)∧(k[ppi]=0)∧ppi←p[pi]
cg∧←∘.=⍨t[i]∊C O ⋄ cg∨←⍉cg ⋄ cg∧←~∘.=⍨⍳≢i
wgt←?0⍴⍨≢i
_←{
mis←wgt{wgt←⍺ ⋄ mis←⍵
wgt×←~mis∨←f←wgt>cg⌈.×wgt ⋄ 0=+⌿f:mis ⋄ wgt×←~cg∨.∧f
wgt ∇ mis}0⍴⍨≢i
0=+⌿mis:⍵ ⋄ wgt×←~mis ⋄ ⊢n[mis⌿i]←1+⍵
}⍣≡0
⍝ Link miscellaneous nodes
n[i←⍸(t[p]=E)∧(k[p]=0)∧(t=E)∨((t=A)∧k=7)∨(t=B)∧k≠7]←0 ⋄ lx[i]←6
n[i]←n[p[i←⍸(t[p]=B)∧(k[p]=0)∧(~t∊V P)∧(t=A)⍲k=1]] ⋄ lx[i]←lx[p[i]]
n[p[i]]←n[i←⍸(t[p]=E)∧k[p]=¯1] ⋄ lx[p[i]]←lx[i]
⍝ Add V nodes for each application node in preparation for lifting
msk←((t[p]=B)⍲k[p]=0)∧(t∊B C O S)∨((t=E)∧k>0)∨(t=A)∧k=7 ⋄ i←(+⍀1+msk)-1
p t k n lx mu r pos end⌿⍨←⊂1+msk ⋄ p r{⍵[⍺]}←⊂i ⋄ n[j]←i[n[j←⍸n>0]]
j←¯1+msk⌿i ⋄ k[j⌿⍨(t[j]∊A E S)∨(t[j]=B)∧k[j]=0]←1 ⋄ k[j⌿⍨t[j]=O]←2 ⋄ t[j]←V
⍝ Lift and flatten expressions
i←⍸(t∊B C E G O S Z)∨(t=A)∧k≠1
msk←~(t∊F G)∨((t=B)∧k=7)∨gm←(t[p]=G)∧~(t=V)∨((t=A)∧k=1)∨(t=E)∧k=0
p[i]←p[x←p[p] I@{gm[p[⍵]]}p I@{msk[p[⍵]]}⍣≡p I@{gm[⍵]}i]
⍝ j←p I@{(t[p[⍵]]=G)∧~(t[⍵]=V)∨((t[⍵]=A)∧k[⍵]=1)∨(t[⍵]=E)∧k[⍵]=0}i
⍝ p[i]←p[x←p I@{(t[x]∊F G)⍱(t[x]=B)∧k[x←p[⍵]]=7}⍣≡j]
p t k n lx mu r pos end{⍺[⍵]@i⊢⍺}←⊂j←(⌽i)[⍋⌽x] ⋄ p←(i@j⍳≢p)[p]
i←⍸(t=S)∨(t=B)∧k=0
p t k n lx mu r pos end{⍺[⍵]@i⊢⍺}←⊂j←(⌽i)[⍋⌽+⍀¯1⌽t[i]=B] ⋄ p←(i@j⍳≢p)[p]
⍝ Remove dead code paths: Empty B0; post-Z¯2 nodes
_←p[i]{msk[⍵]←∨⍀¯1⌽msk[⍵]}⌸i←⍸(p≠⍳≢p)∧t[p]∊F G⊣msk←(t=Z)∧k=¯2
k[p⌿⍨(t[p]=B)∧k[p]=0]←1 ⋄ msk∨←(t=B)∧k=0
msk←{1@(n⌿⍨⍵∧(t=V)∧(lx=4)∧n∊⍸t=F)⊢⍵∨⍵[p]}⍣≡msk
p t k n lx mu r pos end⌿⍨←⊂~msk
p r(⊣-1+⍸⍨)←⊂i←⍸msk ⋄ n[j]←i(⊢-1+⍸)n[j←⍸n>0]
⍝ Compute a function's local, free, and stack variables
lv←(≢p)⍴⊂⍬ ⋄ fv←(≢p)⍴⊂⍬ ⋄ sv←(≢p)⍴⊂⍬
lv[r[i]],←i←i⌿⍨≠(r,⍪n)[i←⍸(t∊B S V)∧(lx=0)∧n<0;]
typ←1@(⍸(t∊A E S)∨(t=B)∧k=0)⊢2@(⍸t=O)⊢k[i]@(i←⍸t∊B C V)⊢(≢p)⍴0
sv[r[i]],←i←i⌿⍨≠(r,n,⍪typ)[i←⍸(lx=6)∧n>0;]
fv[p[i]],←i←⍸(t=V)∧(t[p]=C)∧n<0
fv[n[i]]←fv[p[i←⍸(t=V)∧(t[p]=C)∧n≥0]]
⍝ Disambiguate schizophrenic functions
i←⍸(t=P)∧(k=2)∧n∊ns←-sym⍳,¨'/⌿\⍀←'
sym∪←∪'//' '⌿⌿' '\\' '⍀⍀' '←←'[ns⍳∪n[i]]
n[i]←(-sym⍳'//' '⌿⌿' '\\' '⍀⍀' '←←')[ns⍳n[i]]
⍝ Symbol mapping between primitives and runtime names
syms ←0⍴⊂''       ⋄ nams ←0 3⍴⊂''
syms,←⊂,'+'       ⋄ nams⍪←'add'        'conjugate'     'plus'
syms,←⊂,'-'       ⋄ nams⍪←'sub'        'negate'        'minus'
syms,←⊂,'×'       ⋄ nams⍪←'mul'        'sign'          'times'
syms,←⊂,'÷'       ⋄ nams⍪←'div'        'recip'         'divide'
syms,←⊂,'*'       ⋄ nams⍪←'exp'        'exponent'      'power'
syms,←⊂,'⍟'       ⋄ nams⍪←'log'        'natlog'        'logarithm'
syms,←⊂,'|'       ⋄ nams⍪←'res'        'absolute'      'residue'
syms,←⊂,'⌊'       ⋄ nams⍪←'min'        'floor_array'   'minimum'
syms,←⊂,'⌈'       ⋄ nams⍪←'max'        'ceil_array'    'maximum'
syms,←⊂,'○'       ⋄ nams⍪←'cir'        'pitimes'       'trig'
syms,←⊂,'!'       ⋄ nams⍪←'fac'        'factorial'     'binomial'
syms,←⊂,'~'       ⋄ nams⍪←'not'        'notscl'        'without'
syms,←⊂,'∧'       ⋄ nams⍪←'and'        'andmon'        'logand'
syms,←⊂,'∨'       ⋄ nams⍪←'lor'        'lormon'        'logor'
syms,←⊂,'⍲'       ⋄ nams⍪←'nan'        'nanmon'        'lognan'
syms,←⊂,'⍱'       ⋄ nams⍪←'nor'        'normon'        'lognor'
syms,←⊂,'<'       ⋄ nams⍪←'lth'        'lthmon'        'lessthan'
syms,←⊂,'≤'       ⋄ nams⍪←'lte'        'sortup'        'lesseql'
syms,←⊂,'='       ⋄ nams⍪←'eql'        'eqlmon'        'equal'
syms,←⊂,'≥'       ⋄ nams⍪←'gte'        'sortdown'      'greatereql'
syms,←⊂,'>'       ⋄ nams⍪←'gth'        'gthmon'        'greaterthan'
syms,←⊂,'≠'       ⋄ nams⍪←'neq'        'firstocc'      'noteq'
syms,←⊂,'⌷'       ⋄ nams⍪←'sqd'        'materialize'   'sqd_idx'
syms,←⊂,'['       ⋄ nams⍪←'brk'        'brkmon'        'brk'
syms,←⊂,'⍴'       ⋄ nams⍪←'rho'        'shape'         'reshape'
syms,←⊂,'≡'       ⋄ nams⍪←'eqv'        'depth'         'same'
syms,←⊂,'≢'       ⋄ nams⍪←'nqv'        'tally'         'notsame'
syms,←⊂,'⍳'       ⋄ nams⍪←'iot'        'index_gen'     'index_of'
syms,←⊂,'⍸'       ⋄ nams⍪←'iou'        'where'         'interval_idx'
syms,←⊂,'⊃'       ⋄ nams⍪←'dis'        'first'         'pick'
syms,←⊂,'⊂'       ⋄ nams⍪←'par'        'enclose'       'part_enc'
syms,←⊂,'⊆'       ⋄ nams⍪←'nst'        'nest'          'partition'
syms,←⊂,','       ⋄ nams⍪←'cat'        'ravel'         'catenate'
syms,←⊂,'⍪'       ⋄ nams⍪←'ctf'        'table'         'catenatefirst'
syms,←⊂,'⌽'       ⋄ nams⍪←'rot'        'reverse_last'  'rotate_last'
syms,←⊂,'⊖'       ⋄ nams⍪←'rtf'        'reverse_first' 'rotate_first'
syms,←⊂,'⍉'       ⋄ nams⍪←'trn'        'transpose'     'transpose_target'
syms,←⊂,'⍋'       ⋄ nams⍪←'gdu'        'gdu'           'gdu'
syms,←⊂,'⍒'       ⋄ nams⍪←'gdd'        'gdd'           'gdd'
syms,←⊂,'∊'       ⋄ nams⍪←'mem'        'enlist'        'member'
syms,←⊂,'∪'       ⋄ nams⍪←'unq'        'unique'        'union'
syms,←⊂,'∩'       ⋄ nams⍪←'int'        'intmon'        'int'
syms,←⊂,'⍷'       ⋄ nams⍪←'fnd'        'fnd'           'fnd'
syms,←⊂,'↑'       ⋄ nams⍪←'tke'        'mix'           'take'
syms,←⊂,'↓'       ⋄ nams⍪←'drp'        'split'         'drop'
syms,←⊂,'⊢'       ⋄ nams⍪←'rgt'        'rgt'           'rgt'
syms,←⊂,'⊣'       ⋄ nams⍪←'lft'        'lftid'         'left'
syms,←⊂,'⊤'       ⋄ nams⍪←'enc'        'encmon'        'enc'
syms,←⊂,'⊥'       ⋄ nams⍪←'dec'        'decmon'        'dec'
syms,←⊂,'?'       ⋄ nams⍪←'rol'        'roll'          'deal'
syms,←⊂,'⌹'       ⋄ nams⍪←'mdv'        'matinv'        'matdiv'
syms,←⊂,'⎕'       ⋄ nams⍪←'println'    'println'       'println'
syms,←⊂,'⍞'       ⋄ nams⍪←'print'      'print'         'print'
syms,←⊂,'⍕'       ⋄ nams⍪←'fmt'        'fmt'           'fmt'
syms,←⊂,';'       ⋄ nams⍪←'spn'        'spn'           'spn'
syms,←⊂,'←'       ⋄ nams⍪←'mst'        'mst'           'mst'
syms,←⊂,'←←'      ⋄ nams⍪←'set'        'set'           'set'
syms,←⊂,'/'       ⋄ nams⍪←'red'        'reduce_last'   'nwreduce_last'
syms,←⊂,'⌿'       ⋄ nams⍪←'rdf'        'reduce_first'  'nwreduce_first'
syms,←⊂,'\'       ⋄ nams⍪←'scn'        'scn'           'scndya'
syms,←⊂,'⍀'       ⋄ nams⍪←'scf'        'scf'           'scfdya'
syms,←⊂,'//'      ⋄ nams⍪←'rep'        'repmon'        'rep'
syms,←⊂,'⌿⌿'      ⋄ nams⍪←'rpf'        'rpfmon'        'rpf'
syms,←⊂,'\\'      ⋄ nams⍪←'xpd'        'xpdmon'        'xpd'
syms,←⊂,'⍀⍀'      ⋄ nams⍪←'xpf'        'xpfmon'        'xpf'
syms,←⊂,'¨'       ⋄ nams⍪←'map'        'map'           'map'
syms,←⊂,'⍨'       ⋄ nams⍪←'com'        'com'           'com'
syms,←⊂,'.'       ⋄ nams⍪←'dot'        'dot'           'dot'
syms,←⊂,'⍤'       ⋄ nams⍪←'rnk'        'rnk'           'rnk'
syms,←⊂,'⍣'       ⋄ nams⍪←'pow'        'pow'           'pow'
syms,←⊂,'∘'       ⋄ nams⍪←'jot'        'jot'           'jot'
syms,←⊂,'∘.'      ⋄ nams⍪←'oup'        'oup'           'oup'
syms,←⊂,'⌸'       ⋄ nams⍪←'key'        'key'           'key'
syms,←⊂,'⌺'       ⋄ nams⍪←'stn'        'stn'           'stn'
syms,←⊂,'@'       ⋄ nams⍪←'at'         'at'            'at'
syms,←⊂,'⎕FFT'    ⋄ nams⍪←'q_fft'      'q_fft'         'q_fft'
syms,←⊂,'⎕IFFT'   ⋄ nams⍪←'q_ift'      'q_ift'         'q_ift'
syms,←⊂,'⎕CONV'   ⋄ nams⍪←'q_conv'     'q_conv'        'q_conv'
syms,←⊂,'⎕NC'     ⋄ nams⍪←'q_nc'       'q_nc'          'q_nc'
syms,←⊂,'⎕SIGNAL' ⋄ nams⍪←'q_signal'   'q_signal'      'q_signal'
syms,←⊂,'⎕DR'     ⋄ nams⍪←'q_dr'       'q_dr'          'q_dr'
syms,←⊂,'⎕TS'     ⋄ nams⍪←'q_ts'       'q_ts'          'q_ts'
syms,←⊂,'⟜'       ⋄ nams⍪←'starling'   'starling'      'starling'
syms,←⊂,'⊸'       ⋄ nams⍪←'dove'       'dove'          'dove'
syms,←⊂,'⍺'       ⋄ nams⍪←'alpha'      'alpha'         'alpha'
syms,←⊂,'⍵'       ⋄ nams⍪←'omega'      'omega'         'omega'
syms,←⊂,'⍺⍺'      ⋄ nams⍪←'alphaalpha' 'alphaalpha'    'alphaalpha'
syms,←⊂,'⍵⍵'      ⋄ nams⍪←'omegaomega' 'omegaomega'    'omegaomega'
syms,←⊂,'∇'       ⋄ nams⍪←'self'       'self'          'self'
syms,←⊂,'∇∇'      ⋄ nams⍪←'deldel'     'deldel'        'deldel'
syms,←⊂,'⎕PRINT_MEMSTATS' ⋄ nams⍪←3⍴⊂'q_print_memstats'
syms,←⊂,'%u'      ⋄ nams⍪←''           ''              ''
syms←⎕C syms
⍝ Convert all primitives to variables; P → V|E
i←⍸t=P ⋄ si←syms⍳sym[ni←|n[i]]
∨⌿msk←(≢syms)=si:6'UNKNOWN PRIMITIVE'SIGNAL SELECT msk⌿i
t[i]←V ⋄ sym[ni]←nams[si;0]
n[i]←-sym⍳sym∪←nams[si,¨(t[p[i]]=E)∧2⌊k[p[i]]]
p t k n lx mu lv fv sv pos end sym IN
}
(⎕IO ⎕ML ⎕WX ⎕CT)←0 1 3 0
VERSION←5 7 1
AF∆PREFIX←'/opt/arrayfire'
VS∆PATH←'\Program Files\Microsoft Visual Studio\2022\Community'
f∆←'ptknfsrdx'
N∆←'∘ABCEFGHKLMNOPSTVZ'
(A B C E F G H K L M N O P S T V Z)←1+⍳17
Compile←{
m←(-≢2⊃⎕NPARTS ⍵)↓⍵
_←    ⊃⎕NGET ⍵ 1⊣⍞←'R'
_←a n s src←PS _⊣⍞←'P'
_←          TT _⊣⍞←'C'
_←        m GC _⊣⍞←'G'
f l←      m CX _⊣⍞←'B'
f⊣⎕←l
}
Exec←{
m←(-≢2⊃⎕NPARTS ⍵)↓⍵
_←    ⊃⎕NGET ⍵ 1
_←a n s src←PS _
_←          TT _
_←        m GC _
f l←      m CX _
'UTF-8'⎕UCS ⎕UCS ∊(⎕UCS 13),¨⍨⎕CMD f
}
Fix←{_←⍵
_←          TK _⊣⍞←'T'
_←a n s src←PS _⊣⍞←'P'
_←          TT _⊣⍞←'C'
_←        ⍺ GC _⊣⍞←'G'
_←        ⍺ CC _⊣⍞←'B'
n NS _⊣⍞←'L'
}
∇Z←Help _
Z←'Usage: <object> <target>'
∇
∇r←List
r←⎕NS¨1⍴⊂⍬ ⋄ r.Name←,¨⊂'Compile' ⋄ r.Group←⊂'CODFNS'
r[0].Desc←'Compile an object using Co-dfns'
r.Parse←⊂'2S '
∇
∇ Run(cmd input);Convert;in;out;src
Convert←{⍺(⎕SE.SALT.Load'[SALT]/lib/NStoScript -noname').ntgennscode ⍵}
in out←input.Arguments
src←(⊂':Namespace ',out),2↓0 0 0 out Convert ##.THIS.⍎in
→0⌿⍨'Compile'≢cmd
{##.THIS.⍎out,'←⍵'}out Fix src⊣⎕EX'##.THIS.',out
∇
I←{(⊂⍵)⌷⍺}
U←{⍺←⊢ ⋄ ⍵⍵⍣¯1⊢⍺ ⍺⍺⍥⍵⍵ ⍵}
assert←{
⍺←'assertion failure'
0∊⍵:⍎'⍺ ⎕SIGNAL 8'
1:shy←0
}
∇ Z←SELECT I
Z←∊pos[I]+⍳¨end[I]-pos[I]
∇
∇ {Z}←{MSG}SIGNAL N;CR;LF;linestarts;lineof;mkdm;quotelines;en;msg;dmx
CR LF←⎕UCS 13 10
linestarts←⍸1⍪IN∊CR LF
lineof←{∊b+⍳¨linestarts[l+1]-b←linestarts[l←linestarts⍸⍵]}
mkdm←{⍺←2
line←linestarts⍸⍵
no←'[',(⍕1+line),'] '
beg←linestarts[line]
i←(~IN[i]∊CR LF)⌿i←beg+⍳linestarts[line+1]-beg
(⎕EM ⍺)(no,IN[i])(' ^'[i∊⍵],⍨' '⍴⍨≢no)
}
tabify←{1 8[⍺]⌿' '@(⍺⍨)⍵}
quotelines←{
lines←∪linestarts⍸,⍵
nos←(1 0⍴⍨2×≢lines)⍀'[',(⍕⍪1+lines),⍤1⊢'] '
beg←linestarts[lines] ⋄ end←linestarts[lines+1]
m←∊∘⍵¨i←beg+⍳¨end-beg ⋄ t←(⎕UCS 9)=txt←IN∘I¨i
¯1↓∊nos,(~∘CR LF¨⍪,(t tabify¨txt),⍪t tabify¨' ▔'∘I¨m),CR
}
→HAS_MSG⌿⍨0≠⎕NC'MSG' ⋄ MSG←2 ''
HAS_MSG:en msg←¯2↑2,⊆MSG
⎕THIS.EN←en ⋄ ⎕THIS.DM←en mkdm ⊃N
dmx←('EN' en)('Category' 'Compiler')('Vendor' 'Co-dfns')
dmx,←⊂'Message'((⊢↑⍨(2*20)⌊≢)msg,CR,quotelines N)
⎕SIGNAL ⊂dmx
Z←0
∇
D2P←{0=≢⍵:⍬ ⋄ p⊣2{p[⍵]←⍺[⍺⍸⍵]}⌿⊢∘⊂⌸⍵⊣p←⍳≢⍵}
P2D←{z←⍪⍳≢⍵ ⋄ d←⍵≠,z ⋄ _←{p⊣d+←⍵≠p←⍺[z,←⍵]}⍣≡⍨⍵ ⋄ d(⍋(-1+d)↑⍤0 1⊢⌽z)}
opsys←{⍵⊃⍨'Win' 'Lin' 'Mac'⍳⊂3↑⊃'.'⎕WG'APLVersion'}
put←{
s←(¯128+256|128+'UTF-8'⎕UCS ⍵)⎕NAPPEND(t←tie ⍺)83
1:r←s⊣⎕NUNTIE t
}
tie←{
0::⎕SIGNAL ⎕EN
22::⍵ ⎕NCREATE 0
0 ⎕NRESIZE ⍵ ⎕NTIE 0
}
dct←{⍺[(2×2≠/n,0)+(1↑⍨≢m)+m+n←⌽∨\⌽m←' '≠⍺⍺ ⍵]⍵⍵ ⍵}
dlk←{((x⌷⍴⍵)↑[x←2|1+⍵⍵]⍺),[⍵⍵]⍺⍺@(⊂0 0)⍣('┌'=⊃⍵)⊢⍵}
dwh←{
z←⊃⍪/((≢¨⍺),¨⊂⌈/≢∘⍉¨⍺)↑¨⍺
⍵('┬'dlk 1)' │├┌└─'(0⌷⍉)dct,z
}
dwv←{
z←⊃{⍺,' ',⍵}/(1+⌈/≢¨⍺){⍺↑⍵⍪⍨'│'↑⍨≢⍉⍵}¨⍺
⍵('├'dlk 0)' ─┬┌┐│'(0⌷⊢)dct(⊣⍪1↓⊢)z
}
lb3←{
⍺←⍳≢⊃⍵
z←(N∆{⍺[⍵]}@2⊢(2⊃⍵){⍺[|⍵]}@{0>⍵}@4↑⊃⍵)[⍺;]
'(',¨')',¨⍨{⍺,';',⍵}⌿⍕¨z
}
pp3←{
⍺←'○' ⋄ lbl←⍺⍴⍨≢⍵
d←(⍳≢⍵)≠⍵ ⋄ _←{z⊣d+←⍵≠z←⍺[⍵]}⍣≡⍨⍵
lyr←{
i←⍸⍺=d
k v←↓⍉⍵⍵[i],∘⊂⌸i
(⍵∘{⍺[⍵]}¨v)⍺⍺¨@k⊢⍵
}⍵
(⍵=⍳≢⍵)⌿⊃⍺⍺ lyr⌿(1+⍳⌈/d),⊂⍉∘⍪∘⍕¨lbl
}
XML←{⍺←0
ast←⍺{d i←P2D⊃⍵ ⋄ i∘{⍵[⍺]}¨(⊂d),1↓⍺↓⍵}⍣(0≠⍺)⊢⍵
d t k n←4↑ast
cls←N∆[t],¨('-..'[1+×k]),¨⍕¨|k
fld←{((≢⍵)↑3↓f∆),⍪⍵}¨↓⍉↑3↓ast
⎕XML⍉↑d cls(⊂'')fld
}
:Namespace prim
q_print_memstats←'print_memstats_ibeam'⌶
⍝ Basic system functions
q_signal←'q_signal_ibeam'⌶
q_dr←'q_dr_ibeam'⌶
⍝ System constants
spn←'span_array'⌶⌶⌶⌶
ZILDE←⍬
NUM_0←0
NUM_1←1
NUM_11←11
NUM_80←80
NUM_160←160
NUM_163←163
NUM_320←320
NUM_323←323
NUM_326←326
NUM_645←645
NUM_1289←1289
VEC_0←1('reshape_ibeam'⌶)0
⍝ Utilities
eq←'eq_ibeam'⌶⌶⌶
squeeze←'squeeze_ibeam'⌶
is_simple←'is_simple_ibeam'⌶
is_numeric←'is_numeric_ibeam'⌶
is_char←'is_char_ibeam'⌶
is_integer←'is_integer_ibeam'⌶
is_bool←{11≡⎕DR squeeze ⍵}
is_cmpx←{1289≡⎕DR squeeze ⍵}
is_span←'is_span_ibeam'⌶
has_nat_vals←'has_nat_vals_ibeam'⌶
both_simple←{is_simple ⍺:is_simple ⍵ ⋄ 0}
both_numeric←{is_numeric ⍺:is_numeric ⍵ ⋄ 0}
both_integer←{is_integer ⍺:is_integer ⍵ ⋄ 0}
both_char←{is_char ⍺:is_char ⍵ ⋄ 0}
both_bool←{is_bool ⍺:is_bool ⍵ ⋄ 0}
bitand←'bitand_vec_ibeam'⌶
scl_and←{⍺:⍵ ⋄ 0} ⋄ scl_or←{⍺:1 ⋄ ⍵}
any←'any_ibeam'⌶
numeric←{⍺←⊢ ⋄ (⍺⊣0)both_numeric ⍵:⍺ ⍺⍺ ⍵ ⋄ ⎕SIGNAL 11}
chk_scl←'chk_scl_ibeam'⌶
ambiv←{
mon←VEC_0 same ⎕NC'⍺' ⋄ nax←0 ⋄ axis⍠←nax←1
mon scl_and nax:⍺⍺ ⍵ ⋄ mon:⍺⍺[axis] ⍵ ⋄ nax:⍺ ⍵⍵ ⍵ ⋄ ⍺ ⍵⍵[axis] ⍵
}
veach←'veach_ibeam'⌶⌶
scalar←{op←⍺⍺
hax←1 ⋄ axis⍠←hax←0 ⋄ hax:⍺{
hl←(≢⍴⍺)>≢⍴⍵ ⋄ l←⍺{hl:⍵ ⋄ ⍺}⍵ ⋄ h←⍺{hl:⍺ ⋄ ⍵}⍵ ⋄ s←⍴h
1<≢⍴axis:⎕SIGNAL 4 ⋄ (≢⍴l)≢≢axis:⎕SIGNAL 4 ⋄ axis←,axis
(⍴l)≢s[axis]:⎕SIGNAL 5
m←(≢s)⍴1 ⋄ m[axis]←0 ⋄ mi←⍸m
t←⍳≢s ⋄ t[mi]←⍳≢mi ⋄ t[axis]←(≢mi)+⍳≢axis
h←t⍉h ⋄ l←(⍴h)⍴l ⋄ t←⍋t
hl:t⍉h op scalar l ⋄ t⍉l op scalar h
}⍵
s←⍺ chk_scl ⍵
0≡≢,⍺:s⍴0
0≡≢,⍵:s⍴0
⍺ both_simple ⍵:s⍴⍺ ⍺⍺ ⍵
s⍴squeeze ⍺ ∇ veach ⍵
}
scl_mon←{is_simple ⍵:⍺⍺ ⍵ ⋄ (⍴⍵)⍴squeeze ∇ veach ⍵}
chk_axis←{axis←⍺⍺ ⋄ ~⍺:0
1<≢⍴axis:⎕SIGNAL 4 ⋄ 1≢≢axis:⎕SIGNAL 5
~has_nat_vals axis:⎕SIGNAL 11 ⋄ (≢⍴⍵)≤axis:⎕SIGNAL 4
0
}
⍝ ⍴: Shape / Reshape
shape←'shape_ibeam'⌶
chk_valid_shape←{
{rnk←≢⍴⍵ ⋄ 0≡rnk:0 ⋄ 1≡rnk:0 ⋄ 1}⍵:⎕SIGNAL 4
0≡≢,⍵:0
{has_nat_vals squeeze ⍵:0 ⋄ 1}⍵:⎕SIGNAL 11
0
}
prototype←{is_numeric squeeze ⍵:(⍴⍵)⍴0 ⋄ is_char ⍵:(⍴⍵)⍴' ' ⋄ ∇¨⍵}
reshape←{chk_valid_shape ⍺: ⋄ ⍺('reshape_ibeam'⌶)⍵}
rho←shape ambiv reshape
⍝ X[]←Y: Bracket Assignment
idx_rnk_check←{(≢⍴⍺)≢≢,⍵:⎕SIGNAL 4 ⋄ 0}
idx_rng_check←{
is_span ⍵:0
0≡≡⍺:⍺{
0≡≢,⍵:0
0≡is_integer⊢squeeze ⍵:⎕SIGNAL 11
any(⍵<0)∨⍺≤⍵:⎕SIGNAL 3
0}⍵
0⊣⍺ ∇¨⍵
}
set←'set_ibeam'⌶
⍝ X[]f←Y: Modified Bracket Assignment
mst_vals←{idx←⍺⍺ ⋄ op←⍵⍵ ⋄ idx((idx⌷⍺)op¨⍵)
⍝ (≢idx)≡≢uidx←∪idx:uidx((,⍺)[uidx] op¨,⍵)
⍝ uidx((⌽uidx,idx){op⍨⌿⍵}⌸⌽(,⍺)[uidx],⍵)
}
mst←'mst_ibeam'⌶⌶
⍝ ⌷: Materialize | Squad indexing
materialize←{⍵}
sqd_idx←{
hax←1 ⋄ axis⍠←hax←0
hax:⍺{
1<≢⍴⍺:⎕SIGNAL 4
1<≢⍴axis:⎕SIGNAL 4
~is_integer squeeze axis:⎕SIGNAL 11
any axis<0:⎕SIGNAL 11
any (≢⍴⍵)≤axis:⎕SIGNAL 4
(≢axis)≢≢⍺:⎕SIGNAL 5
0≡≢⍺:⍵
m←(≢⍴⍵)⍴0 ⋄ _←{m[⍵]:⎕SIGNAL 11 ⋄ m[⍵]←1}¨axis
(≢⍴⍵)<≢⍺:⎕SIGNAL 5
i←(≢⍴⍵)⍴'span_array'⌶⌶⌶⌶ ⋄ i[axis]←⍺ ⋄ i⌷⍵
}⍵
1<≢⍴⍺:⎕SIGNAL 4 ⋄ (≢⍴⍵)<≢⍺:⎕SIGNAL 5
0≡≢⍺:⍵
1≡≢⍺:⍺{
is_span⊢i←⊃⍺:⍵
(≢⍵)idx_rng_check i:
(squeeze ⍺)('index_ibeam'⌶)⍵
}⍵
((≢⍺)↑⍴⍵) idx_rng_check ⍺:
(squeeze ⍺)('index_ibeam'⌶)⍵
}
sqd←materialize ambiv sqd_idx
⍝ X[]: Bracket Indexing
brkmon←{⎕SIGNAL 2}
brk←{⍺ idx_rnk_check ⍵: ⋄ ⍵⌷⍺}
⍝ ⊢: Right
rgt←{⍵}
⍝ ⊣: Left
lftid←{⍵}
left←{⍺}
lft←lftid ambiv left
⍝ ,: Ravel / Catenate
ravel←{
noax←0 ⋄ axis⍠←noax←1
noax:'ravel_ibeam'⌶ ⍵
1≡≢,axis:{
axis≤¯1:⎕SIGNAL 11
(≢⍴⍵)≤axis:⎕SIGNAL 4
is_integer squeeze axis:⍵
is_numeric axis:((pr↑s),1,(pr←⌈axis)↓s←⍴⍵)⍴⍵
⎕SIGNAL 11
}⍵
0≡≢,axis:((⍴⍵),1)⍴⍵
~is_integer squeeze axis:⎕SIGNAL 11
1≢≢⍴axis:⎕SIGNAL 4
any axis≤¯1:⎕SIGNAL 11
any (≢⍴⍵)≤axis:⎕SIGNAL 4
axis≢(⍳c←≢axis)+b←⊃axis:⎕SIGNAL 11
((b↑s),(×⌿c↑b↓s),(b+c)↓s←⍴⍵)⍴⍵
}
catenate←{
lr←≢⍴⍺ ⋄ rr←≢⍴⍵ ⋄ rk←lr⌈rr ⋄ hax←1 ⋄ axis⍠←¯1+rk⊣hax←0
1<ar←≢⍴axis:⎕SIGNAL 4 ⋄ 1≢≢axis:⎕SIGNAL 5 ⋄ ~is_numeric axis:⎕SIGNAL 11
hax∧axis≤¯1:⎕SIGNAL 11 ⋄ hax∧rk≤axis:⎕SIGNAL 4
0≡rk:(,⍺),,⍵
(1<|lr-rr)∧noscl←(lr≢0)∧rr≢0:⎕SIGNAL 4
axis≠fx←⌈axis:⍺{
(lr≢0)∧(rr≢0)∧lr≠rr:⎕SIGNAL 4
(,[axis]⍣(lr≢0)⊢⍺),[fx],[axis]⍣(rr≢0)⊢⍵
}⍵
(lr≤1)∧rr≤1:⍺{z←((lc←≢⍺)+rc←≢⍵)⍴⍺ ⋄ z[lc+⍳rc]←⍵ ⋄ z}⍵
x←⍺{lr≡0:s⍴⍺⊣s[fx]←1⊣s←⍴⍵ ⋄ lr<rr:,[fx-.5]⍺ ⋄ ⍺}⍵
y←⍺{rr≡0:s⍴⍵⊣s[fx]←1⊣s←⍴⍺ ⋄ rr<lr:,[fx-.5]⍵ ⋄ ⍵}⍵
(m×⍴x)∨.≠m×⍴y⊣m←fx≠⍳rk:⎕SIGNAL 5
s[fx]←(⍴x)[fx]+(⍴y)[fx]⊣s←⍴x
ca←×⌿fx↑s ⋄ cb←fx⌷s ⋄ cc←×⌿(fx+1)↓s ⋄ lx←fx⌷⍴x ⋄ rx←fx⌷⍴y
z←ca cb cc⍴0 ⋄ z[;⍳lx;]←ca lx cc⍴x ⋄ z[;lx+⍳rx;]←ca rx cc⍴y
s⍴z
}
cat←ravel ambiv catenate
⍝ Table / Catenate First
table←{((≢⍵),×⌿1↓⍴⍵)⍴⍵}
catenatefirst←{
hax←1 ⋄ axis⍠←hax←0 ⋄ hax:⍺,[axis]⍵
(~hax)∧(0≡≢⍴⍺)∧0≡≢⍴⍵:(,⍺),,⍵
⍺,[0]⍵
}
ctf←table ambiv catenatefirst
⍝ ≡: Depth / Same
depth←{
is_simple ⍵:{0≡≢⍴⍵:0 ⋄ 1}⍵
0≡≢,⍵:(×d)+d←∇⊃⍵
nd←1+mx←⌈⌿pd←|d←∇¨,⍵
∨⌿(d<0)∨pd≠mx:-nd
nd
}
same←'same_ibeam'⌶
eqv←depth ambiv same
⍝ ≢: Tally / Not Same
tally←{⍬≡s←⍴⍵:1 ⋄ ⊃s}
notsame←'nqv_ibeam'⌶
nqv←tally ambiv notsame
⍝ ⍳: Index Generate | Index Of
index_gen←{
chk_valid_shape ⍵:
0≡≢,⍵:⊂⍬
VEC_0≡,⍵:⍬
1≡≢,⍵:'index_gen_vec'⌶ ⍵
⊃∘.,⌿⍳¨⍵
}
index_of←{
0≡≢,⍵:(⍴⍵)⍴⍬ ⋄ 0≡≢,⍺:(⍴⍵)⍴⍬
(≢⍴⍵)<cr←¯1+≢⍴⍺:⎕SIGNAL 4
(1↓⍴⍺)≢(1-≢⍴⍺)↑⍴⍵:⎕SIGNAL 5
1<≢⍴⍺:(⊂⍤¯1⊢⍺)∇⊂⍤cr⊢⍵
(1<≡⍺)∨(1<≡⍵):+⌿∧⍀⍺∘.≢⍵
lv←⍺[ix←⍋⍺] ⋄ rv←,⍵ ⋄ zv←(≢,⍵)⍴¯1
_←{⍵-h⊣zv[i]←t[i←⍸lv[t←zv+h]<rv]⊣h←⌊⍵÷2}⍣(⌈2⍟lc)⊢lc←≢,⍺
(⍴⍵)⍴ix⊣ix[⍸lv[zv+1]≠rv]←≢,⍺⊣ix←ix[zv+1]
}
iot←index_gen ambiv index_of
⍝ ⊃: First / Pick
first←'disclose_ibeam'⌶
pick←{0≡≢,⍺:⍵ ⋄ (1↓⍺)∇⊃(⊃⍺)⌷⍵}
dis←first ambiv pick
⍝ ⊂: Enclose / Partition
enclose←{
0≡≡⍵:⍵
hax←1 ⋄ axis⍠←hax←0 ⋄ hax:(,axis){
⍺≡⍬:⊂¨⍵
(rr←≢⍴⍵)idx_rng_check ⍺:
m←rr⍴1 ⋄ m[⍺]←0 ⋄ m←⍸m ⋄ t←⍳rr ⋄ t[m]←y←⍳≢m ⋄ t[⍺]←(≢m)+⍳≢⍺
⊂⍤(≢⍺)⊢t⍉⍵
m←(≢⍴⍵)⍴0 ⋄ _←⍺{i←⍺[⍵] ⋄ m[i]:⎕SIGNAL 11 ⋄ ⍵+m[i]←1}⍣(≢⍺)⊢0
nax←0⍴⍨(≢⍴⍵)-≢⍺ ⋄ i←0 ⋄ _←{m[⍵]:⍵+1 ⋄ nax[i]←⍵ ⋄ ⍵+i+←1}⍣(≢⍴⍵)⊢0
(⍳(⍴⍵)[nax])⌷[nax]¨⊂⍵
}⍵
'enclose_ibeam'⌶ ⍵
}
part_enc←{
1<≢⍴⍺:⎕SIGNAL 4
hax←1 ⋄ axis⍠←¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵:
0≡≢⍴⍵:⍺∇(≢⍺)⍴⍵ ⋄ ac←(⍴⍵)[axis] ⋄ 0≡≢⍴⍺:(ac⍴⍺)∇⍵
(≢⍺)>1+ac:⎕SIGNAL 5
~has_nat_vals ⍺:⎕SIGNAL 11
2(⍵{(⊂⍺+⍳⍵-⍺)⌷[axis]⍺⍺})⌿(⍸⍺),ac
}
par←enclose ambiv part_enc
⍝ ⊆: Nest
nest←{
1≡≡⍵:⊂⍵
⍵
}
partition←{
1<≢⍴⍺:⎕SIGNAL 4 ⋄ 0≡≢⍴⍵:⎕SIGNAL 4
hax←1 ⋄ axis⍠←¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵:
ac←(⍴⍵)[axis] ⋄ 0≡≢⍴⍺:(ac⍴⍺)∇⍵ ⋄ ac≢≢⍺:⎕SIGNAL 5
~has_nat_vals ⍺:⎕SIGNAL 11
m←⍺≠0 ⋄ p←m⌿2<⌿0,⍺ ⋄ pi←2{⍺+⍳⍵-⍺}⌿(⍸p),≢p ⋄ mi←⍸m ⋄ pc←≢pi
lc←×⌿ls←axis↑⍴⍵ ⋄ rc←×⌿rs←(1+axis)↓⍴⍵ ⋄ z←lc pc rc⍴⊂0⍴⊂⊃⍵ ⋄ x←lc ac rc⍴⍵
(ls,pc,rs)⍴z⊣(⍳lc)∘.{z[⍺;;⍵]←x[⍺;mi;⍵]∘{⍺[⍵]}¨pi}⍳rc
}
nst←nest ambiv partition
⍝ +: Conjugate | Addition
conjugate←{1289≡⎕DR squeeze ⍵:'conjugate_vec_ibeam'⌶ ⍵ ⋄ ⍵}
plus←'add_vec_ibeam'⌶ numeric scalar
add←conjugate ambiv plus
⍝ -: Negate | Subtract
negate←{0-⍵}
minus←'sub_vec_ibeam'⌶ numeric scalar
sub←negate ambiv minus
⍝ ×: Sign | Multiply
sign←{1289=⎕DR ⍵:⍵÷|⍵ ⋄ (-⍵<0)+0<⍵}
times←'mul_vec_ibeam'⌶ numeric scalar
mul←sign ambiv times
⍝ ÷: Reciprocal | Divide
recip←{1÷⍵}
divide←'div_vec_ibeam'⌶ numeric scalar
div←recip ambiv divide
⍝ *: Exponent | Power
exponent←'exp_vec_ibeam'⌶ numeric scl_mon
power←'pow_vec_ibeam'⌶ numeric scalar
exp←exponent ambiv power
⍝ ⍟: Natural Logarithm | Logarithm
natlog←'nlg_vec_ibeam'⌶ numeric scl_mon
logarithm←'log_vec_ibeam'⌶ numeric scalar
log←natlog ambiv logarithm
⍝ |: Absolute Value | Residue
absolute←{1289≡⎕DR ⍵:⎕SIGNAL 11 ⋄ 'abs_vec_ibeam'⌶ ⍵} numeric scl_mon
residue←{2≡⍺:(⍴⍵)⍴1 bitand ⍵ ⋄ ⍵-⍺×⌊⍵÷⍺+0=⍺} numeric scalar
res←absolute ambiv residue
⍝ ⌊: Floor | Minimum
floor_array←{
is_integer ⍵:⍵
1289=⎕DR ⍵:{
a←9○⍵ ⋄ b←11○⍵
ad←a-fa←⌊a ⋄ bd←b-fb←⌊b ⋄ m←1≤ad+bd
(fa+m×t)+0J1×fb+m×~t←ad≥bd
}⍵
'floor_vec_ibeam'⌶ ⍵
} numeric scl_mon
minimum←'min_vec_ibeam'⌶ numeric scalar
min←floor_array ambiv minimum
⍝ ⌈: Ceiling | Maximum
ceil_array←{
is_integer ⍵:⍵
1289=⎕DR ⍵:-⌊-⍵
'ceil_vec_ibeam'⌶ ⍵
} numeric scl_mon
maximum←'max_vec_ibeam'⌶ numeric scalar
max←ceil_array ambiv maximum
⍝ ○: Pi Times | Trigonometric Functions
pitimes←{3.14159265358979323846×⍵} numeric scl_mon
trig←{
0≠≡⍺:⍺ ∇¨⍵
0=⍺:(1-⍵*2)*.5
1=⍺:'sin_vec_ibeam'⌶ ⍵
¯1=⍺:'arcsin_vec_ibeam'⌶ ⍵
2=⍺:'cos_vec_ibeam'⌶ ⍵
¯2=⍺:'arccos_vec_ibeam'⌶ ⍵
3=⍺:'tan_vec_ibeam'⌶ ⍵
¯3=⍺:'arctan_vec_ibeam'⌶ ⍵
4=⍺:(1+⍵*2)*.5
¯4=⍺:(⍵+1)×((⍵-1)÷⍵+1)*0.5
5=⍺:'sinh_vec_ibeam'⌶ ⍵
¯5=⍺:'arcsinh_vec_ibeam'⌶ ⍵
6=⍺:'cosh_vec_ibeam'⌶ ⍵
¯6=⍺:'arccosh_vec_ibeam'⌶ ⍵
7=⍺:'tanh_vec_ibeam'⌶ ⍵
¯7=⍺:'arctanh_vec_ibeam'⌶ ⍵
8=⍺:(-1+⍵*2)*0.5
¯8=⍺:-8○⍵
9=⍺:{1289≡⎕DR ⍵:'realpart_vec_ibeam'⌶ ⍵ ⋄ ⍵}⍵
¯9=⍺:⍵
10=⍺:|⍵
¯10=⍺:+⍵
11=⍺:{1289≡⎕DR ⍵:'imagpart_vec_ibeam'⌶ ⍵ ⋄ (⍴⍵)⍴0}⍵
¯11=⍺:⍵×0J1
12=⍺:'PHASE(⍵) NOT IMPLEMENTED'⎕SIGNAL 16
¯12=⍺:*⍵×0J1
⎕SIGNAL 11
} numeric scalar
cir←pitimes ambiv trig
⍝ !: Factorial | Binomial
factorial←'factorial_vec_ibeam'⌶ numeric scl_mon
binomial←{
∨⌿,(⍵=⌊⍵)∧(⍵<0)∧⍺≠⌊⍺:⎕SIGNAL 11
(!⍵)÷(!⍺)×!⍵-⍺
} numeric scalar
fac←factorial ambiv binomial
⍝ ~: Not | Without
notscl←{is_bool ⍵:'not_vec_ibeam'⌶ ⍵ ⋄ ⎕SIGNAL 11} scl_mon
without←{1<≢⍴⍺:⎕SIGNAL 11 ⋄ (~⍺∊⍵)⌿⍺}
not←notscl ambiv without
⍝ ∧: And
andmon←{⎕SIGNAL 2}
logand←{
⍺ both_bool ⍵:⍺('and_vec_ibeam'⌶)⍵
⍺×⍵÷⍺∨⍵
} numeric scalar
and←andmon ambiv logand
⍝ ∨: Or
lormon←{⎕SIGNAL 2}
rational←{
r←⍵ ⋄ s←⍴⍵ ⋄ c20←s⍴0 ⋄ c21←s⍴1 ⋄ c10←s⍴1 ⋄ c11←s⍴0
{
an←⌊⍵ ⋄ c0←c20+an×c10 ⋄ c1←c21+an×c11
~∨⌿m←r≠c0÷c1:c0 c1
i←⍸m ⋄ c20[i]←c10[i] ⋄ c21[i]←c11[i] ⋄ c10[i]←c0[i] ⋄ c11[i]←c1[i]
x←⍵ ⋄ x[i]←÷x[i]-an[i]
∇ x
}⍵
}
gcd←{⍺≡⍺+⍺:⍵ ⋄ b ∇ (b←⍺⌊⍵)|⍺⌈⍵}
lcm←{⍺×⍵÷⍺ gcd ⍵}
logor←{
⍺ both_bool ⍵:⍺('lor_vec_ibeam'⌶)⍵
(is_bool ⍺)∧is_integer ⍵:⍺+(~⍺)×|⍵
(is_bool ⍵)∧is_integer ⍺:⍵+(~⍵)×|⍺
⍺ both_integer ⍵:(|⍺)gcd(|⍵)
y←rational |,⍺ ⋄ a←(⍴⍺)⍴0⊃y ⋄ b←(⍴⍺)⍴1⊃y
x←rational |,⍵ ⋄ c←(⍴⍵)⍴0⊃x ⋄ d←(⍴⍵)⍴1⊃x
(a gcd c)÷b lcm d
} numeric scalar
lor←lormon ambiv logor
⍝ ⍲: Not and
nanmon←{⎕SIGNAL 2}
lognan←{⍺ both_bool ⍵:~⍺∧⍵ ⋄ ⎕SIGNAL 11} scalar
nan←nanmon ambiv lognan
⍝ ⍱: Not Or
normon←{⎕SIGNAL 2}
lognor←{⍺ both_bool ⍵:~⍺∨⍵ ⋄ ⎕SIGNAL 11} scalar
nor←normon ambiv lognor
⍝ <: Less than
lthmon←{⎕SIGNAL 2}
lessthan←{
1289≡⎕DR ⍵:⎕SIGNAL 11 ⋄ 1289≡⎕DR ⍺:⎕SIGNAL 11
⍺('lth_vec_ibeam'⌶)⍵
} numeric scalar
lth←lthmon ambiv lessthan
⍝ ≤: Less than or equal
ltemon←{⎕SIGNAL 2}
lesseql←{
1289≡⎕DR ⍵:⎕SIGNAL 11 ⋄ 1289≡⎕DR ⍺:⎕SIGNAL 11
⍺('lte_vec_ibeam'⌶)⍵
} numeric scalar
lte←ltemon ambiv lesseql
⍝ =: Equal
eqlmon←{⎕SIGNAL 2}
eql_vec←'eql_vec_ibeam'⌶
equal←{
⍺ both_numeric ⍵:⍺ eql_vec ⍵
⍺ both_char ⍵:⍺ eql_vec ⍵
0
} scalar
eql←eqlmon ambiv equal
⍝ ≥: Greater than or equal
gtemon←{⎕SIGNAL 2}
greatereql←{
1289≡⎕DR ⍵:⎕SIGNAL 11 ⋄ 1289≡⎕DR ⍺:⎕SIGNAL 11
⍺('gte_vec_ibeam'⌶)⍵
} numeric scalar
gte←gtemon ambiv greatereql
⍝ >: Greater than
gthmon←{⎕SIGNAL 2}
greaterthan←{
1289≡⎕DR ⍵:⎕SIGNAL 11 ⋄ 1289≡⎕DR ⍺:⎕SIGNAL 11
⍺('gth_vec_ibeam'⌶)⍵
} numeric scalar
gth←gthmon ambiv greaterthan
⍝ ≠: Not Equal | First Occurrence
firstocc←{(⍳≢⍵)=⍵⍳⍵}
neq_vec←'neq_vec_ibeam'⌶
noteq←{
⍺ both_numeric ⍵:⍺ neq_vec ⍵
⍺ both_char ⍵:⍺ neq_vec ⍵
1
} scalar
neq←firstocc ambiv noteq
⍝ ↑: Mix | Take
mix←{
1≥≡squeeze ⍵:⍵
0≡≢,⍵:((⍴⍵),⍴v)⍴v←⊃⍵
k←⌈⌿≢∘⍴¨v←,⍵ ⋄ v←{s←k⍴1 ⋄ s[⍳≢⍴⍵]←⍴⍵ ⋄ s⍴⍵}¨v ⋄ s←⊃⌈⌿⍴¨v
((⍴⍵),s)⍴z⊣v{⍵+1⊣'sqdset_ibeam'⌶ z(⍵,⍳¨⍴x)(x←⍵⊃⍺)}⍣(≢,⍵)⊢0⊣z←((≢,⍵),s)⍴0⍴⊃⍵
}
take←{
1<≢⍴⍺:⎕SIGNAL 4
hax←1 ⋄ axis⍠←⍳≢⍺⊣hax←0
1<≢⍴axis:⎕SIGNAL 4 ⋄ ~has_nat_vals axis:⎕SIGNAL 11
(≢,⍺)≢≢,axis:⎕SIGNAL 5 ⋄ ~is_integer squeeze ⍺:⎕SIGNAL 11
x←⍺ ⋄ y←⍺{(~hax)∧0≡≢⍴⍵:((≢⍺)⍴1)⍴⍵ ⋄ ⍵}⍵
any(axis<0)∨axis≥≢⍴y:⎕SIGNAL 4
~any(|x)>(⍴y)[axis]:((⍳¨|x)+(x<0)×(⍴y)[axis]-|x)⌷[axis]y
s←⍴y ⋄ s[axis]←x ⋄ m←s<0 ⋄ s←|s
z←s⍴0⍴y ⋄ i←(wi←⍳¨w)+m×s-w←s⌊⍴y ⋄ v←(wi+m×(⍴y)-w)⌷y
'sqdset_ibeam'⌶ z i v
}
tke←mix ambiv take
⍝ ↓: Split | Drop
split←{
0≡≡⍵:⍵
hax←1 ⋄ axis⍠←¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵:
lc←×⌿ls←axis↑⍴⍵ ⋄ rc←×⌿rs←(1+axis)↓⍴⍵ ⋄ ac←axis⌷⍴⍵ ⋄ z←lc ac rc⍴⍵
(ls,rs)⍴(⍳lc)∘.{z[⍺;;⍵]}⍳rc
}
drop←{
1<≢⍴⍺:⎕SIGNAL 4
hax←1 ⋄ axis⍠←⍳≢⍺⊣hax←0
1<≢⍴axis:⎕SIGNAL 4 ⋄ ~has_nat_vals axis:⎕SIGNAL 11
(≢,⍺)≢≢,axis:⎕SIGNAL 5 ⋄ ~is_integer squeeze ⍺:⎕SIGNAL 11
x←⍺ ⋄ y←⍺{(~hax)∧0≡≢⍴⍵:((≢⍺)⍴1)⍴⍵ ⋄ ⍵}⍵
any(axis<0)∨axis≥≢⍴y:⎕SIGNAL 4
((0⌈x)+⍳¨0⌈(⍴y)[axis]-|x)⌷[axis]y
}
drp←split ambiv drop
⍝ ⊖: Rerverse First | Rotate First
reverse_axis←{0≡≢⍴⍵:⍵ ⋄ axis⍠←0 ⋄ 1≡≢,⍵:⍵ ⋄ s←(⍴⍵)[axis] ⋄ (⊂s-1+⍳s)⌷[axis]⍵}
rotate_axis←{
0≡≢⍴⍵:⍵ ⋄ axis⍠←0 ⋄ lns←1≢≢,⍺
lns∧(≢⍴⍺)≢(≢⍴⍵)-1:⎕SIGNAL 4
lns∧(⍴⍺)≢(axis≠⍳≢⍴⍵)⌿⍴⍵:⎕SIGNAL 5
ac←(⍴⍵)[axis] ⋄ lc←×⌿(axis+1)↓⍴⍵ ⋄ ix←⍳≢,⍵
1≡≢,⍵:⍵ ⋄ 1≡≢,⍺:(⊂ac|⍺+⍳ac)⌷[axis]⍵
si←(lc|ix)+lc×(ac|(⌊ix÷lc)+,ac⌿[axis],[axis-.5]⍺)+ac×⌊ix÷lc×ac
(⍴⍵)⍴(,⍵)[si]
}
reverse_first←{hax←1 ⋄ axis⍠←hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ reverse_axis[axis] ⍵}
rotate_first←{hax←1 ⋄ axis⍠←hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ ⍺ rotate_axis[axis] ⍵}
rtf←reverse_first ambiv rotate_first
⍝ ⌽: Reverse Last | Rotate Last
reverse_last←{hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ reverse_axis[axis] ⍵}
rotate_last←{hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ ⍺ rotate_axis[axis] ⍵}
rot←reverse_last ambiv rotate_last
⍝ ⍉: Transpose
transpose←{s←⌽⍴⍵ ⋄ 1≥≢⍴⍵:⍵ ⋄ s⍴(,⍵)[(⍴⍵)⊥⊖s⊤⍳≢,⍵]}
transpose_target←{
1<≢⍴⍺:⎕SIGNAL 5 ⋄ (≢⍴⍵)≢≢,⍺:⎕SIGNAL 5 ⋄ ~is_integer ⍺:⎕SIGNAL 11
any 0>⍺:⎕SIGNAL 4 ⋄ tr←0⌈1+⌈⌿⍺ ⋄ tr>≢⍴⍵:⎕SIGNAL 4
ts←tr⍴1 ⋄ ts[⍺]←0 ⋄ any 0≠ts:⎕SIGNAL 5
1≥≢⍴⍵:⍵
ts[⍺]←⍴⍵ ⋄ _←⍺{ts[⍺]⌊←⍵}¨⍴⍵
ts⍴(,⍵)[(⍴⍵)⊥(⊂⍺)⌷ts⊤⍳×⌿ts]
}
trn←transpose ambiv transpose_target
⍝ ⍋: Grade Up
⍝ Q ← {1≥≢⍵:⍵ ⋄ s←⍵ ⍺⍺ ⍵⌷⍨⊂?≢⍵ ⋄ (∇ ⍵⌿⍨0>s)⍪(⍵⌿⍨0=s)⍪(∇ ⍵⌿⍨0<s)}      ⍝ (RKWH)
⍝ qsort ← {⍺⍺{(⍵ ⍺⍺ ⍺)-(⍺ ⍺⍺ ⍵)}⍤¯1 999 Q ⍵}
⍝ grade←{| ⊢/↑ ⍺⍺ qsort ⍵ {⍺ ⍵}¨ ⍵⍵ ⍳⍴⍵}
⍝ gu ← le grade +                             ⍝ grade-up   ⍋
⍝ gd ← ge grade -
gdu←{
1>≢⍴⍵:⎕SIGNAL 4 ⋄ 0≡≢,⍵:⍬ ⋄ 1≢≡⍵:⎕SIGNAL 16
z⊣{z⊢←a[z;⍵]('gradeup_vec_ibeam'⌶)z}¨⌽⍳1⌷⍴a←⍪⍵⊣z←⍳≢⍵
}
⍝ ⍒: Grade Down
gdd←{
1>≢⍴⍵:⎕SIGNAL 4 ⋄ 0≡≢,⍵:⍬ ⋄ 1≢≡⍵:⎕SIGNAL 16
z⊣{z⊢←a[z;⍵]('gradedown_vec_ibeam'⌶)z}¨⌽⍳1⌷⍴a←⍪⍵⊣z←⍳≢⍵
}
⍝ ≤≥ Sort Up/Down
sortup←{(⊂⍋⍵)⌷⍵}
sortdown←{(⊂⍒⍵)⌷⍵}
⍝ ⊤: Encode
encmon←{⎕SIGNAL 2}
enc←{
~is_numeric ⍺:⎕SIGNAL 11 ⋄ ~is_numeric ⍵:⎕SIGNAL 11
d←⍪⍺ ⋄ z←((⍴d),≢,⍵)⍴0⍴⍵ ⋄ sd←(⍳≢d),⊂,⍵
_←sd{⍵+1⊣d[;⍵]{((v≠0)×⌊⍵÷v+v=0)⊣z[⍺;⍵⍵;]←⍵|⍨v←⍺⍺[⍺]}⍵⌿⍺⍺}⍣(1⌷⍴d)⊢0
((⍴⍺),⍴⍵)⍴z
}
⍝ ⊥: Decode
decmon←{⎕SIGNAL 2}
dec←{
(0≢≢⍴⍺)∧(0≢≢⍴⍵)∧(1≢lc)∧(1≢rc)∧(rc←≢⍵)≢lc←1⌈⊃⌽⍴⍺:⎕SIGNAL 5
s←(¯1↓⍴⍺),1↓⍴⍵
(0≡≢,⍺)∨0≡≢,⍵:s⍴0
~(squeeze ⍺)both_numeric squeeze ⍵:⎕SIGNAL 11
lv←⍺{1≡lc:rc/⍺ ⋄ ⍺}⍵
rv←⍺{1≡rc:lc⌿⍵ ⋄ ⍵}⍵
rv+.×⍨⌽×\1,⌽1↓[¯1+≢⍴lv]lv
}
⍝ ∊: Membership
enlist←{
1≥|≡⍵:,⍵
⊃⍪⌿∇¨,⍵
}
member←{(≢,⍵)≠(,⍵)⍳⍺}
mem←enlist ambiv member
⍝ ⍷: Find
fnd←{
(0≡≢,⍵)∨((lr←≢⍴⍺)>rr←≢⍴⍵)∨any(⍴⍺)>(-≢⍴⍺)↑⍴⍵:(⍴⍵)⍴0 ⋄ 0≡≢,⍺:(⍴⍵)⍴1
(⍴⍵)↑(((rr↑⍴x),×⌿w)⍴x←(w←((0⌈rr-lr)⍴1),⍴⍺)⌺⍵)∧.=,⍺
}
⍝ ∪: Unique | Union
unique←{0≡≢⍴⍵:,⍵ ⋄ 1≡≢⍵:⍵ ⋄ ⍵⌿⍨(⍳≢⍵)=⍵⍳⍵}
union←{1<≢⍴⍺:⎕SIGNAL 4 ⋄ 1<≢⍴⍵:⎕SIGNAL 4 ⋄ ⍺⍪⍵⌿⍨(≢⍺)=(,⍺)⍳⍵}
unq←unique ambiv union
⍝ ∩: Intersection
intmon←{⎕SIGNAL 2}
int←{1<≢⍴⍺:⎕SIGNAL 4 ⋄ 1<≢⍴⍵:⎕SIGNAL 4 ⋄ ⍺⌿⍨⍺∊⍵}
⍝ ⌺: Stencil
stn←{
1≥≢⍴⍺:⍺{
r←≢w←⍺ ⋄ a←⍵
si←⍳¨s←1+(r↑⍴a)-w ⋄ wi←w⊤⍳c←×⌿w ⋄ st←(sc←×⌿s)(tc←×⌿ts←r↓⍴a)
(s,w,ts)⍴z⊣{⍵+1⊣z[;⍵;]←st⍴(wi[;⍵]+si)⌷a}⍣c⊢0⊣z←sc c tc⍴⊃⍵
}⍵
r←≢w←0⌷⍺ ⋄ s←1⌷⍺ ⋄ a←⍵ ⋄ p←⌈s÷⍨(r↑⍴a)-w-1 ⋄ ts←r↓⍴a
(i,(⍳≢ts)+≢i←,i,⍪r+i←⍳r)⍉(ts,⍨,p,⍪s)⍴(p×s)↑⍵
}
⍝ ?: Roll | Deal
deal←{
(0≢≢⍴squeeze ⍺)∨(0≢≢⍴squeeze ⍵):⎕SIGNAL 5
~⍺ both_integer ⍵:⎕SIGNAL 11
(⍺>⍵)∨(⍺<0)∨⍵<0:⎕SIGNAL 11 ⋄ 0≡⍺:⍬
d←⍳⍵ ⋄ s{⊃d[⍺ ⍵]←d[⍵ ⍺]}¨s+?⍵-s←⍳⍺
}
roll←{
~is_integer squeeze ⍵:⎕SIGNAL 11
0≡≢,⍵:(⍴⍵)⍴⍬
any ⍵<0:⎕SIGNAL 11
(rnd×⍵=0)+⌊⍵×rnd←(⍴⍵)⍴'roll_ibeam'⌶ ⍵
}
rol←roll ambiv deal
⍝ ⌹: Matrix Division  (ATA)−1 AT
matinv←{
2<≢⍴⍵:⎕SIGNAL 4 ⋄ 0≡≢,⍵:⎕SIGNAL 5 ⋄ x←⍪⍵ ⋄ (⍴x)[0]<(⍴x)[1]:⎕SIGNAL 5
(⍴x)[0]≡(⍴x)[1]:(⍴⍵)⍴'matrix_inverse_ibeam'⌶ x
(⌹tx+.×⍵)+.×tx←⍉x
}
matdiv←{x←⍪⍺ ⋄ y←⍪⍵
2<≢⍴⍵:⎕SIGNAL 4 ⋄ 2<≢⍴⍺:⎕SIGNAL 4 ⋄ (⍴y)[0]<(⍴y)[1]:⎕SIGNAL 5
0≡≢,⍵:⎕SIGNAL 5 ⋄ 0≡≢,⍺:⎕SIGNAL 5 ⋄ (0<≢⍴⍵)∧(0<≢⍴⍺)∧(≢⍵)≢≢⍺:⎕SIGNAL 5
((1↓⍴⍵)⍪1↓⍴⍺)⍴(⌹(+⍉y)+.×y)+.×(+⍉y)+.×x
}
mdv←matinv ambiv matdiv
⍝ ⍨: Commute
com←{2=⎕NC'⍺⍺':⍺⍺ ⋄ ⍺←⍵ ⋄ ⍵ ⍺⍺ ⍺}
⍝ ¨: Each
is_scalar←{
⍺⍺ eq + ⍬:1
⍺⍺ eq - ⍬:1
⍺⍺ eq × ⍬:1
⍺⍺ eq ÷ ⍬:1
⍺⍺ eq | ⍬:1
⍺⍺ eq ⌊ ⍬:1
⍺⍺ eq ⌈ ⍬:1
⍺⍺ eq * ⍬:1
⍺⍺ eq ⍟ ⍬:1
⍺⍺ eq ○ ⍬:1
⍺⍺ eq ! ⍬:1
0
}
is_scalar_mon←{
⍺⍺ is_scalar ⍬:1
⍺⍺ eq ~ ⍬:1
⍺⍺ eq ? ⍬:1
0
}
is_scalar_dya←{
⍺⍺ is_scalar ⍬:1
⍺⍺ eq ∧ ⍬:1
⍺⍺ eq ∨ ⍬:1
⍺⍺ eq ⍲ ⍬:1
⍺⍺ eq ⍱ ⍬:1
⍺⍺ eq < ⍬:1
⍺⍺ eq ≤ ⍬:1
⍺⍺ eq = ⍬:1
⍺⍺ eq ≥ ⍬:1
⍺⍺ eq > ⍬:1
⍺⍺ eq ≠ ⍬:1
0
}
map←{⍺←⊢ ⋄ op←⍺⍺
1≡⍺ 1:⍺{
op is_scalar_mon ⍬:op ⍵
(⍴⍵)⍴squeeze op veach ⍵
}⍵
op is_scalar_dya ⍬:⍺ op ⍵
(⍺ chk_scl ⍵)⍴squeeze ⍺ ⍺⍺ veach ⍵
}
⍝ ⌿: Reduce First | N-wise Reduce First
identity←{
⍺⍺ eq + ⍬:0
⍺⍺ eq - ⍬:0
⍺⍺ eq × ⍬:1
⍺⍺ eq ÷ ⍬:1
⍺⍺ eq | ⍬:0
⍺⍺ eq ⌊ ⍬:1.7976931348623157E308
⍺⍺ eq ⌈ ⍬:¯1.7976931348623157E308
⍺⍺ eq * ⍬:1
⍺⍺ eq ! ⍬:1
⍺⍺ eq ∧ ⍬:1
⍺⍺ eq ∨ ⍬:0
⍺⍺ eq < ⍬:0
⍺⍺ eq ≤ ⍬:1
⍺⍺ eq = ⍬:1
⍺⍺ eq ≥ ⍬:1
⍺⍺ eq > ⍬:0
⍺⍺ eq ≠ ⍬:0
⍺⍺ eq ⊤ ⍬:0
⍺⍺ eq ∪ ⍬:⊂⍬
⍺⍺ eq ⌿ ⍬:1
⍺⍺ eq / ⍬:1
⍺⍺ eq \ ⍬:1
⍺⍺ eq ⍀ ⍬:1
⍺⍺ eq ⌽ ⍬:0
⍺⍺ eq ⊖ ⍬:0
⎕SIGNAL 16
}
reduce_axis←{axis←⍵⍵ ⋄ op←⍺⍺
0≡≢⍴⍵:0∇,⍵ ⋄ s←⍴⍵
0≡≢,⍵:((axis↑s),(axis+1)↓s)⍴⍺⍺ identity ⍬
1≡c←s[axis]:((axis↑s),(axis+1)↓s)⍴⍵
⍺⍺ eq ⊢ ⍬:(c-1)⌷[axis]⍵
⍺⍺ eq ⊣ ⍬:0⌷[axis]⍵
gen_red←{⍵{((c⊢←c-1)⌷[axis]⍺)op¨⍵}⍣c⊢(c←c-1)⌷[axis]⍵}
is_char ⍵:gen_red ⍵ ⋄ ~is_simple ⍵:gen_red ⍵
ib←is_bool ⍵ ⋄ ir←~is_cmpx ⍵
1≡≢⍴⍵:{
op eq + ⍬:{ib:'count_vec'⌶ ⍵ ⋄ 'sum_vec'⌶ ⍵}⍵
op eq × ⍬:{ib:'all_true_vec'⌶ ⍵ ⋄ 'product_vec'⌶ ⍵}⍵
ir∧op eq ⌊ ⍬:{ib:'all_true_vec'⌶ ⍵ ⋄ 'min_vec'⌶ ⍵}⍵
ir∧op eq ⌈ ⍬:{ib:'any_true_vec'⌶ ⍵ ⋄ 'max_vec'⌶ ⍵}⍵
ib∧op eq ∧ ⍬:'all_true_vec'⌶ ⍵
ib∧op eq ∨ ⍬:'any_true_vec'⌶ ⍵
ib∧op eq ≠ ⍬:⍬⍴1 bitand 'count_vec'⌶ ⍵
gen_red ⍵
}⍵
lc←×⌿ls←axis↑s ⋄ rc←×⌿rs←(axis+1)↓s ⋄ zs←ls,rs
⍺⍺ eq + ⍬:zs⍴{ib:'count_array'⌶ ⍵ ⋄ 'sum_array'⌶ ⍵}lc c rc⍴⍵
⍺⍺ eq × ⍬:zs⍴{ib:'all_true_array'⌶ ⍵ ⋄ 'product_array'⌶ ⍵}lc c rc⍴⍵
ir∧⍺⍺ eq ⌊ ⍬:zs⍴{ib:'all_true_array'⌶ ⍵ ⋄ 'min_array'⌶ ⍵}lc c rc⍴⍵
ir∧⍺⍺ eq ⌈ ⍬:zs⍴{ib:'any_true_array'⌶ ⍵ ⋄ 'max_array'⌶ ⍵}lc c rc⍴⍵
ib∧⍺⍺ eq ∧ ⍬:zs⍴'all_true_array'⌶ lc c rc⍴⍵
ib∧⍺⍺ eq ∨ ⍬:zs⍴'any_true_array'⌶ lc c rc⍴⍵
ib∧⍺⍺ eq ≠ ⍬:zs⍴1 bitand 'count_array'⌶ lc c rc⍴⍵
gen_red ⍵
}
nwreduce_axis←{op←⍺⍺¨ ⋄ axis←⍵⍵ ⋄ rc←1+(⍴⍵)[axis]
1<≢⍴⍺:⎕SIGNAL 4 ⋄ 1≢≢,⍺:⎕SIGNAL 5
0≡is_integer ⍺:⎕SIGNAL 11 ⋄ (|⍺)>rc:⎕SIGNAL 5
0=⍺:(s⊣s[axis]+←1⊣s←⍴⍵)⍴⍺⍺ identity ⍬ ⋄ 1=|⍺:⍵
rc-←|⍺ ⋄ stp←{z⊢←((⊂⍺+⍳rc)⌷[axis]⍵)op z}
⍺<0:z⊣(1+⍳¯1+|⍺)stp¨⊂⍵⊣z←rc↑[axis]⍵
z⊣(⌽⍳⍺-1)stp¨⊂⍵⊣z←(⍺-1)↓[axis]⍵
}
reduce_first←{hax←1 ⋄ axis⍠←0⊣hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ (⍺⍺ reduce_axis axis)⍵}
nwreduce_first←{hax←1 ⋄ axis⍠←0⊣hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ ⍺(⍺⍺ nwreduce_axis axis)⍵}
rdf←{⍺←⊢ ⋄ hax←1 ⋄ axis⍠←0⊣hax←0 ⋄ hax(axis chk_axis)⍵:
1≡⍺ 1:(⍺⍺ reduce_axis axis)⍵ ⋄ ⍺(⍺⍺ nwreduce_axis axis)⍵
}
⍝ /: Reduce | N-wise Reduce
reduce_last←{hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ (⍺⍺ reduce_axis axis)⍵}
nwreduce_last←{hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ ⍺(⍺⍺ nwreduce_axis axis)⍵}
red←{⍺←⊢ ⋄ hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵:
1≡⍺ 1:hax(⍺⍺ reduce_axis axis)⍵ ⋄ ⍺(⍺⍺ nwreduce_axis axis)⍵
}
⍝ ⍸: Where/Interval Index
where_nz←'where_nz_ibeam'⌶
where←{
1<≢⍴⍵:(,⍳⍴⍵)[⍸,⍵]
0≡≢,⍵:⍬
~is_numeric ⍵:⎕SIGNAL 11 ⋄ any ⍵<0:⎕SIGNAL 11
0≡≢i←where_nz ⍵:⍬
sx←+⍀x←(,⍵)[i] ⋄ (≢i)≡c←sx[0⌈¯1+≢i]:i
+⍀z⊣z[0,¯1↓sx]←i-0,¯1↓i⊣z←c⍴0
}
interval_idx←{
1<≢⍴⍺:⎕SIGNAL 16 ⋄ 1<≡⍺:⎕SIGNAL 16 ⋄ 1<≡⍵:⎕SIGNAL 16
0=≢⍴⍺:⎕SIGNAL 4
(is_char ⍺)∨is_char ⍵:⎕SIGNAL 16
0≡≢⍵:⍬ ⋄ 0≡≢⍺:(≢⍵)⍴⍬ ⋄ any 2>⌿⍺:⎕SIGNAL 11
lv←⍺ ⋄ rv←,⍵ ⋄ zv←(≢,⍵)⍴¯1
_←{⍵-h⊣zv[i]←t[i←⍸lv[t←zv+h]≤rv]⊣h←⌈⍵÷2}⍣(⌈2⍟lc)⊢lc←≢lv
(⍴⍵)⍴zv+m×lv[zv+m←zv≠lc-1]≤rv
}
iou←where ambiv interval_idx
⍝ ⌿⌿: Replicate First
rpfmon←{⎕SIGNAL 2}
rpf←{
hax←1 ⋄ axis⍠←hax←0 ⋄ hax(axis chk_axis)⍵:
noscl←{0≡≢⍴⍵:,⍵ ⋄ ⍵} ⋄ x←noscl ⍺ ⋄ y←noscl ⍵
1<≢⍴⍺:⎕SIGNAL 4 ⋄ (0≢≢x)∧~is_integer x:⎕SIGNAL 11
(ya≢≢x)∧(1≢≢x)∧1≢ya←(⍴y)[axis]:⎕SIGNAL 5
ac←ya{(⍺⌈⍵)×⍺ ⍵∧.≠0}≢x ⋄ x←ac⍴x
s←⍴z←(⊂(ya≠1)×i←⍸|x)⌷[axis]y ⋄ ls←×⌿axis↑s ⋄ rs←×⌿(axis+1)↓s
z←ls(s[axis])rs⍴z ⋄ z[;⍸x[i]<0;]←⊂⊃0⍴,y ⋄ s⍴z
}
⍝ //: Replicate
repmon←{⎕SIGNAL 2}
rep←{
hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵:
noscl←{0≡≢⍴⍵:,⍵ ⋄ ⍵} ⋄ x←noscl ⍺ ⋄ y←x{1≡≢,⍵:(⍴⍺)⍴⍵ ⋄ ⍵}noscl ⍵
x⌿[axis]y
}
⍝ ⍀: Scan First
scan←{axis←⍵⍵ ⋄ fn←⍺⍺ ⋄ hax←⍺ ⋄ hax(axis chk_axis)⍵:
0≡≢⍴⍵:⍵ ⋄ 1≡≢,⍵:⍵ ⋄ (0≡≢,⍵)∨1≡(⍴⍵)[axis]:⍵
1≥≢⍴⍵:{
vec_gen←{squeeze (⍴⍵)⍴{fn⌿x[⍳⍵]}¨1+⍳≢x←⍵}
is_char ⍵:vec_gen ⍵ ⋄ ~is_simple ⍵:vec_gen ⍵
ib←is_bool ⍵ ⋄ ir←~is_cmpx ⍵
fn eq + ⍬:'plus_scan_vec'⌶ ⍵
fn eq × ⍬:'times_scan_vec'⌶ ⍵
ir∧fn eq ⌊ ⍬:'min_scan_vec'⌶ ⍵
ir∧fn eq ⌈ ⍬:'max_scan_vec'⌶ ⍵
ib∧fn eq ∧ ⍬:'min_scan_vec'⌶ ⍵
ib∧fn eq ∨ ⍬:'max_scan_vec'⌶ ⍵
ib∧fn eq ≠ ⍬:1 bitand 'plus_scan_vec'⌶ ⍵
vec_gen ⍵
}⍵
c←(⍴⍵)[axis] ⋄ ls←×⌿axis↑⍴⍵ ⋄ rs←×⌿(axis+1)↓⍴⍵ ⋄ x←ls c rs⍴⍵
⍝ arr_gen←{squeeze(⍴⍵)⍴z⊣{z[;⍵;]←fn⌿[1]x[;⍳1+⍵;]}¨⍳c⊣z←ls c rs⍴⊃⍵}
arr_gen←{squeeze(⍴⍵)⍴z⊣{⍵+1⊣z[;⍵;]←fn⌿[1]x[;⍳1+⍵;]}⍣c⊢0⊣z←ls c rs⍴⊃⍵}
is_char ⍵:arr_gen ⍵ ⋄ ~is_simple ⍵:arr_gen ⍵
ib←is_bool ⍵ ⋄ ir←~is_cmpx ⍵
⍺⍺ eq + ⍬:(⍴⍵)⍴'plus_scan_array'⌶ x
⍺⍺ eq × ⍬:(⍴⍵)⍴'times_scan_array'⌶ x
ir∧⍺⍺ eq ⌊ ⍬:(⍴⍵)⍴'min_scan_array'⌶ x
ir∧⍺⍺ eq ⌈ ⍬:(⍴⍵)⍴'max_scan_array'⌶ x
ib∧⍺⍺ eq ∧ ⍬:(⍴⍵)⍴'min_scan_array'⌶ x
ib∧⍺⍺ eq ∨ ⍬:(⍴⍵)⍴'max_scan_array'⌶ x
ib∧⍺⍺ eq ≠ ⍬:(⍴⍵)⍴1 bitand 'plus_scan_array'⌶ x
arr_gen ⍵
}
scfdya←{⎕SIGNAL 2}
scf←{hax←1 ⋄ axis⍠←hax←0 ⋄ hax ⍺⍺ scan axis⊢⍵}
⍝ \: Scan
scndya←{⎕SIGNAL 2}
scn←{hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax ⍺⍺ scan axis⊢⍵}
⍝ ⍀⍀: Expand First
xpfmon←{⎕SIGNAL 2}
xpf←{
hax←1 ⋄ axis⍠←hax←0 ⋄ hax(axis chk_axis)⍵:
0≡≢⍴⍵:⍺∇,⍵ ⋄ 1<≢⍴⍺:⎕SIGNAL 4 ⋄ as←(⍴⍵)[axis]
0≡≢⍺:⍺{0≡as:⍵ ⋄ 1≡as:s⍴⍵⊣s[axis]←0⊣s←⍴⍵ ⋄ ⎕SIGNAL 5}⍵
1≡as:(⊂(1⌈|⍺)⌿⍺>0)⌷[axis]¯2↑[axis]⍵
as≢z[¯1+≢z←+⍀m←⍺>0]:⎕SIGNAL 5
(⊂(1⌈|⍺)⌿m×z)⌷[axis](-1+as)↑[axis]⍵
}
⍝ \\: Expand Last
xpdmon←{⎕SIGNAL 2}
xpd←{
hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵:
0≡≢⍴⍵:⍺∇,⍵ ⋄ ⍺⍀[axis]⍵
}
⍝ ∘.: Outer Product
oup←{i←⍳c←(≢,⍺)×y←≢,⍵ ⋄ ((⍴⍺),⍴⍵)⍴(,⍺)[⌊i÷y]⍺⍺¨c⍴⍵}
⍝ .: Inner Product
dot_prod←'dot_prod_ibeam'⌶
matmul←'matmul_ibeam'⌶
dot←{
f←⍺⍺ ⋄ g←⍵⍵ ⋄ lr←≢⍴⍺ ⋄ rr←≢⍴⍵ ⋄ l1←1≡≢,⍺ ⋄ r1←1≡≢,⍵
x←⍺{l1:(1,≢⍵)⍴⍺ ⋄ 1≡lr:(1,⍴⍺)⍴⍺ ⋄ 2≡lr:⍺ ⋄ ,[⍳lr-1]⍺}⍵
y←⍺{r1:((⍴x)[1],1)⍴⍵ ⋄ 1≡rr:((⍴⍵),1)⍴⍵ ⋄ 2≡rr:⍵ ⋄ ,[1+⍳rr-1]⍵}⍵
(⍴x)[1]≢(⍴y)[0]:⎕SIGNAL 5 ⋄ s←(¯1↓⍴⍺),1↓⍴⍵ ⋄ c←≢y ⋄ ex←0≡≢x ⋄ ey←0≡1⌷⍴y
(f eq + ⍬)∧g eq × ⍬:⍺{
~⍺ both_numeric ⍵:⎕SIGNAL 11
ex∨ey∨0≡c:s⍴⍬
(1≥lr)∧1≥rr:s⍴x dot_prod y
s⍴x matmul y
}⍵
(⍺ both_bool ⍵)∧(f eq ≠ ⍬)∧g eq ∧ ⍬:2|⍺+.×⍵
l1:s⍴⍺⍺⌿(⊂⊃⍺)⍵⍵¨⍵ ⋄ r1:s⍴⍺⍺/⍺ ⍵⍵¨⊂⊃⍵
c←≢y ⋄ ex←0≡≢x ⋄ ey←0≡1⌷⍴y
ex∧ey:s⍴f⌿(c⍴x)g¨c⍴y ⋄ ex:s⍴f⌿(c⍴x)g¨y[;0] ⋄ ey:s⍴f⌿x[0;]g¨c⍴y
0≡c:s⍴f⌿x[0;] g¨y[;0]
z←((≢x),1⌷⍴y)⍴0
_←{i←⍵ ⋄ tl←¯1+≢y ⋄ t←x[i;tl] g¨y[tl;]
⍝ z[i;]←x[i;] f.g y
⍝ z[i;] = f⌿ x[i;] g[0] y
_←{j←⍵
t⊢←(x[i;j] g¨y[j;])f¨ t
⍵-1}⍣tl⊢tl-1
z[i;]←t
⍵+1}⍣(≢x)⊢0
s⍴z
}
⍝ ⍣: Power Operator
pow←{
⍺←⊢ ⋄ l←⍺ ⋄ f←⍺⍺ ⋄ g←⍵⍵
3=⎕NC'⍵⍵':{(z←l f ⍵)g ⍵:z ⋄ ∇z}⍵
g{0=⍺:⍵ ⋄ (⍺-1)∇l f ⍵}⍵
}
⍝ ∘: Compose Operator
jot←{
type←⎕NC'⍺' '⍺⍺' '⍵⍵'
type≡2 3 3:⍺ ⍺⍺ ⍵⍵ ⍵
type≡0 3 3:⍺⍺ ⍵⍵ ⍵
type≡0 2 3:⍺⍺ ⍵⍵ ⍵
type≡0 3 2:⍵ ⍺⍺ ⍵⍵
⎕SIGNAL 2
}
⍝ ⍤: Rank operator
rnk←{fn←⍺⍺ ⋄ spec←⍵⍵ ⋄ ⍺←⊢
1<≡spec:⎕SIGNAL 11 ⋄ 1<≢⍴spec:⎕SIGNAL 4 ⋄ 3<≢spec:⎕SIGNAL 5
spec←3⍴(¯1×2≡≢spec)⌽spec ⋄ p←spec[0] ⋄ q←spec[1] ⋄ r←spec[2]
1≡⍺ 1:{
p≥k←≢⍴⍵:fn ⍵ ⋄ k≤|p:↑fn¨⍵ ⋄ d←k-k|p ⋄ any 0=s←d↑⍴⍵:s⍴⍬
↑s⍴{fn ⍵⌷z}¨⍳≢z←,[⍳d←k-k|p]⍵}⍵
dx←⍺{q≥k←≢⍴⍺:0 ⋄ k≤|q:k ⋄ k-k|q}⍵ ⋄ dy←⍺{r≥k←≢⍴⍵:0 ⋄ k≤|r:k ⋄ k-k|r}⍵
s←⍺{
dx∧dy∧dx≢dy:⎕SIGNAL 4 ⋄ dx∧dy∧(dx↑⍴⍺)≢dy↑⍴⍵:⎕SIGNAL 5
dx≢0:dx↑⍴⍺ ⋄ dy≢0:dy↑⍴⍵ ⋄ ⍬
}⍵
x←⍺{dx≡0:(1,⍴⍺)⍴⍺ ⋄ ,[⍳dx]⍺}⍵ ⋄ y←⍺{dy≡0:(1,⍴⍵)⍴⍵ ⋄ ,[⍳dy]⍵}⍵
↑s⍴((≢x)|⍳c){(⍺⌷x) fn ⍵⌷y}¨(≢y)|⍳c←(≢x)⌈≢y
}
⍝ @: At operator
at←{⍺←⊢
lfn←3=⎕NC'⍺⍺'
rfn←3=⎕NC'⍵⍵'
lfn⍱1≡⍺ 1:⎕SIGNAL 2
~lfn:⍺⍺⊣∇∇ ⍵⍵⊢⍵
S←⍵⍵⊣⍵
rfn<1<|≡S:A⊣A[S]←⍺ ⍺⍺(A←⍵)[S]
pfx←{⍺≡(⍴⍺)↑⍵}
rfn⍱1≥⍴⍴S:⎕SIGNAL 4
~rfn≤pfx/⍴¨S ⍵:⎕SIGNAL 5
X←⍸∘~∘~⍣rfn⊢,S
P←,[⍳1+⍴⍴S]↑,⊂⍵
sel←(⊂X)⌷P
sx←{⍬⍴⍣(1=×/⍴⍵)⊢⍵}
new←sx ⍺ ⍺⍺ sel
ext←new∘.⊣((⍴⍴new)↓⍴sel)⍴0
⍝ (⍴⍵)⍴P⊣((⊂X)⌷P)←ext
(⍴⍵)⍴'sqdset_ibeam'⌶ P (⊂X) ext
}
⍝ ⌸: Key operator
key←{op←⍺⍺ ⋄ ⍺←⊢
1≡⍺ 1:⍵ ∇⍳≢⍵
1<≢⍴⍺:⎕SIGNAL 16
(≢⍺)≢≢⍵:⎕SIGNAL 5
3=⎕NC'⍺⍺':↑(m⌿⍺)op¨(m←≠(⊂i)⌷⍺)⊂[0](⊂i←⍋⍺)⌷⍵
m←(≢op)≥op⍳⍺ ⋄ k←op⍪m⌿⍺ ⋄ v←(-≢k)↑m⌿⍵
1↓¨k{⊂⍵}∇∇ v
}
⍝ ⍕: Formatting
fmt←{
v←{
1289=⎕DR ⍵:(∇ 9○⍵),'J',∇ 11○⍵
⍵<0:'¯',∇ |⍵
⍵≠⌊⍵:(∇ ⌊|⍵),'.',∇ ⌊10000×⍵-⌊⍵
'0123456789'[x⊤⍨10⍴⍨1⌈⌈10⍟1+x←|⍵]
}¨⍵
1≥≢⍴v:¯1↓∊(⍪v),' '
(-1+⌈⌿≢¨v){1↓∊⍺↑¨⍵}⍤1⊢v
}
⍝ ⎕⍞: Printing
println←{
1<≡⍵:⎕SIGNAL 16
~is_char ⍵:⍵⊣⎕←⍕⍵
2<≢⍴⍵:{⎕←⍵ ⋄ ⎕←''}⍤¯1⊢⍵
2=≢⍴⍵:{⎕←⍵}⍤¯1⊢⍵
1('print_arr'⌶),⍵
}
print←{
1<≢⍴⍵:⎕SIGNAL 16
1<≡⍵:⎕SIGNAL 16
~is_char ⍵:⎕SIGNAL 16
0('print_arr'⌶)⍵
}
⍝ ⎕TS: Time stamp
q_ts←'q_ts_ibeam'⌶
⍝ Conor's Easter Eggs
starling←violetstarling←{⍺←⍵ ⋄ ⍺ ⍺⍺ ⍵⍵ ⍵}
dove←zebradove←{⍺←⍵ ⋄ (⍺⍺ ⍺)⍵⍵ ⍵}
:EndNamespace
:Namespace t0029_strand_assignment
CHK←{⍺←⊢ ⋄ (0∊∊⍵)∨0=≢⍵:⍺ ⎕SIGNAL 8⊣⎕←'✗' ⋄ _←0⊣⍞←'✓'}
⍝ ERRS←{⍺←⊢ ⋄ ⍵⍵::1 ⋄ 0⊣⍺ ⍺⍺ ⍵}
⍞←'Strand Assignment: '
t1←{x y z←⍵ ⋄ x y z}
CHK x x x≡t1⊢x←5
CHK x≡t1⊢x←1 2 3
CHK x≡t1⊢x←(1 2 3)(3 4 5)(5 6 7)
CHK x≡t1⊢x←1(1 2 3)4
CHK x≡t1⊢x←'abc'
CHK x≡t1⊢x←'abc' 'def' (1 2 3)
⍞←' '
t2←{(x y z)((a b c)d e f)g h←⍵}
CHK x≡t2⊢x←4
CHK x≡t2⊢x←1 2 3 4
CHK x≡t2⊢x←(1 2 3)2 3 4
CHK x≡t2⊢x←1 (2 3 4 5) 7 8
CHK x≡t2⊢x←1 ((2 3 4)5 6 7)8 9
CHK x≡t2⊢x←1 2 (3 4 5)(6 7 8)
⍞←' '
t3←{(x y z)((a b c)d e f)g h←⍵ ⋄ (x y z)((a b c)d e f)g h}
CHK (x x x)((x x x)x x x)x x≡t3⊢x←4
CHK (a a a)((b b b)b b b)c d≡t3⊢a b c d←1 2 3 4
CHK (1 2 3)((2 2 2)2 2 2)3 4≡t3⊢x←(1 2 3)2 3 4
CHK (1 1 1)((2 2 2)3 4 5)7 8≡t3⊢x←1 (2 3 4 5) 7 8
CHK (1 1 1)((2 3 4)5 6 7)8 9≡t3⊢x←1 ((2 3 4)5 6 7)8 9
CHK (1 1 1)((2 2 2)2 2 2)(3 4 5)(6 7 8)≡t3⊢x←1 2 (3 4 5)(6 7 8)
⍞←' '
t4←{x y z←⍵ ⋄ {x y z}⍬}
CHK x x x≡t1⊢x←5
CHK x≡t4⊢x←1 2 3
CHK x≡t4⊢x←(1 2 3)(3 4 5)(5 6 7)
CHK x≡t4⊢x←1(1 2 3)4
CHK x≡t4⊢x←'abc'
CHK x≡t4⊢x←'abc' 'def' (1 2 3)
⎕←'☺'
:EndNamespace
:Namespace t0099_parsing
⍝ ⍞←'✓'
⍝ ⎕←'✗'
CHK←{⍺←⊢ ⋄ (0∊∊⍵)∨0=≢⍵:⍺ ⎕SIGNAL 8 ⋄ _←0}
ERRS←{⍺←⊢ ⋄ ⍵⍵::1 ⋄ 0⊣⍺ ⍺⍺ ⍵}
∇{Z}←{E}PARSE X
Z←1
→(⎕NC'E')⌿HASE
(p d t k n lx pos end)(xn xt)sym IN←##.codfns.PS src←X ⋄ →0
HASE:(p d t k n lx pos end)(xn xt)sym IN←E ##.codfns.PS src←X
∇
∇Z←NS src
Z←(⊂':Namespace'),src,⊂':EndNamespace'
∇
MKSYM←{
⍬≡⍵:'⍬'
v←v,(⍕⍵),v←''''⌿⍨' '=⊃0⍴⍵
(,1)≡⍴⍵:'(,',v,')'
v
}
MK←{(p d t k n lx pos end)(xn xt)sym IN←CD.PS ⍵
⎕←' CHK t=CD.(',(⊃{⍺,' ',⍵}⌿CD.N∆[t]),')'
⎕←' CHK p=',⍕p
⎕←' CHK d=',⍕d
⎕←' CHK k=',⍕k
⎕←' CHK lx=',⍕lx
⎕←' CHK pos=',⍕pos
⎕←' CHK end=',⍕end
⎕←' CHK ({sym[|⍵]}@{⍵<0}n)≡',⊃{⍺,' ',⍵}⌿MKSYM¨{sym[|⍵]}@{⍵<0}⊢n
⎕←' CHK sym≡',⊃{⍺,' ',⍵}⌿MKSYM¨sym
⎕←' CHK xn≡',(',⊂'⌿⍨1=≢xn),⊃{⍺,' ',⍵}⌿(⊂''),MKSYM¨xn
⎕←' CHK xt≡,',⍕xt
}
∇{Z}←TEST;src;p;d;t;k;n;lx;pos;end;xn;xt;sym;IN;CD
Z←⍪⍬
CD←##.codfns
CHK PARSE NS '∇FN' '∇'
CHK t=CD.(F C T H)
CHK p d=(0 0 1 2)(0 1 2 3)
CHK k=0 1 1 0
CHK n=0 (-sym⍳⊂'FN')(-sym⍳⊂'FN') 0
CHK lx=4 0 0 0
CHK pos end=(0 11 11 12)(30 16 16 14)
CHK xn xt≡¨(,⊂'FN')(,1)
CHK PARSE NS '∇FN X' '∇'
CHK t=CD.(F C T H V)
CHK p d=(0 0 1 2 3)(0 1 2 3 4)
CHK k=0 2 2 1 1
CHK n=0(-sym⍳⊂'FN') (-sym⍳⊂'FN')0(-sym⍳⊂,'X')
CHK lx=4 0 0 0 4
CHK pos end=(0 11 11 12 15)(32 18 18 16 16)
CHK xn xt≡¨(,⊂'FN')(,2)
CHK PARSE NS '∇X FN Y' '∇'
CHK t=CD.(F C T H V V)
CHK p d=(0 0 1 2 3 3)(0 1 2 3 4 4)
CHK k=0 2 3 3 1 1
CHK n=0 (-sym⍳⊂'FN')(-sym⍳⊂'FN')0,-sym⍳,¨'XY'
CHK lx=4 0 0 0 4 4
CHK pos end=(0 11 11 12 12 17)(34 20 20 18 13 18)
CHK xn xt≡¨(,⊂'FN')(,2)
CHK PARSE NS '∇Z←FN' '∇'
CHK t=CD.(F C T H V)
CHK p d=(0 0 1 2 3)(0 1 2 3 4)
CHK k=0 1 1 4 1
CHK n=0(-sym⍳⊂'FN')(-sym⍳⊂'FN')0(-sym⍳⊂,'Z')
CHK lx=4 0 0 0 4
CHK pos end=(0 11 11 12 12)(32 18 18 16 13)
CHK xn xt≡¨(,⊂'FN')(,1)
CHK PARSE NS '∇Z←FN X' '∇'
CHK t=CD.(F C T H V V)
CHK p d=(0 0 1 2 3 3)(0 1 2 3 4 4)
CHK k=0 2 2 5 1 1
CHK n=0(-sym⍳⊂'FN')(-sym⍳⊂'FN')0,-sym⍳,¨'ZX'
CHK lx=4 0 0 0 4 4
CHK pos end=(0 11 11 12 12 17)(34 20 20 18 13 18)
CHK xn xt≡¨(,⊂'FN')(,2)
CHK PARSE NS '∇Z←X FN Y' '∇'
CHK t=CD.(F C T H V V V)
CHK p d=(0 0 1 2 3 3 3)(0 1 2 3 4 4 4)
CHK k=0 2 3 7 1 1 1
CHK n=0(-sym⍳⊂'FN')(-sym⍳⊂'FN')0,-sym⍳,¨'ZXY'
CHK lx=4 0 0 0 4 4 4
CHK pos end=(0 11 11 12 12 14 19)(36 22 22 20 13 15 20)
CHK xn xt≡¨(,⊂'FN')(,2)
CHK PARSE NS '∇(L FN)Y' '∇'
CHK t=CD.(F C T H V V T H V V)
CHK p d=(0 0 1 2 3 3 1 6 7 7)(0 1 2 3 4 4 2 3 4 4)
CHK k=0 3 4 9 1 1 6 9 2 1
CHK n=0(-sym⍳⊂'FN'),8⍴(-sym⍳⊂'FN')0,-sym⍳,¨'LY'
CHK lx=4 0 0 0 4 4 0 0 4 4
CHK pos end=(0 11 11 12 13 18 11 12 13 18)(35 21 21 19 14 19 21 19 14 19)
CHK xn xt≡¨(,⊂'FN')(,3)
CHK PARSE NS '∇X(L FN)Y' '∇'
CHK t=CD.(F C T H V V V T H V V V)
CHK p d=(0 0 1 2 3 3 3 1 7 8 8 8)(0 1 2 3 4 4 4 2 3 4 4 4)
CHK k=0 3 5 11 1 1 1 7 11 1 2 1
CHK n=0(-sym⍳⊂'FN'),10⍴(-sym⍳⊂'FN')0,-sym⍳,¨'XLY'
CHK lx=4 0 0 0 4 4 4 0 0 4 4 4
CHK pos end=(0 11 11 12 12 14 19 11 12 12 14 19)(36 22 22 20 13 15 20 22 20 13 15 20)
CHK xn xt≡¨(,⊂'FN')(,3)
CHK PARSE NS '∇Z←X(L FN)Y' '∇'
CHK t=CD.(F C T H V V V V T H V V V V)
CHK p d=(0 0 1 2 3 3 3 3 1 8 9 9 9 9)(0 1 2 3 4 4 4 4 2 3 4 4 4 4)
CHK k=0 3 5 15 1 1 1 1 7 15 1 1 2 1
CHK n=0(-sym⍳⊂'FN'),12⍴(-sym⍳⊂'FN')0,-sym⍳,¨'ZXLY'
CHK lx=4 0 0 0 4 4 4 4 0 0 4 4 4 4
CHK pos end=(0 11 11 12 12 14 16 21 11 12 12 14 16 21)(38 24 24 22 13 15 17 22 24 22 13 15 17 22)
CHK xn xt≡¨(,⊂'FN')(,3)
CHK PARSE NS '∇(L FN R)Y' '∇'
CHK t=CD.(F C T H V V V T H V V V T H V V V T H V V V)
CHK p=0 0 1 2 3 3 3 1 7 8 8 8 1 12 13 13 13 1 17 18 18 18
CHK d=0 1 2 3 4 4 4 2 3 4 4 4 2 3 4 4 4 2 3 4 4 4
CHK k=0 4 8 25 1 1 1 10 25 2 1 1 12 25 1 2 1 14 25 2 2 1
CHK n=0(-sym⍳⊂'FN'),20⍴(-sym⍳⊂'FN')0,-sym⍳,¨'LRY'
CHK lx=4 0 0 0 4 4 4 0 0 4 4 4 0 0 4 4 4 0 0 4 4 4
CHK pos=0 11 11 12 13 18 20 11 12 13 18 20 11 12 13 18 20 11 12 13 18 20
CHK end=37 23 23 21 14 19 21 23 21 14 19 21 23 21 14 19 21 23 21 14 19 21
CHK xn xt≡¨(,⊂'FN')(,4)
CHK PARSE NS '∇X(L FN R)Y' '∇'
CHK t=CD.(F C T H V V V V T H V V V V T H V V V V T H V V V V)
CHK p=0 0 1 2 3 3 3 3 1 8 9 9 9 9 1 14 15 15 15 15 1 20 21 21 21 21
CHK d=0 1 2 3 4 4 4 4 2 3 4 4 4 4 2 3 4 4 4 4 2 3 4 4 4 4
CHK k=0 4 9 27 1 1 1 1 11 27 1 2 1 1 13 27 1 1 2 1 15 27 1 2 2 1
CHK n=0(-sym⍳⊂'FN'),24⍴(-sym⍳⊂'FN')0,-sym⍳,¨'XLRY'
CHK lx=4 0 0 0 4 4 4 4 0 0 4 4 4 4 0 0 4 4 4 4 0 0 4 4 4 4
CHK pos=0 11 11 12 12 14 19 21 11 12 12 14 19 21 11 12 12 14 19 21 11 12 12 14 19 21
CHK end=38 24 24 22 13 15 20 22 24 22 13 15 20 22 24 22 13 15 20 22 24 22 13 15 20 22
CHK xn xt≡¨(,⊂'FN')(,4)
CHK PARSE NS '∇Z←X(L FN R)Y' '∇'
CHK t=CD.(F C T H V V V V V T H V V V V V T H V V V V V T H V V V V V)
CHK p=0 0 1 2 3 3 3 3 3 1 9 10 10 10 10 10 1 16 17 17 17 17 17 1 23 24 24 24 24 24
CHK d=0 1 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4
CHK k=0 4 9 31 1 1 1 1 1 11 31 1 1 2 1 1 13 31 1 1 1 2 1 15 31 1 1 2 2 1
CHK n=0(-sym⍳⊂'FN'),28⍴(-sym⍳⊂'FN')0,-sym⍳,¨'ZXLRY'
CHK lx=4 0 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4
CHK pos=0 11 11 12 12 14 16 21 23 11 12 12 14 16 21 23 11 12 12 14 16 21 23 11 12 12 14 16 21 23
CHK end=40 26 26 24 13 15 17 22 24 26 24 13 15 17 22 24 26 24 13 15 17 22 24 26 24 13 15 17 22 24
CHK xn xt≡¨(,⊂'FN')(,4)
CHK PARSE NS '∇{X} FN Y' '∇'
CHK t=CD.(F C T H V V T H V V)
CHK p=0 0 1 2 3 3 1 6 7 7
CHK d=0 1 2 3 4 4 2 3 4 4
CHK k=0 2 2 35 1 1 3 35 1 1
CHK lx=4 0 0 0 4 4 0 0 4 4
CHK pos=0 11 11 12 13 19 11 12 13 19
CHK end=36 22 22 20 14 20 22 20 14 20
CHK n=0(-sym⍳⊂'FN'),8⍴(-sym⍳⊂'FN')0,-sym⍳,¨'XY'
CHK xn xt≡¨(,⊂'FN')(,2)
CHK PARSE NS '∇Z←{X}FN Y' '∇'
CHK t=CD.(F C T H V V V T H V V V)
CHK p=0 0 1 2 3 3 3 1 7 8 8 8
CHK d=0 1 2 3 4 4 4 2 3 4 4 4
CHK k=0 2 2 39 1 1 1 3 39 1 1 1
CHK lx=4 0 0 0 4 4 4 0 0 4 4 4
CHK pos=0 11 11 12 12 15 20 11 12 12 15 20
CHK end=37 23 23 21 13 16 21 23 21 13 16 21
CHK sym[|n]≡,¨''  'FN'  'FN'  ''  'Z'  'X'  'Y'  'FN'  ''  'Z'  'X'  'Y'
CHK xn xt≡¨(,⊂'FN')(,2)
CHK PARSE NS '∇{X}(L FN)Y' '∇'
CHK t=CD.(F C T H V V V T H V V V T H V V V T H V V V)
CHK p=0 0 1 2 3 3 3 1 7 8 8 8 1 12 13 13 13 1 17 18 18 18
CHK d=0 1 2 3 4 4 4 2 3 4 4 4 2 3 4 4 4 2 3 4 4 4
CHK k=0 3 4 43 1 1 1 5 43 1 1 1 6 43 1 2 1 7 43 1 2 1
CHK lx=4 0 0 0 4 4 4 0 0 4 4 4 0 0 4 4 4 0 0 4 4 4
CHK pos=0 11 11 12 13 16 21 11 12 13 16 21 11 12 13 16 21 11 12 13 16 21
CHK end=38 24 24 22 14 17 22 24 22 14 17 22 24 22 14 17 22 24 22 14 17 22
CHK sym[|n]≡,¨ ''  'FN'  'FN'  ''  'X'  'L'  'Y'  'FN'  ''  'X'  'L'  'Y'  'FN'  ''  'X'  'L'  'Y'  'FN'  ''  'X'  'L'  'Y'
CHK xn xt≡¨(,⊂'FN')(,3)
CHK PARSE NS '∇Z←{X}(L FN)Y' '∇'
CHK t=CD.(F C T H V V V V T H V V V V T H V V V V T H V V V V)
CHK p=0 0 1 2 3 3 3 3 1 8 9 9 9 9 1 14 15 15 15 15 1 20 21 21 21 21
CHK d=0 1 2 3 4 4 4 4 2 3 4 4 4 4 2 3 4 4 4 4 2 3 4 4 4 4
CHK k=0 3 4 47 1 1 1 1 5 47 1 1 1 1 6 47 1 1 2 1 7 47 1 1 2 1
CHK lx=4 0 0 0 4 4 4 4 0 0 4 4 4 4 0 0 4 4 4 4 0 0 4 4 4 4
CHK pos=0 11 11 12 12 15 18 23 11 12 12 15 18 23 11 12 12 15 18 23 11 12 12 15 18 23
CHK end=40 26 26 24 13 16 19 24 26 24 13 16 19 24 26 24 13 16 19 24 26 24 13 16 19 24
CHK sym[|n]≡,¨ ''  'FN'  'FN'  ''  'Z'  'X'  'L'  'Y'  'FN'  ''  'Z'  'X'  'L'  'Y'  'FN'  ''  'Z'  'X'  'L'  'Y'  'FN'  ''  'Z'  'X'  'L'  'Y'
CHK xn xt≡¨(,⊂'FN')(,3)
CHK PARSE NS '∇{X}(L FN R)Y' '∇'
CHK t=CD.(F C T H V V V V T H V V V V T H V V V V T H V V V V T H V V V V T H V V V V T H V V V V T H V V V V)
CHK p=0 0 1 2 3 3 3 3 1 8 9 9 9 9 1 14 15 15 15 15 1 20 21 21 21 21 1 26 27 27 27 27 1 32 33 33 33 33 1 38 39 39 39 39 1 44 45 45 45 45
CHK d=0 1 2 3 4 4 4 4 2 3 4 4 4 4 2 3 4 4 4 4 2 3 4 4 4 4 2 3 4 4 4 4 2 3 4 4 4 4 2 3 4 4 4 4 2 3 4 4 4 4
CHK k=0 4 8 59 1 1 1 1 9 59 1 1 1 1 10 59 1 2 1 1 11 59 1 2 1 1 12 59 1 1 2 1 13 59 1 1 2 1 14 59 1 2 2 1 15 59 1 2 2 1
CHK lx=4 0 0 0 4 4 4 4 0 0 4 4 4 4 0 0 4 4 4 4 0 0 4 4 4 4 0 0 4 4 4 4 0 0 4 4 4 4 0 0 4 4 4 4 0 0 4 4 4 4
CHK pos=0 11 11 12 13 16 21 23 11 12 13 16 21 23 11 12 13 16 21 23 11 12 13 16 21 23 11 12 13 16 21 23 11 12 13 16 21 23 11 12 13 16 21 23 11 12 13 16 21 23
CHK end=40 26 26 24 14 17 22 24 26 24 14 17 22 24 26 24 14 17 22 24 26 24 14 17 22 24 26 24 14 17 22 24 26 24 14 17 22 24 26 24 14 17 22 24 26 24 14 17 22 24
CHK sym[|n]≡,¨ ''  'FN'  'FN'  ''  'X'  'L'  'R'  'Y'  'FN'  ''  'X'  'L'  'R'  'Y'  'FN'  ''  'X'  'L'  'R'  'Y'  'FN'  ''  'X'  'L'  'R'  'Y'  'FN'  ''  'X'  'L'  'R'  'Y'  'FN'  ''  'X'  'L'  'R'  'Y'  'FN'  ''  'X'  'L'  'R'  'Y'  'FN'  ''  'X'  'L'  'R'  'Y'
CHK xn xt≡¨(,⊂'FN')(,4)
CHK PARSE NS '∇Z←{X}(L FN R)Y' '∇'
CHK t=CD.(F C T H V V V V V T H V V V V V T H V V V V V T H V V V V V T H V V V V V T H V V V V V T H V V V V V T H V V V V V)
CHK p=0 0 1 2 3 3 3 3 3 1 9 10 10 10 10 10 1 16 17 17 17 17 17 1 23 24 24 24 24 24 1 30 31 31 31 31 31 1 37 38 38 38 38 38 1 44 45 45 45 45 45 1 51 52 52 52 52 52
CHK d=0 1 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4
CHK k=0 4 8 63 1 1 1 1 1 9 63 1 1 1 1 1 10 63 1 1 2 1 1 11 63 1 1 2 1 1 12 63 1 1 1 2 1 13 63 1 1 1 2 1 14 63 1 1 2 2 1 15 63 1 1 2 2 1
CHK lx=4 0 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4
CHK pos=0 11 11 12 12 15 18 23 25 11 12 12 15 18 23 25 11 12 12 15 18 23 25 11 12 12 15 18 23 25 11 12 12 15 18 23 25 11 12 12 15 18 23 25 11 12 12 15 18 23 25 11 12 12 15 18 23 25
CHK end=42 28 28 26 13 16 19 24 26 28 26 13 16 19 24 26 28 26 13 16 19 24 26 28 26 13 16 19 24 26 28 26 13 16 19 24 26 28 26 13 16 19 24 26 28 26 13 16 19 24 26 28 26 13 16 19 24 26
CHK sym[|n]≡,¨ ''  'FN'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'
CHK xn xt≡¨(,⊂'FN')(,4)
CHK PARSE NS '∇{Z}←FN' '∇'
CHK t=CD.(F C T H V)
CHK p=0 0 1 2 3
CHK d=0 1 2 3 4
CHK k=0 1 1 68 1
CHK lx=4 0 0 0 4
CHK pos=0 11 11 12 13
CHK end=34 20 20 18 14
CHK sym[|n]≡,¨ ''  'FN'  'FN'  ''  'Z'
CHK xn xt≡¨(,⊂'FN')(,1)
CHK PARSE NS '∇{Z}←FN X' '∇'
CHK t=CD.(F C T H V V)
CHK p=0 0 1 2 3 3
CHK d=0 1 2 3 4 4
CHK k=0 2 2 69 1 1
CHK lx=4 0 0 0 4 4
CHK pos=0 11 11 12 13 19
CHK end=36 22 22 20 14 20
CHK sym[|n]≡,¨ ''  'FN'  'FN'  ''  'Z'  'X'
CHK xn xt≡¨(,⊂'FN')(,2)
CHK PARSE NS '∇{Z}←X FN Y' '∇'
CHK t=CD.(F C T H V V V)
CHK p=0 0 1 2 3 3 3
CHK d=0 1 2 3 4 4 4
CHK k=0 2 3 71 1 1 1
CHK lx=4 0 0 0 4 4 4
CHK pos=0 11 11 12 13 16 21
CHK end=38 24 24 22 14 17 22
CHK sym[|n]≡,¨ ''  'FN'  'FN'  ''  'Z'  'X'  'Y'
CHK xn xt≡¨(,⊂'FN')(,2)
CHK PARSE NS '∇{Z}←X(L FN)Y' '∇'
CHK t=CD.(F C T H V V V V T H V V V V)
CHK p=0 0 1 2 3 3 3 3 1 8 9 9 9 9
CHK d=0 1 2 3 4 4 4 4 2 3 4 4 4 4
CHK k=0 3 5 79 1 1 1 1 7 79 1 1 2 1
CHK lx=4 0 0 0 4 4 4 4 0 0 4 4 4 4
CHK pos=0 11 11 12 13 16 18 23 11 12 13 16 18 23
CHK end=40 26 26 24 14 17 19 24 26 24 14 17 19 24
CHK sym[|n]≡,¨ ''  'FN'  'FN'  ''  'Z'  'X'  'L'  'Y'  'FN'  ''  'Z'  'X'  'L'  'Y'
CHK xn xt≡¨(,⊂'FN')(,3)
CHK PARSE NS '∇{Z}←X(L FN R)Y' '∇'
CHK t=CD.(F C T H V V V V V T H V V V V V T H V V V V V T H V V V V V)
CHK p=0 0 1 2 3 3 3 3 3 1 9 10 10 10 10 10 1 16 17 17 17 17 17 1 23 24 24 24 24 24
CHK d=0 1 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4
CHK k=0 4 9 95 1 1 1 1 1 11 95 1 1 2 1 1 13 95 1 1 1 2 1 15 95 1 1 2 2 1
CHK lx=4 0 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4
CHK pos=0 11 11 12 13 16 18 23 25 11 12 13 16 18 23 25 11 12 13 16 18 23 25 11 12 13 16 18 23 25
CHK end=42 28 28 26 14 17 19 24 26 28 26 14 17 19 24 26 28 26 14 17 19 24 26 28 26 14 17 19 24 26
CHK sym[|n]≡,¨ ''  'FN'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'
CHK xn≡,¨,⊂ 'FN'
CHK xt≡,4
CHK PARSE NS '∇{Z}←{X}FN Y' '∇'
CHK t=CD.(F C T H V V V T H V V V)
CHK p=0 0 1 2 3 3 3 1 7 8 8 8
CHK d=0 1 2 3 4 4 4 2 3 4 4 4
CHK k=0 2 2 103 1 1 1 3 103 1 1 1
CHK lx=4 0 0 0 4 4 4 0 0 4 4 4
CHK pos=0 11 11 12 13 17 22 11 12 13 17 22
CHK end=39 25 25 23 14 18 23 25 23 14 18 23
CHK sym[|n]≡,¨ ''  'FN'  'FN'  ''  'Z'  'X'  'Y'  'FN'  ''  'Z'  'X'  'Y'
CHK xn≡,¨,⊂ 'FN'
CHK xt≡,2
CHK PARSE NS '∇{Z}←{X}(L FN)Y' '∇'
CHK t=CD.(F C T H V V V V T H V V V V T H V V V V T H V V V V)
CHK p=0 0 1 2 3 3 3 3 1 8 9 9 9 9 1 14 15 15 15 15 1 20 21 21 21 21
CHK d=0 1 2 3 4 4 4 4 2 3 4 4 4 4 2 3 4 4 4 4 2 3 4 4 4 4
CHK k=0 3 4 111 1 1 1 1 5 111 1 1 1 1 6 111 1 1 2 1 7 111 1 1 2 1
CHK lx=4 0 0 0 4 4 4 4 0 0 4 4 4 4 0 0 4 4 4 4 0 0 4 4 4 4
CHK pos=0 11 11 12 13 17 20 25 11 12 13 17 20 25 11 12 13 17 20 25 11 12 13 17 20 25
CHK end=42 28 28 26 14 18 21 26 28 26 14 18 21 26 28 26 14 18 21 26 28 26 14 18 21 26
CHK sym[|n]≡,¨ ''  'FN'  'FN'  ''  'Z'  'X'  'L'  'Y'  'FN'  ''  'Z'  'X'  'L'  'Y'  'FN'  ''  'Z'  'X'  'L'  'Y'  'FN'  ''  'Z'  'X'  'L'  'Y'
CHK xn≡,¨,⊂ 'FN'
CHK xt≡,3
CHK PARSE NS '∇{Z}←{X}(L FN R)Y' '∇'
CHK t=CD.(F C T H V V V V V T H V V V V V T H V V V V V T H V V V V V T H V V V V V T H V V V V V T H V V V V V T H V V V V V)
CHK p=0 0 1 2 3 3 3 3 3 1 9 10 10 10 10 10 1 16 17 17 17 17 17 1 23 24 24 24 24 24 1 30 31 31 31 31 31 1 37 38 38 38 38 38 1 44 45 45 45 45 45 1 51 52 52 52 52 52
CHK d=0 1 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4 2 3 4 4 4 4 4
CHK k=0 4 8 127 1 1 1 1 1 9 127 1 1 1 1 1 10 127 1 1 2 1 1 11 127 1 1 2 1 1 12 127 1 1 1 2 1 13 127 1 1 1 2 1 14 127 1 1 2 2 1 15 127 1 1 2 2 1
CHK lx=4 0 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4 0 0 4 4 4 4 4
CHK pos=0 11 11 12 13 17 20 25 27 11 12 13 17 20 25 27 11 12 13 17 20 25 27 11 12 13 17 20 25 27 11 12 13 17 20 25 27 11 12 13 17 20 25 27 11 12 13 17 20 25 27 11 12 13 17 20 25 27
CHK end=44 30 30 28 14 18 21 26 28 30 28 14 18 21 26 28 30 28 14 18 21 26 28 30 28 14 18 21 26 28 30 28 14 18 21 26 28 30 28 14 18 21 26 28 30 28 14 18 21 26 28 30 28 14 18 21 26 28
CHK sym[|n]≡,¨ ''  'FN'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'  'FN'  ''  'Z'  'X'  'L'  'R'  'Y'
CHK xn≡,¨,⊂ 'FN'
CHK xt≡,4
CHK PARSE NS '∇FN;blah;X;Y;nothing' '∇'
CHK t=CD.(F C T H V V V V)
CHK p=0 0 1 2 3 3 3 3
CHK d=0 1 2 3 4 4 4 4
CHK k=0 1 1 0 1 1 1 1
CHK lx=4 0 0 0 0 0 0 0
CHK pos=0 11 11 12 15 20 22 24
CHK end=47 33 33 31 19 21 23 31
CHK sym[|n]≡,¨ ''  'FN'  'FN'  ''  'blah'  'X'  'Y'  'nothing'
CHK xn≡,¨,⊂ 'FN'
CHK xt≡,1
CHK PARSE NS '∇FN(X Y Z)' '∇'
CHK t=CD.(F C T H V V V)
CHK p=0 0 1 2 3 3 3
CHK d=0 1 2 3 4 4 4
CHK k=0 2 2 129 1 1 1
CHK lx=4 0 0 0 4 4 4
CHK pos=0 11 11 12 15 17 19
CHK end=37 23 23 21 16 18 20
CHK sym[|n]≡,¨ ''  'FN'  'FN'  '⍺⍺'  'X'  'Y'  'Z'
CHK xn≡,¨,⊂ 'FN'
CHK xt≡,2
CHK PARSE NS '∇(Z1 Z2 Z3)←FN' '∇'
CHK t=CD.(F C T H V V V)
CHK p=0 0 1 2 3 3 3
CHK d=0 1 2 3 4 4 4
CHK k=0 1 1 260 1 1 1
CHK lx=4 0 0 0 4 4 4
CHK pos=0 11 11 12 13 16 19
CHK end=41 27 27 25 15 18 21
CHK n=0 ¯16 ¯16 196608 ¯11 ¯12 ¯13
CHK sym≡''  (,'⍵')  (,'⍺')  '⍺⍺'  '⍵⍵'  (,'∇')  '∇∇' ⍬ (,';')  ':namespace'  (,'(')  'Z1'  'Z2'  'Z3'  (,')')  (,'←')  'FN'  ':endnamespace'
CHK xn≡,⊂'FN'
CHK xt≡,1
CHK PARSE NS '∇(Z1 Z2 Z3)←FN(X Y Z)' '∇'
CHK t=CD.(F C T H V V V V V V)
CHK p=0 0 1 2 3 3 3 3 3 3
CHK d=0 1 2 3 4 4 4 4 4 4
CHK k=0 2 2 389 1 1 1 1 1 1
CHK lx=4 0 0 0 4 4 4 4 4 4
CHK pos=0 11 11 12 13 16 19 26 28 30
CHK end=48 34 34 32 15 18 21 27 29 31
CHK n=0 ¯16 ¯16 196611 ¯11 ¯12 ¯13 ¯17 ¯18 ¯19
CHK sym≡'' (,'⍵') (,'⍺') '⍺⍺' '⍵⍵' (,'∇') '∇∇' ⍬ (,';') ':namespace' (,'(') 'Z1' 'Z2' 'Z3' (,')') (,'←') 'FN' (,'X') (,'Y') (,'Z') ':endnamespace'
CHK xn≡,⊂'FN'
CHK xt≡,2
CHK PARSE NS '∇{(Z1 Z2 Z3)}←FN(X Y Z)' '∇'
CHK t=CD.(F C T H V V V V V V)
CHK p=0 0 1 2 3 3 3 3 3 3
CHK d=0 1 2 3 4 4 4 4 4 4
CHK k=0 2 2 453 1 1 1 1 1 1
CHK lx=4 0 0 0 4 4 4 4 4 4
CHK pos=0 11 11 12 14 17 20 28 30 32
CHK end=50 36 36 34 16 19 22 29 31 33
CHK n=0 ¯18 ¯18 196611 ¯12 ¯13 ¯14 ¯19 ¯20 ¯21
CHK sym≡'' (,'⍵') (,'⍺') '⍺⍺' '⍵⍵' (,'∇') '∇∇' ⍬ (,';') ':namespace' (,'{') (,'(') 'Z1' 'Z2' 'Z3' (,')') (,'}') (,'←') 'FN' (,'X') (,'Y') (,'Z') ':endnamespace'
CHK xn≡,⊂'FN'
CHK xt≡,2
CHK PARSE NS '∇{(Z1 Z2 Z3)}←{A}FN(X Y Z)' '∇'
CHK t=CD.(F C T H V V V V V V V T H V V V V V V V)
CHK p=0 0 1 2 3 3 3 3 3 3 3 1 11 12 12 12 12 12 12 12
CHK d=0 1 2 3 4 4 4 4 4 4 4 2 3 4 4 4 4 4 4 4
CHK k=0 2 2 487 1 1 1 1 1 1 1 3 487 1 1 1 1 1 1 1
CHK lx=4 0 0 0 4 4 4 4 4 4 4 0 0 4 4 4 4 4 4 4
CHK pos=0 11 11 12 14 17 20 26 31 33 35 11 12 14 17 20 26 31 33 35
CHK end=53 39 39 37 16 19 22 27 32 34 36 39 37 16 19 22 27 32 34 36
CHK n=0 ¯19 ¯19 196611 ¯12 ¯13 ¯14 ¯18 ¯20 ¯21 ¯22 ¯19 196611 ¯12 ¯13 ¯14 ¯18 ¯20 ¯21 ¯22
CHK sym≡'' (,'⍵') (,'⍺') '⍺⍺' '⍵⍵' (,'∇') '∇∇' ⍬ (,';') ':namespace' (,'{') (,'(') 'Z1' 'Z2' 'Z3' (,')') (,'}') (,'←') (,'A') 'FN' (,'X') (,'Y') (,'Z') ':endnamespace'
CHK xn≡,⊂'FN'
CHK xt≡,2
CHK PARSE NS '∇{(Z1 Z2 Z3)}←{A}(L FN)(X Y Z)' '∇'
CHK t=CD.(F C T H V V V V V V V V T H V V V V V V V V T H V V V V V V V V T H V V V V V V V V)
CHK p=0 0 1 2 3 3 3 3 3 3 3 3 1 12 13 13 13 13 13 13 13 13 1 22 23 23 23 23 23 23 23 23 1 32 33 33 33 33 33 33 33 33
CHK d=0 1 2 3 4 4 4 4 4 4 4 4 2 3 4 4 4 4 4 4 4 4 2 3 4 4 4 4 4 4 4 4 2 3 4 4 4 4 4 4 4 4
CHK k=0 3 4 495 1 1 1 1 1 1 1 1 5 495 1 1 1 1 1 1 1 1 6 495 1 1 1 1 2 1 1 1 7 495 1 1 1 1 2 1 1 1
CHK lx=4 0 0 0 4 4 4 4 4 4 4 4 0 0 4 4 4 4 4 4 4 4 0 0 4 4 4 4 4 4 4 4 0 0 4 4 4 4 4 4 4 4
CHK pos=0 11 11 12 14 17 20 26 29 35 37 39 11 12 14 17 20 26 29 35 37 39 11 12 14 17 20 26 29 35 37 39 11 12 14 17 20 26 29 35 37 39
CHK end=57 43 43 41 16 19 22 27 30 36 38 40 43 41 16 19 22 27 30 36 38 40 43 41 16 19 22 27 30 36 38 40 43 41 16 19 22 27 30 36 38 40
CHK ({sym[|⍵]}@{⍵<0}n)≡0 'FN' 'FN' 196611 'Z1' 'Z2' 'Z3' (,'A') (,'L') (,'X') (,'Y') (,'Z') 'FN' 196611 'Z1' 'Z2' 'Z3' (,'A') (,'L') (,'X') (,'Y') (,'Z') 'FN' 196611 'Z1' 'Z2' 'Z3' (,'A') (,'L') (,'X') (,'Y') (,'Z') 'FN' 196611 'Z1' 'Z2' 'Z3' (,'A') (,'L') (,'X') (,'Y') (,'Z')
CHK sym≡'' (,'⍵') (,'⍺') '⍺⍺' '⍵⍵' (,'∇') '∇∇' ⍬ (,';') ':namespace' (,'{') (,'(') 'Z1' 'Z2' 'Z3' (,')') (,'}') (,'←') (,'A') (,'L') 'FN' (,'X') (,'Y') (,'Z') ':endnamespace'
CHK xn≡,⊂'FN'
CHK xt≡,3
CHK PARSE NS '∇{(Z1 Z2 Z3)}←{A}(L FN R)(X Y Z)' '∇'
CHK t=CD.(F C T H V V V V V V V V V T H V V V V V V V V V T H V V V V V V V V V T H V V V V V V V V V T H V V V V V V V V V T H V V V V V V V V V T H V V V V V V V V V T H V V V V V V V V V)
CHK p=0 0 1 2 3 3 3 3 3 3 3 3 3 1 13 14 14 14 14 14 14 14 14 14 1 24 25 25 25 25 25 25 25 25 25 1 35 36 36 36 36 36 36 36 36 36 1 46 47 47 47 47 47 47 47 47 47 1 57 58 58 58 58 58 58 58 58 58 1 68 69 69 69 69 69 69 69 69 69 1 79 80 80 80 80 80 80 80 80 80
CHK d=0 1 2 3 4 4 4 4 4 4 4 4 4 2 3 4 4 4 4 4 4 4 4 4 2 3 4 4 4 4 4 4 4 4 4 2 3 4 4 4 4 4 4 4 4 4 2 3 4 4 4 4 4 4 4 4 4 2 3 4 4 4 4 4 4 4 4 4 2 3 4 4 4 4 4 4 4 4 4 2 3 4 4 4 4 4 4 4 4 4
CHK k=0 4 8 511 1 1 1 1 1 1 1 1 1 9 511 1 1 1 1 1 1 1 1 1 10 511 1 1 1 1 2 1 1 1 1 11 511 1 1 1 1 2 1 1 1 1 12 511 1 1 1 1 1 2 1 1 1 13 511 1 1 1 1 1 2 1 1 1 14 511 1 1 1 1 2 2 1 1 1 15 511 1 1 1 1 2 2 1 1 1
CHK lx=4 0 0 0 4 4 4 4 4 4 4 4 4 0 0 4 4 4 4 4 4 4 4 4 0 0 4 4 4 4 4 4 4 4 4 0 0 4 4 4 4 4 4 4 4 4 0 0 4 4 4 4 4 4 4 4 4 0 0 4 4 4 4 4 4 4 4 4 0 0 4 4 4 4 4 4 4 4 4 0 0 4 4 4 4 4 4 4 4 4
CHK pos=0 11 11 12 14 17 20 26 29 34 37 39 41 11 12 14 17 20 26 29 34 37 39 41 11 12 14 17 20 26 29 34 37 39 41 11 12 14 17 20 26 29 34 37 39 41 11 12 14 17 20 26 29 34 37 39 41 11 12 14 17 20 26 29 34 37 39 41 11 12 14 17 20 26 29 34 37 39 41 11 12 14 17 20 26 29 34 37 39 41
CHK end=59 45 45 43 16 19 22 27 30 35 38 40 42 45 43 16 19 22 27 30 35 38 40 42 45 43 16 19 22 27 30 35 38 40 42 45 43 16 19 22 27 30 35 38 40 42 45 43 16 19 22 27 30 35 38 40 42 45 43 16 19 22 27 30 35 38 40 42 45 43 16 19 22 27 30 35 38 40 42 45 43 16 19 22 27 30 35 38 40 42
CHK ({sym[|⍵]}@{⍵<0}n)≡0 'FN' 'FN' 196611 'Z1' 'Z2' 'Z3' (,'A') (,'L') (,'R') (,'X') (,'Y') (,'Z') 'FN' 196611 'Z1' 'Z2' 'Z3' (,'A') (,'L') (,'R') (,'X') (,'Y') (,'Z') 'FN' 196611 'Z1' 'Z2' 'Z3' (,'A') (,'L') (,'R') (,'X') (,'Y') (,'Z') 'FN' 196611 'Z1' 'Z2' 'Z3' (,'A') (,'L') (,'R') (,'X') (,'Y') (,'Z') 'FN' 196611 'Z1' 'Z2' 'Z3' (,'A') (,'L') (,'R') (,'X') (,'Y') (,'Z') 'FN' 196611 'Z1' 'Z2' 'Z3' (,'A') (,'L') (,'R') (,'X') (,'Y') (,'Z') 'FN' 196611 'Z1' 'Z2' 'Z3' (,'A') (,'L') (,'R') (,'X') (,'Y') (,'Z') 'FN' 196611 'Z1' 'Z2' 'Z3' (,'A') (,'L') (,'R') (,'X') (,'Y') (,'Z')
CHK sym≡'' (,'⍵') (,'⍺') '⍺⍺' '⍵⍵' (,'∇') '∇∇' ⍬ (,';') ':namespace' (,'{') (,'(') 'Z1' 'Z2' 'Z3' (,')') (,'}') (,'←') (,'A') (,'L') 'FN' (,'R') (,'X') (,'Y') (,'Z') ':endnamespace'
CHK xn≡,⊂'FN'
CHK xt≡,4
CHK PARSE NS '∇FN' 'L1:' '∇'
CHK t=CD.(F C T H L)
CHK p=0 0 1 2 2
CHK d=0 1 2 3 3
CHK k=0 1 1 0 0
CHK lx=4 0 0 0 0
CHK pos=0 11 11 12 15
CHK end=34 20 20 14 17
CHK ({sym[|⍵]}@{⍵<0}n)≡0 'FN' 'FN' 0 'L1'
CHK sym≡'' (,'⍵') (,'⍺') '⍺⍺' '⍵⍵' (,'∇') '∇∇' ⍬ (,';') ':namespace' 'FN' 'L1' ':endnamespace'
CHK xn≡,⊂'FN'
CHK xt≡,1
CHK PARSE NS '∇FN' ':If 0' ':EndIf' '∇'
CHK (,⊂'⍞SOUND')(,⊂2)PARSE NS '∇FN' '⍞SOUND 5' '∇'
CHK PARSE NS '('':namespace'')' ''
CHK PARSE NS '∇FN;⎕IO' '∇'
CHK PARSE NS'∇FN' '{5:6}⍬' '∇'
CHK PARSE NS ,⊂'1 ¯2'
CHK PARSE ERRS 2 NS ,⊂'1¯2'
CHK PARSE ERRS 2 NS ,⊂'1.¯2'
CHK PARSE NS 'FN←{0:5}' ''
CHK t=CD.(F B V C F G A A F G A A)
CHK p d=(0 0 1 1 3 4 5 5 3 8 9 9)(0 1 2 2 3 4 5 5 3 4 5 5)
CHK k=0 2 2 2 2 0 1 1 3 0 1 1
CHK PARSE NS 'FN←{0::5}' ''
CHK t=CD.(F B V C F G A A F G A A)
CHK PARSE NS ⊂'TEST←{F←{⍵} ⋄ F X←5}'
CHK t=CD.(F B V C F B V C F P F P B A V V A F B V C F P F P B A V V A)
CHK p=0 0 1 1 3 4 5 5 7 8 7 10 4 12 13 13 12 3 17 18 18 20 21 20 23 17 25 26 26 25
CHK d=0 1 2 2 3 4 5 5 6 7 6 7 4 5 6 6 5 3 4 5 5 6 7 6 7 4 5 6 6 5
CHK k=0 2 2 2 2 2 2 2 2 1 3 1 1 7 1 1 1 3 2 2 2 2 1 3 1 1 7 1 1 1
CHK PARSE NS 'fn←⊢' 'a←1' 'FN←{a fn b←1}'
CHK p=0 0 1 1 0 4 4 0 7 7 9 10 11 12 12 12 11 9 17 18 19 19 19 18
CHK t=CD.(F B V P B V A B V C F B A V V V A F B A V V V A)
CHK k=0 2 2 2 1 1 1 2 2 2 2 1 7 1 1 1 1 3 1 7 1 1 1 1
CHK PARSE NS 'fn←⊢' 'a←1' '∇FN;b' 'a fn b←1' '∇'
CHK t=CD.(F B V P B V A C T H V E V V B V A V V)
CHK p=0 0 1 1 0 4 4 0 7 8 9 8 11 11 11 14 14 7 7
CHK d=0 1 2 2 1 2 2 1 2 3 4 3 4 4 4 5 5 2 2
CHK k=0 2 2 2 1 1 1 1 1 0 1 2 1 2 1 1 1 1 2
CHK lx=4 0 0 3 0 0 6 0 0 0 0 0 1 1 0 0 6 1 1
CHK pos=0 11 11 14 16 16 18 20 20 21 24 26 26 28 31 31 33 26 28
CHK end=50 15 13 15 19 17 19 36 36 25 25 34 27 30 34 32 34 27 30
CHK ({sym[|⍵]}@{⍵<0}n)≡0 (,'←') 'fn' (,'⊢') (,'←') (,'a') 1 'FN' 'FN' 0 (,'b') 0 (,'a') 'fn' (,'←') (,'b') 1 (,'a') 'fn'
CHK sym≡'' (,'⍵') (,'⍺') '⍺⍺' '⍵⍵' (,'∇') '∇∇' ⍬ (,';') ':namespace' 'fn' (,'←') (,'⊢') (,'a') 1 'FN' (,'b') ':endnamespace'
CHK xn≡ 'fn' (,'a') 'FN' (,'b')
CHK xt≡,2 1 1 1
CHK PARSE NS '∇TEST' 'F←⊢' '3 F X←5' '∇'
CHK t=CD.(F C T H B V P E A V B V A V V H V V)
CHK p=0 0 1 2 2 4 4 2 7 7 7 10 10 1 1 0 15 15
CHK d=0 1 2 3 3 4 4 3 4 4 4 5 5 2 2 1 2 2
CHK k=0 1 1 0 2 2 2 2 1 2 1 1 1 2 1 0 2 1
CHK lx=4 0 0 0 1 1 3 0 6 1 1 1 6 1 1 0 1 1
CHK pos=0 11 11 12 17 17 19 21 21 23 25 25 27 17 25 0 17 25
CHK end=44 30 30 16 20 18 20 28 22 24 28 26 28 18 26 1 18 26
CHK ({sym[|⍵]}@{⍵<0}n)≡0 'TEST' 'TEST' 0 (,'←') (,'F') (,'⊢') 0 3 (,'F') (,'←') (,'X') 5 (,'F') (,'X') 0 (,'F') (,'X')
CHK sym≡'' (,'⍵') (,'⍺') '⍺⍺' '⍵⍵' (,'∇') '∇∇' ⍬ (,';') ':namespace' 'TEST' (,'F') (,'←') (,'⊢') 3 (,'X') 5 ':endnamespace'
CHK xn≡ 'TEST' (,'F') (,'X')
CHK xt≡,1 2 1
⎕←'☺'
⍝ CHK TOKENIZE ':Class blah :X' ':EndClass'
⍝ CHK TOKENIZE ':Class Blah:X' ':EndClass'
⍝ CHK TOKENIZE ':Class Blah : X' ':EndClass'
∇
:EndNamespace:Namespace t0100_format
CHK←{⍺←⊢ ⋄ (0∊∊⍵)∨0=≢⍵:⍺ ⎕SIGNAL 8⊣⎕←'✗' ⋄ _←0⊣⍞←'✓'}
⍝ ERRS←{⍺←⊢ ⋄ ⍵⍵::1 ⋄ 0⊣⍺ ⍺⍺ ⍵}
⍞←'Format: '
fmt←{⍕⍵}
CHK (,'0')≡fmt 0
CHK (,'1')≡fmt 1
CHK '31415'≡fmt 31415
CHK '¯31415'≡fmt ¯31415
CHK '3.1415'≡fmt 3.1415
CHK '¯3.1415'≡fmt ¯3.1415
⎕←'☺'
:EndNamespace
DISPLAY←{
⎕IO ⎕ML←0
⍺←1 ⋄ chars←⍺⊃'..''''|-' '┌┐└┘│─'
tl tr bl br vt hz←chars
box←{
vrt hrz←(¯1+⍴⍵)⍴¨vt hz
top←(hz,'⊖→')[¯1↑⍺],hrz
bot←(⊃⍺),hrz
rgt←tr,vt,vrt,br
lax←(vt,'⌽↓')[¯1↓1↓⍺],¨⊂vrt
lft←⍉tl,(↑lax),bl
lft,(top⍪⍵⍪bot),rgt
}
deco←{⍺←type open ⍵ ⋄ ⍺,axes ⍵}
axes←{(-2⌈⍴⍴⍵)↑1+×⍴⍵}
open←{(1⌈⍴⍵)⍴⍵}
trim←{(~1 1⍷∧⌿⍵=' ')/⍵}
type←{{(1=⍴⍵)⊃'+'⍵}∪,char¨⍵}
char←{⍬≡⍴⍵:hz ⋄ (⊃⍵∊'¯',⎕D)⊃'#~'}∘⍕
line←{(6≠10|⎕DR' '⍵)⊃' -'}
{
0=≡⍵:' '⍪(open ⎕FMT ⍵)⍪line ⍵
1 ⍬≡(≡⍵)(⍴⍵):'∇' 0 0 box ⎕FMT ⍵
1=≡⍵:(deco ⍵)box open ⎕FMT open ⍵
('∊'deco ⍵)box trim ⎕FMT ∇¨open ⍵
}⍵
}
LOAD root;src
src←⊂':Namespace codfns'
src,←⊃⎕NGET (root,'/cmp/main.apl') 1
src,←⊃⎕NGET (root,'/cmp/util.apl') 1
src,←⊃⎕NGET (root,'/cmp/PS.apl') 1
src,←⊃⎕NGET (root,'/cmp/TT.apl') 1
src,←⊃⎕NGET (root,'/cmp/GC.apl') 1
src,←⊃⎕NGET (root,'/cmp/CC.apl') 1
src,←⊃⎕NGET (root,'/cmp/NS.apl') 1
src,←⊃⎕NGET (root,'/cmp/MK∆RTM.apl') 1
src,←⊂':EndNamespace'
⎕FIX src
PP←{⍵⊣⎕←#.DISPLAY ⍵}
TAP←{
⎕CT←0
path←'./t',(1 0⍕(4⍴10)⊤⍵),'_*.apln'
suite←⎕SE.SALT.Load ⊃⊃0⎕NINFO⍠1⊢path
suite.TEST
}
TEST←{
⎕CT←0
'ALL'≡⍵:#.UT.run './'
path←'./t',(1 0⍕(4⍴10)⊤⍵),'_*_tests.dyalog'
}
:NameSpace UT
⎕IO ← 1
sac ← 0
expect_orig ← expect ← ⎕NS⍬
exception ← ⍬
nexpect_orig ← nexpect ← ⎕NS⍬
print_passed ← 1
print_summary ← 1
print_header ← 0
∇ {Z}←{Conf}run Argument;PRE_test;POST_test;TEST_step;COVER_step;FromSpace
load_display_if_not_already_loaded
load_salt_scripts_into_current_namespace_if_configured
FromSpace←1⊃⎕RSI
PRE_test←{}
POST_test←{}
COVER_step←{}
:If 0≠⎕NC'Conf'
:If Conf has'cover_target'
PRE_test←{{}⎕PROFILE'start'}
POST_test←{{}⎕PROFILE'stop'}
:EndIf
:EndIf
:If is_function Argument
TEST_step←single_function_test_function
COVER_file←Argument,'_coverage.html'
:ElseIf is_list_of_functions Argument
TEST_step←list_of_functions_test_function
COVER_file←'list_coverage.html'
:ElseIf is_file Argument
TEST_step←file_test_function
COVER_file←(get_file_name Argument),'_coverage.html'
:ElseIf is_dir Argument
test_files←test_files_in_dir Argument
TEST_step←test_dir_function
Argument←test_files
:EndIf
:If 0≠⎕NC'Conf'
:If Conf has'cover_target'
COVER_step←{Conf,←⊂('cover_file'COVER_file)
generate_coverage_page Conf}
:EndIf
:EndIf
PRE_test ⍬
Z←FromSpace TEST_step Argument
POST_test ⍬
COVER_step ⍬
∇
∇ load_display_if_not_already_loaded
:If 0=⎕NC'#.DISPLAY'
'DISPLAY'#.⎕CY'display'
:EndIf
∇
∇ load_salt_scripts_into_current_namespace_if_configured
:If 0≠⎕NC'#.UT.appdir'
:If ⍬≢#.UT.appdir
⎕SE.SALT.Load #.UT.appdir,'src/*.dyalog -target=#'
⎕SE.SALT.Load #.UT.appdir,'test/*.dyalog -target=#'
:EndIf
:EndIf
∇
∇ Z←FromSpace single_function_test_function TestName
Z←run_ut FromSpace TestName
∇
∇ Z←FromSpace list_of_functions_test_function ListOfNames;t
t←⎕TS
Z←run_ut¨{FromSpace ⍵}¨ListOfNames
t←⎕TS-t
:If print_summary
('Test execution report')print_passed_crashed_failed Z t
:EndIf
∇
∇ Z←FromSpace file_test_function FilePath;FileNS;Functions;TestFunctions;t
FileNS←⎕SE.SALT.Load FilePath,' -target=#'
Functions←↓FileNS.⎕NL 3
TestFunctions←(is_test¨Functions)/Functions
:If (0/⍬,⊂0/'')≡TestFunctions
⎕←'No test functions found'
Z←⍬
:Else
:If print_header
⎕←'Testing from ',FilePath
:EndIf
t←⎕TS
Z←run_ut¨{FileNS ⍵}¨TestFunctions
t←⎕TS-t
:If print_summary
(FilePath,' tests')print_passed_crashed_failed Z t
:EndIf
:EndIf
⎕EX⍕FileNS
∇
∇ Z←FromSpace test_dir_function Test_files;old_sum;old_head
:If Test_files≡⍬/⍬,⊂''
⎕←'No test files found'
Z←⍬
:Else
old_sum←print_summary
old_head←print_header
print_summary←0
print_header←1
t←⎕TS
Z←#.UT.run¨Test_files
t←⎕TS-t
print_summary←old_sum
print_header←old_head
:If print_summary
'All tests'print_passed_crashed_failed (⊃,/Z)t
:EndIf
:EndIf
∇
∇ Z←get_file_name Argument;separator
separator←⊃⌽(Argument∊'/\')/⍳⍴Argument
Z←¯7↓separator↓Argument
∇
∇ generate_coverage_page Conf;ProfileData;CoverResults;HTML
ProfileData←⎕PROFILE'data'
ToCover←retrieve_coverables¨(⊃'cover_target'in Conf)
:If (⍴ToCover)≡(⍴⊂1)
ToCover←⊃ToCover
:EndIf
Representations←get_representation¨ToCover
CoverResults←ProfileData∘generate_cover_result¨↓ToCover,[1.5]Representations
HTML←generate_html CoverResults
Conf write_html_to_page HTML
⎕PROFILE'clear'
∇
∇ Z←retrieve_coverables Something;nc;functions
nc←⎕NC Something
:If nc=3
Z←Something
:ElseIf nc=9
functions←strip¨↓⍎Something,'.⎕NL 3'
Z←{(Something,'.',⍵)}¨functions
:EndIf
∇
∇ Z←strip input
Z←(input≠' ')/input
∇
∇ Z←get_representation Function;nc;rep
nc←⎕NC⊂Function
:If nc=3.1
rep←↓⎕CR Function
rep[1]←⊂'∇',⊃rep[1]
rep,←⊂'∇'
rep←↑rep
:Else
rep←⎕CR Function
:EndIf
Z←rep
∇
∇ Z←ProfileData generate_cover_result(name representation);Indices;lines;functionlines;covered_lines
Indices←({name≡⍵}¨ProfileData[;1])/⍳⍴ProfileData[;1]
lines←ProfileData[Indices;2]
nc←⎕NC⊂name
:If 3.1=nc
functionlines←¯2+⍴↓representation
:Else
functionlines←⊃⍴↓representation
:EndIf
covered_lines←(⍬∘≢¨lines)/lines
Z←(nc lines functionlines covered_lines representation)
∇
∇ Z←generate_html CoverResults;Covered;Total;Percentage;CoverageText;ColorizedCode;Timestamp;Page
Covered←⊃⊃+/{⍴4⊃⍵}¨CoverResults
Total←⊃⊃+/{3⊃⍵}¨CoverResults
Percentage←100×Covered÷Total
CoverageText←'Coverage: ',Percentage,'% (',Covered,'/',Total,')'
ColorizedCode←⊃,/{colorize_code_by_coverage ⍵}¨CoverResults
Timestamp←generate_timestamp_text
Page←⍬
Page,←⊂⍬,'<html>'
Page,←⊂⍬,'<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>'
Page,←⊂⍬,'<style>pre cov {line-height:80%;}'
Page,←⊂⍬,'pre cov {color: green;}'
Page,←⊂⍬,'pre uncov {line-height:80%;}'
Page,←⊂⍬,'pre uncov {color:red;}</style>'
Page,←⊂⍬,CoverageText
Page,←⊂⍬,'<pre>'
Page,←ColorizedCode
Page,←⊂⍬,'</pre>'
Page,←Timestamp
Page,←⊂⍬,'</html>'
Z←Page
∇
∇ Z←colorize_code_by_coverage CoverResult;Colors;Ends;Code
:If 3.1=⊃CoverResult
Colors←(2+3⊃CoverResult)⍴⊂'<uncov>'
Colors[1]←⊂''
Colors[⍴Colors]←⊂''
Ends←(2+3⊃CoverResult)⍴⊂'</uncov>'
Ends[1]←⊂''
Ends[⍴Ends]←⊂''
:Else
Colors←(3⊃CoverResult)⍴⊂'<uncov>'
Ends←(3⊃CoverResult)⍴⊂'</uncov>'
:EndIf
Colors[1+4⊃CoverResult]←⊂'<cov>'
Ends[1+4⊃CoverResult]←⊂'</cov>'
Code←↓5⊃CoverResult
Z←Colors,[1.5]Code
Z←{⍺,(⎕UCS 13),⍵}/Z,Ends
∇
∇ Z←generate_timestamp_text;TS;YYMMDD;HHMMSS
TS←⎕TS
YYMMDD←⊃{⍺,'-',⍵}/3↑TS
HHMMSS←⊃{⍺,':',⍵}/3↑3↓TS
Z←'Page generated: ',YYMMDD,'|',HHMMSS
∇
∇ Conf write_html_to_page Page;tie;filename
filename←(⊃'cover_out'in Conf),(⊃'cover_file'in Conf)
:Trap 22
tie←filename ⎕NTIE 0
filename ⎕NERASE tie
filename ⎕NCREATE tie
:Else
tie←filename ⎕NCREATE 0
:EndTrap
Simple_array←⍕⊃,/Page
(⎕UCS'UTF-8'⎕UCS Simple_array)⎕NAPPEND tie
∇
∇ Z←is_function Argument
Z←'_TEST'≡¯5↑Argument
∇
∇ Z←is_list_of_functions Argument
Z←2=≡Argument
∇
∇ Z←is_file Argument
Z←'.dyalog'≡¯7↑Argument
∇
∇ Z←is_dir Argument;attr
:If 'Mac' 'Linux'∨.≡3 5↑¨⊂⊃'.'⎕WG'APLVersion'
Z←'yes'≡⊃⎕CMD'test -d ',Argument,' && echo yes || echo no'
:Else
'gfa'⎕NA'I kernel32|GetFileAttributes* <0t'
:If Z←¯1≠attr←gfa⊂Argument ⍝ If file exists
Z←⊃2 16⊤attr           ⍝ Return bit 4
:EndIf
:EndIf
∇
∇ Z←test_files_in_dir Argument
:If 'Mac' 'Linux'∨.≡3 5↑¨⊂⊃'.'⎕WG'APLVersion'
Z←⎕SH'find ',Argument,' -name \*_tests.dyalog'
:Else
Z←#.Files.Dir Argument,'\*_tests.dyalog'
Z←(Argument,'\')∘,¨Z
:EndIf
∇
∇ Z←run_ut ut_data;returned;crashed;pass;crash;fail;message
(returned crashed time)←execute_function ut_data
(pass crash fail)←determine_pass_crash_or_fail returned crashed
message←determine_message pass fail crashed(2⊃ut_data)returned time
(pass∧~crashed)print_message_to_screen message
Z←(pass crash fail)
∇
∇ Z←execute_function ut_data;function;t
reset_UT_globals
function←(⍕(⊃ut_data[1])),'.',⊃ut_data[2]
:Trap sac
:If 3.2 3.3∨.=⎕NC⊂function
t←⎕TS
Z←(⍎function,' ⍬')0
t←⎕TS-t
:Else
t←⎕TS
Z←(⍎function)0
t←⎕TS-t
:EndIf
:Else
Z←(↑⎕DMX.(Vendor EM Message))1
:If exception≢⍬
expect←exception
Z[2]←0
t←⎕TS-t
:EndIf
:EndTrap
Z,←⊂t
∇
∇ reset_UT_globals
expect_orig ← expect← ⎕NS⍬
exception←⍬
nexpect_orig ← nexpect← ⎕NS⍬
∇
∇ Z←is_test FunctionName;wsIndex
wsIndex←FunctionName⍳' '
FunctionName←(wsIndex-1)↑FunctionName
Z←'_TEST'≡¯5↑FunctionName
∇
∇ Z←format_time ts;m;s;ms
(m s ms)←¯3↑0 24 60 60 1000{⍺⊤⍺⊥⍵}¯5↑ts
Z←(⍕m),' m ',(⍕s),' s ',(⍕ms),' ms'
∇
∇ Heading print_passed_crashed_failed(ArrayRes time)
⎕←'-----------------------------------------'
⎕←Heading
⎕←'    ⍋  Passed: ',⍕+/{1⊃⍵}¨ArrayRes
⎕←'    ⍟ Crashed: ',⍕+/{2⊃⍵}¨ArrayRes
⎕←'    ⍒  Failed: ',⍕+/{3⊃⍵}¨ArrayRes
⎕←'    ○ Runtime: ',format_time time
∇
determine_pass_crash_or_fail←{
r c←⍵ ⋄ 0≠c:0 1 0 ⋄ z←(0 0 1)(1 0 0)
expect_orig≢expect:(⎕IO+expect≡r)⊃z ⋄ (⎕IO+nexpect≢r)⊃z
}
∇ Z←determine_message(pass fail crashed name returned time)
:If crashed
Z←'CRASHED: 'failure_message name returned
:ElseIf pass
Z←name,' Passed ',format_time time
:Else
Z←'FAILED: 'failure_message name returned
:EndIf
∇
∇ passed print_message_to_screen message
:If (~passed)∨passed∧print_passed
⎕←message
:EndIf
∇
∇ Z←term_to_text Term;Text;Rows
Text←#.DISPLAY Term
Rows←1⊃⍴Text
Z←(Rows 4⍴''),Text
∇
∇ Z←Cause failure_message(name returned);hdr;exp;expterm;got;gotterm
hdr←Cause,name
exp←'Expected'
expterm←term_to_text #.UT.expect
got←'Got'
gotterm←term_to_text returned
Z←align_and_join_message_parts hdr exp expterm got gotterm
∇
∇ Z←align_and_join_message_parts Parts;hdr;exp;expterm;got;gotterm;R1;C1;R2;C2;W
(hdr exp expterm got gotterm)←Parts
(R1 C1)←⍴expterm
(R2 C2)←⍴gotterm
W←⊃⊃⌈/C1 C2(⍴hdr)(⍴exp)(⍴got)
Z←(W↑hdr),[0.5](W↑exp)
Z←Z⍪(R1 W↑expterm)
Z←Z⍪(W↑got)
Z←Z⍪(R2 W↑gotterm)
∇
∇ Z←confparam in config
Z←1↓⊃({confparam≡⊃⍵}¨config)/config
∇
∇ Z←config has confparam
Z←∨/{confparam≡⊃⍵}¨config
∇
:EndNameSpaceFile←{
f←⍵,(0=≢⍵)/'table.tsv',⍨⊃⎕NPARTS 50 ⎕ATX⊃⎕SI
⍺←⊢
⍺ ⎕CSV⍠'Separator'(⎕UCS 9)⍠'QuoteChar' ''⍠'IfExists' 'Replace'⊂f
}
t←Reorder t;syntaxdata;classdata;typedata;length;complexity;letters;syntax
⎕SHADOW,1↑t
{⍎⍕(,1↑⍵)'←↑¨⊂[1]1↓⍵'}t
syntaxdata←chars⍳SYNTAX
classdata←class⍳CLASS
typedata←type⍳TYPE
syntax←(↓SYNTAX)~¨⊂' ',letters←'¯_∆⍙⍬',⎕D,⎕A,⎕C⎕A
complexity←↑((⊂∘⍒⌷⊢)(chars~letters)∘⍳)¨syntax
length←≢¨syntax
t⌷⍨←⊂⍋0⍪classdata,length,complexity,syntaxdata,typedata
ReorderFile←{⍵ File⍨Reorder File ⍵}
table←terms Synonym table;mask;In;i;in;relevant;add;report
⍝ Add synonyms to table.tsv
In←{∨/≢¨('(^|\(|\s|,)\Q',⍺,'\E($|\)|\s|,)')⎕S ⍬⍠'ML' 1⍠1¨⍵}
:If 2=≢table
(table report)←table
:Else
report←¯1
:EndIf
terms(∪⊣,~¨)←'-'
in←terms In¨⊂table
relevant←⍸⊃∨/in
:For i :In relevant
add←,/' ',¨terms/⍨~i⊃¨in
:If 0<report
:AndIf ×≢¨add
:If 1=report
⍞←'⎕'
:Else
⎕←add,⍨i⍕⍨2↑1+⌊10⍟≢table
:EndIf
:EndIf
table[i;7],←add
:EndFor
table←Trim table
:If ¯1≠report
table{⍺ ⍵}←report
:EndIf
Synonyms←{
⊃Synonym/⍺,⊂⍵
}
Test←{0::0 ⋄ 1⊣File ⍵}
Trim←{
(header body)←1(↑{⍺ ⍵}↓)⍵
ProcessRow←{
(first7 url)←¯1(↓{⍺ ⍵}↑)⍵
words←⎕C Words←' '(≠⊆⊢)⊃⌽first7
notin7←(∧/∘.≢⍨⍲∘.(⊃⍷)⍨)words
in1to6←words(∨/⍷)¨⊂⎕C∊¯1↓first7
kws←⊂1↓∊' ',¨Words/⍨notin7>in1to6
url,⍨kws,⍨¯1↓first7
}
header⍪ProcessRow⍤1⊢body
}
﻿ allucmds←{
r←⎕FMT ⎕SE.UCMD'??'
s←2↓¯3↓r
t←1↓¨s⊂[1]⍨∧/' '=s
groups←{'^ (\w+).+'⎕R'\1'⊃↓⍵}¨t
gdescrs←{':'~⍨'^ \w+ +(.+)'⎕R'\1'⊃↓⍵}¨t
u←1↓¨t
v←(groups{⊂⍺ ⍵}¨gdescrs){
syntax←∊']',⍺[1],'.','^ +(\w+)'⎕S'\1'⊢⍵
description←∊'^ +\w+ +(.+)'⎕S'\1'⊢⍵
class←'Non-syntax'
type←'Ucmd'
group←1⊃⍺
category←'User command'
keywords←2⊃⍺
' +$'⎕R''⊢syntax description class type group category keywords
}¨¨↓¨u
↑⊃⍪/v
}
(' ⊢⊣+-×∨∧⌈⌊⌽⊖÷|!?<≤=≥>≠≡≢↓↑⍴*⍟○~⍨∘¨⍥/⌿⍤@⍱⍲,⍪⊃⊂⊆⌷⍳∊⍸∪∩⍣⍋⍒\⍀[;]⍉⌸⍷⌺.⊥⊤⌹⍎⍕&⌶⍠⎕⍞←⋄:∇→#⍬0123456789_∆⍙XYZMNIJABCDEFGHIJKLMNOPQRSTUVWXYZfghasvmabcdefghijklmnopqrstuvwxyzÀ',(⎕UCS 13 13))
[
('Primitive ')
('System    ')
('Tacit     ')
('Dfn       ')
('Dop       ')
]
[
('Monadic Function                            ')
('Dyadic Function                             ')
]
1:Namespace TRANSFORMER
⍝ Model, training, and optimizer hyperparameters
ITERS←500 ⋄ BS←16 ⋄ VCB←128 ⋄ SEQ←32 ⋄ DPTH←4 ⋄ HEADS←4 ⋄ DIM←128
LR←3E¯4 ⋄ BETA1←0.9 ⋄ BETA2←0.999 ⋄ WD←1E¯2
⍝ Miscellaneous
MASK←-1E10×~(⍳SEQ)∘.≥⍳SEQ
GELUF←(2÷○1)*0.5
⍝ Parameter initialization functions
RND←{d←10*9 ⋄ (x y)←⊂[1+⍳⍴,⍵](?(2,⍵)⍴d)÷d ⋄ ((¯2×⍟x)*0.5)×1○○2×y} ⍝ Samples from normal distribution
LIN←{WB←↑{(0.02×RND ⍵) ((1↓⍵)⍴0)}¨⍺⍴⊂⍵ ⋄ (WB[;0]) (WB[;1])} ⍝ Initiliazes weights & biases
⍝ Model parameters
WTE←⊃⊃1 LIN VCB DIM ⋄ WPE←⊃⊃1 LIN SEQ DIM ⋄ WH←⊃⊃1 LIN DIM VCB
WLN←(1+2×DPTH)⍴⊂DIM⍴1 ⋄ BLN←(1+2×DPTH)⍴⊂DIM⍴0
WQKV BQKV←DPTH LIN DIM HEADS (DIM÷HEADS) 3 ⋄ WO BO←DPTH LIN DIM DIM
W1 B1←DPTH LIN DIM (4×DIM) ⋄ W2 B2←DPTH LIN (4×DIM) DIM
⍝ Activation tensors for backpropagation
W2INP←ACTINP←W1INP←WOINP←ATTN←V←K←Q←WQKVINP←DPTH⍴⊂WHINP←WTEINP←⍬
STD←MEAN←LNINP←(1+2×DPTH)⍴⊂⍬
CETARG←CEPROB←⍬
⍝ Gradients
∆B2←∆W2←∆B1←∆W1←∆BO←∆WO←∆BQKV←∆WQKV←DPTH⍴⊂∆WH←∆WPE←∆WTE←⍬
∆BLN←∆WLN←(1+2×DPTH)⍴⊂⍬
⍝ Optimizer states
T←0
M1WH←M1B2←M1W2←M1B1←M1W1←M1BO←M1WO←M1BQKV←M1WQKV←M1BLN←M1WLN←M1WPE←M1WTE←0
M2WH←M2B2←M2W2←M2B1←M2W1←M2BO←M2WO←M2BQKV←M2WQKV←M2BLN←M2WLN←M2WPE←M2WTE←0
⍝ Utilities
UNSQZ←{((⍴⍵),1)⍴⍵} ⍝ Inserts axis of size 1 as last dimension
AVG←{UNSQZ (+/⍵)÷¯1↑⍴⍵} ⍝ Averges along last dimension
SM←{exp←*⍵-⍤1⊢UNSQZ⌈/⍵ ⋄ exp÷⍤1⊢UNSQZ+/exp} ⍝ Applies softmax along last dimension
FWD←{
⍝ Gets token embeddings
TE←{WTE[WTEINP⊢←⍵;]}
⍝ Adds position embeddings to input
PE←{WPE[⍳1⌷⍴⍵;]+⍤2⊢⍵}
⍝ Layer-normalizes input
LN←{
diff←⍵-⍤1⊢⊃MEAN[⍺]←⊂AVG ⊃LNINP[⍺]←⊂⍵
(⍺⊃BLN)+⍤1⊢(⍺⊃WLN)×⍤1⊢diff÷⍤1⊢⊃STD[⍺]←⊂(1E¯5+AVG diff*2)*0.5
}
⍝ Applies multi-headed self-attention to input
MHSA←{
qkv←(⍺⊃BQKV)+⍤3⊢(⊃WQKVINP[⍺]←⊂⍵)+.×⍺⊃WQKV
q k v←{0 2 1 3⍉⍵⌷⍤1⊢qkv}¨⍳3 ⋄ Q[⍺]←⊂q ⋄ K[⍺]←⊂k ⋄ V[⍺]←⊂v
ATTN[⍺]←⊂attn←SM MASK[⍳2⌷⍴q;⍳2⌷⍴k]+⍤2⊢(q+.×⍤2⊢⍉⍤2⊢k)÷(¯1↑⍴k)*0.5
(⍺⊃BO)+⍤1⊢(⊃WOINP[⍺]←⊂(⍴⍵)⍴0 2 1 3⍉attn+.×⍤2⊢v)+.×⍺⊃WO
}
⍝ Transforms input using multilayer perceptron with one hidden layer
MLP←{
ACTINP[⍺]←⊂h←(⍺⊃B1)+⍤1⊢(⊃W1INP[⍺]←⊂⍵)+.×⍺⊃W1
(⍺⊃B2)+⍤1⊢(⊃W2INP[⍺]←⊂0.5×h×1+7○GELUF×h+0.044715×h*3)+.×⍺⊃W2
}
⍝ Passes input through a transformer block
BLK←{
ind inp←⍵
out←inp+ind MHSA (2×ind) LN inp
(ind+1) (out+ind MLP (1+2×ind) LN out)
}
⍝ Produces next token predictions
HEAD←{(WHINP⊢←(2×DPTH) LN ⍵)+.×WH}
⍝ Calculates cross-entropy loss
CE←{{(+⌿⍵)÷≢⍵},(UNSQZ CETARG⊢←⍺)⌷⍤1⊢-⍟CEPROB⊢←SM ⍵}
out←HEAD 1⊃BLK⍣DPTH⊢0 (PE TE ⍵)
⍺←⍬ ⋄ 0=≢⍺:out ⋄ ⍺ CE out
}
BWD←{
∆TE←{∆WTE⊢←(⍴WTE)⍴0 ⋄ ∆WTE[WTEINP;]+←⍵}
∆PE←{∆WPE⊢←(⍴WPE)⍴0 ⋄ ∆WPE[⍳1⌷⍴⍵;]←+⌿⍵ ⋄ ⍵}
∆LN←{
∆WLN[⍺]←⊂+⌿,[⍳2]⍵×prelin←((⍺⊃LNINP)-⍤1⊢⍺⊃MEAN)÷⍤1⊢⍺⊃STD ⋄ ∆BLN[⍺]←⊂+⌿,[⍳2]⍵
wgprod←⍵×⍤1⊢⍺⊃WLN
(wgprod-(prelin×⍤1⊢AVG prelin×wgprod)+⍤1⊢AVG wgprod)÷⍤1⊢⍺⊃STD
}
∆MHSA←{
∆WO[⍺]←⊂(⍉,[⍳2]⍺⊃WOINP)+.×,[⍳2]⍵ ⋄ ∆BO[⍺]←⊂+⌿,[⍳2]⍵
∆woinp←0 2 1 3⍉((2↑⍴⍵),HEADS (DIM÷HEADS))⍴⍵+.×⍉⍺⊃WO
∆v←(⍉⍤2⊢⍺⊃ATTN)+.×⍤2⊢∆woinp
∆qkprod←(⍺{(⍺⊃ATTN)×⍵-⍤1⊢UNSQZ +/⍵×⍺⊃ATTN}∆woinp+.×⍤2⊢⍉⍤2⊢⍺⊃V)÷(¯1↑⍴⍺⊃K)*0.5
∆k←⍉⍤2⊢(⍉⍤2⊢⍺⊃Q)+.×⍤2⊢∆qkprod
∆q←∆qkprod+.×⍤2⊢⍺⊃K
∆qkv←4 0 2 1 3⍉↑∆q ∆k ∆v
∆WQKV[⍺]←⊂(⍉,[⍳2]⍺⊃WQKVINP)+.×,[⍳2]∆qkv ⋄ ∆BQKV[⍺]←⊂+⌿,[⍳2]∆qkv
(,[2+⍳3]∆qkv)+.×⍉,[1+⍳3]⍺⊃WQKV
}
∆MLP←{
∆W2[⍺]←⊂(⍉,[⍳2]⍺⊃W2INP)+.×,[⍳2]⍵ ⋄ ∆B2[⍺]←⊂+⌿,[⍳2]⍵
∆w2inp←⍵+.×⍉⍺⊃W2
arg←GELUF×(⍺⊃ACTINP)+0.044715×(⍺⊃ACTINP)*3
∆h←∆w2inp×(0.5×1+7○arg)+(⍺⊃ACTINP)×0.5×(÷(6○arg)*2)×GELUF×1+0.134145×(⍺⊃ACTINP)*2
∆W1[⍺]←⊂(⍉,[⍳2]⍺⊃W1INP)+.×,[⍳2]∆h ⋄ ∆B1[⍺]←⊂+⌿,[⍳2]∆h
∆h+.×⍉⍺⊃W1
}
∆BLK←{
ind ∆out←⍵
∆inp←∆out+(1+2×ind) ∆LN ind ∆MLP ∆out
(ind-1) (∆inp+(2×ind) ∆LN ind ∆MHSA ∆inp)
}
∆HEAD←{∆WH⊢←(⍉,[⍳2]WHINP)+.×,[⍳2]⍵ ⋄ (2×DPTH) ∆LN ⍵+.×⍉WH}
∆CE←{(CEPROB-CETARG∘.=⍳¯1↑⍴CEPROB)÷×/⍴CETARG}
_←∆TE ∆PE 1⊃∆BLK⍣DPTH⊢(DPTH-1) (∆HEAD ∆CE ⍬) ⋄ ⍬
}
TRAIN←{
⍝ Updates set of parameters using AdamW
OPT←{
P ∆P M1 M2←⍵
M1←(BETA1×M1)+∆P×1-BETA1 ⋄ M2←(BETA2×M2)+∆P×∆P×1-BETA2
(P-LR×(WD×P)+(M1÷1-BETA1*T)÷1E¯8+(M2÷1-BETA2*T)*0.5) M1 M2
}
⍝ Performs one training iteration
ITER←{
seq←data[(?BS⍴(⍴data)-SEQ+1)∘.+⍳SEQ+1] ⋄ inp←¯1↓⍤1⊢seq ⋄ targ←1↓⍤1⊢seq
loss←targ FWD inp ⋄ _←BWD ⍬ ⋄ T+←1
X←OPT WTE ∆WTE M1WTE M2WTE ⋄ WTE⊢←0⊃X ⋄ M1WTE⊢←1⊃X ⋄ M2WTE⊢←2⊃X
X←OPT WPE ∆WPE M1WPE M2WPE ⋄ WPE⊢←0⊃X ⋄ M1WPE⊢←1⊃X ⋄ M2WPE⊢←2⊃X
X←OPT WLN ∆WLN M1WLN M2WLN ⋄ WLN⊢←0⊃X ⋄ M1WLN⊢←1⊃X ⋄ M2WLN⊢←2⊃X
X←OPT BLN ∆BLN M1BLN M2BLN ⋄ BLN⊢←0⊃X ⋄ M1BLN⊢←1⊃X ⋄ M2BLN⊢←2⊃X
X←OPT WQKV ∆WQKV M1WQKV M2WQKV ⋄ WQKV⊢←0⊃X ⋄ M1WQKV⊢←1⊃X ⋄ M2WQKV⊢←2⊃X
X←OPT BQKV ∆BQKV M1BQKV M2BQKV ⋄ BQKV⊢←0⊃X ⋄ M1BQKV⊢←1⊃X ⋄ M2BQKV⊢←2⊃X
X←OPT WO ∆WO M1WO M2WO ⋄ WO⊢←0⊃X ⋄ M1WO⊢←1⊃X ⋄ M2WO⊢←2⊃X
X←OPT BO ∆BO M1BO M2BO ⋄ BO⊢←0⊃X ⋄ M1BO⊢←1⊃X ⋄ M2BO⊢←2⊃X
X←OPT W1 ∆W1 M1W1 M2W1 ⋄ W1⊢←0⊃X ⋄ M1W1⊢←1⊃X ⋄ M2W1⊢←2⊃X
X←OPT B1 ∆B1 M1B1 M2B1 ⋄ B1⊢←0⊃X ⋄ M1B1⊢←1⊃X ⋄ M2B1⊢←2⊃X
X←OPT W2 ∆W2 M1W2 M2W2 ⋄ W2⊢←0⊃X ⋄ M1W2⊢←1⊃X ⋄ M2W2⊢←2⊃X
X←OPT B2 ∆B2 M1B2 M2B2 ⋄ B2⊢←0⊃X ⋄ M1B2⊢←1⊃X ⋄ M2B2⊢←2⊃X
X←OPT WH ∆WH M1WH M2WH ⋄ WH⊢←0⊃X ⋄ M1WH⊢←1⊃X ⋄ M2WH⊢←2⊃X
⍬
}
data←⍵
_←ITER⍣ITERS⊢⍬
}
⍝ Greedily generates next tokens
GEN←{{⍵,(⊃⍒)⍤1⊢¯1↑[1]FWD (-SEQ⌊1⌷⍴⍵)↑[1]⍵}⍣⍺⊢⍵}
:EndNamespace
0)OFF ⍝ terminate program
⍝ simple assignment
N←0
N
⍝ special value: ⎕ is stdout
⎕←'hello world'
⍝ dispatching
(A B C)←1 2 3
(D E F)←4
⎕←A B C
⎕←D E F
⍝ modified assignment
N+←3
N-←1
N
⍝ indexed assignment
V←⍳9
V[3 5]←100
V
⍝ selective assignment
X←'HELLO'
((X∊'AEIOU')/X)←'*'
X
Y←10 20 30 40
((Y≥30)/Y)×←100
Y
⍝ monadic: Ravel
,2 2 2⍴⍳8
⍝ dyadic: concatenate
1 2,3 4
⍝ multi-level cat
⍝ (obviously, the number of columns has to be the same)
(3 3⍴⍳9),3 5⍴⍳25
⍝ operator: inverts the arguments of its αα
3-⍨4
1 2,⍨3 4
A←0 3 4 10
B←2 3 10 8
⎕←'A and B:'
A
B
⎕←'Lower'
A<B
⎕←'Greater'
A>B
⎕←'Lower or Equal'
A≤B
⎕←'Greater or Equal'
A≥B
⎕←'Equal'
A=B
⎕←'Not equal'
A≠B
⍝ operator: outer product
⍝ see file outer-product.apl
⍝ operator: Compose
(⍴∘⍴) 3 4
⍝ operator: Currying
(*∘0.5) 1 2 3
⍝ monadic: depth (max depth)
≡2 2 2⍴⍳8 ⍝ still one
≡((1 2) (3 4))((5 6) (7 8))
⍝ this returns a negative value as it's not uniform
≡1 (2 3) (4 (5 6))
⍝ dyadic: match
'b','o','b'≡'bob' ⍝ 1, because they match
⍝ applies ⍺ operator to "each" of its *ENCLOSED* ⍵
⍝ NOTE: to understand what's going on with these literals,
⍝       see the explanation in shaped.apl and see mix-take.apl
⊃¨ (1 2 3) (4 5 6) ⍝ first of (1 2 3), first of (4 5 6)
⍝ note that each's argument, `/`, also has an argument (`+`)
+/¨(1 2 3) (4 5 6) ⍝ were that `2 3⍴⍳6`, the each wouldn't be needed
⎕←'Enclosed VS not enclosed. First, not enclosed:'
⍝ apply a function (well, obviously)
{⍵[2 1]}¨(1 2 3)(4 5 6)
⍝ Rotate inside each matrix, instead of rotate the order of the matrices
⌽¨(1 2)(3 4)
⍝ Basically, dispatches the right each side every time
⍝ (so the shape must match).
⎕←'visualization'
F←{⍵×⍺}
¯1 0 1F¨⍳3 ⍝ this means (¯1F1)(0F2)(1F3)
⎕←'scalar extension'
1 0 ¯1 ⌽¨⊂⍳9
⍝ this means (1⌽⊂⍳9)(0⌽⊂⍳9)(¯1⌽⊂⍳9)
⍝ monadic: enlist (flatten) ("element"s)
⍝ NOTE: also removes scalar containers
∊0 ((1 2) (3 4) (3 3⍴⍳9))
⍝ dyadic: "element" of
1∊1 2 3
1 2 4∊1 2 3
⎕←'Matrix'
⍝ deep contain
(3 3⍴⍳9)∊⍳5
⍝ monadic: enclose
⍝ wraps the array in a "rank 0 array", also know as a scalar
⍝ useful for scalar extension (distributing the scalar to functions)
⎕←'bare: (non-enclosed then enclosed)'
(3 3⍴⍳9)
⊂(3 3⍴⍳9)
⍝ you can see its effect using, say, first:
⎕←'applying first: (non-enclosed then enclosed)'
⊃(3 3⍴⍳9)
⊃⊂(3 3⍴⍳9)
⍝ dyadic: partitioned enclose
⎕←'partitionated enclose: (note: still enclosed)'
0 1 1 0⊂1 2 3 4
⎕←'matrix "0 1 0" against a 3x3 matrix'
0 1 0⊂3 3⍴⍳9 ⍝ 2th of each line (inner/column index is used)
⍪{(' '⍴⍨9-⍵),(' '~⍨⍕⍳⍵),' x 8 +',⍵,' = ',⍵+8×{⍺+10×⍵}/⌽⍳⍵}¨⍳9
⍝ ⍪{(' '⍴⍨9-⍵),(' '~⍨⍕⍳⍵),' x 8 +',⍵,' = ',⍵+8×{⍺+10×⍵}/⌽⍳⍵}¨⍳9
⍝                                                           ¨⍳9 ⍝ for each number ⍵ in 1..9
⍝  {                     ,' x 8 +',⍵,' = ',                }¨⍳9 ⍝ - the static pieces of strings
⍝                     ⍳⍵                                        ⍝ - generate 1..⍵
⍝                    ⍕                                          ⍝   format (stringify)
⍝              (' '~⍨   )                                       ⍝   remove spaces (swapped remove operator)
⍝                                                        ⍳⍵     ⍝ - generate 1..⍵
⍝                                                       ⌽       ⍝   reserve
⍝                                              {⍺+10×⍵}/        ⍝   parse as number (1 2 3 -> 123)
⍝                                          ⍵+8×                 ⍝   multiply by 8 and add ⍵
⍝   (' '⍴⍨9-⍵)                                                  ⍝ - the prefix space to make a pyramid (space repeated 9-⍵ times)
⍝ ⍪                                                             ⍝ table
^/0=∘⊃0⍴⊂
⍝ from https://codegolf.stackexchange.com/a/141982
↑{(1-2×⍵)↑⌽⍵↑⎕A}¨⌽⍳26
⍝ from http://codegolf.stackexchange.com/a/76258
{⍺⍺[⍵⍵⍳⍵]}
⍝ for each character in ⍵, take the position in ⍵⍵, and use these indices to index into ⍺⍺
⍝ from http://codegolf.stackexchange.com/questions/75840/the-last-stage-of-contamination/76350#76350
{⍵∨1<¯1 ¯1↓1 1↓↑ +/(1 0)(¯1 0)(0 ¯1)(0 1){⍺[1]⊖⍺[2]⌽⍵}¨⊂¯1⊖¯1⌽7 7↑⍵}⍣≡
⍝ uses the same technique as the game of life... except a few things:
⍝ - the neighbour counting shouldn't "wrap" on the sides, so we make the 5x5 matrix a 7x7 one, and move our matrix in the middle before generating the rotated versions.
⍝ - it only needs the direct neighbors, so cannot use indice generation.
⍝ use ⍣≡ to get the fixpoint.
⍴⍴⊢⊢⍤/⍨1+0∘=
⍝ Doubles zeroes, but keep the same size as the original vector
⍴⍴⊢⊢⍤/⍨1+0∘=
0∘= ⍝ Matrix of which elements are equal to zero (0 or 1)
1+    ⍝ Add 1 to that matrix (1 or 2)
⊢⍤/⍨      ⍝ Replicate (/) each element as many times as the matrix (one time for non-zeroes, two for zeroes)
⍴⍴⊢          ⍝ Train with the ⍴ monad on the left (shape of), identity on the right, and dyadically reshapes with ⍴
{⍪{⍵⍴'#'}¨⍳⍵}10
⍝ {           } ⍝ A function (argument: ⍵)
⍝          ¨⍳⍵  ⍝ For each number n from 1 to ⍵
⍝   {⍵⍴'#'}     ⍝ Repeat '#' n times
⍝  ⍪            ⍝ Table
⍝ from http://codegolf.stackexchange.com/questions/75979/full-width-text/76016#76016
{,/' ',⍨¨⍵}
⍝ we reverse-catenate so that the space is appended, not prepended.
⍝ (there will be a single trailing space)
⍳∘.×⍳
⍝ [DEPRECATED] without tally
⍝    F←{(≢⍵)=+/⍵=⌽⍵}
⍝ [DEPRECATED] doesn't allow uppercase, and requires explicit alphabet
⍝ dyalog reads right-to-left, so assign on the right
⍝    ALLOW←'abcdefghijklmnopqrstuvwxyz'
⍝    F←{⍵≡⌽⍵⊣⍵←(⍵∊ALLOW)/⍵}
AL←∊((AL_LOW AL_HIGH)←⎕UCS¨(96 64+⊂⍳26))
LC←{(∊2/⊂AL_LOW)[AL⍳⍵]}
F←{⍵≡⌽⍵⊣⍵←LC (⍵∊AL)/⍵}
⍝ tests
F 'lol'
F 'h e y'
F 'BB ob  !!b'
{⍺@∊∘⍺⍵}
https://codegolf.stackexchange.com/a/182732/8328
∊∘⌽⊢⊂⍨⊢∘≢⍴1↑⍨⊣
https://codegolf.stackexchange.com/a/181905/8328
⍝ from http://codegolf.stackexchange.com/questions/76123/sorting-rectangular-matrices/76203#76203
⍴⍴⊂∘⍋∘,⌷,
⍝ which really is:
⍝ ⍴⍴((⊂∘⍋∘,)⌷,)
⍝ that is, a fork, on its right, another fork, which has 3 functions composed together on its left.
⍝ the reason we have to box (⊂) the sorted indices is because the functional index (⌷) would otherwise think it's a list of indices.
⍝ i.e.:     3 4⌷R is R[3;4]
⍝ whereas   (⊂3 4)⌷R is R[3 4]
{v←⍵⍵ ⍵⋄⍺⍺v:v⋄(⍺⍺∇⍵⍵)v}
⍝ Applies the right function until it matches the left function to the (right) operand.
⍝ Stems from https://chat.stackexchange.com/transcript/message/41668474#41668474
⍝ Both statements are equivalent:
⍝     {⍵=5}until{⍵+1}0
⍝     {⍵+1}⍣{⍺=5}0
⍝ monadic: first
⊃ (6 4) 5 0 3
⍝ dyadic: pick (non-enclosed indexing)
⍝ gives subarray of the array, regardless of its content
⍝   (much like first, but with a specific index)
2⊃(2 2)(2 2⍴3)
⍝ 3 3
⍝ 3 3
⍝ as opposed to indexing, which returns the enclosed result.
((2 2)(2 2⍴3))[2]
⍝ indexing takes a slice of an array (same behavior for `[2]` and `[1 2]`,
⍝  and doesn't disclose, doesn't matter that the element is an enclosed array)
⍝ "⍵" (omega) is the function's right argument
⍝  (which is the only argument for a monadic function)
F←{(+/⍵)÷⍴⍵} ⍝ average
F 3 4 5
⍝ for dyadic (binary) function, use "⍺" (alpha)
G←{⍺+⍳⍵} ⍝ add the LHS to a range 1..RHS
10G 15
⍝ for function arguments, use ⍺⍺ (left) and ⍵⍵ (right)
⍝ (adds the arguments, then negates the result)
3 -{⍺⍺(⍺ ⍵⍵ ⍵)}+ 4
⍝ monadic: returns the indices of the sorted values
⍝ note: ⍋ is ascending order, ⍒ is descending
⎕←'Vector, sorted indices, sorted vector (ascending), then ascending'
⎕←R←10 53 3
⍝ print the indices, sorted by ascending value:
⍋1 5 3
⍝ print the values themselves, sorted:
R[⍋R]
R[⍒R]
⍝ dyadic: returns the indices of sorted ⍵ using ⍺ as the order
⎕←'Unsorted string, sorted indices, sorted string'
⎕←(S←'DED')
⎕←I←'ABCDEF'⍋S
S[I]
⍝ monadic: index generator
⍳9
⍝ dyadic: (1-indexed) index(es) of ⍵ in ⍺
0 1 2 3 4 5⍳0 1 5
⍝ compose + and × (dot-free style)
2 1000(+.×)4 5
⍝ is basically:
+/2 1000×4 5
⍝ or
+/(2×4) (1000×5)
⍝ Returns a matrix for each unique key (key, positions of that key)
{⍺ ⍵}⌸'abc acdef'
⍝ Show number of time for each key
{⍺,' appears ',(⍕≢⍵),' time(s)'}⌸'abc acdef'
A←0 1 1 0
B←1 0 1 0
⎕←'A and B:'
A
B
⎕←'AND'
A∧B
⎕←'OR'
A∨B
⎕←'NAND'
A⍲B
⎕←'NOR'
A⍱B
{(a b)←⍺⋄pb←(⍵=b)⋄str←⍵⋄((⍵=a)/str)←b⋄(pb/str)←a⋄str}
commute letters
TODO
{(⊣⍪+⌿)⍵,+/⍵}
⍝ Exercise:
⍝ Write a monadic function which appends row and column totals to a matrix
{(⊣⍪+⌿)⍵,+/⍵}
{           } ⍝ The function itself.
+/⍵  ⍝ Calculate the each row sum
(⊣⍪+⌿)⍵      ⍝ Call the fork – (f g h)arg is (f arg)g(h arg)
⊣           ⍝ Left side of the fork: identity (returns ⍵)
+⌿        ⍝ Right side of the fork: column-wise sum
⍪          ⍝ Append (column-wise) both sides of the fork
,     ⍝ Append (row-wise) the result of the fork and the sum
{(⍵>0)/⍵}{≢¨1↓¨(1,~⍵∊⎕UCS 96+⍳26)⊂' ',⍵}
⍝ Exercise:
⍝ Write a monadic function that returns the length of the words contained in a text
{(⍵>0)/⍵}{                               }
⊂' ',⍵ ⍝ prepend a space so that everything has a leading char
⎕UCS 96+⍳26         ⍝ generate the alphabet
~⍵∊                    ⍝ find anything that's NOT in the alphabet
(1,               )       ⍝ prepend 1 so that the first word is used as well
1↓¨                          ⍝ drop a leading character
≢¨                             ⍝ calculate length for each
{(⍵>0)/⍵}                                 ⍝ filter out empty elements
⍝ monadic: mix
⍝ somewhat the opposite of split (both related to enclose)
⎕←'Matrix'
(1 2 3)(4 5 6)
⍝ ┌→──────────────┐
⍝ │┌→────┐ ┌→────┐│
⍝ ││1 2 3│ │4 5 6││
⍝ │└─────┘ └─────┘│
⍝ └∊──────────────┘
⎕←'Mixed:'
↑(1 2 3)(4 5 6) ⍝ "mix" the two enclosed
⍝ ┌→────┐
⍝ ↓1 2 3│
⍝ │4 5 6│
⍝ └─────┘
⎕←'using rho:'
2 3⍴⍳6 ⍝ which gives the same as this
⍝ ┌→────┐
⍝ ↓1 2 3│
⍝ │4 5 6│
⍝ └─────┘
⍝ see cat to go the other way (ρ to enclosed)
⍝ dyadic: take (zero-pads if needed)
⎕←'take'
30↑⍳10
⍝ multi-dim (requires the ⍴(α)=⍴⍴(ω))
10 5↑(3 3⍴⍳9)
⍝ you can also be explicit on which axis you act ([1] is implicit)
10↑[1](3 3⍴⍳9)
⍝ if ⍺ is negative, it'll "take" starting from the end
¯2↑1 2 3 4 5
⍝ monadic: not
~0 1 1 1 0
⍝ dyadic: without
3 4 5~3
'abc'~'a'
⍝ NOTE: if you want to remove *strings* (nested character arrays),
⍝       you'll need to enclose the character array you want to remove.
⍝       In Dyalog, juxtaposing consecutive arrays is called "stranding" and produces a nested vector of vectors.
'abc' 'def'~⊂'abc' ⍝ The resulting vector is nested with a depth of 2'
⍝ construct a table from 1 to 10
⍝ "∘." is a higher-order function.
⍝ "∘.@" is, for any dyadic (binary) operator,
⍝  a tensor product (with ×, it's an outer product)
(⍳10)∘.×⍳10
⍝ "tensor product" means that for A=[1 2 3] and B=[a b c],
⍝  we get [[1a 1b 1c]
⍝          [2a 2b 2c]
⍝          [3a 3b 3c]]
⍝ NOTE: WRT parentheses:
⍝ no precedence in APL, and everything is right-associative
⍝ no parens would mean "⍳(10∘.×⍳10)" (and thus an error)
⍝  (either a RANK ERROR for a matrix, or a LENGTH ERROR for multiple values)
(⍳10)∘.≠(⍳10)
⍝ forks: 3-trains
⍝ #1: (f g h) w <=> (f w) g (h w)
avg←(+/ ÷ ≢)
avg 0 5 10
⍝ #2: a (f g h) w <=> (a f w) g (a h w)
4 (+ ÷ -) 2 ⍝ (4 + 2) ÷ (4 - 2)
⍝ atops: 2-trains
⍝ #1: a ( g h) w <=> g (a h w)
1 2 3 (+/ ×) 4 5 6 ⍝ +/ (1 2 3 × 4 5 6)
⍝ monadic: roll
?3 4 5
⍝ just generate dices 25x 1d20
?25⍴20
⍝ how many critical hits? sum of the dies that rolled 20
?25⍴20
⍝ dyadic: deal
⍝ same as ?⍵⍴⍺
3?1000
⍝ dyadic higher-order operator: rank
⍝ changes the rank of the operator
⍝ ⍵⍵ is a 2-elements vector: rank on the left side, rank on the first side
⍝ this wouldn't work:
'10 20 30 40+2 2⍴100 200 300 400' ⍝ rank error
array←10 20 30
matrix←3 2⍴100 200 300 400 500 600
array
matrix
⍝ but we can use rank to change the depth of application:
⎕←'Apply each item of `array` with each line of `matrix`'
array (+ ⍤ 0 1) matrix
⎕←'(comparison)'
↑10 20 30+¨(100 200)(300 400)(500 600)
⎕←'(which is also)'
↑(10+100 200)(20+300 400)(30+500 600)
⎕←'Apply each item of `array` with matrix each time'
array (+ ⍤ 0 2) matrix
⎕←'(comparison with mixed scalar extension)'
↑array+¨⊂matrix
⍝ monadic: replicate
2/1 2 3
1 2 1/1 2 3 ⍝ ∀N.repeats ω[N] for α[N] times
⍝ do note that it's very useful for filtering:
⍝ 0 will mean the element won't be present
0 1 1/1 2 3
⍝ operator: reduce
A←⍳10
⎕←'Vector:'
A
⎕←'Sum:'
+/A
⎕←'Product:'
×/A
⍝ distributed per rows:
+/2 3⍴⍳6 ⍝ cf down below
⍝ it doesn't do anything on a scalar:
+/1
+/⊂⍬
⎕←'Enclosed'
⍝ NOTE: on enclosed values, `/` means "apply"
⍝ here, the literals vectors are enclosed,
⍝  hence the behavior:
+/(1 2 3) (4 5 6) ⍝ similar to (1 2 3)+(4 5 6)
⍝ see cat to see how to "un"enclose
⍝ monadic: multi-dimensional (outer dim) reverse
⊖4 5⍴⍳20
⍝ dyadic: multi-dimension (outer dim) rotate (shift)
⎕←'Multi-dim rotate'
2⊖4 5⍴⍳20
⍝ monadic: reverse
⌽1 2 3
⍝ dyadic: rotate (shift)
⎕←'Positive rotate'
1⌽1 2 3 4 ⍝ 1 becomes last
⎕←'Negative rotate'
¯1⌽1 2 3 4 ⍝ 4 becomes first
⎕←'Multi-dim rotate (shifts per-line)'
2⌽4 5⍴⍳20
⍝ reshape
⎕←5 6⍴⍳30 ⍝ outer size=5, inner size=6
⍝ range (iota)=30
⍝ IMPORTANT!
⍝ (1 2 3) (4 5 6) is *enclosed* (see enclose)
⍝ see mix-take to get the same result as
⍝     2 3⍴⍳6
⍝ shape of
⍴5 6⍴⍳30 ⍝ easy enough, 5 6
⍝ allows to short-circuit a function
F←{ ⍵=0:1 ⋄ ⍵ }
F 0 ⍝ short-circuits
F 5 ⍝ ... doesn't
⍝ monadic: split
⍝ encloses each vector level
⍝ opposite of mix (both related to enclose)
⍝ column display, as it's a matrix:
3 3⍴⍳9
⍝ split display, as each vector gets enclosed
↓3 3⍴⍳9 ⍝ same as (1 2 3)(4 5 6)(7 8 9)
⍝ dyadic: drop
⍝ discards the first ⍺ elements
2↓1 2 3 4 5
⍝ if ⍺ is negative, it'll "drop" starting from the end
¯1↓1 2 3 4 5
⍝ allow to separate statements on the same line
A←10⋄A←A+3⋄A
⍝ monadic: tally (length)
≢'hey'
⍝ dyadic: not-match
'hey'≢'h','e','y' ⍝ 0 (`not 1`), because they match
⍝ No "case insensitive" option: no match
('a' ⎕R 'x') 'ABC'
⍝ With the option:
('a' ⎕R 'x' ⍠ 'IC' 1) 'ABC'
⍝ If you specify several options, only the rightmost is kept:
⍠ ('IC' 0)('IC' 1) ⍝ sets IC to 1﻿:Namespace Boot
(⎕ML ⎕IO)←1
:section Startup/Shutdown
∇ {msroot}Run root
:If 0≠⎕NC'msroot' ⋄ MSRoot←msroot ⋄ :EndIf
AppRoot←folderize root  ⍝ application (website) root
DyalogRoot←folderize 2 ⎕NQ '.' 'GetEnvironment' 'DYALOG'
Load AppRoot ⍝ load essential objects
ms←Init ConfigureServer AppRoot ⍝ read configuration and create server instance
Configure ms
ms.Run
∇
∇ {msroot}RunWC2 root
:If 0≠⎕NC'msroot' ⋄ MSRoot←msroot ⋄ :EndIf
AppRoot←folderize root  ⍝ application (website) root
Load AppRoot ⍝ load essential objects
!!!ms←1 Init ConfigureServer AppRoot ⍝ read configuration and create server instance
Configure ms
{ms.Run}
∇
∇ Load AppRoot;filterOut;files;HTML;f;failed;dir;name;file;folder;callingEnv
⍝ Load required objects for MiServer
HtmlRenderer←{0::⍵ ⋄ HtmlRenderer}0
:If 0=#.⎕NC'Files' ⋄ ⎕SE.SALT.Load MSRoot,'Utils/Files -target=# -nolink' ⋄ :EndIf
filterOut←{⍺←'' ⋄ ⍺{0∊⍴⍺:⍵ ⋄ ⍺{∊¨↓⍵⌿⍨~⍵[;2]∊eis ⍺}↑⎕NPARTS¨⍵}⊃#.Files.Dir ⍵,'/*.dyalog'}
files←'Boot'filterOut MSRoot,'Core'
files,←'Files'filterOut MSRoot,'Utils' ⍝ find utility libraries
files,←filterOut MSRoot,'Extensions'
failed←''
:For f :In files
{326=⎕DR ⍵: ⋄ '***'≡3↑⍵:failed,←⊂(('<.+>'⎕S{1↓¯1↓⍵.Match})⍵)}⎕SE.SALT.Load f,' -target=# -nolink' ⍝ do not reload already loaded spaces
:EndFor
:For file :In failed
disperror ⎕SE.SALT.Load∊'"',file,'" -target=# -nolink'
:EndFor
HTML←'_JQ' '_JS'{⍵[⍋⍺⍳(↑⎕NPARTS¨⍵)[;2]]}filterOut MSRoot,'HTML' ⍝ prioritize loading of _JQ and _JS
⍝↓↓↓ Some controls may require controls in other folders.
⍝    So we attempt to load everything, and keep track of what failed
⍝    and then go back and try to load the failed controls again their
failed←''
:For f :In HTML
(folder name)←2↑⎕NPARTS f
disperror ⎕SE.SALT.Load f,' -target=# -nolink'
:If #.Files.DirExists dir←folder,name,'/'
dir∘{326=⎕DR ⍵: ⋄ '***'≡3↑⍵:failed,←⊂⍺(('<.+>'⎕S{1↓¯1↓⍵.Match})⍵)}¨⎕SE.SALT.Load dir,'* -nolink -target=#.',name
:EndIf
:EndFor
:For (f file) :In failed
disperror ⎕SE.SALT.Load∊'"',file,'" -nolink -target=#.',f
:EndFor
LoadFromFolder MSRoot,'Loadable'
'Pages'#.⎕NS'' ⍝ Container Space for loaded classes
'CachedPages'#.⎕NS'' ⍝ Container for cached pages
BuildEAWC ⍝ build the Easy As ⎕WC namespace
⍝ Now load any code from the MiSite
:If ~0∊⍴AppRoot
:Trap 22
:For class :In filterOut AppRoot,'Code' ⍝ Classes in application folder
disperror ⎕SE.SALT.Load class,' -target=#'
:EndFor
:If #.Files.DirExists AppRoot,'/Code/Templates/'
disperror ⎕SE.SALT.Load AppRoot,'/Code/Templates/* -target=#.Pages'
:EndIf
:EndTrap
:EndIf
∇
∇ Cleanup
∇
∇ ms←{HtmlRenderer}Init Config;path;class;classes;e;res;mask
⍝ Create instances of MiServer, Session and Authentication Handlers
HtmlRenderer←{0::⍵ ⋄ HtmlRenderer}0  ⍝ using HTMLRenderer?
:If 0≠HtmlRenderer
ms←⎕NS''
ms.Config←Config
ms.Log←{⎕←⍵}
:Else
ms←⎕NEW(#⍎Config.ClassName)Config
path←MSRoot,'Extensions/'
:If 0≠⍴Config.SessionHandler
class←⎕SE.SALT.Load path,Config.SessionHandler
ms.SessionHandler←⎕NEW class ms
:EndIf
:If 0≠⍴Config.Authentication
class←⎕SE.SALT.Load path,Config.Authentication
ms.Authentication←⎕NEW class ms
:EndIf
:If 0≠⍴Config.SupportedEncodings
{}⎕SE.SALT.Load path,'ContentEncoder'
:For e :In Config.SupportedEncodings
class←⎕SE.SALT.Load path,e
ms.Encoders,←⎕NEW class
:EndFor
:If ∨/mask←0≠1⊃¨res←ms.Encoders.Init
2 ms.Log'Content Encoding Initialization failed for:',∊' ',¨mask/ms.Encoders.Encoding
ms.Encoders←(~mask)/ms.Encoders
:EndIf
:EndIf
Config.UseContentEncoding∧←0≠⍴ms.Encoders
:If 0≠⍴Config.Logger
class←⎕SE.SALT.Load path,Config.Logger
ms.Logger←⎕NEW class ms
:EndIf
:EndIf
∇
∇ End;classes;z;m
⍝ Clean up the workspace
:If 9=⎕NC'ms'
:Trap 0
ms.End
:EndTrap
{}try'⎕EX⍕⊃⊃⎕CLASS ms.SessionHandler'
{}try'⎕EX⍕⊃⊃⎕CLASS ms.Authentication'
{}try'⎕EX⍕⊃⊃⎕CLASS ms.Logger'
{}try'⎕EX⍕¨∪∊ ⎕CLASS¨ms.Encoders'
⎕EX⍕⊃⊃⎕CLASS ms
⎕EX'ms'
:EndIf
:If 9=⎕NC'SQA'
{}try'SQA.Close''.'''
:EndIf
:If 0≠⍴classes←↓#.⎕NL 9.4
:AndIf 0≠⍴classes←(m←2=⊃∘⍴¨z←⎕CLASS¨#⍎¨classes)/classes
:AndIf 0≠⎕NC'#.MiPage'
classes←(#.MiPage≡¨2 1∘⊃¨m/z)/classes
:EndIf
⎕EX'#.MiPage'
⎕EX'AppRoot'
{}try'#.DRC.Close ''.'''
⎕EX'#.DRC'
{}⎕WA
∇
∇ BuildEAWC;src;sources;fields;source;list;mask;refs;target
⍝ Build the Easy As ⎕WC namespace from core classes and its own source
⍝ Also build the #._ namespace with shortcuts
sources←#._html #._SF #._JQ #._DC #._JS
⍝      fields←''
'_'#.⎕NS''
:For source :In sources
list←source.⎕NL ¯9.4
list←list/⍨'_'≠⊃¨list
:If ∨/mask←0≠refs←source{6::0 ⋄ (⍕⍺){('.'∊1↓s↓r)<⍺≡(s←⍴⍺)↑r←⍕⍵}t←⍺⍎⍵:t ⋄ 0}¨list
:EndIf
:EndFor
∇
∇ {root}LoadFromFolder path;type;name;nsName;parts;ns
⍝ Loads an APL "project" folder
root←{6::⍵ ⋄ root}#
:For name type :In ↓{⍵[⍒⍵[;2];]}⍉↑0 1 #.Files.Dir path,'/*'
nsName←∊1↓parts←1 ⎕NPARTS name
:If 1=type ⍝ directory?
:Select ⊃root.⎕NC nsName
:Case 9 ⋄ ns←⍕root⍎nsName
:Case 0 ⋄ ns←nsName root.⎕NS''
:Else ⋄ Log'"',name,'" is not a namespace'
:EndSelect
⎕SE.SALT.Load name,'/* -target=',⍕ns
:Else
:If ~∨/∊(⎕NSI,¨'.')⍷⍨¨⊂'.',(2⊃1 ⎕NPARTS name),'.' ⍝ don't load it if we're being called from it
⎕SE.SALT.Load name,' -target=',⍕root
:EndIf
:EndIf
:EndFor
∇
:endsection
:section Configuration
∇ Configure ms
ConfigureDatasources ms
ConfigureVirtual ms
ConfigureResources ms
ConfigureContentTypes ms
ms AddConfiguration'MappingHandlers'
∇
∇ ms AddConfiguration name;conf
conf←ReadConfiguration name
{ms.Config⍎name,'←⍵'}conf
∇
∇ r←ns Setting pars;name;num;default;mask
⍝ returns setting from a config style namespace or provides a default if it doesn't exist
⍝ pars - name [num] [default]
⍝ ns - namespace reference
⍝ name - name of the setting
⍝ num - 1 if setting is numeric scalar, (,1) if numeric vector is allowed, 0 otherwise
⍝ default - default value if not found
pars←eis pars
(name num)←2↑pars,(⍴pars)↓'' 0 ''
:If 2<⍴pars ⋄ default←3⊃pars
:Else ⋄ default←(1+num)⊃''⍬
:EndIf
r←(⍴ns)⍴⊂default
:If ∨/mask←0≠⊃¨ns.⎕NC⊂name
(mask/r)←(((⍴⍴num)∘tonum)⍣(⊃num))¨(mask/ns).⍎⊂name
:EndIf
:If 0=⍴⍴r ⋄ r←⊃r ⋄ :EndIf
∇
∇ SubstEnv config;getEnv;subst;n;v
⍝ substitute environment variables for items with values im the form $envName$
⍝ config is a configuration result from ReadConfiguration
⍝   it should be either a namespace reference, or a vector of namespace references
getEnv←{2 ⎕NQ'.' 'GetEnvironment'⍵}
subst←{
0∊⍴⍵:⍵ ⋄
'$'∧.=(⊣/,⊢/)(2⌈≢⍵)↑⍵:getEnv 1↓¯1↓⍵ ⋄
⍵}
:Select ⊃⎕NC'config'
:Case 2
:If 9.1∧.={⎕NC⊂,'⍵'}¨config
SubstEnv¨config
:EndIf
:Case 9
:For n :In config.⎕NL ¯2
:Select ≡v←config⍎n
:Case 1
v←subst v
:Case 2
v←subst¨v
:Else
∘∘∘
:EndSelect
⍎'config.',n,'←v'
:EndFor
:EndSelect
∇
∇ config←{element}ReadConfiguration type;serverconfig;file;siteconfig;thing;ind;mask
⍝ Attempt to read configuration file
⍝ 1) from server root MSRoot
⍝ 2) from site root AppRoot
⍝ merging the two if they both exist - site settings overrule server settings
config←''
:If #.Files.Exists file←MSRoot,'Config/',type,'.xml'
config←serverconfig←(#.XML.ToNS #.Files.ReadText file)⍎type
:EndIf
:If #.Files.Exists file←AppRoot,'Config/',type,'.xml'
siteconfig←(#.XML.ToNS #.Files.ReadText file)⍎type
:If 0∊⍴config
config←siteconfig
:ElseIf 0=⎕NC'element'
{}{try'serverconfig.',⍵,'←siteconfig.',⍵}¨siteconfig.⎕NL ¯2
:Else ⍝ element specifies the element(s) to search on
:For thing :In siteconfig
:If 0≠thing.⎕NC element
:If ∨/mask←0≠∊serverconfig.⎕NC⊂element
:If (+/mask)<ind←((mask/serverconfig)⍎¨⊂element)⍳⊂thing⍎element
serverconfig,←thing
:Else
serverconfig[(mask/⍳⍴mask)[ind]]←thing
:EndIf
:Else
serverconfig,←thing
:EndIf
:EndIf
:EndFor
config←serverconfig
:EndIf
:EndIf
:If config≢'' ⋄ SubstEnv config ⋄ :EndIf
∇
∇ Config←ConfigureServer AppRoot;file
⍝ configure server level settings, setting defaults for needed ones that are not supplied
Config←ReadConfiguration'Server'
Config.AllowedHTTPMethods←{⍵⊆⍨~⍵∊' ,'}#.Strings.lc Config Setting'AllowedHTTPMethods' 0 'get,post'
Config.AppRoot←AppRoot
Config.Authentication←Config Setting'Authentication' 0 'SimpleAuth'
Config.CertFile←SubstPath Config Setting'CertFile' 0 ''
Config.ClassName←Config Setting'ClassName' 0 'MiServer'
Config.CloseOnCrash←Config Setting'CloseOnCrash' 1 0
Config.CreateSession←Config Setting'CreateSession' 1 1 ⍝ create session on GET request
Config.Debug←Config Setting'Debug' 1 0
Config.DecodeBuffers←Config Setting'DecodeBuffers' 1 1 ⍝ allow Conga to decode HTTP messages (1)
Config.DefaultExtension←Config Setting'DefaultExtension' 0 '.mipage'
Config.DefaultPage←Config Setting'DefaultPage' 0 'index.mipage'
Config.DirectFileSize←{⍵[⍋⍵]}0⌈⌊2↑Config Setting'DirectFileSize'(,1)⍬
Config.FIFOMode←Config Setting'FIFOMode' 1 0 ⍝ Conga FIFO mode default to off (0)
Config.FormatHtml←Config Setting'FormatHtml' 1 0
Config.Host←Config Setting'Host' 0 'localhost'
Config.HTTPCacheTime←'m'#.Dates.ParseTime Config Setting'HTTPCacheTime' 0 '0' ⍝ default to off (0)
Config.IdleTimeout←'s'#.Dates.ParseTime Config Setting'IdleTimeout' 0 '0' ⍝ default to none (0)
Config.KeyFile←SubstPath Config Setting'KeyFile' 0 ''
Config.Lang←Config Setting'Lang' 0 'en'
Config.LogMessageLevel←Config Setting'LogMessageLevel' 1 1 ⍝ default to error messages only
Config.Logger←Config Setting'Logger' 0 ''
Config.MSRoot←MSRoot
Config.Name←Config Setting'Name' 0 'MiServer'
Config.Port←Config Setting'Port' 1 8080
Config.Ports←Config Setting'Ports'(,1)⍬
Config.Production←Config Setting'Production' 1 0 ⍝ production mode?  (0/1 = development debug framework en/disabled)
Config.RESTful←Config Setting'RESTful' 1 0 ⍝ RESTful web service?
Config.RootCertDir←SubstPath Config Setting'RootCertDir' 0 ''
Config.Root←AppRoot
Config.SSLFlags←Config Setting'SSLFlags' 1(32+64)  ⍝ Accept Without Validating, RequestClientCertificate
Config.Secure←Config Setting'Secure' 1 0
Config.Server←Config Setting'Server' 0 ''
Config.SessionHandler←Config Setting'SessionHandler' 0 'SimpleSessions'
Config.SessionTimeout←'m'#.Dates.ParseTime Config Setting'SessionTimeout' 0 '30m' ⍝ 30 minute timeout
Config.SupportedEncodings←{(⊂'')~⍨1↓¨(⍵=⊃⍵)⊂⍵}',',Config Setting'SupportedEncodings' 0
Config.TrapErrors←Config Setting'TrapErrors' 1 0
Config.WaitTimeout←#.Dates.ParseTime Config Setting'WaitTimeout' 0 '5000ms' ⍝ 5000 msec (5 second timeout)
Config.UseContentEncoding←Config Setting'UseContentEncoding' 1 0 ⍝ aka HTTP Compression default off (0)
:If 0≠⎕NC'#.DrA' ⍝ Transfer DrA config options
{}#.DrA.SetDefaults
:EndIf
∇
∇ ConfigureDatasources ms;file;ds;name;tmp;orig;dyalog
⍝ load any datasource definitions
:If ~0∊⍴ms.Datasources←'Name'ReadConfiguration'Datasources'
:For ds :In ms.Datasources
:For name :In ds.⎕NL ¯2
orig←tmp←ds.⍎name
tmp←SubstPath tmp
:If orig≢tmp
⍎'ds.',name,'←tmp'
:EndIf
:EndFor
:EndFor
:Trap 0
:If 0=#.⎕NC'SQA'
dyalog←('/\'[1+'Win'≡3↑1⊃#.⎕WG'APLVersion']){⍵,(-⍺=¯1↑⍵)↓⍺}2 ⎕NQ'.' 'GetEnvironment' 'DYALOG'
'SQA'#.⎕CY dyalog,'ws/sqapl' ⍝ copy in SQA
:EndIf
:If 0≠1⊃#.SQA.Init'' ⍝ and initialize
1 ms.Log'SQA failed to initialize'
:EndIf
:EndTrap
:EndIf
∇
∇ ConfigureVirtual ms;file;virtual;mask;inds;v
⍝ load virtual (alias) definitions if any
ms.Config.Virtual←''
:If ~0∊⍴virtual←'alias'ReadConfiguration'Virtual'
:If 0∊mask←{⍵=⍳⍴⍵}inds←{⍵⍳⍵}virtual.alias ⍝ check for duplicate aliases, keep first
1 ms.Log'Duplicate virtual aliases defined (first occurrence will be used): ',1↓∊',',¨(~mask)/virtual.alias
virtual←mask/virtual
:EndIf
⍝ substitute server and site root if found
virtual.path←SubstPath¨virtual.path
:For v :In virtual
:If ~#.Files.DirExists v.path ⍝ check if mapped path exists
1 ms.Log'Virtual path not found: ',v.path
virtual~←v
:Else
:If #.Files.DirExists AppRoot,v.alias ⍝ check if alias conflicts with local path
1 ms.Log'Virtual alias "',v.alias,'" overrides site path of same name.'
:EndIf
:EndIf
:EndFor
ms.Config.Virtual←virtual
:EndIf
∇
∇ ConfigureResources ms;file;mask;inds;names;uses;map;n;res;f;missing;order;resources;files;which
⍝ load resource definitions if any
ms.Config.Resources←0 3⍴⊂''
:If ~0∊⍴res←'name'ReadConfiguration'Resources'
:If 0∊mask←{⍵=⍳⍴⍵}inds←{⍵⍳⍵}names←res.name ⍝ check for duplicate aliases, keep first
1 ms.Log'Duplicate resources defined (first occurence will be used): ',1↓∊',',¨(~mask)/res.name
res←mask/res
:EndIf
⍝ build the dependency map
uses←{(eis⍣(⊃0<⍴⍵))⍵}¨res Setting'uses'
inds←res.name∘⍳¨uses
n←⊃⍴res
:If ∨/mask←∨/¨missing←n<inds
1 ms.Log'Invalid resource dependency found for:',∊' ',¨mask/res.name
inds←(~missing)/¨inds
:EndIf
order←OrderResources inds
inds←(order∘⍳¨inds)[order]
res←res[order]
map←,(2⍴n)⍴(1+n)↑1 ⍝ identity matrix
map[∊(n×¯1+⍳n)+¨inds]←1
map←(2⍴n)⍴map
map←↓{({⍺∨⍺∨.∧⍵}⍣≡)⍨⍵}map
⍝ ms.Config.Resources[;1] resource name, [;2] scripts used [;3] styles used
f←{SubstPath¨{⍵~⊂''}∘∪¨⊃¨,/¨map/¨⊂eis¨⍵}
ms.Config.Resources←res.name,(f res Setting'script'),[1.1]f res Setting'style'
resources←∪⊃,/,0 1↓ms.Config.Resources
files←ms.Config Virtual¨resources
:If ∨/missing←~#.Files.Exists∘{⍵/⍨∧\⍵≠'?'}¨files
which←(0 1↓ms.Config.Resources)∊¨⊂missing/resources
mask←∨/∨/¨which
1 ms.Log'Resource files not found:'
1 ms.Log¨↓⍕(1,mask⌿which)/¨mask⌿ms.Config.Resources
(mask⌿ms.Config.Resources)←(mask⌿ms.Config.Resources)~¨⊂missing/resources
:EndIf
:EndIf
∇
∇ file←Config Virtual page;mask;f;ind;t;path;root
:Access public shared
⍝ checks for virtual directory
root←(-'/\'∊⍨¯1↑root)↓root←Config.Root
page←('/\'∊⍨1↑page)↓page
file←root,'/',page
:If 0<⍴Config.Virtual
ind←Config.Virtual.alias⍳⊂t←{(¯1+⍵⍳'/')⍴⍵}page
:If ind≤⍴Config.Virtual.alias
path←ind⊃Config.Virtual.path
file←#.Files.Normalize path,('/\'∊⍨¯1↑path)↓(⍴t)↓page
:EndIf
:EndIf
∇
∇ r←OrderResources inds;n;mask
n←⍳⍴inds
r←n/⍨mask←0∘∊∘⍴¨inds ⍝ roots with no dependencies
inds/⍨←~mask
n/⍨←~mask
:While ~0∊⍴inds
mask←∧/¨inds∊¨⊂r
r,←mask/n
inds/⍨←~mask
n/⍨←~mask
:EndWhile
∇
∇ ConfigureContentTypes ms;file;ct;inds;exts;types;mask;exp;n
⍝ load supported content types
ms.Config.ContentTypes←0 2⍴⊂''
:If ~0∊⍴ct←ReadConfiguration'ContentTypes'
exts←#.Strings.lc¨ct Setting'ext'
types←ct Setting'type'
:If ~0∊⍴inds←{⍵/⍳⍴⍵}∊','∊¨exts
mask←(⍴exts)⍴1
exp←{⎕ML←3 ⋄ (⍵≠',')⊂⍵}¨exts[inds]
mask[inds]←n←⍬∘⍴∘⍴¨exp
(exts types)←mask∘/¨exts types
exts[(n/inds)++\~∊n↑¨1]←⊃,/exp
:EndIf
ms.Config.ContentTypes←exts,[1.1]types
:Else
1 ms.Log'No content types defined?'
:EndIf
∇
:Class ConfigSpace
:field public config
∇ make filename;ns;n
:Access public
:Implements constructor
ns←#.XML.ToNS #.Files.ReadText filename
'Config file needs a single root node'⎕SIGNAL 11/⍨1≠⍴n←ns.⎕NL ¯9
config←ns⍎⊃n
∇
∇ r←Get args
:Access public
r←config Setting args
∇
∇ r←ns Setting pars;name;num;default;mask
⍝ returns setting from a config style namespace or provides a default if it doesn't exist
⍝ pars - name [num] [default]
⍝ ns - namespace reference
⍝ name - name of the setting
⍝ num - 1 if setting is numeric scalar, (,1) if numeric vector is allowed, 0 otherwise
⍝ default - default value if not found
pars←eis pars
(name num)←2↑pars,(⍴pars)↓'' 0 ''
:If 2<⍴pars ⋄ default←3⊃pars
:Else ⋄ default←(1+num)⊃''⍬
:EndIf
r←(⍴ns)⍴⊂default
:If ∨/mask←0≠⊃¨ns.⎕NC⊂name
(mask/r)←(((⍴⍴num)∘tonum)⍣(⊃num))¨(mask/ns).⍎⊂name
:EndIf
:If 0=⍴⍴r ⋄ r←⊃r ⋄ :EndIf
∇
eis←{(,∘⊂)⍣((326∊⎕DR ⍵)<2>|≡⍵),⍵} ⍝ Enclose if simple
tonum←{⍺←0
1∊⍺:tonumvec ⍵
w←⍵ ⋄ ((w='-')/w)←'¯'
⊃⊃{~∧/⍺:⎕SIGNAL 11 ⋄ ⍵}/⎕VFI w}
∇ r←tonumvec v;to;minus;digits;c;mask
⍝ tonum vector version
⍝ allows for specific of ranges and comma or space delimited numbers
⍝ tonumvec '8080-8090'  or '5,7-9,11-15'
r←⍬
⎕SIGNAL 11/⍨~∧/v∊⎕D,'., -¯'
to←{⍺←⍵ ⋄ ⍺,⍺+(¯1*⍺>⍵)×⍳|⍺-⍵}
v←('^\s*|\s*$'⎕R'')('\s+'⎕R' ')('\s*-\s*'⎕R'-')v
minus←'-'=v
digits←v∊⎕D,'.'
((minus>(minus∨{1↓⍵,0}digits)∧{¯1↓0,⍵}digits)/v)←⊂'¯'
((' '=v)/v)←','
(('-'=v)/v)←⊂' to '
:Trap 0
:For c :In {⎕ML←3 ⋄ ⍵⊂⍨⍵≠','}∊v
r,←⍎∊c
:EndFor
:Else
⎕SIGNAL 11
:EndTrap
∇
:Endclass
:endsection
:section Utilities
disperror←{326=⎕DR ⍵: ⋄ '***'≡3↑⍵:⎕←⍵}
isWin←'Win'≡3↑1⊃#.⎕WG'APLVersion'
fileSep←'/\'[1+isWin]
isRelPath←{{~'/\'∊⍨(⎕IO+2×isWin∧':'∊⍵)⊃⍵}3↑⍵}
MSRoot←{('.'=⊃⍵)∨isRelPath ⍵:'.',fileSep,⍵ ⋄ ⍵}{(1-⌊/'/\'⍳⍨⌽⍵)↓⍵}⎕WSID
tonum←{⍺←0
1∊⍺:tonumvec ⍵
w←⍵ ⋄ ((w='-')/w)←'¯'
⊃⊃{~∧/⍺:⎕SIGNAL 11 ⋄ ⍵}/⎕VFI w}
try←{0::'' ⋄⍎⍵}
empty←{0∊⍴⍵}
notEmpty←~∘empty
eis←{(,∘⊂)⍣((326∊⎕DR ⍵)<2>|≡⍵),⍵} ⍝ Enclose if simple
isRef←{(0∊⍴⍴⍵)∧326=⎕DR ⍵}
folderize←{{11 19 22::⍵,'/'↓⍨'/\'∊⍨¯1↑⍵ ⋄ ∊1 ⎕NPARTS⊃{⍺,(('/'=¯1↑⍺)<⍵=1)/'/'}/0 1 ⎕NINFO ⍵}∊⍕⍵} ⍝ append trailing file separator unless empty and left arg←1
makeSitePath←{folderize ⍺{((isRelPath ⍵)/⍺),⍵},(2×'./'≡2↑⍵)↓⍵}
subdirs←{⊃{(⍵=1)/⍺}/0 1(⎕NINFO⍠1)⍵,'/*'}
Log←{⎕←⍵}
∇ {r}←AutoStatus setting
⍝ Set Dyalog/Windows AutoStatus setting
:If r←isWin
:Trap 0
:If setting≠r←⎕SE.mb.tools.status_error.Checked
1 ⎕NQ ⎕SE.mb.tools.status_error'Select'
:EndIf
:EndTrap
:EndIf
∇
∇ r←tonumvec v;to;minus;digits;c;mask
⍝ tonum vector version
⍝ allows for specific of ranges and comma or space delimited numbers
⍝ tonumvec '8080-8090'  or '5,7-9,11-15'
r←⍬
⎕SIGNAL 11/⍨~∧/v∊⎕D,'., -¯'
to←{⍺←⍵ ⋄ ⍺,⍺+(¯1*⍺>⍵)×⍳|⍺-⍵}
v←('^\s*|\s*$'⎕R'')('\s+'⎕R' ')('\s*-\s*'⎕R'-')v
minus←'-'=v
digits←v∊⎕D,'.'
((minus>(minus∨{1↓⍵,0}digits)∧{¯1↓0,⍵}digits)/v)←⊂'¯'
((' '=v)/v)←','
(('-'=v)/v)←⊂' to '
:Trap 0
:For c :In {⎕ML←3 ⋄ ⍵⊂⍨⍵≠','}∊v
r,←⍎∊c
:EndFor
:Else
⎕SIGNAL 11
:EndTrap
∇
∇ r←SubstPath r
r←(#.Strings.subst∘('%ServerRoot%'(¯1↓MSRoot)))r
r←(#.Strings.subst∘('%SiteRoot%'(¯1↓AppRoot)))r
r←(#.Strings.subst∘('%DyalogRoot%'(¯1↓DyalogRoot)))r
∇
∇ r←isRunning
:Trap r←0
r←ms.TID∊⎕TNUMS
:EndTrap
∇
∇ r←Oops;dmx;ends;xsi
⍝ debugging framework to bubble up to user's code when rendering fails
r←'⎕SIGNAL 811'
ends←{(,⍺)≡(-⍴,⍺)↑⍵}
:If {0::0 ⋄ #.HtmlPage∊∊⎕CLASS ⍵}⊃⊃⎕RSI
r←'⎕TRAP←(800 ''C'' ''→FAIL'')(811 ''E'' ''⎕SIGNAL 801'')(813 ''E'' ''⎕SIGNAL 803'')(812 ''S'')(85 ''N'')(0 ''S'')'
⎕←''
⎕←'*** MiServer Debug ***'
⎕←↑⎕DMX.DM
⎕←''
⎕←'      ⎕SIGNAL 800 ⍝ to ignore this error and carry on'
⎕←'      or Press Ctrl-Enter to invoke debugger'
:Else
:Select ⎕DMX.EN
:Case 801
xsi←⎕XSI
:If '.HandleMSP'ends 2⊃xsi
r←'→FAIL'
:ElseIf '.HandleMSP'ends 4⊃xsi
:If '.Render'ends 3⊃xsi
r←'⎕SIGNAL 813'
:EndIf
:ElseIf '.HandleMSP'ends 3⊃xsi
:If '.Wrap'ends 2⊃xsi
r←'⎕SIGNAL 813'
:EndIf
:Else
r←'⎕SIGNAL 811'
:EndIf
:Case 803
r←'⎕SIGNAL 812'
⎕←'Press Ctrl-Enter to invoke debugger'
:Else
:Trap 0
dmx←⎕DMX
⎕←'*** MiServer Debug ***'
⎕←'' 'occurred at:',⍪dmx.(EM(2⊃DM))
⎕←'' 'SI Stack is ',(⍕¯1+⍴⎕XSI),' levels deep'
⎕←''
:EndTrap
⎕←'      ⎕SIGNAL 800 ⍝ to ignore this error and carry on'
⎕←'      ⎕SIGNAL 801 ⍝ to cut back and debug'
r←''
:EndSelect
:EndIf
∇
:endsection
:EndNamespace
﻿:Class HTTPRequest
(⎕IO ⎕ML)←1 1
(CR LF)←NL←⎕UCS 13 10
⍝ Common Status Codes
SC←(200 'OK')(201 'Created')(204 'No Content')(301 'Moved Permanently')(302 'Found')(303 'See Other')(304 'Not Modified')(305 'Use Proxy')(307 'Temporary Redirect')
SC,←(400 'Bad Request')(401 'Unauthorized')(403 'Forbidden')(404 'Not Found')(405 'Method Not Allowed')(406 'Not Acceptable')(408 'Request Timeout')(409 'Conflict')
SC,←(410 'Gone')(411 'Length Required')(412 'Precondition Failed')(413 'Request Entity Too Large')(414 'Request-URI Too Long')(415 'Unsupported Media Type')
SC,←(500 'Internal Server Error')(501 'Not Implemented')(503 'Service Unavailable')
SC←↑SC
⍝ Shared Fields
:Field Public Shared DecodeBuffers←1     ⍝ have Conga decode HTTP message buffers by default (MiServer sets this on initialization)
:Field Public Shared Server              ⍝ reference back to the server
⍝ Fields related to the Request
:Field Public Instance Complete←0        ⍝ do we have a complete request?
:Field Public Instance URI←''            ⍝ the complete URI (page + query string)
:Field Public Instance Headers←0 2⍴⊂''   ⍝ HTTPRequest header fields (plus any supplied from HTTPTrailer event)
:Field Public Instance Method←''         ⍝ HTTP method (GET, POST, PUT, etc)
:Field Public Instance Page←''           ⍝ Requested URI
:Field Public Instance Body←''           ⍝ body of the request
:Field Public Instance Host←''           ⍝ host header field
:Field Public Instance Filename←''       ⍝ upload file name
:Field Public Instance RESTfulReq←0      ⍝ RESTful Request (set to charvec if request is RESTful)
:Field Public Instance Arguments←0 2⍴⊂'' ⍝ arguments provided in the URI
:Field Public Instance PeerAddr←''       ⍝ client IP address
:Field Public Instance PeerCert←0 0⍴⊂''  ⍝ client certificate
:Field Public Instance Data←0 2⍴⊂''      ⍝ form data
:Field Public Instance HTTPVersion←''
:Field Public Instance Cookies←0 2⍴⊂''
:Field Public Instance Session←''
:Field Public Instance CloseConnection←0
⍝ Fields related to the Response
:Field Public Instance Response
GetFromTableCS←{{0∊⍴⍵:'' ⋄ 1=⍴⍵:⊃⍵ ⋄ ⍵}⍵[;2]/⍨⍵[;1]∊⊂⍺} ⍝ Case Sensitive
GetFromTable←{(#.Strings.lc ⍺)GetFromTableCS ⍵}
GetFromTableDefault←{⍺←'' ⋄ ⍺{0∊⍴⍵:⍺ ⋄ ⍵}⍵ GetFromTable ⍺⍺} ⍝ default_value (table ∇) value
ine←{0∊⍴⍺:'' ⋄ ⍵} ⍝ if not empty
inf←{∨/⍵⍷⍺:'' ⋄ ⍵} ⍝ if not found
begins←{⍺≡(⍴⍺)↑⍵}
split←{p←(⍺⍷⍵)⍳1 ⋄ ((p-≢⍺)↑⍵)(p↓⍵)} ⍝ Split ⍵ on first occurrence of ⍺
∇ r←eis w
:Access public shared
r←{(,∘⊂)⍣((326∊⎕DR ⍵)<2>|≡⍵),⍵}w ⍝ Enclose if simple
∇
∇ Make args;query;cookies
:Access Public Instance
:Implements Constructor
⍝ args is either:
⍝   [1] HTTP method [2] URI [3] HTTP version [4] 2-column headers
⍝   character vector if Conga could not parse the HTTP header or if DecodeBuffers is turned off
args←eis args
:If 1=≢args ⍝ single arg means Conga did not or could not decode
:Trap 999
:If DecodeBuffers  ⍝ this is a header that Conga failed to parse
1 Server.Log'Bad HTTP header received:',⊃args       ⍝ may want to improve this if bad header is very long
:EndIf
(Method URI HTTPVersion Headers)←ParseHead⊃args
:Else
1 Fail 400
→0
:EndTrap
:Else
(Method URI HTTPVersion Headers)←args
:EndIf
Headers[;1]←#.Strings.lc Headers[;1]  ⍝ header names are case insensitive
Headers←CombineHeaders Headers ⍝ combine any multiple header entries
Method←#.Strings.lc Method
Response←⎕NS''
Response.(Status StatusText Headers File HTML HTMLHead PeerAddr NoWrap Bytes MSec)←200 'OK'(0 2⍴⊂'')0 '' '' '' 0(0 0)(⎕AI[3])
Host←GetHeader'host'
Page query←'?'split URI
Page←PercentDecode Page
:If '/'≠⊃Page  ⍝!!! need to update this to deal with absolute URI's, see https://tools.ietf.org/html/rfc7230#section-5.3.2
1 Fail 400
→0
:EndIf
Arguments←URLDecodeArgs query
:If ~0∊⍴cookies←GetHeader'cookie'
cookies←CookieSplit cookies
:If ~0∊⍴cookies←(2=⊃∘⍴¨cookies)/cookies
Cookies←↑{(' '~⍨1⊃⍵)(2⊃⍵)}¨cookies
:EndIf
:EndIf
:If 'get'≡Method
:OrIf ∧/0∘∊∘⍴¨GetHeader¨'content-length' 'transfer-encoding'
FinalizeRequest
:EndIf
∇
∇ (method uri version headers)←ParseHead head;start;ind;header;t
⍝ manually parse HTTP head
(start header)←1(↑{⍺ ⍵}↓)(⊂'')~⍨{2↓¨⍵⊂⍨NL⍷⍵}NL,head ⍝ split start line from headers
⎕SIGNAL 999/⍨3≠≢t←start⊆⍨' '≠start←∊start ⍝ start line should be method uri httpversion
(method uri version)←t
⎕SIGNAL 999/⍨~∧/':'∊¨header ⍝ a valid header must have a ':'
headers←↑{dltb¨':'split ⍵}¨header
∇
∇ ProcessBody args
:Access public
Body←args
FinalizeRequest
∇
∇ ProcessChunk args;len;chunk
:Access public
⍝ args is either
⍝    [1] chunk content [2] chunk-extension name/value pairs (which we don't expect and won't process)
⍝ or a character vector if either DecodeBuffers=0 or Conga failed to parse the chunk
:If DecodeBuffers=1=≡,args  ⍝ if we're Decoding buffers, we expect a nested arg, if not, we expect a simple vector
1 Fail 400
→0
:EndIf
:If DecodeBuffers
Body,←1⊃args
:Else
:Trap 0
(len chunk)←NL split args
Body,←(hex len)↑chunk
:Else
1 Fail 400
:EndTrap
:EndIf
∇
∇ ProcessTrailer args;inds;mask;len;trailer;forbidden
:Access public
⍝ args is either
⍝    2-column matrix of
⍝ or a character vector if either DecodeBuffers=0 or Conga failed to parse the chunk
:If 1=≢⍴args
(len trailer)←NL split args
:If len≢,'0'
1 Fail 400
→0
:EndIf
args←0 2⍴⊂''
:If ~0∊⍴trailer
args←↑{dltb¨':'split ⍵}¨(⊂'')~⍨{2↓¨⍵⊂⍨NL⍷⍵}NL,trailer
:EndIf
:EndIf
:If ~0∊⍴args
args[;1]←#.Strings.lc args[;1]
⍝ The following is an attempt to comply with https://tools.ietf.org/html/rfc7230#section-4.1.2
⍝ However, there doesn't seem to be a definitive list of the forbidden trailer fields, so, we do our best...
forbidden←'age' 'authorization' 'cache-control' 'content-encoding' 'content-length' 'content-range' 'content-type' 'date' 'expect' 'expires' 'host' 'location' 'max-forwards' 'pragma' 'proxy-authenticate' 'proxy-authorization' 'range' 'retry-after' 'set-cookie' 'te' 'trailer' 'transfer-encoding' 'vary' 'warning' 'www-authenticate'
args⌿←~args[;1]∊forbidden
mask←(≢Headers)≥inds←Headers[;1]⍳args[;1]
Headers[mask/inds;2]←mask/args[;2]
Headers⍪←(~mask)⌿args
:EndIf
FinalizeRequest
∇
∇ FinalizeRequest;contentType;boundary;mask;new;s
:If ~0∊⍴contentType←GetHeader'content-type'
:AndIf 'multipart/form-data'begins contentType
boundary←'--',(8+('boundary='⍷contentType)⍳1)↓contentType ⍝ boundary string
Data←↑DecodeMultiPart¨¯1↓boundary{(⍴⍺)↓¨(⍺⍷⍵)⊂⍵}Body ⍝ ¯1↓ because last boundary has '--' appended
:ElseIf 'application/x-www-form-urlencoded'begins contentType
Data←URLDecodeArgs Body
:EndIf
:If ∨/mask←Data[;1]#.Strings.beginsWith¨⊂'_serialized_' ⍝ do we have any serialized form data from AJAX?
new←0 2⍴⊂''
:For s :In mask/Data[;2]
new⍪←URLDecodeArgs s
:EndFor
Data←((~(⊃⍴Data)↑mask)⌿Data)⍪new
Data←{0 1∊⍨⊃⍴⍵:⊃⍵ ⋄ ⍵}¨⊃{⍺ ⍵}⌸/↓[1]Data
:EndIf
:If ∨/mask←Data[;1]#.Strings.beginsWith¨⊂'_json_' ⍝ do we have any Syncfusion model data?
:For s :In mask/⍳⍴mask
Data[s;1]↓⍨←6
Data[s;2]←eis #.JSON.toAPL⊃Data[s;2]
:EndFor
:EndIf
Complete←1
CloseConnection←'close'≡GetHeader'connection'
∇
∇ headers←CombineHeaders headers;inds;hdrs;hdr;i
:Access public shared
⍝ combines any headers that may occur more than once
:If ~0∊⍴inds←⍸1<≢¨2⌷[2]hdrs←{⍺ ⍵}⌸headers[;1]
:For (hdr i) :In ↓hdrs[inds;]
headers[⊃i;2]←⊂¯1↓∊headers[i;2],¨',;'[1+'cookie'≡∊hdr]
:EndFor
headers←headers[⊃¨hdrs[;2];]
:EndIf
∇
∇ Wipe
:Access public
⍝ clear out all request data
URI←''
Headers←''
Method←''
Page←''
Filename←''
RESTfulReq←0
Arguments←''
PeerAddr←''
PeerCert←⍬
Data←⍬
Cookies←''
Session←''
Response←⎕NS''
∇
:Section Argument and Data Handling
∇ r←PercentDecode r;rgx;rgxu;i;j;z;t;m;⎕IO;lens;fill
:Access public shared
⍝ Decode a Percent Encoded string https://en.wikipedia.org/wiki/Percent-encoding
⎕IO←0
((r='+')/r)←' '
rgx←'[0-9a-fA-F]'
rgxu←'%[uU]',(4×⍴rgx)⍴rgx ⍝ 4 characters
r←(rgxu ⎕R{{⎕UCS 16⊥⍉16|'0123456789ABCDEF0123456789abcdef'⍳⍵}2↓⍵.Match})r
:If 0≠⍴i←(r='%')/⍳⍴r
:AndIf 0≠⍴i←(i≤¯2+⍴r)/i
z←r[j←i∘.+1 2]
t←'UTF-8'⎕UCS 16⊥⍉16|'0123456789ABCDEF0123456789abcdef'⍳z
lens←⊃∘⍴¨'UTF-8'∘⎕UCS¨t  ⍝ UTF-8 is variable length encoding
fill←i[¯1↓+\0,lens]
r[fill]←t
m←(⍴r)⍴1 ⋄ m[(,j),i~fill]←0
r←m/r
:EndIf
∇
∇ r←GetArgument name
:Access Public Instance
r←name GetFromTable Arguments
∇
∇ r←GetData name
:Access Public Instance
r←name GetFromTableCS Data
∇
∇ r←GetHeader name
:Access Public Instance
r←(#.Strings.lc name)GetFromTable Headers
∇
∇ r←{cs}URLDecodeArgs args
:Access Public Shared
⍝ Decode arguments passed in the URI
cs←{6::⍵ ⋄ cs}1 ⍝ default to case sensitive
r←(args∨.≠' ')⌿↑'='∘split¨{1↓¨(⍵='&')⊂⍵}'&',args ⍝ Cut on '&'
r[;1]←{⍵↓⍨¯6×'%5B%5D'≡¯6↑⍵}¨r[;1] ⍝ remove [] from array args
r[;2]←PercentDecode¨r[;2]
:If ~cs ⋄ r[;1]←#.Strings.lc¨r[;1] ⋄ :EndIf
r⌿⍨←0<≢¨r[;1]
∇
∇ r←URLEncode data;⎕IO;z;ok;nul;m
:Access Public Shared
nul←⎕UCS ⎕IO←0
ok←nul,∊⎕UCS¨(⎕UCS'aA0')+⍳¨26 26 10
z←⎕UCS'UTF-8'⎕UCS∊nul,¨,data
:If ∨/m←~z∊ok
(m/z)←↓'%',(⎕D,⎕A)[⍉16 16⊤⎕UCS m/z]
data←(⍴data)⍴1↓¨{(⍵=nul)⊂⍵}∊z
:EndIf
r←¯1↓∊data,¨(⍴data)⍴'=&'
∇
∇ r←DecodeHeader buf;len;d;i
⍝ Decode HTML Header
:Access public shared
len←(¯1+⍴NL,NL)+⊃{((NL,NL)⍷⍵)/⍳⍴⍵}buf
:If len>0
d←(⍴NL)↓¨{(NL⍷⍵)⊂⍵}NL,len↑buf
d←↑{((p-1)↑⍵)({(' '=1↑⍵)↓⍵}(p←⍵⍳':')↓⍵)}¨d
d[i;1]←#.Strings.lc¨d[i←1↓⍳1↑⍴d;1]
:Else
d←⍬
:EndIf
r←len d
∇
∇ r←DecodeMultiPart data;ind;hdr;d;name;filename;i;upload
hdr←data↑⍨ind←1+1⍳⍨(NL,NL)⍷data
d←#.Strings.dlb'Content-Disposition:'GetParam hdr
name←filename←''
:If (⍴d)≥i←5+('name="'⍷d)⍳1
name←(¯1+name⍳'"')↑name←i↓d
:EndIf
:If upload←(⍴d)≥i←9+('filename="'⍷d)⍳1
filename←(¯1+filename⍳'"')↑filename←i↓d
:EndIf
data←(2+ind)↓data ⍝ Drop up to 1st doubleCR
data←(¯1+¯1↑{⍵/⍳⍴⍵}NL⍷data)↑data ⍝ Drop from last CR
:If upload>0∊⍴filename
r←name(filename data)
:Else
r←name('UTF-8'⎕UCS ⎕UCS data)
:EndIf
∇
∇ r←header GetValue(name type);i;h
⍝ Extract value from HTTP Header structure returned by DecodeHeader
:If (1↑⍴header)<i←header[;1]⍳⊂lc name
r←⍬ ⍝ Not found
:Else
r←⊃header[i;2]
:If 'Numeric'≡type
r←1⊃2⊃⎕VFI r
:EndIf
:EndIf
∇
∇ r←name GetParam HTTP;i;z;find
find←{⊃(⍺⍷⍵)/⍳⍴⍵}
r←''
:If 0<i←name find HTTP
:AndIf 0<i←NL find z←(¯1+i+⍴name)↓HTTP
r←(i-1)↑z
:EndIf
∇
:endsection
:section Cookie Functions
∇ DelCookie ctl;name;path
:Access Public Instance ⍝ Delete a cookie
ctl←eis ctl
name path←ctl,(⍴ctl)↓'CookieName' '/'
SetCookie name''path ¯30 ⍝ Expiry 30 days ago
∇
∇ r←GetCookie name
:Access Public Instance
r←name GetFromTableCS Cookies ⍝ cookie names are case sensitive
∇
∇ SetCookie ctl;name;value;path;date;z;keep;other
:Access Public Instance ⍝ Set a Cookie
⍝  ctl [1] cookie name, [2] value, [3] path that cookie applies to,
⍝      [4] expires - can be a single number of days to offset from today
⍝                    a character vector of a properly formatted timestamp (see #.Dates.CookieFmt)
⍝                    an integer vector of 3-6 elements in ⎕TS format
⍝      [5] a character vector of any other cookie parameters - e.g. HttpOnly
ctl←eis ctl
name value path keep other←ctl,(⍴ctl)↓'CookieName' 'CookieValue' '/' 30 ''
:If ~0∊⍴date←keep
:If 2|⎕DR keep
:If 1=⍴,keep
date←#.Dates.IDNToDate keep+#.Dates.DateToIDN ⎕TS ⍝ keep is # of days cookie should be valid
:EndIf
date←#.Dates.CookieFmt 6↑date
:EndIf
:EndIf
z←name,'=',(⍕value),(path ine'; Path=',path),(date ine'; Expires=',date),other ine('; '≡2↑other)↓'; ',other
Response.Headers⍪←'Set-Cookie'z
∇
:endsection
:section Request/Response Content Handling
∇ r←HttpStatus code
:Access public shared
r←code((SC[;1]⍳code)⊃SC[;2],⊂'')
∇
∇ {flag}Fail x;i;root;f;t;gotFile
:Access Public Instance
:If 0=⎕NC'flag' ⋄ flag←0 ⋄ :EndIf
:If 3=10|⎕DR x ⍝ Just a status code
Response.Status←x
:If (1↑⍴SC[;1])≥i←SC[;1]⍳x
Response.StatusText←⊃SC[i;2] ⍝ Default text
:EndIf
:Else
Response.(Status StatusText)←x
:EndIf
:If flag<0≡RESTfulReq
:For root :In Server.Config.(Root MSRoot) ⍝ try site root, then server root
:If gotFile←#.Files.Exists f←root,'CommonPages/',(⍕x),'.htm'
:If ~0∊⍴(⎕UCS 13 10)~⍨t←#.Files.ReadText f
Response.HTML,⍨←t,'<br/>'
Response.Headers⍪←'content-type' 'text/html; charset=utf-8'
:EndIf
:Leave
:EndIf
:EndFor
:If ~gotFile
Response.HTML,⍨←'Request for "',URI,'" Failed: ',⍕Response.(Status StatusText)
Response.Headers⍪←'content-type' 'text/html; charset=utf-8'
:EndIf
:EndIf
Complete←CloseConnection←1
∇
∇ {code}Redirect location
:Access public
:If 0=⎕NC'code' ⋄ code←301 ⋄ :EndIf ⍝ default to permanent redirection
Response.(Status StatusText)←code((SC[;1]⍳code)⊃SC[;2],⊂'')
'Location'SetHeader location
∇
∇ r←isDesktop;cis;desktop;mobile;bot;user_agent ⍝ Detect if we think this is a desktop platform
⍝ Rationale: mobile device detection is a messy subject, therefore it's easier and perhaps safer to detect
⍝            desktop platforms (or bots) and assume that anything else is a mobile platform
:Access public instance
cis←{~0∊⍴(⍺ ⎕S 0 ⎕OPT'IC' 1)⍵} ⍝ Case Insensitive Search
r←0
⍝ Some mobile browsers which look like desktop browsers.
mobile←'(iphone|ipod|ipad|blackberry|android|palm|windows\s+ce)'
desktop←'(windows|linux|os\s+[x9]|solaris|bsd)'
bot←'(spider|crawl|slurp|bot)'
→0⍴⍨0∊⍴user_agent←GetUserAgent
→0⍴⍨mobile cis user_agent ⍝ Anything that looks like a phone isn't a desktop.
→0⍴⍨r←desktop cis user_agent ⍝ Anything that looks like a desktop probably is.
r←bot cis user_agent ⍝ Anything that looks like a bot should default to desktop.
∇
∇ r←GetUserAgent
:Access public instance
⍝ Some mobile browsers put the User-Agent in a HTTP-X header
→0↓⍨0∊⍴r←GetHeader'X-OPERAMINI-PHONE-UA'
→0↓⍨0∊⍴r←GetHeader'X-SKYFIRE-PHONE'
r←GetHeader'USER-AGENT'
∇
∇ r←isAPLJax
:Access public instance
r←'true'≡GetHeader'isAPLJax'
∇
∇ r←isPost
:Access public instance
r←Method≡'post'
∇
∇ r←isGet
:Access public instance
r←Method≡'get'
∇
∇ r←JSPlugIn file;root ⍝ Retrieve a JavaScript PlugIn
:Access Public Instance
root←{(1-⌊/'/\'⍳⍨⌽⍵)↓⍵}⎕WSID
r←#.Files.ReadText root,'PlugIns\',file
∇
∇ Meta attrs ⍝ add a meta tag to the head element
:Access public instance
Response.HTMLHead,←'<meta ',attrs,' />'
∇
∇ {hdrs}Return x;type
:Access Public Instance
:If 2=⍴⍴x ⋄ :AndIf 2=¯1↑⍴x ⋄ x←URLEncode x ⋄ type←'text/plain' ⍝ 2-column matrix is name/value pairs
:Else ⋄ type←'text/html'
:EndIf
Response.HTML←∊x
:If 2=⎕NC'hdrs'
Response.Headers⍪←hdrs
:ElseIf ~∨/Response.Headers[;1](≡#.Strings.nocase)¨⊂'content-type'
Response.Headers⍪←'content-type'(type,'; charset=utf-8') ⍝ set content-type if not already set
:EndIf
∇
∇ {hdrs}ReturnFile filename
⍝ Queues a file to be returned to client
⍝ filename - physical name of the file
⍝ {hdrs}   - optional 2-column header name/value pairs
⍝ if hdrs is not supplied, we attempt to set the content type of file response based on the file extension
:Access Public Instance
:If #.Files.Exists filename
Response.(HTML File)←filename 1
:If 2=⎕NC'hdrs'
Response.Headers⍪←hdrs
:Else
SetContentType filename
:EndIf
:Else
Fail 404  ⍝ file not found
:EndIf
∇
∇ SetContentType x;ct
:Access public instance
⍝ Sets response content-type header
⍝ x is either a file name or extension (if it contains a period), in which case we attempt to look up the appropriate content-type
⍝      or the actual setting for content-type
:If '.'∊x ⍝ contains file extension?
ct←'application/binary'(Server.Config.ContentTypes GetFromTableDefault)#.Strings.lc{(1-(⌽⍵)⍳'.')↑⍵}x ⍝ attempt to look it up
:Else
ct←x
:EndIf
'content-type'SetHeader ct
∇
∇ {hdr}SetHeaderIfNotSet value;val;mask
:Access public instance
⍝ accepts value in forms
⍝ ('hdr1' 'val1')[('hdr2' 'val2')]
⍝ 'hdr1:val1' ['hdr2:val2']
⍝ 'hdr1' 'val1' ['hdr2' 'val2']
:If 0=⎕NC'hdr'
:If 3≡|≡value ⍝ pairs of strings
val←↑value
:ElseIf 2≡|≡value
:If ∧/':'∊¨value
val←↑':'split¨value
:Else
val←((0.5×⍴value),2)⍴value
:EndIf
:Else
val←1 2⍴':'split value
:EndIf
:Else
(hdr value)←eis¨hdr value
val←hdr,⍪value
:EndIf
:If ∨/mask←~hdr(∊#.Strings.nocase)Response.Headers[;1]
Response.Headers⍪←mask⌿val
:EndIf
∇
∇ {hdr}SetHeader value;val;mask
:Access public instance
⍝ accepts value in forms
⍝ ('hdr1' 'val1')[('hdr2' 'val2')]
⍝ 'hdr1:val1' ['hdr2:val2']
⍝ 'hdr1' 'val1' ['hdr2' 'val2']
:If 0=⎕NC'hdr'
:If 3≡|≡value ⍝ pairs of strings
val←↑value
:ElseIf 2≡|≡value
:If ∧/':'∊¨value
val←↑':'split¨value
:Else
val←((0.5×⍴value),2)⍴value
:EndIf
:Else
val←1 2⍴':'split value
:EndIf
:Else
(hdr value)←eis¨hdr value
val←hdr,⍪value
:EndIf
Response.Headers⍪←val
∇
∇ {tags}Script x
:Access Public Instance
:If 0=⎕NC'tags' ⋄ tags←'type="text/javascript"'
:ElseIf ~∨/'type='⍷tags ⋄ tags,←' type="text/javascript"'
:EndIf
Response.HTMLHead,←Response.HTMLHead inf'<script ',tags,'>',(x ine NL,x),'</script>',NL
∇
∇ {style}Style file ⍝ insert a style into head element
:Access Public Instance
:If 0=⎕NC'style'
:If ~0∊⍴file
Response.HTMLHead,←Response.HTMLHead inf'<link href="',file,'" rel="stylesheet" type="text/css" />',NL
:EndIf
:Else
:If 1<|≡style ⋄ style←NL,∊(,∘NL)¨style ⋄ :EndIf
Response.HTMLHead,←Response.HTMLHead inf'<style type="text/css">',style,'</style>',NL
:EndIf
∇
∇ Title x
:Access Public Instance
Response.HTMLHead,←'<title>',x,'</title>',NL
∇
∇ Use x;n;ind
:Access public instance
:If 0≠⎕NC⊂'Server.Config.Resources'
:AndIf ~0∊n←1↑⍴Server.Config.Resources
:If n≥ind←Server.Config.Resources[;1]⍳⊂x
(Script∘'')¨{'src="',⍵,'"'}¨{(⊃⍣(2<≡⍵))⍵}(⊂ind 2)⊃Server.Config.Resources
Style¨{(⊃⍣(2<≡⍵))⍵}(⊂ind 3)⊃Server.Config.Resources
:Else
1 Server.Log Page,' references unknown resource: ',x
:EndIf
:EndIf
∇
:endsection
dltb←{                      ⍝ delete leading/trailing blanks
(⌽∘{⍵/⍨∨\⍵≠' '}⍣2)⍵
}
∇ r←CookieSplit w
:Access public shared
r←{                       ⍝ Split cookies
{dltb¨'='split ⍵}¨⍵⊆⍨⍵≠';'
}w
∇
∇ r←hex w;i;⎕IO
:Access public shared
⎕IO←0
⎕SIGNAL 11/⍨31∨.<i←'0123456789ABCDEF0123456789abcdef'⍳w
r←16⊥16|i
∇
∇ Show
:Access public
↑{⍵(⍎⍵)}¨'URI' 'Method' 'Page' 'Headers' 'Arguments' 'Data' 'Cookies'
∇
:EndClass
﻿:class HtmlElement             ⍝ this is the most basic element of a page
⍝∇:require =\JSON.dyalog
⎕io←⎕ml←1
:field public shared _version←1
:field public NL←⎕ucs 13 ⍝ 10
:field public Tag←''      ⍝ this is the element name
:field public Content←⍬   ⍝ content of the element - a series of strings/instances/class+parms
:field public Handlers←'' ⍝ array of event handlers
:field public _PageRef←'' ⍝ reference back to the page instance containing this element
:field public NoEndTag←0  ⍝ set to 1 if this singleton element (does not have a closing tag)
:field public Position    ⍝ has position information for this element (if position is set)
:field public Uses←''     ⍝ resources that will be used by this object (can be overridden by derived classes)
:field public shared readonly _true←#.JSON.true     ⍝ same definition as in #.JSON
:field public shared readonly _false←#.JSON.false   ⍝ same definition as in #.JSON
⍝ define shortcuts to namespaces (initialized later)
:field public shared _html ⍝ reference to base HTML elements namespace
:field public shared _JQ   ⍝ reference to JQuery/JQueryUI widgets namespace
:field public shared _SF   ⍝ reference to Syncfusion widgets namespace
:field public shared _JSS  ⍝ reference to JavaScript Snippets namespace
:field public shared _DC   ⍝ reference to Dyalog Controls namespace
:field public shared _     ⍝ reference to namespace that refers to all elements/widgets
⍝ make shortcuts for some common HTML attributes
:field public shared readonly UNDEF←⎕NULL  ⍝ setting for undefined attributes
:field public id←UNDEF                     ⍝ id attribute for the element
:field public value←UNDEF                  ⍝ value attribute for the element
:field public name←UNDEF                   ⍝ name attribute for the element
:field public class←UNDEF                  ⍝ class attribute for the element
:field public style←UNDEF                  ⍝ style attribute for the element
:field public title←UNDEF                  ⍝ title attribute for the element
:field public type←UNDEF                   ⍝ type attribute for the element
:field public readonly CommonAttributes←'id' 'value' 'name' 'class' 'style' 'title' 'type' ⍝ element attributes that are directly accessible
_names←_values←0⍴⊂'' ⍝ used for attributes
:field public _styles←''
rand←{?⍵⊣⎕RL←0}
∇ r←Version
:Access public
r←{⍵,[1.1]{0::¯1 ⋄ ⍵._version}¨⍵}⎕CLASS ⎕THIS
∇
∇ r←context name
:Access public shared
:If 326=⎕DR name ⍝ ref?
r←⎕RSI{0∊⍴⍺:'' ⋄ 16::''
∨/∨/¨(⊂⍵)∊¨(⊃⍺).(⎕CLASS ⎕THIS):⊃⍺
(1↓⍺)∇ ⍵}name
:Else
r←⎕RSI{0∊⍴⍺:''
⋄ (⊃⍺){0=⍺.⎕NC⊂⍵:0
⋄ ''≡t←⍺⍎⍵:0
⋄ 1}⍵:⊃⍺
⋄ (1↓⍺)∇ ⍵}name
:EndIf
∇
∇ r←isChar w
:Access public shared
r←0 2∊⍨10|⎕DR w
∇
∇ r←isNum w
:Access public shared
r←2|⎕DR w
∇
∇ r←isString w
:Access public shared
:Select ≡w
:Case 2
:If 1=⍴,w
r←{(isChar ⍵)∧1∊⍴⍴1/⍵}⊃w
:Else
r←0
:EndIf
:CaseList 0 1
r←{(isChar ⍵)∧1∊⍴⍴1/⍵}w
:Else
r←0
:EndSelect
∇
∇ r←quote w
:Access public
r←{'"'∊⍵:⍵ ⋄ '"',⍵,'"'}w
∇
∇ r←isTrue a
:Access public shared
→0⍴⍨r←(,1)≡,a       ⍝ boolean
→0⍴⍨r←#.JSON.true≡a ⍝ namespace
→0⍴⍨r←'true'≡a      ⍝ string
→0⍴⍨r←a≡⊂'true'     ⍝ 7161⌶1
∇
∇ r←isFalse a
:Access public shared
→0⍴⍨r←(,0)≡,a        ⍝ boolean
→0⍴⍨r←#.JSON.false≡a ⍝ namespace
→0⍴⍨r←'false'≡a      ⍝ string
→0⍴⍨r←a≡⊂'false'     ⍝ 7161⌶0
∇
∇ r←a ine w
:Access public shared
r←a{0∊⍴⍺:'' ⋄ ⍵}w ⍝ if not empty
∇
errorIf←{⍺←⊢ ⋄ 0≠⍵:⍺ ⎕SIGNAL ⍵}
:section Attribute Handling
∇ r←fixkeys w
:Access public shared
r←{2>|≡⍵:,⊂⍵ ⋄ ⍵}w ⍝ Enclose if simple
∇
∇ SyncAttrs arg
:Implements Trigger id,name,class,style,title,type,value
:If ⊃≢/arg.(NewValue OldValue)
arg.Name Set arg.NewValue~UNDEF
:EndIf
∇
:property keyed Attrs       ⍝ element attributes
:access public
∇ set ra;i;new;there;names;ind;uniq;mask;combine;first;keep;styles
names←,#.Strings.lc¨fixkeys⊃ra.Indexers
mask←'class' 'style'∘.≡names ⍝ special case style and class (attributes that can be combined)
:If ∨/styles←mask[2;] ⍝ any style's?
(styles/ra.NewValue)←{⍵,';'~⊢/⍵}¨styles/ra.NewValue
:EndIf
:If ∨/combine←1<+/mask
first←<\mask
:If combine[1]
ra.NewValue[⍸first[1;]]←⊂1↓∊' ',¨mask[1;]/ra.NewValue
:EndIf
:If combine[2]
ra.NewValue[⍸first[2;]]←⊂∊styles/ra.NewValue
:EndIf
keep←(∨⌿first)≥∨⌿mask
(names ra.NewValue)←keep∘/¨names ra.NewValue
:EndIf
uniq←⌽(1+≢names)-∪⍳⍨⌽names
:If (≢names)≠≢uniq
ra.NewValue←ra.NewValue[uniq]
names←names[uniq]
:EndIf
there←~new←(⍴_names)<i←_names⍳names
(_values _names),←new∘/¨ra.NewValue names
_values[there/i]←there/ra.NewValue
:For i :In {⍵/⍳⍴⍵}7≥'id' 'class' 'style' 'title' 'value' 'type' 'name'⍳names
⍎(i⊃names),'←i⊃ra.NewValue'
:EndFor
∇
∇ r←get ra;i;n
⎕SIGNAL(1<⍴i←ra.Indexers)⍴4 ⍝ RANK err
:If 1↑ra.IndexersSpecified
r←(_values,⊂'')[_names⍳n←fixkeys(⊃⍣(2≤|≡i))i]
:Else
r←↓_names,[1.1]_values
:EndIf
∇
:endproperty
∇ attr←{plain}ParseAttr arg;split;item;t;f;i;eq;nq;items;n;ind;inds;firstToken;token;name;value;q;p;mask;space
:Access public shared
⍝ Parse html sttributes
⍝ {plain} - Boolean indicating whether to not interpret a plain first token as an id
⍝ args    - vector of tokens to parse
⍝
⍝     1)    In only the first token, a simple string (i.e. not in the form 'abc=def') without a leading '#' or '.' is treated as an id
⍝        'foo'  > id="foo"
⍝
⍝        In all other positions, a string of this type is treated as a singleton attribute
⍝        'foo' 'goo' 'moo' > id="foo" goo="goo" moo="moo"
⍝
⍝     2)    Single simple string beginning with '#' is an id
⍝        '#foo'  > id="foo"
⍝        'goo=moo' '#foo' > goo="moo" id="foo"
⍝
⍝     3)    Single simple string beginning with '.' is treated as a class
⍝        '.foo'  > class="foo"
⍝        'foo' '.goo' 'moo' > id="foo" class="goo" moo="moo"
⍝
⍝     4)    Attributes must be paired either as in 'foo=goo' or ('foo' 'goo'), if there is a single pair, it must be enclosed
⍝        ⊂'href' '#top'  > href="#top"
⍝
⍝        The value portion of an attribute pair may begin with '#' or '.' without special interpretation
⍝        ('href' '#top') '#foo' > href="#top" id="foo"
:If 0=⎕NC'plain' ⋄ plain←0 ⋄ :EndIf
arg←eis,arg
attr←⍬
firstToken←1
:For i :In ⍳⍴arg
:Select |≡item←,i⊃arg
:Case 1
:While ~0∊⍴item
ind←⌊/inds←item⍳' ='
:If ind>1
:Select ind⊃item,' '
:Case ' ' ⍝ we have a single token
:Select ⊃token←(ind-1)⍴item
:Case '.'  ⍝ class shorthand?
token↓⍨←1
mask←'\.'⍷token ⍝ split on '.' but not on '\.'
space←('.'=token)>¯1↓0,mask
token←(~mask)/(' '@(⍸space))token
:If (≢attr)≥p←(⊃¨attr)⍳⊂'class'
(p 2⊃attr),←' ',token
:Else
attr,←⊂'class'token
:EndIf
:Case '#'  ⍝ id shorthand?
attr,←⊂'id'(1↓token)
:Else
:If plain<firstToken ⍝ first token?
attr,←⊂'id'token
:Else
attr,←⊂2⍴⊂token
:EndIf
:EndSelect
:Case '='
name←(ind-1)⍴item
value←''
item↓⍨←ind
:If '''"'∊⍨q←⊃item
ind←1⍳⍨(q=item)>¯1↓1,item='\'
value←1↓¯1↓ind⍴item
:Else
ind←item⍳' '
value←(ind-1)⍴item
:EndIf
attr,←⊂name value
:EndSelect
:EndIf
item↓⍨←ind
firstToken←0
:EndWhile
:Case 2
attr,←⊂item
:Else
('Invalid attribute specification: ',⍕item)⎕SIGNAL 11
:EndSelect
:EndFor
∇
∇ {r}←{which}Set attr
:Access public
:If 0≠⎕NC'which' ⋄ attr←↓(eis which),[1.1]eis attr
:Else
'Set cannot be called with a scalar ref'⎕SIGNAL 11/⍨(0=≡attr)∧326∊⎕DR attr
:If 2=⍴,attr  ⍝ 'attr' 'value' is never shorthanded (e.g. given special treatment for id/class)
:AndIf 1∧.≥≡¨attr
:AndIf ~∧/'='∊¨attr
attr←,⊂attr
:EndIf
attr←1 ParseAttr attr
:EndIf
:If ~0∊⍴attr
Attrs[1⊃¨attr]←2⊃¨attr
:EndIf
r←⎕THIS
∇
∇ {r}←{which}SetAttribute attr
⍝ set attributes, treating
:If 0≠⎕NC'which' ⋄ attr←↓(eis which),[1.1]eis attr
:Else
'Set cannot be called with a scalar ref'⎕SIGNAL 11/⍨(0=≡attr)∧326∊⎕DR attr
attr←ParseAttr attr
:EndIf
:If ~0∊⍴attr
Attrs[1⊃¨attr]←2⊃¨attr
:EndIf
r←⎕THIS
∇
∇ {r}←{which}SetAttr attr
:Access public
:If 0=⎕NC'which' ⋄ r←SetAttribute attr
:Else ⋄ r←which SetAttribute attr
:EndIf
∇
∇ {r}←DelAttr attrname;mask
:Access public
attrname←eis attrname
mask←~_names∊attrname ⋄ (_names _values)←mask∘/¨_names _values
r←⎕THIS
∇
∇ r←{proto}GetAttr attrname
:Access public
:If 0=⎕NC'proto' ⋄ proto←'' ⋄ :EndIf
attrname←eis attrname
:If 1=⍴attrname
:Trap 3 ⍝ index error
r←_values⊃⍨_names⍳attrname
:Else
r←proto
:EndTrap
:Else
proto∘GetAttr¨attrname
:EndIf
∇
∇ {r}←AddClass c
:Access public
:If class≡UNDEF
class←c
:Else
class,←' ',c
:EndIf
r←⎕THIS
∇
∇ {r}←AddStyle s;t
:Access public
:If style≡UNDEF
style←s,(';'=¯1↑s)↓';'
:Else
style,←(';'=¯1↑style)↓';',s,(';'=¯1↑s)↓';'
:EndIf
r←⎕THIS
∇
:EndSection
:Section Styles
∇ {r}←{what}Style styles;msg
:Access public
msg←'Invalid style specification'
:If 0≠⎕NC'what'
_styles,←↓(eis what),⍪eis((⍕¨)⍣(2|⎕DR styles))styles
:Else
:Select ≡styles
:Case 2
msg errorIf 11×0≠2|⍴styles
_styles,←↓(2,⍨0.5×⍴styles)⍴styles
:Case 3
msg errorIf 11×~∧/(,2)∘≡∘⍴¨styles
_styles,←styles
:Else
msg ⎕SIGNAL 11
:EndSelect
:EndIf
r←⎕THIS
∇
∇ r←RenderStyles;style
r←''
:If ~0∊⍴_styles
:For style :In _styles
r,←∊(⍕¨style),¨':;'
:EndFor
r←' style="',r,'" '
:EndIf
∇
:EndSection
⍝ The constructors
⍝ The first arg is the Tag, followed by its contents, then its attributes, if present
⍝ Note that attributes can be specified with the tag as in
⍝  button type="submit"
:Section Constructors
∇ Make0
⍝ basic constructor
:Implements constructor
:Access public
Init
∇
∇ Make1 t    ⍝ this can be any length
⍝ t - tag/element name (e.g. 'div' or 'table')
:Implements constructor
:Access public
Tag←t
Init
∇
∇ Make2(t arg)
⍝ t - tag/element name (e.g. 'div' or 'table')
⍝ arg - content or (content attrs)
:Implements constructor
:Access public
Make2Code(t arg)
∇
∇ Make2Code(t arg);attr;content;ref
:If 1=≡t arg                      ⍝ handle 2-character tag (e.g. 'ul' 'tr')
Tag←t,arg
:Else
⍝ If we have a couple of items, the second of which is
⍝ a string or VTV, then we are dealing with attributes:
:If (1<|≡arg)∧(,2)≡⍴arg
:AndIf isAttr 2⊃arg
(content attr)←arg ⋄ SetAttr attr
:Else
content←arg
:EndIf
Add content
Tag←t
:EndIf
Init
∇
∇ Make3(t content attr);ref
⍝ t - tag/element name (e.g. 'div' or 'table')
⍝ content - content
⍝ attr - attrs
:Implements constructor
:Access public
:If 1=≡t content attr    ⍝ handle 3-character tag (e.g. 'pre')
Tag←t,content,attr
:ElseIf isClass content
Make2Code t(content attr)
:Else
Tag←t
⍝ attr could be a ref. This means that it goes in the contents.
Add content
:If (0∊⍴attr)⍱ref←isRef attr
SetAttr attr
:ElseIf ref
Add attr
:EndIf
:EndIf
Init
∇
∇ Init
(_html _JQ _SF _DC _JSS _)←#.(_html _JQ _SF _DC _JSS _)
Position←⎕NS''
∇
∇ SetUse;c
:Access public overridable
:If ~0∊⍴Uses
:Trap 0
:If ''≡c←_PageRef
c←context'_PageRef'
:If ~0∊⍴c
c←c._PageRef
:EndIf
:EndIf
:If ~0∊⍴c
c.Use Uses
:EndIf
:EndTrap
:EndIf
∇
∇ Use resource
:Access public
:If ~0∊⍴Uses ⋄ Uses←eis Uses ⋄ :EndIf
Uses,←eis resource
∇
:endsection
:section Event Handling
∇ {handler}←On args;n;i
:Access public
args←eis args
handler←⎕NEW #._JQ.Handler
handler.(Events Callback ClientData JavaScript Delegates jQueryWrap ScriptWrap Cursor)←args defaultArgs'' 1 '' '' '' 1 1 ¯1
handler.WidgetRef←⎕THIS
handler.Page←_PageRef
:If ¯1=handler.Hourglass ⋄ handler.Hourglass←(,0)≢,handler.Callback ⋄ :EndIf
:If 0∊n←⍴Handlers
Handlers,←handler
:ElseIf n<i←Handlers.Events⍳⊂handler.Events
Handlers,←handler
:Else
Handlers[i]←handler
:EndIf
∇
∇ {handler}←One args
:Access public
handler←On args
handler.Method←'one'
∇
∇ r←RenderHandlers;myid;h
:Access public ⍝!!! remove this after testing
r←''
:If ~0∊⍴Handlers
:If ∨/0∘∊∘⍴¨Handlers.Selector
myid←SetId
:EndIf
:For h :In Handlers
:If 0∊⍴h.Selector
h.Selector←'#',myid
:EndIf
r,←h.Render
:EndFor
:EndIf
∇
:endsection
:section Rendering
⍝ Elements with no End tag (<tag></tag>).
⍝ area base basefont br col frame hr img input isindex link meta param
∇ r←a FormatAttr w
:Access public shared
r←' ',a,'=',Quote HtmlSafeText,⍕w
∇
∇ r←Render;av;t;vs;e;h;c;p;names;gv
:Access public
⍝ Render by first constructing the Tag, complete with attributes, if any
r←RenderCore Content
:If ~0∊⍴av←Tag
h←RenderHandlers
p←RenderPosition
:If 0<⍴vs←Attrs[]
gv←⍋↑names←⊃¨vs
gv←gv[⍋{(1e4+'data-'∘≡¨5↑¨⍵)+(1e5×'-'=⊃¨⍵)+'id' 'class' 'style'⍳⍵}names[gv]]
av,←∊FormatAttr/¨vs[gv]
:EndIf
av,←RenderStyles
:If (⊂Tag)∊'html' 'body' 'head'
r←av Enclose r,h,p
:Else
r←(av Enclose r),h,p
:EndIf
:EndIf
∇
∇ r←Postrender r
:Access overridable
∇
∇ r←RenderCore list;e;t
:Access public
⍝ do the bulk of the rendering work
r←''
list←{0=⍴⍴⍵:{1<|≡⍵:⊃⍵ ⋄ ⍵}⍵ ⋄ ⍵}list
:For e :In eis list
:If isInstance⊃e
r,←e.Render
:ElseIf isClass⊃e
r,←(New e).Render
:Else
:If 1<⍴⍴t←⍕e
t←∊(↓t),¨⊂'<br/>'
:EndIf
r,←t
:EndIf
:EndFor
∇
∇ r←HtmlSafeText txt;i;m;u;ucs
:Access public shared
⍝ make text HTML "safe"
r←,⎕FMT txt
i←'&<>"#'⍳r
i-←(i=1)∧1↓(i=5),0 ⍝ mark & that aren't &#
m←i∊⍳4
u←127<ucs←⎕UCS r
(m/r)←('&amp;' '&lt;' '&gt;' '&quot;')[m/i]
(u/r)←(~∘' ')¨↓'G<&#ZZZ9;>'⎕FMT u/ucs
r←∊r
∇
∇ r←RenderPosition
:Access public
r←''
:If ~0∊⍴Position.⎕NL-2
Uses,←⊂'JQueryUI'
r←#.JQ.JQueryfn'position'('#',SetId)Position
SetUse
:EndIf
∇
:endsection
:section Utilities
Bracket←{'<',⍵,'>'}
∇ SetInputName
:Access public
⍝ for input element widgets, this will set the name to the id if not already set
⍝ or the id to the name if not already set
:If (⊂name)∊UNDEF''
:If (⊂id)∊UNDEF''
SetId
:EndIf
name←id
:ElseIf UNDEF≡id
id←name
:EndIf
∇
∇ r←tag Enclose txt;nl
:Access public shared
tag←,tag
r←(tag{NoEndTag∧0∊⍴⍵:Bracket ⍺,'/' ⋄ (Bracket ⍺),⍵,Bracket'/',⍺↑⍨¯1+⍺⍳' '}txt)
∇
∇ r←{a}eis w
:Access public shared
r←((,∘⊂)⍣(((isNum w)∨isString w)∧2>|≡w))w ⍝ enclose if simple
∇
∇ da←args defaultArgs defaultvalues
:Access public shared
da←da,(⍴,da←eis args)↓defaultvalues
∇
∇ r←Quote a;b
:Access public shared
b←1↓<⌿¯1 0⌽'\"'∘.=';',a   ⍝ keep \" as is
(b/a)←⊂'&quot;'
r←1⌽'""',∊a
∇
∇ r←attr ParseArgs args
:Access public
:If ~0∊⍴r←args
:If isClass⊃args
r←⎕NEW∘{2<⍴,⍵:(⊃⍵)({eis ⍵}(1↓⍵)) ⋄ ⍵}args
:If 0≠⎕NC⊂'_PageRef'
r._PageRef←_PageRef
:EndIf
:If ~0∊⍴attr
r.SetAttr attr
:EndIf
:ElseIf isInstance⊃args
:If ~0∊⍴attr
(⊃args).SetAttr attr
:EndIf
r←args
:Else
(r←⎕NEW HtmlElement).Content←⊂args
:EndIf
:EndIf
∇
∇ {r}←{attr}Push args;c;cl;attr;elm
:Access public
:If ~0∊⍴r←args
c←Content
:If 0=⎕NC'attr' ⋄ attr←'' ⋄ :EndIf
r←attr ParseArgs args
:If isInstance r
:Trap 4 5 ⍝ rank and length error
r.Content,←c
:Else
r.Content,←⊂c
:EndTrap
Content←r
:Else
Content,⍨←⊂r
:EndIf
:EndIf
∇
∇ {r}←{attr}Add args;cl
⍝ add "something" to the Content
⍝ args can be an instance, a class, or just html/text
:Access public
r←''
:If ~0∊⍴args
:If 0=⎕NC'attr' ⋄ attr←'' ⋄ :EndIf
r←attr ParseArgs args
:Trap 4 5 ⍝ rank and length error
Content,←r
:Else
Content,←⊂r
:EndTrap
:EndIf
∇
∇ {r}←{attr}New args;cl
⍝ create a new instance
⍝ args can be an instance, a class, or just html/text
:Access public shared
r←''
:If ~0∊⍴args
:If 0=⎕NC'attr' ⋄ attr←'' ⋄ :EndIf
r←attr ParseArgs args
:EndIf
∇
∇ {r}←{attr}Insert args;cl
⍝ add "something" to the beginning of Content
⍝ args can be an instance, a class, or just html/text
:Access public
r←''
:If ~0∊⍴args
:If 0=⎕NC'attr' ⋄ attr←'' ⋄ :EndIf
r←attr ParseArgs args
:Trap 4 5 ⍝ rank and length error
Content,⍨←r
:Else
Content,⍨←⊂r
:EndTrap
:EndIf
∇
∇ {r}←Last
:Access public
r←⊃⌽Content
∇
∇ r←{ref}isClass ao
:Access public shared
→0↓⍨r←9.4∊⎕NC⊂'ao'
:If 0≠⎕NC'ref'
r←ref∊∊⎕CLASS ao
:EndIf
∇
∇ r←{ref}isInstance ao
:Access public shared
→0↓⍨r←9.2∊⎕NC⊂'ao'
:If 0≠⎕NC'ref'
r←ref∊∊⎕CLASS ao
:EndIf
∇
∇ r←isRef obj
:Access public shared
r←9∊⎕NC'obj'
∇
∇ r←isWidget obj
:Access public shared
→0↓⍨r←9.2∊⎕NC⊂'obj'
r←#._JQ._jqWidget∊∊⎕CLASS obj
∇
isattr←{isString ⍵:1 ⋄ isRef ⍵:0 ⋄ ∧/∇¨⍵}
∇ r←isAttr obj
:Access public shared
r←isattr obj
∇
∇ r←renderIt It
:Access public shared
r←{
0∊⍴⍵:''
326=⎕DR ⍵:{
isString ⍵:∊⍵
2≤|≡⊃⍵:{
isClass⊃⊃⍵:((New⊃⍵).Render),renderIt 1↓⍵
,⍕⍵
}⍵
isInstance⊃⍵:((⊃⍵).Render),renderIt 1↓⍵
isClass⊃⍵:((⎕NEW(⊃⍵)).Render),renderIt 1↓⍵
isChar⊃⍵:(⊃⍵),renderIt 1↓⍵
(renderIt⊃⍵),renderIt 1↓⍵}⍵
,⍕⍵}It
∇
∇ r←isHtmlElement ao
:Access public shared
:Trap r←0
r←⊃∨/#.HtmlElement=⎕CLASS ao
:EndTrap
∇
∇ r←Parse string;b;s
⍝ Separate each section of name="..."
:Access public
string←(b⍲1⌽b←' '=s)/s←' ',string
b←(' '=string)>≠\'"'=string
r←1↓¨b⊂string ⍝ each pair
s←r⍳¨'='      ⍝ each is separated by =
r←s{(¯1↓⍺↑⍵)(1↓¯1↓⍺↓⍵)}¨r
∇
∇ r←GenId
:Access public shared
r←'id',⍕rand ¯1+2*31
∇
∇ {myid}←SetId
:Access public
:If UNDEF≡myid←id
:If ''≡myid←⊃Attrs[⊂'id']
id←myid←GenId
:Else
id←myid
:EndIf
:EndIf
∇
dtlb←{⍵{((∨\⍵)∧⌽∨\⌽⍵)/⍺}' '≠⍵}
∇ r←ScriptFollows
:Access public shared
r←2↓∊(⎕UCS 13 10)∘,¨Follows
∇
∇ r←Follows;n
:Access public shared
n←⎕XSI{1++/∧\⍵∘≡¨(⊃⍴⍵)↑¨⍺}(⍕⎕THIS),'.'
r←{⍵/⍨'⍝'≠⊃¨⍵}{1↓¨⍵/⍨∧\'⍝'=⊃¨⍵}{⍵{((∨\⍵)∧⌽∨\⌽⍵)/⍺}' '≠⍵}¨(1+n⊃⎕LC)↓↓(180⌶)n⊃⎕XSI
∇
∇ r←MarkdownFollows
:Access public shared
r←⊃#.MarkAPL.Markdown2HTML Follows
∇
∇ r←CodeFollows;n
:Access public shared
n←⎕XSI{1++/∧\⍵∘≡¨(⊃⍴⍵)↑¨⍺}(⍕⎕THIS),'.'
r←2↓∊(⎕UCS 13 10)∘,¨{¯1↓⍵/⍨∨\⌽<\∨/¨'⍝<<end>>'∘⍷¨⍵}(1+n⊃⎕LC)↓↓(180⌶)2⊃⎕XSI
r←'<pre style="font-family:APL385 Unicode">',r,'</pre>'
∇
∇ r←WrapFollowing tag;text;SplitOnSpaceLines;Trim;FirstCommentBlock
:Access public shared
⍝ USAGE:
⍝
⍝      Add WrapFollowing 'p class="bodytext"'
⍝      ⍝ paragraph may span
⍝      ⍝ several lines
⍝      ⍝
⍝      ⍝ they are separated by empty comment lines
⍝
⍝ RESULT:
⍝
⍝      <p class="bodytext">paragraph may span several lines</p>
⍝      <p class="bodytext">they are separated by empty comment lines</p>
⍝
Trim←{(∨\' '≠⍵)/⍵}¨
FirstCommentBlock←{1↓¨⍵/⍨∧\'⍝'=⊃¨⍵}
SplitOnSpaceLines←{1↓¨⍵⊂⍨⍵∧.=¨' '}
text←(1+2⊃⎕LC)↓↓(⊃⊃⎕CLASS 1⊃⎕RSI).(180⌶)2⊃⎕SI
r←tag∘#.HtmlUtils.Enclose¨∊¨SplitOnSpaceLines' ',¨⍨' ',⌽¨Trim⌽¨FirstCommentBlock Trim text
∇
∇ r←what Subst text;names;gv;i;repl;fixL;fixR
:Access public shared
r←text
fixL←'[][{}()?*.+\\^$|]'⎕R'\\\0' ⍝ precede regex metacharacters by \
fixR←'&' '%' '\\'⎕R'\\\0'        ⍝ add \ to & % \
:Select ⎕NC⊂'what'
:Case 9.1 ⍝ namespace
gv←⍒∊⍴¨names←what.⎕NL ¯2 3 ⍝ variables and functions only, sort so that 'foo' matches before 'fo'
r←(names[gv]⎕R(fixR¨⍕¨what⍎⍕names[gv]))r
:Case 2.1 ⍝ substitution pairs
:If 2=|≡what ⋄ what←,⊂what ⋄ :EndIf
:If 2≠⍴⍴what ⋄ what←↑what ⋄ :EndIf
what←,¨what
r←(fixL¨what[;1])⎕R(fixR¨what[;2])⊢r
:EndSelect
∇
:endsection
:endclass  ⍝ HtmlElement
﻿:class HtmlPage : #.HtmlElement
⍝∇:require =\HtmlElement.dyalog
:field public Head
:field public Body
:field public Scripts
:field public StylesLinks
∇ make
:Access public
:Implements constructor
_init
Tag←'html'
∇
∇ r←RenderBody;scr;mask
⍝ Called by MiPage because rendering can add scripts to the head element
:Access public
:If ~0∊⍴scr←∪Scripts
:AndIf ∨/mask←{~0∊⍴⍵}¨scr.Content
Body.Add¨mask/scr
:EndIf
r←Body.Render
∇
∇ r←RenderPage b;scr;mask;content
:Access public
content←Content
:If ~0∊⍴scr←∪Scripts
:AndIf ∨/mask←{0∊⍴⍵}¨scr.Content
Head.Add¨mask/scr
:EndIf
:If ~0∊⍴StylesLinks
Head.Add¨StylesLinks
:EndIf
Content←(Head.Render),b
r←'<!DOCTYPE html>',∊⎕BASE.Render
Content←content
∇
∇ r←Render;s;b;mask;scr;sty;content;headContent
:Access public
content←Content
headContent←Head.Content
:If ~0∊⍴scr←∪Scripts
:AndIf ∨/mask←{~0∊⍴⍵}¨scr.Content
Body.Add¨mask/scr
:EndIf
b←Body.Render
:If ~0∊⍴scr←∪Scripts
:AndIf ∨/mask←{0∊⍴⍵}¨scr.Content
Head.Add¨mask/scr
:EndIf
:If ~0∊⍴sty←∪⌽StylesLinks
Head.Add¨StylesLinks
:EndIf
Content←(Head.Render),b
r←'<!DOCTYPE html>',∊⎕BASE.Render
Content←content
Head.Content←headContent
∇
∇ _init
:Access public
Body←⎕NEW #.HtmlElement'body'
Head←⎕NEW #.HtmlElement'head'
(Body Head)._PageRef←⎕THIS
Scripts←''
StylesLinks←''
Handlers←''
Content←Head,Body
∇
∇ {r}←{attr}Add what;c
:Access public
:If 0=⎕NC'attr' ⋄ attr←'' ⋄ :EndIf
:If isClass⊃what
⍝          :If #._html.script∊c←∊⎕CLASS⊃what
⍝              r←Scripts,←{(⎕NEW(⊃⍵)((⊃⍣(2=⊃⍴⍵))1↓⍵))}what
:If #._JQ.Handler∊c←∊⎕CLASS⊃what
r←Body.Handlers,←{(⎕NEW(⊃⍵)((⊃⍣(2=⊃⍴⍵))1↓⍵))}what
:If 0∊⍴r.Selector ⋄ r.Selector←'html' ⋄ :EndIf ⍝ if no selector specified, use page level
:ElseIf ⊃∨/c∊¨⊂#._html.(style link)
r←StylesLinks,←attr New what
:ElseIf ⊃∨/c∊¨⊂#._html.(title meta noscript base) ⍝ elements that belong exclusively or primarily in the <head> element
r←attr Head.Add what
:Else
r←attr Body.Add what
:EndIf
r._PageRef←⎕THIS
:Else
r←attr Body.Add what
:EndIf
∇
∇ {r}←{attr}Insert what;c
:Access public
:If 0=⎕NC'attr' ⋄ attr←'' ⋄ :EndIf
:If isClass⊃what
:If #._html.script∊c←∊⎕CLASS⊃what
r←Scripts,⍨←{(⎕NEW(⊃⍵)((⊃⍣(2=⊃⍴⍵))1↓⍵))}what
:ElseIf #._JQ.Handler∊c
r←Body.Handlers,⍨←{(⎕NEW(⊃⍵)((⊃⍣(2=⊃⍴⍵))1↓⍵))}what
:If 0∊⍴r.Selector ⋄ r.Selector←'html' ⋄ :EndIf ⍝ if no selector specified, use page level
:ElseIf ⊃∨/c∊¨⊂#._html.(style link)
r←StylesLinks,⍨←{(⎕NEW(⊃⍵)((⊃⍣(2=⊃⍴⍵))1↓⍵))}what
:ElseIf ⊃∨/c∊¨⊂#._html.(title meta noscript base) ⍝ elements that belong exclusively or primarily in the <head> element
r←attr Head.Insert what
:Else
r←attr Body.Insert what
:EndIf
r._PageRef←⎕THIS
:Else
r←attr Body.Insert what
:EndIf
∇
∇ {r}←On args
:Access public
r←Body.On args
r.Selector←'⍎document'
∇
∇ {r}←{attr}New what
:Access public
:If 0=⎕NC'attr' ⋄ attr←'' ⋄ :EndIf
r←attr ⎕BASE.New what
r._PageRef←⎕THIS
∇
dtlb←{⍵{((∨\⍵)∧⌽∨\⌽⍵)/⍺}' '≠⍵}
∇ r←Style style
:Access public
r←{(⎕NEW #._html.link).Set(('href'⍵)('rel' 'stylesheet')('type' 'text/css'))}style
∇
:endclass
﻿:Class HtmlRenderRequest
(⎕IO ⎕ML ⎕WX)←1 1 3
:field public Page
:field public Data←0 2⍴⊂''
:field public Headers←0 2⍴⊂''
:field public Cookies←0 2⍴⊂''
:field public Arguments←0 2⍴⊂''
:field public Content←''
:field public EventArgs←''
:field URLRoot←'dyalog_root'
begins←{⍺≡(⍴⍺)↑⍵}
tableLookup←{(⍺[;1]⍳⊂,⍵)⊃⍺[;2],⊂''}
lc←(819⌶)
uc←1∘(819⌶)
splitFirst←{⍺←' ' ⋄ ⍵{((⍵-1)↑⍺)(⍵↓⍺)}⌊/⍵⍳⍺}
dlb←{⍵↓⍨+/∧\⍵=' '}
CookieSplit←{{{⌽dlb⌽dlb ⍵}¨⍵⊆⍨~<\'='=⍵}¨⍵⊆⍨⍵≠';'}
∇ make(args pg)
:Implements constructor
:Access public
EventArgs←args
URLRoot←(1+0∊⍴pg)⊃pg URLRoot
URLRoot,←('/'=¯1↑URLRoot)↓'/'
(Page Arguments)←ParseUrl 8⊃args
Headers←ParseHeaders 9⊃args
Cookies←ParseCookies Headers
Headers ParseData 10⊃args ⍝ creates Data and Content
∇
∇ (page arguments)←ParseUrl u;args
⍝ Parse the URL
(page arguments)←'?'splitFirst u
page←XlateArgs{3↓⍵/⍨∨\'://'⍷⍵}page ⍝ drop off http{s}://
page↓⍨←(≢URLRoot)×URLRoot begins page
arguments←DecodeUrlArgs arguments
∇
∇ hdrs←ParseHeaders h
⍝ Parse HTTP headers
hdrs←↑':'splitFirst¨{⍵⊆⍨⍵≠⎕UCS 10}h
hdrs[;1]←lc¨hdrs[;1]  ⍝ header names are case insensitive
hdrs[;2]←dlb¨hdrs[;2] ⍝ header data
∇
∇ hdrs ParseData data;z;mask;new;s
⍝ Parse any data passed in the request body
⍝ we only parse a couple of MIME types
⍝ otherwise we put the data in Content
:If 'multipart/form-data'begins z←GetHeader'content-type'
z←'--',(8+('boundary='⍷z)⍳1)↓z ⍝ boundary string
Data←↑DecodeMultiPart¨¯1↓z{(⍴⍺)↓¨(⍺⍷⍵)⊂⍵}data ⍝ ¯1↓ because last boundary has '--' appended
:ElseIf 'application/x-www-form-urlencoded'begins z
Data←DecodeUrlArgs data
⍝          :ElseIf 'text/plain'begins z
⍝              Data←1 2⍴'Data'data ⍝ if text, create artificial "Data" entry
:Else
Content←data
:EndIf
⍝↓↓↓ MiPage support
:If ∨/mask←'_serialized_'∘begins¨Data[;1] ⍝ do we have any serialized form data from AJAX?
new←0 2⍴⊂''
:For s :In mask/Data[;2]
new⍪←DecodeUrlArgs s
:EndFor
Data←((~(⊃⍴Data)↑mask)⌿Data)⍪new
Data←{0 1∊⍨⊃⍴⍵:⊃⍵ ⋄ ⍵}¨⊃{⍺ ⍵}⌸/↓[1]Data
:EndIf
:If ∨/mask←'_json_'∘begins¨Data[;1] ⍝ do we have any Syncfusion model data?
:For s :In mask/⍳⍴mask
Data[s;1]↓⍨←6
Data[s;2]←,⊆⎕JSON⊃Data[s;2]
:EndFor
:EndIf
∇
∇ r←GetHeader name
:Access public
r←Headers tableLookup lc name
∇
∇ r←GetData name
:Access public
r←Data tableLookup name
∇
∇ r←{proto}Get names;noproto;char
:Access public
:If noproto←0=⎕NC'proto' ⋄ proto←'' ⋄ :EndIf
names←,⊆names
names←,⍕names
names←#.Strings.deb names
:If ' '∊names
names←{⎕ML←3 ⋄ ⍵⊂⍨⍵≠' '}names
r←proto∘Get¨names
:Else
:If ''≡r←GetData names
r←proto
:EndIf
:EndIf
∇
∇ cookies←ParseCookies hdrs;cookie
cookies←0 2⍴⊂''
:If ~0∊⍴cookie←GetHeader'cookie'
cookies←↑CookieSplit cookie
cookies[;1]←lc¨cookies[;1]
cookies[;2]←DeCode¨cookies[;2]
:EndIf
∇
DeCode←{(⎕IO ⎕ML)←0 3          ⍝ Decode Special chars in HTML string.
hex←'0123456789ABCDEF'     ⍝ Hex chars.
{                          ⍝ Convert numbers.
v f←⎕VFI ⍵             ⍝ Check for numbers.
~∧/v:⍵                 ⍝ Not all numbers: char vec.
1=⍴f:↑f ⋄ f            ⍝ Numeric scalar or vector.
}∊{                        ⍝ Enlist of segments.
'%'≠↑⍵:⍵               ⍝ 1st seg may not contain special char.
(⎕UCS 16⊥hex⍳1↓3↑⍵),3↓⍵  ⍝ Hex code replaced with corresp. ⎕AV char.
}¨(1+⍵='%')⊂,⍵             ⍝ Segments split at '%' char.
}
∇ r←XlateArgs r;rgx;rgxu;i;j;z;t;m;⎕IO;lens;fill
:Access public shared
⍝ Translate HTTP command line arguments (lifted from MiServer HTTPRequest)
⎕IO←0
((r='+')/r)←' '
rgx←'[0-9a-fA-F]'
rgxu←'%[uU]',(4×⍴rgx)⍴rgx ⍝ 4 characters
r←(rgxu ⎕R{{⎕UCS 16⊥⍉16|'0123456789ABCDEF0123456789abcdef'⍳⍵}2↓⍵.Match})r
:If 0≠⍴i←(r='%')/⍳⍴r
:AndIf 0≠⍴i←(i≤¯2+⍴r)/i
z←r[j←i∘.+1 2]
t←'UTF-8'⎕UCS 16⊥⍉16|'0123456789ABCDEF0123456789abcdef'⍳z
lens←⊃∘⍴¨'UTF-8'∘⎕UCS¨t  ⍝ UTF-8 is variable length encoding
fill←i[¯1↓+\0,lens]
r[fill]←t
m←(⍴r)⍴1 ⋄ m[(,j),i~fill]←0
r←m/r
:EndIf
∇
∇ r←{cs}DecodeUrlArgs args
:Access Public Shared
cs←{6::⍵ ⋄ cs}1 ⍝ default to case sensitive
r←(args∨.≠' ')⌿↑'='∘splitFirst¨{(⍵≠'&')⊆⍵},args ⍝ Cut on '&'
r[;1]←{⍵↓⍨¯6×'%5B%5D'≡¯6↑⍵}¨r[;1] ⍝ remove [] from array args
r[;2]←XlateArgs¨r[;2]
:If ~cs ⋄ r[;1]←lc¨r[;1] ⋄ :EndIf
∇
∇ r←DecodeMultiPart data;hdr;ind;d;name;i;filename
hdr←data↑⍨ind←¯1+1⍳⍨(⎕UCS 13 10 13 10)⍷data
hdr←hdr⊆⍨~hdr∊⎕UCS 13 10
d←⊃(hdr/⍨'Content-Disposition:'∘begins¨hdr),⊂''
name←filename←''
:If (⍴d)≥i←5+('name="'⍷d)⍳1
name←(¯1+name⍳'"')↑name←i↓d
:EndIf
:If (⍴d)≥i←9+('filename="'⍷d)⍳1
filename←(¯1+filename⍳'"')↑filename←i↓d
:EndIf
data←(4+ind)↓data ⍝ Drop up to 1st doubleCR
data←(¯1+¯1↑{⍵/⍳⍴⍵}(⎕UCS 13 10)⍷data)↑data ⍝ Drop from last CR
:If ~0∊⍴filename
data←filename data
:EndIf
r←name data
∇
∇ r←isAPLJax
:Access public instance
r←'true'≡GetHeader'isAPLJax'
∇
:EndClass
﻿:class JSON
⍝ Converts JSON (as a character vector) to and from XML and APL.
⍝ The APL format may also save shape information.
⍝ It also includes namespaces but the namespace representation may lose data
⍝ when an object name contains characters that are not valid in APL names.
⍝ Both the APL and XML forms are 100% lossless otherwise.
⍝ This means that:
⍝    json ≡ fromAPL toAPL json   and   json ≡ fromXML toXML json
⎕IO←⎕ML←1 ⋄ ⎕pp←34                      ⍝ Version 2.00
toNum←{⎕FR←1287 ⋄ (v n)←⎕VFI fixNum ⍵ ⋄ (v≡,1):⊃n ⋄ ⍬}
deQuote←{'\\"'⎕R'"'⊢'\\\\'⎕R'\\'⊢'""'strip ⍵}
isRef←{(0=≡⍵)∧326=⎕DR ⍵}
if←/⍨
trim←⌽∘{(+/∧\' '=⍵)↓⍵}⍣2
us←{≠\⍵≠⍺\t≠¯1↓0,t←⍺/≠\¯1↓0,⍵} ⍝ partitioned ≠\
isChar←{0 2∊⍨10|⎕dr ⍵}
isSingle←{(1=⊃⍴,⍵)∧2>≡⍵}
isSimple←{(0∊⍴⍴⍵)∧0=≡⍵}
isJSON←{0::0 ⋄ ~0∊⍴ toXML ⍵}
fixNum←{b←'-'=V←⍵ ⋄ (b/V)←'¯' ⋄ ∧/b←'+'≠V:V ⋄ (b≥¯1⌽V∊'eE')/V}
fmtNum←{(2|⎕dr ⍵)⍲∨/b←'¯'=r←⍕⍵:r ⋄ (b/r)←'-' ⋄ r}
strip←{⍺←'{}' ⋄ ∧/⍺=(1↑⍵),¯1↑⍵:1↓¯1↓⍵ ⋄ ⍵}
validName←{('.'∊⍵)<0≤⎕NC ⍵}
beginsWith←{⍵≡(⍴⍵)↑⍺}
fromHex←{0::⎕DMX.EM ⎕SIGNAL ⎕EN
⎕IO←0
16⊥⍉16|⍵{
31∨.<,⍵:('Invalid hexadecimal character(s) in ',,⍺)⎕SIGNAL 777
⍵}⍵⍳⍨⎕D,'abcdef',⎕D,'ABCDEF'}
:field public shared true←⊂'true'
:field public shared false←⊂'false'
:field public shared null←⊂'null'
⍝   ---------------------------------------------------------------------
:section fromAPL
∇ r←{options}fromAPL array;typ;ic;drop;ns;preserve;quote;qp;eval;t
⍝ array is an APL array
⍝ options is [1] flatten higher rank arrays?
:Access public shared
:If 0=⎕NC'options' ⋄ options←⍬ ⋄ :EndIf
options←1↑options,(≢options)↓0
:If 1<⍴⍴array
:If options[1]
array←{(↓⍣(¯1+≢⍴⍵))⍵}array
:Else
⎕SIGNAL⊂('EN' 11)('Message' 'Array rank > 1')
:EndIf
:EndIf
:Trap 0
:If isSimple array
r←fmtNum array ⋄ →0 if 2|typ←⎕DR array ⍝ numbers
:Select ⎕NC⊂'array'
:CaseList 9.4 9.2
⎕SIGNAL(⎕THIS≡array)/⊂('EN' 11)('Message' 'Array cannot be a class')
:Case 9.1
r←1 0 APLObject array
:Else
r←1⌽'""',JAchars array
:EndSelect
:Else ⍝ is not simple (array)
r←'['↓⍨ic←isChar array
:If 0∊⍴array
r←(1+ic)⊃'[]' '""'
→0
:ElseIf ic
r,←1⌽'""',JAchars,array ⍝ strings are displayed as such
:ElseIf 2=≡array
:AndIf 0=≢⍴array
:AndIf isChar⊃array
r←⊃array
→0
:Else
r,←1↓∊',',¨options∘fromAPL¨,array
:EndIf
r,←ic↓']'
:EndIf
:Else ⍝ :Trap 0
(⎕SIGNAL/)⎕DMX.(EM EN)
:EndTrap
∇
∇ r←{options}serializeAPL array;typ;ic;drop;ns;preserve;quote;qp;eval;t
⍝ array is an APL array
⍝ options - formatting options
⍝     [1] put "quotes" around names?
⍝     [2] preserve APL shape info?
⍝     [3] eval? - interpret leading '⍎' as indication to treat as JavaScript rather than as a string
⍝ represented by a list of [rank,shape, if we preserve it, then data]
:Access public shared
:If 0=⎕NC'options' ⋄ options←0 0 1 ⋄ :EndIf
qp←(quote preserve eval)←3↑options  ⍝ do we quote the names and preserve APL shape?
:If isSimple array
r←fmtNum array ⋄ →0 if 2|typ←⎕DR array ⍝ numbers
:If ⎕NULL≡array
r←'null'
:ElseIf typ=326 ⍝ ref (ns)
'Cannot work on JSON itself'⎕SIGNAL 611 if ⎕THIS≡array
r←qp APLObject array
:Else
r←1⌽'""',JAchars array
:EndIf
:Else ⍝ is not simple (array)
drop←preserve<ic←isChar array
r←drop↓'[',preserve/',',⍨(⍕⍴⍴array),∊',',¨⍕¨⍴array
:If 0∊⍴array
:If ~preserve ⋄ →0⊣r←(1+ic)⊃'[]' '""' ⋄ :EndIf
r,←qp fromAPL⊃array ⍝ prototype
:ElseIf ic
:If eval
:AndIf ∨/(array~' ')∘beginsWith¨'function' 'ej.' '$('(,'⍎') ⍝!!! for jQuery (and Syncfusion) options, treat things beginning with function or ej. as literals
r←('⍎'=1↑array)↓array
:Else
r,←1⌽'""',JAchars,array ⍝ strings are displayed as such
:EndIf
:Else
ns←⍬⍴(~preserve)×0⌈¯1+⍴⍴array
r,←1↓∊',',¨qp∘serializeAPL¨,↓⍣ns⊢array
:EndIf
r,←drop↓']'
:EndIf
∇
∇ js←{trUni}JAchars apl;fnrbt;str;b;ucs;⎕IO
:Access public shared
⍝ Get JSON characters from an APL string
:If 0<⍴js←str←,apl
:If 1∊b←str∊fnrbt←'"\/',⎕UCS 12 10 13 8 9
(b/str)←'\"' '\\' '\/' '\f' '\n' '\r' '\b' '\t'[fnrbt⍳b/str]
:EndIf
:If 1∊b←128<ucs←⎕UCS apl
:AndIf {6::⍵ ⋄ trUni}1
⎕IO←0 ⋄ (b/str)←'\u'∘,¨⊂[0](⎕D,⎕A)[(4⍴16)⊤b/ucs]
:EndIf
js←∊str
:EndIf
∇
∇ j←ns APLfn name;rep
⍝ Create a JSON string from an APL fn
'Invalid fn name'⎕SIGNAL 611 if~(ns.⎕NC name)∊3 4
rep←fromAPL ns.⎕NR name   ⍝ the code
j←'"\u2207',name,'":',rep ⍝ its ∇name
∇
∇ r←options APLObject NS;n;name;quote;preserve
⍝ Create a name-value pair JSON string from a namespace
(quote preserve)←2↑options
r←,'{'
:For n :In n←NS.⎕NL-2 9.1
r,←(quote makeString n),':'    ⍝ the name
r,←(options fromAPL NS⍎n),','  ⍝ the value
:EndFor
:If (0∊⍴n)∧(⊂name←⍕NS)∊'true' 'false' ⋄ →0⊣r←name
:Else
:For n :In NS.⎕NL-preserve/3
r,←(NS APLfn n),','
:EndFor
:EndIf
r←'}',⍨(-1<⍴r)↓r
∇
∇ r←q makeString name;Q
⍝ Find the real string associated with an APL variable name
:If q∨←'⍙'∊1↑r←name
r←⎕UCS⊃⌽⎕VFI{b\⍵/⍨b←~⍵∊'⍙_'}name
⍝ Special characters " and \ must be taken into account
((r∊'"\')/r),⍨←'\'
:EndIf
r←Q,(∊r),Q←q/'"'
∇
∇ r←name toNS data
:Access public shared
r←name{r←⎕NS'' ⋄ r⊣r⍎'(',(⍕⍺),')←⍵'}data
∇
:endsection fromAPL
⍝   ---------------------------------------------------------------------
:section toAPL
∇ obj←{options}toAPL str;c1;b
⍝ This fn takes a JSON string and turns it into an APL object
⍝ The string must follow specific rules in order to be accepted
:Access public shared
str←,str
:Trap 0
⎕SIGNAL(⊂('EN' 11)('Message' 'Invalid JSON - argument is not a simple character vector'))if~isChar str
:If 0=⎕NC'options' ⋄ options←0 ⋄ :EndIf       ⍝ do we preserve APL shape?
:If '{'=c1←1↑str←trim str~⎕UCS 8 9 10 13 ⍝ is this a ns?
⎕SIGNAL(⊂('EN' 2)('Message' 'Invalid JSON - expected closing }'))if'}'≠¯1↑str
obj←options parseNS trim strip str
:ElseIf '['=c1                           ⍝ an array maybe?
⎕SIGNAL(⊂('EN' 2)('Message' 'Invalid JSON - expected closing ]'))if']'≠¯1↑str
obj←,⍣(~options)⊢options parseAPLArray 1↓¯1↓str
:If 1=⍴obj
:AndIf obj∊true,false,null
obj←,⊂⊂⊃obj
:EndIf
:ElseIf '"'=c1
⎕SIGNAL(⊂('EN' 2)('Message' 'Invalid JSON - expected closing "'))if'"'≠¯1↑str
obj←AJchars 1↓¯1↓str                 ⍝ a string?
:ElseIf (,1)≡⎕IO⊃b←⎕VFI fixNum str       ⍝ a single number
obj←⊃⊃⌽b
:ElseIf 'null'≡str
obj←null
:ElseIf 'true'≡str
obj←true
:ElseIf 'false'≡str
obj←false
:Else
obj←str
:EndIf
:Else ⍝ :Trap 0
(⎕SIGNAL/)⎕DMX.(EM EN)
:EndTrap
∇
∇ obj←{options}deserializeAPL str;c1;b
⍝ This fn takes a JSON string and turns it into an APL object
⍝ The string must follow specific rules in order to be accepted
:Access public shared
str←,str
⎕SIGNAL(⊂('EN' 11)('Message' 'Argument is not a simple character vector'))if~isChar str
:If 0=⎕NC'options' ⋄ options←0 ⋄ :EndIf       ⍝ do we preserve APL shape?
:If '{'=c1←1↑str←trim str~⎕UCS 8 9 10 13 ⍝ is this a ns?
⎕SIGNAL(⊂('EN' 2)('Message' 'Invalid JSON - expected }'))if'}'≠¯1↑str
obj←options parseNS strip str
:ElseIf '['=c1                           ⍝ an array maybe?
⎕SIGNAL(⊂('EN' 2)('Message' 'Invalid JSON - expected ]'))if']'≠¯1↑str
obj←,⍣(~options)⊢options parseAPLArray 1↓¯1↓str
:ElseIf '"'=c1
obj←AJchars 1↓¯1↓str                 ⍝ a string?
:ElseIf (,1)≡⎕IO⊃b←⎕VFI fixNum str       ⍝ a single number
obj←⊃⊃⌽b
:ElseIf 'null'≡str
obj←⎕NULL
:ElseIf 'true'≡str
obj←true
:ElseIf 'false'≡str
obj←false
:Else
obj←str
:EndIf
∇
∇ str←AJchars str;mask;shift;escapes;uni;replace;inds;i;EM
⍝ APL from JSON characters
:Access public shared
→0↓⍨⍴str←,str ⋄ EM←''
mask←isBslash str                            ⍝ mark "real" \
→BAD if(mask∨shift←¯1↓0,mask)∨.<str∊'"\'     ⍝ " and \ must be escaped
:If ∨/mask
→BAD if~∧/shift/str∊escapes←'"\/bfnrtu'  ⍝ only valid escapes should follow \
uni←'u'=shift/str                        ⍝ mark Unicode chars (they need more processing)
replace←shift\~uni                       ⍝ direct replacements
(replace/str)←⎕UCS 34 92 47 8 12 10 13 9[escapes⍳replace/str]
:If ∨/uni                                ⍝ any Unicode chars?
inds←{⍵/⍳⍴⍵}shift\uni
:Trap 0
str[inds]←⎕UCS fromHex str[i←inds∘.+⍳4]
:Else
EM←⎕DMX.EM
→BAD
:EndTrap
mask[i]←1
:EndIf
str←(~mask)/str
:EndIf
→0
BAD:
:If 0∊⍴EM
EM←'Invalid escaped character(s) in ',str
:EndIf
('JSON - ',EM)⎕SIGNAL 777
∇
∇ ns←preserve parseNS s;txt;level;split;n;names;val;msg
⍝ Surrounding '{}'s not present here
⍝ Elements are separated by ','
ns←#.⎕NS'' ⋄ →0↓⍨⍴txt←isText s
level←(+\txt<s∊'[{')-+\txt<s∊']}'
n←+/split←1,(s∊',:')∧txt<level=0
msg←'Invalid JSON - ',(1+2|n)⊃'unbalanced braces or brackets' 'bad format'
msg ⎕SIGNAL 600 if(2|n)∨0≠¯1↑level
(names val)←↓⍉trim¨(n÷2)2⍴1↓¨split⊂';',s
names←{makeName deQuote ⍵}¨names
:For n s :InEach names val
val←preserve toAPL s
:If '∇'≠1↑n
⍎'ns.',n,'←val'
:Else ⍝ it's a fn
{}÷((1↓n)≢ns.⎕FX val)/'Invalid fn defn'
:EndIf
:EndFor
∇
∇ r←makeName str
⍝ Make up a name for an APL variable
:Access public shared
→0↓⍨('⍙'∊1↑r)∨~validName r←str
r←'⍙',∊'_',¨⍕¨⎕UCS str
∇
∇ r←parseName name
⍝ parses a name created by makeName
:Access public shared
→0↓⍨{∧/⍵∊⎕D,'⍙_'}r←name
r←⎕UCS r{2⊃⎕VFI ⍵\⍵/⍺}r∊⎕D
∇
∇ array←preserveShape parseAPLArray str;p;rank;n;txt;level;split;shape
⍝ Rank and shape precede data
shape←⍬
:If preserveShape
rank←toNum(¯1+p←str⍳',')↑str ⋄ str←p↓str
:While rank>0 ⋄ shape,←toNum(¯1+p←str⍳',')↑str ⋄ str←p↓str ⋄ rank-←1 ⋄ :EndWhile
:EndIf
⍝ For empty arrays we exit if we don't need to preserve the shape
→(preserveShape∨~0∊⍴str)↓⍴array←⍬
⍝ There will alway be at least ONE element (the prototype) so we need to do this:
⍝ Elements are separated by ',' - find them
txt←isText str
level←(+\txt<str∊'[{')-+\txt<str∊']}'
'Bad [{}] nesting'⎕SIGNAL 600 if level∨.<0
split←1,(txt<str=',')∧level=0
array←preserveShape toAPL¨1↓¨split⊂';',str
array←(⊃⍣((∨/str∘≡¨'true' 'false')∨preserveShape∧∧/txt))array
→preserveShape↓0
array←shape⍴array
∇
:endsection toAPL
:section JavaScript
∇ r←toJQueryParameters arr;t;p;i
⍝ Format APL data in a manner consistent with most jQuery-style parameter
⍝ arr is one of:
⍝ - namespace reference
⍝ - character vector of formatted jQuery parameters
⍝ - nested vector of names/values
⍝ N.B. - be careful with scalar names and character values ('h' 'a')('b' (1 2 3)) >> {ha:{b:[1,2,3]}} because 'h' 'a' ≡ 'ha'
:Access public shared
:If isRef arr
:OrIf ∧/isRef¨arr
r←0 0 1 fromAPL arr
:Else
⍝          arr←,arr
:If isChar arr ⍝ simple charvec?
→0⌿⍨'}{'≡2↑¯1⌽r←arr
:AndIf isJSON r←'{',(strip arr),'}'
→0 ⍝ treat it like a parameters vector
:Else
:If 1=≡arr   ⍝ only way this happens is with scalar name
arr←,⊂(,⊃arr)(1↓arr)
:ElseIf (2=⍴arr)∧isChar⊃arr ⍝ id
arr←,⊂arr
:EndIf
r←'{'
:For i :In ⍳⍴arr
p←i⊃arr
:If (isChar p)<isChar⊃p
r,←(1⊃p),':'
:Select |≡t←{(⊃⍣(1<≡⍵))⍵}1↓p
:CaseList 0 1
r,←fromAPL{(⊃⍣(isSingle ⍵))⍵}t
:Else
r,←toJQueryParameters⊃t
:EndSelect
:Else
r,←fromAPL p
:EndIf
r,←','
:EndFor
r←(¯1↓r),'}'
:EndIf
:EndIf
∇
∇ r←toAPLJAX nvp;verb;fmt;value;sel;x;d;strip
⍝ formats name/value pairs in a manner suitable for processing by the client side of APLJAX
⍝ essentially there are 4 verbs:
⍝ ('execute' javascript)
⍝ ('replace' selector)('data' html)
⍝ ('append' selector)('data' html)
⍝ ('prepend' selector)('data' html)
:Access public shared
nvp←,nvp
:If 0∊⍴nvp ⋄ r←'[]' ⋄ :Return ⋄ :EndIf
strip←{(⊂(1↑⍵),¯1↑⍵)∊'""' '[]' '{}':1↓¯1↓⍵ ⋄ ⍵}
⍝     fmt←{(isChar ⍵)>(isJSON ⍵)∨t←'⍎'=1↑,⍵:'"',(JAchars ⍵),'"'
fmt←{(isChar ⍵)>t←'⍎'=1↑,⍵:'"',(JAchars ⍵),'"'
⋄ t:1↓⍕⍵
⋄ strip toAPLJAX ⍵}
r←'['
:Select |≡nvp
:Case 1  ⍝ if depth 1, assume it's a JSON character string already
r←⍕nvp ⋄ :Return
:Case 2 ⍝ vector of vectors
:While ~0∊⍴nvp
:Select verb←⊃nvp
:Case 'execute'
r,←'{"',verb,'":',(fmt⊃1↓2↑nvp),'},'
nvp↓⍨←2
:CaseList 'replace' 'prepend' 'append'
x sel d value←4↑nvp
r,←'{"',verb,'":"',sel,'","',d,'":',(fmt value),'},'
nvp↓⍨←4
:Else
:EndSelect
:EndWhile
:Case 3  ⍝ could be (('execute' 'foo')('execute' 'goo')) OR (('replace' 'sel')('data' 'foo'))
:Select verb←⊃⊃nvp
:Case 'execute'
r,←∊',',⍨¨strip¨toAPLJAX¨nvp
:Else
(x sel)(d value)←nvp
r,←'{"',verb,'":"',sel,'","',d,'":',(fmt value),'},'
:EndSelect
:Case 4
r,←∊',',⍨¨strip¨toAPLJAX¨nvp
:EndSelect
r←(¯1↓r),']'
∇
∇ r←{a}fromTable w;z;t
:Access public shared
⍝ converts a table of APL data into a vector (1 per row in the table) of namespaces containing named objects
⍝ suitable for passing to JSON.fromAPL
⍝ a - (optional) column headings (names for the objects in the namespaces)
⍝ w - matrix of data, if a is not supplied, w[1;] is assumed to be the column headings
:If 0=⎕NC'a' ⋄ a←,1↑w ⋄ w↓⍨←1 ⋄ :EndIf
:If (80 82∊⍨⎕DR a) ⋄ :AndIf (⍴,a)=2⊃⍴w ⋄ a←,¨a ⋄ :EndIf
:If ~0∊⍴r←⎕NS¨(⊃⍴w)⍴⊂''
r(a{⍺.⍎'(',(⍕makeName¨⍺⍺),')←⍵'})¨{1=⍴⍵:⊃⍵ ⋄ ⍵}¨↓w
:EndIf
∇
∇ r←levels nestObjects nss;i;l;mask;n;current
⍝ nest a result of JSON.fromTable according to levels
⍝ nested items are in object "subItems"
:Access public shared
n←+/∧\levels=current←⊃levels
r←n↑nss
nss←n↓nss
levels←n↓levels
:If ~0∊⍴nss
n←+/∧\current<levels ⍝ nest the children
(⊃¯1↑r).subItems←,(n↑levels)nestObjects n↑nss
nss←n↓nss
levels←n↓levels
:EndIf
:If ~0∊⍴nss ⍝ anything left to do?
r,←levels nestObjects nss
:EndIf
∇
∇ r←{a}TableToJSON w
:Access public shared
:If 0=⎕NC'a' ⋄ r←fromAPL fromTable w
:Else ⋄ r←fromAPL a fromTable w
:End
∇
∇ r←aa Add(a w)
:Access public shared
r←a(aa{'{}'≡(1↑⍺⍺),¯1↑⍺⍺:(¯1↓⍺⍺),',',⍺,':',⍵,'}' ⋄ ⍺⍺,',',⍺,':',⍵})w
∇
:EndSection
:Section XML                                                 ⍝ DanB 2011/12
∇ xml←{name}toXML str;c1;end;b;tag;beg;item
⍝ Parse JSON string into XML
:Access public shared
:If 0=⎕NC'name' ⋄ name←'json' ⋄ :EndIf
tag←''≢name
⍝ An empty name is an indication that we want the Value only w/o a complete Tag
end←tag/'</',name,'>' ⋄ beg←tag/'<',name ⋄ item←tag/'<item'
:If '{'=c1←1↑str←trim str~⎕UCS 8 9 10 13
'Invalid JSON: expected }'⎕SIGNAL 600 if'}'≠¯1↑str
xml←beg,' type="object">',(parseObj strip str),end
:ElseIf '['=c1
'Invalid JSON: expected ]'⎕SIGNAL 600 if']'≠¯1↑str
xml←beg,' type="array">',(parseArr'[]'strip str),end
:ElseIf '"'=c1
xml←item,'>',(XJchars'""'strip str),tag/'</item>' ⍝ we could add  type="string"
:ElseIf ∨/b←'null' 'true' 'false'∊⊂str
xml←item,' type="',((b⍳1)⊃1 2/'null' 'boolean'),'">',(~1↑b)/str
xml←xml,(tag/'</item>')
:ElseIf (,1)≡⎕IO⊃b←⎕VFI fixNum str ⍝ allow nn+Emm
xml←item,' type="number">',str ⍝ we could also use '17⍕b'
xml←xml,(tag/'</item>')
:Else
'INVALID JSON'⎕SIGNAL 11
:EndIf
∇
∇ str←{options}fromXML xml;head;Q;b;ot;n;type
⍝ Parse XML statement into JSON
:Access public shared
:If 0=⎕NC'options' ⋄ options←0 ⋄ :EndIf     ⍝ do we quote names?
n←⍴head←xml↑⍨'>'⍳⍨xml←trim xml
xml←{'>'≠¯1↑⍵:⍵ ⋄ ⍵↓⍨-'<'⍳⍨⌽⍵}n↓xml
:If 'array'≡type←5↑(head⍳'"')↓head
→0↓⍨⍴xml{⍺}str←'[]'
str←'[',(1↓∊',',¨options∘fromXML¨cutItems xml),']'
:ElseIf 'objec'≡type
→0↓⍨⍴xml{⍺}str←'{}'
str←'{',(1↓∊',',¨options∘getObject¨cutObjects xml),'}'
:Else ⍝ may be boolean or null if empty
:If ~'='∊head ⋄ str←Q,(JXchars xml),Q←'"'
:ElseIf 0∊⍴xml ⋄ str←'null'
:Else ⋄ str←xml ⍝ boolean?
:EndIf
:EndIf
∇
∇ str←XJchars str;set;sl;msk;bfnrt;u;b;x;⎕IO;Hex;i
⍝ Get XML from a JSON string
→0↓⍨⍴,str ⋄ ⎕IO←0
sl←(¯1⌽msk←isBslash str)∧str∊bfnrt←'bfnrtu'
:If ∨/b←str∊set←'<>&"' ⍝ we could also change other specific chars here
(b/str)←'&lt;' '&gt;' '&amp;' '&quot;'[set⍳b/str]
:EndIf
:If ∨/sl
b←sl\~u←'u'=sl/str
(b/str)←⎕UCS 8 12 10 13 9[bfnrt⍳b/str]
:If ∨/b←sl\u ⍝ any \Uxxxx number?
Hex←⎕D,'abcdef',⎕D,'ABCDEF'
x←16⊥⍉16|Hex⍳str[i←(b/⍳⍴b)∘.+1+⍳4]
(b/str)←⎕UCS x
msk[i]←1 ⍝ mask out these positions
:EndIf
:EndIf
str←⊃,/(~msk)/str
∇
∇ str←JXchars str;char;b;msk;i;rep;seq;fnrbt
⍝ Get JSON from an XML &..; sequences
msk←1 ⋄ seq←';&#x'∘,¨'CAD89cad' ⋄ fnrbt←⎕UCS 12 10 13 8 9
:For char rep :InEach ('&lt;' '&gt;' '&quot;' '&amp;',seq)('<>"&',8⍴fnrbt)
i←b/⍳⍴b←char⍷str
msk>←≠\(¯1⌽b)∨(-⍴b)↑(-⍴char)↓b
str[i]←rep
:EndFor
str←msk/str
str←JAchars str
∇
∇ slash←isBslash txt;t
⍝ Find where real backslashes are
slash←'\'=txt           ⍝ need to check for multiple \
t←slash>¯1↓0,slash      ⍝ start of each group of \
slash←slash∧t us slash  ⍝ where the real \ are
∇
∇ mask←isText json;t;slash;quote
quote←'"'=json          ⍝ find double quotes (they delimit strings)
slash←isBslash json
quote←quote>¯1↓0,slash  ⍝ where the real " are
mask←quote∨≠\quote
∇
∇ list←parseArr s;txt;level;split
⍝ Surrounding '[]'s not present here
⍝ Elements are separated by ','
→(s∧.=' ')⍴⍴list←''
⍝ Find the separating commas
txt←isText s
level←(+\txt<s∊'[{')-+\txt<s∊']}'
split←1,(s=',')∧txt<level=0
list←∊'item'∘toXML¨1↓¨split⊂';',s
∇
∇ obj←parseObj s;txt;level;split;n;pairs;x
⍝ Surrounding '{}'s not present here
⍝ Elements are separated by ','
→(s∧.=' ')⍴⍴obj←''
⍝ Find the separating commas
txt←isText s
level←(+\txt<s∊'[{')-+\txt<s∊']}'
n←+/split←1,(s∊',:')∧txt<level=0
'Invalid JSON: unbalanced braces or brackets'⎕SIGNAL 600 if(2|n)∨0≠¯1↑level
x←0,{0}¨pairs←trim¨(n÷2)2⍴1↓¨split⊂';',s
x[;1]←n←{validName⊢n←deQuote ⍵:'<',n ⋄ 1⌽'"<SN name="',XJchars n}¨pairs[;1]
x[;3]←{1⌽'></',1↓(¯1+⍵⍳' ')↑⍵}¨n ⍝ end tag
x[;2]←''∘toXML¨pairs[;2]
obj←⊃,/,x
∇
∇ vtv←cutObjects xml;b;n;ot;level
b←'<'=xml ⋄ n←1↓0,⍨'/'=xml
level←(+\ot←b>n)-+\b∧n
vtv←(ot∧level=1)⊂xml
∇
∇ vtv←cutItems xml;level;start;mask
⍝ Cut XML into pieces based on the <item> tag
mask←0≠level←(+\start←'<item'⍷xml)-+\'</item'⍷xml
vtv←(mask/start∧level=1)⊂mask/xml
∇
∇ str←quote getObject xml;n;head;name;b;Q;data
⍝ Transform XML into JSON
n←⍴head←xml↑⍨'>'⍳⍨xml←trim xml ⋄ data←trim{⍵↓⍨-'<'⍳⍨⌽⍵}n↓xml
name←'<>'strip head
:If ∨/b←'name='⍷head
name←JXchars{⍵↑⍨¯1+⍵⍳'"'}(5+b⍳1)↓head
:Else ⋄ b←' '=name ⍝ 2<+/name='"'
name←(¯1+b⍳1)↑name
:EndIf
:If quote
:OrIf ~validName name
name←Q,name,Q←'"'
:EndIf
⍝ If the type is boolean or number then nothing to do.
:If ∨/b←'type='⍷head
:Select 5↑(5+b⍳1)↓head
:Case 'array'
data←1⌽'][',1↓⊃,/',',¨quote∘fromXML¨cutItems xml
:Case 'objec'
data←1⌽'}{',1↓⊃,/',',¨quote∘getObject¨cutObjects data
⍝ If null then the result is 'null'
:Case 'null"'
data←'null'
:EndSelect
:Else ⍝ string
data←Q,(JXchars data),Q←'"'
:EndIf
str←name,':',data
∇
:endsection XML
:section Utils
∇ r←{level}Tree ns;n;t;nms
⍝ Return indented name tree of APL namespace representation of JSON array
⍝ ns - reference to namespace created by JSON.toAPL
:Access public shared
r←''
:If 0=⎕NC'level' ⋄ level←0 ⋄ :EndIf
:If 2<≡nms←ns.⎕NL-2 9 ⋄ nms←⊃,/nms ⋄ :EndIf
:For n :In nms
r,←⊂((2×level)⍴' '),n
t←ns⍎n
:Select ⊃ns.⎕NC n
:Case 2
:If 326=⎕DR t
r,←(level+1)Tree⊃t
:EndIf
:Case 9
r,←(level+1)Tree⊃t
:EndSelect
:EndFor
:If level=0 ⋄ r←↑r ⋄ :EndIf
∇
∇ r←{level}TreeNames ns;n;t;nms;l
⍝ Return namelist of APL namespace representation of JSON array
⍝ ns - reference to namespace created by JSON.toAPL
:Access public shared
r←''
:If 0=⎕NC'level' ⋄ level←'' ⋄ :EndIf
:If 2<≡nms←ns.⎕NL-2 9 ⋄ nms←⊃,/nms ⋄ :EndIf
:For n :In nms
l←level,(0∊⍴level)↓'.',n
t←ns⍎n
:Select ⊃ns.⎕NC n
:Case 2
:If 326=⎕DR t
r,←l TreeNames⊃t
:Else
r,←⊂l
:EndIf
:Case 9
r,←l TreeNames⊃t
:EndSelect
:EndFor
∇
:endsection
:section test
∇ testAPL;apl;ns;ns2;js;t;bad;rl
:Access public shared
{}÷js≡fromAPL toAPL js←'[]'
{}÷js≡fromAPL toAPL js←'[{}]'
{}÷js≡fromAPL toAPL js←'[[]]'
{}÷js≡fromAPL toAPL js←'[{"":12}]'
{}÷js≡fromAPL toAPL js←'[{"2":null}]'
{}÷js≡fromAPL toAPL js←'[1]'
{}÷js≡fromAPL toAPL js←'[true]'
{}÷js≡fromAPL toAPL js←'["true"]'
{}÷js≡fromAPL toAPL js←'[false,{}]'
{}÷js≡fromAPL toAPL js←'null'
{}÷js≡fromAPL toAPL js←'[[1,1],[1,2],[1,3],[2,1],[2,2],[2,3]]'
{}÷js≡fromAPL toAPL js←'[null,[]]'
{}÷js≡fromAPL toAPL js←'[[["J","zz0",["C",[32767,"C3",4.288882164521665],"0","O"]]]]'
js←'[["42",[32767],-128,["CsaD",2.849477978087825],"2N"],"Q",["$,1"],[[127],["VI6B",false,"51"],"H",'
js,←'"FSHMNY*",[null,"C","\u00A3",true,32768,"54"],"1"],["\u00A3","BGRKW",2.1447],"3",["MGOB","O",["*C",32'
js,←'767,"N","K",2.84925],false,[42.59174222]]]'
{}÷js≡t←fromAPL toAPL js
js←'[[["M",["K",2.84,"Zz"],"6"],["&ZV"],[[null,"H8",32768,"\u00A394"],["G",false],["MJ",32767,"P"],["Y"]],'
js,←'["J"],["9B$B0"],[["N",0.046117597181290375,-128]]]]'
{}÷js≡t←fromAPL toAPL js
{}÷js≡t←fromAPL toAPL js←'[[],[]]'
{}÷js≡t←fromAPL toAPL js←'["2"]'
bad←{600:: ⋄ ÷fromAPL toAPL ⍵}
bad¨'[{[]}]' '[][]]' '{}{}' '[][]' '[[][]]' '{"\""}'
{}÷js≡fromAPL toAPL js←'{}'
{}÷js≡fromAPL toAPL js←'{";":[]}'
{}÷js≡fromAPL toAPL js←'{"\"":21}'
{}÷'{z1:"dsa"}'≡t←fromAPL toAPL js←'{"z1":"dsa"}'
{}÷js≡t←1 fromAPL toAPL js←'{"z1":"dsa"}'
⍝ There are no "scalar strings", scalars chars MUST be ravelled
{}÷apl≡0 toAPL 0 fromAPL apl←,⍳2 3
{}÷apl≡t←0 toAPL 0 fromAPL apl←(54,⊂,'s')(⎕D'zzzz' 567)('asd'('zz'(⍳8)))
{}÷apl≡t←1 toAPL 0 1 fromAPL apl←'asd' '',⊂2 1 1⍴99,⊂2 3⍴⎕NULL,(⊂,'s'),2 'asd'(⍪90)(1 2 3)
{}÷apl≡t←1 toAPL 0 1 fromAPL apl←2 13⍴⎕NULL,(⊂,'s'),⍳8
ns←⎕NS'' ⋄ ns.(a b c)←apl←2 'dsadsa'(0 23⍴5)
ns2←1 toAPL 0 1 fromAPL ns
{}÷9=⎕NC'ns2' ⋄ {}÷(⍪'abc')≡ns2.⎕NL 2 ⋄ {}÷apl≡ns2.(a b c)
{}÷(↓apl)≡0 toAPL 0 fromAPL apl←⍳2 3
:For t :In ⍳210
rl←⎕RL ⋄ js←fromAPL ns←makeDict 3 ¯9 2 1
{}÷js≡t←fromAPL toAPL js
:EndFor
∇
∇ testXML;apl;js;q;noQ;chk
:Access public shared
noQ←{⍺:⍵ ⋄ '([{,])"(.*?)":'⎕R'\1\2:'⊢⍵}
chk←{x←÷(q noQ ⍵)≡q fromXML toXML ⍵}
:For q :In 0 1
q chk apl←fromAPL 2 13⍴⎕NULL,'s',⍳8
q chk apl←fromAPL apl(⍳3 4)
q chk apl←fromAPL 2 2 2 2 2 3 3⍴⎕AV,⎕UCS⍳32
q chk apl←fromAPL''
q chk apl←fromAPL'''asd' '',⊂2 1 1⍴99,⊂2 3⍴⎕NULL,(⊂,'s'),2 'asd'(⍪90)(1 2 3)
q chk js←'{"z1":"dsa"}'
{}÷js≡q fromXML toXML js←'{"\"":21}'
q chk js←'{"z1":"dsa","cxz":[1,2,[33,44]]}'
q chk js←'{"z1":{"a":"bcder"}}'
:EndFor
∇
∇ testjQuery;disp
:Access public shared
disp←{⍵⊣⍞←⍕⍵}
{''}disp toJQueryParameters disp'hello' 'world'
{''}disp toJQueryParameters disp'h' 'world'
{''}disp toJQueryParameters disp('hello'('world' 12))
{''}disp toJQueryParameters disp('h'(12 13 14))
{''}disp toJQueryParameters disp(('h'(12 13 14))('b'(('cc'(13 'brian'))('cd' 23))))
∇
⎕RL←0
∇ ns←makeDict arg;depth;Nentries;i;name;value;⎕IO;VC;nvc
⍝ Create a dictionary. This is a list of name/value pairs encapsulated in a namespace.
⍝ The argument specifies the depth of the dictionary, the number (<0→max) of entries
⍝ and other parameters in the make up of objects themselves.
⍝ Ex: makeDict 3 ¯9 2 1 will create a dictionary 3 levels deep of max 9 names each depth 2 of vectors
ns←⎕NS⍴⎕IO←0 ⋄ nvc←⍴VC←⎕AV~⎕UCS 0 8 9 10 13 4
Nentries←{⍵≥0:⍵ ⋄ (×⍺)⌈?1+|⍵}/(depth Nentries)←2↑arg←arg,(⍴,arg)↓1 ¯10
:For i :In ?⍨Nentries
:While ('.'∊name)∨0≠ns.⎕NC name←makeName VC[?nvc⍴⍨{⍺⌊?3+⍵}⍣4⍨30] ⋄ :EndWhile
:If (depth>1)∧(i=1)∨1=?2 ⍝ recurse dictionnaries?
value←makeDict arg-(⍴arg)↑1
:Else
value←⍬ makeUpSomething⍨2↓arg
:EndIf
name ns.{⍎⍺,'←⍵'}value
:EndFor
∇
makeUpSomething←{ ⍝ build a structure at random from the argument
⎕IO←0         ⍝ ⍺ is depth, ⍴⍴, ⍴/axis, types to use (<0 means random)
⍝ Each leaf will be of one type, or mixed if ⍵ is ⍬
⍝ A depth ≤1 can generate strings
⍝ If ⍴⍴ or ⍴ are <0 then they constitude a maximum
ne←¯8 ⋄ rk←-?16 ⋄ la←1 rk ne 31 0 ⋄ ⍺←la
rk←noscalar⌈{⍵≥0:⍵ ⋄ ?1+|⍵}1⊃(de rk ne type noscalar)←la←⍺,(⍴,⍺)↓la
type←⌽2 2 2 2 2 2 2⊤type ⍝ boolean, int, float, char, nulls, complex, DECF
n←×/sh←ne genShape rk
ne=0:sh⍴0
data←,{~0∊⍴⍵:⍵ ⋄ ∊type/(false true)(127 ¯128 32767 ¯32769)R(⎕D,⎕A,'%&*£$')⎕NULL(+⌿1 ¯3.7J1.1∘.×R)({⎕FR←645 ⋄ ⍟|○⍵}R←¯6.04E¯23 5.5 ¯23.2(*1)(-÷3)1000000000000000000)}⍵
de≤1:sh{⍺≢⍬:⍵ ⋄ ,⍣(isChar ⍵)+⍵}v←data[?sh⍴⍴data]
v←sh⍴(?n)⌽n↑1  ⍝ at least one element must NOT be a simple scalar
∇{⍵ ⍺⍺ data}¨(4↑la-1↑⍨⍴la)∘,¨v
}
genShape←{⎕IO←0 ⋄ ⍺>0:⍵⍴⍺ ⍝ exact shape
1⌈?⍵⍴|⍺               ⍝ generate a shape of rank ⍵
}
:endsection tests
:Endclass ⍝ JSONdb  $Revision: 22317 $
﻿:Class MiPage : #.HtmlPage
⍝∇:require =\HtmlPage.dyalog
⍝∇:require =\JSON.dyalog
:Field Public _PageName←'' ⍝ Page file name
:Field Public _PageDate←'' ⍝ Page saved date
:field Public _Request     ⍝ HTTPRequest
:field Public _Scripts←''
:field Public _Styles←''
:field Public _CssReset←''    ⍝ location of CSS Reset file (if any)
:field Public _CssOverride←'' ⍝ location of CSS Override file (if any)
:field Public _Serialized←1   ⍝ serialized forms to return in _PageData
:field Public _event          ⍝ set by APLJAX callback - event that was triggered
:field Public _what           ⍝ set by APLJAX callback - name or id of the triggering element
:field Public _value          ⍝ set by APLJAX callback - value of the triggering element
:field Public _selector       ⍝ set by APLJAX callback - CSS/jQuery selector for the element that triggered the event
:field Public _callback       ⍝ set by APLJAX callback - name of the callback function
:field Public _target         ⍝ set by APLJAX callback - id of the target element
:field Public _currentTarget  ⍝ set by APLJAX callback - id of the currentTarget element
:field Public _PageData       ⍝ namespace containing any data passed via forms or URL
:field Public _AjaxResponse←''
:field Public _DebugCallbacks←0
:field Public _TimedOut←0
:field Public _Sessioned←1    ⍝ by default save page instance in session
:field Public _cache←''       ⍝ cached content if page is marked cacheable
:field Public OnLoad←''       ⍝ page equivalent to ⎕LX
:field Public Cacheable←0     ⍝ is the page cacheable?
:field Public Charset←'UTF-8' ⍝ charset for page
_used←'' ⍝ track what's been Use'd
∇ Make
:Access public
:Implements constructor :Base
MakeCommon
∇
∇ Make1 req
:Access public
_Request←req
:Implements constructor :base
MakeCommon
∇
∇ MakeCommon
_PageData←⎕NS''
∇
∇ {r}←Render;b;styles;_head;_body;_styles;_scripts;t;i
:Access public
⍝  Capture the current Head and Body content so that we can reset it after rendering
⍝  This is so we can re-render and still get the same result
(_head _body)←(Head Body).Content
(_styles _scripts)←_Styles _Scripts
:If ''≢OnLoad
{0:: ⋄ Use'JQuery'}''
:EndIf
b←RenderBody
:If ~0∊⍴_Scripts
{(Insert _html.script).Set('src'⍵)}¨⌽∪_Scripts
:EndIf
styles←∪_Styles
styles←styles,⍨{0∊⍴⍵:⍵ ⋄ ⊂⍵}_CssReset
styles←styles,{0∊⍴⍵:⍵ ⋄ ⊂⍵}_CssOverride
:If ~0∊⍴styles
{Insert #._DC.StyleSheet ⍵}¨⌽∪styles
:EndIf
t←''
:If ~0∊⍴Handlers
t←,∊Handlers.Render
:EndIf
:If ~0∊⍴OnLoad
t,←(⎕NEW #._html.script('$(function(){',OnLoad,'});')).Render
:EndIf
:If ~0∊⍴t
:If '</body>'≡¯7↑b
i←¯7
:Else
i←-6+⊃⍸'>ydob/<'⍷⌽b
:EndIf
b←(i↓b),t,i↑b
:EndIf
:If ''≢OnLoad
:EndIf
:If 0∊⍴⊃Attrs[⊂'lang'] ⍝ set the language for the page if not already set
{0:: ⋄ {Set'lang="',⍵,'" xml:lang="',⍵,'" xmlns="http://www.w3.org/1999/xhtml"'}_Request.Server.Config.Lang}''
:EndIf
:If ~0∊⍴Charset
Insert _html.meta''('charset="',Charset,'"')
:EndIf
r←RenderPage b
:If 0≠⎕NC⊂'_Request.Response'
_Request.Response.HTML←r
:EndIf
(Head Body).Content←_head _body
_Styles←_styles
_Scripts←_scripts
_used←''
∇
∇ {r}←Wrap
:Access public
r←Render
:If Cacheable ⋄ _cache←r ⋄ :EndIf
∇
∇ Use resources;n;ind;t;x;server
:Access public
resources←eis resources
:For x :In resources
:If ~(⊂x)∊_used
:Select ⊃x
:Case '⍎' ⍝ script
_Scripts,←⊂1↓x
:Case '⍕' ⍝ style sheet
_Styles,←⊂1↓x
:Else
:If 0≠⎕NC'_Request.Server'
server←_Request.Server
:ElseIf 0≠⎕NC'#.Boot.ms'
server←#.Boot.ms
:EndIf
:If 0≠server.⎕NC⊂'Config.Resources'
:AndIf ~0∊n←1↑⍴server.Config.Resources
:If n≥ind←server.Config.Resources[;1]⍳⊂x
:If ~0∊⍴t←{(~0∘∊∘⍴¨⍵)/⍵}(⊂ind 2)⊃server.Config.Resources
_Scripts,⍨←t
:EndIf
:If ~0∊⍴t←{(~0∘∊∘⍴¨⍵)/⍵}(⊂ind 3)⊃server.Config.Resources
_Styles,⍨←t
:EndIf
:Else
1 server.Log _PageName,' references unknown resource: ',x
:EndIf
:EndIf
:EndSelect
_used,←⊂x
:EndIf
:EndFor
∇
∇ r←{proto}Get names;noproto;char
⍝ names is a single name, a vector of vectors of names, or a space-delimited list of names
⍝ {proto} is the optional prototypical value if a name is not found
:Access public
:If noproto←⊃0=⎕NC'proto' ⋄ proto←'' ⋄ :EndIf ⍝ default prototype is empty
names←eis names
names←,⍕names
names←#.Strings.deb names
:If ' '∊names
names←' '(≠⊆⊢)names
r←({⍬∘⍴⍣(1=≢⍵)⊢⍵}eis proto)Get¨names
:ElseIf ~(_PageData.⎕NC names)∊2 9 ⍝ by this time, names is a single name
r←,proto
:Else
r←_PageData⍎names
:If 2≤≡r
:If 1=⍴,r
r←⊃r
:EndIf
:EndIf
⍝↓↓↓ BPB - we don't want to gratuitously convert - e.g. 'null' 'true' '0002010'
⍝          :If noproto≥char←isChar proto
⍝          :AndIf isString r
⍝              r←#.JSON.toAPL r
⍝          :EndIf
⍝          :If noproto⍱isChar proto
⍝              :If 1≠2|⎕DR r
⍝                  r←,proto
⍝              :EndIf
⍝          :EndIf
r←#.Strings.tonum⍣(noproto⍱isChar proto)⊢r
:EndIf
∇
∇ r←GetNames str
:Access public
→0⍴⍨0∊⍴r←_PageData.⎕NL-2 9
→0⍴⍨0∊⍴str
r←r/⍨r #.Strings.beginsWith¨⊂str
∇
∇ r←{proto}GetRaw names
:Access public
proto←{6::⍵ ⋄ proto}''
names←eis names
names←,⍕names
names←#.Strings.deb names
:If ' '∊names
names←{⎕ML←3 ⋄ ⍵⊂⍨⍵≠' '}names
r←proto∘Get¨names
:ElseIf 2≠_PageData.⎕NC names
r←,proto
:Else
r←_PageData⍎names
:If 2=≡r
:If 1=⍴,r
r←⊃r
:EndIf
:EndIf
:If ~isChar proto
r←{0::⍵ ⋄ 0∊⍴⍵:⍬ ⋄ w←⍵ ⋄ ((w='-')/w)←'¯' ⋄ ⊃(//)⎕VFI w}r
:EndIf
:EndIf
∇
∇ r←{proto}SessionGet names
:Access public
proto←{6::⍵ ⋄ proto}''
names←,⍕names
names←#.Strings.deb names
:If ' '∊names
names←{⎕ML←3 ⋄ ⍵⊂⍨⍵≠' '}names
r←proto∘SessionGet¨names
:ElseIf 0=_Request.⎕NC⊂'Session'
:OrIf 0=_Request.Session.⎕NC names
r←proto
:Else
r←_Request.Session⍎names
:If 1<|≡r ⋄ r←∊r ⋄ :EndIf
:If ~0 2∊⍨10|⎕DR proto  ⍝ if the prototype is numeric
:AndIf 0 2∊⍨10|⎕DR r    ⍝ and the element is character
r←{0∊⍴⍵:⍬ ⋄ w←⍵ ⋄ ((w='-')/w)←'¯' ⋄ ⊃(//)⎕VFI w}r
:EndIf
:EndIf
∇
∇ _Close session ⍝ Called when the session ends
⍝ this method is specific to #.SimpleSessions and is called when a session is terminated
:Access Public Overridable
∇
:section APLJax  ⍝ used for building APLJAX responses
∇ _resetAjax
:Access public
_AjaxResponse←''
∇
∇ r←_id
:Access public
⍝ as there seems to be a problem with at least some Syncfusion widgets
⍝ being able to provide the id (or name) of the triggering element, we try to obtain it from _what or _selector
r←''
:Trap 0
:If 0∊⍴r←_what
:AndIf '#'=⊃_selector
r←1↓_selector
:EndIf
:EndTrap
∇
∇ r←renderContent content;c
:Access public shared
r←''
content←eis content
:Trap 0
:While ~0∊⍴content
:Select ≡c←⊃content
:Case 0
:If isClass c
:Select ⊃⍴content
:Case 1
r,←(⎕NEW c).Render
:Case 2
r,←(⎕NEW c(2⊃content)).Render
:Else
r,←(⎕NEW c(1↓content)).Render
:EndSelect
:ElseIf isInstance c
r,←c.Render
:Else
r,←(⎕NEW #.HtmlElement(''content)).Render
:EndIf
content←''
:Case 1
:If isClass⊃c
r,←(⎕NEW(⊃c)(1↓c)).Render
:ElseIf isInstance⊃c
∘∘∘ ⍝ should not happen! (I think)
:Else
r,←(⎕NEW #.HtmlElement(''c)).Render
:EndIf
content←1↓content
:Else
r,←renderContent c
content←1↓content
:EndSelect
:EndWhile
:Else
:If (⎕EN≥100)∧(⎕EN≤999) ⍝ HTTP status rather than an APL error
:AndIf 0≠⎕NC⊂'_Request.Response' ⍝ we're actually running a server, not rendering in session
_Request.Fail ⎕EN
:Else ⍝ APL errors and in-session errors are not trapped:
⎕SIGNAL ⎕DMX.(⊂{⍵(⍎⍵)}¨(⎕NL-⍳9)~'InternalLocation' 'DM' 'OSError') ⍝ re-signal
:EndIf
:EndTrap
∇
∇ r←selector Replace content
:Access public shared
r←⊂('replace'selector)('data'(renderContent content))
∇
∇ r←selector Append content
:Access public shared
r←⊂('append'selector)('data'(renderContent content))
∇
∇ r←selector Prepend content
:Access public shared
r←⊂('prepend'selector)('data'(renderContent content))
∇
∇ r←Execute content
:Access public shared
r←⊂('execute'(renderContent content))
∇
∇ r←name Assign data
:Access public shared
r←⊂('assign'name)('data'data)
∇
:endsection
:section Position
∇ ref Position args;inds;mask;parameters;my;at;of;collision;within;q
:Access public
⍝ ref  - a reference to an instance of anything based on HtmlElement
⍝ args - position information per jQueryUI's Position widget http://api.jqueryui.com/position/
⍝        can be in any of the following forms
⍝      1) positional (my at of collision within)  N.B. we don't use the "using" parameter
⍝         example:  myDiv Position 'left top' 'right bottom' '#otherElement'
⍝                   positions myDiv's top left corner at the bottom right corner of the element with id "otherElement"
⍝      2) paired
⍝                   myDiv Position 'my' 'left top' 'at' 'right bottom' 'of' '#otherElement'
⍝                   myDiv Position ('my' 'left top') ('at' 'right bottom') ('of' '#otherElement')
⍝                   myDiv Position 3 2⍴'my' 'left top' 'at' 'right bottom' 'of' '#otherElement'
⍝ Note: positional arguments are in form horizontal (left center right) vertical (top center bottom)
parameters←'my' 'at' 'of' 'collision' 'within'
q←{1⌽'''''',{⍵/⍨1+''''=⍵}⍕⍵}
:If isInstance ref
:If 2=⍴⍴args ⍝ matrix
args←,args
:ElseIf 3=≡args
args←⊃,/args
:EndIf
args←eis args
inds←parameters⍳args
:If ∨/mask←inds≤⍴parameters
:If mask≡(2×+/mask)⍴1 0
parameters←mask/args
args←(1⌽mask)/args
:EndIf
:Else
parameters←(⍴args)↑parameters
:EndIf
mask←⍬∘≢¨args
args←mask/args
parameters←mask/parameters
parameters(ref{⍺⍺⍎'Position.',⍺,'←',q ⍵})¨args
ref.Uses,←⊂'JQueryUI'
SetUse
:EndIf
∇
:endsection
:section Event Handling Support
∇ r←isPost
:Access public
r←{0::0 ⋄ _Request.isPost}⍬
∇
∇ r←isAPLJax
:Access public
r←{0::0 ⋄ _Request.isAPLJAX}⍬
∇
∇ r←sel Css args ⍝ JQuery css cover
:Access public
r←(sel #._JSS.JQuery'css')args
∇
∇ r←sel Val args ⍝ JQuery val cover
:Access public
r←(sel #._JSS.JQuery'val')args
∇
∇ r←sel Prop args ⍝ JQuery prop cover
:Access public
r←(sel #._JSS.JQuery'prop')args
∇
∇ r←sel Attr args ⍝ JQuery attr cover
:Access public
r←(sel #._JSS.JQuery'attr')args
∇
∇ r←sel RemoveAttr args ⍝ JQuery removeAttr cover
:Access public
r←(sel #._JSS.JQuery'removeAttr')args
∇
∇ r←sel Html args ⍝ JQuery html cover
:Access public
r←(sel #._JSS.JQuery'html')args
∇
∇ r←sel Show args ⍝ JQuery show cover
:Access public
r←(sel #._JSS.JQuery'show')args
∇
∇ r←sel Hide args ⍝ JQuery hide cover
:Access public
r←(sel #._JSS.JQuery'hide')args
∇
∇ r←sel Toggle args ⍝ JQuery toggle cover
:Access public
r←(sel #._JSS.JQuery'toggle')args
∇
∇ r←Submit sel ⍝ JQuery submit cover
:Access public
r←(sel #._JSS.JQuery'submit')''
∇
:endsection
:EndClass
﻿:Class MiServer
⍝ This is the core web server class - do not modify it!
⍝ Customized web servers should be based on this class - e.g.  :Class MyServer : MiServer
:Field Public Config
:Field Public TID←¯1                ⍝ Thread ID Server is running under
:Field Public BlockSize←640000      ⍝ Blocksize when returning files
:Field Public SessionHandler
:Field Public Authentication
:Field Public Logger
:Field Public Application
:Field Public PageTemplates←⍬
:Field Public Encoders←⍬  ⍝ pointers to instances of content encoders
:Field Public Datasources←⍬
:Field Public StartTime←⍬
:field Public Connections←⍬ ⍝ list of connections
:Field ServerName
⎕TRAP←0/⎕TRAP ⋄ (⎕ML ⎕IO)←1 1
unicode←80=⎕DR 'A'
NL←(CR LF)←⎕UCS 13 10
FindFirst←{(⍺⍷⍵)⍳1}
setting←{0=⎕NC ⍵:⍺ ⋄ ⍎⍵}
endswith←{(,⍺){⍵≡⍺↑⍨-⍴⍵},⍵}
bit←{⎕IO←0  ⍝ used by Log
0=⍺:0 ⍝ all bits turned off
¯1=⍺:1 ⍝ all bits turned on
(⌈2⍟⍵)⊃⌽((1+⍵)⍴2)⊤⍺}
:section Override
⍝ ↓↓↓--- Methods which are usually overridden ---
∇ onServerLoad
:Access Public Overridable
⍝ Handle any server initialization prior to starting
∇
∇ onServerStart
:Access Public Overridable
⍝ Handle any server startup processing
∇
∇ onSessionStart req
:Access Public Overridable
⍝ Process a new session
∇
∇ onSessionEnd session
:Access Public Overridable
⍝ Handle the end of a session
∇
∇ onHandleRequest req
:Access Public Overridable
⍝ Called whenever a new request comes in
∇
∇ onHandleMSP req
:Access Public Overridable
⍝ Called when MiPage invoked
∇
∇ onIdle
:Access Public Overridable
⍝ Idle time handler - called when the server has gone idle for a period of time
∇
∇ Error req
:Access Public Overridable
⍝ Handle trapped errors
req.Response.HTML←'<font face="APL385 Unicode" color="red">',(⊃,/⎕DM,¨⊂'<br/>'),'</font>'
req.Fail 500 ⍝ Internal Server Error
1 Log ⎕DM
∇
∇ level Log msg
:Access Public overridable
⍝ Logs server messages
⍝ levels implemented in MildServer are:
⍝ 1-error/important, 2-warning, 4-informational, 8-transaction (GET/POST)
:If Config.LogMessageLevel bit level ⍝ if set to display this level of message
⎕←msg ⍝ display it
:EndIf
∇
∇ Cleanup
:Access Public overridable
⍝ Perform any site specific cleanup
∇
⍝ ↑↑↑--- End of Overridable methods ---
:endsection
⍝ ↓↓↓--- Begin MildServer Core Code
:section Start/Stop
∇ Run
:Access Public
('Already Running on Thread',⍕TID)⎕SIGNAL(TID∊⎕TNUMS)/11
onServerLoad
TID←RunServer&⍬
∇
∇ End
⍝ Called by destructor
:Access Public
{0:: ⋄ Logger.Stop ⍬}⍬
:If 0≠⎕NC'ServerName'
'Not running'⎕SIGNAL(#.DRC.Exists ServerName)↓11
{}#.DRC.Close ServerName
:Trap 6 ⍝ ⎕TSYNC may not return a value if the thread doesn't, so handle the possible VALUE ERROR
{}⎕TSYNC ⎕TID~⍨TID∩⎕TNUMS
:EndTrap
:EndIf
Cleanup ⍝ overridable
TID←¯1
∇
:endsection
∇ r←RunServer arg;Stop;StartTime;⎕TRAP;idletime;wres;rc;obj;evt;data;conx;ts;congaError
⍝ Simple HTTP (Web) Server framework
⍝ Assumes Conga available in #.DRC and uses #.HTTPRequest
⍝ arg: dummy
⍝ certs: RootCertDir, ServerCert, ServerKey (optional: runs Secure server)
Stop←0
StartTime←⎕TS
:If Config.TrapErrors>0
⎕TRAP←#.DrA.TrapServer
:EndIf ⍝ Trap MiServer Errors. See HandleMSP for Page Errors.
onServerStart ⍝ meant to be overridden
:If 0≠#.DRC.⎕NC⊂'Error' ⋄ congaError←#.DRC.Error ⍝ Conga 3.2 moved Error into the library instance
:Else ⋄ congaError←#.Conga.Error                 ⍝ Prior to 3.2 Error was in the namespace
:EndIf
idletime←#.Dates.DateToIDN ⎕TS
:While ~Stop
wres←#.DRC.Wait ServerName Config.WaitTimeout ⍝ Wait for WaitTimeout before timing out
⍝ wres: (return code) (object name) (command) (data)
(rc obj evt data)←4↑wres
:Select rc
:Case 0 ⍝ Good data from RPC.Wait
:Select evt
:Case 'Error'
:If ServerName≡obj
Stop←1
:Else
ConnectionDelete obj
:EndIf
:If 0≠4⊃wres
(1+(4⊃wres)∊1008 1105 1119)Log'RunServer: DRC.Wait reported error ',(⍕congaError 4⊃wres),' on ',2⊃wres
:EndIf
:Case 'Connect'
ConnectionNew obj
:CaseList 'HTTPHeader' 'HTTPTrailer' 'HTTPChunk' 'HTTPBody'
:If 0≢conx←1 ConnectionUpdate obj
{}conx{{}⍺ HandleRequest ⍵}&wres
:Else
∘∘∘ ⍝!!! debug !!!
:EndIf
:Case 'Timeout'
SessionHandler.HouseKeeping ⎕THIS
:If 0<Config.IdleTimeout ⍝ if an idle timeout (in seconds) has been specified
:AndIf Config.IdleTimeout<86400×-/(ts←#.Dates.DateToIDN ⎕TS)idletime ⍝ has it passed?
onIdle
idletime←ts
:EndIf
:Case 'Closed'
ConnectionDelete obj
:Else ⍝ unhandled event
2 Log'Unhandled Conga event:'
2 Log wres
:EndSelect
:Case 1010 ⍝ Object Not found
1 Log'Object ''',ServerName,''' has been closed - Web Server shutting down'
→EXIT
:Else
1 Log'Conga wait failed:'
1 Log wres
:EndSelect
ConnectionCleanup
:EndWhile
RESUME: ⍝ Error Trapped and logged
{}#.DRC.Close ServerName
1 Log r←'Web server ''',ServerName,''' stopped '
EXIT:
:If Config.CloseOnCrash
⎕OFF
:EndIf
∇
⍝ --- Connection management ---
∇ {conx}←ConnectionNew objname;z;rc
:Hold 'Connections'
Connections,⍨←conx←⎕NS''
conx.(CongaObjectName PeerCert)←objname''
conx.(Active LastActive)←1(3⊃⎕AI)
:If 0=1⊃z←#.DRC.GetProp conx.CongaObjectName'PeerAddr'
conx.PeerAddr←2⊃2⊃z
:Else
conx.PeerAddr←'Unknown'
:EndIf
:If Config.Secure
(rc z)←2↑#.DRC.GetProp conx.CongaObjectName'PeerCert'
:If rc=0
conx.PeerCert←z
:Else
1 Log'Unable to obtain peer certificate over secure connection - request ignored'
conx←0
:EndIf
:EndIf
:EndHold
∇
∇ conx←ConnectionGet objname;n;i
⍝ needs to be called within a "held" environment
conx←0
:If 0≠n←⍴Connections
:AndIf n≥i←Connections.CongaObjectName⍳⊂objname
conx←i⊃Connections
:EndIf
∇
∇ conx←state ConnectionUpdate objname;n;i
:Hold 'Connections'
:If 0≢conx←ConnectionGet objname
conx.(Active LastActive)←state(3⊃⎕AI)
:EndIf
:EndHold
:If 0=conx
conx←ConnectionNew objname
:EndIf
∇
∇ {congaClose}ConnectionDelete con
⍝ assumes Conga connection is closed elsewhere
:If 0=⎕NC'congaClose' ⋄ congaClose←0 ⋄ :EndIf
:Hold 'Connections'
:If 9=⎕NC'con'
:If congaClose
:EndIf
Connections~←con
:Else
:If congaClose
:EndIf
:If ~0∊⍴Connections
Connections/⍨←Connections.CongaObjectName≢¨⊂con
:EndIf
:EndIf
:EndHold
∇
∇ ConnectionCleanup;mask
→0
:Hold 'Connections'
:If ~0∊⍴Connections
:AndIf 0≠+/mask←Connections.Active<10000<⎕AI[3]-Connections.LastActive
Connections/←~mask
:EndIf
:EndHold
∇
:section Constructor/Destructor
∇ Make config;CongaVersion;rc;allocated;port;ports
:Access Public
:Implements Constructor
SessionHandler←⎕NS''
Authentication←⎕NS''
Logger←⎕NS''
Application←⎕NS''
SessionHandler.GetSession←{}   ⍝ So we can always
SessionHandler.HouseKeeping←{} ⍝    call these fns
Authentication.Authenticate←{} ⍝    without worrying
Logger.Log←{}
Logger.Stop←{}
Logger.Start←{}
Config←config
PageTemplates←#.Pages.⎕NL ¯9.4
allocated←0
:For port :In ports←∪Config.(Port,Ports)
:If allocated←0=1⊃,AllocatePort port
Config.Port←port
:Leave
:EndIf
:EndFor
('Unable to allocate any TCP/IP port in ',1↓∊⍕¨',',¨ports)⎕SIGNAL(~allocated)/11
{}#.DRC.SetProp'.' 'EventMode' 1 ⍝ report Close/Timeout as events
{}#.DRC.SetProp ServerName'FIFOMode'Config.FIFOMode
{}#.DRC.SetProp ServerName'DecodeBuffers'(15×Config.DecodeBuffers)
∇
∇ UnMake
:Implements Destructor
:Trap 0 ⋄ End ⋄ :EndTrap
∇
∇ r←AllocatePort port;ipv;server;msg
⍝ Starts Conga server, allocates TCP/IP port
:If Config.Secure
:If ∧/(~0∊⍴)¨Config.(CertFile KeyFile)
:AndIf ⊃∧/#.Files.Exists¨Config.(CertFile KeyFile)
{}#.DRC.SetProp'.' 'RootCertDir'Config.RootCertDir
server←1⊃#.DRC.X509Cert.ReadCertFromFile Config.CertFile
server.KeyOrigin←'DER'Config.KeyFile
→(0≠1⊃r←#.DRC.Srv'' ''port'http' 10000('X509'server)('SSLValidation'Config.SSLFlags))⍴0 ⍝ Must have Conga v2.1
1 Log'Starting secure server using certificate ',Config.CertFile
:Else
1 Log'Invalid certificate parameters'
r←1
→0
:EndIf
:Else
→(0≠1⊃r←#.DRC.Srv'' ''port'http' 10000)⍴0
:EndIf
ServerName←2⊃r
⍝ If running Linux, we may want to switch users (only root can allocate a port less than 1024)
:If ~isWin
:AndIf 0<⍴uid←''setting'Config.UserID'
msg←'4001⌶''',uid,''' '
:Trap 0
{}4001⌶uid
:Else
1 Log msg,'failed.'
:Return
:EndTrap
4 Log msg,'succeeded.'
:EndIf
4 Log'Web server ''',ServerName,''' started on port ',⍕Config.Port
4 Log'Root folder: ',Config.Root
∇
:endsection
:section RequestHandling
∇ names←pagedata PrepareJSONTargets names;p;m;i;nss;z
⍝ See if names contain JSON indexed names like editcell[Name]
⍝     and if so convert them to editcell.Name and make sure editcell exists
⍝ /// Hack by Morten awaiting cleanup or approval by Brian
:If 0≠⍴i←(¯1=⎕NC names)/⍳⍴names ⍝ all invalid APL names
names[i]←('%5B' '%5D'⎕R(,¨'[]'))¨names[i]
:AndIf 0≠⍴i←i/⍨m←(p←names[i]⍳¨'[')≠∘⊃∘⍴¨names[i] ⍝ ... which contain '['
nss←∪z←(m/p-1)↑¨names[i] ⍝ all namespaces mentions
nss pagedata.⎕NS¨⊂⍬      ⍝ prepare empty nss
names[i]←¯1↓¨names[i]    ⍝ drop trailing ']'
names[i,¨p]←'.'          ⍝ replace '[' by '.'
:EndIf
∇
∇ inst MoveRequestData REQ;data;m;i;lcp;props;args;mask
:Access public shared
inst._PageData←⎕NS''
:If 0≠1↑⍴data←{⍵[⍋↑⍵[;1];]}REQ.Arguments⍪REQ.Data
:If 0∊m←1,2≢/data[;1]
data←(m/data[;1]),[1.5]m⊂data[;2]
:EndIf
i←{⍵/⍳⍴⍵}1=⊃∘⍴¨data[;2]
data[i;2]←⊃¨data[i;2]
:If 0≠⍴lcp←props←('_'≠1⊃¨props)/props←(inst.⎕NL-2) ⍝ Get list of public properties (those beginning with '_' are excluded)
:AndIf 0≠1↑⍴args←(data[;1]∊lcp)⌿data
args←(2⌈⍴args)⍴args
i←lcp⍳args[;1]
⍎'inst.(',(⍕props[i]),')←args[;2]'
:EndIf
:If ∨/mask←'_'≠1⊃¨data[;1]
args←mask⌿data
:Trap 0
args[;1]←inst._PageData PrepareJSONTargets args[;1]
⍎'inst._PageData.(',(⍕args[;1]),')←(⊃⍣(1=⍬⍴⍴args))args[;2]'
:EndTrap
:EndIf
:EndIf
∇
∇ r←conns HandleRequest arg;rc;obj;evt;data;REQ;res;startsize;length;ext;filename;enc;encodeMe;cacheMe;which;encoderc;html;enctype;status;response;hdr;done;offset;z;tn;file
⍝ conns - connection namespace
⍝ arg [1] conga rc [2] object name [3] event [4] data
r←0
arg←,⊆arg
(rc obj evt data)←4↑arg,(⍴arg)↓0 '' '' ''
:Select evt
:Case 'HTTPHeader'
conns.Req←⎕NEW #.HTTPRequest data
:Case 'HTTPBody'
conns.Req.ProcessBody data
:Case 'HTTPChunk'
conns.Req.ProcessChunk data
:Case 'HTTPTrailer'
conns.Req.ProcessTrailer data
:EndSelect
→0↓⍨conns.Req.Complete ⍝ exit if request is not complete
REQ←conns.Req
REQ.Server←⎕THIS ⍝ Request will also contain reference to the Server
res←REQ.Response
startsize←length←0
:If 200=res.Status
:If 2=conns.⎕NC'PeerAddr' ⋄ REQ.PeerAddr←conns.PeerAddr ⋄ :EndIf       ⍝ Add Client Address Information
8 Log REQ.(PeerAddr Method Page)
:If 2=conns.⎕NC'PeerCert' ⋄ REQ.PeerCert←conns.PeerCert ⋄ :EndIf       ⍝ Add Client Cert Information
REQ.OrigPage←REQ.Page ⍝ capture the original page
REQ.Page←Config.DefaultPage{∧/⍵∊'/\':'/',⍺ ⋄ '/\'∊⍨¯1↑⍵:⍵,⍺ ⋄ ⍵}REQ.Page ⍝ no page specified? use the default
REQ.Page,←(~'.'∊{⍵/⍨⌽~∨\'/'=⌽⍵}REQ.Page)/Config.DefaultExtension ⍝ no extension specified? use the default
ext←⊃¯1↑#.Files.SplitFilename filename←Config Virtual REQ.Page
:Trap 1 ⍝ WS FULL
SessionHandler.GetSession REQ
Authentication.Authenticate REQ
:If REQ.Response.Status≠401 ⍝ Authentication did not fail
:If Config.AllowedHTTPMethods∊⍨⊂REQ.Method
onHandleRequest REQ ⍝ overridable
:If REQ.Page endswith Config.DefaultExtension ⍝ MiPage?
filename HandleMSP REQ
:Else
:If REQ.Method≡'get'
REQ.ReturnFile filename
:Else
REQ.Fail 501 ⍝ Service Not Implemented
:EndIf
:EndIf
:Else
REQ.Fail 405 ⍝ Method Not Allowed
:EndIf
:EndIf
:Else
REQ.Fail 503 'Service overloaded'
:EndTrap
cacheMe←encodeMe←0
:If 200=res.Status
:If Config.UseContentEncoding
:AndIf ~0∊⍴enc←','#.Utils.penclose' '~⍨REQ.GetHeader'accept-encoding' ⍝ check if client supports encoding
:AndIf encodeMe←~(⊂ext)∊'png' 'gif' 'jpg' 'mp4' ⍝ don't try to compress compressed graphics, should probably add zip files, etc
:If 1=res.File ⍝ Sending a file?  (See HTTPRequest.ReturnFile)
cacheMe←0≠Config.HTTPCacheTime
(startsize length)←0,2 ⎕NINFO file←res.HTML
:If encodeMe←∧/2≤/1⌽length,⍨⌽Config.DirectFileSize ⍝ see if it falls within the size parameters
:Trap 0
tn←file ⎕NTIE 0
res.HTML←⎕NREAD tn 83 length 0
⎕NUNTIE tn
:Else
encodeMe←length←res.(HTML File)←0
REC.Fail 500 404[1+⎕EN=22]
→SEND
:EndTrap
:EndIf
:EndIf
:If encodeMe
:AndIf 0≠which←⊃Encoders.Encoding{(⍴⍺){(⍺≥⍵)/⍵}⍺⍳⍵}enc ⍝ try to match what encodings they accept to those we provide
:If 0=2|⎕DR res.HTML
:AndIf 127∨.<⎕UCS res.HTML
res.HTML←'UTF-8' ⎕UCS res.HTML
:EndIf
(encoderc html)←Encoders[which].Compress res.HTML
:If 0=encoderc
length←startsize←⍴res.HTML
:If startsize>⍴html ⍝ did we save anything by compressing
length←⍴res.HTML←html ⍝ use it
res.Headers⍪←'Content-Encoding'(enctype←Encoders[which].Encoding)
4 Log'Used ',enctype,' compression on "',REQ.Page,'", transmitted% = ',2⍕length{⎕DIV←1 ⋄ ⍺÷⍵}startsize
:Else
4 Log'Compression not used on "',REQ.Page,'", startsize = ',(⍕startsize),', compressed length = ',⍕length
:EndIf
:ElseIf 0=res.File
2 Log'Compression failed'
length←⍴res.HTML ⍝ otherwise, send uncompressed
:EndIf
:ElseIf 0=res.File
startsize←length←⍴res.HTML←∊res.HTML
:EndIf
:EndIf
:If cacheMe ⍝ if cacheable, set expires
:AndIf 0<Config.HTTPCacheTime
res.Headers⍪←'Expires'(Config.HTTPCacheTime #.Dates.HTTPDate ⎕TS)
:EndIf
:EndIf
:EndIf
SEND:
res.Headers⍪←{0∊⍴⍵:'' '' ⋄ 'Server'⍵}Config.Server
status←(⊂'HTTP/1.1'),res.((⍕Status)StatusText)
:If res.File>encodeMe
response←''res.HTML
:Else
response←res.HTML
:If 0=2|⎕DR response
:AndIf 127∨.<⎕UCS response
response←'UTF-8'⎕UCS response
:EndIf
:EndIf
done←length≤offset←⍴res.HTML
res.MSec-⍨←⎕AI[3]
res.Bytes←startsize length
:If 0≠1⊃z←#.DRC.Send obj(status,res.Headers response)
(1+(1⊃z)∊1008 1119)Log'"HandleRequest" closed socket ',obj,' due to error: ',(⍕z),' sending response'
:EndIf
conns.(LastActive Active)←0
:If REQ.CloseConnection
ConnectionDelete conns
:Else
conns.Active←0
:EndIf
8 Log REQ.PeerAddr status
Logger.Log REQ
∇
∇ file HandleMSP REQ;⎕TRAP;inst;class;z;props;lcp;args;i;ts;date;n;expired;data;m;oldinst;names;html;sessioned;page;root;MS3;token;mask;resp;t;RESTful;APLJax;flag;path;name;ext;list;fn;msg
⍝ Handle a "MiServer Page" request
path name ext←#.Files.SplitFilename file
RETRY:
:If 1≠n←⊃⍴list←''#.Files.List file ⍝ does the file exist?
:If 0=n ⍝ no match
:If Config.RESTful ⍝ check for RESTful URI
(list file)←Config FindRESTfulURI REQ
n←⊃⍴list
:EndIf
:Else ⍝ multiple matches??
1 Log'Multiple matching files found for "',file,'"?'
:EndIf
:If 1≠n
:If 0=n
:AndIf #.Files.DirExists Config.AppRoot,REQ.OrigPage↓⍨'/\'∊⍨⊃REQ.OrigPage
→0⍴⍨CheckDirectoryBrowser REQ
:EndIf
REQ.Fail 404 ⋄ →0
:EndIf
:EndIf
date←∊list[1;3]
MS3←RESTful←expired←0
APLJax←REQ.isAPLJax
:If sessioned←326=⎕DR REQ.Session ⍝ do we think we have a session handler active?
:AndIf 0≠⍴REQ.Session.Pages     ⍝ Look for existing Page in Session
:AndIf (n←⍴REQ.Session.Pages)≥i←REQ.Session.Pages._PageName⍳⊂REQ.Page
inst←i⊃REQ.Session.Pages ⍝ Get existing instance
:If expired←inst._PageDate≢date  ⍝ Timestamp unchanged?
:AndIf expired←(⎕SRC⊃⊃⎕CLASS inst)≢(1 #.Files.ReadText file)~⊂''
oldinst←inst
REQ.Session.Pages~←inst
4 Log'Page: ',REQ.Page,' ... has been updated ...'
:EndIf
:AndIf ~expired
4 Log'Using existing instance of page: ',REQ.Page
:If 9=⎕NC'#.HtmlPage'
:If MS3←∨/(∊⎕CLASS inst)∊#.HtmlPage ⋄ inst._Request←REQ ⋄ :EndIf
:EndIf
:If 9=⎕NC'#.RESTfulPage'
:If RESTful←∨/(∊⎕CLASS inst)∊#.RESTfulPage
inst._Request←REQ
:EndIf
:EndIf
:Else
:Trap 11 22 92
inst←Config.AppRoot LoadMSP file ⍝ ⎕NEW ⎕SE.SALT.Load file,' -target=#.Pages'
:Case 11 ⋄ REQ.Fail 500 ⋄ 1 Log'Domain Error trying to load "',file,'"' ⋄ →0 ⍝ Domain Error: HTTP Internal Error
:Case 22 ⋄ REQ.Fail 404 ⋄ 1 Log'File not found - "',file,'"' ⋄ →0 ⍝ File Name Error: HTTP Page not found
:Case 92 ⋄ REQ.Response.HTML,←'<p>Unable to load page ',REQ.Page,' due to a translation error.<br/>This is typically caused by trying to load a page containing Unicode characters when running MiServer under a Classic (not Unicode) version of Dyalog APL.</p>'
REQ.Fail 500 ⋄ →0
:EndTrap
4 Log'Creating new instance of page: ',REQ.Page
inst._PageName←REQ.Page
inst._PageDate←date
MS3←RESTful←0
:If 9=⎕NC'#.HtmlPage'
:If MS3←∨/(∊⎕CLASS inst)∊#.HtmlPage
:OrIf RESTful←∨/(∊⎕CLASS inst)∊#.RESTfulPage
inst.(_Request _PageRef)←REQ inst
:If RESTful∧0≡REQ.RESTfulReq
REQ.RESTfulReq←''
:EndIf
:EndIf
:EndIf
⍝ ======= Expiration (newer version of page is available) Logic ======
⍝ If RESTful or not sessioned, let anything through
⍝ If sessioned and expired, let it though
⍝ If sessioned but not expired, check if GET
:If RESTful<sessioned>expired
:AndIf ~REQ.isGet
inst._TimedOut←1
:EndIf
:If sessioned
:AndIf {0=⍵.⎕NC⊂'_Sessioned':1 ⋄ ⍵._Sessioned}inst
REQ.Session.Pages,←inst ⋄ inst.Session←REQ.Session.ID
:EndIf
:EndIf
:If sessioned ⋄ token←REQ.(Page,⍕Session.ID)
:ElseIf ~0∊⍴REQ.PeerAddr ⋄ token←REQ.(Page,PeerAddr)
:Else ⋄ token←⍕⎕TID
:EndIf
⍝!!!BPB!!! Finish Me
:If 0≠inst.⎕NC'Cacheable'
:AndIf inst.Cacheable
:AndIf ~0∊⍴inst._cache
REQ.Response.HTML←inst._cache
→0
:EndIf
:Hold token
onHandleMSP REQ ⍝ overridable
:If expired∧REQ.isPost ⍝ move old public fields (those beginning with '_' are excluded)
{0:: ⋄ ⍎'inst.',⍵,'←oldinst.',⍵}¨⊃∩/{⍵/⍨'_'≠⊃¨⍵}¨(inst oldinst).⎕NL ¯2.2
:EndIf
⍝ Move arguments / parameters into Public Properties
inst MoveRequestData REQ
fn←'Render'
:If APLJax>RESTful ⍝ if it's an APLJax (XmlHttpRequest) request (but not web service)
REQ.Response.NoWrap←1
fn←'APLJax' ⍝ default callback function name
:If MS3
inst._what←REQ.GetData'_what'
inst._event←REQ.GetData'_event'
inst._value←REQ.GetData'_value'
inst._selector←REQ.GetData'_selector'
inst._target←REQ.GetData'_target'
inst._currentTarget←REQ.GetData'_currentTarget'
inst._callback←REQ.GetData'_callback'
:If ~0∊⍴inst._callback ⍝ does the request specify a callback function?
fn←inst._callback
:EndIf
:EndIf
:ElseIf RESTful
fn←'Respond'
:ElseIf MS3
fn←'Compose'
:EndIf
:If 3≠⌊|inst.⎕NC⊂fn            ⍝ and is it a public method?
1 Log msg←'Method "',fn,'" not found (or not public) in page "',REQ.Page,'"'
REQ.Fail 500 msg
→0
:EndIf
:If MS3
:If APLJax
inst._resetAjax
:Else
inst._init ⍝ reset instance's content
:EndIf
:EndIf
:If (1=Config.TrapErrors)∧9=⎕NC'#.DrA' ⋄ ⎕TRAP←#.DrA.TrapServer
:ElseIf (0=Config.Production) ⋄ ⎕TRAP←(800 'C' '→FAIL')(811 'E' '⎕SIGNAL 801')(813 'E' '⎕SIGNAL 803')(812 'S')((85,99+⍳500)'N')(0 'E' '⍎#.Boot.Oops') ⍝ enable development debug framework
:EndIf
:If flag←APLJax
:AndIf flag←inst.{6::0 ⋄ _DebugCallbacks}⍬
:EndIf
:Trap 85   ⍝ we use 85⌶ because "old" MiPages use REQ.Return internally (and don't return a result)...
resp←flag Debugger'inst.',fn,(MS3⍱RESTful)/' REQ'  ⍝ ... whereas "new" MiPages return the HTML they generate
resp←(#.JSON.toAPLJAX⍣APLJax)resp
inst._TimedOut←0
:If RESTful
:If ~(⊂'content-type')(∊#.Strings.nocase)REQ.Response.Headers[;1]
'Content-Type'REQ.SetHeader'application/json'
resp←1 #.JSON.fromAPL resp
:EndIf
:EndIf
REQ.Return resp
:Else
:If APLJax
1 Log'No result returned by callback method "',fn,'" in page "',REQ.Page,'"'
REQ.Return''
:EndIf
:EndTrap
:If APLJax⍱RESTful
'Content-Type'REQ.SetHeaderIfNotSet'text/html;charset=utf-8'
:EndIf
:If ~REQ.Response.NoWrap
:If MS3∨RESTful
inst.Wrap
:Else
inst.Wrap REQ
:EndIf
:ElseIf MS3>APLJax
inst.Render
:EndIf
:EndHold
→0
FAIL:
⎕←'* Carrying on...'
⎕TRAP←0⍴⎕TRAP
REQ.Fail 500 ⋄ →0
RESUME: ⍝ RESUME is used by DrA
⎕TRAP←0/⎕TRAP ⍝ Let framework trapping take over
:If #.DrA.UseHTTP ⋄ REQ.Fail 500 ⋄ →0 ⋄ :EndIf
REQ.Title'Unhandled Execution Error'
REQ.Style'Styles/error.css'
html←'<h1>Server Error in ''',REQ.Page,'''.<hr width=100% size=1 color=silver></h1>'
html,←'<h2><i>Unhandled Exception Error</i></h2>'
html,←'<b>Description:</b> An unhandled exception occurred during the execution of the current web request.'
:If #.DrA.Mode=2 ⍝ Allows editing
html,←'<br><br><b>Edit page: <a href="/Admin/EditPage?FileName=',REQ.Page,'">',REQ.Page,'</a><br>'
:EndIf
html,←'<br><br><b>Exception Details:</b><br><br>'
:If (#.DrA.Mode>0)∧0≠⍴#.DrA.LastFile ⋄ html,←#.DrA.(GenHTML LastFile)
:Else ⋄ html,←'<code><font face="APL385 Unicode">',(⊃,/#.DrA.LastError,¨⊂'<br>'),'</font></code>'
:EndIf
REQ.Return html
∇
∇ CacheMSP file
:Access public
∇
∇ inst←root LoadMSP file;path;name;ext;ns;class
path name ext←#.Files.SplitFilename file
ns←root NamespaceForMSP file
inst←⎕NEW class←⎕SE.SALT.Load file,' -target=',⍕ns
:If ~name(≡#.Strings.nocase)class←⊃¯1↑'.'#.Utils.penclose⍕class
1 Log'Filename/Classname mismatch: ',file,' ≢ ',class
:EndIf
∇
∇ ns←root NamespaceForMSP file;path;name;ext;rpath;tree;created;n;level;node;mask
⍝ because a MiSite can have a folder structure where files in different folders may have the same name
⍝ we construct a namespace hierarchy which mimics the folder hierarchy to contain MiPage instances
path name ext←#.Files.SplitFilename file
rpath←(⍴root)↓path
ns←#.Pages
tree←'/'#.Utils.penclose rpath
created←(n←⍴tree)⍴0
:For level :In ⍳n
:Select ⊃ns.⎕NC⊂node←level⊃tree
:Case 0
:Trap 11
ns←⍎node ns.⎕NS''
:Else
1 Log'Unable to create namespace in #.Pages for page in file "',file,'"'
⎕SIGNAL 11
:EndTrap
ns⍎'(',(⍕PageTemplates),')←',∊'##.'∘,∘⍕¨PageTemplates
created[level]←1
:Case 9.1
ns←ns⍎node
:Else
1 Log'Unable to create namespace in #.Pages for page in file "',file,'" due to name conflict'
:While ∨/created  ⍝ clean up any created nodes
ns←ns.##
ns.⎕EX⊃(mask←⌽<\⌽created)/tree
created∧/←~mask
:EndWhile
⎕SIGNAL 11
:EndSelect
:EndFor
∇
:endsection
:section Misc
∇ r←flag Debugger w
:If flag
⎕←'* Callback debugging active on this page, press Ctrl-Enter to trace into Callback function'
Debug ⎕STOP'Debugger'
:EndIf
:Trap 85
Debug:r←1(85⌶)w
:Else
:If flag ⋄ ⍬ ⎕STOP'Debugger' ⋄ :EndIf
⎕SIGNAL 85
:EndTrap
:If flag ⋄ ⍬ ⎕STOP'Debugger' ⋄ :EndIf
∇
∇ r←Subst arg;i;m;str;c;rep
⍝ Substitute character c in str with rep
str c rep←arg
i←c⍳str
m←i≤⍴c
(m/str)←rep[m/i]
r←str
∇
∇ file←Config Virtual page;mask;f;ind;t;path;root
:Access public shared
⍝ checks for virtual directory
root←(-'/\'∊⍨¯1↑root)↓root←Config.Root
page←('/\'∊⍨1↑page)↓page
file←root,'/',page
:If 0<⍴Config.Virtual
ind←Config.Virtual.alias⍳⊂t←{(¯1+⍵⍳'/')⍴⍵}page
:If ind≤⍴Config.Virtual.alias
path←ind⊃Config.Virtual.path
file←#.Files.Normalize path,('/\'∊⍨¯1↑path)↓(⍴t)↓page
:EndIf
:EndIf
∇
∇ r←isWin
r←'Win'≡3↑1⊃'.'⎕WG'APLVersion'
∇
∇ (list filename)←Config FindRESTfulURI REQ;page;n;inds;i
⍝ RESTful URIs can be ambiguous
⍝ For example:  is /Misc/ws/ws
⍝    a call to /Misc/ws/ws.mipage
⍝    a call to /Misc/ws.mipage    with /ws as a parameter?
⍝ or a call to /Misc.mipage       with /ws/ws as a parameter?
⍝ This utility attempts to look up the folder structure to find the matching file
inds←⌽{⍵/⍳⍴⍵}'/'=REQ.OrigPage
:For i :In inds
page←(i-1)↑REQ.OrigPage
⍝page←Config.DefaultPage{∧/⍵∊'/\':'/',⍺ ⋄ '/\'∊⍨¯1↑⍵:⍵,⍺ ⋄ ⍵}page ⍝ no page specified? use the default
page,←(~'.'∊{⍵/⍨⌽~∨\'/'=⌽⍵}page)/Config.DefaultExtension ⍝ no extension specified? use the default
filename←Config Virtual page
:If 1=⊃⍴list←''#.Files.List filename
REQ.RESTfulReq←i↓REQ.OrigPage
REQ.Page←page
→0
:EndIf
:EndFor
∇
∇ r←CheckDirectoryBrowser REQ;folder;file;F;filter;template;propagate;up;directory;inst;code;page;breadcrumb
⍝ checks if the requested URI is a browsable directory
folder←page←{⍵,'/'/⍨~'/\'∊⍨¯1↑⍵}REQ.OrigPage
r←up←0
:Trap 0/0 ⍝!!! remove 0/ after testing
:While r⍱0∊⍴folder
:If #.Files.Exists file←Config.AppRoot,folder,'Folder.xml'
F←⎕NEW #.Boot.ConfigSpace file
:If F.Get'browsable' 1 0
filter←F.Get'filter'
template←{0∊⍴⍵:'MiPage' ⋄ ⍵}F.Get'template'
propagate←F.Get'propagate' 1 0
→0⍴⍨up>propagate
code←⊂':Class directorybrowser : #.Pages.',template
code,←'∇Compose' ':Access Public'
code,←⊂'Add #._html.title ''',(1↓⊃⌽('/'∘=⊂⊢)¯1↓page),''''
breadcrumb←(∊1∘↓,⍨((,\{'<a class="breadcrumb" href="',⍺,'">',⍵,'</a>'}¨⊢)⊃⊂⍨¯1⌽'/'=⊃))#.Files.SplitFilename page,filter
code,←⊂'Add #._html.h2 ''Directory Listing for ',breadcrumb,''''
code,←('''dirBrowser'' Add #._DC.DirectoryBrowser ''',page,''' ''',filter,''' ',(⍕propagate),' ',⍕up)'∇' ':EndClass'
inst←⎕NEW ⎕FIX code
inst._Request←REQ
inst.Compose
inst.Wrap
r←1
:EndIf
:Else
up←1
folder←{⍵↓⍨-⊥⍨⍵≠'/'}¯1↓folder
:EndIf
:EndWhile
:EndTrap
∇
:endsection
:EndClass
﻿:Class Page : #.MiPage
⍝ Class to be used with HTMLRenderer (Dyalog v16 and later)
:field public _Renderer←''
:field public _Url←''
:field public _Interactive←0
:field public _CallbackFn←'Callback'
:field public _Config
:field public _Request
:field public _Args
:field public Props
:field public Coord←'ScaledPixel'
:field public Size←⍬ ⍬
:field public ReadOnly NL←⎕UCS 10
:field public shared APLVersion←{⊃(//)⎕VFI ⍵/⍨2>+\'.'=⍵}2⊃#.⎕WG 'APLVersion'
begins←{⍺≡(⍴⍺)↑⍵}
∇ make
:Access public
:Implements constructor
⎕SIGNAL makeCommon
∇
∇ make1 arg
⍝ args are: [1] HTML content [2] URL
:Access public
:Implements constructor
arg←,⊆arg
(content _Url)←2↑arg,(⍴arg)↓'' ''
:If ~0∊⍴content ⋄ Add content ⋄ :EndIf
⎕SIGNAL makeCommon
∇
∇ r←makeCommon
→0↓⍨0∊⍴r←(17>APLVersion)/⊂('EN' 11)('Message' 'Dyalog v17.0 or later is required to use HTMLRenderer-based features')
Props←⎕NS''
_Config←#.Boot.ms.Config
_PageName←3⊃⎕SI,⊂'WC2Page'
∇
∇ Close
:Implements destructor
:Trap 0
2 ⎕NQ _Renderer'Close'
:EndTrap
∇
∇ Run
:Access public
:If 0∊⍴_Renderer
run&0
:Else
Reset
Show
:EndIf
∇
∇ Reset
:Access public
Body.Content←''
Head.Content←''
∇
∇ run arg
:Access public
_Renderer←⎕NEW'HTMLRenderer'(('Coord'Coord)('Size'Size)('Event'('onHTTPRequest' '__CallbackFn'))('URL'_PageName)('InterceptedURLs'(1 2⍴'*' 1)))
:If ~0∊⍴props←_Renderer.PropList∩Props.⎕NL ¯2
{_Renderer⍎⍺,'←⍵'}/¨{⍵(Props⍎⍵)}¨props
:EndIf
_Renderer.Wait
∇
∇ r←Render
:Access public
r←⎕BASE.Render
∇
∇ Show
:Access public
_Renderer.HTML←Render
∇
∇ {r}←{args}Add content
:Access public
:If 0=⎕NC'args' ⋄ args←⊢ ⋄ :EndIf
r←args ⎕BASE.Add content
∇
∇ {r}←{args}New content
:Access public
:If 0=⎕NC'args' ⋄ args←⊢ ⋄ :EndIf
r←args ⎕BASE.New content
∇
∇ r←__CallbackFn args;ext;mimeType;filename;url;mask;cbdata;request;int;handler;content
:Access public
r←args
→0⍴⍨0∊⍴8⊃args
request←⎕NEW #.HtmlRenderRequest(args(819⌶_PageName))
:If 0∊⍴request.Page ⍝ initialization
r[4 5 6 7]←1 200 'OK' 'text/html'
r[10]←⊂UnicodeToHtml Render
r[9]←⊂NL,⍨∊NL,⍨¨('Content-Type: ',7⊃r)('Content-Length: ',⍕≢10⊃r)
:ElseIf ~0∊⍴ext←(819⌶)1↓⊃¯1↑1 ⎕NPARTS request.Page  ⍝ !!!need to handle case where another MiPage is requested
:If #.Files.Exists filename←∊1 ⎕NPARTS _Config #.MiServer.Virtual request.Page
:If ' '∨.≠handler←⊃_Config.MappingHandlers.handler/⍨<\_Config.MappingHandlers.ext≡¨⊂'.',ext
(mimeType content)←⍎'filename #.MappingHandlers.',handler,' request'
:Else
mimeType←#.Boot.ms.Config.ContentTypes tableLookup ext
content←{{(⎕NUNTIE ⍵)⊢⎕NREAD ⍵,(⎕DR' '),¯1}⍵ ⎕NTIE 0}filename
:EndIf
r[7]←mimeType
r[4 5 6]←1 200 'OK'
r[9]←⊂NL,⍨∊NL,⍨¨'Content-Type: ' 'Content-Length: ',¨⍕¨mimeType(≢content)
r[10]←⊂content
:Else
r[4 5 6 7]←1 404 'NOT FOUND' ''
r[9 10]←⊂''
:EndIf
:ElseIf request.isAPLJax
_Args←args
_Request←request
⎕THIS #.MiServer.MoveRequestData _Request
_what←_Request.GetData'_what'
_event←_Request.GetData'_event'
_value←_Request.GetData'_value'
_selector←_Request.GetData'_selector'
_target←_Request.GetData'_target'
_currentTarget←_Request.GetData'_currentTarget'
_callback←_Request.GetData'_callback'
:If _CallbackFn≢'Callback'
r←⍎'_Args ',_CallbackFn,' _Request'  ⍝ did you specify your own HTMLRenderer callback function?
:Else
cbdata←Callback
r[10]←⊂UnicodeToHtml #.JSON.toAPLJAX cbdata ⍝ we expect an APLJAX-style response
r[4 5 6 7]←1 200 'OK' 'application/json'
r[9]←⊂NL,⍨∊NL,⍨¨'Content-Type: ' 'Content-Length: ',¨⍕¨'application/json'(≢10⊃r)
:EndIf
:EndIf
r[9]←⊂(⎕UCS 32)~⍨9⊃r
∇
∇ r←Callback;_context;_found;_valence
:Access public overridable
r←''
:If ''≢_callback
_context←''
:While ~_found←3=⎕NC _context,_callback
:If ~0∊⍴_context
:If (,'#')≡⍕⍎_context ⍝ popped up to root and still not found?
:Leave
:EndIf
:EndIf
_context,←'##.'
:EndWhile
:If _found
_valence←|1 2⊃⎕AT _context,_callback
r←⍎('_Args '/⍨_valence=2),_context,_callback,' _Request'/⍨_valence>0
:Else
⎕←'Callback function not found: ',_callback
:EndIf
:EndIf
∇
∇ r←UnicodeToHtml txt;u;ucs
:Access public shared
⍝ converts chars ⎕UCS >127 to HTML safe format
r←,⍕txt
u←127<ucs←⎕UCS r
(u/r)←(~∘' ')¨↓'G<&#ZZZ9;>'⎕FMT u/ucs
r←∊r
∇
tableLookup←{(⍺[;2],⊂'')[⍺[;1]⍳⊆,⍵]}
:EndClass
﻿:Class RESTfulPage
⍝  Base class for RESTful web service pages
:Field Public _PageName←'' ⍝ Page file name
:Field Public _PageDate←'' ⍝ Page saved date
:field Public _Request     ⍝ HTTPRequest
:field Public _PageData    ⍝ parameters passed in request
:field Public Cacheable←0  ⍝ is this page cacheable?
∇ Make
:Access public
:Implements constructor :Base
_PageData←⎕NS''
∇
∇ Make1 req
:Access public
_Request←req
:Implements constructor :base
_PageData←⎕NS''
∇
∇ r←{proto}Get names
:Access public
proto←{6::⍵ ⋄ proto}''
names←eis names
names←,⍕names
names←#.Strings.deb names
:If ' '∊names
names←{⎕ML←3 ⋄ ⍵⊂⍨⍵≠' '}names
r←proto∘Get¨names
:ElseIf 2≠_PageData.⎕NC names
r←,proto
:Else
r←_PageData⍎names
:If 2≤≡r
:If 1=⍴,r
r←⊃r
:EndIf
:EndIf
:If isString r
r←#.JSON.toAPL r
:EndIf
:EndIf
∇
∇ r←GetNames str
:Access public
→0⍴⍨0∊⍴r←_PageData.⎕NL-2 9
→0⍴⍨0∊⍴str
r←r/⍨r #.Strings.beginsWith¨⊂str
∇
∇ r←isChar w
:Access public shared
r←0 2∊⍨10|⎕DR w
∇
∇ r←isString w
:Access public shared
:Select ≡w
:Case 2
:If 1=⍴,w
r←{(isChar ⍵)∧1∊⍴⍴1/⍵}⊃w
:Else
r←0
:EndIf
:CaseList 0 1
r←{(isChar ⍵)∧1∊⍴⍴1/⍵}w
:Else
r←0
:EndSelect
∇
∇ Close session ⍝ Called when the session ends
:Access Public Overridable
∇
∇ _init
:Access public
∇
∇ Wrap
:Access public
∇
∇ r←{a}eis w
:Access public shared
r←((,∘⊂)⍣((isString w)∧2>|≡w))w ⍝ enclose if simple character
∇
:section RESTful methods
∇ SetStatus arg
:Access public
_Request.Fail arg
∇
∇ {hdr}SetHeader value
:Access public
:If 0=⎕NC'hdr'
_Request.SetHeader value
:Else
hdr _Request.SetHeader value
:EndIf
∇
∇ SetContentType x
:Access public
_Request.SetContentType x
∇
∇ r←_Method
:Access public
r←_Request.Method
∇
∇ r←_URI
:Access public
r←'/' #.Utils.penclose _Request.RESTfulReq
∇
:endsection
∇ r←ScriptFollows
:Access public shared
r←2↓∊(⎕UCS 13 10)∘,¨{⍵/⍨'⍝'≠⊃¨⍵}{1↓¨⍵/⍨∧\'⍝'=⊃¨⍵}{⍵{((∨\⍵)∧⌽∨\⌽⍵)/⍺}' '≠⍵}¨(1+2⊃⎕LC)↓↓(⊃⊃⎕CLASS 1⊃⎕RSI).(180⌶)2⊃⎕SI
∇
:EndClass
﻿:Namespace SupportedHtml5Elements
⍝ this namespace is used to build the _html namespace containing definitions for all supported HTML5 elements
∇ Build_html_namespace;Elements;e;endtag;d;script;NoEndTag_X
⍝ Sources for the following are
⍝ non-svg:  https://www.w3.org/TR/html-markup/elements.html
⍝ svg~path: https://www.w3.org/TR/SVG11/shapes.html
⍝ path:     https://www.w3.org/TR/SVG11/paths.html#DAttribute
⍝ element names followed by '*' have no closing tag
Elements←{{('*'~⍨1↓⊃⍵)('*'≠⊃⌽⊃⍵)(1↓∊1↓⍵)}1↓⍵}¨{⍵↑⍨¯1+⍵⍳⊂0⍴⊂''}((⊂,' ')~⍨' '∘=⊂⊢)¨(1+⊃⎕LC)↓⎕NR⊃⎕XSI
⍝ a          Defines a hyperlink
⍝ abbr       Defines an abbreviation or an acronym
⍝ address    Defines contact information for the author/owner of a document
⍝ area*      Defines an area inside an image-map
⍝ article    Defines an article
⍝ aside      Defines content aside from the page content
⍝ audio      Defines sound content
⍝ b          Defines bold text
⍝ base*      Specifies the base URL/target for all relative URLs in a document
⍝ bdi        Isolates a part of text that might be formatted in a different direction from other text outside it
⍝ bdo        Overrides the current text direction
⍝ blockquote Defines a section that is quoted from another source
⍝ body       Defines the document's body
⍝ br*        Defines a single line break
⍝ button     Defines a clickable button
⍝ canvas     Used to draw graphics, on the fly, via scripting (usually JavaScript)
⍝ caption    Defines a table caption
⍝ circle*    Defines a circle
⍝ cite       Defines the title of a work
⍝ code       Defines a piece of computer code
⍝ col*       Specifies column properties for each column within a <colgroup> element
⍝ colgroup   Specifies a group of one or more columns in a table for formatting
⍝ datalist   Specifies a list of pre-defined options for input controls
⍝ dd         Defines a description/value of a term in a description list
⍝ del        Defines text that has been deleted from a document
⍝ details    Defines additional details that the user can view or hide
⍝ dfn        Represents the defining instance of a term
⍝ dialog     Defines a dialog box or window
⍝ div        Defines a section in a document
⍝ dl         Defines a description list
⍝ dt         Defines a term/name in a description list
⍝ ellipse*   Defines an ellipse
⍝ em         Defines emphasized text
⍝ embed*     Defines a container for an external (non-HTML) application
⍝ fieldset   Groups related elements in a form
⍝ figcaption Defines a caption for a figure element
⍝ figure     Specifies self-contained content
⍝ footer     Defines a footer for a document or section
⍝ form       Defines an HTML form for user input
⍝ h1         Defines an HTML heading level 1
⍝ h2         Defines an HTML heading level 2
⍝ h3         Defines an HTML heading level 3
⍝ h4         Defines an HTML heading level 4
⍝ h5         Defines an HTML heading level 5
⍝ h6         Defines an HTML heading level 6
⍝ head       Defines information about the document
⍝ header     Defines a header for a document or section
⍝ hr*        Defines a thematic change in the content
⍝ html       Defines the root of an HTML document
⍝ i          Defines a part of text in an alternate voice or mood
⍝ iframe     Defines an inline frame
⍝ img*       Defines an image
⍝ input*     Defines an input control
⍝ ins        Defines a text that has been inserted into a document
⍝ kbd        Defines keyboard input
⍝ keygen     Defines a key-pair generator field (for forms)
⍝ label      Defines a label for an input element
⍝ legend     Defines a caption for a fieldset element
⍝ li         Defines a list item
⍝ line*      Defines a line segment that starts at one point and ends at another
⍝ link*      Defines the relationship between a document and an external resource (most used to link to style sheets)
⍝ main       Specifies the main content of a document
⍝ map        Defines a client-side image-map
⍝ mark       Defines marked/highlighted text
⍝ menu       Defines a list/menu of commands
⍝ menuitem   Defines a command/menu item that the user can invoke from a popup menu
⍝ meta*      Defines metadata about an HTML document
⍝ meter      Defines a scalar measurement within a known range (a gauge)
⍝ nav        Defines navigation links
⍝ noscript   Defines an alternate content for users that do not support client-side scripts
⍝ object     Defines an embedded object
⍝ ol         Defines an ordered list
⍝ optgroup   Defines a group of related options in a drop-down list
⍝ option     Defines an option in a drop-down list
⍝ output     Defines the result of a calculation
⍝ p          Defines a paragraph
⍝ param*     Defines a parameter for an object
⍝ path*      Defines a generic shape
⍝ polygon*   Defines a closed shape consisting of a set of connected straight line segments
⍝ polyline*  Defines a set of connected straight line segments
⍝ pre        Defines preformatted text
⍝ progress   Represents the progress of a task
⍝ q          Defines a short quotation
⍝ rect*      Defines a rectangle
⍝ rp         Defines what to show in browsers that do not support ruby annotations
⍝ rt         Defines an explanation/pronunciation of characters
⍝ ruby       Defines a ruby annotation
⍝ s          Defines text that is no longer correct
⍝ samp       Defines sample output from a computer program
⍝ script     Defines a client-side script
⍝ section    Defines a section in a document
⍝ select     Defines a drop-down list
⍝ small      Defines smaller text
⍝ source*    Defines multiple media resources for media elements
⍝ span       Defines a section in a document
⍝ strong     Defines important text
⍝ style      Defines style information for a document
⍝ sub        Defines subscripted text
⍝ summary    Defines a visible heading for a details element
⍝ sup        Defines superscripted text
⍝ svg        Defines a container for SVG graphics
⍝ table      Defines a table
⍝ tbody      Groups the body content in a table
⍝ td         Defines a cell in a table
⍝ textarea   Defines a multiline input control (text area)
⍝ tfoot      Groups the footer content in a table
⍝ th         Defines a header cell in a table
⍝ thead      Groups the header content in a table
⍝ time       Defines a date/time
⍝ title      Defines a title for the document
⍝ tr         Defines a row in a table
⍝ track      Defines text tracks for media elements
⍝ u          Defines text that should be stylistically different from normal text
⍝ ul         Defines an unordered list
⍝ var        Defines a variable
⍝ video      Defines a video or movie
⍝ wbr*       Defines a possible line-break
:For e endtag d :In Elements
NoEndTag_X←'NoEndTag←',⍕~endtag
script←(':Class ',e,' : #.HtmlElement')('⍝ Description:: ',d)('⍝ Constructor:: ',('[content '∘,,∘']')⍣endtag⊢'[attributes]')
:Select e
:CaseList 'h1' 'h2' 'h3' 'h4' 'h5' 'h6'
script,←⊂':field public shared readonly DocBase←''http://www.w3schools.com/tags/tag_hn.asp'''
:CaseList 'rect' 'circle' 'ellipse' 'line' 'polyline' 'polygon' 'path'
script,←⊂':field public shared readonly DocBase←''http://www.w3schools.com/svg/svg_',e,'.asp'''
:Case 'svg'
script,←⊂':field public shared readonly DocBase←''http://www.w3schools.com/html/html5_svg.asp'''
:Else
script,←⊂':field public shared readonly DocBase←''http://www.w3schools.com/tags/tag_',e,'.asp'''
:EndSelect
script,←':field public shared readonly DocDyalog←''/Documentation/DyalogAPIs/html5.html''' ':field public shared readonly APILevel←2'
script,←'∇make' ':Access Public'NoEndTag_X(':Implements Constructor :Base (,''',e,''')')(,'∇')
script,←'∇make1 arg' ':Access Public'NoEndTag_X(':Implements Constructor :Base (,''',e,''') ',(''''' '/⍨~endtag),'arg')(,'∇')
script,←'∇make2 (content attr);a' ':Access Public'NoEndTag_X('a←(⊂,''',e,'''),⊂⍣(isString a)⊢a←content attr')':Implements Constructor :Base a'(,'∇')
script,←⊂':EndClass'
:EndFor
∇
:EndNamespace
﻿:Namespace Utils
⍝ This namespace contains general utility functions
(⎕ML ⎕IO)←1
penclose←{⍺←⊃,⍵ ⋄ (~⍵∊⍺)⊆,⍵ } ⍝ APL2 style partitioned enclose (optional ⍺ is character(s) to break on)
eis←{(,∘⊂)⍣((326∊⎕DR ⍵)<2>|≡⍵),⍵} ⍝ Enclose if simple
backscan←{0≡≢⍵:⍬ ⋄ h←⍺ ⍺⍺⊃⍵ ⋄ (⊂h),h ⍺⍺ ∇∇ 1↓⍵} ⍝ scan \ in the opposite direction
levels2nodes←0{(⌽⍵↑1)+⍵↑⍺}backscan ⊢
levels2ids←{(⍺,(∊('_',⍕)¨))¨levels2nodes ⍵}
∇ r←tox hex num;HEX;⎕IO;⎕ML;b
⍝ Turn a 32 bit integer into HEX format or the other way around if la is 0
→(num∨.≠' ')↓⍴r←⍬
⎕ML←⎕IO←0 ⋄ HEX←⎕D,'ABCDEFabcdef'
num←b\num/⍨b←~num∊',' ⍝ tolerant of ,
:If tox∧∨/0 2∊10|⎕DR num ⋄ num←1⊃⎕VFI num ⋄ :EndIf ⍝ accept char string
:If tox
'must be 32 bits signed integer'⎕SIGNAL 11/⍨323<⎕DR num
r←{HEX[{(1⌈⍴⍵)↑⍵},16⊥⍣¯1⊢(323⌊⎕DR ⍵)⎕DR ⍵]}¨num
:Else
num←'(?<!\d)0x'⎕R''⊢num ⍝ remove any 0x before the numbers
'invalid number(s)'⎕SIGNAL 11↓⍨∧/num∊' ',HEX
num←(⊂'')~⍨{1↓¨(⍵∊' ')⊂⍵}' ',num ⍝ cut on spaces
r←16⊥¨{⍵-6×⍵>15}¨HEX∘⍳¨num
:EndIf
∇
tohex←1∘hex
fromhex←0∘hex
vectorize←{1≥|≡⍵:,⍵ ⋄ ∇¨⍵} ⍝ turn scalars into vectors
rank2depth←{S←↓⍣(¯1+≢⍴⍵) ⋄ 1<|≡⍵:S ∇¨⍵ ⋄ S ⍵}
WSRoot←{⍵↓⍨-⊥⍨('/\'⊃⍨1+'Win'≡3↑⊃'.'⎕WG'APLVersion')≠⍵}⎕WSID
∇ r←Platform
⍝ return our best guess for the platform we're running on
:If 'lin'≡r←#.Strings.lc 3↑⊃'.'⎕WG'APLVersion'
:If 'armv'≡4↑⎕SH'uname -m'  ⍝!!! warning, could be Android someday
r←'pi'
:EndIf
:EndIf
∇
:EndNamespace
﻿:Namespace _html ⍝ Base&nbsp;HTML
⍝ This namespace is populated by #.SupportedHtml5Elements
⍝∇:require =\HtmlElement
:EndNamespace
﻿:Interface ContentEncoder
⍝ the following should be true (⎕IO←1): z≡2⊃Uncompress 2⊃Compress z
:property Encoding
:access public shared
∇ r←get
∇
:endproperty
∇ (rc raw)←Compress str
⍝ compression routine, takes a string and returns compressed raw data a la 'UTF-8' ⎕UCS str
⍝ rc is return code - 0 for no error
⍝ raw is the data to compress
∇
∇ (rc str)←Uncompress raw
⍝ uncompress routine, takes a compressed raw vector and returns an uncompressed string
∇
∇ (rc msg)←Init
⍝ Init does whatever initialization is necessary for the compression library
∇
:EndInterface﻿:Class Logger ⍝ Logs HTTP requests
⎕IO←⎕ML←1
⍝ /Config/Logger.xml fields (and defaults) are:
⍝  <active>0</active>                      <!-- 1 for yes, 0 for no -->
⍝  <anonymousIPs>1</anonymousIPs>          <!-- 1 for yes (GDPR compliant), 0 for no -->
⍝  <directory>%SiteRoot%/Logs</directory>  <!-- directory to store log files -->
⍝  <interval>10</interval>                 <!-- cache write time interval in seconds, 0 means write immediately (do not cache) -->
⍝  <prefix></prefix>                       <!-- character vector log file prefix -->
:field public instance Active←0
:field private instance anonymousIps←1
:field private instance directory←''
:field private instance interval←10
:field private instance prefix←''
:field private instance TieNo←⍬
:field private instance Cache←''
:field private instance tid←¯1
missing←{0∊⍴⍵:'-' ⋄ ⍵}
Char←⎕DR ' '
∇ Make ms;config
:Access public
:Implements Constructor
EOL←⎕UCS 13 10↓⍨~#.Boot.isWin
config←ConfigureLogger ms
Active←config.active
Anonymize←{3='.'+.=⍵:((-(⌽⍵)⍳'.')↓⍵),'.0' ⋄ ⍵}⍣config.anonymousIps
Prefix←config.prefix
Interval←config.interval
Directory←#.Boot.{folderize SubstPath ⍵}config.directory
('Log file directory "',Directory,'" not found!')⎕SIGNAL 11/⍨~#.Files.DirExists Directory
:If Active
tid←Run&0
:EndIf
∇
∇ UnMake
:Implements destructor
Stop ⍬
∇
∇ Stop w
:Access public
:Trap 0
:If Active
Active←0
⎕TKILL tid
:If Open
ClearCache
Close
:EndIf
:EndIf
:EndTrap
∇
∇ Start
:Access public
:If ~tid∊⎕TNUMS
Active←1
tid←Run&0
:EndIf
∇
∇ Run x;done
:While Active
{}⎕DL Interval
:If Open
ClearCache
Close
:EndIf
:EndWhile
∇
∇ r←Open;fn
r←0
:Trap 6
fn←#.Files.Normalize Directory,Prefix,(⍕100⊥3↑⎕TS),'.log'
:Else
→0
:EndTrap
:Trap 22 ⍝ file name error
TieNo←fn ⎕NTIE 0
:Else
:Trap 0
TieNo←{0 ⎕NTIE⍨⍵⊣⎕NUNTIE ⍵ ⎕NCREATE 0}fn
:Else
1 ##.ms.Log'Unable to open log file "',fn,'"'
:Return
:EndTrap
:EndTrap
r←0≠TieNo
∇
tryGetting←{0::('-'@(' '∘=))(⊃⎕DM),'-retrieving-"',(∊⍕⍵),'"' ⋄ ∊⍕⍎⍵}
∇ Log req;addr;user;ts;method;page;status;msec;bytes
:Access public
:If Active
:Hold 'Lumberjack'
:Trap 0
Cache,←((missing Anonymize 2⊃req.PeerAddr),' ',(missing req.Session.User),#.Dates.LogFmtNow,'"',req.Method,' ',req.Page,'"',∊' '∘,∘⍕¨req.Response.(Status MSec Bytes)),EOL
:Else ⍝ something in logging failed, try figuring out what
addr←tryGetting'req.PeerAddr'
user←tryGetting'req.Session.User'
ts←tryGetting'#.Dates.LogFmtNow'
method←tryGetting'req.Method'
page←tryGetting'req.Page'
status←tryGetting'req.Response.Status'
msec←tryGetting'req.Response.MSec'
bytes←tryGetting'req.Response.Bytes'
Cache,←(missing Anonymize addr),' ',(missing user),ts,'"',method,' ',page,'" ',status,' ',msec,' ',bytes,EOL
:EndTrap
:EndHold
:EndIf
∇
∇ ClearCache
:Hold 'Lumberjack'
:If Char≠⎕DR Cache
Cache←('?'@{Char≠⎕DR¨⍵})Cache
:EndIf
Cache ⎕NAPPEND TieNo
Cache←''
:EndHold
∇
∇ Close
⎕NUNTIE TieNo
∇
∇ config←ConfigureLogger ms;file;log;config;Setting
⍝ load logger information
Setting←#.Boot.Setting
:If 'Logger'≡ms.Config.Logger
config←ms.Config.LoggerConfig←⎕NS''
ms.Config.LoggerConfig.active←0
:If ~0∊⍴log←#.Boot.ReadConfiguration'Logger'
config.active←log Setting'active' 1 0
config.anonymousIps←log Setting'anonymousIps' 1 1
config.directory←#.Boot.SubstPath log Setting'directory' 0 ''
config.interval←log Setting 'interval' 1 10   ⍝
config.prefix←log Setting 'prefix' 0 ''
:EndIf
:EndIf
∇
:EndClass
﻿:Class SimpleAuth
⍝ Perform Simple Authentication
(⎕IO ⎕ML)←1
:Field Public Users
:Field Public Folders
∇ make Server;path;users;folders;split
:Access Public
:Implements Constructor
⍝ Users: user password group
⍝ Folders: folder groups
split←{1↓¨(x∊',;')⊂x←';',⍵}
lcud←{1<≡⍵:∇¨⍵ ⋄ #.Strings.lc ⍵} ⍝ lower case, to uniform depth
lco←{(lcud ⍺)⍺⍺ lcud ⍵}                             ⍝ lower case operator
Users←0 3⍴⊂''
Folders←0 2⍴⊂''
:If ~0∊⍴users←'ID'#.Boot.ReadConfiguration'Users'
Users←(↑users.(ID Pass)),split¨users.Groups
:EndIf
:If ~0∊⍴folders←'path'#.Boot.ReadConfiguration'Access'
Folders←folders.Path,[1.5]split¨folders.Groups
:EndIf
∇
∇ Authenticate req;auth;pwd;usr;r;i;groups;folder
:Access Public Instance
⍝ Sets req.Session.User Groups AuthCookieName
folder←{(-'/'⍳⍨⌽⍵)↓⍵}req.Page
folder,←(0=⍴folder)⍴'/'
groups←⊃((Folders[;1]∊lco folder'**')/Folders[;2]),⊂⍬ ⍝ folder search needs to be case insensitive
→0⍴⍨0∊⍴groups ⍝ if no groups defined, no authenication
:If ~(⊂,'**')∊groups ⍝ **=Unlimited access: No login required
:If r←'Basic'≡5↑auth←req.GetHeader'Authorization'
usr pwd←1↓¨2↑{(':'=⍵)⊂⍵}':',#.Base64.Decode 6↓auth
:AndIf r←pwd≡(i←Users[;1]⍳⊂usr)⊃Users[;2],⊂0
req.Session.(User Groups AuthCookieName)←Users[i;1 3],⊂'Authorization'
⍝ /// AuthCookieName "Authorization" is not correct; This is not done using a cookie
:If ~r←∨/(req.Session.Groups,⊂,'*')∊groups ⍝ *=all groups have access
req.Fail 401 ⍝ Unauthorized (and user is logged in)
req.Response.Text←'User "',usr,'" does not have access to folder "',folder,'"'
:EndIf
⍝ Validated OK
:Else ⍝ Send Challenge
req.Response.Headers⍪←'WWW-Authenticate' 'Basic realm="Restricted Access"'
req.Fail 401
:EndIf
:EndIf
∇
:EndClass﻿:Class SimpleSessions
⍝ Default Session Handler, used by the WebServer sample
⍝ Manages HTTP sessions using cookies
⍝ When a HTTP request arrives, checks to see if the session cookie is included and the session
⍝ is in the list of valid sessions. If it is, assign the Session property of the request.
⍝ If it isn't, create a new session and set the cookie
:Field Public Sessions ⍝ Should be private, really
:Field Public Server
:Class Page
:Field Public URL←''
:Field Public State←⎕NS ''
:EndClass
:Class Session
:Field Public ID←0
:Field Public User←''
:Field Public LastActive←0
:Field Public Cookie←''
:Field Public AuthCookieName←''
:Field Public Timeout←0
:Field Public State
:Field Public New←1
:Field Public Pages←0⍴⎕NEW Page
:Field Public Server←⍬
:EndClass
∇ Start server;tn;root
:Access Public
:Implements Constructor
⍝ Initialize Session handler
Sessions←0⍴⎕NEW Session
root←server.Config.Root
Timeout←server.Config.SessionTimeout
timeout←Timeout÷24×60 ⍝ Convert minutes to fractions of a day
:Trap 22
tn←(root,'sessions.dcf')⎕FCREATE 0
(0 ¯1 0)⎕FSTAC tn
0 ⎕FAPPEND tn ⍝ Session Number
⎕FUNTIE tn
:EndTrap
tn←(root,'sessions.dcf')⎕FSTIE 0
NextSession←⎕FREAD tn,1
⎕FUNTIE tn
Server←server
∇
∇ GetSession req;c;tn;now;session;ns;new;t_out;i;r
:Access Public
⍝ Return session. Right argument is a HTTPRequest.
:If (1=Server.Config.CreateSession)∨'get'≢req.Method
:Hold 'Sessions'
session←req.GetCookie'Session'
now←#.Dates.DateToIDN ⎕TS
:If new←(1⊃⍴Sessions)<i←Sessions.Cookie⍳⊂session ⍝ Cookie is not in the table
c←SessionCookie NextSession
Sessions←Sessions,r←⎕NEW Session
r.(ID User LastActive Cookie State Server Timeout)←NextSession''now c(⎕NS'')Server timeout
NextSession←(2*30)|NextSession+1
tn←(req.Server.Config.Root,'sessions.dcf')⎕FSTIE 0
NextSession ⎕FREPLACE tn,1
⎕FUNTIE tn
req.SetCookie'Session'c'/' 30 'HttpOnly'
req.Session←r
req.Server.onSessionStart req
:Else ⍝ Old session
(r←i⊃Sessions).LastActive←now ⍝ Just register activity
r.New←0
req.Session←r
:EndIf
:EndHold
:EndIf
∇
∇ KillSessions ids;mask;i
:Access Public
:Hold 'Sessions'
:If ∨/mask←Sessions.ID∊ids
:For i :In mask/⍳⍴mask
Server.onSessionEnd i⊃Sessions
:EndFor
Sessions/⍨←~mask
:EndIf
:EndHold
∇
∇ Logout req;session;i;z
:Access Public Instance
⍝ End session due to user request
session←req.GetCookie'Session'
:If (1⊃⍴Sessions)≥i←Sessions.Cookie⍳⊂session ⍝ Cookie is in the table
req.Server.onSessionEnd(i⊃Sessions)
req.DelCookie'Session'
:If 0≠⍴z←req.Session.AuthCookieName ⋄ req.DelCookie z ⋄ :EndIf
req.Return'Logged out ...'
:Else
req.Return'No session established ...'
:EndIf
∇
∇ r←SessionCookie n;⎕RL;z;seed;p
⍝ Create Cookie from session ID or vice versa
:If (10|⎕DR n)∊0 2 ⍝ Session ID from Cookie
z←⎕UCS #.Base64.Decode n
⎕RL←256⊥2↑z ⋄ p←30?30
r←30⍴0 ⋄ r[p]←2↓z
r←256⊥4↑r
:Else ⍝ Session ID to Cookie
⎕RL←10000000|3⊃⎕AI
⎕RL←seed←?¯1+256*2 ⋄ p←30?30
r←#.Base64.Encode #.Base64.Char(256 256⊤seed),((256 256 256 256⊤n),¯1+?26⍴256)[p]
:EndIf
∇
∇ HouseKeeping Server;now;m;i;p
⍝ Check to see if any sessions have expired due to inactivity
⍝ Call any page application callbacks (_Close) if necessary
:Access Public
now←#.Dates.DateToIDN ⎕TS
:If ∨/m←Sessions.LastActive<now-Sessions.Timeout
:Hold 'Sessions'
:For i :In m/⍳⍴m
Server.onSessionEnd i⊃Sessions
:If 0≠⍴p←(i⊃Sessions).Pages
:AndIf 0≠⊃p.⎕NC⊂'_Close'
p._Close i⊃Sessions
:EndIf
:EndFor
Sessions←(~m)/Sessions
:EndHold
:EndIf
∇
:EndClass
﻿:Class deflate: ContentEncoder
⍝∇:require =\ContentEncoder.dyalog
:property Encoding
:access public shared
:implements Property ContentEncoder.encoding
∇ r←get
r←'deflate'
∇
:endproperty
utf8←{3=10|⎕DR ⍵: 256|⍵ ⋄ 'UTF-8' ⎕UCS ⍵}
sint←{⎕io←0 ⋄ 83=⎕DR ⍵:⍵ ⋄ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 ¯128 ¯127 ¯126 ¯125 ¯124 ¯123 ¯122 ¯121 ¯120 ¯119 ¯118 ¯117 ¯116 ¯115 ¯114 ¯113 ¯112 ¯111 ¯110 ¯109 ¯108 ¯107 ¯106 ¯105 ¯104 ¯103 ¯102 ¯101 ¯100 ¯99 ¯98 ¯97 ¯96 ¯95 ¯94 ¯93 ¯92 ¯91 ¯90 ¯89 ¯88 ¯87 ¯86 ¯85 ¯84 ¯83 ¯82 ¯81 ¯80 ¯79 ¯78 ¯77 ¯76 ¯75 ¯74 ¯73 ¯72 ¯71 ¯70 ¯69 ¯68 ¯67 ¯66 ¯65 ¯64 ¯63 ¯62 ¯61 ¯60 ¯59 ¯58 ¯57 ¯56 ¯55 ¯54 ¯53 ¯52 ¯51 ¯50 ¯49 ¯48 ¯47 ¯46 ¯45 ¯44 ¯43 ¯42 ¯41 ¯40 ¯39 ¯38 ¯37 ¯36 ¯35 ¯34 ¯33 ¯32 ¯31 ¯30 ¯29 ¯28 ¯27 ¯26 ¯25 ¯24 ¯23 ¯22 ¯21 ¯20 ¯19 ¯18 ¯17 ¯16 ¯15 ¯14 ¯13 ¯12 ¯11 ¯10 ¯9 ¯8 ¯7 ¯6 ¯5 ¯4 ¯3 ¯2 ¯1[utf8 ⍵]}
∇ (rc msg)←Init
⍝ Initialization is now handled by Conga v2.2
:Implements Method ContentEncoder.Init
(rc msg)←0 'OK'
∇
∇ (rc raw)←Compress buf
:Implements Method ContentEncoder.Compress
:Trap 0
raw←{(2×120 156≡2↑⍵)↓⍵}2⊃2(219⌶)sint buf ⍝ drop of 789C zlib header (IE barfs on it)
rc←0
:Else
(rc raw)←1 ⎕DM
:EndTrap
∇
∇ (rc raw)←Uncompress buf
:Implements Method ContentEncoder.Uncompress
:Trap 0
raw←¯2(219⌶)120 ¯100{⍵,⍨⍺/⍨⍺≢2↑⍵}buf ⍝ append 789C zlib header if missing
rc←0
:Else
(rc raw)←1 ⎕DM
:EndTrap
∇
:EndClass
﻿:Class gzip: ContentEncoder
⍝∇:require =\ContentEncoder.dyalog
:property Encoding
:access public shared
:implements Property ContentEncoder.encoding
∇ r←get
r←'gzip'
∇
:endproperty
utf8←{3=10|⎕DR ⍵: 256|⍵ ⋄ 'UTF-8' ⎕UCS ⍵}
sint←{⎕io←0 ⋄ 83=⎕DR ⍵:⍵ ⋄ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 ¯128 ¯127 ¯126 ¯125 ¯124 ¯123 ¯122 ¯121 ¯120 ¯119 ¯118 ¯117 ¯116 ¯115 ¯114 ¯113 ¯112 ¯111 ¯110 ¯109 ¯108 ¯107 ¯106 ¯105 ¯104 ¯103 ¯102 ¯101 ¯100 ¯99 ¯98 ¯97 ¯96 ¯95 ¯94 ¯93 ¯92 ¯91 ¯90 ¯89 ¯88 ¯87 ¯86 ¯85 ¯84 ¯83 ¯82 ¯81 ¯80 ¯79 ¯78 ¯77 ¯76 ¯75 ¯74 ¯73 ¯72 ¯71 ¯70 ¯69 ¯68 ¯67 ¯66 ¯65 ¯64 ¯63 ¯62 ¯61 ¯60 ¯59 ¯58 ¯57 ¯56 ¯55 ¯54 ¯53 ¯52 ¯51 ¯50 ¯49 ¯48 ¯47 ¯46 ¯45 ¯44 ¯43 ¯42 ¯41 ¯40 ¯39 ¯38 ¯37 ¯36 ¯35 ¯34 ¯33 ¯32 ¯31 ¯30 ¯29 ¯28 ¯27 ¯26 ¯25 ¯24 ¯23 ¯22 ¯21 ¯20 ¯19 ¯18 ¯17 ¯16 ¯15 ¯14 ¯13 ¯12 ¯11 ¯10 ¯9 ¯8 ¯7 ¯6 ¯5 ¯4 ¯3 ¯2 ¯1[utf8 ⍵]}
∇ (rc msg)←Init
⍝ Initialization
:Implements Method ContentEncoder.Init
(rc msg)←0 'OK'
∇
∇ (rc raw)←Compress buf
:Implements Method ContentEncoder.Compress
:Trap 0
raw←2⊃3(219⌶)sint buf
rc←0
:Else
(rc raw)←1 ⎕DM
:EndTrap
∇
∇ (rc raw)←Uncompress buf
:Implements Method ContentEncoder.Uncompress
:Trap 0
raw←256|¯3(219⌶)buf
rc←0
:Else
(rc raw)←1 ⎕DM
:EndTrap
∇
:EndClass﻿:Namespace _DC ⍝ Dyalog
⍝ Populated from \HTML\_DC\
⍝∇:require =\_JQ.dyalog
:EndNamespace
﻿:Class A : #._html.a
⍝ Description:: Dyalog Hyperlink widget based on the HTML a tag
⍝ Constructor:: [content [href]]
⍝ content - the displayed content for the link
⍝ href    - the URL for the link (default is '#')
⍝ Public Fields::
⍝ Href    - the URL for the link (default is '#')
⍝ Notes::
⍝ If the content begins with 'http' and the Href is not specifed then the content is used as the URL as well
:field public Href←''
∇ make
:Access public
:Implements constructor
∇
∇ make1 args
:Access public
:Implements constructor
(Content Href)←args defaultArgs'' ''
∇
∇ r←Render
:Access public
:If 0∊⍴Href
:If 'http'≡#.Strings.lc 4↑Content
'href'Set Content
:Else
'href'Set'#'
:EndIf
:Else
'href'Set Href
:EndIf
r←⎕BASE.Render
∇
:EndClass
﻿:Class APL : #._html.pre
∇ make
:Access Public
:Implements Constructor
∇
∇ make1 arg
:Access Public
:Implements Constructor
Content←arg
∇
∇ make2(content attr)
:Access Public
:Implements Constructor
Content←content
SetAttr attr
∇
∇ html←Render
:Access public
:If style≡UNDEF
style←'font-family:APL385 Unicode'
:Else
style,←(';'=¯1↑style)↓';font-family:APL385 Unicode'
:EndIf
:If 1<≢⍴Content
Content←2↓∊(⎕UCS 13 10)∘,¨↓Content
:ElseIf 1<≡Content
Content←2↓∊(⎕UCS 13 10)∘,¨Content
:EndIf
html←⎕BASE.Render
∇
:EndClass
﻿:class Accordion : #._html.div
⍝ Description:: Dyalog Accordion widget
⍝ Constructor:: [titles [sections]] | [titles_sections]
⍝ titles          - vector of char vectors containing titles to appear on sections
⍝ sections        - vector of vectors containing HTML content for each section
⍝ titles_sections - 2-column matrix of titles [;1] and sections [;2] as above
⍝                   or vector of 2 element title/tab vectors
⍝ Public Fields::
⍝ Titles          - vector of char vectors containing titles to appear on sections
⍝ Sections        - vector of vectors containing HTML content for each sectino
⍝ Theme           - base color for the color theme (default '#808080')
⍝ Examples::
⍝ Accordion 'Title1' 'Title2'
⍝ Accordion ('Title1' 'Title2')('Section1' 'Section2')
⍝ Accordion 2 2⍴'Title1' 'Section1' 'Title2' 'Section2'
⍝ Notes::
⍝  - This control is implemented in HTML+CSS without any JavaScript and is therefore
⍝          extremely lightwight, resulting in faster load times. However, this comes at the
⍝          cost of fewer features compared to competing controls. Use it if you just need
⍝          a basic Accordion.
:field public shared readonly ApiLevel←3
:Field public Titles←0⍴⊂''
:Field public Sections←0⍴⊂''
:Field public Theme←'#808080' ⍝ "Grey"
∇ Make
:Access public
:Implements constructor
Uses←'dcAccordion'
∇
∇ Make1 args
:Access public
:Implements constructor
Uses←'dcAccordion'
args←eis args
:If 1=⍴args
:If 2=⍴⍴1⊃args ⍝ matrix arg?
(Titles Sections)←↓[2]1⊃args
:Else ⍝ single title
Titles←args
:EndIf
:Else
(Titles Sections)←eis¨2↑args
:EndIf
∇
∇ {title}AddSection content
:Access public
:If 0=⎕NC'title' ⋄ title←'Section ',⍕1+⍴Titles ⋄ :EndIf
Titles,←⊂title
Sections,←⊂content
∇
∇ r←Render;title;section;numbers;n
:Access public
SetId
SetUse
AddClass'dc-accordion'
numbers←('dc-accordion-',id,'_','_',⍨⍕)¨⍳≢Sections
⍝ HTML structure
Content←''
:For title section n :InEach Titles Sections numbers
:If isRef title ⋄ title←title.Render ⋄ :EndIf
Content,←'<input type="radio" name="',id,'" id="',n,'t"'
:If n≡⊃numbers ⋄ Content,←' checked="checked"' ⋄ :EndIf
Content,←'/><label for="',n,'t">',title,'</label>'
Content,←'<div id="',n,'s">',(RenderCore section),'</div>'
:EndFor
r←⎕BASE.Render
⍝ Create color scheme based on the Theme color
⍝ Specific CSS
r,←'<style scoped="scoped">'
r,←'#',id,' {border-bottom: 1px solid ',(0.7 Mix⊂Theme),';}'
r,←'#',id,' > input[type=radio] + label {color: ',(Mix⊂Theme),'; '
r,←'border-top: 1px solid ',(Mix⊂Theme),'; }'
r,←'#',id,' > input[type="radio"]:focus + label {background:',(0.1 Mix⊂Theme),'}'
r,←'#',id,' > input[type="radio"]:checked + label {border-top: 1px solid ',(0.7 Mix⊂Theme),'}'
:For n :In numbers
r,←'#',n,'t:checked~#',n,'s,'
:EndFor
r↓⍨←¯1
r,←'{display:block;}</style>'
∇
Mix←{ ⍝ Arithmetic mean of multiple hex colors with optional ⍺
⎕IO←0
h←⎕D,6↑⎕A
rgb←⌊0.5+(⊃+/÷≢){16⊥⍉h⍳3 2⍴⍵/⍨6÷≢⍵}¨#.Strings.uc ⍵~¨⊂' #'
⍺←1
'rgba(',(1↓∊(',',⍕)¨rgb,⍺),')'
}
:endclass
﻿:class Audio: #._html.audio
⍝ Description:: Same as base HTML5 audio element but sets default message for browsers that don't support it
⍝ Constructor:: [src]
⍝ src      - location of the audio file to play
⍝ Public Fields::
⍝ src      - location of the audio file to play
:field public src←''
∇ Make0
:Access public
:Implements constructor
∇
∇ Make1 args
:Access public
:Implements constructor
src←args
∇
∇ html←Render
:Access public
:If 0∊⍴Content
Content←'Your browser does not support the audio tag.'
:EndIf
'src'Set src
html←⎕BASE.Render
∇
:endclass﻿:class Button : #._html.button
⍝ Description:: Dyalog Button widget
⍝ Constructor:: [content [name [value [attrs]]]]
⍝ content - the content of the button (what shows up on the button's face)
⍝ name  - the id/name for the button
⍝ value - the value for the button, this is what's returned to the server
⍝ attr  - attribute(s) for the button
⍝ Public Fields:: None
⍝ Notes::
⍝ The default type for this button is 'button', not 'submit' which is the default for the native HTML5 button
∇ Make0
:Access public
:Implements constructor
type←'button'
Content←'OK'
∇
∇ Make args
:Access public
:Implements constructor
args←eis⍣(~0∊⍴args)⊢args
(Content name value attrs)←args defaultArgs'OK'UNDEF UNDEF''
type←'button'
∇
∇ r←Render
:Access public
SetInputName
r←⎕BASE.Render
∇
:endclass
﻿:class CheckBox : #._html.input
⍝ Description:: Dyalog checkbox widget with tristate support
⍝ Constructor:: [value [label [labelpos [tristate]]]]
⍝ tristate - Boolean indicating whether the checkbox allows 3 states ('indeterminate' 'false' (default) or 'true')
⍝ value    - initial value for the checkbox either 'checked', 'unchecked', or 'indeterminate' if tristate
⍝ label    - string of text to appear next to the checkbox
⍝ labelpos - position of label relative to the checkbox ('left' (default) or 'right')
⍝ Public Fields::
⍝ TriState - Boolean indicating whether the checkbox allows 3 states ('indeterminate' 'false' (default) or 'true')
⍝ Label    - string of text to appear next to the input field
⍝ LabelPos - position of label relative to the input field ('left' (default) or 'right')
:field public TriState←0
:field public Label←''
:field public LabelPos←'left'
∇ Make0
:Access public
:Implements constructor
type←'checkbox'
∇
∇ Make1 args
:Access public
:Implements constructor
args←eis args
type←'checkbox'
(value Label LabelPos TriState)←args defaultArgs UNDEF'' 'left' 0
∇
∇ r←Render
:Access public
SetInputName
r←''
:If (⊂value)∨.≡UNDEF''
value←(1+TriState)⊃'unchecked' 'indeterminate'
:EndIf
:Select value
:Case 'checked'
Set'checked='
:Case 'indeterminate'
r,←'<script>function si(cb) {cb.readOnly=cb.indeterminate=true;};si(',id,');</script>'
:EndSelect
Set'onclick="',('bt'[1+TriState]),'s(this)"'
r,⍨←⎕BASE.Render
:If ~0∊⍴Label
r←r((LabelPos≡'right'){⍺⍺:⍺,⍵ ⋄ ⍵,⍺})(⎕NEW #._html.label(Label(,⊂'for'id))).Render
:EndIf
:If TriState
r,←(⎕NEW #._html.script ScriptFollows).Render
⍝ function ts(cb) {
⍝     if (cb.readOnly) {
⍝         cb.checked=cb.readOnly=false;
⍝         cb.value="unchecked";
⍝     } else if (!cb.checked) {
⍝         cb.readOnly=cb.indeterminate=true;
⍝         cb.value="indeterminate";
⍝     } else {
⍝         cb.value="checked";
⍝     }
⍝ }
:Else ⍝ BiState
r,←(⎕NEW #._html.script ScriptFollows).Render
⍝ function bs(cb) {
⍝     if (cb.checked) {
⍝         cb.value="checked";
⍝     } else {
⍝         cb.value="unchecked";
⍝     }
⍝ }
:EndIf
∇
:endclass
﻿:class Datalist : #._html.datalist
⍝ Description:: Dyalog improved HTML5 datalist element
⍝ Constructor:: [options]
⍝ options - vector of character vectors of values for the selectable list
⍝ Public Fields::
⍝ Options - vector of character vectors of values for the selectable list
⍝ Notes::
⍝ Different browsers render (or support) this element differently
:field public Options←''
:field public Input
∇ make
:Access public
:Implements constructor
(Input←New #._html.input).type←'list'
∇
∇ make1 args
:Access public
:Implements constructor
Options←args
(Input←New #._html.input).type←'list'
∇
∇ r←Render;dl
:Access public
SetId
Content←⍬
⍝ perform some magic to set the id/name of the input element to the id
Input.(id name)←⊂id
id←id,'_datalist'
'list'Input.Set id
Add{('value="',⍵,'"')New #._html.option}¨(⍪Options)[;1]
r←(Input.Render),⎕BASE.Render
∇
:endclass﻿:Class DirectoryBrowser : #._JS.DataTable
⍝∇:require =/../_JS/DataTable.dyalog
:field public Folder←''
:field public Filter←''
:field public Down←0
:field public Up←0
∇ make
:Access public
:Implements constructor
makeCommon
∇
∇ make1 args
:Access public
:Implements constructor
(Folder Filter Down Up)←args defaultArgs Folder Filter Down Up
makeCommon
∇
∇ makeCommon
:Trap 6
Root←#.Boot.AppRoot
:Else
Root←#.Utils.WSRoot
:EndTrap
∇
∇ r←Render;files;filenames;links;sizes
:Access public
files←{⍵⌿⍨Down≥⍵[;4]}Filter #.Files.List Root,Folder  ⍝ remove folder entrie if no drilldown
:If Down>0∊⍴Filter                       ⍝ if filtered and drilldown...
files⍪←{⍵⌿⍨⍵[;4]}#.Files.List Root,Folder ⍝ ...add in folders
:EndIf
Data←0 3⍴⊂''
files⌿⍨←'.'≠⊃¨files[;1] ⍝ remove current and parent entries
:If ~0∊⍴files
files←{⍵[⍒⍵[;4];]}{⍵[⍋#.Strings.lc↑⍵[;1];]}files
filenames←files[;1]{'&#',(⍕128196-2×⍵),'; ',⍺,⍵/'/'}¨files[;4]
links←files[;4](Folder{'<a ',((~⍺)/'target="_blank" '),'href="',(⍺⍺,10↓⍵),'">',⍵,'</a>'})¨filenames
sizes←#.Strings.commaFmt files[;2]
(files[;4]/sizes)←⊂'[dir]'
Data←links,sizes,⍪#.Dates.TSFmt¨files[;3]
:EndIf
:If Up>0∊⍴Folder
Data⍪⍨←((New #._DC.A'&#128193; ..'({⍵↓⍨-⊥⍨'/'≠⍵}¯1↓Folder)).Render)'' ''
:EndIf
Data⍪⍨←'Name' 'Size' 'Timestamp'
'autoWidth'Set _true
'columns'Set⊂'[{"type":"html","className":"db-left"},{"type":"num-fmt","className":"db-right"},{"type":"date","className":"db-left"}]'
AddClass'display'
r←(⎕NEW #._DC.Style((('.db-left')('text-align' 'left'))(('.db-center')('text-align' 'center'))(('.db-right')('text-align' 'right')))).Render
r,←⎕BASE.Render
∇
:EndClass
﻿:class EditField : #._html.input
⍝ Description:: Dyalog text input field widget
⍝ Constructor:: [name [value [attr1=data1 attr2=data2 ...]]]
⍝ name  - the id/name for the input field
⍝ value - the initial value for the input field
⍝ attr  - attribute(s) for the input field
⍝ Public Fields:: None
⍝ Notes::
⍝ If either the id or name are undefined, the undefined one is set to the same value as the defined one
⍝ If both id and name are undefined, a unique id is generated and the name is set to it as well
∇ make0
:Access public
:Implements constructor
type←'text'
∇
∇ make args;att
:Access public
:Implements constructor
args←eis args
name value att←args defaultArgs UNDEF UNDEF''
Set att
type←'text'
∇
∇ r←Render
:Access public
SetInputName
r←⎕BASE.Render
∇
:endclass
﻿:Class Fieldset: #._html.fieldset
⍝ Description:: Same as base HTML5 fieldset, but accepts the legend for the fieldset as an argument
⍝ Constructor:: [legend]
⍝ legend   - legend/heading to display
⍝ Public Fields::
⍝ Legend   - legend/heading to display
:Field Public Legend←''
∇ Make0
:Access Public
:Implements constructor
∇
∇ Make1 args
:Access Public
:Implements constructor
Legend←args
∇
∇ html←Render
:Access Public
Insert _.legend Legend
html←⎕BASE.Render
∇
:EndClass﻿:Class Figure : #._html.figure
⍝ Description:: Same as base HTML5 figure, but with Caption and CaptionPos attributes
⍝ Constructor:: [content [attr]]
⍝ content    - the content for the figure
⍝ attr       - attribute settings, if any, for the figure
⍝ Public Fields::
⍝ Caption    - Caption to display for the figure
⍝ CaptionPos - Caption position, either 'bottom' (the default) or 'top'
:Field Public Caption←''
:field public CaptionPos←'bottom'  ⍝ valid values are 'bottom' 'top'
∇ html←Render
:Access Public
:If ~0∊⍴Caption
:If 'bottom'≢CaptionPos
Insert #._html.figcaption Caption
:Else
Add #._html.figcaption Caption
:EndIf
:EndIf
html←⎕BASE.Render
∇
:EndClass﻿:class Form : #._html.form
⍝ Description:: Same as the base HTML5 form element, but sets the action and method attributes
⍝ Constructor:: [page [method]]
⍝ page     - the URL of the page to which to send the form request
⍝            default is to call back to the same page that contains the form
⍝ method   - the HTTP method ('post' or 'get')
⍝            default is 'post'
⍝ Public Fields::
⍝ Page     - the URL of the page to which to send the form request
⍝            default is to call back to the same page that contains the form
⍝ Method   - the HTTP method ('post' or 'get')
⍝            default is 'post'
:field public Method←'post'
:field public Page←''
∇ make;c
:Access public
:Implements constructor
∇
∇ make1 args
:Access public
:Implements constructor
args←eis args
Page Method←args defaultArgs'' 'post'
∇
∇ r←Render
:Access public
:If 0∊⍴Page
:AndIf 0∊⍴Page←⊃Attrs[⊂'action']
:If {6::0 ⋄ ''≢c∘←##.context ⍵}'_Request'
Page←c._Request.Page
:EndIf
:EndIf
Attrs['action' 'method']←Page Method
:If 'post'≡#.Strings.lc Method
'enctype'Set'multipart/form-data'
:EndIf
r←⎕BASE.Render
∇
:endclass﻿:Class Grid : #._DC.Table
⍝ Description:: Grid - like _.Table but with borders - accepts matrix of data
⍝ Constructor:: [Data [CellAttr [HeaderRows [HeaderAttr [MakeCellIds [MakeRowIds]]]]]
⍝
⍝ Public Fields::
⍝ Data        - matrix of data to display in the table
⍝ CellAttr    - Cell Attributes
⍝ HeaderRows  - # of header rows
⍝ HeaderAttr  - Header attributes
⍝ MakeCellIds - 1 to generate IDs      <td id="tableId_r2c3">
⍝ MakeRowIds  - 1 to generate Row IDs  <tr id="tableId_row2">
⍝∇:require =/Table.dyalog
∇ Make0
:Access public
:Implements constructor
∇
∇ Make1 data
:Access public
:Implements constructor :base data
∇
∇ html←Render;sel;styles
:Access public
SetId
sel←'#',id
styles←(sel(('border-collapse' 'collapse')('border' '1px solid black')))((sel,' th')('border' '1px solid black'))((sel,' td')('border' '1px solid black'))
html←(⎕NEW #._DC.Style styles).Render
html,←⎕BASE.Render
∇
:EndClass
﻿:class Gyro : #._DC.Script
⍝ Description:: create a gyroscopic listener (e.g. for use with mobile phones or tablets)
⍝ Constructor:: [callback [interval [page]]]
⍝ interval    - the number of milliseconds to wait between requests sent to the server
⍝ page        - the URL of the page to which to send the request
⍝ Public Fields::
⍝ Interval    - the number of milliseconds to wait between requests sent to the server (default is 250ms)
⍝ Page        - the URL of the page to which to send the request (default is calling page)
⍝ Callback    - the name of the callback function to execute (default is 'APLJax')
⍝ NoAlert     - boolean value to optionally suppress the Alert if DeviceOrientation-Event not supported (if set to 1)
⍝ Notes::
⍝ returns the following data elements to the server
⍝ event    - "deviceorientation"
⍝ alpha    - direction
⍝ beta     - front/back tilt
⍝ gamma    - left/right tilt
⍝∇:require =\Script.dyalog
:field public Page←''
:field public Interval←250
:field public Callback←'APLJax'
:field public JavaScript←''
:field public NoAlert←0
∇ Make0
:Access public
:Implements constructor
Uses←'JQuery'
∇
∇ Make1 arg
:Access public
:Implements constructor
arg←eis arg
(Callback Interval JavaScript Page)←⍕¨arg defaultArgs Callback Interval JavaScript Page
Uses←'JQuery'
∇
∇ r←Render;code;params
:Access public
SetUse
:If 0∊⍴Page
:If {6::0 ⋄ ''≢c∘←##.context ⍵}'_Request'
Page←c._Request.Page
:EndIf
:EndIf
(params←⎕NS'').(∆interval ∆page ∆callback ∆script)←Interval Page Callback JavaScript
Code←params Subst ScriptFollows
⍝     if (window.DeviceOrientationEvent) {
⍝         var time = 0;
⍝         var newtime = 0;
⍝         window.addEventListener('deviceorientation', function (evt) {
⍝             newtime = new Date().getTime();
⍝             if (∆interval < (newtime - time)) {
⍝                 time = newtime;
⍝                 ∆script;
⍝                 $.ajax({
⍝                     url: "∆page",
⍝                     cache: false,
⍝                     type: "POST",
⍝                     dataType: "json",
⍝                     headers: {"isAPLJax": "true"},
⍝                     data: {
⍝                         _event: evt.type,
⍝                         _callback: "∆callback",
⍝                         alpha: Math.round(evt.alpha),
⍝                         beta: Math.round(evt.beta),
⍝                         gamma: Math.round(evt.gamma)
⍝                     },
⍝                     success: function(obj){APLJaxReturn(obj);}
⍝                 });
⍝             }}, false);
⍝         }
Code←(~NoAlert)/'else {alert("This device/browser does not support the deviceorientation event");}'
r←⎕BASE.Render
∇
:endclass
﻿:class Icon : #._html.span
⍝ Description:: Dyalog Icon widget
⍝ Constructor:: [spec]
⍝ spec - either a single or pair of string which specify the icon(s) to use
⍝        each consists of a vendor-prefix, dash, icon-name, and optionally space-separated modifiers
⍝        when two strings are used, it represents a "stacked" icon, with second icon overlayed on the first
⍝        "stacked" icons are a feature of FontAwesome icons - using other icons may or may not have the desired visual effect
⍝
⍝ Public Fields::
⍝ Spec  - either a single or pair of string which specify the icon(s) to use
⍝         each consists of a vendor-prefix, dash, icon-name, and optionally space-separated modifiers
⍝         when two strings are used, it represents a "stacked" icon, with second icon overlayed on the first
⍝         "stacked" icons are a feature of FontAwesome icons - using other icons may or may not have the desired visual effect
⍝
⍝ KitURL - reduce download-size with FontAwesomeKits. This field, if used, should be assigned before using any Icons. It
⍝           contains the full path to your FA-Kit /as given by the FA-Pro "Kit-Builder")
⍝
⍝ Usage Notes::
⍝ Icon currently supports 3 different libraries of icons:
⍝   Library                  Prefix
⍝   -----------------------  -------------------
⍝   Syncfusion               e-  or ej-
⍝   Google Material Design   md-
⍝   FontAwesome 5            fas- far- fal- fab- fad- (solid, regular, light, brands, duotone)
⍝                            or alternatively "fas fa-{name}" (longer, same result)
⍝ While you may, in theory, mix and match icons from different libraries, it is recommended that you use a single library if possible.
⍝
⍝
⍝
⍝ Examples::
⍝ Add _.Icon 'fa-cloud-upload-alt'          ⍝ FontAwesome: http://fontawesome.com/icons/
⍝ Add _.Icon 'md-fingerprint'               ⍝ Google Material Design: https://design.google.com/icons/
⍝ Add _.Icon 'e-delete-column_01'           ⍝ Syncfusion Essential JavaScript: http://js.syncfusion.com/demos/web/#!/azure/icon/EJIcons
⍝
⍝ '.fa-spin' Add _.Icon 'md-track_changes'  ⍝ FontAwesome effects (works on non-FA icons too)
⍝ 'style="color: red;"' Add _.Icon 'e-stop' ⍝ Applying own styling
⍝ Add _.Icon 'fa-square fa-2x' 'fa-terminal fa-inverse' ⍝ Stacking inverse small on large
⍝ Add _.Icon 'fa-camera' 'fa-ban fa-2x'     ⍝ Stacking large on small
:field public shared readonly ApiLevel←3
:Field public Spec←⍬
:field public shared readonly DocBase←'http://fontawesome.io/examples/'
:field public shared KitURL←''
∇ Make
:Access public
:Implements constructor
∇
∇ Make1 args;last
:Access public
:Implements constructor
Spec←args
∇
∇ r←Render;prefix;spec;icon;classes;n;origContent;origSpec;origClass
:Access public
(origSpec origContent origClass)←Spec Content class
Spec←eis Spec
:If ~0∊⍴Content ⋄ Spec,←eis Content ⋄ :EndIf
Content←⍬
:If 1=⍴Spec ⍝ Simple icon
Spec←{⊃⍣(1<≡⍵)⊢⍵}Spec ⍝ Disclose if nested (eis⍣¯1)
:If isInstance Spec
Spec←Spec.Spec
:EndIf
(prefix spec)←Spec SplitOn1st'-'
:Select ¯1↓prefix
:Case 'fa' ⍝ try to support old-style FA4-Codes by replacing with fas
⍝ and spit out some warning into the session!
UseFA
AddClass'fas ',Spec
⍝ :if Debugging ^ DevelopmentSys
⍝    echo warning about use of fa-
⍝ :endif
:CaseList 'far' 'fas' 'fal' 'fab' 'fad'
UseFA
Tag←'i'
AddClass(¯1↓prefix),' fa-',spec  ⍝ change fab-name into "fab fa-name"
:Case 'md' ⍝ Google
Use'mdIcons'
(icon classes)←(spec,' ')SplitOn1st' '
AddClass'material-icons ',classes
Content←¯1↓icon
:CaseList (,'e')'ej' ⍝ Syncfusion
Use'ejIcons'
AddClass'e-icon e-',spec
AddStyle'display: inline-block'  ⍝ add this because default Syncfusion is "block"
:Else
:If (⊂3↑prefix)∊'far' 'fas' 'fal' 'fab'  ⍝ 'fas fa-{name}' is direct use of FA5-Tags
UseFA
AddClass prefix,spec
:Else
Content←Spec
:EndIf
:EndSelect
:Else
UseFA
AddClass'fa-layers fa-fw'
:For spec :In Spec
:If isInstance spec
⍝        spec.AddClass
Add spec
:Else
Add _.Icon spec
:EndIf
:EndFor
:EndIf
SetUse
r←⎕BASE.Render
(Spec Content class)←origSpec origContent((1+origClass≡UNDEF)⊃origClass'') ⍝ cannot just "unset" class
∇
∇ UseFA
:Access public shared
:If 0=≢KitURL
Use'faIcons5svg'
:Else
:If {9=⎕NC'⍵'}_PageRef
('crossorigin=anonymous src=',KitURL)_PageRef.Head.Add _.script
:EndIf
:EndIf
∇
SplitOn1st←{(l↑⍺)((l←⍺⍳⍵)↓⍺)}
:endclass
﻿:class Input : #._html.input
⍝ Description:: Dyalog input widget
⍝ Constructor:: [type [value [label [labelpos]]]]
⍝ type     - type of input field (text, date, etc) (default is 'text')
⍝ value    - initial value for the input (empty if none)
⍝ label    - string of text to appear next to the button
⍝ labelpos - position of label relative to the input ('left' (default) or 'right')
⍝ Public Fields::
⍝ Label    - string of text to appear next to the input field
⍝ LabelPos - position of label relative to the input field ('left' (default) or 'right')
:field public Label←''
:field public LabelPos←'left'
∇ Make0
:Access public
:Implements constructor
type←'text'
∇
∇ Make1 args
:Access public
:Implements constructor
args←eis args
(type value Label LabelPos)←args defaultArgs'text' '' '' 'left'
∇
∇ r←Render
:Access public
SetInputName
:If type≡#.Strings.nocase'number'
value←#.Strings.fmtNum value
:EndIf
r←⎕BASE.Render
:If ~0∊⍴Label
r←r((LabelPos≡'right'){⍺⍺:⍺,⍵ ⋄ ⍵,⍺})(⎕NEW #._html.label(Label(,⊂'for'id))).Render
:EndIf
∇
:endclass
﻿:class InputFile : #._DC.Input
⍝ Description:: Dyalog input file widget
⍝ Constructor:: [label [labelpos]]
⍝ label    - string of text to appear next to the button
⍝ labelpos - position of label relative to the input ('left' (default) or 'right')
⍝ Public Fields::
⍝ Label    - string of text to appear next to the input field
⍝ LabelPos - position of label relative to the input field ('left' (default) or 'right')
∇ Make0
:Access public
:Implements constructor
type←'file'
∇
∇ Make1 args
:Access public
:Implements constructor
args←eis args
(Label LabelPos)←args defaultArgs'' 'left'
type←'file'
∇
∇ r←Render
:Access public
type←'file'
r←⎕BASE.Render
∇
:endclass﻿:class InputGrid : #._html.table
⍝ Description:: Dyalog Widget - produce a 2-column (or 2-row) grid of labels and inputs
⍝ Constructor:: [labels inputs | ;labels inputs]
⍝ labels   - a vector of labels
⍝ inputs   - a vector of input objects
⍝ N.B. - labels and inputs must be of equal length
⍝ Public Fields::
⍝ Border        - 1 to draw borders around grid cells
⍝ Flip          - 0 for labels on the left (vertical) or top (horizontal)
⍝                 1 for labels on the right (vertical) or bottom (horizontal)
⍝ Horizontal    - 0 for vertical layout (2-column) or 1 for horizontal layout (2-row)
⍝ Inputs        - vector of inputs
⍝ Labels        - vector of labels
⍝ Notes::
⍝ label cells are assigned a class of (id,'_label')
⍝ input cells are assigned a class of (id,'_input')
⍝ This facilitates being able to easily assign styling to the cells
⍝ Examples::
⍝ ipg←'myIpg' Add _.InputGrid ('lab1' 'lab2')(('inp1' New _.input)('inp2' New _.input))
⍝ Add _.Style '.myIpg_label' 'background-color:aliceblue' ⍝ set the label background color
:field public Border←0
:field public Labels←''
:field public Inputs←''
:field public Flip←0
:field public Horizontal←0 ⍝ default is vertical
∇ make
:Access public
:Implements constructor :base
∇
∇ make1 args;data;sel
:Access public
:Implements constructor
:If 2=⍴⍴args
(Labels Inputs)←↓[1]args
:Else
args←eis args
(Labels Inputs)←args
:EndIf
∇
∇ html←Render;cells;rows;_style;_lab;_inp;border;i
:Access public
(_inp _lab)←Inputs Labels
SetId
:If ~0∊⍴Inputs
Inputs←{isClass⊃⍵:⎕NEW∘{2<⍴,⍵:(⊃⍵)({eis ⍵}(1↓⍵)) ⋄ ⍵}⍵ ⋄ ⍵}¨Inputs
Inputs.SetInputName
Labels←(eis Inputs.id){'<label for="',⍺,'">',(renderIt ⍵),'</label>'}¨eis Labels
cells←{⎕NEW #._html.td(⍵)}¨(,Labels),[1.1],Inputs
cells[;1].class←⊂id,'_label'
cells[;2].class←⊂id,'_input'
:If Horizontal
cells←(⌽⍣Flip)cells
cells←⍉cells
:ElseIf Flip
cells←⌽cells
:Else
cells[;1].style←⊂'text-align:right'
:EndIf
rows←⎕NEW¨(⊃⍴cells)⍴#._html.tr
rows.Add↓cells
Content←rows.Render
:EndIf
border←''
:If 1≡⊃Border
i←'#',id
border←(New _.Style(i,', ',i,' td')(('border' '1px solid')('border-collapse' 'collapse'))((i,' td')('padding' '5px 10px'))).Render
:EndIf
html←(⎕BASE.Render),border
(Inputs Labels)←_inp _lab
∇
:endclass
﻿:class InputSubmit : #._html.input
⍝ Description:: Dyalog input submit button widget
⍝ Constructor:: [value]
⍝ value    - value for the input (this is displayed on the button)
∇ Make
:Access public
:Implements constructor :base
(value type)←'Submit' 'submit'
∇
∇ Make1 args;n;v
:Access public
:Implements constructor :base
args←eis args
value←⊃1↑args defaultArgs,⊂'Submit'
type←'submit'
∇
:endclass﻿:Class List : #._html.ul
⍝ Description:: Enhanced HTML ul
⍝ Constructor:: [items [levels [links]]]
⍝ items     - vector of texts for the list
⍝ levels    - optional vector of levels
⍝ links     - optional anchor links
⍝      OR     matrix [;1] items [;2] levels [;3] links
⍝ Public Fields::
⍝ Items     - vector of texts for the list
⍝ Levels    - optional vector of levels
⍝ Links     - optional anchor links
⍝ MakeIds   - 1 to assign ids to list items
⍝ Ordered   - 1 to make ordered (numbered) list
⍝ Examples::
⍝ Ul (⊂'Item 1' 'Item 2' 'Item 3')                       ⍝ needs to be enclosed if vector
⍝ Ul (('One' 'Two')('http:/one.com' 'http://two.com'))
⍝ Ul (('One' 'Two')(('http:/one.com' 'target=_blank') 'http://two.com')) ⍝ Link can have attributes
:Field Public Items←⍬         ⍝ vector or
:Field Public Levels←1        ⍝
:Field Public Links←⍬         ⍝ hyperlinks
:Field Public MakeIds←0
:Field Public Ordered←0
∇ make
:Access Public
:Implements constructor
∇
∇ make1 args;attr
:Access public
:Implements constructor
:Select ⊃⍴⍴args ⍝ Select on Rank
:Case 1         ⍝ Vector
:If 0 2∊⍨10|⎕DR⊃args ⍝ 1st element is simple char
args←,⊂args
:EndIf      ⍝ Matrix
:Case 2 ⋄ args←↓[1]args ⍝ Split columns
:Else
:EndSelect
args←eis args
(Items Levels Links)←args defaultArgs Items Levels Links
∇
∇ r←Render;i;link;links;opt;opts;text;n;ids;mat;diff;ul;xp
:Access public
Tag←'ol'⊣⍣Ordered⊢'ul'
SetId
n←≢Items
:If ~0∊n
opts←{isRef ⍵:⍵ ⋄ HtmlSafeText ⍵}¨eis Items
links←(⍴Items)↑(eis Links),(⍴Items)⍴⊂''
text←opts
opts←⍬
:For i link :InEach (⍳⍴links)links
:If 0=⍴link ⍝ no link
opt←text[i]
:ElseIf 326=⎕DR link ⍝ Nested array
(opt←(⊂'href'(⊃link))New _.a(i⊃text)).Set 1↓link
:Else ⍝ no attrs
opt←(⊂'href'link)New _.a(i⊃text)
:EndIf
opts,←opt
:EndFor
:EndIf
mat←⎕XML∊{isRef ⍵:⍵.Render ⋄ '<span>',⍵,'</span>'}¨opts
Levels⍴⍨←n
diff←0,¯2-/Levels
ul←≠\2/diff>0           ⍝ Step up: new ul
ids←{'id'⍵}¨id #.Utils.levels2ids Levels
i←⍋⍋(2×n)⍴0 1
mat←(,Levels∘.+0 1),(((n 2⍴'li' ''),ids)⍪mat[;1+⍳3])[i;]
⍝ We now insert ul/ols where they belong
xp←~ul←≠\(1+ul)/ul ⋄ n←≢i←ul/⍳⍴ul
mat←xp⍀mat
mat[i;]←mat[i-1;1],n 3⍴Tag'' '' ⍝ same as level before
mat[;1]+←+\xp\,0,⍨⍪diff           ⍝ the others get corrected
⍝ Finally we adjust the level number so it starts a 0
mat[;1]-←1⍴mat
Add ⎕XML mat                        ⍝ and use ⎕XML to format nicely
r←⎕BASE.Render
∇
:endclass
﻿:Class ListManager : #._DC.StackPanel
⍝ Description:: Dyalog ListManager widget using Syncfusion ListBoxes
⍝ Constructor:: [leftItems [rightItems [useButtons]]]
⍝ leftItems       - vector of char vectors
⍝                   or matrix of field definitions with field types as the first row
⍝ rightItems      - vector of char vectors
⍝                   or matrix of field definitions with field types as the first row
⍝ Public Fields::
⍝ Left            - the left ejListBox
⍝ Right           - the right ejListBox
⍝ Width           - the width of the ListBoxes
⍝ Height          - the height of the ListBoxes
⍝ Gap             - the size of the gap between ListBoxes
⍝∇:require =\StackPanel.dyalog
:Field Public Shared Readonly DocBase←'http://help.syncfusion.com/UG/JS_CR/ejListBox.html'
:Field Public Shared Readonly ApiLevel←3
:Field Public Shared Readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejListBox.html'
:field public Left               ⍝ left ListBox
:field public Right              ⍝ right ListBox
:field public Width←200          ⍝ width of the ListBoxes
:field public Height←300         ⍝ height of the ListBoxes
:field public Gap←50             ⍝ space between the ListBoxes
:field public Captions←'' ''     ⍝ Captions to appear over the ListBoxes
∇ make
:Access public
JQueryFn←Uses←'ejListBox'
:Implements constructor
ContainerTag←'ul'
(Left←⎕NEW #._SF.ejListBox).Side←1
(Right←⎕NEW #._SF.ejListBox).Side←2
Horizontal←1
∇
∇ makec args;x;left;right
:Access public
:If 2=≡args ⋄ args←,⊂args ⋄ :EndIf
args←eis args
JQueryFn←Uses←'ejListBox'
ContainerTag←'ul'
:Implements constructor
(left right)←args defaultArgs ⍬ ⍬
(Left←⎕NEW #._SF.ejListBox left).Side←1
(Right←⎕NEW #._SF.ejListBox right).Side←2
(⍕¨Width Height)∘{'width' 'height'⍵.Set ⍺}¨Left Right
Horizontal←1
∇
∇ r←Render;butt;rgt;lft;buttons
:Access public
Content←⍬
SetId
{'allowDragAndDrop'⍵.Set _true}¨Left Right
(Left Right)._PageRef←_PageRef
lft rgt←Left Right
:If ∨/~0∘∊∘⍴¨Captions
lft rgt←Captions{New #._DC.StackPanel ⍺ ⍵}¨Left Right
:EndIf
Add¨lft(butt←'style="text-align:center;"'New #._html.div)rgt
'width'(Items[2]).Set Gap
r←⎕BASE.Render
∇
:EndClass﻿:Class Markdown : #.HtmlElement
⍝ Description:: Insert rendered Markdown content (using MarkAPL from APL Team/Kai Jaeger)
⍝ Constructor:: [content]
⍝ content          - the markdown content to render
⍝ Public Fields::
⍝ Content          - the markdown content to render
⍝ File             - the name of a file containing markdown content
⍝ ContentPosition  - Specifies where Content occurs if both Content and File are specified
⍝                    valid values are 'before' and 'after' (default is 'before')
⍝ Tag              - HTML container for the rendered content (default is 'div')
:field public shared readonly DocBase←'http://aplwiki.com/MarkAPL'
:field public File←''
:field public ContentPosition←'before'
∇ make
:Access public
:Implements constructor
Tag←'div'
∇
∇ make1 arg
:Access public
:Implements constructor :base 'div' arg
∇
∇ r←Render;content;file
:Access public
content←Content
:If ~0∊⍴File
:If #.Boot.isRelPath file←File
file,⍨←#.Boot.AppRoot
:EndIf
:If #.Files.Exists file
Content←⊃,/('b'≠1↑#.Strings.lc ContentPosition)⌽(#.Strings.vtv Content)(1 #.Files.ReadText file)
:Else
{0:: ⋄ 1 #.Boot.ms.Log'Markdown file "',⍵,'" not found'}file
:EndIf
:Else
Content←#.Strings.vtv renderIt Content
:EndIf
Content←⊃#.MarkAPL.Markdown2HTML Content
r←⎕BASE.Render
Content←content
∇
:EndClass
﻿:Class Ol : #._html.ol
⍝ Description:: Enhanced HTML ol
⍝ Constructor:: [items [links]]
⍝ items     - vector of texts for the list
⍝ links     - optional anchor links
⍝ Public Fields::
⍝ Items     - vector of texts for the list
⍝ Links     - optional anchor links
⍝ Examples::
⍝ Ul (⊂'Item 1' 'Item 2' 'Item 3')                       ⍝ needs to be enclosed if vector
⍝ Ul (('One' 'Two')('http:/one.com' 'http://two.com'))
⍝ Ul (('One' 'Two')(('http:/one.com' 'target=_blank') 'http://two.com')) ⍝ Link can have attributes
:Field Public Items←⍬         ⍝ vector or matrix [;1] Items [;2] Links
:Field Public Links←⍬         ⍝ hyperlinks
∇ make
:Access Public
:Implements constructor
∇
∇ make1 args;attr
:Access public
:Implements constructor
:Select ⊃⍴⍴args ⍝ Select on Rank
:Case 1         ⍝ Vector
:If 0 2∊⍨10|⎕DR⊃args ⍝ 1st element is simple char
args←,⊂args
:EndIf      ⍝ Matrix
:Case 2 ⋄ args←↓[1]args ⍝ Split columns
:Else
:EndSelect
args←eis args
(Items Links)←2↑args,(⍴args)↓Items Links
∇
∇ r←Render;i;link;links;opt;opts;text;n
:Access public
SetId
:If ~0∊n←⍴Items
opts←{isRef ⍵:⍵ ⋄ HtmlSafeText ⍵}¨eis Items
:If ~0∊⍴Links
links←(⍴Items)↑Links,(⍴Items)⍴⊂''
text←opts
opts←⍬
:For i :In ⍳⍴links
:If 326=⎕DR link←i⊃links ⍝ Nested array
(opt←(⊂'href'(⊃link))New _.a(i⊃text)).Set 1↓link
:Else
opt←(⊂'href'link)New _.a(i⊃text)
:EndIf
opts,←opt
:EndFor
:EndIf
({id,'_',⍕⍵}¨⍳n)Add¨↓_.li,⍪opts
:EndIf
r←⎕BASE.Render
∇
:endclass
﻿:Class Panel : #._html.div
⍝ Description:: Panel widget
⍝
⍝ Constructor:: [Message [Type [Title]]]
⍝ Message - the text that will appear in the popup
⍝ Type - one of 'info', 'warn', 'erro[r]', 'succ[ess]', 'warnRed' OR .ClassName for custom styling
⍝ Title - Text of the title (Box is rendered without title-section if no title is specified)
⍝
⍝ Public Fields::
⍝ Message - the text that will appear in the popup
⍝ Type - one of 'info', 'warn', 'erro[r]', 'succ[ess]', 'warnRed' OR .ClassName for custom styling
⍝ Title - Text of the title (Box is rendered without title-section if no title is specified)
⍝ Icon - name of an Icon (as accepted by the Icon-Class) OR a ref to an existing Icon-Object
⍝ Radius - (0=square,1=defaults, any other number is measure, unit given in RadiusUnit)
⍝ RadiusUnit - defaults to "em", but you can also specify a different unit
⍝ Radius and RadiusUnit can be defined a single elements or up to 4 elements (for each corner).
⍝ If less than 4 elems are supplied, missing elems will be filled according to CSS-Rules
⍝  Four values: first value applies to top-left, second value applies to top-right, third value applies to bottom-right, and fourth value applies to bottom-left corner
⍝  Three values: first value applies to top-left, second value applies to top-right and bottom-left, and third value applies to bottom-right
⍝  Two values: first value applies to top-left and bottom-right corner, and the second value applies to top-right and bottom-left corner
⍝  One value: all four corners are rounded equally
⍝
⍝ Notes::
⍝ To use custom-styling, provide the "base-name" of your style and add a style-sheet in which
⍝ you use selectors that combine your style with .dc-panel-icon, dc-panel-title to specifically
⍝ style these sections of the panel. (dc-panel-content can be skipped if you specify the others.)
⍝ See the Advanced Example for a practical example.
:field public Message←''
:field public Type←'info'       ⍝ info | warn | errorr] | success | warnRed (Warning-Symbol with red color - if you don't like normal "error"-style)
:field public Title←''
:field public Icon←''
:field public Radius←1          ⍝ boolean or width (up to 4 elements)
:field public RadiusUnit←'em'   ⍝ unit of radius
∇ make0
:Access public
:Implements constructor :base
Uses←'dcPanel'
∇
∇ make1 arg
:Access public
:Implements constructor :base
(Message Type Title)←(eis arg)defaultArgs Message Type Title
Uses←'dcPanel'
∇
∇ r←Render;icon;class;c;cclass;d;ic;theStyle;i
:Access public
cclass←'dc-panel-dfltStyle'
SetId
SetUse
:Select ∪,Radius
:Case ,0 ⋄ class←'dc-panel-s'
:Case ,1 ⋄ class←'dc-panel-r'
:Else
class←'dc-panel-c',GenId  ⍝ create a custom class
:Select ≢Radius
:CaseList 1 2 ⋄ Radius←4⍴Radius
:Case 3 ⋄ Radius←Radius,Radius[2]
:EndSelect
:Select ≢RadiusUnit←,eis RadiusUnit
:CaseList 1 2 ⋄ RadiusUnit←4⍴RadiusUnit
:Case 3 ⋄ RadiusUnit←RadiusUnit,RadiusUnit[2]
:EndSelect
theStyle←ScriptFollows
⍝ .%class% {
⍝  border-top-left-radius:     %Radius1%%RadiusUnit1%;
⍝  border-top-right-radius:    %Radius2%%RadiusUnit2%;
⍝  border-bottom-left-radius:  %Radius3%%RadiusUnit3%;
⍝  border-bottom-right-radius: %Radius4%%RadiusUnit4%;
⍝}
⍝ .%class%  > .dc-panel-icon  + .dc-panel-content
⍝{
⍝  border-top-left-radius:     %Radius1%%RadiusUnit1%;
⍝  border-top-right-radius:    %Radius2%%RadiusUnit2%;
⍝  border-bottom-left-radius:  %Radius3%%RadiusUnit3%;
⍝  border-bottom-right-radius: %Radius4%%RadiusUnit4%;
⍝}
⍝ .%class% > .dc-panel-title {
⍝  border-top-left-radius:     %Radius1%%RadiusUnit1%;
⍝  border-top-right-radius:    %Radius2%%RadiusUnit2%;
⍝}
⍝.%class% > .dc-panel-title +.dc-panel-icon +.dc-panel-content {
⍝  border-top-left-radius: 0em;
⍝  border-top-right-radius: 0em;
⍝  border-bottom-left-radius:  %Radius3%%RadiusUnit3%;
⍝  border-bottom-right-radius: %Radius4%%RadiusUnit4%;
⍝}
:For i :In ⍳4
theStyle←(theStyle #.Strings.subst('%Radius',(⍕i),'%')(⍕Radius[i]))#.Strings.subst('%RadiusUnit',(⍕i),'%')(i⊃RadiusUnit)
:EndFor
theStyle←theStyle #.Strings.subst'%class%'class
_PageRef.Head.Add _.style theStyle
class,←' dc-panel-c'
:EndSelect
AddClass(class,' dc-panel')
:Select 4↑Type
:Case 'info' ⋄ icon←'info-circle' ⋄ class←'dc-panel-info'
:Case 'warn'
:If 'Red'≡¯3↑Type
icon←'times-circle' ⋄ class←'dc-panel-error'
:Else
icon←'exclamation-circle' ⋄ class←'dc-panel-warning'
:EndIf
:Case 'erro' ⋄ icon←'times-circle' ⋄ class←'dc-panel-error'
:Case 'succ' ⋄ icon←'check' ⋄ class←'dc-panel-success'
:Else
:If '.'=⍬⍴Type  ⍝ specified custom class
cclass←1↓Type ⋄ class←''
:EndIf
:EndSelect
c←''
:If ~0∊⍴Title ⋄ c,←('class="',class,' ',cclass,' dc-panel-title" id="',id,'_title"')New _.div Title ⋄ :EndIf
:If Icon≡''
ic←('.dc-panel-icon ',{(' '⎕R' .')' ',#.Strings.deb ⍵}class,' ')New _.Icon('fa-',icon)
:ElseIf isInstance Icon
Icon.SetAttr⊂'class="dc-panel-icon"'
ic←Icon
:Else
ic←('.dc-panel-icon',{(' '⎕R' .')' ',#.Strings.deb ⍵}class,' ',cclass)New _.Icon Icon
:EndIf
ic._PageRef←_PageRef        ⍝ hack!!!!! shouldn't we do Add and not New?
c,←ic.Render
d←('class="',class,' ',cclass,' dc-panel-content" id="',id,'_content"')New _.div Message
d.Add savedContent←Content   ⍝ save original content
Content←c,d
r←⎕BASE.Render       ⍝ restore original content to avoid issues
Content←savedContent ⍝ when re-rendering (as in MetaControl)
∇
:endclass﻿:class RadioButtonGroup : #._DC.Table
⍝ Description:: Dyalog Radio Button Group widget
⍝ Constructor:: [{Values | ;Labels Values} [SelectedIndex [LabelPos [Horizontal]]]]
⍝ Values           - a vector of values for the radio buttons (Labels will be set to the same as Values)
⍝ ;Labels Values   - a matrix of [;1] labels [;2] values
⍝ SelectedIndex    - index of a pre-selected choice (⍬ is the default)
⍝ LabelPos         - label position relative to the radio button ('left' is the default)
⍝ Horizontal       - 0 if the labels/buttons are to be arranged in a vertical grid, 1 if horizontal
⍝ Public Fields::
⍝ Values           - a vector of values for the radio buttons (Labels will be set to the same as Values)
⍝ Labels           - a matrix of [;1] labels [;2] values
⍝ SelectedIndex    - index of a pre-selected choice (⍬ is the default)
⍝ LabelPos         - label position relative to the radio button ('left' is the default)
⍝ Horizontal       - 0 if the labels/buttons are to be arranged in a vertical grid, 1 if horizontal
⍝ Notes::
⍝ The underlying input elements all share the same name, and have ids of name,'_1', name,'_2', etc
⍝ The containing table has an id of name,'_container'
⍝ input cells are assigned a class of (id,'_input')
⍝∇:require =\Table.dyalog
:field public Labels←⍬
:field public Values←⍬
:field public SelectedIndex←⍬
:field public LabelPos←'left'
:field public Horizontal←0
∇ make
:Access public
:Implements constructor
∇
∇ make1 args;data;sel;pos;horz
:Access public
:Implements constructor
:If 2=≡args
:AndIf ∧/isString¨args
args←,⊂args
:EndIf
(data SelectedIndex LabelPos Horizontal)←args defaultArgs ⍬ SelectedIndex LabelPos Horizontal
:If ~0∊⍴data
:Select ⊃⍴⍴data
:Case 1
Labels←Values←data
:Case 2
(Labels Values)←↓[1]data
:EndSelect
:EndIf
∇
∇ r←Render;n;inps;tmpname;tmpid;Name;nums
:Access public
Name←UNDEF
⍝ for input element widgets, this will set the name to the id if not already set
⍝ or the id to the name if not already set
:If (⊂id)∊UNDEF''
SetId
:EndIf
Name←id
r←''
(Labels Values)←Labels{0∊⍴⍵:⍺ ⍺ ⋄ 0∊⍴⍺:⍵ ⍵ ⋄ ⍺ ⍵}Values
:If ~0∊n←⍴Values
nums←(⊂Name,'_'),¨⍕¨⍳n
:If (,Horizontal)≡,1 ⍝ horizontal layout
inps←Values{⎕NEW #._DC.Input('radio'⍺ ⍵ LabelPos)}¨Labels
inps.name←⊂Name
inps.id←nums
:If ⍬≢SelectedIndex ⋄ inps[SelectedIndex].Attrs[⊂'checked']←⊂'checked' ⋄ :EndIf
Data←(1,⍴inps)⍴inps
:Else ⍝ vertical layout
inps←⎕NEW¨n⍴#._html.input
inps.value←Values
inps.(name type)←(⊂Name'radio')
inps.id←nums
:If ⍬≢SelectedIndex ⋄ inps[SelectedIndex].Attrs[⊂'checked']←⊂'checked' ⋄ :EndIf
Data←(nums{⎕NEW _.label(⍵('for="',⍺,'"'))}¨Labels),⍪inps
:If LabelPos≡'left'
CellAttr←'style=text-align:right;' ''
:Else
Data←⌽Data
:EndIf
:EndIf
(tmpname tmpid)←Name id
id←Name
Name←UNDEF
:If ~0∊⍴⎕THIS.Handlers
⎕THIS.Handlers.Selector←⊂1↓∊',#'∘,¨inps.id
:EndIf
Name←UNDEF
r←⎕BASE.Render
(Name id)←tmpname tmpid
:EndIf
∇
:EndClass
﻿:Class Redirect : #._html.meta
:field public Location←''
:field public Delay←0
∇ make
:Implements constructor
:Access public
∇
∇ make1 args
:Implements constructor
:Access public
(Location Delay)←args defaultArgs Location Delay
∇
∇ r←Render
:Access public
r←''
:If ~0∊⍴Location
'http-equiv'Set'refresh'
'content'Set(⍕Delay),';',Location
r←⎕BASE.Render
:EndIf
∇
:EndClass
﻿:class ResetButton : #._html.button
⍝ Description:: Dyalog Reset Button widget
⍝ Constructor:: [content [name [value [attrs]]]]
⍝ content - the content of the button (what shows up on the button's face)
⍝ name  - the id/name for the button
⍝ value - the value for the button, this is what's returned to the server
⍝ attr  - attribute(s) for the button
⍝ Public Fields:: None
∇ Make0
:Access public
:Implements constructor
type←'reset'
Content←'Reset'
∇
∇ Make args
:Access public
:Implements constructor
args←eis⍣(~0∊⍴args)⊢args
(Content name value attrs)←args defaultArgs'Reset'UNDEF UNDEF''
type←'reset'
∇
∇ r←Render
:Access public
SetInputName
r←⎕BASE.Render
∇
:endclass
﻿:class Script : #._html.script
⍝ Description:: Dyalog Script widget - embeds JavaScript in page
⍝ Constructor:: [Code [File]]
⍝ Code  - the JavaScript code to embed inline
⍝ File  - the location of the JavaScript file to link to
⍝ Public Fields::
⍝ Code  - the JavaScript code to embed inline
⍝ File  - the location of the JavaScript file to link to
⍝ Notes::
⍝ Code and File are mutually exclusive if both are specified, Code will be used
⍝ This is frequently used with ScriptFollows to embed inline scripts
⍝ Examples::
⍝ Script '' '/Scripts/myJavaScriptFile.js'
⍝ Script 'alert("Hello World!");'
:field public File←''
:field public Code←''
∇ Make0
:Access public
:Implements constructor
∇
∇ Make1 params
:Access public
:Implements constructor
Code File←params defaultArgs'' ''
∇
∇ UpdateContent
:Implements Trigger Code
Content←Code
∇
∇ html←Render
:Access public
:If ~0∊⍴File
:AndIf 0∊⍴Content ⍝ if inline script, ignore the file
Set(⊂'src'File)
:EndIf
html←⎕BASE.Render
∇
:endclass
﻿:class Select : #._html.select
⍝ Description:: Dyalog Enhanced HTML select
⍝ Constructor:: [options [[selected] [[disabled] [prompt]]]]
⍝ options   - vector of options or 2 column matrix of displayed[;1] and returned[;2] values
⍝ selected  - Boolean or integer array indicating pre-selected options(s)
⍝ disabled  - Boolean or integer array indicating disabled options(s)
⍝ prompt    - first item to display (has no value) (default '[Select]')
⍝
⍝ Public Fields::
⍝ Options   - vector of options or 2 column matrix of displayed[;1] and returned[;2] values
⍝ Selected  - Boolean or integer array indicating pre-selected options(s)
⍝ Disabled  - Boolean or integer array indicating disabled options(s)
⍝ Prompt      - first item to display (has no value) (default '[Select]')
⍝
⍝ Public Methods::
⍝ ReplaceOptions options [[selected] [disabled]]
⍝ Arguments as discussed above
⍝
⍝ Examples::
⍝ Select  ('Choice 1' 'Choice 2' 'Choice 3')
⍝ Select  (3 2⍴'One' 'c1' 'Two' 'c2' 'Three' 'c3')
⍝ Select ((3 2⍴'One' 'c1' 'Two' 'c2' 'Three' 'c3') 2) ⍝ second item is selected
⍝ Select ((3 2⍴'One' 'c1' 'Two' 'c2' 'Three' 'c3') (0 1 0)) ⍝ second item is selected
⍝ Select ((3 2⍴'One' 'c1' 'Two' 'c2' 'Three' 'c3') 2 3 'Pick One') ⍝ second item is selected, third item is disabled
⍝ Select ((3 2⍴'One' 'c1' 'Two' 'c2' 'Three' 'c3') (2 3) 1) ⍝ second and third items are selected, first item is disabled
:field public Options←0 2⍴⊂''     ⍝ vector or matrix [;1] display, [;2] value
:field public Selected←⍬          ⍝ either Boolean integer vector indicating
:field public Prompt←'[Select]'   ⍝ character vector "Prompt" choice - the first choice on the list and does not have a value
:field public Disabled←⍬          ⍝ either Boolean integer vector indicating
∇ make
:Access public
:Implements constructor
∇
∇ make1 args;attr
:Access public
:Implements constructor
args←eis args
:If (|≡args)∊0 1 2
:AndIf ~0∊⍴⊃args
args←,⊂args
:EndIf
(Options Selected Disabled Prompt)←args defaultArgs Options Selected Disabled Prompt
∇
∇ r←Render;opts;sel
:Access public
Content←opts←''
SetInputName
Add BuildOptions(Options Selected Disabled)
r←⎕BASE.Render
∇
∇ r←BuildOptions(opts sel dis);v
r←''
:If ~0∊⍴opts
opts←eis opts
:If 1=⍴⍴opts
opts←opts,⍪opts
:EndIf
:EndIf
v←⍳⍬⍴⍴opts
(sel dis)←v∘∊∘{∧/⍵∊0 1:⍵/⍳⍴⍵ ⋄ ⍵}∘,¨sel dis
:If 1<+/sel                         ⍝ if we have multiple items selected
:AndIf 0∊⍴⊃Attrs[⊂'multiple']       ⍝ and the multiple attribute is not set
Attrs[⊂'multiple']←⊂'multiple'  ⍝ then set it
:EndIf
:If ~0∊⍴Prompt
:AndIf 0∊⍴⊃Attrs[⊂'multiple']  ⍝ prompt makes no sense if multiple selections are allowed
r,←(('disabled="disabled" value=""',(~∨/sel)/'selected="selected"')New #._html.option Prompt).Render
:EndIf
r,←FormatOptions(opts sel dis)
∇
∇ r←FormatOptions(opts sel dis);o;s;d
:Access Public Shared
r←''
:If 1=⍴⍴opts ⋄ opts←opts,⍪opts ⋄ :EndIf
:For o s d :InEach (↓opts)sel dis
r,←'<option',({⍵ ine' value="',(HtmlSafeText ⍵),'"'}2⊃o),(s/' selected="selected"'),(d/' disabled="disabled"'),'>',(1⊃o),'</option>'
:EndFor
∇
∇ r←{selector}ReplaceOptions args;sel;opts;dis;prompt
⍝ Replaces select elements options - used by callback functions
⍝ Ex: r←Execute ReplaceOptions ('New Option 1' 'New Option 2') 1
⍝ arg = options [[selected] [disabled] [prompt]]
:Access public
:If 0=⎕NC'selector' ⋄ selector←'#',id ⋄ :EndIf
args←eis args
:If (|≡args)∊0 1 2
:AndIf ~0∊⍴⊃args
args←,⊂args
:EndIf
(opts sel dis prompt)←args defaultArgs Options ⍬ ⍬ Prompt
r←selector #.JQ.Replace BuildOptions(opts sel dis)
∇
:endclass
﻿:Class StackPanel : #._html.table
⍝ Description:: Dyalog control to emulate WPF StackPanel
⍝ Constructor:: [items]
⍝ items - vector of content for each cell of the StackPanel
⍝ Public Fields::
⍝ Items - vector of references to table cell (<td>) containers for each item
⍝ Horizontal - Boolean indicating whether cell orientation is horizontal (1) or vertical (0)
⍝ Public Methods::
⍝ Add - Add itemcontent
⍝       The result of Add is a reference to the content
⍝ Usage Notes::
⍝ The table cells that make up the StackPanel may be accessed via Items
:field public shared readonly DocBase←''
:Field public Items←⍬
:Field public Horizontal←0 ⍝ orientation
∇ Make0
:Access public
:Implements constructor
∇
∇ Make1 args
:Access public
:Implements constructor
args←eis args
Items←{⎕NEW #._html.td ⍵}¨args
∇
∇ {r}←{attr}Add item;td
:Access public
attr←{6::⍵ ⋄ attr}''
:If attr≢''
:AndIf ~isClass⊃item
:AndIf ~isInstance⊃item
item←#._html.span item
:EndIf
r←attr(td←⎕NEW #._html.td).Add item ⍝ #.HtmlElement.Add
Items,←td
∇
∇ html←Render
:Access public
Items←Itemize¨Items
:If (,Horizontal)≡,1
(Content←⎕NEW #._html.tr).Add Items
:Else
(Content←⎕NEW¨(⍴Items)⍴#._html.tr).Add Items
:EndIf
html←⎕BASE.Render
∇
∇ r←Itemize item
:If 0=⍴⍴item
:AndIf isInstance item
:AndIf #._html.td≡⊃⊃⎕CLASS item
r←item
:Else
(r←⎕NEW #._html.td).Add item
:EndIf
∇
:endclass﻿:class Style : #._html.style
⍝ Description:: Dyalog Style widget - makes for easier programatic setting of CSS styles
⍝ Constructor:: [styles]
⍝ styles - pairs of Selector [Style] pairs, where
⍝     Selector is the CSS selector to which to apply styling, and
⍝     Styles is one or more pairs of CSS attributes and values in one of the following formats:
⍝       - single pair ('font' 'APL')
⍝       - vector of pairs (('background-color' 'blue')('font' 'APL'))
⍝       - matrix of [;1] attributes [;2] values  (2 2⍴'background-color' 'blue' 'font' 'APL')
⍝ Public Fields::
⍝ Styles - pairs of Selector [Style] pairs, where
⍝     Selector is the CSS selector to which to apply styling, and
⍝     Styles is one or more pairs of CSS attributes and values in one of the following formats:
⍝       - single pair ('font' 'APL')
⍝       - vector of pairs (('background-color' 'blue')('font' 'APL'))
⍝       - matrix of [;1] attributes [;2] values  (2 2⍴'background-color' 'blue' 'font' 'APL')
⍝ Notes::
⍝ For more information on CSS Selectors see http://www.w3schools.com/cssref/css_selectors.asp
:field public Styles←''
∇ Make
:Access public
:Implements constructor
∇
∇ Make1 params
:Access public
:Implements constructor
Styles←params
∇
∇ html←Render;i;sel;t;buffer
:Access public
Content←parseStyles vectify Styles
html←⎕BASE.Render
∇
∇ html←parseStyles styles;s;i;n;t;d;j
:Access public shared
styles←eis,styles
html←''
i←0
:While i<n←⍴styles
i+←1
t←i⊃styles
:If 0 1∊⍨≡t ⍝ scalar or vector
:If n=i ⍝ last element?
html,←t #.HtmlUtils.Styles''
t←s←''
:Else
:If 0 1∊⍨≡d←(i+1)⊃styles ⍝ next item is also scalar or vector
:If (⍴d)>j←¯1+d⍳':'
:AndIf ∧/(#.Strings.uc j⍴d)∊⎕A,'- '
html,←t #.HtmlUtils.Styles d
i+←1
:Else
html,←t #.HtmlUtils.Styles''
:EndIf
:ElseIf 2 3∊⍨≡d
html,←t #.HtmlUtils.Styles d
i+←1
:Else
html,←t #.HtmlUtils.Styles''
html,←parseStyles d
i+←1
:EndIf
:EndIf
:Else
html,←parseStyles t
:EndIf
:EndWhile
∇
vectify←{0=≡⍵:,⍵ ⋄ 1<|≡⍵: ∇¨⍵ ⋄ ⍵ }
:endclass
﻿:class StyleSheet : #._html.link
⍝ Description:: Dyalog StyleSheet widget - creates a link to a stylesheet
⍝ Constructor:: [href]
⍝ href   - the URL to the CSS file
⍝ Public Fields::
⍝ href   - the URL to the CSS file
⍝ Notes:: The primary utility of this widget is that it specifies
⍝         all the other required attributes for the link
:field public href←''
∇ Make
:Access public
:Implements constructor
∇
∇ Make1 params
:Access public
:Implements constructor
href←params
∇
∇ html←Render
:Access public
Set(('href'href)('rel' 'stylesheet')('type' 'text/css'))
html←⎕BASE.Render
∇
:endclass﻿:class SubmitButton : #._html.button
⍝ Description:: Dyalog Submit Button widget
⍝ Constructor:: [content [name [value [attrs]]]]
⍝ content - the content of the button (what shows up on the button's face)
⍝ name  - the id/name for the button
⍝ value - the value for the button, this is what's returned to the server
⍝ attr  - attribute(s) for the button
⍝ Public Fields:: None
∇ Make0
:Access public
:Implements constructor
type←'submit'
Content←'Submit'
∇
∇ Make args
:Access public
:Implements constructor
args←eis⍣(~0∊⍴args)⊢args
(Content name value attrs)←args defaultArgs'Submit'UNDEF UNDEF''
type←'submit'
∇
∇ r←Render
:Access public
SetInputName
r←⎕BASE.Render
∇
:endclass
﻿:Class Table : #._html.table
⍝ Description:: Improved html table - accepts matrix of data
⍝ Constructor:: [data [cellAttr [headerRows [headerAttr [makeCellIds [makeRowIds]]]]]
⍝ data        - matrix of data to display in the table
⍝ cellAttr    - Cell Attributes
⍝ headerRows  - # of header rows
⍝ headerAttr  - Header attributes
⍝ makeCellIds - 1 to generate IDs      <td id="tableId_r2c3">
⍝ makeRowIds  - 1 to generate Row IDs  <tr id="tableId_row2">
⍝ Public Fields::
⍝ Data        - matrix of data to display in the table
⍝ CellAttr    - Cell Attributes
⍝ HeaderRows  - # of header rows
⍝ HeaderAttr  - Header attributes
⍝ MakeCellIds - 1 to generate IDs      <td id="tableId_r2c3">
⍝ MakeRowIds  - 1 to generate Row IDs  <tr id="tableId_row2">
⍝ Caption     - caption to be inserted at the top of the table <caption id="tableId_caption">
:field public Data←0 0⍴⊂''
:field public CellAttr←''
:field public HeaderRows←0
:field public HeaderAttr←''
:field public MakeCellIds←0
:field public MakeRowIds←0
:Field public Caption←⍬
∇ Make0
:Access public
:Implements constructor
∇
∇ Make1 data
:Access public
:Implements constructor
:If 1<⍴⍴data ⋄ data←,⊂data ⋄ :EndIf
:If 1≥|≡data ⋄ data←,⊂1 1⍴⊂data ⋄ :EndIf
(Data CellAttr HeaderRows HeaderAttr MakeCellIds MakeRowIds)←data defaultArgs Data CellAttr HeaderRows HeaderAttr MakeCellIds MakeRowIds
∇
∇ html←Render;data;rows;cols;hdrrows;head;body;headids;size;headattrs;rowids;bodyrows;bodyids;bodyattrs;caption
:Access public
SetId
data←Data
data←((rows←×/¯1↓⍴data),cols←¯1↑⍴data)⍴data
hdrrows←rows⌊⍬⍴HeaderRows
caption←head←body←''
:If ⍬≢Caption
caption←'<caption id="',id,'_caption">',(renderIt Caption),'</caption>'
:EndIf
:If 0<hdrrows
headids←headattrs←⊂''
size←hdrrows,cols
:If MakeCellIds
headids←{' id="',(id,'_',∊'rc',¨⍕¨⍵),'"'}¨⍳size
:EndIf
:If ~0∊⍴HeaderAttr
headattrs←size⍴{∊FormatAttr/¨1 ParseAttr ⍵}∘fmtAttr¨eis HeaderAttr
:EndIf
head←(eis headids,¨headattrs){('th',⍺)enc renderIt ⍵}¨hdrrows↑data
rowids←⊂''
:If MakeRowIds
rowids←{' id="',id,'_row',(⍕⍵),'"'}¨⍳hdrrows
:EndIf
head←∊'thead'enc rowids{('tr',⍺)enc∊⍵}¨↓head
:EndIf
:If 0<bodyrows←(⊃⍴data)-hdrrows
bodyids←bodyattrs←⊂''
size←bodyrows,cols
:If MakeCellIds
bodyids←{' id="',(id,'_',∊'rc',¨⍕¨⍵),'"'}¨(⊂hdrrows,0)+¨⍳size
:EndIf
:If ~0∊⍴CellAttr
bodyattrs←size⍴{∊FormatAttr/¨1 ParseAttr ⍵}¨fmtAttr¨eis CellAttr
:EndIf
body←(eis bodyids,¨bodyattrs){'<td',⍺,'>',(renderIt ⍵),'</td>'}¨hdrrows↓data
rowids←⊂''
:If MakeRowIds
rowids←{' id="',id,'_row',(⍕⍵),'"'}¨hdrrows+⍳bodyrows
:EndIf
body←∊'tbody'enc rowids{('tr',⍺)enc∊⍵}¨↓body
:EndIf
Content←caption,head,body
html←⎕BASE.Render
∇
∇ attr←fmtAttr attr
:If 2=⍴,attr  ⍝ 'attr' 'value' is never shorthanded (e.g. given special treatment for id/class)
:AndIf 1∧.≥≡¨attr
:AndIf ~∧/'='∊¨attr
attr←,⊂attr
:EndIf
∇
enc←{'<',⍺,'>',⍵,'</',(⍺⍴⍨¯1+⍺⍳' '),'>'}
:EndClass
﻿:class Tabs : #._html.div
⍝ Description:: Dyalog Tabs widget
⍝ Constructor:: [titles [sections]] | [titles_sections]
⍝ titles          - vector of char vectors containing titles to appear on tabs
⍝ sections        - vector of vectors containing HTML content for each tab
⍝ titles_sections - 2-column matrix of titles [;1] and tabs [;2] as above
⍝                   or vector of 2 element title/tab vectors
⍝ Public Fields::
⍝ Titles          - vector of char vectors containing titles to appear on tabs
⍝ Sections        - vector of vectors containing HTML content for each tab
⍝ Theme           - base color for the color theme (default '#808080')
⍝ Examples::
⍝ Tabs 'Title1' 'Title2'
⍝ Tabs ('Title1' 'Title2')('Section1' 'Section2')
⍝ Tabs 2 2⍴'Title1' 'Section1' 'Title2' 'Section2'
⍝ Notes::
⍝    - This control is implemented in HTML+CSS without any JavaScript and is therefore
⍝   extremely lightwight, resulting in faster load times. However, this comes at the
⍝   cost of fewer features compared to competing controls. Use it if you just need
⍝   basic Tabs.
:field public shared readonly ApiLevel←3
:Field public Titles←0⍴⊂''
:Field public Sections←0⍴⊂''
:Field public Theme←'#000000' ⍝ "Black"
∇ Make
:Access public
:Implements constructor
Uses←'dcTabs'
∇
∇ Make1 args
:Access public
:Implements constructor
Uses←'dcTabs'
args←eis args
:If 1=⍴args
:If 2=⍴⍴1⊃args ⍝ matrix arg?
(Titles Sections)←↓[2]1⊃args
:Else ⍝ single title
Titles←args
:EndIf
:Else
(Titles Sections)←eis¨2↑args
:EndIf
∇
∇ {title}AddSection content
:Access public
:If 0=⎕NC'title' ⋄ title←'Section ',⍕1+⍴Titles ⋄ :EndIf
Titles,←⊂title
Sections,←⊂content
∇
∇ r←Render;title;section;numbers;n
:Access public
SetId
SetUse
AddClass'dc-tabs'
numbers←('dc-tabs-',id,'_','_',⍨⍕)¨⍳≢Sections
⍝ HTML structure
Content←''
:For title n :InEach Titles numbers
:If isRef title ⋄ title←title.Render ⋄ :EndIf
Content,←'<input type="radio" name="',id,'" id="',n,'t"'
:If n≡⊃numbers ⋄ Content,←' checked="checked"' ⋄ :EndIf
Content,←'/><label for="',n,'t">',title,'</label>'
:EndFor
:For section n :InEach Sections numbers
Content,←'<div id="',n,'s">',(RenderCore section),'</div>'
:EndFor
r←⎕BASE.Render
⍝ Create color scheme based on the Theme color
⍝ Specific CSS
r,←'<style scoped="scoped">'
r,←'#',id,' > input[type="radio"] + label {color: ',(Mix⊂Theme),';}'
r,←'#',id,' > input[type="radio"] + label:hover, '
r,←'#',id,' > input[type="radio"]:checked + label {border-color: ',(Mix⊂Theme),';}'
r,←'#',id,' > input[type="radio"]:focus + label {background:',(0.1 Mix⊂Theme),'}'
r,←'#',id,' > div {border-top: solid 1px ',(0.7 Mix⊂Theme),'; margin-top: -1px;}'
:For n :In numbers
r,←'#',n,'t:checked~#',n,'s,'
:EndFor
r↓⍨←¯1
r,←'{display:block;}</style>'
∇
Mix←{ ⍝ Arithmetic mean of multiple hex colors with optional ⍺
⎕IO←0
h←⎕D,6↑⎕A
rgb←⌊0.5+(⊃+/÷≢){16⊥⍉h⍳3 2⍴⍵/⍨6÷≢⍵}¨#.Strings.uc ⍵~¨⊂' #'
⍺←1
'rgba(',(1↓∊(',',⍕)¨rgb,⍺),')'
}
:endclass
﻿:class Textarea : #._html.textarea
⍝ Description:: Dyalog widget to enhance the HTML textarea element
⍝ Constructor:: [content [label [labelpos]]]
⍝ label    - string of text to appear next to the textares
⍝ labelpos - [horizonal] and/or [vertical] position of label relative to the textarea
⍝            horizontal can be 'left' (the default) or 'right'
⍝            vertical can be 'top' (the default) or 'bottom'
⍝            if both horizontal and vertical are specified, they need to be separated by a space
⍝ Public Fields::
⍝ Label    - string of text to appear next to the textares
⍝ LabelPos - [horizonal] and/or [vertical] position of label relative to the textarea
⍝            horizontal can be 'left' (the default) or 'right'
⍝            vertical can be 'top' (the default) or 'bottom'
⍝            if both horizontal and vertical are specified, they need to be separated by a space
⍝ Examples::
⍝       Add _.Textarea 'this is my content.'                            ⍝ no label
⍝       Add _.Textarea 'this is my content.' 'My Label'                 ⍝ label at left top
⍝       Add _.Textarea 'this is my content.' 'My Label' 'right bottom'  ⍝ label at right bottom
⍝
⍝ Notes::
⍝ We set the rows and cols attributes to 4 and 60 respectively.
⍝ This can be overidden by setting the attributes to other settings
⍝    (('rows' 10)('cols' 80)) Add _.Textarea 'this is the content'
⍝    ta←Add _.Textarea 'this is the content' ⋄ 'rows' 'cols' ta.Set 10 80
:field public Label←''
:field public LabelPos←'left'
∇ Make0
:Access public
:Implements constructor
Set('rows'(,4))('cols'(,60)) ⍝ set the default rows and cols
∇
∇ Make1 args
:Access public
:Implements constructor
args←eis args
(Content Label LabelPos)←args defaultArgs'' '' 'left top'
Set('rows'(,4))('cols'(,60)) ⍝ set the default rows and cols
∇
∇ r←Render
:Access public
SetInputName
r←⎕BASE.Render
:If ~0∊⍴Label
r←r((∨/'right '≡6↑LabelPos){⍺⍺:⍺,⍵ ⋄ ⍵,⍺})(⎕NEW #._html.label(Label((⊂'for'id),(' bottom'≢¯7↑LabelPos)/⊂('style' 'vertical-align:top')))).Render
:EndIf
∇
:endclass
﻿:class Timer : #._DC.Script
⍝ Description:: Dyalog JavaScript Timer
⍝ Constructor:: [delay [autostart [event [prefix]]]]
⍝ delay     - delay (in ms) between event triggers (default 5000)
⍝ autostart - Boolean indicating whether the timer should start automatically (default 1 (yes))
⍝ event     - event to signal to server (default 'tick')
⍝ prefix    - prefix to prepend to function and variable names (default 'MS3_')
⍝ Public Fields::
⍝ Delay     - delay (in ms) between event triggers (default 5000)
⍝ Autostart - Boolean indicating whether the timer should start automatically (default 1 (yes))
⍝ Event     - event to signal to server (default 'tick')
⍝ Prefix    - prefix to prepend to function and variable names (default 'MS3_')
⍝ Notes::
⍝ The following JavaScript functions will be created in your page
⍝ prefixrun  - start the timer
⍝ prefixstop - stop the timer
:field public _Sessioned←1  ⍝ this will keep globals in the class!
:field public Prefix←'MS3_'
:field public Event←'tick'
:field public Delay←5000
:field public Autostart←1
∇ Make
:Access public
:Implements constructor
∇
∇ Make1 args
:Access public
:Implements constructor
(Delay Autostart Event Prefix)←(,args)defaultArgs Delay Autostart Event Prefix
∇
∇ r←Render;params
:Access public
Uses←'JQuery'
(params←⎕NS'').(∆Delay ∆Autostart ∆Event ∆Prefix)←Delay Autostart Event Prefix
Code←params Subst ScriptFollows
⍝     var ∆Prefixtimer; var ∆Prefixrunning=0; var ∆Prefixdelay=∆Delay;
⍝     function ∆Prefixnext(){$("body").trigger("∆Event");∆Prefixtimer=setTimeout("∆Prefixnext()",∆Prefixdelay);}
⍝     function ∆Prefixrun(){if (!∆Prefixrunning){∆Prefixrunning=1; ∆Prefixnext();}}
⍝     function ∆Prefixstop(){clearTimeout(∆Prefixtimer); ∆Prefixrunning=0;}
⍝     if (∆Autostart == 1) {$(function(){∆Prefixrun();});}
r←⎕BASE.Render
∇
∇r←Stop
:access public
r←Prefix,'stop();'
∇
:endclass﻿:Class Ul : #._html.ul
⍝ Description:: Enhanced HTML ul
⍝ Constructor:: [items [links]]
⍝ items     - vector of texts for the list
⍝ links     - optional anchor links
⍝ Public Fields::
⍝ Items     - vector of texts for the list
⍝ Links     - optional anchor links
⍝ Examples::
⍝ Ul (⊂'Item 1' 'Item 2' 'Item 3')                       ⍝ needs to be enclosed if vector
⍝ Ul (('One' 'Two')('http:/one.com' 'http://two.com'))
⍝ Ul (('One' 'Two')(('http:/one.com' 'target=_blank') 'http://two.com')) ⍝ Link can have attributes
:Field Public Items←⍬         ⍝ vector or matrix [;1] Items [;2] Links
:Field Public Links←⍬         ⍝ hyperlinks
∇ make
:Access Public
:Implements constructor
∇
∇ make1 args;attr
:Access public
:Implements constructor
:Select ⊃⍴⍴args ⍝ Select on Rank
:Case 1         ⍝ Vector
:If 0 2∊⍨10|⎕DR⊃args ⍝ 1st element is simple char
args←,⊂args
:EndIf      ⍝ Matrix
:Case 2 ⋄ args←↓[1]args ⍝ Split columns
:Else
:EndSelect
args←eis args
(Items Links)←2↑args,(⍴args)↓Items Links
∇
∇ r←Render;i;link;links;opt;opts;text;n
:Access public
SetId
:If ~0∊n←⍴Items
opts←{isRef ⍵:⍵ ⋄ HtmlSafeText ⍵}¨eis Items
:If ~0∊⍴Links
links←(⍴Items)↑Links,(⍴Items)⍴⊂''
text←opts
opts←⍬
:For i :In ⍳⍴links
:If 326=⎕DR link←i⊃links ⍝ Nested array
(opt←(⊂'href'(⊃link))New _.a(i⊃text)).Set 1↓link
:Else
opt←(⊂'href'link)New _.a(i⊃text)
:EndIf
opts,←opt
:EndFor
:EndIf
({id,'_',⍕⍵}¨⍳n)Add¨↓_.li,⍪opts
:EndIf
r←⎕BASE.Render
∇
:endclass﻿:Namespace _JQ ⍝ jQueryUI
(⎕IO ⎕ML)←1
:section Common Code
eis←{(,∘⊂)⍣((326∊⎕DR ⍵)<2>|≡⍵),⍵} ⍝ Enclose if simple
quote←{0∊⍴⍵: '' ⋄ '⍎"'∊⍨⍬⍴⍵:⍵ ⋄ '"',(('"' ⎕R '\\\0')⍕⍵),'"'}
fmtSelector←{{'this'≡⍵:⍵ ⋄quote ⍵}¯2↓∊{⍵,', '}¨eis ⍵}
fmtValue←{(2=≡⍵)∧0=≢⍴⍵:⊃⍵ ⋄ #.JSON.fromAPL ⍵}
∇ r←opt(sel Update jqfn)val
⍝ update an option for a widget
r←#.JQ.Execute'$(',(fmtSelector sel),').',jqfn,'("option","',opt,'",',(fmtValue val),');'
∇
:endsection
:section Base Classes
:class _jqObject : #.HtmlElement
:field public Selector←''      ⍝ Selector to apply the JQuery function to
:field public JavaScript←''    ⍝ additional JavaScript to run AFTER the jQuery function, can be function chain, separate code or both
:field public PreJavaScript←'' ⍝ additional JavaScript to run BEFORE the jQuery function
:field public Var←''           ⍝ JavaScript variable name for created object
:field public JQueryFn←''      ⍝ JQuery function to apply
:field public JQPars←''        ⍝ JQuery function parameters
:field public Type←''          ⍝ Type specification that may precede JQPars
:field public shared readonly _true←#.JSON.true     ⍝ same definition as in #.JSON
:field public shared readonly _false←#.JSON.false   ⍝ same definition as in #.JSON
:field public ScriptOptions←⍬  ⍝ determines how script will be rendered [1] wrap with <script>...</script>, [2] wrap with $(function(){...})
∇ Make0
:Access public
:Implements constructor
∇
∇ Make1 pars
:Access public
:Implements constructor
pars←eis pars
JQueryFn Selector JQPars JavaScript Var PreJavaScript Type←7↑pars,(⍴pars)↓'' '' '' '' '' '' ''
∇
∇ r←Render
:Access public
SetUse
r←ScriptOptions #.JQ.JQueryfn JQueryFn Selector JQPars JavaScript Var PreJavaScript Type
∇
∇ r←isSelector str ⍝ checks if str is probably a jQuery selector
:Access public shared
r←∨/str∊'''"*[]:>+~()#.'
∇
:section APLJax
∇ r←renderContent content;c
r←''
content←eis content
:While ~0∊⍴content
:Select ≡c←⊃content
:Case 0
:If isClass c
:Select ⊃⍴content
:Case 1
r,←(⎕NEW c).Render
:Case 2
r,←(⎕NEW c(2⊃content)).Render
:Else
r,←(⎕NEW c(1↓content)).Render
:EndSelect
:ElseIf isInstance c
r,←c.Render
:Else
r,←(⎕NEW #.HtmlElement(''content)).Render
:EndIf
content←''
:Case 1
:If isClass⊃c
r,←(⎕NEW(⊃c)(1↓c)).Render
:ElseIf isInstance⊃c
∘∘∘ ⍝ should not happen! (I think)
:Else
r,←(⎕NEW #.HtmlElement(''c)).Render
:EndIf
content←1↓content
:Else
r,←renderContent c
content←1↓content
:EndSelect
:EndWhile
∇
∇ r←selector Replace content
:Access public
r←⊂('replace'selector)('data'(renderContent content))
∇
∇ r←selector Append content
:Access public
r←⊂('append'selector)('data'(renderContent content))
∇
∇ r←selector Prepend content
:Access public
r←⊂('prepend'selector)('data'(renderContent content))
∇
∇ r←Execute content
:Access public
r←⊂('execute'(renderContent content))
∇
∇ r←name Assign data
:Access public
r←⊂('assign'name)('data'data)
∇
:EndSection
:endclass
:class _jqWidget : _jqObject
:field public Options←''    ⍝ options for the object to be created
:field public ContainerTag←'div' ⍝ default container type
:field public Container
:field public InternalEvents←'' ⍝ list of events the widget "knows" about
:field public BuildHTML←1       ⍝ if 0, we build any HTML infrastructure for the widget, otherwise, assume the user built it
:field public WidgetDef←'event,ui' 'event'  'ui' '$(event.currentTarget)' '.val()'  ⍝ see _JQ.RenderHandlerCore for details
∇ r←{a}rand w;⎕RL
:Access public
⎕RL←0
:If 0=⎕NC'a' ⋄ r←?w
:Else ⋄ r←a?w ⋄ :EndIf
∇
∇ Make
:Access public
Options←⎕NS''
Container←⎕NEW #.HtmlElement
:Implements constructor
∇
∇ r←Render;build;html;handlers;js;oldJavaScript
:Access public
r←html←js←''
SetUse
BuildHTML∧←0∊⍴Selector ⍝ if the user explicitly specifies a selector, assume he's built the content himself
:If BuildHTML
⍝Container.(id name type style class title)←Container.(id name type style class title){UNDEF≡⍵:⍺ ⋄ UNDEF≢⍺:⍺ ⋄ ⍵}¨⎕THIS.(id name type style class title)
:If ~0∊⍴⎕THIS.Attrs[]
Container.Set/¨Attrs[]
:EndIf
:If Container.id≡UNDEF
:If Container.name≢UNDEF
Container.id←Container.name
:Else
Container.id←SetId
:EndIf
:EndIf
Selector←'#',Container.id
:EndIf
handlers←''
:If ~0∊⍴Handlers
handlers←';',⍨∊¯1↓¨Handlers.Render
:EndIf
oldJavaScript←JavaScript
JavaScript,←handlers
JQPars←Options
js←⎕BASE.Render
JavaScript←oldJavaScript
:If BuildHTML≥0∊⍴Container.Content
:Select ⊃Selector
:Case '#' ⍝ id?
Container.id←1↓Selector
:Case '.' ⍝ class?
Container.class←1↓Selector
:EndSelect
:If ContainerTag{⍵≡(⍴⍵)↑⍺}'input'
:AndIf UNDEF≡Container.name
Container.name←('.#'∊⍨⊃Selector)↓Selector
:EndIf
Container.Tag←ContainerTag
html←Container.Render
:EndIf
r←html,js
∇
∇ {handler}←On args
:Access public
⍝ args - event callback clientData javascript
handler←⎕BASE.On args
handler.InternalEvents←InternalEvents
handler.(WidgetDef←WidgetRef.WidgetDef)
∇
∇ {r}←{name}Set value
:Access public
r←⎕THIS
→(0∊⍴value)⍴0
:If 326≠⎕DR Options ⋄ Options←⎕NS'' ⋄ :EndIf
:If 0=⎕NC'name'
:Trap 11
(name value)←ParseValue value
:Else
⎕SIGNAL/⎕DMX.(EM EN)
:EndTrap
:EndIf
:Trap 0
name(Options SetOption)value
:Else
⎕SIGNAL/⎕DMX.(EM EN)
:EndTrap
∇
∇ {r}←name SetIfNotSet value
:Access public
:If 0∊⍴GetOption name
name Set value
:EndIf
r←⎕THIS
∇
∇ name(ref SetOption)value;set;parent;ind;newref;chunk;n;now;new;chunkroot;array;val;pos;r;v
→(0∊⍴value)⍴0
:If 1<|≡name ⍝ multiple names?
value←(⊂⍣((⎕DR value)∊80 82))value
name(ref SetOption)¨value
:Else
set←{
⍺⍺⍎'(',⍺,')←⍵'
}
:If 0∊⍴parent←(-'.'⍳⍨⌽name)↓name ⍝ if no parent...
:If 1<n←≢ref  ⍝ multiple refs?
⎕SIGNAL 5/⍨(0=≢⍴value)=(⍴ref)=⍴value ⍝ LENGTH ERROR if value is not scalar or same length as ref
:For (r v) :InEach ref(n⍴value)
name(r set)v
:EndFor
:ElseIf (1+' '+.=name)=≢value
name(ref set)value
:Else
name(ref set)value ⍝ single name: assign directly (may be more than 1 name)
:EndIf
:Else
ind←name⍳'.'
chunk←¯1↓ind↑name
(chunkroot pos)←2↑'[]'#.Utils.penclose chunk
:If array←'[]'≡¯2↑chunk ⍝ is it an array assignment?
pos←≢val←eis value
:Select ⊃ref.⎕NC chunkroot
:Case 0
new←⎕NS¨(⌈/pos)⍴⊂⍬
chunkroot(ref set)new
:Case 2 ⍝ already exists
('Invalid option specification - length error on "',chunkroot,'".')⎕SIGNAL 5/⍨~(⍴new←ref⍎chunkroot)∊1,pos
:Else
('Invalid option specification - "',chunkroot,'" is not an array.')⎕SIGNAL 11
:EndSelect
new{(ind↓name)(⍺ SetOption)⍵}¨val
:Else
(chunkroot pos)←2↑'[]'#.Utils.penclose chunk
pos←2⊃⎕VFI pos
:Trap 3 6
newref←ref⍎chunk
:Case 3 ⍝ index error
n←⍴now←ref⍎chunkroot
new←⎕NS¨(pos-n)⍴⊂⍬
chunkroot(ref set)now,new
newref←ref⍎chunk
:Case 6 ⍝ value error
:If ~0∊⍴pos
new←⎕NS¨(⌈/pos)⍴⊂⍬
chunkroot(ref set)new
:Else
chunkroot ref.⎕NS''
:EndIf
newref←ref⍎chunk
:EndTrap
(ind↓name)(newref SetOption)value
:EndIf
:EndIf
:EndIf
∇
∇ r←ParseValue value
:Access shared public
:If 2=⍴⍴value
:AndIf 2=¯1↑⍴value
:ElseIf 2<|≡value
:AndIf ∧/(,2)∘≡∘⍴¨value
value←↑value
:ElseIf 0=2|⍴value
value←((0.5×⍴value),2)⍴value
:Else
'Invalid option format'⎕SIGNAL 11
:EndIf
r←↓[1]value
∇
∇ r←GetOption names
:Access public
r←{6::'' ⋄ Options.⍎⍵}¨{⎕ML←3 ⋄ ⍵⊂⍨⍵≠' '}names
:If 1=⍴r ⋄ r←⊃r ⋄ :EndIf ⍝ if single setting requested
∇
∇ r←name Update value;v
:Access public
r←name(Selector #._JQ.Update JQueryFn)value
name Set value
∇
∇ r←ShowOptions
:Access public
r←(⎕JSON⍠'Compact' 0)Options
∘∘∘
∇
:endclass
:class _jqUIWidget : _jqWidget
:field public Force←0
⍝        :field public WidgetSyntax ←⊂'event,ui' 'event'  'ui' '$(event.target)' '.val()' ⍝ see Handler class below
∇ make
:Access public
:If 0=⎕NC⊂'Uses' ⋄ Uses←'' ⋄ :EndIf
:If 0∊⍴Uses ⋄ Uses←'JQueryUI' ⋄ :EndIf
:Implements constructor
∇
∇ make1 pars
:Access public
:If 0=⎕NC⊂'Uses' ⋄ Uses←'' ⋄ :EndIf
:If 0∊⍴Uses ⋄ Uses←'JQueryUI' ⋄ :EndIf
:Implements constructor :base pars
∇
∇ {r}←opts RenderHandler handler
:Access public
r←opts ⎕BASE.RenderHandler(handler WidgetDef Force)
∇
:endclass
:endsection
⍝ --- Events ---
:Section Events
:Class Handler
:Field public Selector←''        ⍝ CSS/jQuery selector to bind handler to
:Field public Delegates←''       ⍝ See jQuery.On for information about delegates
:Field public Events←''          ⍝ events to bind
:Field public ClientData←''      ⍝ any additional client data to send to server
:Field public Callback←1         ⍝ execute AJAX callback to server?  or the name of the server-side callback function
:Field public JavaScript←''      ⍝ JavaScript to execute prior to server callback
:Field public Page←''            ⍝ server URL to request for an AJAX callback
:Field public Method←'on'        ⍝ by default use jQuery .on(), but can also be set to 'one' for a handler that fires only once
:Field public jQueryWrap←1       ⍝ wrap handler in $(function(){...});
:Field public ScriptWrap←1       ⍝ wrap handler in <script>...</script>
:Field public StatusHandlers     ⍝
:Field public WidgetDef←''       ⍝ widget definitions (e.g. jQuery or Syncfusion, others libraries may different)
⍝                                          jQuery            Syncfusion
⍝ [1] event handler syntax:                'event,ui'        'argument'
⍝ [2] syntax to access the event object:   'event'           'argument'
⍝ [3] syntax to access the object's model: 'ui'              'argument.model'
⍝ [4] syntax to access the widget itself:  '$(event.target)' 'this.element'
⍝ [5] syntax to access the value of an input widget - this default to '' but may overridden by individual widget
⍝     see ejSlider as an example
⍝
:Field public ForceInternal←¯1   ⍝ indicates whether to "force" the event to be treated as a widget internal event
:Field public WidgetRef←''       ⍝ ref to widget instance if this handler is on
:Field public Hourglass←¯1       ⍝ indicates whether to display hourglass during callback execution
⍝ 1 - yes, 0 - no, ¯1 - only if calling back to APL
:Field public Uses←'JQuery'
:Field public _PageRef_←''
quote←{0∊⍴⍵: '' ⋄ '⍎"'∊⍨⍬⍴⍵:⍵~'⍎' ⋄ '"',(('"' ⎕R '\\\0')⍵),'"'} ⍝ quote unless already quoted or begins with ⍎
ine←{0∊⍴⍺:'' ⋄ ⍵} ⍝ if not empty
eis←{(,∘⊂)⍣((326∊⎕DR ⍵)<2>|≡⍵),⍵} ⍝ Enclose if simple
∇ Make0
:Access public
:Implements constructor
CommonSetup
∇
∇ Make1 params
:Access public
:Implements constructor
params←#.HtmlElement.eis params
(Selector Events Callback ClientData JavaScript Delegates Page)←7↑params,(⍴params)↓7⍴⊂''
:If #.HtmlPage #.HtmlElement.isInstance Page ⋄ Page←Page.Page ⋄ :EndIf ⍝ if request object passed
CommonSetup
∇
∇ CommonSetup;c
:Access public
:Trap 0
c←#.HtmlElement.context'_PageRef'
:If ~0∊⍴c
(c⍎'_PageRef').Use Uses
_PageRef_←c._PageRef
:EndIf
:EndTrap
WidgetDef←'event,ui' 'event' 'ui' '$(event.target)' '.val()'
StatusHandlers←408 500,⍪'alert("Session timed out")' 'alert("Internal Server Error")'
∇
∇ r←code OnStatus javascript;ind
:Access public
ind←StatusHandlers[;1]⍳code
StatusHandlers↑⍨←ind⌈≢StatusHandlers
StatusHandlers[ind;]←code javascript
∇
∇ r←Render;sel;syn_handler;syn_event;syn_model;syn_this;data;useajax;force;cd;selector;arg;verb;name;phrase;datasel;JQfn;jqfn;hg;removehg;dtype;success;status;ajax;widget;syn_value;delegates;v;events;selSelector;statjs;statcode
:Access public
r←''
:If ~0∊⍴Events ⍝ skip if no events specified
:If #.MiPage #.HtmlElement.isInstance Page
Page←Page._PageName
:EndIf
(selector delegates)←2↑(eis Selector),'' ''
:If ~0∊⍴Delegates
delegates←Delegates
:EndIf
:If useajax←(,0)≢,Callback ⍝ callback=0 → don't make callback to server; =1 → use APLJax, =charvec → call ⍎charvec
:AndIf (0∊⍴Page)>0∊⍴_PageRef_
Page←_PageRef_._PageName
:EndIf
force←0
events←Events
:If widget←#.HtmlElement.isWidget WidgetRef ⍝ is this a widget handler?
WidgetDef←WidgetRef.WidgetDef
:If ForceInternal=¯1
:If ∨/', '∊Events ⍝ multiple events?
events←', '#.Utils.penclose Events
:Else
events←,⊂Events
:EndIf
force←∧/events∊WidgetRef.InternalEvents
:Else
force←ForceInternal
:EndIf
:EndIf
:If 0∊⍴selector  ⍝ empty selector → use entire page
:If widget
selector←WidgetRef.Selector
:ElseIf #.HtmlElement #.HtmlElement.isInstance ##
:If #.MiPage #.HtmlElement.isInstance ##
selector←'⍎document'
:Else
selector←'#',##.id
:EndIf
:Else
selector←'⍎document'
:EndIf
:EndIf
(syn_handler syn_event syn_model syn_this syn_value)←5↑WidgetDef
data←'_event: ',syn_event,'.type, '
data,←'_what: function(arg){try{return arg.attr("id");}catch(e){return"";}}(',syn_this,'), '
data,←'_value: function(arg){try{return arg',syn_value,';}catch(e){return"";}}(',syn_this,'), '
data,←'_selector: ',(quote selector~'⍎'),', '
data,←'_target: function(arg){try{return arg.target.id;}catch(e){return"";}}(',syn_event,'), '
data,←'_currentTarget: function(arg){try{return arg.currentTarget.id;}catch(e){return"";}}(',syn_event,'), '
:If #.HtmlElement.isString Callback ⍝ numeric Callback 1-call APLJax, 0-no callback to server
:AndIf ~0∊⍴Callback
data,←'_callback: ',(quote Callback),', '
:EndIf
:If 0∊⍴ClientData ⍝ if you don't specify any clientdata, we serialize any forms on the page
data,←'_serialized_: $("form").serialize(), '
:EndIf
data←¯2↓data
:If ~0∊⍴ClientData
:Select ≡⊃ClientData
:CaseList 0 ⍝ ClientData is a simple vector
ClientData←,⊂2⍴⊂,ClientData ⍝ so name and verb are set to the same
:CaseList 1 ⍝ first element is a vector
ClientData←,⊂ClientData ⍝ enclose it
:EndSelect
:For cd :In ClientData
cd←#.HtmlElement.eis cd
(name verb arg sel)←4↑cd,(⍴cd)↓4⍴⊂''
:If (~0∊⍴name)∨verb≡'serialize'
:AndIf ~0∊⍴verb
jqfn←'' ⍝ jQuery function to call if this client data element refers to a widget
:If (⊂verb)∊'html' 'val'  ⍝ neither html or val take an argument
:AndIf 0∊⍴sel
sel←arg
:EndIf
⍝ build the selector for the data element
:If sel≡'' ⍝ it's for the current element/widget
:If #.HtmlElement.isWidget WidgetRef
datasel←'$(',(quote WidgetRef.Selector),').'
:If ~0∊⍴jqfn←WidgetRef.JQueryFn
datasel,←WidgetRef.JQueryFn
:EndIf
:Else
datasel←syn_this,'.'
:EndIf
:ElseIf #.HtmlElement #.HtmlElement.isInstance sel ⍝ selector is reference to other element
:If #._JQ._jqObject #.HtmlElement.isInstance sel ⍝ is it a jQuery-based object?
:If 0∊⍴selSelector←sel.Selector ⍝ no Selector?
sel.SetId
selSelector←'#',sel.id
:EndIf
datasel←'$(',(quote selSelector),').'
:If ~0∊⍴jqfn←sel.JQueryFn
datasel,←sel.JQueryFn
:EndIf
:Else ⍝ not a jQuery-based object
sel.SetId
datasel←'$(',(quote'#',sel.id),').'
:EndIf
:Else ⍝ sel is not an HtmlElement
:Select |≡sel
:CaseList 0 1
datasel←'$(',(quote sel),').'
:Case 2
datasel←'$(',(quote(1⊃sel)),').',jqfn←2⊃sel
:EndSelect
:EndIf
⍝ now figure out what data to generate
phrase←''
:Select verb
:CaseList 'attr' 'css' 'is' 'prop'
datasel,←'().'/⍨~0∊⍴jqfn
phrase←datasel,verb,'(',(quote arg),')'
:CaseList 'html' 'val'
datasel,←'().'/⍨~0∊⍴jqfn
phrase←datasel,verb,'()'
:Case 'option' ⍝ jQueryUI and Syncfusion widgets
name,⍨←'_json_'
:If 0∊⍴arg
phrase←'APLstringify(',datasel,'("option"))'
:Else
phrase←'APLstringify(',datasel,'("option",',(quote arg),'))'
:EndIf
:Case 'method' ⍝ jQueryUI and Syncfusion widgets
:If 0∊⍴arg
phrase←'"no method information specified!"'
:Else
phrase←datasel,'(',(quote arg),')'
:EndIf
:CaseList 'event' 'this' 'argument'
v←('event' 'argument' 'this'⍳⊂verb)⊃syn_event syn_event syn_this
name,⍨←'_json_'
:If 0∊⍴arg
phrase←'APLstringify(',v,')'
:Else
phrase←'APLstringify(',v,'.',arg,')'
:EndIf
:CaseList 'model' 'ui' ⍝ widgets only
:If ~0∊⍴jqfn
datasel,←'().'
name,⍨←'_json_'
:If 0∊⍴arg
phrase←'APLstringify(',syn_model,')'
:Else
phrase←'APLstringify(',syn_model,'.',arg,')'
:EndIf
:EndIf
:Case 'eval'
sel←'' ⍝ ignore selector on eval
phrase←'eval(',(quote arg),')'
:Case 'js'
sel←''
phrase←arg
:Case 'string'
phrase←quote arg
:Case 'serialize'
:If 0∊⍴sel
:If 0∊⍴arg
sel←'form'
:Else
sel←arg
:EndIf
:EndIf
phrase←'$(',(quote sel),').serialize()'
name,⍨←'_serialized_'
:Else
:If 1<≡verb
sel←''
phrase←⊃verb
:ElseIf '⍎'=⊃verb
sel←''
phrase←1↓verb
:Else
phrase←quote phrase
:EndIf
:EndSelect
data,←',',name,': ',phrase
:EndIf
:EndFor
:EndIf
(hg removehg)←((1+Hourglass=¯1)⊃Hourglass useajax)∘{⍺:';document.body.style.cursor="',⍵,'";' ⋄ ''}¨'wait' 'default'
dtype←'"json"'
success←'success: function(obj){APLJaxReturn(obj)',removehg,'}'
status←'statusCode:{ '
:For (statcode statjs) :In ↓StatusHandlers
:If ~0∊⍴statjs
status,←(⍕statcode),': function(p1, p2, p3){',statjs,removehg,'},' ⍝ use generic p1, p2, p3 because jQuery has different parameters for error and success
:EndIf
:EndFor
status←(¯1↓status),'}'
⍝status←'statusCode:{ 408: function(){alert("Session timed out")',removehg,'}}'
ajax←(JavaScript ine JavaScript,(';'=¯1↑JavaScript)↓';'),useajax/hg,'$.ajax({url: ',(quote Page),', cache: false, type: "POST", dataType: ',dtype,', headers:{"isAPLJax": "true"}, data: {',data,'}, ',success,', ',status,'});'
:If widget
:If force
(eis events)(WidgetRef.Options{⍺⍺⍎⍺,'←⍵'})¨⊂⊂'function(',syn_handler,'){',ajax,'}'
:Else
r←'.',Method,'(',(quote Events),', function(event,ui){',ajax,'});'
:EndIf
:Else
r←'$(',(quote selector),').',Method,'(',(quote Events),(delegates ine', ',quote delegates),', function(event,ui){',ajax,'});'
:If jQueryWrap ⋄ r←'$(function(){',r,'});' ⋄ :EndIf
:If ScriptWrap ⋄ r←'<script>',r,'</script>' ⋄ :EndIf
:EndIf
:EndIf
∇
:endclass
:endsection
:EndNamespace
﻿:class jqAccordion : #._JQ._jqUIWidget
⍝ Description:: jQueryUI Accordion widget
⍝
⍝ Constructor:: [titles [sections]] | [titles_sections]
⍝ titles          - vector of char vectors containing titles to appear on accordion sections
⍝ sections        - vector of vectors containing HTML content for each section
⍝ titles_sections - 2-column matrix of titles [;1] and sections [;2] as above
⍝                   or vector of 2 element title/section vectors
⍝ Public Fields::
⍝ Titles          - vector of char vectors containing titles to appear on accordion sections
⍝ Sections        - vector of vectors containing HTML content for each section
⍝ IsURL           - scalar or vector indicating if a section is a URL
⍝
⍝ Examples::
⍝ jqAccordion 'Title1' 'Title2'
⍝ jqAccordion ('Title1' 'Title2')('Section1' 'Section2')
⍝ jqAccordion 2 2⍴'Title1' 'Section1' 'Title2' 'Section2'
:field public shared readonly DocBase←'https://jqueryui.com/accordion/'
:field public shared readonly IntEvt←'activate' 'beforeActivate' 'create'
:field public shared readonly ApiLevel←3
:Field public Titles←0⍴⊂''
:Field public Sections←0⍴⊂''
:Field public IsURL←⍬
∇ Make
:Access public
:Implements constructor
JQueryFn←'accordion'
InternalEvents←IntEvt
∇
∇ Make1 args
:Access public
:Implements constructor
JQueryFn←'accordion'
InternalEvents←IntEvt
args←eis args
:If 1=⍴args
:If 2=⍴⍴1⊃args ⍝ matrix arg?
(Titles Sections)←↓[2]1⊃args
:Else ⍝ single title
Titles←args
:EndIf
:Else
(Titles Sections)←eis¨2↑args
:EndIf
∇
∇ {title}AddSection content
:Access public
:If 0=⎕NC'title' ⋄ title←'Section ',⍕1+⍴Titles ⋄ :EndIf
Titles,←⊂title
Sections,←⊂content
∇
∇ r←Render;sections;n;ids;i;t;section;u
:Access public
SetId
:If ~0∊⍴Titles
sections←(n←⊃⍴Titles)↑Sections
IsURL←n↑IsURL
ids←('#',id,'_section_')∘,∘⍕¨⍳⍴Titles
:For i t section u :InEach ids Titles sections IsURL
(Container.Add #._html.h3).Add #._html.a t('href=',u{~⍺:'"#"' ⋄ '"',⍵,'"'}section)
i Container.Add #._html.div((~u)/section)
:EndFor
:EndIf
r←⎕BASE.Render
∇
:endclass
﻿:Class jqAddClass : #._JQ._jqUIWidget
⍝ Description:: jQueryUI AddClass effect
⍝ Constructor:: [selector [className [duration [easing [complete]]]] | options]]
⍝ selector - the jQuery/CSS selector to which to add the class
⍝ className - one or more class names (space separated) to be added to the class attribute of each matched element
⍝ duration - number or string (default: 400) determining how long the animation will run
⍝ easing - a string (default: 'swing') indicating which easing function to use for the transition
⍝ complete - a function (no default) to call once the animation is complete, called once per matched element
⍝ options - all animation settings (all optional)
⍝ Public Fields::
⍝ Selector - the jQuery/CSS selector to which to add the class
⍝ ClassName - one or more class names (space separated) to be added to the class attribute of each matched element
⍝ Duration - number or string (default: 400) determining how long the animation will run
⍝ Easing - a string (default: 'swing') indicating which easing function to use for the transition
⍝ Complete - a function (no default) to call once the animation is complete, called once per matched element
⍝ Options - all animation settings (all optional)
:field public shared readonly DocBase←'https://jqueryui.com/addclass/'
:field public shared readonly ApiLevel←3
:Field public ClassName←''
:field public Duration←''
:field public Easing←''
:field public Complete←''
∇ Make
:Access public
:Implements constructor
JQueryFn←'addClass'
∇
∇ Make1 arg
:Access public
:Implements constructor
JQueryFn←'addClass'
arg←⊂⍣(1=≡,arg),arg
:If 2∊⍴arg
:AndIf isRef 2⊃arg
(Selector Options)←arg
:Else
(Selector ClassName Duration Easing Complete)←arg defaultArgs 5/⊂''
:EndIf
∇
∇ r←Render
:Access Public
'className' 'duration' 'easing' 'complete'SetIfNotSet¨ClassName Duration Easing Complete
:If ''≡Selector
:OrIf ''≡(GetOption'className')~' '
r←''
:Else
r←⎕BASE.Render
r[(1+≢JQueryFn)+(('.',JQueryFn,'({')⍷r)/⍳⍴r]←⊂'("',(GetOption'className'),'",'
r←'(complete:)"(.*?)"'⎕R'\1\2'∊r
:EndIf
∇
:EndClass﻿  :class jqAutocomplete : #._JQ._jqUIWidget
:field public Terms←''
∇ Make0
:Access public
:Implements constructor
JQueryFn←'autocomplete'
∇
∇ Make1 pars
:Access public
pars←(⊂'autocomplete'),eis pars
:Implements constructor :base pars
∇
∇ r←Render;t;opt
:Access public
:If ~0∊⍴Terms
t←#.JSON.toJQueryParameters'source'Terms
:If 0∊⍴Options ⋄ opt←t
:ElseIf 2>|≡Options
:If '{}'={(1↑⍵),¯1↑⍵}Options ⋄ opt←(¯1↓Options),',',1↓t
:Else ⋄ opt←'{',Options,',',1↓t
:EndIf
:Else ⋄ opt←(¯1↓#.JSON.toJQueryParameters Options),',',1↓t
:EndIf
Options←opt
:EndIf
r←⎕BASE.Render
∇
:EndClass﻿:Class jqButton : #._JQ._jqUIWidget
⍝ Description:: jQueryUI Sortable widget/interaction
⍝ Constructor:: [text [type]]
⍝ text - the text/content to appear on the button
⍝ type - one of 'submit' (default), 'reset', or 'button'
⍝ Public Fields::
⍝ Text - the text/content to appear on the button
⍝ Type - one of 'submit' (default), 'reset', or 'button'
:field public shared readonly DocBase←'http://api.jqueryui.com/button/'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/jQuery/jqButtonHelp.html'
:field public Text←''       ⍝ text on the button
:field public Type←''       ⍝ valid types are 'button' 'submit' 'reset' 'checkbox' 'radio' 'anchor' ''
∇ Make0
:Access public
JQueryFn←'button'
:Implements constructor
InternalEvents←,⊂'create'
∇
∇ Make1 args;i
:Access public
JQueryFn←'button'
args←eis args
(Text Type)←2↑args,(⍴args)↓'' ''
:Implements constructor
InternalEvents←,⊂'create'
∇
∇ r←Render;type;content
:Access public
content←Container.Content
:Select #.Strings.lc Type
:CaseList 'button' 'submit' 'reset' 'checkbox' 'radio'
ContainerTag←'input'
Container.NoEndTag←1
Container.type←Type
:Case 'anchor'
ContainerTag←,'a'
Container.Add(⊂Text)
:Else
ContainerTag←'button'
Container.Add(⊂Text)
:EndSelect
r←⎕BASE.Render
:If 'input'≡ContainerTag
:If ~0∊⍴Text
r,←(⎕NEW #._html.label(Text('for'Container.id))).Render
:EndIf
:EndIf
Container.Content←content
∇
:EndClass
﻿:class jqButtonset : #._JQ._jqUIWidget
⍝ Description:: jQueryUI Sortable widget/interaction
⍝ Constructor:: [items [type]|selector]
⍝ items    - vector of input elements to create
⍝ type     - the input types (default 'button') of the created elements
⍝ selector - the jQuery/CSS selector to which to convert and manage as buttons
⍝ Public Fields::
⍝ Items    - vector of input elements to create
⍝ Type     - the input types (default 'button') of the created elements
⍝ Selector - the jQuery/CSS selector to which to convert and manage as buttons
⍝ Legend   - the legend of the containing Fieldset-to-be
⍝ Examples::
⍝ Add _.jqButtonset '#myul'                            ⍝ jqButtonset will use the already existing element #myul
⍝ Add _.jqButtonset ('One' 'Two' 'Three')              ⍝ jqButtonset will build a <div> / <input><label> structure
⍝ Add _.jqButtonset (('One' 'Two' 'Three') 'radio')    ⍝ only one button can be selected
⍝ Add _.jqButtonset (('One' 'Two' 'Three') 'checkbox') ⍝ the buttons stay "pushed in
:field public shared readonly DocBase←'https://jqueryui.com/buttonset/'
:field public shared readonly ApiLevel←3
:field public shared readonly IntEvt←'create'
:Field Public Items←UNDEF         ⍝ vector of items
:Field Public Type←''
:Field Public Legend←UNDEF
⍝'mybset1' Add _.jqButtonset ('Phone' 'Email') 'radio' >
⍝
⍝<div id="mybset1">
⍝<input id="mybset1_1" type="button" name="mybset1" value="1"><label for="mybset1_1">Phone</label>
⍝<input id="mybset1_2" type="checkbox" name="mybset1" value="2"><label for="mybset1_2">Email</label>
⍝</div>
∇ Make
:Access public
:Implements constructor
JQueryFn←'buttonset'
InternalEvents←IntEvt
∇
∇ Make1 arg
:Access public
:Implements constructor
JQueryFn←'buttonset'
InternalEvents←IntEvt
:If ''≢arg
:Select |≡arg
:CaseList 0 1 ⍝ '#myul'
Selector←arg
:Case 2  ⍝ ('One' 'Two' 'Three')
Items←arg
:Case 3 ⍝ (('One' 'Two' 'Three') 'radio')
(Items Type)←arg
:EndSelect
:EndIf
∇
∇ r←Render;container;i;item;fs;type;button
:Access Public
r←''
:If ''≢Selector
id←Selector↓⍨'#'=⊃Selector
:Else
Selector←'#',SetId
:EndIf
:If UNDEF≢Items
container←id New _.div
:For i item type :InEach (⍳≢Items)Items((≢Items)⍴⊂⍣(1=≡,Type)⊢Type)
:Select type
:CaseList '' 'button' 'submit' 'reset'
button←container.Add _.Button,⊂item id i
button.type←type,'button'/⍨0∊⍴type
:CaseList 'checkbox' 'radio'
button←container.Add _.Input,⊂type i item'right'
button.name←id
:Else
'Invalid Type set for jqButtonset'⎕SIGNAL 11
:EndSelect
button.id←id,'_',⍕i
:EndFor
:If UNDEF≢Legend
fs←container.Push _.Fieldset
fs.Legend←Legend
:EndIf
r,←container.Render
:EndIf
r,←⎕BASE.Render
∇
:endclass﻿:Class jqDatePicker : #._JQ._jqUIWidget
:field public shared readonly DocBase←'http://api.jqueryui.com/datepicker/'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/jQuery/jqDatePicker.html'
:field public Text←''  ⍝ text on the button
∇ Make0
:Access public
JQueryFn←'datepicker'
ContainerTag←'input'
:Implements constructor
∇
∇ Make1 args;i
:Access public
JQueryFn←'datepicker'
ContainerTag←'input'
args←eis args
(i Text)←2↑args,(⍴args)↓'' ''
:Implements constructor :base args
∇
∇ r←Render;type
:Access public
Container.type←'text'
Container.NoEndTag←1
r←⎕BASE.Render
:If ~0∊⍴Text
r,⍨←(⎕NEW #._html.label(Text('for'Container.id))).Render
:EndIf
∇
:EndClass﻿  :Class jqDialog : #._JQ._jqObject ⍝!!!
:EndClass﻿:class jqDraggable : #._JQ._jqUIWidget
⍝ Description:: jQueryUI Draggable interaction
⍝ Constructor:: [Selector]
⍝ Selector - the jQuery/CSS selector to which to apply draggable interaction
⍝ Public Fields::
⍝ Selector - the jQuery/CSS selector to which to apply draggable interaction
:field public shared readonly DocBase←'https://jqueryui.com/draggable/'
:field public shared readonly ApiLevel←3
:field public shared readonly IntEvt←'create' 'drag' 'start' 'stop'
∇ Make
:Access public
:Implements constructor
JQueryFn←'draggable'
InternalEvents←IntEvt
∇
∇ Make1 arg
:Access public
:Implements constructor
JQueryFn←'draggable'
Selector←arg
InternalEvents←IntEvt
∇
:EndClass﻿:class jqDroppable : #._JQ._jqUIWidget
⍝ Description:: jQueryUI Droppable interaction
⍝ Constructor:: [Selector [Accept]]
⍝ Selector - the jQuery/CSS selector to which to apply droppable interaction
⍝ Accept   - the jQuery/CSS selector for items which can be dropped here
⍝ Public Fields::
⍝ Selector - the jQuery/CSS selector to which to apply droppable interaction
⍝ Accept   - the jQuery/CSS selector for items which can be dropped here
:field public shared readonly DocBase←'https://jqueryui.com/droppable/'
:field public shared readonly ApiLevel←3
:field public shared readonly IntEvt←'activate' 'create' 'deactivate' 'drop' 'out' 'over'
:field public Accept←'*'
∇ Make
:Access public
:Implements constructor
JQueryFn←'droppable'
InternalEvents←IntEvt
∇
∇ Make1 arg
:Access public
:Implements constructor
JQueryFn←'droppable'
(Selector Accept)←arg defaultArgs'' '*'
InternalEvents←IntEvt
∇
∇ r←Render
:Access public
'accept'SetIfNotSet Accept
r←⎕BASE.Render
∇
:EndClass﻿:Class jqHide : #._JQ._jqUIWidget
⍝ Description:: jQueryUI Hide effect
⍝ Constructor:: [selector [effect [options [duration [complete]]] | options]]
⍝ selector - the jQuery/CSS selector to hide
⍝ effect - a string indicating which effect to use for the transition
⍝ options - effect-specific properties and easing OR all animation settings
⍝ duration - number or string (default: 400) determining how long the animation will run
⍝ complete - a function to call once the animation is complete, called once per matched element
⍝ Public Fields::
⍝ Selector - the jQuery/CSS selector to hide
⍝ Effect - a string indicating which effect to use for the transition
⍝ Options - effect-specific properties and easing OR all animation settings
⍝ Duration - number or string (default: 400) determining how long the animation will run
⍝ Complete - a function (no default) to call once the animation is complete, called once per matched element
:field public shared readonly DocBase←'https://jqueryui.com/hide/'
:field public shared readonly ApiLevel←3
:Field public Effect←''
:field public Duration←''
:field public Complete←''
∇ Make
:Access public
:Implements constructor
JQueryFn←'hide'
∇
∇ Make1 arg
:Access public
:Implements constructor
JQueryFn←'hide'
arg←⊂⍣(1=≡,arg),arg
:If 2∊⍴arg
:If isRef 2⊃arg
(Selector Options)←arg
:Else
(Selector Effect)←arg
:EndIf
:Else
(Selector Effect Options Duration Complete)←arg defaultArgs 5/⊂''
:EndIf
:If ''≡Options
Options←⎕NS ⍬
:EndIf
∇
∇ r←Render
:Access Public
'effect' 'duration' 'complete'SetIfNotSet¨Effect Duration Complete
:If ''≡Selector
r←''
:Else
r←⎕BASE.Render
:EndIf
∇
:EndClass﻿:Class jqMenu : #._JQ._jqUIWidget
⍝ Description:: jQueryUI Menu widget
⍝ Constructor:: [items [levels [links]]]
⍝ items   - vector of char vectors containing the menu item caption
⍝ levels  - the level of the corresponding item
⍝ links   - the HREF string to be used when the corresponding element is chosen (clicked)
⍝ Public Fields:
⍝ Items   - vector of char vectors containing the menu item caption
⍝ Levels  - the level of the corresponding item
⍝ Links   - the HREF string to be used when the corresponding element is chosen (clicked)
⍝ MakeIds - 1 makes ids in the format myid_1_2
:field public shared readonly DocBase←'https://jqueryui.com/menu/'
:field public shared readonly IntEvt←'blur' 'create' 'focus' 'select'
:field public shared readonly ApiLevel←3
:field public Levels←1
:field public Items←⍬
:field public Links←⍬
:field public MakeIds←0
∇ Make
:Access public
:Implements constructor
JQueryFn←'menu'
InternalEvents←IntEvt
∇
∇ Make1 args;i;link;links;opt;opts;text;n;ids;mat;diff;ul;xp
:Access public
:Implements constructor
JQueryFn←'menu'
InternalEvents←IntEvt
:Select ⊃⍴⍴args ⍝ Select on Rank
:Case 1         ⍝ Vector
:If 0 2∊⍨10|⎕DR⊃args ⍝ 1st element is simple char
args←,⊂args
:EndIf      ⍝ Matrix
:Case 2 ⋄ args←↓[1]args ⍝ Split columns
:Else
:EndSelect
args←eis args
(Items Levels Links)←args defaultArgs Items Levels Links
∇
∇ r←Render;i;link;links;opt;opts;text;n;ids;mat;diff;ul;xp
:Access public
Tag←'ul'
SetId
n←≢Items
:If ~0∊n
opts←{isRef ⍵:⍵ ⋄ HtmlSafeText ⍵}¨eis Items
links←(⍴Items)↑(eis Links),(⍴Items)⍴⊂''
text←opts
opts←⍬
:For i link :InEach (⍳⍴links)links
:If ''≡link ⍝ no link
opt←text[i]
:ElseIf 326=⎕DR link ⍝ Nested array
(opt←(⊂'href'(⊃link))New _.a(i⊃text)).Set 1↓link
:Else ⍝ no attrs
opt←(⊂'href'link)New _.a(i⊃text)
:EndIf
opts,←opt
:EndFor
:EndIf
mat←⎕XML∊{isRef ⍵:⍵.Render ⋄ '<span>',⍵,'</span>'}¨opts
Levels⍴⍨←n
diff←0,¯2-/Levels
ul←≠\2/diff>0           ⍝ Step up: new ul
ids←{'id'⍵}¨id #.Utils.levels2ids Levels
i←⍋⍋(2×n)⍴0 1
mat←(,Levels∘.+0 1),(((n 2⍴'li' ''),ids)⍪mat[;1+⍳3])[i;]
⍝ We now insert ul/ols where they belong
xp←~ul←≠\(1+ul)/ul ⋄ n←≢i←ul/⍳⍴ul
mat←xp⍀mat
mat[i;]←mat[i-1;1],n 3⍴Tag'' '' ⍝ same as level before
mat[;1]+←+\xp\,0,⍨⍪diff           ⍝ the others get corrected
⍝ Finally we adjust the level number so it starts a 0
mat[;1]-←1⍴mat
r←(id New _.ul(⎕XML mat)).Render  ⍝ and use ⎕XML to format nicely
r,←⎕BASE.Render
∇
∇ {r}←AddItem args
:Access public ⍝ Obs: max 1
(Items Levels Links),←args defaultArgs'' 1 ''
∇
:EndClass
﻿  :Class jqProgressbar : #._JQ._jqObject ⍝!!!
:EndClass﻿:Class jqRemoveClass : #._JQ._jqUIWidget
⍝ Description:: jQueryUI RemoveClass effect
⍝ Constructor:: [selector [className [duration [easing [complete]]]] | options]]
⍝ selector - the jQuery/CSS selector from which to remove the class
⍝ className - one or more class names (space separated) to be removed from the class attribute of each matched element
⍝ duration - number or string (default: 400) determining how long the animation will run
⍝ easing - a string (default: 'swing') indicating which easing function to use for the transition
⍝ complete - a function (no default) to call once the animation is complete, called once per matched element
⍝ options - all animation settings (all optional)
⍝ Public Fields::
⍝ Selector - the jQuery/CSS selector from which to remove the class
⍝ ClassName - one or more class names (space separated) to be removed from the class attribute of each matched element
⍝ Duration - number or string (default: 400) determining how long the animation will run
⍝ Easing - a string (default: 'swing') indicating which easing function to use for the transition
⍝ Complete - a function (no default) to call once the animation is complete, called once per matched element
⍝ Options - all animation settings (all optional)
:field public shared readonly DocBase←'https://jqueryui.com/removeclass/'
:field public shared readonly ApiLevel←3
:Field public ClassName←''
:field public Duration←''
:field public Easing←''
:field public Complete←''
∇ Make
:Access public
:Implements constructor
JQueryFn←'removeClass'
∇
∇ Make1 arg
:Access public
:Implements constructor
JQueryFn←'removeClass'
arg←⊂⍣(1=≡,arg),arg
:If 2∊⍴arg
:AndIf isRef 2⊃arg
(Selector Options)←arg
:Else
(Selector ClassName Duration Easing Complete)←arg defaultArgs 5/⊂''
:EndIf
∇
∇ r←Render
:Access Public
'className' 'duration' 'easing' 'complete'SetIfNotSet¨ClassName Duration Easing Complete
:If ''≡Selector
:OrIf ''≡(GetOption'className')~' '
r←''
:Else
r←⎕BASE.Render
r[(1+≢JQueryFn)+(('.',JQueryFn,'({')⍷r)/⍳⍴r]←⊂'("',(GetOption'className'),'",'
r←'(complete:)"(.*?)"'⎕R'\1\2'∊r
:EndIf
∇
:EndClass﻿:Class jqResizable : #._JQ._jqUIWidget
⍝ Description:: jQueryUI Resizable interaction
⍝ Constructor:: [Selector]
⍝ Selector - the jQuery/CSS selector to which to apply resizable interaction
⍝ Public Fields::
⍝ Selector - the jQuery/CSS selector to which to apply resizable interaction
:field public shared readonly DocBase←'https://jqueryui.com/resizable/'
:field public shared readonly ApiLevel←3
:field public shared readonly IntEvt←'create' 'resize' 'start' 'stop'
∇ Make
:Access public
:Implements constructor
JQueryFn←'resizable'
InternalEvents←IntEvt
∇
∇ Make1 arg
:Access public
:Implements constructor
JQueryFn←'resizable'
Selector←arg
InternalEvents←IntEvt
∇
:EndClass﻿  :Class jqSelectable : #._JQ._jqObject
:EndClass﻿:Class jqShow : #._JQ._jqUIWidget
⍝ Description:: jQueryUI Show effect
⍝ Constructor:: [selector [effect [options [duration [complete]]] | options]]
⍝ selector - the jQuery/CSS selector to show
⍝ effect - a string indicating which effect to use for the transition
⍝ options - effect-specific properties and easing OR all animation settings
⍝ duration - number or string (default: 400) determining how long the animation will run
⍝ complete - a function to call once the animation is complete, called once per matched element
⍝ Public Fields::
⍝ Selector - the jQuery/CSS selector to show
⍝ Effect - a string indicating which effect to use for the transition
⍝ Options - effect-specific properties and easing OR all animation settings
⍝ Duration - number or string (default: 400) determining how long the animation will run
⍝ Complete - a function (no default) to call once the animation is complete, called once per matched element
:field public shared readonly DocBase←'https://jqueryui.com/show/'
:field public shared readonly ApiLevel←3
:Field public Effect←''
:field public Duration←''
:field public Complete←''
∇ Make
:Access public
:Implements constructor
JQueryFn←'show'
∇
∇ Make1 arg
:Access public
:Implements constructor
JQueryFn←'show'
arg←⊂⍣(1=≡,arg),arg
:If 2∊⍴arg
:If isRef 2⊃arg
(Selector Options)←arg
:Else
(Selector Effect)←arg
:EndIf
:Else
(Selector Effect Options Duration Complete)←arg defaultArgs 5/⊂''
:EndIf
:If ''≡Options
Options←⎕NS ⍬
:EndIf
∇
∇ r←Render
:Access Public
'effect' 'duration' 'complete'SetIfNotSet¨Effect Duration Complete
:If ''≡Selector
r←''
:Else
r←⎕BASE.Render
:EndIf
∇
:EndClass﻿:Class jqSlider : #._JQ._jqUIWidget
⍝ Description:: jQueryUI Slider widget
⍝ Constructor:: [min [max [value(s)]]]
⍝ min - the minimum value for the slider (default ⍬)
⍝ max - the maximum value for the slider (default ⍬)
⍝ value(s) - zero or more values for the slider (default ⍬)
⍝ Public Fields::
⍝ Values - zero or more values for the slider
⍝ Min - the minimum value for the slider (default ⍬)
⍝ Max - the maximum value for the slider (default ⍬)
:field public shared readonly DocBase←'https://jqueryui.com/slider/'
:field public shared readonly ApiLevel←3
:field public shared readonly IntEvt←'change' 'create' 'slide' 'start' 'stop'
:field public Values←⍬
:field public Min←⍬
:field public Max←⍬
∇ Make
:Access public
:Implements constructor
JQueryFn←'slider'
InternalEvents←IntEvt
WidgetDef[5]←⊂'.slider("option","value")'  ⍝ NB!! because jQuery Slider does not use an input element (from which we can retrieve a value), we use an alternate syntax to retrieve the value
∇
∇ Make1 arg
:Access public
:Implements constructor
JQueryFn←'slider'
arg←,arg
:If ~0∊⍴arg
:If 2=|≡arg
arg←,⊃arg
:EndIf
Min Max←2↑arg,(⍴arg)↓⍬ ⍬
Values←2↓arg
:EndIf
InternalEvents←IntEvt
WidgetDef[5]←⊂'.slider("option","value")'  ⍝ NB!! because jQuery Slider does not use an input element (from which we can retrieve a value), we use an alternate syntax to retrieve the value
∇
∇ r←Render
:Access public
:If ⍬≢Min ⋄ 'min'SetIfNotSet Min ⋄ :EndIf
:If ⍬≢Max ⋄ 'max'SetIfNotSet Max ⋄ :EndIf
:Select ⊃⍴,Values
:Case 0
:Case 1
'value'Set⊃Values
:Else
'values'Set,Values
WidgetDef[5]←⊂'.slider("option","values")'
:EndSelect
r←⎕BASE.Render
∇
:EndClass
﻿:Class jqSortable : #._JQ._jqUIWidget
⍝ Description:: jQueryUI Sortable widget/interaction
⍝ Constructor:: [items|selector]
⍝ items     - vector of items to make sortable
⍝ selector - the jQuery/CSS selector to which to apply sortable interaction
⍝ Public Fields::
⍝ Items     - vector of items to make sortable
⍝ Selector - the jQuery/CSS selector to which to apply sortable interaction
⍝ Examples::
⍝ Add _.jqSortable '#myul'               ⍝ jqSortable will use the already existing element #myul
⍝ Add _.jqSortable ('One' 'Two' 'Three') ⍝ jqSortable will build a <ul> / <li> structure
⍝ Add _.jqSortable ''                    ⍝ jqSortable will insert an empty <ul> structure where items can be dropped
:field public shared readonly DocBase←'https://jqueryui.com/sortable/'
:field public shared readonly ApiLevel←3
:field public shared readonly IntEvt←'activate' 'beforeStop' 'change' 'create' 'deactivate' 'out' 'over' 'receive' 'remove' 'sort' 'start' 'stop' 'update'
:Field Public Items←UNDEF         ⍝ vector of items
∇ Make
:Access public
:Implements constructor
JQueryFn←'sortable'
InternalEvents←IntEvt
∇
∇ Make1 arg
:Access public
:Implements constructor
JQueryFn←'sortable'
InternalEvents←IntEvt
:If 326≠⎕DR arg
:AndIf ''≢arg
Selector←arg
:Else
Items←arg
:EndIf
∇
∇ r←Render
:Access Public
r←''
:If UNDEF≢Items
:If ''≢Selector
id←Selector↓⍨'#'=⊃Selector
:Else
Selector←'#',SetId
:EndIf
r,←(id New _.Ul,⊂⊂Items).Render
:EndIf
r,←⎕BASE.Render
∇
:EndClass﻿:Class jqSpinner : #._JQ._jqUIWidget
⍝ Description:: jQueryUI Spinner widget
⍝ Constructor:: [min [max [value]]]
⍝ min - the minimum value for the spinner (default ⍬)
⍝ max - the maximum value for the spinner (default ⍬)
⍝ value - the initial value for the spinner (default ⍬)
⍝ Public Fields::
⍝ Value - the initial value for the spinner (default ⍬)
⍝ Min - the minimum value for the spinner (default ⍬)
⍝ Max - the maximum value for the spinner (default ⍬)
:field public shared readonly DocBase←'https://jqueryui.com/spinner/'
:field public shared readonly ApiLevel←3
:field public shared readonly IntEvt←'change' 'create' 'spin' 'start' 'stop'
:field public Value←⍬
:field public Min←⍬
:field public Max←⍬
∇ Make
:Access public
:Implements constructor
ContainerTag←'input'
JQueryFn←'spinner'
InternalEvents←IntEvt
∇
∇ Make1 arg
:Access public
:Implements constructor
ContainerTag←'input'
JQueryFn←'spinner'
InternalEvents←IntEvt
arg←,arg
:If ~0∊⍴arg
:If 2=|≡arg
arg←,⊃arg
:EndIf
Min Max Value←3↑arg,(⍴arg)↓⍬ ⍬ ⍬
:EndIf
∇
∇ r←Render
:Access public
Container.NoEndTag←1
:If ⍬≢Min ⋄ 'min'SetIfNotSet Min ⋄ :EndIf
:If ⍬≢Max ⋄ 'max'SetIfNotSet Max ⋄ :EndIf
:If UNDEF≢value
JavaScript,←'.spinner("value",',(⍕value),')'
:ElseIf ⍬≢Value
JavaScript,←'.spinner("value",',(⍕Value),')'
:EndIf
r←⎕BASE.Render
∇
:EndClass﻿:Class jqSwitchClass : #._JQ._jqUIWidget
⍝ Description:: jQueryUI SwitchClass effect
⍝ Constructor:: [selector [removeClassName addClassName [duration [easing [complete]]]] | options]]
⍝ selector - the jQuery/CSS selector from which to remove the class
⍝ removeClassName - one or more class names (space separated) to be removed from the class attribute of each matched element
⍝ addClassName - one or more class names (space separated) to be added to the class attribute of each matched element
⍝ duration - number or string (default: 400) determining how long the animation will run
⍝ easing - a string (default: 'swing') indicating which easing function to use for the transition
⍝ complete - a function (no default) to call once the animation is complete, called once per matched element
⍝ options - all animation settings (all optional)
⍝ Public Fields::
⍝ Selector - the jQuery/CSS selector from which to remove the class
⍝ RemoveClassName - one or more class names (space separated) to be removed from the class attribute of each matched element
⍝ AddClassName - one or more class names (space separated) to be added to the class attribute of each matched element
⍝ Duration - number or string (default: 400) determining how long the animation will run
⍝ Easing - a string (default: 'swing') indicating which easing function to use for the transition
⍝ Complete - a function (no default) to call once the animation is complete, called once per matched element
⍝ Options - all animation settings (all optional)
:field public shared readonly DocBase←'https://jqueryui.com/switchclass/'
:field public shared readonly ApiLevel←3
:Field public RemoveClassName←''
:Field public AddClassName←''
:field public Duration←''
:field public Easing←''
:field public Complete←''
∇ Make
:Access public
:Implements constructor
JQueryFn←'switchClass'
∇
∇ Make1 arg
:Access public
:Implements constructor
JQueryFn←'switchClass'
arg←⊂⍣(1=≡,arg),arg
:If 2∊⍴arg
:AndIf isRef 2⊃arg
(Selector Options)←arg
:Else
(Selector RemoveClassName AddClassName Duration Easing Complete)←arg defaultArgs 6/⊂''
:EndIf
∇
∇ r←Render
:Access Public
'removeClassName' 'addClassName' 'duration' 'easing' 'complete'SetIfNotSet¨RemoveClassName AddClassName Duration Easing Complete
:If ''≡Selector
:OrIf ''≡(GetOption'removeClassName')~' '
:OrIf ''≡(GetOption'addClassName')~' '
r←''
:Else
r←⎕BASE.Render
r[(1+≢JQueryFn)+(('.',JQueryFn,'({')⍷r)/⍳⍴r]←⊂'("',(GetOption'removeClassName'),'","',(GetOption'addClassName'),'",'
r←'(complete:)"(.*?)"'⎕R'\1\2'∊r
:EndIf
∇
:EndClass﻿:class jqTabs : #._JQ._jqUIWidget
⍝ Description:: jQueryUI Tabs widget
⍝
⍝ Constructor:: [titles [sections]] | [titles_sections]
⍝ titles          - vector of char vectors containing titles to appear on tabs
⍝ sections        - vector of vectors containing HTML content for each tab
⍝ titles_sections - 2-column matrix of titles [;1] and tabs [;2] as above
⍝                   or vector of 2 element title/tab vectors
⍝ Public Fields::
⍝ Titles          - vector of char vectors containing titles to appear on tabs
⍝ Sections        - vector of vectors containing HTML content for each tab
⍝ IsURL           - scalar or vector indicating if a section is a URL
⍝
⍝ Examples::
⍝ jqTabs 'Title1' 'Title2'
⍝ jqTabs ('Title1' 'Title2')('Section1' 'Section2')
⍝ jqTabs 2 2⍴'Title1' 'Section1' 'Title2' 'Section2'
:field public shared readonly DocBase←'https://jqueryui.com/tabs/'
:field public shared readonly IntEvt←'activate' 'beforeActivate' 'beforeLoad' 'create' 'load'
:field public shared readonly ApiLevel←3
:Field public Titles←0⍴⊂''
:Field public Sections←0⍴⊂''
:Field public IsURL←⍬
∇ Make
:Access public
:Implements constructor
JQueryFn←'tabs'
InternalEvents←IntEvt
∇
∇ Make1 args
:Access public
:Implements constructor
JQueryFn←'tabs'
InternalEvents←IntEvt
args←eis args
:If 1=⍴args
:If 2=⍴⍴1⊃args ⍝ matrix arg?
(Titles Sections)←↓[2]1⊃args
:Else ⍝ single title
Titles←args
:EndIf
:Else
(Titles Sections)←eis¨2↑args
:EndIf
∇
∇ {title}AddSection content
:Access public
:If 0=⎕NC'title' ⋄ title←'Section ',⍕1+⍴Titles ⋄ :EndIf
Titles,←⊂title
Sections,←⊂content
∇
∇ r←Render;sections;n;ids;i;section
:Access public
Content←''
SetId
:If ~0∊⍴Titles
sections←(n←⊃⍴Titles)↑Sections    ⍝ pad out or truncate
IsURL←n↑IsURL
ids←('#',id,'_section_')∘,∘⍕¨⍳⍴Titles
(IsURL/ids)←IsURL/Sections
(Container.Add _html.ul).Add¨Titles{⎕NEW #._html.li(⎕NEW #._html.a(⍺('href="',⍵,'"')))}¨ids
:For i section :InEach ((~IsURL)∘/¨ids sections)
Container.Add(i New #._html.div section)
:EndFor
:If ∨/IsURL
'dataType' 'contentType' 'async'Set¨'html' 'html'#.JSON.true
:EndIf
:EndIf
r←⎕BASE.Render
∇
:endclass
﻿:Class jqToggle : #._JQ._jqUIWidget
⍝ Description:: jQueryUI Toggle effect
⍝ Constructor:: [selector [effect [options [duration [complete]]] | options]]
⍝ selector - the jQuery/CSS selector to toggle
⍝ effect - a string indicating which effect to use for the transition
⍝ options - effect-specific properties and easing OR all animation settings
⍝ duration - number or string (default: 400) determining how long the animation will run
⍝ complete - a function to call once the animation is complete, called once per matched element
⍝ Public Fields::
⍝ Selector - the jQuery/CSS selector to toggle
⍝ Effect - a string indicating which effect to use for the transition
⍝ Options - effect-specific properties and easing OR all animation settings
⍝ Duration - number or string (default: 400) determining how long the animation will run
⍝ Complete - a function (no default) to call once the animation is complete, called once per matched element
:field public shared readonly DocBase←'https://jqueryui.com/toggle/'
:field public shared readonly ApiLevel←3
:Field public Effect←''
:field public Duration←''
:field public Complete←''
∇ Make
:Access public
:Implements constructor
JQueryFn←'toggle'
∇
∇ Make1 arg
:Access public
:Implements constructor
JQueryFn←'toggle'
arg←⊂⍣(1=≡,arg),arg
:If 2∊⍴arg
:If isRef 2⊃arg
(Selector Options)←arg
:Else
(Selector Effect)←arg
:EndIf
:Else
(Selector Effect Options Duration Complete)←arg defaultArgs 5/⊂''
:EndIf
:If ''≡Options
Options←⎕NS ⍬
:EndIf
∇
∇ r←Render
:Access Public
'effect' 'duration' 'complete'SetIfNotSet¨Effect Duration Complete
:If ''≡Selector
r←''
:Else
r←⎕BASE.Render
:EndIf
∇
:EndClass﻿:Class jqToggleClass : #._JQ._jqUIWidget
⍝ Description:: jQueryUI ToggleClass effect
⍝ Constructor:: [selector [className [switch [duration [easing [complete]]]]] | [switch] options]]
⍝ selector - the jQuery/CSS selector for which to toggle the class
⍝ className - one or more class names (space separated) to be toggled for each element in the matched set
⍝ switch - a boolean value to determine whether the class should be added or removed
⍝ duration - number or string (default: 400) determining how long the animation will run
⍝ easing - a string (default: 'swing') indicating which easing function to use for the transition
⍝ complete - a function (no default) to call once the animation is complete, called once per matched element
⍝ options - all animation settings (all optional)
⍝ Public Fields::
⍝ Selector - the jQuery/CSS selector from which to remove the class
⍝ ClassName - one or more class names (space separated) to be toggled  for each element in the matched set
⍝ switch - a boolean value to determine whether the class should be added or removed
⍝ Duration - number or string (default: 400) determining how long the animation will run
⍝ Easing - a string (default: 'swing') indicating which easing function to use for the transition
⍝ Complete - a function (no default) to call once the animation is complete, called once per matched element
⍝ Options - all animation settings (all optional)
:field public shared readonly DocBase←'https://jqueryui.com/toggleclass/'
:field public shared readonly ApiLevel←3
:Field public ClassName←''
:Field public Switch←''
:field public Duration←''
:field public Easing←''
:field public Complete←''
∇ Make
:Access public
:Implements constructor
JQueryFn←'toggleClass'
∇
∇ Make1 arg
:Access public
:Implements constructor
JQueryFn←'toggleClass'
arg←⊂⍣(1=≡,arg),arg
:If 2∊⍴arg
:AndIf isRef 2⊃arg
(Selector Options)←arg
:Else
(Selector ClassName Switch Duration Easing Complete)←arg defaultArgs 6/⊂''
:EndIf
∇
∇ r←Render;args
:Access Public
'className' 'switch' 'duration' 'easing' 'complete'SetIfNotSet¨ClassName Switch Duration Easing Complete
:If ''≡Selector
:OrIf ''≡(GetOption'className')~' '
r←''
:Else
args←'("',(GetOption'className'),'",'
:If ~¯1 ''⍬∊⍨⊂GetOption'switch'
args,←'true,'⊣⍣(isTrue GetOption'switch')⊢'false,'
:EndIf
r←⎕BASE.Render
r[(1+≢JQueryFn)+(('.',JQueryFn,'({')⍷r)/⍳⍴r]←⊂args
r←'(complete:)"(.*?)"'⎕R'\1\2'∊r
:EndIf
∇
:EndClass﻿  :class jqTooltip : #._JQ._jqObject ⍝!!!
:endclass﻿:Namespace _JS ⍝ JavaScript
⍝ Populated from \HTML\_JS\
:EndNamespace
﻿:class ChainedSelect : #._html.select
⍝ Description:: Implements a hierarchical select across multiple levels
⍝ Constructor:: [options [[selected] [[disabled] [prompt]]]]
⍝ options   - 3 column matrix of displayed[;1] and returned[;2] values and their level/depth [;3]
⍝ selected  - Boolean or integer array indicating pre-selected option (consciously NOT supporting multiple selects)
⍝ disabled  - Boolean or integer array indicating disabled options(s)
⍝ prompt    - first item to display (has no value) (default '[Select]')
⍝
⍝ Public Fields::
⍝ Options   - 3 column matrix of displayed[;1] and returned[;2] values and their level/depth [;3]
⍝ Selected  - Boolean or integer array indicating pre-selected options
⍝ Disabled  - Boolean or integer array indicating disabled options(s)
⍝ Prompt      - first item to display (has no value) (default '[Select]')
⍝
:field public Options←0 3⍴⊂''     ⍝ vector or matrix [;1] display, [;2] value [;3]=depth
:field public Selected←⍬          ⍝ either Boolean integer vector indicating
:field public Prompt←'[Select]'   ⍝ character vector "Prompt" choice - the first choice on the list and does not have a value
:field public Disabled←⍬          ⍝ either Boolean integer vector indicating
:field public Horizontal←1        ⍝ Orientation (Hz=0 implies one physical row per "sub-select" - within the same virtual row)
:field public Labels←⍬            ⍝ Labels[n] is the label for the select on level n (useful if Horizontal=0)
∇ make
:Access public
:Implements constructor
∇
∇ make1 args;attr
:Access public
:Implements constructor
args←eis args
:If (|≡args)∊0 1 2
:AndIf ~0∊⍴⊃args
args←,⊂args
:EndIf
(Options Selected Disabled Prompt)←args defaultArgs Options Selected Disabled Prompt
∇
parents←{0∊⍴⍵:⍬ ⋄ (⍴⍵),∇({+/∨\⍵<1↑⍵}⌽⍵)↑⍵}
∇ r←Render;opts;sel;dsp;rc;rtab
:Access public
Use'JQuery'
Use'⍎/PlugIns/Other/chained/jquery.chained.min.js'
Use'⍕/PlugIns/Other/chained/ChainedSelect.css'
SetUse
⍝ nested/chained selects!
⍝ the control with the id given for this control will be a hidden input!
⍝ downside: visual attributes set on the control (in MS) will have no effect!
value←''  ⍝ consider "Selected" for sensible value. if multiple, build a comma/blank-separated list?
SetInputName
id∆←id
r←((id)('name="',id,'" value="',(1↓∊(⍕¨Selected),¨','),'"')'type=hidden'Add _.input).Render
→(0∊2↑⍴Options)/0
Options[;3]←{(∪⍵)[⍋∪⍵]⍳⍵}Options[;3] ⍝ make sure levels are consistently numbered
Options[;2]←(↓(⍳1↑⍴Options),[1.5]⊂Options){
(i o)←⍺                   ⍝ index and complete list of options
0∊⍴o:⍬
(0<1↑⍴,⍵)∧i=o[;2]⍳⊂⍵:⍵    ⍝ if current row has an id and has the first match, we are fine
'opt',(⍕i),'_',⍵          ⍝ otherwise prefix with row no...
}¨Options[;2]
maxdepth←1↑⌈/Options[;3]
Options←AddClasses Options maxdepth
js←((ScriptFollows #.Strings.subst'%maxdepth%'(⍕maxdepth))#.Strings.subst'%prefix%'id∆),'$(function() {'
⍝ function changedChainedSelect(event)
⍝ {
⍝   if($(event.target).is(":visible"))
⍝   {
⍝     var lvl = $(event.target).data("lvl");
⍝     var dat = $(event.target).find('option:selected').data();
⍝     var ToHide = Array();
⍝     if (dat !== undefined)
⍝     { if (dat.hasOwnProperty("hidelevels"))
⍝       {
⍝         var ToHide = (dat.hidelevels).toString().split(",");
⍝       }
⍝       if (dat.hasOwnProperty("finalitem"))
⍝       {
⍝         var newval = $(event.target).find('option:selected').val();
⍝         $("#%prefix%").val(newval);
⍝         $("#%prefix%").trigger("change");
⍝       }
⍝     }
⍝
⍝     for (var i=lvl+1; i<=%maxdepth%; i++) {
⍝       var daId = '%prefix%_' + (i);
⍝       if (-1==ToHide.indexOf(i.toString())) {
⍝         $(".cs" + daId).show();
⍝       } else {
⍝         $(".cs" + daId).hide();
⍝       }
⍝     }
⍝   }
⍝ }
SelectedOnAllLevels←∊(⊂Options[;3]){parents ⍵↑⍺}¨Selected
rtab←(2,⍴uo←∪Options[;3])⍴⊂''
:For level :In uo
z←Options[;3]=level
opts←z⌿Options
sl←({⍵/⍳⍴⍵}z)∊SelectedOnAllLevels
di←({⍵/⍳⍴⍵}z)∊Disabled
slid←id∆,'_',⍕level
dsp←(((0=+/sl)∧level>1)/' style="display:none"'),'>'  ⍝ set display-property and close tag
:If 0<⍴lvlb←level{2>≡⍵:'' ⋄ ⍺>⍴⍵:'' ⋄ ⍺⊃⍵}Labels
rtab[1;uo⍳level]←⊂'<label class="cs',slid,'" for="',slid,'"',dsp,lvlb,'</label>'
:EndIf
rc←'<select class="cs',slid,'" id="',slid,'" name="',slid,'" data-lvl="',(⍕level),'"'
rc,←dsp
rc,←BuildOptions opts sl di
rc,←'</select>'
rtab[2;uo⍳level]←⊂rc
js,←'$("#',slid,'").on("change" , changedChainedSelect);'
:If level>1
js,←'$("#',slid,'").chained("#',id∆,'_',(⍕level-1),'"); '
:EndIf
:EndFor
js,←'});'
rtab←(⌽1,1<⍴∪∊rtab[1;])⌿rtab
:If ~Horizontal ⋄ rtab←⍉rtab ⋄ :EndIf
r,←'<table class="ChainedSelectNoBorders">',(∊(⊂'<tr>'),((⊂'<td>'),¨rtab,¨⊂'</td>'),⊂'</tr>'),'</table>'
r,←(Add _.Script js).Render
r,←RenderHandlers
∇
∇ opts←{id}AddClasses(opts maxdepth);z;j
opts←6↑[2]opts   ⍝ adds 4th&5th&6th col to Options-Matrix with classnames (for chainedselect: composed of ids from parent-selections [;4] and indicator if lower levels coming [;5] andif this is "final(ly an) item" [;6]
:If 0=⎕NC'id' ⋄ id←'' ⋄ :EndIf
:For z :In {⍵/⍳⍴⍵}opts[;3]=⌊/opts[;3]
j←((z<⍳1↑⍴opts)∧opts[;3]≤opts[z;3])⍳1  ⍝ first entry of a same (or higher level) marks end of lower-level entries
opts[z;4]←⊂id
op5←''
:If z=j-1   ⍝ no more items below
:AndIf opts[z;3]<maxdepth  ⍝ and not at lowest level...
op5←¯1↓∊(⍕¨opts[z;3]↓⍳maxdepth),¨','  ⍝ remember that we need to hide these levels...!
:EndIf
opts[z;5]←⊂op5
opts[z;6]←(z=j-1)∨opts[z;3]=maxdepth   ⍝ nothing below or last level anyway...
opts[z↓⍳j-1;]←(2⊃opts[z;])AddClasses opts[z↓⍳j-1;]maxdepth
:EndFor
∇
∇ r←BuildOptions(opts sel dis);v
r←''
:If ~0∊⍴opts
opts←eis opts
:If 1=⍴⍴opts
opts←opts,⍪opts
:EndIf
:EndIf
v←⍳⍬⍴⍴opts
(sel dis)←v∘∊∘{∧/⍵∊0 1:⍵/⍳⍴⍵ ⋄ ⍵}∘,¨sel dis
:If ~0∊⍴Prompt
r,←('disabled="disabled" selected="selected"'New #._html.option Prompt).Render
:EndIf
r,←FormatOptions(opts sel dis)
∇
∇ r←FormatOptions(opts sel dis);o;s;d
:Access Public Shared
r←''
:If 1=⍴⍴opts ⋄ opts←opts,⍪opts ⋄ :EndIf
:For o s d :InEach (↓opts)sel dis
r,←'<option',({⍵ ine' value="',(HtmlSafeText ⍵),'"'}2⊃o),(s/' selected="selected"'),(d/' disabled="disabled"'),(' class="'{0=1↑⍴,⍵:'' ⋄ ⍺,⍵,'"'}4⊃o)
r,←(6⊃o)/' data-finalitem="1"'
r,←(' data-hidelevels="'{0=1↑⍴,⍵:'' ⋄ ⍺,⍵,'"'}⍕5⊃o),'>',(#.HtmlUtils.HtmlSafeText 1⊃o),'</option>'
:EndFor
∇
⍝    ∇ r←{selector}ReplaceOptions args;sel;opts;dis
⍝ Not (yet) implemented...do we need that?
⍝     Replaces select elements options - used by callback functions
⍝ Ex: r←Execute ReplaceOptions ('New Option 1' 'New Option 2') 1
⍝     arg = options [[selected] [disabled]]
⍝      :Access public
⍝      :If 0=⎕NC'selector' ⋄ selector←'#',id ⋄ :EndIf
⍝      args←eis args
⍝      :If (|≡args)∊0 1 2
⍝      :AndIf ~0∊⍴⊃args
⍝          args←,⊂args
⍝      :EndIf
⍝      (opts sel dis)←args defaultArgs Options ⍬ ⍬
⍝      r←selector #.JQ.Replace BuildOptions(opts sel dis)
⍝    ∇
:endclass
﻿:class Chosen : #._JQ._jqWidget
⍝ Description:: Enhanced HTML selects with search-box and improved multi-select
⍝ Constructor:: [options [[selected] [[ disabled] [prompt]]]]
⍝ options   - vector of options or 2 column matrix of displayed[;1] and returned[;2] values
⍝ selected  - Boolean or integer array indicating pre-selected options(s)
⍝ disabled  - Boolean or integer array indicating disableded options(s)
⍝ prompt      - first item to display (has no value) (default '[Select]')
⍝
⍝ Public Fields::
⍝ Options   - vector of options or 2 column matrix of displayed[;1] and returned[;2] values
⍝ Selected  - Boolean or integer array indicating pre-selected options(s)
⍝ Disabled  - Boolean or integer array indicating disabled options(s)
⍝ Prompt      - first item to display (has no value) (default '[Select]')
⍝ options   - a namespace that collects the various options (see doc)
⍝
⍝ Examples::
⍝ Chosen  ('Choice 1' 'Choice 2' 'Choice 3')
⍝ Chosen  (3 2⍴'One' 'c1' 'Two' 'c2' 'Three' 'c3')
⍝ Chosen ((3 2⍴'One' 'c1' 'Two' 'c2' 'Three' 'c3') 2) ⍝ second item is selected
⍝ Chosen ((3 2⍴'One' 'c1' 'Two' 'c2' 'Three' 'c3') (0 1 0)) ⍝ second item is selected
⍝ Chosen ((3 2⍴'One' 'c1' 'Two' 'c2' 'Three' 'c3') 2 3 'Pick One') ⍝ second item is selected, third item is disabled
⍝ Chosen ((3 2⍴'One' 'c1' 'Two' 'c2' 'Three' 'c3') (2 3) 1) ⍝ second and third items are selected, first item is disabled
:field public shared readonly DocBase←'https://harvesthq.github.io/chosen/options.html'
:field public Options←0 2⍴⊂''     ⍝ vector or matrix [;1] display, [;2] value
:field public Selected←⍬          ⍝ either Boolean integer vector indicating
:field public Disabled←⍬          ⍝ either Boolean integer vector indicating
:field public Prompt←'[Select]'   ⍝ character vector "Prompt" choice - the first choice on the list and does not have a value
∇ make
:Access public
:Implements constructor :Base
ContainerTag←'select'
Container←⎕NEW #._DC.Select
JQueryFn←Uses←'chosen'
∇
∇ make1 args
:Access public
:Implements constructor
ContainerTag←'select'
(Options Selected Disabled Prompt)←args defaultArgs Options Selected Disabled Prompt
Container←⎕NEW #._DC.Select (Options Selected Disabled Prompt)
JQueryFn←Uses←'chosen'
∇
∇ r←Render
:Access public
Container.Options←Options
⎕shadow'Options' ⋄ Options←''   ⍝ avoid clashes with JQueryFn that uses "Options", too - but differently...
r←⎕BASE.Render
∇
∇ r←{selector}ReplaceOptions args;sel;opts;dis
:Access public
:If 2=⎕NC'selector' ⋄ r←selector Container.ReplaceOptions args
:Else ⋄ r←Container.ReplaceOptions args
selector←'#',id
:EndIf
r,←⊂'execute'('$("',selector,'").trigger("chosen:updated")')
∇
:endclass
﻿:Class DataTable : #._JQ._jqWidget
⍝ Description:: Enhanced searchable and reorderable HTML table
⍝ Constructor:: [data [cellAttr [headerRows [headerAttr [makeCellIds [makeRowIds]]]]]
⍝ Note that constructor arguments are identical to those for Table
⍝ data           - matrix of data to display in the table
⍝ cellAttr       - Cell Attributes
⍝ headerRows     - # of header rows
⍝ headerAttr     - Header attributes
⍝ makeCellIds    - 1 to generate IDs      <td id="tableId_r2c3">
⍝ makeRowIds     - 1 to generate Row IDs  <tr id="tableId_row2">
⍝ Public Fields::
⍝ Data           - matrix of data to display in the table
⍝ CellAttr       - Cell Attributes
⍝ HeaderRows     - # of header rows
⍝ HeaderAttr     - Header attributes
⍝ MakeCellIds    - 1 to generate IDs      <td id="tableId_r2c3">
⍝ MakeRowIds     - 1 to generate Row IDs  <tr id="tableId_row2">
⍝                  Warning: this ids are generated, but if you need them in order to provide
⍝                  meaningful tools for interaction with the table, it is recommended
⍝                  to use DataTable's features instead which may be more useful!
⍝ Width          - (string) width of the table
⍝ InitFilterWith - initalize "Search"-field with this string
⍝ FocusFilter    - put initial focus on Filter-Control (boolean, default=0)
⍝ Bootstrap      - integer (use Boostrap-styling. 0=no, 1 or 4=BS4, 3=BS3)
⍝ PlugIns        - comma delimited list of "official" plugins to use
⍝
⍝  currently supported plugins are:
⍝    yadcf (yet another datatable column filter) - needs to be explicitely referenced
⍝    mark (highlight search results) - setting option "mark" to true is sufficient, does not need to be specified in "Plugin" then
⍝    responsive (responsive layout) - setting option "responsive" to true is sufficient
⍝    buttons -provides options to copy data to Excel, print and toggle columns
⍝    NB: this mechanism currently supports a subset of Datatable's plugins/extensions.
⍝        Please let us know (miserver@dyalog.com) if your favourite Plugin is missing!
:Field public shared readonly DocBase←'https://www.datatables.net/'
:field public Data←0 0⍴⊂''
:field public CellAttr←''
:field public HeaderRows←1
:field public HeaderAttr←''
:field public MakeCellIds←0
:field public MakeRowIds←0
:field public Width←''
:field public InitFilterWith←''
:field public Plugins←''
:field public Bootstrap←0
:field public FocusFilter←0
:field private JSON_Data←''  ⍝ supporting JSON-Data transparently ("Data" can be JSON)
∇ Make0
:Access public
JQueryFn←'DataTable'
:Implements constructor
Container←⎕NEW #._DC.Table
ContainerTag←'table'
∇
∇ Make1 args
:Access public
JQueryFn←'DataTable'
:Implements Constructor
:If 2=⍴⍴args ⋄ args←,⊂args ⋄ :EndIf
Data CellAttr HeaderRows HeaderAttr MakeCellIds MakeRowIds←args defaultArgs Data CellAttr HeaderRows HeaderAttr MakeCellIds MakeRowIds
Container←⎕NEW #._DC.Table
ContainerTag←'table'
∇
∇ html←Render;tab;btn
:Access public
:If 2≠⍴⍴Data
:AndIf #.HtmlElement.isChar Data
JSON_Data←Data ⋄ Data←0 0⍴0
:EndIf
:If 0=≢GetOption'initComplete'
:AndIf FocusFilter
SetId
'initComplete'Set⊂'function(){var table = $("#',id,'").DataTable();$("div.dataTables_filter input", table.table().container()).focus();}'
:EndIf
:Select Bootstrap
:Case 0
Use'DataTables'
Use'⍕/DataTables/css/jquery.dataTables.min.css'
:CaseList 1 4
Use'DataTables'
Use'⍎/DataTables/js/dataTables.bootstrap4.min.js'
Use'⍕/DataTables/css/dataTables.bootstrap4.min.css'
:Case 3
Use'DataTables'
Use'⍎/DataTables/js/dataTables.bootstrap.min.js'
Use'⍕/DataTables/css/jquery.dataTables.bootstrap.min.css'
:EndSelect
Plugins,←(_true≡GetOption'responsive')/',responsive'
Plugins,←(_true≡GetOption'mark')/',mark'
Plugins,←(0<≢GetOption'yadcf')/',yadcf'
:If 0<≢∊btn←GetOption'buttons'
:If 326=⎕DR btn
:AndIf 0<≢∊{0::'' ⋄ ⍵.extend}btn
Plugins,←∊(⊂',buttons.'),¨⊆btn.extend
:ElseIf 2=⎕NC'btn'
Plugins,←∊(⊂',buttons.'),¨⊆btn
'buttons'Set,⊂∊btn ⍝ ensure it is nested
:EndIf
:EndIf
:If 0<≢InitFilterWith
'search.search'Set InitFilterWith
:EndIf
opts←Options
JavaScript,←RenderPlugins
Options←opts
:If 0<⍴JSON_Data ⋄ 'data'Set⊂JSON_Data ⋄ :EndIf
Container.(Data CellAttr HeaderRows HeaderAttr MakeCellIds MakeRowIds)←(Data CellAttr HeaderRows HeaderAttr MakeCellIds MakeRowIds)
:If 0<≢Width
'width'Container.Set Width
:EndIf
SetUse
html←⎕BASE.Render
∇
∇ js←RenderPlugins;plugin
⍝ might also update Options
js←''
((Plugins='.')/Plugins)←','  ⍝ expand "buttons.colvis" to "buttons,colvis" etc.
:For plugin :In ∪','#.Utils.penclose Plugins
:Select plugin
:Case 'yadcf'
js,←yadcfRender
Options.⎕EX'yadcf'
:Case 'mark'
Use'⍎/DataTables/extras/mark-8.11.0/jquery.mark.min.js'
Use'⍎/DataTables/extras/mark-8.11.0/datatables.mark.min.js'
Use'⍕/DataTables/extras/mark-8.11.0/datatables.mark.min.css'
Options.mark←_true
:Case 'responsive'
renderPluginResponsive  ⍝ does not return result, only Uses stuff
Options.responsive←_true
:Case 'buttons'
renderPluginButtons
:Case 'colvis'
Use'⍎/DataTables/extras/Buttons-1.5.6/js/buttons.colVis.min.js'
:Case 'excelHtml5'
Use'⍎/DataTables/extras/Buttons-1.5.6/js/buttons.html5.min.js'
Use'⍎/DataTables/extras/JSZip-2.5.0/jszip.min.js'
:CaseList 'excel' 'copy' 'csv'
Use'⍎/DataTables/extras/Buttons-1.5.6/js/buttons.flash.min.js'
Use'⍎/DataTables/extras/Buttons-1.5.6/js/buttons.html5.min.js'
Use'⍎/DataTables/extras/Buttons-1.5.6/3d-party/jszip3.1.3/jszip.min.js'
:Case 'print'
Use'⍎/DataTables/extras/Buttons-1.5.6/js/buttons.print.min.js'
:CaseList 'pdf' 'pdfHtml5' 'pdfFlash'
Use'⍎/DataTables/extras/Buttons-1.5.6/js/buttons.flash.min.js'
Use'⍎/DataTables/extras/Buttons-1.5.6/js/buttons.html5.min.js'
Use'⍎/DataTables/extras/Buttons-1.5.6/3d-party/pdfmake0.1.36/pdfmake.min.js'
Use'⍎/DataTables/extras/Buttons-1.5.6/3d-party/pdfmake0.1.36/vfs_fonts.js'
Use'⍎/DataTables/extras/Buttons-1.5.6/js/buttons.html5.min.js'
:Case 'pageLength'
⍝ does not need anything more than just the plain buttons
:Else
'Unknown plugin: ""',plugin,'"'
:EndSelect
:EndFor
:If ∨/∊('pdf' 'copy' 'excel' 'csv')⍷¨⊂Plugins
js,←';$.fn.dataTable.Buttons.swfPath="../../swf/flashExport.swf";'
:EndIf
∇
:section render Plugins
∇ js←yadcfRender;flt
js←''
⍝ this is done intentionally outside the IF-condition, so that just setting 'yadcf'∊ Plugin and not providing options will still load the resources
⍝ (useful when calling yadcf in subsequent AJAX etc.!)
Use'⍕/DataTables/extras/yadcf-0.9.3/jquery.dataTables.yadcf.css'
Use'⍎/DataTables/extras/yadcf-0.9.3/jquery.dataTables.yadcf.js'
Use'JQueryUI'
:If 0<Options.⎕NC'yadcf.Filters'
:AndIf ×≢Options.yadcf.Filters
SetUse
flt←#.JSON.fromAPL Options.yadcf.Filters
:If ∨/'"chosen"'⍷flt ⋄ Use'chosen' ⋄ :EndIf     ⍝ load Chosen-Plugin for yadcf-Filters
js←';yadcf.init($("#',id,'").DataTable(),',flt,');'
:EndIf
∇
∇ renderPluginResponsive
:Select Bootstrap
:Case 0
Use'⍕/DataTables/extras/Responsive-2.2.2/css/responsive.dataTables.min.css'
Use'⍎/DataTables/extras/Responsive-2.2.2/js/dataTables.responsive.min.js'
:CaseList 1 4
Use'⍕/DataTables/extras/Responsive-2.2.2/css/responsive.bootstrap4.min.css'
Use'⍎/DataTables/extras/Responsive-2.2.2/js/dataTables.responsive.min.js'
Use'⍎/DataTables/extras/Responsive-2.2.2/js/responsive.bootstrap4.min.js'
:Case 3
Use'⍕/DataTables/extras/Responsive-2.2.2/css/responsive.bootstrap.min.css'
Use'⍎/DataTables/extras/Responsive-2.2.2/js/dataTables.responsive.min.js'
Use'⍎/DataTables/extras/Responsive-2.2.2/js/responsive.bootstrap.min.js'
:EndSelect
∇
∇ renderPluginButtons
:Select Bootstrap
:Case 0
Use'⍕/DataTables/extras/Buttons-1.5.6/css/buttons.dataTables.min.css'
Use'⍎/DataTables/extras/Buttons-1.5.6/js/dataTables.buttons.min.js'
:CaseList 1 4
Use'⍕/DataTables/extras/Buttons-1.5.6/css/buttons.bootstrap4.min.css'
Use'⍎/DataTables/extras/Buttons-1.5.6/js/dataTables.buttons.min.js'
Use'⍎/DataTables/extras/Buttons-1.5.6/js/buttons.bootstrap4.min.js'
:Case 3
Use'⍕/DataTables/extras/Buttons-1.5.6/css/buttons.bootstrap.min.css'
Use'⍎/DataTables/extras/Buttons-1.5.6/js/dataTables.buttons.min.js'
Use'⍎/DataTables/extras/Buttons-1.5.6/js/buttons.bootstrap.min.js'
:EndSelect
∇
:endsection render Plugins
:EndClass
﻿:Class d3 : #._html.script
∇ make
:Implements constructor
:Access public
∇
∇ make1 args
:Implements constructor :base args
:Access public
∇
∇ r←Render
:Access public
Use'd3'
SetUse
r←⎕BASE.Render
∇
:EndClass﻿:Class dimple : #._html.script
∇ make
:Implements constructor
:Access public
∇
∇ make1 args
:Implements constructor :base args
:Access public
∇
∇ r←Render
:Access public
Use'dimple'
SetUse
r←⎕BASE.Render
∇
:EndClass﻿:Class jBox : #._JQ._jqWidget
⍝ Description:: jBox widget
⍝
⍝ Constructor:: [type [message [content]]]
⍝ type - one of 'Tooltip', 'Mouse', 'Modal', 'Confirm', 'Notice', 'Image'
⍝ message - the text that will appear in the popup
⍝ content - the content for the target element
⍝
⍝ Public Fields::
⍝ Type - one of 'Tooltip', 'Mouse', 'Modal', 'Confirm', 'Notice', 'Image'
⍝ Message - the text that will appear in the popup
⍝ Content - the content for the target element
⍝ Theme - name of a jBox-Theme (one of 'ModalBorder','NoticeBorder','TooltipBorder' or 'TooltipDark')
⍝
⍝ Shared Methods:
⍝ {optionsORcolor} Notice [message] - displays a popup-msg.
⍝ {options} Modal [message] - modal popup
⍝
⍝ Notes::
⍝ For more information see https://github.com/StephanWagner/jBox
⍝ Documentation of options can be found @ http://stephanwagner.me/jBox/options
⍝ Type is a public field in the base class
:field public shared readonly DocBase←'http://stephanwagner.me/jBox/documentation'
:field public shared readonly ApiLevel←3
:field public shared readonly Types←'Tooltip' 'Mouse' 'Modal' 'Confirm' 'Notice' 'Image'
:field public Content←''
:field public Message←''
:field public Theme←''
VarExists←{
⍝ ⎕NC might be 0, but the var (field of parent class) was assigned a value
⍝ so we're using this check to check whether it was used or not.
0::0
0<≢0,⍎⍵
}
∇ make
:Access public
JQueryFn←Uses←'jBox'
:Implements constructor
Type←'Tooltip'
ContainerTag←'span'
∇
∇ make1 args
:Access public
JQueryFn←Uses←'jBox'
:Implements constructor
args←eis args       ⍝ harmful after recent changes to defaultargs
(Type Message Content)←args defaultArgs'Tooltip'Message Content
ContainerTag←'span'
∇
∇ r←Render;ind
:Access public
ind←Types⍳⊂#.Strings.firstCap Type
'Invalid jBox Type'⎕SIGNAL(ind>⍴Types)/11
Type←ind⊃Types
Container.Content←Content
:If 0<≢Message  ⍝ do not overwrite content if Message is empty!
'content'Set renderIt New _.span Message
:EndIf
BuildHTML←0<≢Content
:If ind∊4 6 ⍝ Confirm & Image
:AndIf 0=VarExists'ScriptOptions'
⍝===ScriptOptions===
⍝[1] Wrap in <script>?
⍝[2] wrap in $(function(){});?
⍝[3] use jQuery Selector syntax (1) or JavaScript new (0)
ScriptOptions←1 1 0
:EndIf
:If 0<⍴Theme
'theme'Set Theme
Use'⍕/jBox/themes/',Theme,'.css'
:EndIf
r←⎕BASE.Render
∇
∇ r←{ColorOrOpts}Notice txt;jb
:Access public shared
jb←New _.jBox'Notice'txt
jb.ScriptOptions←0 0 0
:If 2=⎕NC'ColorOrOpts'
:AndIf isString ColorOrOpts
:AndIf ~0∊⍴ColorOrOpts
:If 326=⎕DR ColorOrOpts             ⍝ can also be an enclosed ⎕JSON-specs
jb.Options←⎕JSON⊃ColorOrOpts
:Else
jb.Options.color←ColorOrOpts
:EndIf
:ElseIf 9=⎕NC'ColorOrOpts'
jb.Options←ColorOrOpts
:EndIf
r←jb.Render            ⍝ set the JavaScript
∇
∇ r←{opts}Modal txt;jb
:Access public shared
jb←New _.jBox'Modal'txt
jb.ScriptOptions←0 0 0
:If 9=⎕NC'opts'
:If 326=⎕DR opts             ⍝ can also be an enclosed ⎕JSON-specs
opts←⎕JSON⊃opts
:EndIf
jb.Options←opts
:EndIf
'onInit'jb.Set⊂'function() { this.open(); }'
r←jb.Render
∇
:EndClass
﻿:Namespace _JSS ⍝ Javascript Snippets
(⎕ML ⎕IO)←1
⍝ little helpers for JS/JQuery used in callbacks
⍝ this list will grow over time as usage patterns are discovered
eis←{(,∘⊂)⍣((326∊⎕DR ⍵)<2>|≡⍵),⍵} ⍝ Enclose if simple
quote←{0∊⍴⍵: '' ⋄ '"',(('"' ⎕R '\\\0')⍕⍵),'"'}
ine←{0∊⍴⍺:'' ⋄ ⍵} ⍝ if not empty
fmtSelector←{{'this'≡⍵:⍵ ⋄quote ⍵}¯2↓∊{⍵,', '}¨eis ⍵}
fmtData←#.JSON.fromAPL ⍝ {{(326=⍵)<0=2|⍵}⎕DR ⍵:quote ⍵ ⋄ ⍕⍵}
JAchars←#.JSON.JAchars
∇ r←Alert txt
⍝ popup alert text
r←'alert(',(quote txt),');'
∇
∇ r←CloseWindow
⍝ close the browser window
r←'var w=window.open(window.location,''_self''); w.close();'
∇
∇ r←sel Css args ⍝ JQuery css cover
r←(sel JQuery'css')args
∇
∇ r←sel Val args ⍝ JQuery val cover
r←(sel JQuery'val')args
:If args≡'' '' ⋄ r/⍨←~',"");'⍷r ⋄ :EndIf  ⍝ special case to set value to ""
∇
∇ r←sel Prop args ⍝ JQuery prop cover
r←(sel JQuery'prop')args
∇
∇ r←sel Attr args ⍝ JQuery attr cover
r←(sel JQuery'attr')args
∇
∇ r←sel RemoveAttr args
r←(sel JQuery'removeAttr')args
∇
∇ r←sel AddClass args
r←(sel JQuery'addClass')args
∇
∇ r←sel RemoveClass args
r←(sel JQuery'removeClass')args
∇
∇ r←sel Html args ⍝ JQuery html cover
r←(sel JQuery'html')args
∇
∇ r←sel Show args
r←(sel JQuery'show')args
∇
∇ r←sel Hide args
r←(sel JQuery'hide')args
∇
∇ r←sel Toggle args
r←(sel JQuery'toggle')args
∇
∇ r←sel Trigger args
r←(sel JQuery'trigger')args
∇
∇ r←Submit sel
r←(sel JQuery'submit')''
∇
∇ r←sel Position args;Position;inds;parameters;q;mask
parameters←'my' 'at' 'of' 'collision' 'within'
q←{1⌽'''''',{⍵/⍨1+''''=⍵}⍕⍵}
Position←⎕NS ⍬
:If 2=⍴⍴args ⍝ matrix
args←,args
:ElseIf 3=≡args
args←⊃,/args
:EndIf
args←eis args
inds←parameters⍳args
:If ∨/mask←inds≤⍴parameters
:If mask≡(2×+/mask)⍴1 0
parameters←mask/args
args←(1⌽mask)/args
:EndIf
:Else
parameters←(⍴args)↑parameters
:EndIf
mask←⍬∘≢¨args
args←mask/args
parameters←mask/parameters
parameters({⍎'Position.',⍺,'←',q ⍵})¨args
:If ~0∊⍴Position.⎕NL-2
r←0 #.JQ.JQueryfn'position'sel Position
:EndIf
∇
∇ r←{eval}JSDate date
⍝ snippet to create a JS date (JavaScript months are 0-11!!!)
⍝ date is one of:
⍝   ∘ 3-6↑⎕TS form
⍝   ∘ IDN
⍝   ∘ charvec
⍝ eval is optional Boolean to indicate whether to return executable phrase (1) or just a string (0)
:If 0=⎕NC'eval' ⋄ eval←0 ⋄ :EndIf
:If 0 2∊⍨10|⎕DR date  ⍝ char?
date←'"',date,'"'
:Else
:If 1=≢date
date←3↑2 ⎕NQ'.' 'IDNToDate'date
:EndIf
date←1↓∊','∘,∘⍕¨(¯1∘+@2)(3⌈6⌊≢date)↑date
:EndIf
r←(⊂⍣eval)'new Date(',date,')'
∇
∇ r←{varname}JSData data
⍝ return var definition to build a JavaScript object based on data
⍝ varname is the name of the variable
⍝ data is either a matrix of [1;] column names, (1↓) data
⍝      or a vector of namespaces
:If 0=⎕NC'varname' ⋄ varname←'' ⋄ :EndIf
:If 2=⍴⍴data
data←#.JSON.fromTable data
:EndIf
r←(((~0∊⍴varname)/'var ',varname,' = '),0 0 1 #.JSON.fromAPL data),';'
∇
∇ r←{val}(sel JQuery fn)args;opt
⍝ construct JavaScript to call a jQuery function - eg val(), html(), css(), prop(), or attr()
⍝ optionally setting a value for
⍝ Get a jQuery parameter:
⍝    ('"#id"' JQuery 'attr') '"data-role"'
⍝ Set a jQuery parameter:
⍝    '"blue"' ('#id' JQuery 'css') 'background-color'
⍝
args←eis args
:If 0=⎕NC'val'
(opt val)←2↑args,(⍴args)↓''⎕NULL
:Else
opt←⊃args
:EndIf
:If val≡⎕NULL
r←'$(',(fmtSelector sel),').',fn,'(',(quote opt),');'
:Else
r←'$(',(fmtSelector sel),').',fn,'(',(quote opt),',',(fmtData val),');'
:EndIf
∇
∇ r←{val}(fn JQueryOpt sel)opt
:If 0=⎕NC'val'
r←'$(',(fmtSelector sel),').',fn,'("option",',(quote opt),');'
:Else
r←'$(',(fmtSelector sel),').',fn,'("option",',(quote opt),',',(fmtData val),');'
:EndIf
∇
:Class StorageObject
⍝ !!!Prototype!!!
∇ r←{what}Set(type value);name;w;v
:Access public shared
⍝ value may be
:Access public shared
r←''
:If 9.1=⎕NC⊂'value' ⍝ namespace?
:For name :In value.⎕NL-2
r,←formatSet(type name(value⍎name))
:EndFor
:Else
value←eis value
:If 2=⎕NC'what' ⍝ value is list of name value pairs
what←eis what
:Else
(what value)←↓[1]((⌊0.5×⍴value),2)⍴value
:EndIf
:For (w v) :InEach (what value)
r,←formatSet(type w v)
:EndFor
:EndIf
∇
∇ r←formatSet(type what value)
:Access public shared
r←type,'.setItem("',what,'",JSON.stringify(',(#.JSON.fromAPL value),');'
∇
∇ r←type Remove what;w;ww
:Access public shared
what←eis what
r←''
:For w :In what
:If ' '∊w←#.Strings.deb w
:For ww :In ' '#.Utils.penclose w
r,←type,'.removeItem("',w,'");'
:EndFor
:Else
r,←type,'.removeItem("',w,'");'
:EndIf
:EndFor
∇
∇ r←type Get what
:Access public shared
r←''
r,←'<input type="hidden" name="',w,'" value="',JSON
∇
:endclass
:class localStorage : StorageObject
∇ r←{what}Set value
:If 0=⎕NC'what'
r←⎕BASE.Set('localStorage'value)
:Else
r←what ⎕BASE.Set('localStorage'value)
:EndIf
∇
∇ r←Remove what
:Access public shared
r←
∇
∇ r←{name}Get what
:Access public shared
∇
:EndClass
:Class sessionStorage
∇ r←{what}Set value
:Access public shared
∇
:endclass
:class sessionStorage
:endclass
:EndNamespace
﻿:Namespace _SF ⍝ Syncfusion
⍝∇:require =\_JQ.dyalog
:section CommonCode
∇ r←ApiInfo
r←{↑⍵∘{6::⍵'' '' ⋄ ⍵(⍺⍎⍵,'.(ApiLevel DocBase)')}¨'e'⍵.⎕NL-9.4}⎕THIS
∇
∇ r←opt(sel Update jqfn)val
⍝ update an option for a widget
r←opt(sel #.JQ.Update jqfn)val
∇
:Class _ejWidget : #._JQ._jqWidget
⍝ generic Syncfusion Enterprise JavaScript object
:Field public Data←''
:Field public WidgetDef←'argument' 'argument'  'argument.model' 'this.element' '.val()'  ⍝ Syncfusion's event model (see _JQ.RenderHandlerCore for details)
∇ make
:Access public
:If 0=⎕NC⊂'Uses' ⋄ Uses←'' ⋄ :EndIf
:If 0∊⍴Uses ⋄ Uses←'Syncfusion' ⋄ :EndIf
:Implements constructor
∇
∇ r←Render
:Access public
AddLocale
JQPars←Options
r←⎕BASE.Render
∇
∇ AddLocale
:If 9=⎕NC'Options'
:AndIf 0≠Options.⎕NC'locale'
:AndIf 9=⎕NC'#.Boot.ms'
:AndIf ~0∊⍴sfFolder←#.Boot.ms.Config.Virtual{(⍺.alias⍳⊂⍵)⊃⍺.path,⊂''}'Syncfusion'
:AndIf #.Files.Exists sfFolder,file←'assets/scripts/i18n/ej.culture.',Options.locale,'.min.js'
Use'⍎/Syncfusion/',file
:EndIf
∇
:EndClass
:endsection
:EndNamespace
﻿:Class ejLocale : #._html.script
⍝ Localization utility for Syncfusion widgets
:field public Locales←''
:field SyncfusionLocalesPath←'/Syncfusion/assets/scripts/cultures/ej.culture.⍵.min.js'
∇ make
:Access public
:Implements constructor
∇
∇ make1 locales
:Access public
:Implements constructor
Locales←locales
∇
∇ r←Render
:Access public
r←''
:If ~0∊⍴Locales
:For locale :In eis Locales
r,←⎕NEW #._.Script(''(SyncfusionLocalesPath{}locale)).Render
:EndFor
:EndIf
∇
:EndClass﻿:Class ejAccordion : #._SF._ejWidget
⍝ Description:: Syncfusion Accordion widget
⍝ Constructor:: [titles [sections]] | [titles_sections]
⍝ titles          - vector of char vectors containing titles to appear on accordion sections
⍝ sections        - vector of vectors containing HTML content for each section
⍝ titles_sections - 2-row matrix of titles [1;] and sections [2;] as above
⍝                   or vector of 2 element title/section vectors
⍝ Public Fields::
⍝ Titles          - vector of char vectors containing titles to appear on accordion sections
⍝ Sections        - vector of vectors containing HTML content for each section
⍝ IsURL           - scalar or vector indicating if a section is a URL
⍝ Examples::
⍝ ejAccordion 'Title1' 'Title2'
⍝ ejAccordion ('Title1' 'Title2')('Section1' 'Section2')
⍝ ejAccordion 2 2⍴'Title1' 'Section1' 'Title2' 'Section2'
:field public shared readonly DocBase←'hthttps://help.syncfusion.com/js/ejAccordion/overview'
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejAccordion.html'
:field public shared readonly IntEvt←'activate'  'ajaxBeforeLoad'  'ajaxError'  'ajaxLoad'  'ajaxSuccess'  'beforeActivate'  'beforeInactivate'  'create'  'destroy'  'inActivate'
:field public shared readonly ApiLevel←3
:Field public Titles←0⍴⊂''
:Field public Sections←0⍴⊂''
:Field public IsURL←⍬
∇ make
:Access public
JQueryFn←Uses←'ejAccordion'
:Implements constructor
InternalEvents←IntEvt
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejAccordion'
:Implements constructor
args←eis args
:If 1=⍴args
:If 2=⍴⍴1⊃args ⍝ matrix arg?
(Titles Sections)←↓[2]1⊃args
:Else ⍝ single title
Titles←args
:EndIf
:Else
(Titles Sections)←eis¨2↑args
:EndIf
IsURL←(⊃⍴Titles)⍴0
InternalEvents←IntEvt
∇
∇ {title}AddSection content
:Access public
:If 0=⎕NC'title' ⋄ title←'Section ',⍕1+⍴Titles ⋄ :EndIf
Titles,←⊂title
Sections,←⊂content
IsURL←(⊃⍴Titles)↑IsURL
∇
∇ r←Render;sections;n;ids;i;t;section;u
:Access public
SetId
:If ~0∊⍴Titles
sections←(n←⊃⍴Titles)↑Sections
IsURL←n↑IsURL
ids←('#',id,'_section_')∘,∘⍕¨⍳⍴Titles
:For i t section u :InEach ids Titles sections IsURL
(Container.Add #._html.h3).Add #._html.a t('href=',u{~⍺:'"#"' ⋄ '"',⍵,'"'}section)
i Container.Add #._html.div((~u)/section)
:EndFor
:EndIf
r←⎕BASE.Render
∇
:EndClass
﻿:class ejAutocomplete : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/autocomplete/overview'
:field public shared readonly ApiLevel←1
∇ make
:Access public
JQueryFn←Uses←'ejAutocomplete'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←{⍵↑⍨1-(⌽⍵)⍳'.'}⍕⊃⊃⎕CLASS ⎕THIS
:Implements constructor :base args
∇
:EndClass
﻿:class ejBarcode : #._SF._ejWidget
⍝ Description:: Syncfusion Barcode widget
⍝ Constructor:: [text [symbology]]
⍝ text          - text to represent in barcode format
⍝ symbology     - barcode symbology default 'code128A' (see http://help.syncfusion.com/js/api/global#members:symbologytype)
⍝ Examples::
⍝ ejBarcode 'Dyalog' 'code93'
:field public shared readonly DocBase←'https://help.syncfusion.com/js/barcode/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejBarcode.html'
:field public shared readonly IntEvt←,⊂'load'
∇ make
:Access public
JQueryFn←Uses←'ejBarcode'
:Implements constructor
'text symbologyType'Set'' 'code128A'
InternalEvents←IntEvt
∇
∇ make1 args;type;text;sel
:Access public
JQueryFn←Uses←'ejBarcode'
args←eis args
(text type)←args defaultArgs'' 'code128A'
:Implements constructor :base
'text symbologyType'Set text type
InternalEvents←IntEvt
∇
:EndClass
﻿:class ejBulletGraph : #._SF._ejWidget
⍝ Description:: Syncfusion Bullet Graph widget
⍝ Constructor:: [data]
⍝ data - interpretation depends on the shape of data
⍝        1=⍴,data - the value to be rendered on the graph
⍝        2=⍴data  - the value and the comparativeMeasure
⍝        matrix - [;1] value (aka featureMeasure)
⍝                 [;2] comparativeMeasure (optional)
⍝                 [;3] category (optional)
⍝ Public Fields::
⍝ Data - interpretation depends on the shape of data
⍝        1=⍴,Data - the value to be rendered on the graph
⍝        2=⍴Data  - the value and the comparativeMeasure
⍝        2=≢⍴Data - [;1] value (aka featureMeasure)
⍝                   [;2] comparativeMeasure (optional)
⍝                   [;3] category (optional)
:field public shared readonly DocBase←'https://help.syncfusion.com/js/bulletgraph/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejBulletGraph.html'
:field IntEvt←'drawCaption' 'drawCategory' 'drawComparativeMeasureSymbol' 'drawFeatureMeasureBar' 'drawIndicator' 'drawLabels' 'drawQualitativeRanges' 'load'
:field public Data←⍬
∇ make
:Access public
JQueryFn←Uses←'ejBulletGraph'
:Implements constructor
InternalEvents←IntEvt
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejBulletGraph'
:Implements constructor
InternalEvents←IntEvt
Data←(⊃⍣((1<|≡args)>2=⊃⍴⍴args))args
∇
∇ r←Render;src;flds
:Access public
SetId
r←''
:If ~0∊⍴Data
src←id,'_data'
'fields.dataSource'Set⊂,src
:If 2>⍴⍴Data ⋄ Data←⍉⍪Data ⋄ :EndIf
flds←(2⊃⍴Data)↑'featureMeasures' 'comparativeMeasure' 'category'
{('fields.',⍵)Set ⍵}¨flds
r←(⎕NEW #._DC.Script('var ',src,' = ',flds #.JSON.TableToJSON Data)).Render
'quantitativeScaleSettings.maximum'SetIfNotSet⌈/10,Data[;1]
'quantitativeScaleSettings.minimum'SetIfNotSet⌊/0,Data[;1]
:EndIf
r,←⎕BASE.Render
∇
:EndClass
﻿:class ejButton : #._SF._ejWidget
⍝ Description:: Syncfusion Button widget
⍝ Constructor:: [text [type]]
⍝ text - the text/content to appear on the button
⍝ type - one of 'submit' (default), 'reset', or 'button'
⍝ Public Fields::
⍝ Text - the text/content to appear on the button
:field public shared readonly DocBase←'https://help.syncfusion.com/js/button/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejButtonHelp.html'
:field public shared readonly IntEvt←'click' 'create' 'destroy'
:field public Text←''  ⍝ text on the button
∇ make
:Access public
JQueryFn←Uses←'ejButton'
ContainerTag←'button'
:Implements constructor
InternalEvents←IntEvt
∇
∇ make1 args;type;text
:Access public
args←eis args
JQueryFn←Uses←'ejButton'
ContainerTag←'button'
(text type)←args defaultArgs'' ''
Text←text
:Implements constructor
:If ~0∊⍴type
'type'Option type
:EndIf
InternalEvents←IntEvt
∇
∇ r←Render;type;copy
:Access public
SetId
:If ~0∊⍴type←GetOption'type'
:Select ¯4↑type ⍝ probably match any of 'Button' 'button' 'reset' 'Reset' 'Submit' 'submit'
:Case 'tton'
ContainerTag←'button type="button"'
:Case 'eset'
ContainerTag←'button type="reset"'
:Case 'bmit'
ContainerTag←'button type="submit"'
:EndSelect
:EndIf
Container.Add(⊂Text)
r←⎕BASE.Render
∇
:EndClass﻿:class ejCaptcha : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/captcha/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejCaptcha.html'
∇ make
:Access public
JQueryFn←Uses←'ejCaptcha'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejCaptcha'
:Implements constructor :base args
∇
:EndClass
﻿:class ejChart : #._SF._ejWidget
⍝ Description:: Syncfusion Chart widget
⍝ Constructor:: [data]
⍝ data    - matrix of data to plot [1;] is the column names [2-;] the data
⍝ Public Fields:: None
⍝ Public Methods::
⍝ Redraw (callback function) - redraw the chart
⍝ Notes::
⍝ ejChart can plot several series of data, all data for each series is stored in the series option setting
:field public shared readonly DocBase←'https://docs.syncfusion.com/js/chart/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejChart.html'
:field public shared readonly IntEvt← 'animationComplete' 'axesLabelRendering' 'axesLabelsInitialize' 'axesRangeCalculate' 'axesTitleRendering' 'chartAreaBoundsCalculate' 'create' 'destroy' 'displayTextRendering' 'legendBoundsCalculate' 'legendItemClick' 'legendItemMouseMove' 'legendItemRendering' 'load' 'pointRegionClick' 'pointRegionMouseMove' 'preRender' 'seriesRendering' 'symbolRendering' 'titleRendering' 'toolTipInitialize' 'trackAxisToolTip' 'trackToolTip'
∇ make
:Access public
JQueryFn←Uses←'ejChart'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejChart'
:Implements constructor
'series[1].points'Set #.JSON.fromTable args ⍝ set the first series' points
∇
∇ r←Render
:Access public
r←⎕BASE.Render
∇
∇ r←Redraw
:Access public
SetId ⋄ r←Execute'$("#',id,'").data("',JQueryFn,'").redraw();'
∇
:EndClass﻿:class ejCheckBox : #._SF._ejWidget
⍝ Description:: Syncfusion Checkbox widget
⍝ Constructor:: [checked [label [labelpos [tristate]]]]
⍝ checked  - integer denoting if the box is checked or not (1=yes, 0=no, ¯1=indeterminate)
⍝ label    - string of text to appear next to the button
⍝ labelpos - position of label relative to the checkbox ('left' (default) or 'right')
⍝ tristate - Boolean indicating whether the checkbox allows 3 states ('indeterminate' 'false' (default) or 'true')
⍝ Public Fields::
⍝ Label    - string of text to appear next to the checkbox
⍝ LabelPos - position of label relative to the checkbox ('left' (default) or 'right')
⍝ TriState - Boolean indicating whether the checkbox allows 3 states ('indeterminate' 'false' (default) or 'true')
⍝ Notes::
⍝ If Checked is ¯1, TriState is automatically set to _true
⍝
⍝ Examples::
⍝ ejCheckBox                              ⍝ plain checkbox
⍝ ejCheckBox ¯1                           ⍝ a tri-state checkbox set to indeterminate
⍝ ejCheckBox 0 'Married'                  ⍝ a checkbox with label 'Married' to the left
⍝ ejCheckBox 1 'with children' 'right'    ⍝ a checkbox with label 'with children' to the right
:field public shared readonly DocBase←'https://help.syncfusion.com/js/checkbox/overview'
:field public shared readonly ApiLevel←2
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejCheckBox.html'
:field public shared readonly IntEvt←'beforeChange' 'change' 'create' 'destroy'
:field public Label←''
:field public LabelPos←'left'  ⍝ valid are 'left' 'right'
:field public Checked←0        ⍝ 1=yes, 0=no, ¯1=indeterminate
:field public TriState←0
∇ setup
JQueryFn←Uses←'ejCheckBox'
ContainerTag←'input'
Container.type←'checkbox'
InternalEvents←IntEvt
∇
∇ make
:Access public
:Implements constructor
setup
∇
∇ make1 args
:Access public
:Implements constructor
setup
:If 0=≡args ⋄ args←,args ⋄ :EndIf
(Checked Label LabelPos TriState)←args defaultArgs Checked Label LabelPos TriState
∇
∇ r←Render
:Access public
SetId
Container.NoEndTag←1
:If TriState∨Checked=¯1
'enableTriState'Set _true
'checkState'Set(2+Checked)⊃'indeterminate' 'uncheck' 'check'
:EndIf
:If Checked∊0 1
'checked'Set(Checked+1)⊃_false _true
:EndIf
r←⎕BASE.Render
:If Label≢''
r←r((LabelPos≡'right'){⍺⍺:⍺,⍵ ⋄ ⍵,⍺})(⎕NEW #._html.label(Label(⊂'for'id))).Render
:EndIf
∇
:EndClass﻿:class ejCircularGauge : #._SF._ejWidget
⍝ Description:: Syncfusion Circular Gauge widget
⍝ Constructor:: [pointers]
⍝ data - interpretation depends on the shape of data
⍝        0 1∨.=⍴⍴data  - the value(s) to be rendered on the gauge - each has its own pointer
⍝        matrix - [1;] pointer member names (see Syncfusion documentation)
⍝                 [2-;] values for the pointer members, one row per pointer
⍝ Public Fields::
⍝ Data - interpretation depends on the shape of data
⍝        0 1∨.=⍴⍴data  - the value(s) to be rendered on the gauge - each has its own pointer
⍝        matrix - [1;] pointer member names (see Syncfusion documentation)
⍝                 [2-;] values for the pointer members, one row per pointer
:field public shared readonly DocBase←'https://help.syncfusion.com/js/circulargauge/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejCircularGauge.html'
:field public shared readonly IntEvt←'drawCustomLabel' 'drawIndicators' 'drawLabels' 'drawPointerCap' 'drawPointers' 'drawRange' 'drawTicks' 'load' 'mouseClick' 'mouseClickMove' 'mouseClickUp' 'renderComplete'
:field public Data←⍬
∇ make
:Access public
JQueryFn←Uses←'ejCircularGauge'
:Implements constructor
InternalEvents←IntEvt
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejCircularGauge'
:Implements constructor
InternalEvents←IntEvt
Data←args
∇
∇ r←Render;pointers
:Access public
SetId
r←''
:If ~0∊⍴Data
:If 0 1∊⍨⍴⍴Data
pointers←(⊂'value')⍪⍪Data
:Else
pointers←Data
:EndIf
'scales[1].pointers'Set #.JSON.fromTable pointers
:EndIf
r,←⎕BASE.Render
∇
:EndClass﻿:Class ejColorPicker : #._SF._ejWidget
⍝ Description:: Syncfusion ColorPicker widget
⍝ Constructor:: [color [palette]]
⍝ color      -  initial color
⍝ palette    -  (default 'yyyy/MM/dd')
⍝ Public Fields::
⍝ Color    - string of text to appear next to the input field
⍝ Palette  - position of label relative to the date input field ('left' (default) or 'right')
:Field Public Shared Readonly DocBase←'https://help.syncfusion.com/js/colorpicker/overview'
:Field Public Shared ReadOnly ApiLevel←3
:Field Public Shared Readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejColorPicker.html'
:Field public Shared ReadOnly IntEvt←'change' 'close' 'create' 'destroy' 'open' 'select'
:field public Color←''
:field public Palette←''
∇ make0
:Access Public
JQueryFn←Uses←'ejColorPicker'
:Implements Constructor
InternalEvents←IntEvt
∇
∇ make args
⍝ Selector [value [palette]]
:Access Public
JQueryFn←Uses←'ejColorPicker'
:Implements Constructor
(Color Palette)←args defaultArgs'' ''
InternalEvents←IntEvt
∇
∇ r←Render
⍝ If inline, container should be a div, else it should be a text input
:Access Public
:If 'true'≢⍕⎕THIS.GetOption'displayInline'
ContainerTag←'input'
Container.NoEndTag←1
Container.type←'text'
:EndIf
('value' 'palette')Set Color Palette
r←⎕BASE.Render
∇
:EndClass﻿:class ejCurrencyTextbox : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/textboxes/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejCurrencyTextbox.html'
∇ make
:Access public
JQueryFn←Uses←'ejCurrencyTextbox'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejCurrencyTextbox'
:Implements constructor :base args
∇
:EndClass
﻿:Class ejDatePicker : #._SF._ejWidget
⍝ Description:: Syncfusion DatePicker widget
⍝ Constructor:: [date [format]]
⍝ date          -  date in JavaScript format (see: http://www.w3schools.com/js/js_dates.asp)  (default 3↑⎕TS)
⍝ format        -  (default 'yyyy/MM/dd')
⍝ Public Fields::
⍝ Label    - string of text to appear next to the input field
⍝ LabelPos - position of label relative to the date input field ('left' (default) or 'right')
⍝ Examples::
⍝ ejDatePicker
⍝ ejDatePicker '27-Nov-1966'
⍝ ejDatePicker (2000 1 1)('dd-MMM-yyyy')
:Field Public Shared ReadOnly DocBase←'https://help.syncfusion.com/js/datepicker/overview'
:Field Public Shared ReadOnly ApiLevel←3
:Field Public Shared ReadOnly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejDatePicker.html'
:Field Public Shared ReadOnly IntEvt←'beforeDateCreate'  'change'  'close'  'create'  'destroy'  'focusIn'  'focusOut'  'open'  'select'
:field public Label←''
:field public LabelPos←'left'  ⍝ valid are 'left' 'right'
∇ make0
:Access Public
JQueryFn←Uses←'ejDatePicker'
ContainerTag←'input'
:Implements Constructor
Container.type←'text'
InternalEvents←IntEvt
∇
∇ make args;val;fmt
⍝ Selector [value [dateFormat]]
:Access Public
JQueryFn←Uses←'ejDatePicker'
ContainerTag←'input'
:Implements Constructor
args←(⊂⍣(3=10|⎕DR args))args
(val fmt)←args defaultArgs(3↑⎕TS)'yyyy/MM/dd'
('value' 'dateFormat')Set((⊂'new Date("',(⍕val),'")')fmt)
Container.type←'text'
InternalEvents←IntEvt
∇
∇ r←Render
:Access public
Container.NoEndTag←1
SetId
WidgetDef[5]←⊂'.ejDatePicker("option","value")'  ⍝ NB!! because ejDatePicker's input element is different from the container holding the slider, we use an alternate syntax to retrieve the value
r←⎕BASE.Render
:If Label≢''
r←r((LabelPos≡'right'){⍺⍺:⍺,⍵ ⋄ ⍵,⍺})(⎕NEW #._html.label(Label('for=',id))).Render
:EndIf
∇
:EndClass
﻿:Class ejDateTimePicker : #._SF._ejWidget
⍝ Description:: Syncfusion DateTimePicker widget
⍝ Constructor:: [datetime [format]]
⍝ datetime      -  datetime in either JavaScript format or n↑⎕TS (see: http://www.w3schools.com/js/js_dates.asp)  (default 6↑⎕TS)
⍝ format        -  datetime format, a combination of a date format and a time format (default 'dd-MMM-yyyy hh:mm:ss')
⍝ Public Fields::
⍝ DateTime      - Datetime in either JavaScript format or n↑⎕TS
⍝ Format        - Datetime format, a combination of a date format and a time format (default 'dd-MMM-yyyy hh:mm:ss')
⍝ Examples::
⍝ ejDateTimePicker
⍝ ejDateTimePicker '17:53:59 11/27/66 (GMT-5)'
⍝ ejDateTimePicker (1999 12 31 23 59 59)('dd-MMM-yyyy hh:mm:ss')
:Field Public Shared Readonly DocBase←'https://help.syncfusion.com/js/datetimepicker/overview'
:Field Public Shared Readonly ApiLevel←2
:Field Public Shared Readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejDateTimePicker.html'
:Field Public Shared ReadOnly IntEvt←'change'  'close'  'create'  'destroy'  'focusIn'  'focusOut'  'open'
:field public DateTime←''
:field public Format←'dd-MMM-yyyy hh:mm:ss'
∇ make0
:Access Public
JQueryFn←Uses←'ejDateTimePicker'
ContainerTag←'input'
:Implements Constructor
Container.type←'text'
InternalEvents←IntEvt
DateTime←6↑⎕TS
∇
∇ make args;val;fmt
:Access Public
JQueryFn←Uses←'ejDateTimePicker'
ContainerTag←'input'
:Implements Constructor
(DateTime Format)←args defaultArgs(6↑⎕TS)'dd-MMM-yyyy hh:mm:ss'
Container.type←'text'
InternalEvents←IntEvt
∇
∇ r←Render;dt
:Access public
Container.NoEndTag←1
SetId
:If 0∊⍴DateTime ⋄ DateTime←6↑⎕TS ⋄ :EndIf
:If (0 2∊⍨10|⎕DR DateTime) ⋄ dt←'"',DateTime,'"'
:Else ⋄ dt←1↓∊','∘,∘⍕¨DateTime-(⍴,DateTime)↑0 1 ⍝ adjust for JavaScript having 0-origin months (Jan-Dec = 0-11)
:EndIf
('value' 'dateTimeFormat')Set((⊂'new Date(',dt,')')Format)
r←⎕BASE.Render
∇
:EndClass
﻿:class ejDiagram : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/diagram/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejDiagram.html'
∇ make
:Access public
JQueryFn←Uses←'ejDiagram'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejDiagram'
:Implements constructor :base args
∇
:EndClass
﻿:class ejDialog : #._SF._ejWidget
⍝ Description:: Syncfusion Digital Gauge widget
⍝ Constructor:: [selector [title [modal]]]
⍝ selector   - selector for the element that contains the content for the dialog
⍝ title      - title for the dialog
⍝ modal      - Boolean or _true/_false indicating whether the dialog is modal
⍝
⍝ Public Fields::
⍝ Selector   - selector for the element that contains the content for the dialog
⍝ Title      - title for the dialog
⍝ Modal      - Boolean or _true/_false indicating whether the dialog is modal
⍝ Size       - width [height] for the dialog.  If specifying only height, use ⍬ for width
⍝ Buttons    - vector of character vectors of indicating the buttons that will appear in the dialog
⍝              choices are: 'close' 'maximize' 'minimize' 'collapsible' 'pin' (we also allow 'minimise' and 'maximise')
⍝              default is 'close'
⍝ Resize     - Boolean or _true/_false indicating whether the dialog can be resized
:field public shared readonly DocBase←'https://help.syncfusion.com/js/dialog/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejDialog.html'
:field public shared readonly IntEvt←'beforeOpen' 'ajaxError' 'ajaxSuccess' 'beforeClose' 'Close' 'contentLoad' 'create' 'destroy' 'drag' 'dragStart' 'dragStop' 'open' 'resize' 'resizeStart' 'resizeStop'
:field Public Modal←⍬
:field Public Size←⍬
:field Public Buttons←'close'
:field Public Resize←⍬
:field Public Title←''
∇ make
:Access public
JQueryFn←Uses←'ejDialog'
:Implements constructor
InternalEvents←IntEvt
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejDialog'
:Implements constructor
Selector Title Modal←args defaultArgs Selector Title Modal
InternalEvents←IntEvt
∇
∇ r←Render;wid;hgt
:Access public
:If ~0∊⍴Selector
:If ~0∊⍴Modal ⋄ 'enableModal'Set(1+isTrue Modal)⊃_false _true ⋄ :EndIf
:If ~0∊⍴Resize ⋄ 'enableResize'Set(1+isTrue Resize)⊃_false _true ⋄ :EndIf
:If ~0∊⍴Size
(wid hgt)←⊃∘1∘↑¨2↑Size
:If wid≠0 ⋄ 'width'Set wid ⋄ :EndIf
:If hgt≠0 ⋄ 'height'Set hgt ⋄ :EndIf
:EndIf
:If ~0∊⍴Buttons
'actionButtons'Set('close' 'minim' 'maxim' 'colla' 'pin  '∊5↑¨eis Buttons)/'close' 'minimize' 'maximize' 'collapsible' 'pin'
:EndIf
:If ~0∊⍴Title
'title'Set Title
:EndIf
:If ~0∊⍴GetOption'title'
'showHeader'SetIfNotSet _true
:EndIf
:EndIf
r←⎕BASE.Render
∇
:EndClass﻿:class ejDigitalGauge : #._SF._ejWidget
⍝ Description:: Syncfusion Digital Gauge widget
⍝ Constructor:: [text [typeface [spacing [seglength [segwidth]]]]]
⍝ text       - text to render in the digital gauge
⍝ typeface   - typeface to use - choices are:
⍝             '7' - 7-segment
⍝             '14' - 14-segment
⍝             '16' - 16-segment
⍝             '88dot' - 8×8 dot matrix with round dots
⍝             '88square' - 8×8 dot matrix with square dots
⍝ spacing    - spacing between characters
⍝ seglength  - numeric segment length (default based on typeface)
⍝ segwidth   - numeric segment width (default based on typeface)
⍝
⍝ Public Fields::
⍝ Text - text to render in the digital gauge
⍝ Typeface   - typeface to use - choices are:
⍝             '7' - 7-segment
⍝             '14' - 14-segment
⍝             '16' - 16-segment
⍝             '88dot' - 8×8 dot matrix with round dots
⍝             '88square' - 8×8 dot matrix with square dots
⍝ Spacing    - spacing between characters (default 4)
⍝ SegLength  - numeric segment length (default based on typeface)
⍝ SegWidth   - numeric segment width (default based on typeface)
:field public shared readonly DocBase←'https://help.syncfusion.com/js/digitalgauge/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejDigitalGauge.html'
:field public shared readonly IntEvt←'init' 'itemRendering' 'load' 'renderComplete'
:field public Text←''
:field public Typeface←'16'
:field public Spacing←4
:field public SegLength←⍬
:field public SegWidth←⍬
∇ make
:Access public
JQueryFn←Uses←'ejDigitalGauge'
:Implements constructor
InternalEvents←IntEvt
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejDigitalGauge'
:Implements constructor
InternalEvents←IntEvt
Text Typeface Spacing SegLength SegWidth←args defaultArgs Text Typeface Spacing SegLength SegWidth
∇
∇ r←Render;typeface;ind;text
:Access public
:If ~0∊⍴Text ⍝ if the user doesn't specify Text, then we assume he's setting everything himself manually
'items[1].value'Set text←⍕,Text
ind←((,'7')'14' '16' '88dot' '88square')⍳⊂,Typeface
:If 0∊⍴SegLength
SegLength←ind⊃10 10 10 3 3 10
:EndIf
:If 0∊⍴SegWidth
SegWidth←ind⊃1 1 1 3 3 1
:EndIf
'items[1].characterSettings.type'SetIfNotSet ind⊃'sevensegment' 'fourteensegment' 'sixteensegment' 'eightcrosseightdotmatrix' 'eightcrosseightsquarematrix' 'sixteensegment'
'items[1].characterSettings.spacing'SetIfNotSet Spacing
'items[1].segmentSettings.count'SetIfNotSet⊃⍴,text
'items[1].segmentSettings.length'SetIfNotSet SegLength
'items[1].segmentSettings.width'SetIfNotSet SegWidth
:EndIf
r←⎕BASE.Render
∇
:EndClass﻿:class ejDraggable : #._SF._ejWidget
⍝ Description:: Syncfusion Draggable widget
⍝ Constructor:: [Selector]
⍝ Selector - the jQuery/CSS selector to which to apply draggable interaction
⍝ Public Fields::
⍝ Selector - the jQuery/CSS selector to which to apply draggable interaction
:field public shared readonly DocBase←'https://help.syncfusion.com/js/draggable/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejDraggable.html'
:field public shared readonly IntEvt←'destroy' 'drag' 'dragStart' 'dragStop' 'helper'
∇ Make
:Access public
:Implements constructor
JQueryFn←'ejDraggable'
InternalEvents←IntEvt
∇
∇ Make1 arg
:Access public
:Implements constructor
JQueryFn←'ejDraggable'
Selector←arg
InternalEvents←IntEvt
∇
∇ r←Render
:Access public
'helper'SetIfNotSet⊂'function(evt){return $(evt.element);}'
r←⎕BASE.Render
∇
:EndClass
﻿:class ejDropDownList : #._SF._ejWidget
⍝ Description:: Syncfusion DropDownList widget
⍝ Constructor:: [items [selected]]
⍝ items           - vector of char vectors
⍝                   or matrix of field definitions with field types as the first row
⍝ selected        - integer or Boolean vector indicating which items are selected
⍝ Public Fields::
⍝ Items           - vector of char vectors
⍝                   or matrix of field definitions
⍝ Selected        - integer or Boolean vector indicating which items are selected
⍝ Examples::
⍝ ejListBox
⍝ ejListBox ('Item1' 'Item3' 'Item3')
:field public shared readonly DocBase←'https://help.syncfusion.com/js/dropdownlist/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejDropDownList.html'
:field public shared readonly IntEvt←'beforePopupHide' 'beforePopupShown' 'change' 'checkChange' 'create' 'destroy' 'popupHide' 'popupShown' 'select'
:field public Items
⍝ Items can be a vector of character vectors, or a matrix with field names
⍝ in the first row. SubItems *must* be a matrix with field names.
⍝ Field names to be selected from the following, for more info see
⍝ http://helpjs.syncfusion.com/js/api/ejlistbox#members:fields
⍝ category
⍝ htmlAttributes
⍝ id
⍝ imageAttributes
⍝ imageUrl
⍝ selected
⍝ spriteCssClass
⍝ tableName
⍝ text
⍝ value
∇ make
:Access public
JQueryFn←Uses←'ejDropDownList'
:Implements constructor
InternalEvents←IntEvt
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejDropDownList'
:Implements constructor :base args
InternalEvents←IntEvt
∇
:EndClass﻿:class ejDroppable : #._SF._ejWidget
⍝ Description:: Syncfusion Droppable widget
⍝ Constructor:: [Selector]
⍝ Selector - the jQuery/CSS selector to which to apply droppable interaction
⍝ Public Fields::
⍝ Selector - the jQuery/CSS selector to which to apply droppable interaction
:field public shared readonly DocBase←'https://help.syncfusion.com/js/droppable/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejDroppable.html'
:field public shared readonly IntEvt←'drop' 'out' 'over'
∇ make
:Access public
JQueryFn←Uses←'ejDroppable'
:Implements constructor
InternalEvents←IntEvt
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejDroppable'
:Implements constructor
Selector←args
InternalEvents←IntEvt
∇
:EndClass﻿:class ejGantt : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/gantt/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejGantt.html'
∇ make
:Access public
JQueryFn←Uses←'ejGantt'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejGantt'
:Implements constructor :base args
∇
:EndClass
﻿:class ejGrid : #._SF._ejWidget
:Field public shared readonly DocBase←'https://help.syncfusion.com/js/grid/overview'
:Field public shared readonly ApiLevel←3
:Field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejGrid.html'
:Field public shared readonly IntEvt←'actionBegin' 'actionComplete' 'actionFailure' 'batchAdd' 'batchDelete' 'beforeBatchAdd' 'beforeBatchDelete' 'beforeBatchSave' 'beginEdit' 'cellEdit' 'cellSave' 'cellSelected' 'cellSelecting' 'columnDrag' 'columnDragStart' 'columnDrop' 'columnSelected' 'columnSelecting' 'contextClick' 'contextOpen' 'create' 'dataBound' 'destroy' 'detailsCollapse' 'detailsDataBound' 'detailsExpand' 'endAdd' 'endDelete' 'endEdit' 'load' 'mergeCellInfo' 'queryCellInfo' 'recordClick' 'recordDoubleClick' 'resized' 'resizeEnd' 'resizeStart' 'rightClick' 'rowDataBound' 'rowSelected' 'rowSelecting' 'templateRefresh' 'toolBarClick'
:Field Public Values←0 0⍴⊂''
:Field Public Columns←⍬      ⍝ Vector of namespaces using JSON names
:Field Public ColNames←⍬     ⍝ JSON: field
:Field Public ColTitles←⍬    ⍝       headerText
:Field Public CellWidths←⍬   ⍝       width
:Field Public CellFormats←⍬  ⍝       format
:Field Public CellAlign←⍬    ⍝       textAlign
script←{⎕NEW #._DC.Script ⍵}
∇ make
:Access public
JQueryFn←Uses←'ejGrid'
:Implements Constructor
InternalEvents←IntEvt
∇
∇ makec args;x;values;cols;widths
:Access public
args←eis args
JQueryFn←Uses←'ejGrid'
:Implements Constructor
InternalEvents←IntEvt
(Values ColTitles CellWidths)←args defaultArgs(0 0⍴⍬)⍬ ⍬
:If 0≠⍴ColTitles
:If 326=⎕DR⊃ColTitles ⋄ Columns←ColTitles ⋄ ColTitles←⍬
:Else ⋄ ColNames←ColTitles~¨' '
:EndIf
:EndIf
∇
∇ r←Render;fields;src;rows;cols;coldefs;colfields;i
:Access public
SetId
r←''
(rows cols)←⍴Values
:If 0=cols
r←'[grid with zero columns]'
:Else
:If 0≠⍴Columns ⋄ coldefs←Columns ⋄ ColNames←Columns.field
:Else ⍝ Put Columns together from individual properties
coldefs←(cols,0)⍴⊂'' ⋄ colfields←⍬
:If 0≠⍴ColNames ⋄ coldefs,←ColNames ⋄ colfields,←⊂'field' ⋄ :EndIf
:If 0≠⍴ColTitles ⋄ coldefs,←ColTitles ⋄ colfields,←⊂'headerText' ⋄ :EndIf
:If 0≠⍴,CellWidths ⋄ coldefs,←cols⍴CellWidths ⋄ colfields,←⊂'width' ⋄ :EndIf
:If 0≠⍴CellFormats ⋄ coldefs,←CellFormats ⋄ colfields,←⊂'format' ⋄ :EndIf
:If 0≠⍴CellAlign ⋄ coldefs,←CellAlign ⋄ colfields,←⊂'textAlign' ⋄ :EndIf
coldefs←colfields #.JSON.fromTable coldefs
:If 0≠⍴CellFormats ⋄ :AndIf 0≠⍴i←(0=⊃∘⍴¨CellFormats)/⍳⍴CellFormats
coldefs[i].⎕EX⊂'format' ⍝ Remove empty formats
:EndIf
:EndIf
coldefs←#.JSON.fromAPL coldefs
'columns'Set⊂,coldefs
src←id,'_data'
'dataSource'Set⊂,src
r←(⎕NEW #._DC.Script('var ',src,' = ',#.JSON.fromAPL ColNames #.JSON.fromTable Values)).Render
:EndIf
r,←⎕BASE.Render
∇
∇ r←Refresh items;src;script;fields;ri;rI
:Access public
r←''
items←eis items
:If 0∊⍴src←GetOption'dataSource'
r,←Selector Replace∊{'<li>',⍵,'</li>'}¨Items←items
r,←Execute'$("',Selector,'").',JQueryFn,'({dataSource:',src,'});' ⍝ Do we really need this when 0∊⍴src?
:Else
:If (1=ri←⍴⍴items)∧(2=rI←⍴⍴Items)
:AndIf 1=2⊃⍴Items ⋄ ri←⍴⍴items←⍪items ⋄ :EndIf
:If 2∧.=ri,rI
:AndIf (2⊃⍴items)=2⊃⍴Items
⍝src←('⍎'=⊃src)↓src            ⍝ We now use ⊂'string' to avoid quotes
Items←(fields←Items[1;])⍪items
r,←Selector Replace''
script←';',src,' = ',#.JSON.fromAPL fields #.JSON.fromTable 1↓Items
script,←';$("',Selector,'").',JQueryFn,'({dataSource:',src,'});'
r,←Execute script
:EndIf
:EndIf
∇
∇ r←name getModel subsel;model
⍝ Passes the Syncfusion data model back as a variable called 'model' as input to a callback
⍝ Usage:     aButton.On 'click' 'onButtonClick' ('model' instance.getModel '')
:Access Public
SetId ⋄ model←'model',(0≠⍴subsel)/'.',subsel ⍝ "model" or "model.subsel"
r←(name'eval'('JSON.stringify($("#',id,'").ejGrid("',model,'"))'))
∇
:EndClass
﻿:class ejLinearGauge : #._SF._ejWidget
⍝ Description:: Syncfusion Linear Gauge widget
⍝ Constructor:: [value [min [max]]]
⍝ value - value to display on the gauge
⍝ min   - minimum value on the gauge's scale
⍝ max   - maximum value on the gauge's scale
⍝ Public Fields::
⍝ Value - value to display on the gauge
⍝ Min   - minimum value on the gauge's scale
⍝ Max   - maximum value on the gauge's scale
:field public shared readonly DocBase←'https://help.syncfusion.com/js/lineargauge/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejLinearGauge.html'
:field public shared readonly IntEvt←'drawBarPointers' 'drawCustomLabel' 'drawIndicators' 'drawLabels' 'drawMarkerPointers' 'drawRange' 'drawTicks' 'init' 'load' 'mouseClick' 'mouseClickMove' 'mouseClickUp' 'renderComplete'
:field public Value←⍬
:field public Min←⍬
:field public Max←⍬
∇ make
:Access public
JQueryFn←Uses←'ejLinearGauge'
:Implements constructor
InternalEvents←IntEvt
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejLinearGauge'
:Implements constructor
InternalEvents←IntEvt
(Value Min Max)←args defaultArgs Value Min Max
∇
∇ r←Render;pointers;member;value
:Access public
SetId
r←''
:For member value :In ('markerPointers[1].value'Value)('minimum'Min)('maximum'Max)
:If ~0∊⍴value
('scales[1].',member)Set value
:EndIf
:EndFor
r,←⎕BASE.Render
∇
:EndClass﻿:Class ejListBox : #._SF._ejWidget
⍝ Description:: Syncfusion ListBox widget
⍝ Constructor:: [items [selected]]
⍝ items           - vector of char vectors
⍝                   or matrix of field definitions with field types as the first row
⍝ selected        - integer or Boolean vector indicating which items are selected
⍝ Public Fields::
⍝ Items           - vector of char vectors
⍝                   or matrix of field definitions
⍝ Selected        - integer or Boolean vector indicating which items are selected
⍝ Examples::
⍝ ejListBox
⍝ ejListBox ('Item1' 'Item3' 'Item3')
:Field Public Shared Readonly DocBase←'https://help.syncfusion.com/js/listbox/overview'
:Field Public Shared Readonly ApiLevel←3
:Field Public Shared Readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejListBox.html'
:Field Public Shared Readonly IntEvt←'actionBegin' 'actionSuccess' 'actionComplete' 'actionFailure' 'actionBeforeSuccess' 'change' 'checkChange' 'create' 'destroy' 'focusIn' 'focusOut' 'itemDrag' 'itemDragStart' 'itemDragStop' 'itemDrop' 'select' 'unselect'
:Field Public Items←0⍴⊂''
:Field Public Selected←⍬
:field public Side←0 ⍝ used when part of an ejListManager 1=left, 2=right
⍝ Items can be a vector of character vectors, or a matrix with field names
⍝ in the first row. SubItems *must* be a matrix with field names.
⍝ Field names to be selected from the following, for more info see
⍝ http://helpjs.syncfusion.com/js/api/ejlistbox#members:fields
⍝ value:             not sure what it means to have a value
⍝ parentId:          used to link main and sub-tables (required for cascading)
⍝ category:          the category for data item (if present, will enable grouping)
⍝ sprite:            an image name?
⍝ htmlAttributes:    id, class, styles for the item.
⍝ id:                id for the tag.
⍝ imageAttributes:   height, width, styles and so on.
⍝ imageUrl:          what it says
⍝ selected:          value to be selected initially
⍝ spriteCssClass:    sprite css for the image tag.
⍝ tableName:         table name for tag value or display text while render with remote data.
⍝ text:              content for the tag.
⍝ toolTipText:       tooltip text to be displayed for the data list item.
∇ make
:Access public
JQueryFn←Uses←'ejListBox'
ContainerTag←'ul'
:Implements constructor
InternalEvents←IntEvt
∇
∇ makec args;x
:Access public
:If 2=≡args ⋄ args←,⊂args ⋄ :EndIf
args←eis args
JQueryFn←Uses←'ejListBox'
ContainerTag←'ul'
:Implements constructor
(Items Selected)←args defaultArgs ⍬ ⍬
InternalEvents←IntEvt
∇
∇ r←Render;src;items;t;sel;flds;numItems
:Access public
:If Side=0  ⍝ if not part of a ejListManager
SetId
:ElseIf id≡UNDEF
:Trap 0
id←⎕THIS.##.id,Side⊃'_left' '_right'       ⍝ try to set it
:Else
SetId                                      ⍝ bail out to default id is
:EndTrap
:EndIf
r←''
numItems←⍬⍴⍴items←eis Items
:If 0∊⍴items ⍝ empty vec or mat
items←⍬
:EndIf
:If 1=⍴⍴items ⍝ vector
items←(⊂'text')⍪⍪items
:EndIf
:If 0∊⍴GetOption'fields'
'fields'Set⊂{'{',⍵,'}'}¯1↓∊{⍵,':"',⍵,'",'}¨items[1;]
:EndIf
flds←(('[{,].*:'⎕S{1↓¯1↓⍵.Match})GetOption'fields')
:If ~(⊂'id')∊flds ⍝ if no id field - make one
items,←(⊂'id'),{id,'_item_',⍕⍵}¨⍳numItems
'fields'Set⊂,{'{',⍵,'}'}¯1↓∊{⍵,':"',⍵,'",'}¨items[1;]
flds←(('[{,].*:'⎕S{1↓¯1↓⍵.Match})GetOption'fields')
:EndIf
src←id,'_datasrc'
'dataSource'Set⊂,src
:If ~0∊⍴Selected
sel←¯1+Selected{11=⎕DR ⍺:{⍵/⍳⍴⍵}⍵↑⍺ ⋄ (⍳⍵)∩⍺}numItems ⍝ adjust for JavaScript origin 0
'selectedItemlist'Set sel
:If 1<⍴sel ⋄ 'allowMultiSelection'Set _true ⋄ :EndIf
:EndIf
PreJavaScript←'var ',src,' = ',#.JSON.fromAPL items[1;]#.JSON.fromTable 1↓items
r←⎕BASE.Render
∇
∇ r←Refresh items;src;script;fields;ri;rI
:Access public
r←''
items←eis items
:If 0∊⍴src←GetOption'dataSource'
r,←Selector Replace∊{'<li>',⍵,'</li>'}¨Items←items
r,←Execute'$("',Selector,'").',JQueryFn,'({dataSource:',src,'});'
:Else
:If (1=ri←⍴⍴items)∧(2=rI←⍴⍴Items)
:AndIf 1=2⊃⍴Items ⋄ ri←⍴⍴items←⍪items ⋄ :EndIf
:If 2∧.=ri,rI
:AndIf (2⊃⍴items)=2⊃⍴Items
⍝src←('⍎'=⊃src)↓src    ⍝ We now use ⊂'string' to avoid quotes
Items←(fields←Items[1;])⍪items
r,←Selector Replace''
script←';',src,' = ',#.JSON.fromAPL fields #.JSON.fromTable 1↓Items
script,←';$("',Selector,'").',JQueryFn,'({dataSource:',src,'});'
r,←Execute script
:EndIf
:EndIf
∇
:section Public Callback Methods
⍝
∇ r←name getSelectedItems x;js
:Access public
⍝ get the current items in the list
⍝ x is one of '' (return text), 'text', or 'id'
SetId
js←⊂id{'(function(){var tmp={items:[]};$.each($("#',⍺,'").ejListBox("getSelectedItems"),function(i,obj){tmp.items.push($(obj[0]).',⍵,')}; return tmp.items;})()'}(1+x≡'id')⊃'text()' 'attr("id")'
r←name js
∇
∇ r←name getItems x;js
:Access public
⍝ get the current items in the list
⍝ x is one of '' (return text), 'text', or 'id'
:If Side=0
SetId
:Else
id←⎕THIS.##.id,Side⊃'_left' '_right'
:EndIf
js←⊂id{'(function(){var tmp=[]; $("#',⍺,' li").each(function(){tmp.push($(this).',⍵,')}); return JSON.stringify(tmp);})()'}(1+x≡'id')⊃'text()' 'attr("id")'
r←name js
∇
:endsection
:EndClass
﻿:class ejMap : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/map/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejMap.html'
∇ make
:Access public
JQueryFn←Uses←'ejMap'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejMap'
:Implements constructor :base args
∇
:EndClass
﻿:Class ejMaskEdit : #._SF._ejWidget
:Field Public Shared Readonly DocBase←'https://help.syncfusion.com/js/maskedit/overview'
:Field Public Shared Readonly ApiLevel←1
:Field Public Shared Readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejMaskEdit.html'
∇ make
:Access public
JQueryFn←Uses←'ejMaskEdit'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejMaskEdit'
:Implements constructor :base args
∇
:EndClass
﻿:class ejMenu : #._SF._ejWidget
⍝ Description:: Syncfusion Menu widget
⍝ Constructor:: [items [levels [links]]]
⍝ items   - vector of char vectors containing the menu item caption
⍝ levels  - the level of the corresponding item
⍝ links   - the HREF string to be used when the corresponding element is chosen (clicked)
⍝ Public Fields::
⍝ Items   - vector of char vectors containing the menu item caption
⍝ Levels  - the level of the corresponding item
⍝ Links   - the HREF string to be used when the corresponding element is chosen (clicked)
⍝ MakeIds - 1 makes ids in the format myid_1_2
:field public shared readonly DocBase←'https://help.syncfusion.com/js/menu/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejMenu.html'
:field public Levels←1
:field public Items←⍬
:field public Links←⍬
:field public MakeIds←0
∇ make
:Access public
JQueryFn←Uses←'ejMenu'
ContainerTag←'ul'
(Items Levels Links)←⊂⍬
:Implements constructor
∇
∇ make1 args
:Access public
:Implements constructor
JQueryFn←Uses←'ejMenu'
ContainerTag←'ul'
:Select ⊃⍴⍴args ⍝ Select on Rank
:Case 1         ⍝ Vector
:If 0 2∊⍨10|⎕DR⊃args ⍝ 1st element is simple char
args←,⊂args
:EndIf      ⍝ Matrix
:Case 2 ⋄ args←↓[1]args ⍝ Split columns
:Else
:EndSelect
args←eis args
(Items Levels Links)←args defaultArgs Items Levels Links
∇
∇ {r}←AddItem args
:Access public ⍝ Obs: max 1
(Items Levels Links),←args defaultArgs'' 1 ''
∇
∇ r←Render;i;link;links;opt;opts;text;n;ids;mat;diff;ul;xp;placeholders;from;to
:Access public
Tag←'ul'
SetId
n←≢Items
:If ~0∊n
opts←{'⍎'=⊃⍵:1↓⍵ ⋄ isRef ⍵:⍵ ⋄ HtmlSafeText ⍵}¨eis Items
links←(⍴Items)↑(eis Links),(⍴Items)⍴⊂''
text←opts
opts←⍬
:For i link :InEach (⍳⍴links)links
:If ''≡link ⍝ no link
opt←New _.a(i⊃text)
:ElseIf 326=⎕DR link ⍝ Nested array
(opt←(⊂'href'(⊃link))New _.a(i⊃text)).Set 1↓link
:Else ⍝ no attrs
opt←(⊂'href'link)New _.a(i⊃text)
:EndIf
opts,←opt
:EndFor
⍝          mat←⎕XML∊{isRef ⍵:⍵.Render ⋄ '<span>',⍵,'</span>'}¨opts
placeholders←⍕¨⍳⍴opts
mat←0,(⊂'span'),((⍪placeholders),⊂0 2⍴⊂''),5
Levels⍴⍨←n
diff←0,¯2-/Levels
ul←≠\2/diff>0           ⍝ Step up: new ul
ids←{'id'⍵}¨id #.Utils.levels2ids Levels
i←⍋⍋(2×n)⍴0 1
mat←(,Levels∘.+0 1),(((n 2⍴'li' ''),ids)⍪mat[;1+⍳3])[i;]
⍝ We now insert ul/ols where they belong
xp←~ul←≠\(1+ul)/ul ⋄ n←≢i←ul/⍳⍴ul
mat←xp⍀mat
mat[i;]←mat[i-1;1],n 3⍴Tag'' '' ⍝ same as level before
mat[;1]+←+\xp\,0,⍨⍪diff           ⍝ the others get corrected
⍝ Finally we adjust the level number so it starts a 0
mat[;1]-←1⍴mat
⍝ Prepare replacement of placeholders
from←{'<span>',⍵,'</span>'}¨placeholders
to←{isRef ⍵:⍵.Render ⋄ ⍵}¨opts
⍝ Use ⎕XML to format nicely
Container.Content←from ⎕R to⊢⎕XML mat
:EndIf
r←⎕BASE.Render
∇
:EndClass
﻿:class ejNavigationDrawer : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/navigationdrawer/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejNavigationDrawer.html'
∇ make
:Access public
JQueryFn←Uses←'ejNavigationDrawer'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejNavigationDrawer'
:Implements constructor :base args
∇
:EndClass
﻿:class ejNumericTextbox : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/textboxes/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejNumericTextbox.html'
∇ make
:Access public
JQueryFn←Uses←'ejNumericTextbox'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejNumericTextbox'
:Implements constructor :base args
∇
:EndClass
﻿:class ejPercentageTextbox : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/textboxes/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejPercentageTextbox.html'
∇ make
:Access public
JQueryFn←Uses←'ejPercentageTextbox'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejPercentageTextbox'
:Implements constructor :base args
∇
:EndClass﻿:class ejProgressBar : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/progressbar/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejProgressBar.html'
∇ make
:Access public
JQueryFn←Uses←'ejProgressBar'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejProgressBar'
:Implements constructor :base args
∇
:EndClass
﻿:class ejRadioButton : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/radiobutton/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejRadioButton.html'
∇ make
:Access public
JQueryFn←Uses←'ejRadioButton'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejRadioButton'
:Implements constructor :base args
∇
:EndClass
﻿:class ejRangeNavigator : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/rangenavigator/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejRangeNavigator.html'
∇ make
:Access public
JQueryFn←Uses←'ejRangeNavigator'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejRangeNavigator'
:Implements constructor :base args
∇
:EndClass
﻿:class ejRating : #._SF._ejWidget
⍝ Description:: Syncfusion Rating widget
⍝ Constructor:: [max [value [precision [min]]]]
⍝ max        - maximum rating value
⍝ value      - value for the rating
⍝ precision  - precision for the widget - one of 'full' 'half' or 'exact'
⍝ min        - minimum rating value
⍝
⍝ Public Fields::
⍝ Max        - maximum rating value  (default 5)
⍝ Value      - value for the rating  (default 1)
⍝ Precision  - precision for the widget - one of 'full' 'half' or 'exact' (default 'full')
⍝ Min        - minimum rating value (default 0)
:field public shared readonly DocBase←'https://help.syncfusion.com/js/rating/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejRating.html'
:field public shared readonly IntEvt←'change' 'click' 'create' 'destroy' 'mouseout' 'mouseover'
:field public Max←5
:field public Min←0
:field public Value←1
:field public Precision←'full'
∇ make
:Access public
JQueryFn←Uses←'ejRating'
:Implements constructor
ContainerTag←'input'
∇
∇ make1 arg  ⍝ [1] max, [2] current, [3] precision, [4] min
:Access public
JQueryFn←Uses←'ejRating'
(Input←⎕NEW #._DC.EditField arg).class←'rating'
:Implements constructor
ContainerTag←'input'
Max Value Precision Min←args defaultArgs Max Value Precision Min
∇
∇ r←Render
:Access public
Container.NoEndTag←1
r←''
'minValue' 'maxValue' 'precision' 'value'SetIfNotSet¨Min Max Precision Value
r,←⎕BASE.Render
∇
:EndClass﻿:class ejResizable : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/resizable/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejResizable.html'
∇ make
:Access public
JQueryFn←Uses←'ejResizable'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejResizable'
:Implements constructor :base args
∇
:EndClass
﻿:class ejRotator : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/rotator/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejRotator.html'
:field public Urls←''      ⍝ image URLs
:field public Captions←''  ⍝ image captions
∇ make
:Access public
JQueryFn←Uses←'ejRotator'
:Implements constructor
ContainerTag←'ul'
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejRotator'
:Implements constructor
args←eis args
:If 2=⍴⍴args ⍝ matrix case
(Captions Urls)←↓[1]args
:ElseIf 2=|≡args ⍝ vec of vecs
Urls←args
:Else ⍝ vector of pairs?
(Captions Urls)←↓⍉↑args
:EndIf
ContainerTag←'ul'
∇
∇ r←Render;items
:Access public
items←{⎕NEW(_.img(''('src'⍵)))}¨Urls
:If ~0∊⍴Captions
items.title←Captions
:EndIf
Container.Add{_.li ⍵}¨items
r←∊⎕BASE.Render
∇
:EndClass
﻿:class ejRTE : #._SF._ejWidget
⍝ Description:: Syncfusion Rich-Text Editor
⍝ Constructor:: [content]
⍝ content      - initial content for the editor
⍝ Public Fields::
⍝ Content      - initial content for the editor
:field public shared readonly DocBase←'https://help.syncfusion.com/js/rte/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejRTE.html'
∇ make
:Access public
JQueryFn←Uses←'ejRTE'
ContainerTag←'textarea'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejRTE'
ContainerTag←'textarea'
:Implements constructor
Content←args
∇
∇ r←Render
:Access public
Container.Content←renderIt Content
r←⎕BASE.Render
∇
:EndClass
﻿:class ejSchedule : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/schedule/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejSchedule.html'
∇ make
:Access public
JQueryFn←Uses←'ejSchedule'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejSchedule'
:Implements constructor :base args
∇
:EndClass
﻿:class ejScroller : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/scroller/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejScroller.html'
∇ make
:Access public
JQueryFn←Uses←'ejScroller'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejScroller'
:Implements constructor :base args
∇
:EndClass
﻿:class ejSlider : #._SF._ejWidget
⍝ Description:: Syncfusion Slider widget
⍝ Constructor:: [min [max [value(s)]]]
⍝ min - the minimum value for the slider (default ⍬)
⍝ max - the maximum value for the slider (default ⍬)
⍝ value(s) - zero or more values for the slider (default ⍬)
⍝ Public Fields::
⍝ Values - zero or more values for the slider
⍝ Min - the minimum value for the slider (default ⍬)
⍝ Max - the maximum value for the slider (default ⍬)
:field public shared readonly DocBase←'https://help.syncfusion.com/js/slider/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly IntEvt←'change' 'create' 'destroy' 'slide' 'start' 'stop'
:field public Values←⍬
:field public Min←⍬
:field public Max←⍬
∇ make
:Access public
JQueryFn←Uses←'ejSlider'
:Implements constructor
InternalEvents←IntEvt
∇
∇ make1 arg
:Access public
JQueryFn←Uses←'ejSlider'
:Implements constructor
:If ~0∊⍴arg
:If 2=|≡arg
arg←,⊃arg
:EndIf
Min Max←2↑arg,(⍴arg)↓⍬ ⍬
Values←2↓arg
:EndIf
InternalEvents←IntEvt
∇
∇ r←Render
:Access public
:If ⍬≢Min ⋄ 'minValue'SetIfNotSet Min ⋄ :EndIf
:If ⍬≢Max ⋄ 'maxValue'SetIfNotSet Max ⋄ :EndIf
WidgetDef[5]←⊂'.ejSlider("option","value")'  ⍝ NB!! because ejSlider's input element is different from the container holding the slider, we use an alternate syntax to retrieve the value
:Select ⊃⍴,Values
:Case 0
:Case 1
'value'Set⊃Values
:Else
'values'Set,Values
'sliderType'SetIfNotSet'⍎ej.SliderType.Range'
WidgetDef[5]←⊂'.ejSlider("option","values")'
:EndSelect
r←⎕BASE.Render
∇
:EndClass
﻿:class ejSplitButton : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/splitbutton/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejSplitButton.html'
∇ make
:Access public
JQueryFn←Uses←'ejSplitButton'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejSplitButton'
:Implements constructor :base args
∇
:EndClass
﻿:class ejSplitter : #._SF._ejWidget
:Field Public Shared Readonly DocBase←'https://help.syncfusion.com/js/splitter/overview'
:Field Public Shared Readonly ApiLevel←3
:Field Public Shared Readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejSplitter.html'
:Field Public Panes←0⍴⊂''
:Field Public PaneProps←0⍴⊂''
:Field Public Orientation←'horizontal'
∇ make
:Access public
JQueryFn←Uses←'ejSplitter'
:Implements constructor
∇
∇ makec(selector panes)
:Access public
JQueryFn←Uses←'ejSplitter'
:Implements constructor :base selector
Panes←panes
∇
∇ r←Render;props;i;pre;value;name
:Access public
:If ~0∊⍴Panes
{Container.Add #._html.div ⍵}¨Panes
:EndIf
:For i :In (0≠⊃∘⍴¨PaneProps)/⍳⍴PaneProps
pre←'properties[',(⍕i),'].'
:If 2=|≡props←i⊃PaneProps ⋄ props←,⊂props ⋄ :EndIf
:For (name value) :In props
(pre,name)Option value
:EndFor
:EndFor
'orientation'Option Orientation
r←⎕BASE.Render
∇
:EndClass﻿:class ejSpreadsheet : #._SF._ejWidget
:Field public shared readonly DocBase←'https://help.syncfusion.com/js/spreadsheet/overview'
:Field public shared readonly ApiLevel←3
:Field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejSpreadsheet.html'
:Field public shared readonly IntEvt← 'actionBegin' 'actionComplete' 'autoFillBegin' 'autoFillComplete' 'beforeBatchSave' 'beforeCellFormat' 'beforeCellSelect' 'beforeDrop' 'beforeOpen' 'beforePanelOpen' 'cellClick' 'cellEdit' 'cellFormatting' 'cellHover' 'cellSave' 'contextMenuClick' 'drag' 'dragStart' 'drop' 'editRangeBegin' 'editRangeComplete' 'load' 'loadComplete' 'menuClick' 'openFailure' 'pagerClick' 'ribbonClick' 'seriesRendering' 'tabClick' 'tabSelect'
:Field Public Sheets←⍬
∇ make
:Access public
JQueryFn←Uses←'ejSpreadsheet'
:Implements Constructor
InternalEvents←IntEvt
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejSpreadsheet'
:Implements Constructor
InternalEvents←IntEvt
:If 2=⍴⍴args ⋄ Sheets,←⊂args ⋄ :EndIf
∇
∇ r←Render;fields;src;rows;cols;coldefs;colfields;i
:Access public
SetId
r←''
sheets←⍬
:If ~0∊⍴Sheets
:For sheet :In Sheets
sheets,←formatSheet sheet
:EndFor
src←id,'_sheets'
'sheets'Set'⍎',src
r,←'script'#.HtmlUtils.Enclose src #._JSS.JSData sheets
:EndIf
r,←⎕BASE.Render
∇
formatSheet←{z←⎕NS'' ⋄ z.rows←{z←⎕NS'' ⋄ z.cells←{z←⎕NS'' ⋄ z.value←⍵ ⋄ z}¨⍵ ⋄ z}¨↓⍵ ⋄ z}
:EndClass
﻿:class ejSymbolPalette : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/symbolpalette/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejSymbolPalette.html'
∇ make
:Access public
JQueryFn←Uses←'ejSymbolPalette'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejSymbolPalette'
:Implements constructor :base args
∇
:EndClass
﻿:class ejTab : #._SF._ejWidget
⍝ Description:: Syncfusion Tab widget
⍝ Constructor:: [titles [sections]] | [titles_sections]
⍝ titles          - vector of char vectors containing titles to appear on tabbed sections
⍝ sections        - vector of vectors containing HTML content for each section
⍝                   or URL pointing to content to load dynamically
⍝ titles_sections - 2-column matrix of titles [;1] and sections [;2] as above
⍝                   or vector of 2 element title/section vectors
⍝ Public Fields::
⍝ Titles          - vector of char vectors containing titles to appear on tabbed sections
⍝ Sections        - vector of vectors containing HTML content for each section
⍝ IsURL           - scalar or vector indicating if a section is a URL default is 0
⍝ Examples::
⍝ ejTab 'Title1' 'Title2'
⍝ ejTab ('Title1' 'Title2')('Section1' 'Section2')
⍝ ejTab 2 2⍴'Title1' 'Section1' 'Title2' 'Section2'
:field public shared readonly DocBase←'https://help.syncfusion.com/js/tab/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejTab.html'
:field public shared readonly IntEvt←'active' 'ajaxBeforeLoad' 'ajaxError' 'ajaxLoad' 'ajaxSuccess' 'beforeActive' 'beforeItemRemove' 'create' 'destroy' 'itemAdd' 'itemRemove'
:field public Titles←0⍴⊂''
:field public Sections←0⍴⊂''
:field public IsURL←⍬
∇ make
:Access public
JQueryFn←Uses←'ejTab'
:Implements constructor
InternalEvents←IntEvt
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejTab'
:Implements constructor
args←eis args
:If 1=⍴args
:If 2=⍴⍴1⊃args ⍝ matrix arg?
(Titles Sections)←↓[2]1⊃args
:Else ⍝ single title
Titles←args
:EndIf
:Else
(Titles Sections)←eis¨2↑args
:EndIf
IsURL←(⊃⍴Titles)⍴0
InternalEvents←IntEvt
∇
∇ {title}AddSection content
:Access public
:If 0=⎕NC'title' ⋄ title←'Tab ',⍕1+⍴Titles ⋄ :EndIf
Titles,←⊂title
Sections,←⊂content
IsURL←(⊃⍴Titles)↑IsURL
∇
∇ r←Render;sections;n;ids;i;section
:Access public
Content←''
SetId
:If ~0∊⍴Titles
sections←(n←⊃⍴Titles)↑Sections    ⍝ pad out or truncate
IsURL←n↑IsURL
ids←('#',id,'_section_')∘,∘⍕¨⍳⍴Titles
(IsURL/ids)←IsURL/Sections
(Container.Add _html.ul).Add¨Titles{⎕NEW #._html.li(⎕NEW #._html.a(⍺('href="',⍵,'"')))}¨ids
:For i section :InEach ((~IsURL)∘/¨ids sections)
Container.Add(i New #._html.div section)
:EndFor
:If ∨/IsURL
'dataType' 'contentType' 'async'Set¨'html' 'html'#.JSON.true
:EndIf
:EndIf
r←⎕BASE.Render
∇
:EndClass
﻿:class ejTagCloud : #._SF._ejWidget
⍝ Description:: Syncfusion TagCloud widget
⍝ Constructor:: [Data]
⍝ Data     - matrix of data (one row per data point)
⍝            [;1] text to display
⍝   optional [;2] frequency
⍝   optional [;3] URL to open if node is clicked
⍝   optional [;4] HTML attributes for the underlying anchor <a> tag
⍝ Public Fields::
⍝ Data     - matrix of data (one row per data point)
⍝            [;1] text to display
⍝   optional [;2] frequency
⍝   optional [;3] URL to open if node is clicked
⍝   optional [;4] HTML attributes for the underlying anchor <a> tag
:field public shared readonly DocBase←'https://help.syncfusion.com/js/tagcloud/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly IntEvt←'click' 'create' 'destroy' 'mouseout' 'mouseover'
:field public Data←⍬
∇ make
:Access public
JQueryFn←Uses←'ejTagCloud'
:Implements constructor
InternalEvents←IntEvt
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejTagCloud'
:Implements constructor
Data←args
InternalEvents←IntEvt
∇
∇ r←Render;d;n;src
:Access public
SetId
r←''
:If ~0∊⍴Data
d←⍪Data
:If 1=2⊃⍴d ⋄ d,←1 ⋄ :EndIf
n←2⊃⍴d
src←id,'_data'
'dataSource'Set⊂,src
r←(⎕NEW #._DC.Script('var ',src,' = ',#.JSON.fromAPL⊃#.JSON.fromTable/(n↑'text' 'frequency' 'url' 'htmlAttributes')d)).Render
:EndIf
r,←⎕BASE.Render
∇
:EndClass
﻿:Class ejTextBox : #._SF._ejWidget
:Field Public Shared Readonly DocBase←'https://help.syncfusion.com/js/textboxes/overview'
:Field Public Shared Readonly ApiLevel←1
:Field Public Shared Readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejTextBoxes.html'
:Field Public Shared Readonly IntEvt←'change' 'create' 'destroy' 'focusIn' 'focusOut'
:Field Public Type←'Numeric' ⍝ Numeric|Currency|Percentage
:Field Public value←''
∇ make
:Access Public
Uses←'ejTextBoxes'
ContainerTag←'input'
:Implements Constructor
Container.type←'text'
InternalEvents←IntEvt
∇
∇ make1 args
:Access Public
⍝ args: Type [value]
args←eis args ⍝ Enclose if simple
(Type value)←args,(⍴args)↓'Numeric' ''
Uses←'ejTextBoxes'
ContainerTag←'input'
:Implements Constructor
Container.type←'text'
InternalEvents←IntEvt
∇
∇ r←Render
:Access Public
Container.NoEndTag←1
'Invalid Type set for ejTextBox'⎕SIGNAL((⊂Type)∊'Numeric' 'Currency' 'Percentage')↓11
JQueryFn←'ej',Type,'Textbox'
:If value≢'' ⋄ 'value'Set value ⋄ :EndIf
r←⎕BASE.Render
∇
:EndClass
﻿:class ejTile : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/tile/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejTile.html'
∇ make
:Access public
JQueryFn←Uses←'ejTile'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejTile'
:Implements constructor :base args
∇
:EndClass
﻿:Class ejTimePicker : #._SF._ejWidget
:Field Public Shared ReadOnly DocBase←'https://help.syncfusion.com/js/timepicker/overview'
:Field Public Shared ReadOnly ApiLevel←2
:Field Public Shared ReadOnly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejTimePicker.html'
∇ make0
:Access Public
JQueryFn←Uses←'ejTimePicker'
ContainerTag←'input'
:Implements Constructor
Container.type←'text'
∇
∇ make args;n
:Access Public
JQueryFn←Uses←'ejTimePicker'
ContainerTag←'input'
:Implements Constructor :base args
:If (≡args)∊0 1 ⋄ args←,⊂args ⋄ :EndIf
n←¯1+⊃⍴args
(n↑'value' 'timeFormat')Option 1↓args
Container.type←'text'
∇
∇ r←Render
:Access Public
Container.NoEndTag←1
r←⎕BASE.Render
∇
:EndClass
﻿:class ejToggleButton : #._SF._ejWidget
⍝ Description:: Syncfusion ToggleButton widget
⍝ Constructor:: [defaultText [activeText]]
⍝ defaultText     - HTML content of button face when toggled off
⍝ activeText      - HTML content of button face when toggled on
⍝ Public Fields::
⍝ Text            - 2 element vector of char vectors containing defaultText activeText
⍝ Examples::
⍝ ejToggleButton
⍝ ejToggleButton 'Click to Toggle'
⍝ ejToggleButton 'Click to Activate' 'Click to Disable'
:field public shared readonly DocBase←'https://help.syncfusion.com/js/togglebutton/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejToggleButton.html'
:field public Text←''
∇ make
:Access public
JQueryFn←Uses←'ejToggleButton'
ContainerTag←'input'
:Implements constructor
Container.type←'checkbox'
Text←2⍴⊂'Button'
∇
∇ make1 args
:Access public
args←eis args
JQueryFn←Uses←'ejToggleButton'
ContainerTag←'input'
:Implements constructor
Container.type←'checkbox'
Text←2⍴args
∇
∇ r←Render
:Access public
Container.NoEndTag←1
'defaultText' 'activeText'Set 2⍴eis Text
r←⎕BASE.Render
∇
:EndClass﻿:class ejToolbar : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/toolbar/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejToolbar.html'
∇ make
:Access public
JQueryFn←Uses←'ejToolbar'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejToolbar'
:Implements constructor :base args
∇
:EndClass
﻿:class ejTreeGrid : #._SF._ejWidget
⍝ Description:: Syncfusion TreeGrid widget
⍝ Formats data in a grid with tree-based collapsibility
⍝ Constructor:: [items [levels]]
⍝ items           - matrix of data (the row is titles for each column if the first level is 0)
⍝ levels          - integer vector indicating level for each row in items (the first may be 0 to indicate title row)
⍝ Public Fields::
⍝ Items           - matrix of data (the row is titles for each column if the first level is 0)
⍝ Columns         - if non-empty, a vector of namespaces, one per column, containing the definition for each columns
⍝                   see the Syncfusion documentation for more information
⍝ ColNames        - vector of character vectors containing the title for each column in items
⍝ ColTitles       - vector of character vectors containing the displayed column heading for each column in items
⍝ CellWidths      - integer scalar or vector of column widths (in pixels)
⍝ Levels          - integer vector indicating the level for each row in the table
⍝ width           - overall width for the TreeGrid
⍝ height          - overall height for the TreeGrid
:Field public shared readonly DocBase←'https://help.syncfusion.com/js/treegrid/overview'
:Field public shared readonly ApiLevel←3
:Field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejTreeGrid.html'
:Field public shared readonly IntEvt←'clearSelection' 'collapseAll' 'hideColumn' 'refresh' 'saveCell' 'search' 'showColumn' 'sortColumn'
:Field Public Items←,⊂''
:Field Public Columns←⍬      ⍝ Vector of namespaces using JSON names
:Field Public Levels←1       ⍝ Level of nesting
:Field Public ColNames←⍬     ⍝ JSON: field
:Field Public ColTitles←⍬    ⍝       headerText
:Field Public CellWidths←⍬   ⍝       width
:Field Public width←500      ⍝ default width = 500px
:Field Public height←⍬
script←{⎕NEW #._DC.Script ⍵}
∇ make
:Access public
JQueryFn←Uses←'ejTreeGrid'
:Implements Constructor
InternalEvents←IntEvt
∇
∇ makec args;sink
:Access public
args←eis args
JQueryFn←Uses←'ejTreeGrid'
:Implements Constructor
InternalEvents←IntEvt
args←↑¨∘↓∘⍉⍣(2=≢⍴args)⊢args ⍝ translate matrix arg to vector arg
(Items Levels sink)←args defaultArgs(0 0⍴⍬)1 ⍬
∇
∇ r←Render;fields;src;rows;cols;coldefs;colfields;i;lev
:Access public
SetId
:If 0∊Levels ⍝ separate titles
ColTitles←Items[1;]
Items←1 0↓Items
Levels←1↓Levels
:EndIf
:If 0≠⍴ColTitles
:If 326=⎕DR⊃ColTitles ⋄ Columns←ColTitles ⋄ ColTitles←⍬
:Else ⋄ ColNames←{'c',⍕⍵}¨⍳≢ColTitles
:EndIf
:EndIf
:If 0∊⍴ColNames
ColNames←{'c',⍕⍵}¨⍳⊃⌽⍴Items
:EndIf
r←''
(rows cols)←⍴Items
:If 0=cols
r←'[grid with zero columns]'
:Else
:If 0≠⍴Columns ⋄ coldefs←Columns ⋄ ColNames←Columns.field
:Else ⍝ Put Columns together from individual properties
coldefs←(cols,0)⍴⊂'' ⋄ colfields←⍬
:If 0≠⍴ColNames ⋄ coldefs,←ColNames ⋄ colfields,←⊂'field' ⋄ :EndIf
:If 0≠⍴ColTitles ⋄ coldefs,←ColTitles ⋄ colfields,←⊂'headerText' ⋄ :EndIf
:If 0≠⍴,CellWidths ⋄ coldefs,←cols⍴CellWidths ⋄ colfields,←⊂'width' ⋄ :EndIf
coldefs←colfields #.JSON.fromTable coldefs
:EndIf
coldefs←#.JSON.fromAPL coldefs
:If ''≡GetOption'sizeSettings.width' ⋄ 'sizeSettings.width'Set⍕width ⋄ :EndIf
:If ''≡GetOption'sizeSettings.height' ⋄ :AndIf ~0∊⍴height ⋄ 'sizeSettings.height'Set⍕height ⋄ :EndIf
'columns'Set⊂,coldefs
'childMapping'Set'subItems'
'allowColumnResize'Set _true
'enableResize'Set _true
src←id,'_data'
'dataSource'Set⊂,src
lev←1⌈(⊃⍴Items)↑Levels
r←(⎕NEW #._DC.Script('var ',src,' = ',#.JSON.fromAPL lev #.JSON.nestObjects ColNames #.JSON.fromTable Items)).Render
:EndIf
r,←⎕BASE.Render
∇
:EndClass
﻿:class ejTreeMap : #._SF._ejWidget
:field public shared readonly DocBase←'https://help.syncfusion.com/js/treemap/overview'
:field public shared readonly ApiLevel←1
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejTreeMap.html'
∇ make
:Access public
JQueryFn←Uses←'ejTreeMap'
:Implements constructor
∇
∇ make1 args
:Access public
JQueryFn←Uses←'ejTreeMap'
:Implements constructor :base args
∇
:EndClass﻿:class ejTreeView : #._SF._ejWidget
⍝ Description:: Syncfusion TreeView widget
⍝ Constructor::  [items [levels [links]]]
⍝ items  - ⍝ vector of character vectors containing the tree node texts
⍝ levels - ⍝ the levels of the corresponding items
⍝ links  - ⍝ the href string to be used when the corresponding element is chosen (clicked)
⍝ Public Fields::
⍝ Items        - ⍝ vector of character vectors containing the tree node texts
⍝ Levels       - ⍝ the levels of the corresponding items
⍝ Links        - ⍝ the href string to be used when the corresponding element is chosen (clicked)
⍝ MakeIds      - ⍝ 1 to generate IDs
⍝ onNodeSelect - ⍝ 1 to call APLJax, or the name of the callback function
⍝
⍝ Public Method to request model data to be returned to the server::
⍝ r←name getModel subsel ⍝ Passes the TreeView model back as a variable called 'model' as input to a callback.
⍝
⍝ Public Methods to be used in Callbacks::
⍝ r←addNode name ⍝ Will add a node with id "tv_n", where n starts at 0 and increases each time a node is added
⍝ r←removeNode node ⍝ Removes the identified node
⍝ r←checkAll ⍝ Check everything below the current node
⍝ r←checkNode node ⍝ Check a node
⍝ r←uncheckAll ⍝ Uncheck everything below the current node
⍝ r←uncheckNode node ⍝ Uncheck a node
⍝ r←expandAll ⍝ Expands everything below the current node
⍝ r←expandNode node ⍝ Expands everything below a node
⍝ r←collapseAll ⍝ Collapses everything below the current node
⍝ r←collapseNode node ⍝ Collapses everything below a node
⍝ r←selectNode node ⍝ Select a node
⍝ r←unselectNode node ⍝ Unselect a node
⍝
:field public shared readonly DocBase←'https://help.syncfusion.com/js/treeview/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejTreeView.html'
:field public shared readonly IntEvt←'beforeCollapse' 'beforeEdit' 'beforeExpand' 'created' 'destroyed' 'inlineEditValidation' 'keyPress' 'nodeCheck' 'nodeClick' 'nodeCollapse' 'nodeDrag' 'nodeDragStart' 'nodeDragStop' 'nodeDropped' 'nodeExpand' 'nodeSelect' 'nodeUncheck'
:field public Items←,⊂''
:field public Levels←⍬
:field public Links←,⊂''
:field public MakeIds←0
:field public onNodeSelect←0  ⍝ set to 1 to call APLJax, or the name of the callback function
⍝   :field public Ordered←0  ⍝ Ordered      - insert numbering before item names (1 1.1 1.1.1 2 etc.)
∇ make
:Access public
JQueryFn←Uses←'ejTreeView'
:Implements constructor
InternalEvents←IntEvt
ContainerTag←'ul'
∇
∇ make1 args;fixed
:Access public
JQueryFn←Uses←'ejTreeView'
:Implements constructor
InternalEvents←IntEvt
ContainerTag←'ul'
fixed←FixArgs args
Items Levels Links←↓⍉fixed,⍤1⊢(⊃⌽⍴fixed)↓'' 0 ''
∇
∇ r←Render;mat
:Access Public
mat←FixArgs Items Levels Links
mat←((≢mat),4)↑mat,⊂''
mat←mat[;2 1 4 3]
mat[;2]←'\&#x([[:xdigit:]]+);'⎕R'\\u\1'⊢mat[;2]
mat[;2]←'\&#(\d+);'⎕R{'\u',∊#.Utils.tohex⍎⍵.Match∩⎕D}mat[;2]
SetId
mat[;3]←id #.Utils.levels2ids mat[;1] ⍝ auto-generate node ids
⍝      mat[;2]←((,¨'_' '$')⎕R'.' '\&#8195;'⊢(1+≢id)↓¨mat[;3]),¨⍣Ordered⊢mat[;2] ⍝ add numbering if ordered
⍝
:If onNodeSelect≢0
On'nodeSelect'onNodeSelect('node' 'eval' 'JSON.stringify(argument.id)')
:EndIf
r←'<script>',(id FormatItems mat),'</script>'
'fields'Set⊂'{dataSource: ',(id,'_data'),',id:"id",parentId:"pid",text:"name",hasChild:"hasChild",linkAttribute:"link"}'
r,←⎕BASE.Render
∇
∇ r←id FormatItems items;isparent;pid;level;txt;iid;url;i;pind;p
:Access public shared
r←'var ',id,'_data = ['
:If ~0∊⍴items
:Select n←0⌈4-2⊃⍴items
:CaseList 3 4
:Return  ⍝ Not enough data to render ejTreeView
:Case 2 ⍝ no ids or links
items,←(id,'_item_')∘,∘⍕¨⍳1⊃⍴items ⍝ generate ids
items,←⊂''
:Case 1
items,←⊂''
:EndSelect
:If ~0∊⍴items ⍝ Unnecessary, as we never get here if empty
items,←isparent←{2</⍵,0}items[;1]
items,←{⌽+/∨\(∘.<⍨⍳⍴⍵)∧∘.>⍨⌽⍵}items[;1]
:For i :In ⍳⊃⍴items
(level txt iid url p pind)←items[i;]
r,←'{id:"',(⍕iid),'",name:"',txt,'"'
:If p ⍝ parent?
r,←',hasChild: true'
:EndIf
:If 0≠pind
r,←',pid:"',(⍕(⊂pind 3)⊃items),'"'
:EndIf
:If ~0∊⍴url
r,←',link:"',url,'"'
:EndIf
r,←'},'
:EndFor
r←¯1↓r
:EndIf
:EndIf
r,←'];'
∇
:Section SF APIs
⍝ This section contains methods that are suitable results for call-back functions
⍝ which want to call Syncfusion API calls. The set of functions is not complete, please
⍝ see the Syncfusion documentation for details and feel free to implement additions
∇ r←addNode name
⍝ Will add a node with id "tv_n", where n starts at 0 and increases each time a node is added
⍝ /// NB due to a bug in the Syncfusion widget (August 2015), the "model" is not updated
:Access Public
r←Execute'$("#',id,'").data("ejTreeView").addNode("',name,'");'
∇
∇ r←removeNode node
⍝ Removes the identified node
:Access Public
r←Execute'$("#',id,'").data("ejTreeView").removeNode($("#',node,'"));'
∇
∇ r←checkAll
⍝ Check everything below the current node
:Access Public
r←Execute'$("#',id,'").data("ejTreeView").checkAll();'
∇
∇ r←checkNode node
⍝ Check a node
:Access Public
r←Execute'$("#',id,'").data("ejTreeView").checkNode($("#',node,'"));'
∇
∇ r←uncheckAll
⍝ Uncheck everything below the current node
:Access Public
r←Execute'$("#',id,'").data("ejTreeView").uncheckAll();'
∇
∇ r←uncheckNode node
⍝ Uncheck a node
:Access Public
r←Execute'$("#',id,'").data("ejTreeView").uncheckNode($("#',node,'"));'
∇
∇ r←expandAll
⍝ Expands everything below the current node
:Access Public
r←Execute'$("#',id,'").data("ejTreeView").expandAll();'
∇
∇ r←expandNode node
⍝ Expands everything below a node
:Access Public
r←Execute'$("#',id,'").data("ejTreeView").expandNode($("#',node,'"));'
∇
∇ r←collapseAll
⍝ Collapses everything below the current node
:Access Public
r←Execute'$("#',id,'").data("ejTreeView").collapseAll();'
∇
∇ r←collapseNode node
⍝ Collapses everything below a node
:Access Public
r←Execute'$("#',id,'").data("ejTreeView").collapseNode($("#',node,'"));'
∇
∇ r←selectNode node
⍝ Select a node
:Access Public
r←Execute'$("#',id,'").data("ejTreeView").selectNode($("#',node,'"));'
∇
∇ r←unselectNode node
⍝ Unselect a node
:Access Public
r←Execute'$("#',id,'").data("ejTreeView").unselectNode($("#',node,'"));'
∇
∇ r←name getModel subsel;model
⍝ Passes the TreeView model back as a variable called 'model' as input to a callback
⍝ Usage:     aButton.On 'click' 'onButtonClick' ('model' tvinstance.getModel '')
:Access Public
model←'model',(0≠⍴subsel)/'.',subsel ⍝ "model" or "model.subsel"
r←(name'eval'('JSON.stringify($("#',id,'").ejTreeView("',model,'"))'))
∇
:EndSection
:section test
∇ r←test;c;m
:Access public shared
⎕SHADOW,∊¨'cm'∘.,⊂¨⍕¨⍳14
c1←'abc' 'def'                          ⍝
m1←⍪c1
c2←('abc' 'def')(1 2)                   ⍝
m2←⍉↑c2
c3←('abc' 'def')(1 2)('www' 'www1')     ⍝
m3←⍉↑c3
c4←2 1⍴⊂¨'abc' 'def'                    ⍝
m4←c4
c5←⍉↑('abc' 'def')(1 2)                 ⍝
m5←c5
c6←⍉↑('abc' 'def')(1 2)('www' 'www1')   ⍝
m6←c6
c7←('abc' 'def')1
m7←⍉↑('abc' 'def')(1 1)
c8←('abc' 'def')1('www' 'www1')
m8←⍉↑('abc' 'def')(1 1)('www' 'www1')
c9←('abc' 'def')(1 2)(,⊂'www')
m9←⍉↑('abc' 'def')(1 2)('www' 'www')
c10←('abc' 'def')(1 2)'www'
m10←m9
c11←('abc' 'def')1(,⊂'www')
m11←⍉↑('abc' 'def')(1 1)('www' 'www')
c12←('abc' 'def')1 'www'
m12←m11
c13←'abc' 1
m13←1 2⍴c13
c14←'abc' 1 'www'
m14←1 3⍴c14
r←⍬
:For c m :InEach ↓∊¨'cm'∘.,⊂¨⍕¨⍳14
r,←÷(⍎m)≡FixArgs⍎c
:EndFor
∇
⍝  eis←{⊂⍣(1=≡⍵)⊢⍵}
link←{(⊂⍺),eis ⍵}
∇ m←FixArgs c
:If 2=≢⍴c ⍝ matrix
m←c
→0
:EndIf
:If (1=≢∪⎕DR¨c)∧∧/1≥|≡¨c  ⍝ 'abc' 'def'
m←⍪,¨c
→0
:EndIf
:If 1=≢∪≢¨c ⍝ ('abc' 'def') (1 2)
m←⍉↑c
→0
:EndIf
m←↑⊃link¨/eis¨c
∇
:endsection
:EndClass
﻿:Class ejUploadbox : #._SF._ejWidget
:Field Public Shared Readonly DocBase←'https://help.syncfusion.com/js/uploadbox/overview'
:Field Public Shared Readonly ApiLevel←3
:Field Public Shared Readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejUploadBox.html'
:Field Public TargetFolder←''
:Field Public SaveUrl←'../CommonPages/saveFiles.mipage'
:Field Public Async←#.JSON.true
∇ make
:Access public
JQueryFn←Uses←'ejUploadbox'
:Implements constructor
∇
∇ makec args;x
:Access public
args←eis args
args←2↑args,(⍴args)↓'' ''
JQueryFn←Uses←'ejUploadbox'
:Implements constructor :base args
(x TargetFolder)←args
∇
∇ r←Render;props;i;pre;value;name;fields;var
:Access public
'saveUrl'Option SaveUrl,'?targetfolder=',TargetFolder
'asyncUpload'Option Async
r←⎕BASE.Render
∇
:EndClass
﻿:class ejWaitingPopup : #._SF._ejWidget
⍝ Description:: Syncfusion WaitingPopup widget
⍝ Constructor:: [text]
⍝ text    - text to appear in the popup
⍝ Public Fields::
⍝ Text    - text to appear in the popup
⍝ Style   - CSS styles to apply to popup
⍝           default is: "height: 200px; width: 500px; margin: 0 auto;"
:field public shared readonly DocBase←'https://help.syncfusion.com/js/waitingpopup/overview'
:field public shared readonly ApiLevel←3
:field public shared readonly DocDyalog←'/Documentation/DyalogAPIs/Syncfusion/ejWaitingPopup.html'
:field public Text←''
:field public Style←''
∇ make
:Access public
:Implements constructor
JQueryFn←Uses←'ejWaitingPopup'
∇
∇ make1 args
:Access public
:Implements constructor
JQueryFn←Uses←'ejWaitingPopup'
Text←args
∇
∇ r←Render;style;t
:Access public
⍝:If ''≢t←Attrs[⊂'template']
:If 0≠Options.⎕NC'template'
:AndIf 2>≡t←Options.template
'template'Set⊂'$("',t,'")'
:EndIf
:If ~0∊⍴Text
'text'Set Text
:EndIf
r←⎕BASE.Render
:If 0∊⍴style←Style
style←'width: 100% !important; margin-left: auto !important; margin-right: auto !important; left: 0px !important; color: black;'
:EndIf
style←(⎕NEW #._DC.Style((Selector,'_WaitingPopup')style)).Render
r,←(⊂⍣(1<|≡r))style
∇
:EndClass
﻿ r←req MarkdownHandler file
r←'text/html'(⊃#.MarkAPL.Markdown2HTML⊂#.Files.ReadText file)
﻿:Namespace WC2 ⍝ Web Content Contruction for use with HTMLRenderer
⍝ Populated from /Loadable/WC2/
Initialized←0
APLVersion←{⊃(//)⎕VFI ⍵/⍨2>+\'.'=⍵}2⊃#.⎕WG 'APLVersion'
SourceFile←{0::'' ⋄ 6:: 4⊃⊃5177⌶⍬ ⋄ SALT_Data.SourceFile}
∇ r←{force}Init arg;msPath;path;boot;appPath;app;t
⍝ Bootstrap load from
→0⍴⍨1=⊃r←(16>APLVersion)/1 'Dyalog v16.0 or later is required to use HTMLRenderer-based features'
force←{6::⍵ ⋄ force}0
:If Initialized>force
→0⊣r←¯1 'Already initialized'
:EndIf
arg←,⊆arg
(msPath appPath)←2↑arg,(⍴arg)↓'' ''
:If 0∊⍴msPath ⍝ if no MiServer path specified, try looking at source path
:AndIf ~0∊⍴t←SourceFile ⍬
msPath←⊃1 ⎕NPARTS (⊃1 ⎕NPARTS t),'/../'
:EndIf
:If ~⎕NEXISTS path←∊1 ⎕NPARTS msPath,'/'
→0⊣r←2 'MiServer path not found: "',msPath,'"'
:EndIf
:If ~0∊⍴app←appPath
:AndIf ~⎕NEXISTS app←∊1 ⎕NPARTS appPath,'/'
→0⊣r←3 'Application path not found: "',appPath,'"'
:EndIf
:If ~⎕NEXISTS boot←path,'Core/Boot.dyalog'
→0⊣r←4 'Path does not appear to be MiServer: "',msPath,'"'
:EndIf
⎕SE.SALT.Load boot,' -target=#'
Initialized←1
r←0 'WC2 initialized'
∇
∇ r←Run arg
→0⍴⍨0<⊃r←1 Init arg
∇
∇ {r}←{attr}New args;cl
⍝ create a new instance
⍝ args can be an instance, a class, or just html/text
:Access public shared
r←''
:If ~0∊⍴∊args
:If 0=⎕NC'attr' ⋄ attr←'' ⋄ :EndIf
r←attr #.HtmlElement.New args
:EndIf
∇
:EndNamespace
﻿:Class App
⍝ Class to be used with HTMLRenderer (Dyalog v16 and later)
:field public _Renderer←''
:field public _Url←''
:field public _Config
:field public _Request
:field public _Args
:field public Props
:field public ReadOnly NL←⎕UCS 10
:field public shared APLVersion←{⊃(//)⎕VFI ⍵/⍨2>+\'.'=⍵}2⊃#.⎕WG 'APLVersion'
begins←{⍺≡(⍴⍺)↑⍵}
∇ make1 appPath
:Access public
:Implements constructor
⎕SIGNAL makeCommon
∇
∇ r←makeCommon
→0↓⍨0∊⍴r←(16>APLVersion)/⊂('EN' 11)('Message' 'Dyalog v16.0 or later is required to use HTMLRenderer-based features')
Props←⎕NS''
_Config←#.Boot.ms.Config
∇
∇ Run
:Access public
run&0
∇
∇ run arg
:Access public
_Renderer←⎕NEW'HTMLRenderer'(('Event'('onHTTPRequest' '__CallbackFn'))('URL'_PageName))
:If ~0∊⍴props←_Renderer.PropList∩Props.⎕NL ¯2
{_Renderer⍎⍺,'←⍵'}/¨{⍵(Props⍎⍵)}¨props
:EndIf
_Renderer.Wait
∇
∇ r←__CallbackFn args;ext;mimeType;filename;url;mask;cbdata;request;int;handler;content
:Access public
r←args
→0⍴⍨0∊⍴8⊃args
request←⎕NEW #.WC2.HtmlRenderRequest(args(819⌶_PageName))
:If 0∊⍴request.Page ⍝ initialization
r[4 5 6 7]←1 200 'OK' 'text/html'
r[10]←⊂⎕BASE.Render
r[9]←⊂NL,⍨∊NL,⍨¨'Content-Type: ' 'Content-Length: ',⍕¨r[7 10]
:ElseIf ~0∊⍴ext←(819⌶)1↓⊃¯1↑1 ⎕NPARTS request.Page  ⍝ need to handle case where another MiPage is requested
:If #.Files.Exists filename←∊1 ⎕NPARTS _Config #.MiServer.Virtual request.Page
:If ' '∨.≠handler←⊃_Config.MappingHandlers.handler/⍨<\_Config.MappingHandlers.ext≡¨⊂'.',ext
(mimeType content)←⍎'filename #.MappingHandlers.',handler,' request'
:Else
mimeType←#.Boot.ms.Config.ContentTypes tableLookup ext
content←{{(⎕NUNTIE ⍵)⊢⎕NREAD ⍵,(⎕DR' '),¯1}⍵ ⎕NTIE 0}filename
:EndIf
r[7]←mimeType
r[4 5 6]←1 200 'OK'
r[9]←⊂NL,⍨∊NL,⍨¨'Content-Type: ' 'Content-Length: ',⍕¨mimeType(≢10⊃r)
r[10]←⊂content
:Else
r[4 5 6 7]←1 404 'NOT FOUND' ''
r[9 10]←⊂''
:EndIf
:ElseIf request.isAPLJax
_Args←args
_Request←request
⎕THIS #.MiServer.MoveRequestData _Request
_what←_Request.GetData'_what'
_event←_Request.GetData'_event'
_value←_Request.GetData'_value'
_selector←_Request.GetData'_selector'
_target←_Request.GetData'_target'
_currentTarget←_Request.GetData'_currentTarget'
_callback←_Request.GetData'_callback'
:If _CallbackFn≢'Callback'
r←⍎'_Args ',_CallbackFn,' _Request'  ⍝ did you specify your own HTMLRenderer callback function?
:Else
cbdata←Callback
r[10]←⊂UnicodeToHtml #.JSON.toAPLJAX cbdata ⍝ we expect an APLJAX-style response
r[4 5 6 7]←1 200 'OK' 'application/json'
r[9]←⊂NL,⍨∊NL,⍨¨'Content-Type: ' 'Content-Length: ',¨⍕¨'application/json'(≢10⊃r)
:EndIf
:EndIf
∇
∇ file HandleMSP REQ;⎕TRAP;inst;class;z;props;lcp;args;i;ts;date;n;expired;data;m;oldinst;names;html;sessioned;page;root;MS3;token;mask;resp;t;RESTful;APLJax;flag;path;name;ext;list;fn
⍝ Handle a "MiServer Page" request
path name ext←#.Files.SplitFilename file
RETRY:
:If 1≠n←⊃⍴list←''#.Files.List file ⍝ does the file exist?
:If 0=n ⍝ no match
:If Config.RESTful ⍝ check for RESTful URI
(list file)←Config FindRESTfulURI REQ
n←⊃⍴list
:EndIf
:Else ⍝ multiple matches??
1 Log'Multiple matching files found for "',file,'"?'
:EndIf
:If 1≠n
:If 0=n
:AndIf #.Files.DirExists Config.AppRoot,REQ.OrigPage↓⍨'/\'∊⍨⊃REQ.OrigPage
→0⍴⍨CheckDirectoryBrowser REQ
:EndIf
REQ.Fail 404 ⋄ →0
:EndIf
:EndIf
date←∊list[1;3]
MS3←RESTful←expired←0
APLJax←REQ.isAPLJax
:If sessioned←326=⎕DR REQ.Session ⍝ do we think we have a session handler active?
:AndIf 0≠⍴REQ.Session.Pages     ⍝ Look for existing Page in Session
:AndIf (n←⍴REQ.Session.Pages)≥i←REQ.Session.Pages._PageName⍳⊂REQ.Page
inst←i⊃REQ.Session.Pages ⍝ Get existing instance
:If expired←inst._PageDate≢date  ⍝ Timestamp unchanged?
:AndIf expired←(⎕SRC⊃⊃⎕CLASS inst)≢(1 #.Files.ReadText file)~⊂''
oldinst←inst
REQ.Session.Pages~←inst
4 Log'Page: ',REQ.Page,' ... has been updated ...'
:EndIf
:AndIf ~expired
4 Log'Using existing instance of page: ',REQ.Page
:If 9=⎕NC'#.HtmlPage'
:If MS3←∨/(∊⎕CLASS inst)∊#.HtmlPage ⋄ inst._Request←REQ ⋄ :EndIf
:EndIf
:If 9=⎕NC'#.RESTfulPage'
:If RESTful←∨/(∊⎕CLASS inst)∊#.RESTfulPage
inst._Request←REQ
:EndIf
:EndIf
:Else
:Trap 11 22 92
inst←Config.AppRoot LoadMSP file ⍝ ⎕NEW ⎕SE.SALT.Load file,' -target=#.Pages'
:Case 11 ⋄ REQ.Fail 500 ⋄ 1 Log'Domain Error trying to load "',file,'"' ⋄ →0 ⍝ Domain Error: HTTP Internal Error
:Case 22 ⋄ REQ.Fail 404 ⋄ 1 Log'File not found - "',file,'"' ⋄ →0 ⍝ File Name Error: HTTP Page not found
:Case 92 ⋄ REQ.Response.HTML,←'<p>Unable to load page ',REQ.Page,' due to a translation error.<br/>This is typically caused by trying to load a page containing Unicode characters when running MiServer under a Classic (not Unicode) version of Dyalog APL.</p>'
REQ.Fail 500 ⋄ →0
:EndTrap
4 Log'Creating new instance of page: ',REQ.Page
inst._PageName←REQ.Page
inst._PageDate←date
MS3←RESTful←0
:If 9=⎕NC'#.HtmlPage'
:If MS3←∨/(∊⎕CLASS inst)∊#.HtmlPage
:OrIf RESTful←∨/(∊⎕CLASS inst)∊#.RESTfulPage
inst.(_Request _PageRef)←REQ inst
:If 0≡REQ.RESTfulReq
REQ.RESTfulReq←''
:EndIf
:EndIf
:EndIf
⍝ ======= Expiration (newer version of page is available) Logic =======
⍝ If RESTful or not sessioned, let anything through
⍝ If sessioned and expired, let it though
⍝ If sessioned but not expired, check if GET
:If RESTful<sessioned>expired
:AndIf ~REQ.isGet
inst._TimedOut←1
:EndIf
:If sessioned ⋄ REQ.Session.Pages,←inst ⋄ inst.Session←REQ.Session.ID ⋄ :EndIf
:EndIf
:If sessioned ⋄ token←REQ.(Page,⍕Session.ID)
:ElseIf ~0∊⍴REQ.PeerAddr ⋄ token←REQ.(Page,PeerAddr)
:Else ⋄ token←⍕⎕TID
:EndIf
⍝!!!BPB!!! Finish Me
:If 0≠inst.⎕NC'Cacheable'
:AndIf inst.Cacheable
:AndIf ~0∊⍴inst._cache
REQ.Response.HTML←inst._cache
→0
:EndIf
:Hold token
onHandleMSP REQ ⍝ overridable
:If expired∧REQ.isPost ⍝ move old public fields (those beginning with '_' are excluded)
{0:: ⋄ ⍎'inst.',⍵,'←oldinst.',⍵}¨⊃∩/{⍵/⍨'_'≠⊃¨⍵}¨(inst oldinst).⎕NL ¯2.2
:EndIf
⍝ Move arguments / parameters into Public Properties
inst MoveRequestData REQ
fn←'Render'
:If APLJax>RESTful ⍝ if it's an APLJax (XmlHttpRequest) request (but not web service)
REQ.Response.NoWrap←1
fn←'APLJax' ⍝ default callback function name
:If MS3
inst._what←REQ.GetData'_what'
inst._event←REQ.GetData'_event'
inst._value←REQ.GetData'_value'
inst._selector←REQ.GetData'_selector'
inst._target←REQ.GetData'_target'
inst._currentTarget←REQ.GetData'_currentTarget'
inst._callback←REQ.GetData'_callback'
:If ~0∊⍴inst._callback ⍝ does the request specify a callback function?
fn←inst._callback
:EndIf
:EndIf
:ElseIf RESTful
fn←'Respond'
:ElseIf MS3
fn←'Compose'
:EndIf
:If 3≠⌊|inst.⎕NC⊂fn            ⍝ and is it a public method?
1 Log'Method "',fn,'" not found (or not public) in page "',REQ.Page,'"'
REQ.Fail 500
→0
:EndIf
:If MS3
:If APLJax
inst._resetAjax
:Else
inst._init ⍝ reset instance's content
:EndIf
:EndIf
:If (1=Config.TrapErrors)∧9=⎕NC'#.DrA' ⋄ ⎕TRAP←#.DrA.TrapServer
:ElseIf (0=Config.Production) ⋄ ⎕TRAP←(800 'C' '→FAIL')(811 'E' '⎕SIGNAL 801')(813 'E' '⎕SIGNAL 803')(812 'S')(85 'N')(0 'E' '⍎#.Boot.Oops') ⍝ enable development debug framework
:EndIf
:If flag←APLJax
:AndIf flag←inst.{6::0 ⋄ _DebugCallbacks}⍬
:EndIf
:Trap 85   ⍝ we use 85⌶ because "old" MiPages use REQ.Return internally (and don't return a result)...
resp←flag Debugger'inst.',fn,(MS3⍱RESTful)/' REQ'  ⍝ ... whereas "new" MiPages return the HTML they generate
resp←(#.JSON.toAPLJAX⍣APLJax)resp
inst._TimedOut←0
:If RESTful
:If ~∨/(⊂'content-type')(≡#.Strings.nocase)¨REQ.Response.Headers[;1]
'Content-Type'REQ.SetHeader'application/json'
resp←1 #.JSON.fromAPL resp
:EndIf
:EndIf
REQ.Return resp
:Else
:If APLJax
1 Log'No result returned by callback method "',fn,'" in page "',REQ.Page,'"'
REQ.Return''
:EndIf
:EndTrap
:If ~REQ.Response.NoWrap
:If MS3∨RESTful
inst.Wrap
:Else
inst.Wrap REQ
:EndIf
:ElseIf MS3>APLJax
inst.Render
:EndIf
:EndHold
∇
∇ r←UnicodeToHtml txt;u;ucs
:Access public shared
⍝ converts chars ⎕UCS >127 to HTML safe format
r←,⎕FMT txt
u←127<ucs←⎕UCS r
(u/r)←(~∘' ')¨↓'G<&#ZZZ9;>'⎕FMT u/ucs
r←∊r
∇
tableLookup←{(⍺[;2],⊂'')[⍺[;1]⍳⊆,⍵]}
:EndClass
﻿:Class MS3Server : MiServer
⍝ This is an example of a customized MiServer
⍝ The MiServer class exposes several overridable methods that can be customized by the user
⍝ In this case we customize the onServerLoad method
⍝ The ClassName parameter in the Server.xml configuration file is used to specify the customized class
:Include #.MS3SiteUtils ⍝∇:require =/MS3SiteUtils
∇ Make config
:Access Public
:Implements Constructor :Base config
⍝ Version warning
:If 14>{⊃(//)⎕VFI ⍵/⍨2>+\'.'=⍵}2⊃'.'⎕WG'APLVersion'
⎕←''
⎕←'MiServer 3.0 itself will run under Dyalog APL versions 13.2 and later'
⎕←'However, the MS3 MiSite uses features found only in Dyalog APL versions beginning with 14.0'
⎕←'From version 15.0, Dyalog APL is available free of charge at http://www.dyalog.com'
⎕←''
⎕←'Please restart the MS3 MiSite using Dyalog APL version 14.0 or later...'
→
:EndIf
∇
∇ onServerLoad
:Access Public Override
⍝ Handle any server startup processing
{}C ⍝ initialize CACHE
∇
∇ onServerStart;inst;class;mps
:Access public override
⍝ Uncomment to pre-render index.mipage:
⍝ ⎕SE.SALT.Load #.Boot.AppRoot,'Code/Templates/MiPageSample.dyalog'
⍝ inst←⎕NEW ⎕SE.SALT.Load #.Boot.AppRoot,'index.mipage'
⍝ inst.Compose
⍝ C.index←inst.Render
∇
:EndClass
﻿:Namespace MS3SiteUtils ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝
⍝ ┌─────────────────────────────────────────────────────────────────────────────────────────────┐ ⍝
⍝ │ This is the collection of utility functions used by MS3Server and the index page of the     │ ⍝
⍝ │ MiServer Sample Site, MS3, accessible at miserver.dyalog.com                                │ ⍝
⍝ ├─────────────────────────────────────────────────────────────────────────────────────────────┤ ⍝
⍝ │ The code is split up in six sections:                                                       │ ⍝
⍝ │                                                                                             │ ⍝
⍝ │     ∘ A_GENERAL has utilities that appropriate to APL or MiServer in general                │ ⍝
⍝ │                                                                                             │ ⍝
⍝ │     ∘ B_FILES has various tools to list, read, and cache files and their content            │ ⍝
⍝ │                                                                                             │ ⍝
⍝ │     ∘ C_STRINGS string and multi-string manipulation and extraction of information          │ ⍝
⍝ │                                                                                             │ ⍝
⍝ │     ∘ D_ELEMENTS aids to create elements for the HTML Document Object Model                 │ ⍝
⍝ │                                                                                             │ ⍝
⍝ │     ∘ E_TUTORIAL has subroutines for the Tutorial tab on the index page                     │ ⍝
⍝ │                                                                                             │ ⍝
⍝ │     ∘ F_CONSTANTS niladic functions that return unchanging values and cache                 │ ⍝
⍝ │                                                                                             │ ⍝
⍝ └─────────────────────────────────────────────────────────────────────────────────────────────┘ ⍝
⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝
:SECTION A_GENERAL ⍝ UTILITY FUNCTIONS THAT ARE NOT SPECIFIC TO THE "MS3" SITE
ç←{⊂⍣(1=≡,⍵)⊢⍵} ⍝ enclose if simple     Mnemonic for the V16 glyph
FwSl←'[\\/]+'⎕R'/' ⍝ Make all slash-block into single forward-slashes
Q←'"'∘,,∘'"' ⍝ Surround with quotes
FromCSV←↑{'"'~¨⍨1↓¨t⊂⍨(','=t)∧~≠\'"'=t←',',⍵}¨ ⍝ Convert CSV VTV to matrix (no escaped chars)
Section←{ ⍝ Extract section ⍺:: from code ⍵
regex←'^\s*⍝\s*',⍺,':(:.*?)$((\R^⍝(?!\s*\w+::).*?$)*)' ⍝ find '  ⍝  LeftArg:: some text'
opts←('Mode' 'M')('DotAll' 1)('ML' 1)                  ⍝ '^'≡linestart  EOL∊'.'  1st-only
res←regex ⎕S'\1\2'⍠opts⊢⍵                              ⍝ return parts 1 and 2
}
Controls←{ ⍝ Extract names of controls used in sample ⍵
(Words'Control'Section Read ⍵)~'_',¨NSS
}
Of←{⍵/⍨⍺⍺¨⍵} ⍝ Those elements of ⍵ that satisfy ⍺⍺ element
:ENDSECTION ⍝ ─────────────────────────────────────────────────────────────────────────────────
⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝
:SECTION B_FILES ⍝ FUNCTIONS THAT READ FILES
Score←{(102-2×(50↑⊃⌽⍵)⍳⊂⍺)-∨/'Advanced'⍷⊃⍵} ⍝ Relevance score on index of control in list
List←{ ⍝ Files in site folder
⍺←1↓FILEEXT                                      ⍝ default .ext
mods←' -rec -raw -full=2 -ext=',⍺                ⍝ subdirs no-format rooted spec-ext
list←(⎕SE.SALT.List #.Boot.AppRoot,⍵,mods)[;1 2] ⍝ begin at application root (MS3/)
f←~d←list[;1]≡¨⊂'<DIR>'                          ⍝ find dirs
list←FwSl list[;2]                               ⍝ normalize slashes for WWW
(d/list),←'/'                                    ⍝ mark dirs with final slashes
(f/list),←⊂'.',⍺                                 ⍝ add .ext to files
list↓¨⍨¯1+1⍳⍨(FwSl ⍵)⍷⊃list                      ⍝ trim
}
∇ r←Read page;i ⍝ Read a page via the #.CACHE.read (C)
:Trap 0
:If (≢C.read.keys)≥i←C.read.keys⍳⊂page ⍝ is it cached, and if so, save position
r←i⊃C.read.data                     ⍝ extract
:Else
C.read.data,←⊂r←1 #.Files.ReadText #.Boot.AppRoot,page,(~'.'∊page)/FILEEXT
C.read.keys,←⊂page
:EndIf
:Else
r←,⊂'[failed to read "',page,'"]'
:EndTrap
∇
:ENDSECTION ⍝ ─────────────────────────────────────────────────────────────────────────────────
⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝
:SECTION C_STRINGS ⍝ MANIPULATION OF CHARACTER VECTORS AND VECTORS OF CHARACTER VECTORS
Slash←'/'∘=⊂⊢
Name←{1↓⊃⌽(Slash ⍵)~⊂,'/'}  ⍝ '/aaa/bbb/ccc/ddd/' →         'ddd' (only in BuildTree)
Words←{(1↓¨(∊∘' .'⊂⊢)' ',⍵)~⊂''} ⍝ Split at spaces and dots and remove empty pieces
NoExt←{'.'∊⍵:⍵↓⍨-'.'⍳⍨⌽⍵⋄⍵} ⍝ 'aaa.bbb.ccc'  →  'aaa.bbb'
NoNL←'\n' '\r'⎕R' ' ''⍠'Mode' 'D' ⍝ Replace newlines with spaces
LastSeg←{⍺←⊢ ⋄ 1↓⍺⊃⌽Slash '/',⍵} ⍝ ⍺th (default 1st) /-separated segment from the end
Levels←{(+/¨'/'=⍵)+~'/'=(⊃⌽)¨⍵} ⍝ Number of /s adjusted for categories' final /
Shuffle←(?⍨∘≢⊃¨⊂)⊢⊂⍨⊢≡¨1↑⊢ ⍝ Shuffle the root elements of an XML snippet
:ENDSECTION ⍝ ─────────────────────────────────────────────────────────────────────────────────
⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝
:SECTION D_ELEMENTS ⍝ FUNCTIONS THAT AUTOMATE THE CREATION OF DOM ELEMENTS AND HTML CODE
Over←{
⊂'<strong>',⍺,'</strong><br><small>',('/'⎕R'<br />'⊢⍵),'</small>'
}
External←{ ⍝ Icon off-site link
⍺←''
'<a class=".external" target="_blank" data-dyalog-tip="External link" href="',⍵,'">',⍺,'&#x1f517;</a>'
}
DescrEmbed←{ ⍝ Link to and iframed page
l←('Description'Section Read ⍵),'<br />'
l,←'<a href="/',⍵,'">Open this '
l,←'simple sample' 'advanced sample' 'mini-app'⊃⍨1⍳⍨∨/¨'Simple' 'Advanced'⍷¨⊂⍵
l,←' in a new tab</a>'
e←'<iframe src="/',⍵,'?nowrapper=1"></iframe>'
l e
}
Link←{ ⍝ New-tab link with optional (⍺) charvec:"tooltip" or 1:open in new window
⍺←0
'<a href=',(Q⊃⌽⍵),((~∨/0 1∊⍺)/' data-dyalog-tip=',Q ⍺),((1∊⍺)/' target="_blank"'),'>',(⊃⍵),'</a>'
}
LinkNew←{ ⍝ New-tab link with optional (⍺) "tooltip"
⍺←0
'<a href=',(Q⊃⌽⍵),((⍺≢0)/' data-dyalog-tip=',Q ⍺),'>',(⊃⍵),'</a>'
}
DocLink←{ ⍝ Link to WidgetDoc with appropriate parameters
link←DocUrl ⍵
ctor←'ctor'ForControl ⍵
0=⍴ctor::Link ⍵ link ⍝ upon fail to retrieve info
('Constructor: ',ctor)Link ⍵ link
}
DocUrl←{
'/Documentation/DyalogAPIs/WidgetDoc?namespace=_',('ns'ForControl ⍵),'&widget=',⍵
}
DocTreeLink←{ ⍝ Link to file in doc folder
'/'=⊃⌽⍵:''
('/Documentation',⍵)'target="_blank"'
}
ReadingTree←{ ⍝ Create tree of documentation links
l←'/',¨⍵~⊂''
(Name∘NoExt¨l)(Levels l)(DocTreeLink¨l)
}
∇ r←RelDocs w;list;item ⍝ Links to related samples
list←'relevant'ForControl w
r←''
:For item :In list
r,←'<p>',(Link('filedescr'ForFile item)item),'</p><br/>'
:EndFor
r↓⍨←¯5
∇
FormatList←{ ⍝ List of category-title pairs
⍺←1↓FILEEXT
(⍺≡1↓FILEEXT)CatAndItem¨{'/'≠⊃⌽⍵}Of ⍺ List ⍵
}
CatAndItem←{ ⍝ (category) (filename/description)
cat←2 LastSeg ⍵
cat←'General' 'Mini App'cat['Documentation' 'Applications'⍳⊂cat]
cat((~⍺)Link((NoExt LastSeg)⍣(~⍺)('Description'Section Read)⍣⍺⊢⍵)⍵)
}
FilterTable←{
dt←⍺ New _.DataTable ⍵
dt.Width←'100%'
dt.Options.autoWidth←_true
dt.Options.mark←_true                ⍝ highlight search-terms
sink←'lengthMenu'dt.Set(10 25 50 ¯1)(10 25 50 'All')  ⍝ also allow "All"
dt.Options.columns←⎕NS¨4⍴⊂⍬          ⍝ options per column
dt.Options.columns[4].visible←_false ⍝ hide column4
dt.Options.dom←'l<"#fltcnt_',(1⊃⍺),'.fltcnt">ftipr'    ⍝ insert div with id "fltcnt_{id}" into table header
sink←'yadcf.Filters[1].(column_number select_type filter_container_id)'dt.Set 3 'chosen'('fltcnt_',1⊃⍺)
sink←'yadcf.Filters[1].(filter_type select_type_options filter_default_label)'dt.Set'multi_select'(⊂'{width:"30em"}')'Filter by library'
dt
}
:ENDSECTION ⍝ ─────────────────────────────────────────────────────────────────────────────────
⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝
:SECTION E_TUTORIAL ⍝ FUNCTIONS USED BY THE index PAGE'S Tutorial TAB
∇ t←Elements;tabs;r;sp;fs;ig;colors;rgbs;button;p;cbs;t2;g
t←'#div'New _.div'This div is the main container of this tab. ' ⍝ #div
p←'#p't.Add _.p'This is the beginning of a paragraph, ' ⍝ #p
'#span'p.Add _.span'but this phrase is a separate piece of text inside the paragraph. ' ⍝ #span
button←'#Button't.Add _.Button'Button' ⍝ #Button
sp←'#StackPanel't.Add _.StackPanel ⍝ #StackPanel
sp.Add'StackPanel'
'#EditField'sp.Add _.EditField'EditField' 'EditField' ⍝ #EditField
'#Select'sp.Add _.Select'Red' 'Green' 'Blue' ⍝ #Select
'#Input1't.Add _.Input'number' 426 ' Number Input: ' ⍝ #Input1
t.Add _.br
fs←'#Fieldset1't.Add _.Fieldset'CheckBoxes' ⍝ #Fieldset1
cbs←{'.CheckBox'New _.CheckBox ⍵}¨'checked' 'unchecked' ⍝ .CheckBox
ig←'#InputGrid'fs.Add _.InputGrid('Checked' 'Unchecked')cbs ⍝ #InputGrid
ig.Flip←1 ⍝ #InputGrid
fs←'#Fieldset2't.Add _.Fieldset'RadioButtonGroup' ⍝ #Fieldset2
'#RadioButtonGroup'fs.Add _.RadioButtonGroup('Selected' 'Unselected')1 'right' ⍝ #RadioButtonGroup
'#h5't.Add _.h5'Slider' ⍝ #h52
'#Input2't.Add _.Input'range' 1 ⍝ #Input2
'#List't.Add _.List('Primaries' 'Cyan' 'Magenta' 'Yellow' 'Key' 'Black')(1 2 2 2 1 2) ⍝ #List
colors←'aqua' 'black' 'blue' 'fuchsia' 'gray' 'green' 'lime' 'maroon' ⍝ #Table
rgbs←'#00FFFF' '#000000' '#0000FF' '#FF00FF' '#808080' '#008000' '#00FF00' '#800000' ⍝ #Table
colors,←'navy' 'olive' 'purple' 'red' 'silver' 'teal' 'white' 'yellow' ⍝ #Table
rgbs,←'#000080' '#808000' '#800080' '#FF0000' '#C0C0C0' '#008080' '#FFFFFF' '#FFFF00' ⍝ #Table
'#Table't.Add _.Table('Color' 'RGB'⍪colors,⍪rgbs)'' 1 ⍝ #Table
t.Add _.style ScriptFollows
⍝ #div {padding: 10px; margin: 10px;}
⍝ #Button {vertical-align: top; margin: 5px;}
⍝ #StackPanel {display: inline-block; padding: 5px;}
⍝ #Fieldset1 {display: inline-block;}
⍝ #Fieldset2 {display: inline-block;}
⍝ #h5 {margin: 1em 0 0.5em 0;}
⍝ #Input1 {width: 4em;}
⍝ #Input2 {width: 100%;}
⍝ #List {display: inline-block; margin: 1em; padding: 5px 5px 5px 25px;}
⍝ #Table {display: inline-block; max-height: 7em; overflow-y: scroll; margin-top: 1em;}
⍝
⍝ /**/#span:hover, #p:hover, #div:hover, #Button:hover, #StackPanel:hover, #EditField:hover, #Select:hover, #Fieldset1:hover, #Fieldset2:hover, .CheckBox:hover, #RadioButtonGroup:hover, #Input1:hover, #Input2:hover, #h5:hover, #progress:hover, #List:hover, #Table:hover {
⍝     box-shadow: 0 0 5px 1px orange,0 0 5px orange inset;
⍝ }
'ShowElementInfo'∘AddHandler¨'#div' '#p' '#span' '#Button' '#EditField' '#StackPanel' '#Select' '#Fieldset1' '#Fieldset2' '.CheckBox' '#RadioButtonGroup' '#Input1' '#h5' '#Input2' '#progress' '#List' '#Table'
t←'Common elements't
∇
∇ r←ShowElementInfo;code;ctrl;info
:Access Public
ctrl←_selector~'#.12'
info←'<h2>This element is called <code>_.',ctrl,'</code></h2>'
info,←P'descr'ForControl ctrl
info,←'<h3>Constructor (what goes to the right of <code>Add _.',ctrl,'</code>)</h3>'
info,←P Link('ctor'ForControl ctrl)(DocUrl ctrl)
code←⊃_selector CodeFrom ⎕NR'Elements'
info,←'<h3>Put this in the <code>Compose</code> function</h3>',P code
r←'#info'Replace info
r,←ShowPdf
∇
∇ t←Formatting
t←'#margrad'New _.div'This div has inner padding and gradient backround' ⍝ #margrad
'#boldin't.Add _.p'Bold indented text which has to be extremely long in order to show that only the first line is being indented.' ⍝ #boldin
'#huge't.Add _.span'Huge text with outer margin' ⍝ #huge
'#expund't.Add _.span'Expanded and underlined' ⍝ #expund
'#bluebox't.Add _.p'Blue box with shadow' ⍝ #bluebox
'#centshad't.Add _.p'Centered text with shadow' ⍝ #centshad
'#whimg't.Add _.p'White text on image background' ⍝ #whimg
'#border't.Add _.p'Surrounded by borders and top-right corner is round' ⍝ #border
'#img' 'src="Examples/Data/4lines.png"' 'alt="Image"' 'title="Four lines high"'t.Add _.img ⍝ #img
'#narrow't.Add _.p'Inline paragraph with limited width and single line height.' ⍝ #narrow
'#mono't.Add _.span'Monospace, ' ⍝ #mono
'#sans't.Add _.span'Sans-Serif, ' ⍝ #sans
'#serif't.Add _.span'and Serif.' ⍝ #serif
t.Add _.style ScriptFollows
⍝ #margrad {padding: 2em; background: linear-gradient(White, SkyBlue);}
⍝ #boldin {font-weight: bold; text-indent: 2em;}
⍝ #huge {font-size: x-large; margin: 2em;}
⍝ #expund {text-decoration: underline; letter-spacing: 0.5ex;}
⍝ #bluebox {background-color: SkyBlue; box-shadow: 0.25em 0.5em 1em Gray;}
⍝ #centshad {text-align: center; text-shadow: 0.1em 0.3em 0.2em Blue;}
⍝ #whimg {color: white; background-image: url(Examples/Data/pic3.png);}
⍝ #serif {font-family: "Times New Roman", Times, serif; font-size: 150%;}
⍝ #sans {font-family: Arial, Helvetica, sans-serif; font-size: 150%;}
⍝ #mono {font-family: "Courier New", Courier, monospace; font-size: 150%;}
⍝ #border {border: 0.25em solid Blue; border-top-right-radius: 1.5em;}
⍝ #img {height: 4em; opacity: 0.5;}
⍝ #narrow {width: 20%; display: inline-block; line-height: 1;}
⍝
⍝ /**/#boldin:hover, #huge:hover, #expund:hover, #centshad:hover, #serif:hover, #sans:hover, #mono:hover, #narrow:hover {
⍝     box-shadow: 0 0 5px 1px orange,0 0 5px orange inset;
⍝ }
⍝ /**/#margrad:hover {box-shadow: 0 0 5px 2px Orange inset;}
⍝ /**/#whimg:hover {box-shadow: 0 0 5px 2px Orange;}
⍝ /**/#border:hover {box-shadow: 0 0 5px 2px Orange, 0 0 5px 2px Orange inset;}
⍝ /**/#img:hover {box-shadow: 0 0 5px 3px Orange,0 0 5px 3px Orange;}
⍝ /**/#bluebox:hover {box-shadow:0 0 5px 1px Orange, 0 0 5px 1px Orange inset, 0.25em 0.5em 1em Gray;}
'ShowInfo'∘AddHandler¨'#margrad' '#boldin' '#huge' '#expund' '#bluebox' '#centshad' '#whimg' '#serif' '#sans' '#mono' '#border' '#img' '#narrow'
t←'Formatting't
∇
∇ t←Positioning
Add _.style ScriptFollows
⍝ #parent {position: relative; height: 32em; margin: 1em;}
⍝ /**/#parent, #parent div {margin-top: 1em; margin-bottom: 1em; padding: 1ex;}
⍝ /**/#parent div {width: 50%; border: 1px solid black; }
⍝ #default {/* nothing to see here */}
⍝ #textcenter {text-align: center;}
⍝ #textright {text-align: right;}
⍝ #boxright {margin-left: auto; margin-right: 0;}
⍝ #boxcenter {margin-left: auto; margin-right: auto;}
⍝ #textbottom {position: relative; height: 4em;}
⍝ #textbottom span {position: absolute; bottom: 1ex;}
⍝ #boxbottom {position: absolute; bottom: 0;}
⍝
⍝ /**/#parent:hover, #parent div:hover {
⍝     box-shadow: 0 0 5px 1px orange,0 0 5px orange inset;
⍝ }
t←'#parent'New _.div'Parent element with "relative" position so we can align vertically' ⍝ #parent
'#default't.Add _.div'Default position and text alignment' ⍝ #default
'#textcenter't.Add _.div'Centered text' ⍝ #textcenter
'#textright't.Add _.div'Right-aligned text' ⍝ #textright
'#boxcenter't.Add _.div'Centered element' ⍝ #boxcenter
'#boxright't.Add _.div'Right-aligned element' ⍝ #boxright
'#textbottom't.Add _.div,New _.span'Bottom-aligned text' ⍝ #textbottom
'#boxbottom't.Add _.div'Bottom-aligned element' ⍝ #boxbottom
'ShowInfo'∘AddHandler¨'#parent' '#default' '#textcenter' '#textright' '#boxcenter' '#boxright' '#textbottom' '#boxbottom'
t←'Positioning't
∇
∇ t←Embedding;c
Add _.style ScriptFollows
⍝ #embed>* {margin: 1ex;}
⍝ #quack {filter: hue-rotate(-205deg); padding: 2em;}
⍝ #quack:hover {filter:  hue-rotate(0deg);}
⍝ #bear {padding: 0.2em; border: 1px solid silver; margin: 1ex;}
⍝ #duck {height: 12em; transform: rotate(-15deg);}
⍝ #poly {height: 240px; width: 200px}
⍝ #poly polygon {fill: orange; stroke: purple; stroke-width: 1ex;}
⍝ #pdf {height: 240px; width:400px}
⍝
⍝ /*#bear:hover, #quack:hover, #duck:hover, #poly:hover, #embed>div>div:hover*/ #embed *:hover{
⍝     box-shadow: 0 0 5px 1px orange,0 0 5px orange inset;
⍝ }
t←'#embed'New _.div
t.Add _.br
'#bear' 'src=Examples/Data/bear.mp4' 'autoplay=' 'loop=' 'muted='t.Add _.video'No video support!' ⍝ #bear
'#quack' 'controls='t.Add _.Audio'Examples/Data/quack.mp3' ⍝ #quack
'#duck' 'src=Examples/Data/duck.png' 'alt="Silly Duck"'t.Add _.img'No img support!' ⍝ #duck
'#poly't.Add _.svg,'points=20,20 50,120 120,190 180,80'New _.polygon ⍝ #poly
c←'style=display:inline-block;position:relative;'t.Add _.div
'#pdf' 'style=position:absolute;height:100%;width:100%;top:0;' 'onclick="$(this).hide();"'c.Add _.div
'#pdf' 'data=Examples/Data/licence.pdf'c.Add _.object ⍝ #pdf
'ShowInfo'∘AddHandler¨'#bear' '#duck' '#quack' '#poly' '#pdf'
t←'Embedding't
∇
∇ r←ShowPdf
r←(_selector≢'#pdf')/Execute'$("#pdf").show();'
∇
∇ t←Interaction;cb;m
Add _.style ScriptFollows
⍝ #ui>* {margin: 1ex;}
⍝ #adjust {width: 8em;}
⍝ #adjust:hover {text-align: justify;}
⍝ #adjust:active {text-align: right;}
⍝ #callback {width: 8em;}
⍝ #move {height: 6em; width: 12em; border: 1px solid black;}
⍝ #move div {height: 3em; width: 6em; cursor: move; background: silver;}
⍝ /**/ #ui>*:hover {box-shadow: 0 0 5px 1px orange,0 0 5px orange inset;}
t←'#ui'New _.div
'#adjust't.Add _.Button'Styling for reaction to hover and click' ⍝ #adjust
cb←'#callback't.Add _.Button('Update with callback click ',#.Dates.(TSFmt ⎕TS)) ⍝ #callback
cb.On'click' 'CallbackFn' ⍝ #callback
'#move't.Add _.div,New _.div'Movable (drag me!)' ⍝ #move
m←Add _.jqDraggable'#move div' ⍝ #move
m.Set'containment' 'parent' ⍝ #move
'ShowInfo'∘AddHandler¨'#adjust' '#callback' '#move'
t←'Interaction't
∇
∇ r←CallbackFn ⍝ #callback
:Access Public ⍝ #callback
r←'#callback'Replace'Update with callback click ',#.Dates.(TSFmt ⎕TS) ⍝ #callback
∇ ⍝ #callback
∇ t←Windows;c;p;d
Add _.style ScriptFollows
⍝ #win {margin: 1em; padding: 1ex;}
⍝ #win button {margin: 1em;}
⍝ #win #color {display: inline-block;}
⍝ #win #color:hover {box-shadow: 0 0 5px 1px orange,0 0 5px orange inset;}
⍝ #css {width: 6em; padding: 1ex; background: silver; border-radius: 0.5ex; box-shadow: 0.25em 0.5em 2em grey;}
⍝ #dialog {display: none;}
⍝ /**/ #css:hover {width: 6em; background: silver; box-shadow: 0 0 5px 1px orange,0 0 5px orange inset,0.25em 0.5em 2em grey;}
⍝ /**/ #win>button:hover {box-shadow: 0 0 5px 1px orange,0 0 5px orange inset;}
t←'#win'New _.div
t.Add _.p'Choose a color to get a matching notification:'
d←'#color't.Add _.div
d.On'mousedown' 'ShowInfo'
c←d.Add _.ejColorPicker'#ffff00' ⍝ #color
c.On'close' 'ColorFn'('chosenColor' 'model' 'value') ⍝ #color
'#css't.Add _.div'CSS to give floating impression' ⍝ #css
'#dialog't.Add _.div'Content of dialog box widget' ⍝ #dialog
d←t.Add _.ejDialog'#dialog' 'Syncfusion Dialog' ⍝ #dialog
'showOnInit'd.Set _false ⍝ #dialog
'onclick="$(''#dialog'').ejDialog(''open'')"'t.Add _.Button'Open dialog' ⍝ #dialog
Add _.Handler'#win button' 'click' 'DialogFn'
'ShowInfo'AddHandler'#css'
t←'Windows &amp; Popups't
∇
∇ r←ColorFn;chosen;all;options ⍝ #color
:Access public ⍝ #color
chosen←0 #.Utils.hex⍕↓3 2⍴1↓Get'chosenColor' ⍝ #color
all←(0 0 0)(255 0 0)(0 255 0)(0 0 255)(319 319 0)(255 255 255) ⍝ #color
(options←⎕NS ⍬).color←'black' 'red' 'green' 'blue' 'yellow' 'black'⊃⍨(⊢⍳⌊/)+/¨2*⍨all-⊂chosen ⍝ #color
r←Execute options _.jBox.Notice('You chose ',Get'chosenColor') ⍝ #color
∇ ⍝ #color
∇ r←ShowDialog
:Access public
_selector←'#dialog'
r←ShowInfo
∇
∇ r←ShowInfo;info;css;code;fns
:Access Public
(code css)←_selector CodeFrom ⎕SRC⍎NoExt⊃⎕XSI ⍝ this ns
code←SplitFns code
info←'<h3>Put this in the <code>Compose</code> function</h3>',P Break⊃code
fns←1↓code
:If ×≢css
info,←'<h3>Put <code>Add _.style''&#8230;''</code> in <code>Compose</code> or add  this to the stylesheet</h3>'
info,←P Break css
:EndIf
:If ×≢fns
info,←'<h3>Add ','this funtion' 'these functions'⊃⍨2⌊≢fns
info,←' to the MiPage</h3>',P Break¨fns
:EndIf
r←'#info'Replace info
r,←ShowPdf
∇
∇ {ctrl}←callbackfn AddHandler sel
ctrl←sel~'#.12'
Add _.Handler sel'mousedown'callbackfn'' 'event.stopPropagation()'
∇
Break←{4↓∊'<br>'∘,¨⍵}
CodeFrom←{
(css lines)←↓⍉↑('⍝ ',⍺)∘Prep¨⍵/⍨('⍝ ',⍺)∘(∨/⍷)¨⍵
(lines/⍨~css)(css/lines)
}
Prep←{
c←#.Strings.deb ⍵
⍺≡c↑⍨-l←≢⍺:0('\w+\.Add'⎕R'Add'⊢c↓⍨¯1-l)
1(2↓c)
}
P←{∊('<p>',,∘'</p>')¨ç⍵}
SplitFns←{⍵⊂⍨1,2</≠\'∇'=⊃¨⍵}
:ENDSECTION ⍝ ─────────────────────────────────────────────────────────────────────────────────
⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝
:SECTION F_CONSTANTS ⍝ NILADIC FUNCTIONS THAT ACT LIKE :include'ABLE CONSTANTS
∇ r←NSS;types;names
:Access public
:If 0=C.⎕NC'NSS'
C.NSS←1↓¨1↓'_'#.⎕NL ¯9
names types←0 1 ⎕NINFO⍠1⊢#.Boot.AppRoot,'Examples/*'
C.NSS∩←LastSeg¨names/⍨1=types
:EndIf
r←C.NSS
∇
∇ r←GROUPS
:Access public
:If 0=C.⎕NC'GROUPS'
C.GROUPS←{#.Strings.deb(⍳∘'⍝'↓⊢)⊃⎕SRC #⍎⍵}¨'_',¨NSS
:EndIf
r←C.GROUPS
∇
∇ r←CACHE
:Access public
r←'#.CACHE'
∇
∇ r←FILEEXT
:Access public
r←#.Boot.ms.Config.DefaultExtension
∇
∇ C←C;scores;list;refs;srcs;control;i;info;ref;src;ctor;Read;Ø;demo
⍝ Return ref to cache (initialize cache if nonexistant)
:Access public
Read←1 #.Files.ReadText #.Boot.AppRoot∘, ⍝ no-cache reading
:Hold CACHE                          ⍝ prevent clashes
:If 9≠⎕NC CACHE                  ⍝ if cache is empty:
Ø←⊂''
C←⍎CACHE ⎕NS ⍬       ⍝ create with shortcut
C.read←⎕NS ⍬         ⍝ init cache for files
C.read.(keys←data←⍬) ⍝ init keys and data
C.controls←(#._.⎕NL ¯9)~⊂'Handler'                       ⍝ cache all controls
C.controlsoi←C.controls∘⍳ç ⋄ C.eocontrols←∊∘C.controls ç ⍝ hash tables
refs←#._⍎¨C.controls                                     ⍝ refs of all controls
C.ns←3↓¨⍕¨refs.##                                        ⍝ ns of each control
srcs←⎕SRC¨refs                                           ⍝ all sources
C.files←⊃⍪/{List'Examples/',⍵}¨NSS,⊂'Applications' ⍝ sample filenames
C.filesoi←C.files∘⍳ç                               ⍝ hash table
C.filedescr←('Description'Section Read)¨C.files    ⍝ Description:: for all files
C.demos←Controls¨C.files                           ⍝ controls demoed in each
scores←C.controls∘.Score↓⍉↑C.files C.demos         ⍝ controls vs files
C.rankings←(+/0<scores)↑¨↓⍒⍤1⊢scores  ⍝ cache all rankings
C.(descr ctor notes relevant reldocs doclinks)←Ø
info←FromCSV Read'IndexData/info.csv'
:For control ref src :InEach C.controls refs srcs
i←info[;1]⍳⊂control
:If i≤≢info
C.descr,←info[i;2]
C.notes,←info[i;3]
:Else
C.descr,←⊂NoNL'Description'Section src
C.notes,←⊂NoNL'Notes'Section src
:EndIf
ctor←{⍵↑⍨¯1+⌊/⍵⍳⎕UCS 13 10}'Constructor'Section src
:If ''≡ctor
C.ctor,←'[content [attributes]]' '[attributes]'[1+(⎕NEW ref).NoEndTag]
:Else
C.ctor,←⊂ctor
:EndIf
:If C.eocontrols⊂control
C.relevant,←⊂C.files[C.rankings⊃⍨C.controlsoi⊂control]
:Else
C.relevant,←Ø
:EndIf
:EndFor
C.cats←GROUPS[NSS⍳3↓¨⍕¨('#._'∘⍎¨C.controls).##]
C.reldocs←(RelDocs¨C.controls),Ø
C.doclink←(DocLink¨C.controls),Ø
C.used←{⊂2↓∊', '∘,¨C.doclink[C.controlsoi¨⍵]}¨C.demos
C.tasks←{Link('Description'Section Read ⍵)⍵}¨C.files
C.type←'simple' 'advanced' 'mini-app'[1⍳⍨¨↓⍉∨/¨'Simple' 'Advanced'∘.⍷C.files]
⍝ These cause an empty result if looked-up is not found
C.(filedescr demos rankings descr ctor notes notes ns),←Ø
:Else
C←⍎CACHE ⍝ establish shortcut
:EndIf
:EndHold
∇
ForControl←{ ⍝ e.g. 'notes'ForControl'DataTable'
(C.controlsoi⊂,⍵)⊃C⍎⍺
}
ForFile←{ ⍝ e.g. 'filedescr'ForFile'DataTable'
(C.filesoi⊂,⍵)⊃C⍎⍺
}
:ENDSECTION ⍝ ─────────────────────────────────────────────────────────────────────────────────
⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝ ⍝
:EndNamespace
﻿:Class MiPageSample : #.MiPage
⍝ This is a template that "wraps" the page content by
⍝ - adding a header and footer
⍝ - adding a handler that will toggle the display of the web page and its APL source code
:Field Public _Sessioned←0
∇ {r}←Wrap;lang;server;src;c
:Access Public
:If 0∊⍴Get'nowrapper'
server←_Request.Server
⍝ we need jQuery to toggle content/source, other resources will be loaded if needed
Use'JQuery' ⍝ this is a resource defined in Config/Resources.xml
⍝ set the title display in the browser to the name of the page or application
Add _.title('Advanced' 'Simple' 'Examples?' 'index' '_'⎕R'' '' ''server.Config.Name' '((-'.'⍳⍨⌽)↓⊢↑⍨1-'/'⍳⍨⌽)_Request.Page)
⍝ add a link to our CSS stylesheet
_CssReset←'/Styles/cssreset.css'
_CssOverride←'/Styles/sampleStyles.css'
⍝ set a meta tag to make it explicitly UTF-8
⍝  (Add _.meta).Set'http-equiv="content-type" content="text/html;charset=UTF-8"'
⍝ wrap the content of the <body> element in a div
'contentblock'Body.Push _.div
⍝ add a hidden division to the body containing the APL source code
(Add _.div(#.HtmlUtils.APLToHTMLColor src←⎕SRC⊃⊃⎕CLASS ⎕THIS)).Set'id="codeblock"' 'style="display: none;"'
⍝ extract the content and re-write it in parallel to the controls info div
c←Body.Content
Body.Content←''
Body.Add c
⍝ create a division with info about the controls used
Body.Add CtrlsDiv src
⍝ wrap the content of the <body> element in a div
'.bodyblock'Body.Push _.div
⍝ add the header to the top of the page and wrap the body in a div with id="wrapper"
Body.Push #.Files.ReadText server.Config.Root,'Styles/banner.txt'
'wrapper'Body.Push _.div
⍝ add a JQuery event handler to toggle the web page/APL source code
Add _.Script ScriptFollows
⍝ $(function(){
⍝   $("#tocode").click(function(){
⍝     $("#contentblock").hide();
⍝     $("#codeblock").show();
⍝     $("#widgethelp").addClass("sliddown");
⍝     $("#topage").removeClass("activetab");
⍝     $("#tocode").addClass("activetab");
⍝   });
⍝   $("#topage").click(function(){
⍝     $("#contentblock").show();
⍝     $("#codeblock").hide();
⍝     $("#widgethelp").removeClass("sliddown");
⍝     $("#topage").addClass("activetab");
⍝     $("#tocode").removeClass("activetab");
⍝   });
⍝ });
:Else
Head.Add _.StyleSheet'/Styles/sampleStyles.css'
Body.class←'bodyblock'
:EndIf
⍝ call the base class Wrap function
r←⎕BASE.Wrap
∇
∇ r←CtrlsDiv source;control;controls;ns;pattern
⍝ Creates a div with info on the controls used in source
⍝ First we extract proper lists of controls
controls←(⍴#.MS3SiteUtils.NSS)/⊂''
source←(⍳∘'⍝'↑⊢)¨source      ⍝ remove comments
source←{⍵/⍨~≠\''''=⍵}¨source ⍝ remove strings but leaves one ' as separator
pattern←8⌽')\.(\w+)_(',∊#.MS3SiteUtils.NSS,¨'|'
:For control :In 'Handler' 'Position'~⍨∪(pattern ⎕S'\2')source ⍝ find controls
:Trap 6 ⍝ unknown
ns←(#.MS3SiteUtils.NSS(∨/⍷)¨⊂⍕⍎'#._.',control)/⍳⍴#.MS3SiteUtils.NSS ⍝ add to right list
:Else
ns←⍬
:EndTrap
controls[ns],←⊂⊂control
:EndFor
controls←{⍵[⍋↑⍵]}¨controls   ⍝ sort the lists
⍝ Now we create and populate the info div
r←'<div id="widgethelp"><span id="used">Controls used on this page:</span>'
:For ns :In (×≢¨controls)/⍳⍴#.MS3SiteUtils.NSS ⍝ do not process if empty
r,←'&emsp;',(ns⊃#.MS3SiteUtils.GROUPS),':&nbsp;'
:For control :In ns⊃controls
r,←'<a target="_blank" href="/Documentation/DyalogAPIs/WidgetDoc?namespace=_',ns⊃#.MS3SiteUtils.NSS
r,←'&amp;widget=',control,'">',control,'</a>,&nbsp;'
:EndFor
r↓⍨←¯7
:EndFor
r,←'</div>'
∇
∇ r←Walk content;e
r←⍬
:For e :In content
:If (isClass e)∨isInstance e
r←r,⊃⎕CLASS e
:Trap 6
r,←Walk e.Content
:EndTrap
:EndIf
:EndFor
∇
:EndClass
﻿:Namespace SNLMS3
⍝ Snakes and Ladders for Live Code Jugalbandi at #FnConf15 - MiServer 3 version
⍝ a game is over when any player reaches final cell first.
⍝ a player can arrive at a new position by adding the number to existing position from the throw of dice
⍝ a player can arrive at final cell only by throwing on dice the exact number of positions required to reach it.
⍝ a player is promoted to head position of ladder when they arrive at a cell containing ladder’s tail
⍝ a player is demoted to tail position of snake when they arrive at a cell containing snake’s head
⍝ players take turns occupying new positions until the game is over
⍝ To Play:
⍝    SNL.Init nPlayers
⍝    SNL.Play 0
⎕IO←0              ⍝ Index Origin Zero
Spaces←{⎕NS¨⍵⍴⊂''} ⍝ ⍵ empty spaces
∇ InitBoard
Cells←×/(Rows Cols)←5 6
(Ladders←Spaces 4).(Head Tail)←(22 3)(8 5)(26 11)(29 20)
(Snakes←Spaces 4).(Head Tail)←(17 4)(19 7)(21 9)(27 1)
∇
∇ Positions←Init params
(nPlayers ⎕RL)←2↑params  ⍝ 2nd element of params can be explicit seed to set
InitBoard
Positions←nPlayers⍴1
∇
∇ Play Positions
playaround Positions
∇
playaround←{⍺←0
turn←⍺
oldpositions←positions←⍵
turn+←1
eyes←1+?(≢positions)⍴6
(positions movetypes)←↓[0]↑eyes moveone¨positions
positions×←¯1*<\positions∊Cells              ⍝ mark first winner as negative number (if any)
turn oldpositions eyes positions movetypes
}
moveone←{position←⍵
eyes←⍺
Cells<newpos←position+eyes:position'Too Far'
(≢Snakes)>i←Snakes.Head⍳newpos:Snakes[i].Tail('!Snake @ 'newpos)
(≢Ladders)>i←Ladders.Tail⍳newpos:Ladders[i].Head('!Ladder @'newpos)
newpos'Normal'
}
:EndNamespace
﻿⌷idioms←1499 4⍴'(Cyclic) compression of successive blanks.' '(A∨1⌽A←CV≠'' '')/CV' '' 0 '(Real) solution of quadratic equation with coefficients NV.' '(-NV[2]-¯1 1×((NV[2]*2)-×/4,NV[1 3])*.5)÷2×NV[1]' '3 ←→ ⍴NQ' 0 '0 corresponding to each item of XA.' '{0}¨XA' '' 1 '0 irrespective of XA.' '{0}XA' '' 1 '1 if XA does not have an empty first dimension, 0 otherwise (⎕ML&lt;2).' '0≠⊃⍴XA' '' 1 '1 if XA has a depth of 0 or 1 (simple scalar, vector, etc.), 0 otherwise.' '1=≡,XA ' '' 1 '1 if XA has a depth of 1 (simple array), 0 otherwise.' '1=≡XA ' '' 1 '1 if XA has a depth of zero (simple scalar), 0 otherwise.' '0=≡XA' '' 1 '1 if XA has a rank of zero (scalar), 0 otherwise.' '0=⍴⍴XA' '' 1 '1 if XA has an empty first dimension, 0 otherwise (⎕ML&lt;2).' '0=⊃⍴XA' '' 1 '1 if XA is empty, 0 otherwise.' '0∊⍴XA ' '' 1 '1 if XA is not empty, 0 otherwise.' '~0∊⍴XA ' '' 1 '1 if XV has a shape of zero, 0 otherwise.' '0=⍴XV' '' 1 'A Boolean mask indicating the leading blank spaces in each row of CA.' '∧\'' ''=CA' '' 1 'A magic square, side IS.' 'A⊖(A←(⍳IS)-⌈IS÷2)⌽(IS,IS)⍴⍳IS×IS' '1=2|IS' 0 'A nested vector comprising simple character vectors constructed from the rows of CA (which must be of depth 1) with all blank spaces removed.' '~∘'' ''¨↓CA' '' 1 'A nested vector comprising simple character vectors constructed from the rows of CA (which must be of depth 1) with trailing blank spaces removed.' '{(+/∨\'' ''≠⌽⍵)↑¨↓⍵}CA' '' 1 ('A nested vector comprising vectors that each correspond to a position in the original vectors of PV ',(⎕ucs 8211),' the first vector contains the first item from each vector in PV, padded to be the same length as the largest vector, and so on (⎕ML&lt;2).') '↓⍉↑PV' '' 1 ('A nested vector comprising vectors that each correspond to a position in the original vectors of PV ',(⎕ucs 8211),' the first vector contains the first item from each vector in PV, padded to be the same length as the largest vector, and so on (⎕ML≥2).') '↓⍉⊃PV' '' 1 'A simple vector comprising as many items as there are rows in XM2, where each item is the number of the first row in XM1 that matches each row in XM2.' 'XM1{(↓⍺)⍳↓⍵}XM2' '' 1 'A way to combine trigonometric functions (sin NS1 cos NS2).' '1 2×.○NS1,NS2' '' 0 'Accurately sum a vector of floating numbers.' 'FS←+/F[⍒|F]' '' 2 'Add subvectors of N from consecutive G dups.' ('N←+/¨(+\¯1↓1,G≠1⌽G)',(⎕ucs 8838 78)) '' 2 'Add subvectors of N given B breaks in group.' ('N←+/¨(+\B)',(⎕ucs 8838 78)) '' 2 'Add subvectors of N given L items per group.' ('N←+/¨(L/1+⍳⍴L)',(⎕ucs 8838 78)) '' 2 'Add subvectors of N using ordered list MG.' ('N←+/¨(+\¯1↓1,∨/MG≠1⊖MG)',(⎕ucs 8838 78)) '' 2 'Add vector N to each column of NM.' 'NM←NM+[1]N' '0=⎕IO' 2 'Add vector N to each column of NM.' 'NM←NM+[2]N' '1=⎕IO' 2 'Adding a new dimension after dimension IS1 IS2-fold.' '(⍋⍋(IS1+1),⍳⍴⍴XA)⍉(IS2,⍴XA)⍴XA' '' 0 'Adding an empty row into XM after row IS.' '((IS+1)≠⍳1+1⍴⍴XM)⍀XM' '' 0 'Adding an empty row into XM after rows IV.' '(~(⍳(⍴IV)+1⍴⍴XM)∊IV+⍳⍴IV)⍀XM' '' 0 'Adding NV to each column of NA.' 'NA+⍉(⌽⍴NA)⍴NV' '≢NQ ←→ ≢NA' 0 'Adding NV to each column of NM.' '2 1 2⍉NV∘.+NM' '' 0 'Adding NV to each column of NM.' '1 2 2⍉NM∘.+NV' '' 0 'Adding NV to each row of NA.' 'NA+(⍴NA)⍴NV' '(⍴NQ)=¯1↑⍴NA' 0 'Adding NV to each row of NM.' '1 1 2⍉NV∘.+NM' '' 0 'Adding NV to each row of NM.' '1 2 1⍉NM∘.+NV' '' 0 'Adding scalar NS to last element of NA.' 'NA+(-⍴NA)↑NS' '' 0 'Ain''t Dot Is. Test for even # of non-zeros.' 'BS←0≠.=N' '' 2 'Aligning columns of matrix XM to diagonals.' '(1-⍳¯1↑⍴XM)⌽XM' '' 0 'Aligning diagonals of matrix XM to columns.' '(¯1+⍳¯1↑⍴XM)⌽XM' '' 0 'All axes of array A.' 'I←⍳⍴⍴A' '' 2 'All axes of array XA.' '⍳⍴⍴XA' '' 0 'All binary representations up to IS (truth table).' '((⌈2⍟1+IS)⍴2)⊤0,⍳IS' '' 0 'All binary representations with IS bits (truth table).' '(IS⍴2)⊤¯1+⍳2*IS' '' 0 'All column indices of array A.' 'I←⍳⊃⌽⍴A' '' 2 'All elements true (∧/) on each subvector of BV2 indicated by BV1.' '(BV1/BV2)∧A/1⌽A←(BV2≤BV1)/BV1' '' 0 'All factors of IS.' 'I←(0=I|IS)/I←2+⍳⌊IS÷2' '0=⎕IO' 2 'All factors of IS.' 'I←(0=I|IS)/I←1+⍳⌊IS÷2' '1=⎕IO' 2 'All indices of vector V.' 'I←⍳⍴V' '' 2 'All indices of vector XV.' '⍳⍴XV' '' 0 'All ones after the first one.' 'B←∨\B' '' 2 'All ones after the first zero.' 'B←≤\B' '' 2 'All ones to the first zero.' 'B←∧\B' '' 2 'All pairs of elements of ⍳IS1 and ⍳IS2.' '⎕IO+(IS1,IS2)⊤(⍳IS1×IS2)-⎕IO' '' 0 'All pixels in a 5 by 10 window.' 'Z←(⍳5)∘.+¯11○⍳10' '' 2 'All possible pairs of 1 through IS.' 'M←(&lt;⌿M)/M←(2,IS*2)⍴(,⍉M),,M←IS IS⍴1+⍳IS' '0=⎕IO' 2 'All possible pairs of 1 through IS.' 'M←(&lt;⌿M)/M←(2,IS*2)⍴(,⍉M),,M←IS IS⍴⍳IS' '1=⎕IO' 2 'All primes up to IS.' '(2=+⌿0=(⍳IS)∘.|⍳IS)/⍳IS' '' 0 'All row indices of matrix M.' 'I←⍳≢M' '' 2 'All valid one character APL2 names.' 'C←(¯1≠⎕NC,['''']⎕AV)/⎕AV' '' 2 'All zeros except the first one.' 'B←&lt;\B' '' 2 'All, both.' '∧/BA' '' 0 'Alphabetical comparison with alphabets XV.' '(XV⍳XA1)&lt;XV⍳XA2' '' 0 'Alphabetizing CA; equal alphabets in same column of CM.' '(¯1↑⍴CM)|(,CM)⍳CA' '' 0 'Alternate beg/end tags.' ('M←↑∊¨⊂[1]M',(⎕ucs 8867),'(B/,M)←(+/B←,M=''ø'')⍴'':HP1.'' '':EHP1.''') '0=⎕IO' 2 'Alternate beg/end tags.' ('M←↑∊¨⊂[2]M',(⎕ucs 8867),'(B/,M)←(+/B←,M=''ø'')⍴'':HP1.'' '':EHP1.''') '1=⎕IO' 2 'Alternating product.' '÷/NA' '' 0 'Alternating product of N.' 'NS←÷/N' '' 2 'Alternating sequence of I ones and zeros.' 'B←I/(⍴I)⍴1 0' '' 2 ('Alternating series (1 ¯1 2 ¯2 3 ¯3 ',(⎕ucs 8230 41 46)) '#NAME?' '' 0 'Alternating series of length IS(1,-1,2,-2..).' 'N←-\⍳IS' '' 2 'Alternating sum.' '-/NA' '' 0 'Alternating sum of magnitude of N.' 'NS←-/|N' '' 2 'Alternating sum of N.' 'NS←-/N' '' 2 'An expression giving itself.' '1⌽22⍴11⍴''''''1⌽22⍴11⍴''''''' '' 0 'Annuity coefficient: IA periods at int FA.' 'A←FA÷⍉1-(1+FA)∘.×-IA' '' 2 'Annuity coefficient: IA periods at interest rate NA %.' '((⍴A)⍴NA÷100)÷A←⍉1-(1+NA÷100)∘.*-IA' '' 0 'Any element true (∨/) on each subvector of BV2 indicated by BV1.' '(BV1/BV2)≥A/1⌽A←(BV2∨BV1)/BV1' '' 0 'Any, anyone.' '∨/BA' '' 0 'Applying to columns action defined on rows.' ((⎕ucs 9033 32 8230),' ⍉XV') '' 0 'Arccosine of NA in radians.' 'FA←¯2○NA' '' 2 'Arcsine of NA in radians.' 'FA←¯1○NA' '' 2 'Arctan NA2÷NA1.' '((NA1≠0)×¯3○NA2÷NA1+NA1=0)+○((NA1=0)×.5××NA2)+(NA1&lt;0)×1-2×NA2&lt;0' '' 0 'Arctangent of NA in radians.' 'FA←¯3○NA' '' 2 'Are there less than N items in each dim?' 'B←N>⍴A' '' 2 'Area of a polygon given X,Y endpoints.' 'NS←|.5×+/Y×(¯1⌽X)-1⌽X' '' 2 'Area of a triangle given side length.' 'V←(×/(+/X÷2)-0,X)*.5' '3=⍴X' 2 'Area of triangle with side lengths in NV (Heron''s formula).' '(×/(+/NV÷2)-0,NV)*.5' '3 ←→ ⍴NQ' 0 'Arithmetic average (mean value).' '(+/NV)÷⍴NV' '' 0 'Arithmetic average (mean value) of NV1 weighted by NV2.' '(NV2+.×NV1)÷⍴NV1' '' 0 'Arithmetic average (mean value), also for an empty array.' '(+/,NA)÷1⌈⍴,NA' '' 0 'Arithmetic precision of the system (in decimals).' '⌊|10⍟|1-3×÷3' '' 0 'Arithmetic progression from NS1 to NS2 with step NS3.' 'NS1+(NS3××NS2-NS1)×(⍳1+|⌊(NS2-NS1)÷NS3)-⎕IO' '' 0 'Arithmetic progression of NS2 numbers from NS1 with step NS3.' 'NS1+NS3×(⍳NS2)-⎕IO' '' 0 'Arithmetic progression vector.' 'N←X+NS×⍳IS' '' 2 'Arithmetic progression vector.' 'N←X+NS×¯1+⍳IS' '' 2 'Array and its negative (''plus minus'').' 'NA∘.×1 ¯1' '' 0 'Array and its negative (''plus minus'').' 'NA,[.5+⍴⍴NA]-NA' '' 0 'Array with shape of XA and XV as its rows.' '(⍴XA)⍴XV' '' 0 'Ascending cardinal numbers (ranking, all different).' '⍋⍋NV' '' 0 'Ascending cardinal numbers (ranking, shareable).' '⌊.5×(⍋⍋NV)+⌽⍋⍋⌽NV' '' 0 ('Ascending series of integers IS2',(⎕ucs 8230),'IS1 (for small IS2 and IS1).') '(IS2-1)↓⍳IS1' '' 0 'ASCII sequence in HEX table.' 'C←16 16⍴⎕AV' '' 2 'Assign value to A if not assigned.' '⍎(0=⎕NC ''A'')/''A←1''' '' 2 'Assign values of expressions in CM1 to variables named in CM2.' 'A←⍎,'','',''('',''0'',''⍴'',CM2,''←'',CM1,'')''' '' 0 'Assigns MY-values to matrix of MX-names.' '⍎¨⊂[1]MX,''←'',⍕MY' '0=⎕IO' 2 'Assigns MY-values to matrix of MX-names.' '⍎¨⊂[2]MX,''←'',⍕MY' '1=⎕IO' 2 'Attach row numbers to a matrix.' 'M←(⍳≢M),M' '' 2 'Average (mean value) of columns of matrix NM.' '(+⌿NM)÷1↑(⍴NM),1' '' 0 'Average (mean value) of elements of NA along direction IS.' '(+/[IS]NA)÷(⍴NA)[IS]' '' 0 'Average (mean value) of rows of matrix NM.' '(+/NM)÷¯1↑1,⍴NM' '' 0 'Average (mean) of N.' 'AVG←(+/N)÷1⌈⍴N' '' 2 'Avoiding division by zero error (gets value zero).' '(0≠NA1)×NA2÷NA1+0=NA1' '' 0 'Avoiding parentheses by swapping arguments of FUNCTION F.' ('(1 F⍨ ',(⎕ucs 8230 41)) '' 0 'BA1 but not BA2.' 'BA1>BA2' '' 0 'BA1 implies BA2.' 'BA1≤BA2' '' 0 'Barchart of integer values (across the page).' ''' ⎕''[⎕IO+IV∘.≥⍳⌈/IV]' '' 0 'Barchart of integer values (down the page).' ''' ⎕''[⎕IO+(⌽⍳⌈/IV)∘.≤IV]' '' 0 'Barchart of NV with height NS (across the page).' ''' ⎕''[⎕IO+NV∘.≥(⌈/NV)×(⍳NS)÷NS]' '' 0 'Barchart of two integer series (across the page).' ''' *○⍟''[⎕IO+2⊥IM∘.≥⍳⌈/,IM]' '≢IM ←→ 2' 0 'Base 10 representation of a number.' 'IA←(¯1⌽⍳1+⍴⍴NA)⍉((1+⌊10⍟1⌈⌈/,NA)⍴10)⊤NA' '' 2 'Base IS representation of a number.' 'IA←(¯1⌽⍳1+⍴⍴NA)⍉((1+⌊IS⍟1⌈⌈/,NA)⍴IS)⊤NA' '' 2 'Best linear fit of points (NV1,NV2) (least squares).' 'NV2⌹NV1∘.*0 1' '' 0 'Beta function.' '÷NS2×(NS1-1)!NS2+NS1-1' '' 0 'Beta function.' 'N←÷Y×(X-1)!Y×X-1' '' 2 'Binary format of decimal number IS.' '⍕10⊥((1+⌈2⍟⌈/,IS)⍴2)⊤IS' '' 0 'Binary matrix of (N,K) combinations.' 'M←⌽(K=+⌿M)/M←(N⍴2)⊤⍳1+2⊥N↑K⍴1' '' 2 'Binomial coefficients from 1-IS.' 'M←⍉(⍳1+IS)∘.!⍳1+IS' '0=⎕IO' 2 'Binomial coefficients from 1-IS.' 'M←⍉(0,⍳IS)∘.!0,⍳IS' '1=⎕IO' 2 'Binomial distribution of IS trials with probability NS.' '(A!IS)×(NS*A)×(1-NS)*IS-A←-⎕IO-⍳IS+1' '' 0 'Binomial distribution of X trials at prob. Y.' 'N←(N!X)×(Y*N)×(1-Y)*X-N←⍳X+1' '0=⎕IO' 2 'Binomial distribution of X trials at prob. Y.' 'N←(N!X)×(Y*N)×(1-Y)*X-N←¯1+⍳X+1' '1=⎕IO' 2 'Blank rows.' '∧/'' ''=CM' '' 0 'Boolean ending changes given # duped items.' 'B←(,(1-L),[.5]1)/1' '0=⎕IO' 2 'Boolean ending changes given # duped items.' 'B←(,(1-L),[1.5]1)/1' '1=⎕IO' 2 'Boolean ending changes given # duped items.' 'B←(1+⍳+/L)∊+\L' '0=⎕IO' 2 'Boolean ending changes given # duped items.' 'B←(⍳+/L)∊+\L' '1=⎕IO' 2 'Boolean expand length for headers.' 'B←2&lt;/0,(1+B)/B' '' 2 'Boolean first item of each change in MG.' 'B←¯1↓1,∨/MG≠1⊖MG' '' 2 'Boolean first ones in each group of ones.' 'B←2&lt;/0,B' '' 2 'Boolean items in X that are not in Y.' 'B←~X∊Y' '' 2 'Boolean L[i] gaps after each one.' 'B←(,1,[.5]-L)/1' '0=⎕IO' 2 'Boolean L[i] gaps after each one.' 'B←(,1,[1.5]-L)/1' '1=⎕IO' 2 'Boolean last item of each change in MG.' 'B←1↓(∨/MG≠¯1⊖MG),1' '' 2 'Boolean last ones in each group of ones.' 'B←2>/B,0' '' 2 'Boolean mask of CM containing VC.' 'BM←⊃∨/VC⍷¨⊂CM' '' 2 'Boolean one at first occurrence of C in CA.' '(,BA)←&lt;\,BA←C⍷CA' '' 2 'Boolean rows of CM containing C.' 'B←∨/C⍷CM' '' 2 'Boolean rows of CM starting with C.' 'B←,1↑[0]C⍷CM' '0=⎕IO' 2 'Boolean rows of CM starting with C.' 'B←,1↑[1]C⍷CM' '1=⎕IO' 2 'Boolean rows of M all equal to scalar S.' 'B←M∧.=S' '' 2 'Boolean rows of MVX containing MVY.' 'B←∨/MVX∧.(≡¨)⍉MVY' '' 2 'Boolean rows of MX containing MY.' 'B←∨/MX∧.=⍉MY' '' 2 'Boolean start changes given length vector L.' 'B←(,1,[.5]1-L)/1' '0=⎕IO' 2 'Boolean start changes given length vector L.' 'B←(,1,[1.5]1-L)/1' '1=⎕IO' 2 'Boolean start changes given length vector L.' 'B←(⍳+/L)∊+\0,L' '0=⎕IO' 2 'Boolean start changes given length vector L.' 'B←(⍳+/L)∊+\1,L' '1=⎕IO' 2 'Boolean start vector given position indices.' 'B←(≢M)↑(⍳⌈/P)∊P' '' 2 'Boolean start vector to boolean end vector.' 'B←1⌽B' '' 2 'Boolean starting changes given # duped items.' 'B←(⍳+/L)∊0,+\L' '0=⎕IO' 2 'Boolean starting changes given # duped items.' 'B←(⍳+/L)∊+\1,L' '1=⎕IO' 2 'Boolean test: All items in B equal?' 'BS←≠/0 1∊∊AB' '' 2 'Boolean test: All items in B equal?' 'BS←AB≡1⌽AB' '' 2 'Boolean test: All items in simple B equal?' 'BS←≠/0 1∊B' '' 2 'Boolean test: Are all items in V equal?' 'BS←V∧.∊⊂⊃V' '' 2 'Boolean test: Are all items in V equal?' 'BS←V≡1⌽V' '' 2 'Boolean test: Are all items in V equal?' 'BS←V∧.=⊃V' '1=≡V' 2 'Boolean test: Are all items of V unique?' 'BS←(V⍳V)≡⍳⍴V' '' 2 'Boolean test: Are all true?' 'BS←∧/B' '' 2 'Boolean test: Are any true?' 'BS←∨/B' '' 2 'Boolean test: Are none true?' 'BS←~∨/B' '' 2 'Boolean test: Is A a nested array?' 'BS←1&lt;|≡A' '' 2 'Boolean test: Is A a scalar?' 'BS←0∊⍴⍴A' '' 2 'Boolean test: Is A a simple array?' 'BS←1≥|≡A' '' 2 'Boolean test: Is A a simple character array?' 'BS←A≡⍕A' '' 2 'Boolean test: Is A a vector?' 'BS←1∊⍴⍴A' '' 2 'Boolean test: Is A anti-symmetric?' 'BS←A≡-⍉A' '' 2 'Boolean test: Is A empty?' 'BS←0∊⍴A' '' 2 'Boolean test: Is A non-empty?' 'BS←0≠⍴,A' '' 2 'Boolean test: Is A numeric? (if homogeneous).' 'BS←0=⊃0⍴A' '' 2 'Boolean test: Is A simple numeric?' 'BS←(⊃0⍴⊂A)≡(⍴A)⍴0' '' 2 'Boolean test: Is A symmetric?' 'BS←A≡⍉A' '' 2 'Boolean test: Is any element of N even?' 'BS←∨/~2|N' '' 2 'Boolean test: Is AX identical to AY?' 'BS←AX≡AY' '' 2 'Boolean test: Is B boolean?' 'BS←∧/∊B∊0 1' '' 2 'Boolean test: Is every element of N odd?' 'BS←∧/2|N' '' 2 'Boolean test: Is every element of N positive?' 'BS←∧/N>0' '' 2 'Boolean test: Is every element of NA even?' 'BS←∧/∊~2|NA' '' 2 'Boolean test: Is every element of NA integer?' 'BS←∧/∊NA=⌊NA' '' 2 'Boolean test: Is first item largest?' 'BS←~×⊃⍒N' '' 2 'Boolean test: Is first item largest?' 'BS←|/⍋N' '' 2 'Boolean test: Is first item smallest?' 'BS←~×⊃⍋N' '' 2 'Boolean test: Is first item smallest?' 'BS←|/⍒N' '' 2 'Boolean test: Is IS prime?' 'BS←0=+/0=((2×IS≠2),2+2×⍳⌊.5×IS*.5)|IS' '0=⎕IO' 2 'Boolean test: Is IS prime?' 'BS←0=+/0=((2×IS≠2),1+2×⍳⌊.5×IS*.5)|IS' '1=⎕IO' 2 'Boolean test: Is N in ascending column order.' 'BS←∧⌿N=⌈⍀N' '' 2 'Boolean test: Is N in ascending row order.' 'BS←∧/N=⌈\N' '' 2 'Boolean test: Is N permutation of NX?' 'BS←N[⍋N]≡NX[⍋NX]' '' 2 'Boolean test: Is N permutation vector?' 'BS←N[⍋N]≡1+⍳⍴N' '0=⎕IO' 2 'Boolean test: Is N permutation vector?' 'BS←N[⍋N]≡⍳⍴N' '1=⎕IO' 2 'Boolean test: Is V a valid APL name?' 'BS←¯1≠⎕NC V' '' 2 'Boolean test: Is Y a subset of X?' 'BS←∧/,Y∊X' '' 2 'Boolean test: Parity.' 'BS←≠/B' '' 2 'Boolean vector of length IS with ones in locations IA.' '(⍳IS)∊IA' '' 0 'Boolean vector of length IS with zeroes in locations IA.' '(~(⍳IS)∊IA)' '' 0 'Branch to label on condition.' 'IS:→(100&lt;NS←NS+1)/IS' '' 2 'Branch to line in I of first true B.' '→B/I' '' 2 'Branch to line in position PS of I.' '→PS⊃I' '' 2 'Branch to offset IS from current line.' '→⎕LC+IS' '' 2 'Build array from boolean pattern. Insert S.' 'A←('' '',S)[BA]' '1=⎕IO' 2 'Build array from boolean pattern. Insert S.' 'A←('' '',S)[1+BA]' '0=⎕IO' 2 'Build array from boolean pattern. Insert V.' 'A←('' '',V)[BA×(⍴BA)⍴⍳⊃⌽⍴BA]' '1=⎕IO' 2 'Build array from boolean pattern. Insert V.' 'A←('' '',V)[1+BA×(⍴BA)⍴⍳⊃⌽⍴BA]' '0=⎕IO' 2 'Build array from boolean pattern. Reduce A.' 'A←↑⊃,/¨(⊂[1]BM)⊂¨⊂V' '0=⎕IO' 2 'Build array from boolean pattern. Reduce A.' 'A←↑⊃,/¨(⊂[2]BM)⊂¨⊂V' '1=⎕IO' 2 'Cartesian product: all pairs of AX, AY.' 'AV←AX∘.,AY' '' 2 'Cascade NS-fold fill between two polygons.' 'VZ←(⊂ZX)+(⊂ZY-ZX)×(⍳NS+1)÷NS' '0=⎕IO' 2 'Cascade NS-fold fill between two polygons.' 'VZ←(⊂ZX)+(⊂ZY-ZX)×(0,⍳NS)÷NS' '1=⎕IO' 2 'Case structure according to key vector XV.' '→IV[XV⍳XS]' '' 0 'Case structure using levels with limits NV.' '→(NS≥NV)/IV' '' 0 'Case structure with an encoded branch destination.' '→IV[1+2⊥BV]' '' 0 'Case structure with integer switch.' '→IS⌽IV' '' 0 'Case structure with logical switch (preferring from start).' '→BV/IV' '' 0 'Catenating IS elements XA after every element of XV.' ',XV,((⍴XV),IS)⍴XA' '' 0 'Catenating IS elements XS after indices IV in vector XV.' 'A←IS×⍴,IV ⋄ (XV,A⍴XS)[⍋(⍳⍴XV),A⍴IV]' '' 0 'Catenating IS elements XS before every element of XV.' ',(((⍴XV),IS)⍴XS),XV' '' 0 'Catenating IS elements XS before indices IV in vector XV.' 'A←IS×⍴,IV ⋄ ((A⍴XS),XV)[⍋(A⍴IV),⍳⍴XV]' '' 0 'Centering C in field width NS.' 'C←(-⌊.5×0⌈NS-⍴C)⌽NS↑C' '' 2 'Centering character array CA with only right edge ragged.' '(-⌊0.5×+/∧\'' ''=⌽CA)⌽CA' '' 0 'Centering character array CA with ragged edges.' '(A-⌊0.5×(A←+/∧\⌽A)++/∧\A←'' ''=⌽CA)⌽CA' '' 0 'Centering left justified CM.' 'CM←(-⌊.5×+/∧\⌽CM='' '')⌽CM' '' 2 'Centering non-justified CM.' 'CM←(⌈.5×⊃-/+/¨∧\¨B(⌽B←CM='' ''))⌽CM' '' 2 'Centering right justified CM.' 'CM←(⌈.5×+/∧\CM='' '')⌽CM' '' 2 'Centering text line CV into a field of width IS.' 'IS↑((⌊-/.5×IS,⍴CV)⍴'' ''),CV' '' 0 'Centering text line CV into a field of width IS.' '(-⌊.5×IS+⍴CV)↑CV' '' 0 'Change A to scalar if it is simple.' '⍎(1=≡A)/''A←⊂A''' '' 2 'Change A, only if it is scalar, to vector.' 'A←1/A' '' 2 'Change scalars to vectors at depths 0-2.' 'A←1/¨A' '' 2 'Change sign on condition B.' 'N←N×¯1*B' '' 2 'Change X if new value given.' 'X←⊃('' ''∨.≠V)↓X V←⍞' '' 2 'Changing an index origin dependent argument to act as ⎕IO=0.' '⎕IO+IA' '' 0 'Changing an index origin dependent argument to act as ⎕IO=1.' '(⎕IO-1)+IA' '' 0 'Changing an index origin dependent result to be as ⎕IO=0.' '-⎕IO-IA' '' 0 'Changing an index origin dependent result to be as ⎕IO=1.' '(~⎕IO)+IA' '' 0 'Changing connection matrix IM (¯1 → 1) to a node matrix.' '(1 ¯1∘.=⍉IM)+.×⍳≢⎕←IM' '' 0 'Changing connectivity list CM to a connectivity matrix.' 'A←(×/B←0 0+⌈/,CM)⍴0 ⋄ A[⎕IO+B[1]⊥-⎕IO-CM]←1 ⋄ B⍴A' '' 0 'Changing connectivity matrix CM to a connectivity list.' '(,CM)/1+A⊤¯1+⍳×/A←⍴CM' '' 0 'Changing index of an unfound element to zero.' '(1+⍴XV)|XV⍳XA' '' 0 'Changing index of an unfound element to zero (not effective).' '(XA∊XV)×XV⍳XA' '' 0 'Changing lengths IV of subvectors of XV to ending indicators.' '(⍳⍴XV)∊(+\IV)-~⎕IO' '' 0 'Changing lengths IV of subvectors of XV to starting indicators.' '(⍳⍴XV)∊+\⎕IO,IV' '' 0 'Changing lengths IV of subvectors to ending indicators.' '(⍳+/IV)∊(+\IV)-~⎕IO' '' 0 'Changing lengths IV of subvectors to starting indicators.' 'A←(+/IV)⍴0 ⋄ A[+\¯1↓⎕IO,IV]←1 ⋄ A' '' 0 'Changing lengths IV of subvectors to starting indicators.' '(⍳+/IV)∊+\⎕IO,IV' '' 0 'Changing node matrix IM (starts,ends) to a connection matrix.' '-/(⍳⌈/,IM)∘.=⍉IM' '' 0 'Changing numeric code NA into corresponding name in NV.' 'CM[NV⍳NA;]' '' 0 'Changing starting indicators BV of subvectors to lengths.' 'A-¯1↓0,A←(1⌽BV)/⍳⍴BV' '' 0 'Changing XA if a new input value is given.' 'XA←⍎,((2↑''XA''),'' '',[.5]A)[⎕IO+~'' ''∧.=A←⍞;]' '' 0 ('Check for input in range 1',(⎕ucs 8230),'XA.') '(A←⎕)∊⍳XA' '' 0 'Chipmunk. Selective picking from array.' 'A←PA⊃¨⊂A' '' 2 'Choosing a string according to boolean value BS.' '(BS/CV1),(~BS)/CV2' '' 0 'Choosing according to signum.' 'XV[2+×NA]' '' 0 'Choosing IA1 objects out of ⍳IA2 with replacement (roll).' '?IA1⍴IA2' '' 0 'Choosing IS2 objects out of ⍳IS1 without replacement (deal).' 'IS2?IS1' '' 0 'Choosing sorting direction during execution.' '⍋NV×(¯1 1)[IS]' '' 0 'Choosing sorting direction I +A, 0U, or -D.' 'NM←NM[⍋NM×I;]' '' 2 'Classic version only: The character numbers (atomic vector index) corresponding to the characters in CA.' '⎕AV⍳CA' '' 1 'Classification of elements NV into IS classes of equal size.' '+/(A×IS÷⌈/A←NV-⌊/NV)∘.≥¯1+⍳IS' '' 0 'Classification of NV1 to classes starting with NV2.' 'A[(B/C)-⍴NV2]←B/+\~B←(⍴NV2)&lt;C←⍋NV2,NV1+A←0×NV1 ⋄ A' 'NQ2&lt;.≥1⌽NQ2' 0 'Coefficients of exponential (curve) fit of points (NV1,NV2).' 'A←(⍟NV2)⌹NV1∘.*0 1 ⋄ A[1]←*A[1] ⋄ A' '' 0 'Coefficients of the binomial.' 'N←(⍳1+IS)!IS' '0=⎕IO' 2 'Coefficients of the binomial.' 'N←(0,⍳IS)!IS' '1=⎕IO' 2 'Column averages of NM.' 'CAVE←(+⌿NM)÷1⌈≢NM' '' 2 'Column averages of NM. (non-zero).' 'CAVG←(+⌿NM)÷1⌈+⌿0≠NM' '' 2 'Column sum of a matrix.' '+⌿NM' '' 0 'Column table. Vectors to columns of matrix.' 'M←⍉↑VV' '' 2 'Columnize rows of data separated by blanks.' 'CM←⍕↑(C≠'' '')⊂¨C←⊂[1]CM' '0=⎕IO' 2 'Columnize rows of data separated by blanks.' 'CM←⍕↑(C≠'' '')⊂¨C←⊂[2]CM' '1=⎕IO' 2 'Col-wise percentage per column.' 'N←100×NM÷[1]+⌿NM' '0=⎕IO' 2 'Col-wise percentage per column.' 'N←100×NM÷[2]+⌿NM' '1=⎕IO' 2 'Combinations of N things taken K ways.' 'C←K!N' '' 2 'Combine 2 arrays along their last dimension.' 'A←↑,/AX,⊂AY' '' 2 'Comparing vector XV with rows of array XA.' 'XA∧.=XV' '' 0 'Comparison of successive rows.' '∧/XM=1⊖XM' '' 0 'Comparison table.' 'IV∘.≥⍳⌈/IV,0' '' 0 'Complementary angle (arccos sin NS).' '○/¯2 1,NS' '' 0 'Compound interest for principals NA2 at rates NA3 % in times NA1.' 'NA2∘.×(1+NA3÷100)∘.*NA1' '' 0 'Compound interest: IA prds, FA int, NA prn.' 'A←NA∘.×(1+FA)∘.*IA' '' 2 'Conditional branch depending on sign of IS.' '→IV[2+×IS]' '' 0 'Conditional branch out of program.' '→0⌊⍳BS' '' 0 'Conditional branch out of program.' '→0×⍳BS' '' 0 'Conditional branch out of programs.' '⍎BS/''→''' '' 0 'Conditional branch to line IS.' '→IS⌈⍳BS' 'IS>0' 0 'Conditional change of elements of NA to one according to BA.' 'NA*~BA' '' 0 'Conditional drop of IV elements from array XA.' '(IV×BV)↓XA' '' 0 'Conditional drop of last element of XV.' '(-BS)↓XV' '' 0 'Conditional elementwise change of sign.' 'NA×(1 ¯1)[1+BA]' '1=⎕IO' 0 'Conditional elementwise change of sign.' 'NA×¯1*BA' '0=⎕IO ⋄ ⍴NA ←→ ⍴BA' 0 'Conditional execution.' '⍎BS/''EXPRESSION''' '' 0 'Conditional execution.' ('⍎BS↓''⍝ ',(⎕ucs 8230 39)) '' 0 'Conditional execution of monadic function.' 'fn¨BS/⊂A' '' 2 'Conditional in text.' '((~BS)/''IN''),''CORRECT''' '' 0 'Consecutive integers from IS1 to IS2 (arithmetic progression).' '(IS1-⎕IO)+⍳1+IS2-IS1' '' 0 'Continued fraction.' ('1+÷2+÷3+÷4+÷5+÷6+÷ ',(⎕ucs 8230)) '' 0 'Continuing from line IS (if NS>0) or exit.' '→IS××NS' '' 0 'Contour levels NV at points with altitudes NS.' 'NV[+⌿NV∘.≤NS]' '' 0 'Conversion from characters to numeric codes.' '⎕AV⍳XA' '' 0 'Conversion from decimal to hexadecimal.' '⍉''0123456789ABCDEF''[⎕IO+((⌈⌈/16⍟,IA)⍴16)⊤IA]' 'IA∊⍳255' 0 'Conversion from degrees to radians.' 'NA×○÷180' '' 0 'Conversion from hexadecimal to decimal.' '16⊥-⎕IO-''0123456789ABCDEF''⍳⍉CA' '' 0 'Conversion from radians to degrees.' 'NA×180÷○1' '' 0 'Conversion of alphanumeric string into numeric.' '10⊥¯1+⎕D⍳CV' '' 0 'Conversion of characters to hexadecimal representation (⎕AV).' ','' '',⍉''0123456789ABCDEF''[⎕IO+16 16⊤-⎕IO-⎕AV⍳CV]' '' 0 'Conversion of each row to a number (default zero).' '(CM∨.≠'' '')\1↓⍎''0 '',,CM,'' ''' '' 0 'Conversion of indices IM of array XA to indices of raveled XA.' '⎕IO+(⍴XA)⊥IM-⎕IO' '' 0 'Conversion of set of positive integers IV to a mask.' '(⍳⌈/IV)∊IV' '' 0 'Convert binary to character.' 'C←⎕UCS 2⊥¨((⌈.125×⍳⍴B)⊂B' '' 2 'Convert binary to integer.' 'IS←2⊥B' '' 2 'Convert character matrix to numeric vector.' 'N←1↓⍎''0'','','',CM' '' 2 'Convert character or numeric data into numeric.' '⍎⍕XV' '' 0 'Convert character to binary.' 'B←,⍉(8⍴2)⊤⎕UCS C' '' 2 'Convert character to hex.' 'H←(⎕D,⎕A)[,⍉16 16⊤⎕UCS C]' '0=⎕IO' 2 'Convert character to hex.' 'H←(⎕D,⎕A)[1+,⍉16 16⊤⎕UCS C]' '1=⎕IO' 2 'Convert character to numeric.' 'I←10⊥⎕D⍳C' '' 2 'Convert character to numeric.' 'I←10⊥¯1+⎕D⍳C' '' 2 'Convert character to Unicode/ASCII positions.' 'I←⎕UCS C' '' 2 'Convert character vector to vector of digits.' 'I←⍎¨C' '' 2 'Convert double words to integer.' 'I←(256⊥⍉I)-(256*4)×128≤,1↑[1]I←⎕UCS C' '0=⎕IO' 2 'Convert double words to integer.' 'I←(256⊥⍉I)-(256*4)×128≤,1↑[2]I←⎕UCS C' '1=⎕IO' 2 'Convert from AX, AY coordinates to radians.' 'NA←12○AX+¯11○AY' '' 2 'Convert from degrees to radians.' 'NA←NA×○÷180' '' 2 'Convert from NA pairs to radians.' 'NA←12○0J1⊥⊖NA' '2=≢NA' 2 'Convert from radians to degrees.' 'NA←NA×180÷○1' '' 2 'Convert halfword to float.' 'M←(256⊥1↓[0]N)×(×128-M)×16*¯63⌈¯70+128|M←1↑[0]N' '0=⎕IO' 2 'Convert halfword to float.' 'M←(256⊥1↓[1]N)×(×128-M)×16*¯63⌈¯70+128|M←1↑[1]N' '1=⎕IO' 2 'Convert hex to binary char.' 'C←∊4↑¨(''FEC80124936DA5B7''⍳H)⌽¨⊂''1111000010011010''' '0=⎕IO' 2 'Convert hex to binary char.' 'C←∊4↑¨(''FEC80124936DA5B7''⍳H)⌽¨⊂''0111100001001101''' '1=⎕IO' 2 'Convert integer to binary.' 'BM←⍉((1+⌊2⍟1⌈⌈/I)⍴2)⊤I' '' 2 'Convert integers to double words.' 'C←⎕UCS⍉(4⍴256)⊤I+(256*4)×I&lt;0' '' 2 'Convert non-empty CA to NA - rank ≥1.' 'NA←↑⍎¨⊂[¯1+⍴⍴CA]'','',CA' '0=⎕IO' 2 'Convert non-empty CA to NA - rank ≥1.' 'NA←↑⍎¨⊂[⍴⍴CA]'','',CA' '1=⎕IO' 2 'Convert non-empty CM to numeric vector.' 'NM←↑⍎¨⊂[1]'','',CM' '0=⎕IO' 2 'Convert non-empty CM to numeric vector.' 'NM←↑⍎¨⊂[2]'','',CM' '1=⎕IO' 2 'Convert rows of digits to base 10.' 'I←10⊥⍉M' '' 2 'Convert to numeric, throw out characters.' 'I←1↓⍎''0 '',(C∊'' '',⎕D)/C' '' 2 'Coordinates of A corresponding to offsets P.' 'PM←⍉(⍴A)⊤P' '' 2 'Coordinates of A corresponting to offsets P.' 'PM←1+⍉(⍴A)⊤P-1' '' 2 'Copies. Create IS copies of C.' 'C←(IS×⍴C)⍴C' '' 2 'Corner element of a (non-empty) array.' '1⍴XA' '' 0 'Cosine of NA in radians.' 'FA←2○NA' '' 2 'Count of leading ones.' 'B←+/∧\B' '' 2 'Count of the number of Ys in each row of AX.' 'A←AX+.∊Y' '' 2 'Counting pairwise matches (equal elements) in two vectors.' 'XV1+.=XV2' '' 0 'Create a histogram from numeric vector.' 'CM←↑(⌊N)⍴¨''*''' '' 2 'Create col header CM for NS wide text.' 'CM←1 0⍕10 10⊤⍳NS' '' 2 'Cumulative maxima (⌈\) of subvectors of NV indicated by BV.' 'NV[A⍳⌈\A←⍋A[⍋(+\BV)[A←⍋NV]]]' '' 0 'Cumulative minima (⌊\) of subvectors of NV indicated by BV.' 'NV[A⍳⌈\A←⍋A[⍋(+\BV)[A←⍒NV]]]' '' 0 'Cumulative sum.' '#NAME?' '' 0 'Cumulative sums (+\) over subvectors of NV indicated by BV.' '#NAME?' '' 0 'Cumulative sums.' 'N←+\N' '' 2 'Current European date - DD/MM/YYYY.' 'C←''56/06/0005''⍕⎕TS[⌽⍳3]' '' 2 'Current European date and time.' 'C←''56/06/0005 06:06:05''⍕⎕TS[(⌽⍳3),3+⍳3]' '' 2 'Current time - HH:MM:SS.' 'C←''06:06:05''⍕3↑3↓⎕TS' '' 2 'Current US date - MM/DD/YYYY.' 'C←''56/06/0005''⍕⎕TS[1⌽⍳3]' '' 2 'Current US date and time.' 'C←''56/06/0005 06:06:05''⍕⎕TS[(1⌽⍳3),3+⍳3]' '' 2 'CV without any leading blank spaces.' '{(∨\'' ''≠⍵)/⍵}CV' '' 1 'CV without any leading blank spaces.' '{(+/∧\'' ''=⍵)↓⍵}CV' '' 1 'Date IS (YYYYMM) given IS months from "0".' 'IS←1+0 100⊥0 12⊤IS-1' '' 2 'Decimal to hex.' 'H←(⎕D,⎕A)[,⍉((1+⌊16⍟1⌈⌈/,N)⍴16)⊤N]' '0=⎕IO' 2 'Decimal to hex.' 'H←(⎕D,⎕A)[1+,⍉((1+⌊16⍟1⌈⌈/,N)⍴16)⊤N]' '1=⎕IO' 2 'Decoding numeric code ABBCCC into a matrix.' '10 100 1000⊤IA' '' 0 'Decommenting a matrix representation of a function (⎕CR).' '(∨/A)⌿(⍴CM)⍴(,A)\(,A←∧\(''⍝''≠CM)∨≠\CM='''''''')/,CM' '' 0 'Decommenting the ⎕CR of a function.' '((~,∧\(''⍝''≠CM)∨≠\CM='''''''')/,CM)←'' ''' '' 2 'Decrease rank of A by 1.' 'AV←⊂[¯1+(0≠⍴⍴A)/⍴⍴A]A' '0=⎕IO' 2 'Decrease rank of A by 1.' 'AV←⊂[(0≠⍴⍴A)/⍴⍴A]A' '1=⎕IO' 2 'Decrease rank of A by 1. Rank 2 or higher.' 'A←,[2↑⍳⍴⍴A]A' '' 2 'Definite integral of XV(X) in range NV with NS steps (''X''∊XV).' 'A+.×⍎XV,0⍴X←NV[1]+(A←--/NV÷NS)×0,⍳NS' '⍴NQ ←→ 2' 0 'Demote floating point representations to integers.' '⌊IA' '' 0 'Demote non-boolean representations to booleans.' '0∨BA' '' 0 'Depth of parentheses.' '+\(''(''=CV)-¯1↓0,'')''=CV' '' 0 'Depth of parenthesis.' 'I←+\(C=''('')-¯1↓0,C='')''' '' 2 'Derivate of polynomial NV.' '¯1↓NV×⌽¯1+⍳⍴NV' '' 0 'Descending cardinal numbers (ranking, all different).' '⍋⍒NV' '' 0 'Diagonal matrix with elements of NV.' '0 ¯1↓(-⍳⍴NV)⌽((2⍴⍴NV)⍴0),NV' '' 0 'Diagonal ravel.' '(,XA)[⍋+⌿(⍴XA)⊤(⍳⍴,XA)-⎕IO]' '' 0 'Difference of sets. Elements of X not in Y.' 'V←X~Y' '' 2 'Differences of successive elements of NA along direction IS.' 'NA-(-IS=⍳⍴⍴NA)↓0,[IS]NA' '' 0 'Digits of IS separately.' '((1+⌊10⍟IS)⍴10)⊤IS' '' 0 'Direct matrix product.' '1 3 2 4⍉NM1∘.×NM2' '' 0 'Display vector of vectors vertically.' ',['''']VV' '' 2 'Distribution of NA into intervals between NV.' '+/((¯1↓NV)∘.≤NA)∧(1↓NV)∘.>NA' '' 0 'Divisibility table.' '0=(⍳⌈/IV)∘.|IV' '' 0 'Division to IS classes with width NS2, minimum NS1.' '+/(⍳IS)∘.=⌈(NA-NS1)÷NS2' '' 0 'Division. Avoid DOMAIN ERROR for N÷0.' 'NA←AX÷AY+AY=0' '' 2 'Division. Force DOMAIN ERROR for 0÷0.' 'NA←AX×÷AY' '' 2 'Divisors of IS.' '(0=A|IS)/A←⍳IS' '' 0 'Does each row contain only items from C?' 'B←CM∧.∊C' '' 2 'Does vector V have less than NS items?' 'BO←NS>⍴V' '' 2 'Doubles each occurrence of X within V.' 'V←(1+V∊X)/V' '' 2 'Doubles quotes in an expression.' 'C←'''''''',((1+C='''''''')/C),''''''''' '' 2 'Doubling quotes (for execution).' '(CV,'''''''')[(⎕IO+⍴CV)⌊⍋(⍳⍴CV),(''''''''=CV)/⍳⍴CV]' '' 0 'Drop of IS first columns from matrix XM.' '(0,IS)↓XM' '' 0 'Drop of IS first rows from matrix XM.' '(2↑IS)↓XM' '' 0 'Drop of IS first rows from matrix XM.' '(IS,0)↓XM' '' 0 'Duplicate items in vector V, L times.' 'V←L/V' '' 2 'Duplicate vector V, LS times.' 'M←LS⌿,[¯.5]V' '0=⎕IO' 2 'Duplicate vector V, LS times.' 'M←LS⌿,[.5]V' '1=⎕IO' 2 'Duplicate vector V, LS times.' 'V←(LS×⍴V)⍴V' '' 2 'Duplicating element of XV belonging to BV,1↑XV until next found.' 'XV[1⌈⌈\BV×⍳⍴BV]' '' 0 'Duplicating vector XV IS times.' '(IS×⍴XV)⍴XV' '' 0 'Editing CV1 with CV2 ''-wise.' '((~(⍴A↑CV1)↑''/''=CV2)/A↑CV1),(1↓A↓CV2),(A←+/∧\CV2≠'','')↓CV1' '' 0 'Elements of NV divisible by Y.' '(0=Y|NV)/NV' '' 0 'Elements of XV not in XA (difference of sets).' '(~XV∊XA)/XV' '' 0 'Empty matrix.' '0⌿XM' '' 0 'Empty numeric vector.' (,'⍬') '' 0 'Encoding current date.' '100⊥100|3↑⎕TS' '' 0 'Ending points for IS1 fields of width IS2.' '(IS1×IS2)⍴(-IS2)↑1' '' 0 'Ending points for XV in indices pointed by IV.' '1⌽(⍳⍴XV)∊IV' '' 0 'Ending points of groups of equal elements (non-empty XV).' '((1↓XV)≠¯1↓XV),1' '' 0 'Enlist - top down. Remove highest nesting.' 'A←,↑AA' '' 2 'Entering from terminal data exceeding input (printing) width.' 'NA←0 2 1 2 5 8 0 4 5,⎕' '' 0 'Euler''s idiom (accurate when NA is a multiple of 0J0.5).' '*○NA' '' 1 'Eval. asc. ord. N-coeff poly. at points NA.' 'N←(,['''']NA)⊥⌽N' '' 2 'Eval. dec. ord. N-coeff poly. at points NA.' 'N←(,['''']NA)⊥N' '' 2 'Evaluating a three row determinant.' 'NS←-/+/¨×⌿¨(1 ¯1×⊂0 1 2)⌽¨⊂M' '' 2 'Evaluating a two row determinant.' 'NS←-/×⌿0 1⌽M' '' 2 'Evaluating a two-row determinant.' '-/×/0 1⊖NM' '' 0 'Evaluating a two-row determinant.' '-/×⌿0 1⌽NM' '' 0 'Evaluation of several expressions; results form a vector.' '⍎,'','',''('','','',XA,'')''' '' 0 'Exclusive or.' 'BA1≠BA2' '' 0 'Execute each with prototype of CSV.' 'V←1↓⍎¨CSV,VV' '' 2 'Execute statement PS in VV of statements.' 'A←⍎PS⊃VV' '' 2 'Execute which works on empty vector.' 'V←1↓⍎''0 '',V' '' 2 'Executing costly monadic function F on repetitive arguments.' '(F A/XV)[+\A←(XV⍳XV)=⍳⍴XV]' '' 0 'Execution of expression NV with default value Y.' '⍎((NV∧.='' '')/''Y''),NV' '' 0 'EXIT. Leave all levels of program.' (,'→') '' 2 'Expand N, but change fill item to NS.' 'N←(NS×~B)+B\N' '' 2 'Expand N, but change fill item to one.' 'N←(~B)+B\N' '' 2 'Expand V given length vector L.' 'V←(,L∘.≥⍳⌈/L)\V' '' 2 'Expansion vector with zero after indices IV.' '(⍴NV)≥⍋(⍳⍴NV),IV' '' 0 'Expansion vector with zero after indices IV.' '~(⍳(⍴IV)+⍴XV)∊IV+⍳⍴IV' '' 0 'Extending a distance table to next leg.' 'NM←NM⌊.+NM' '' 0 'Extending a transitive binary relation.' 'BM←BM∨.∧BM' '' 0 'Field lengths of vector XV; IV ←→ ending indices.' 'IV-¯1↓0,IV←(~⎕IO)+(((1↓XV)≠¯1↓XV),1)/⍳⍴XV' '' 0 'Field width ≤NS of fractional part of number.' 'IA←+⌿NA≠⌊NA←(10*⍳NS)∘.×NA' '0=⎕IO' 2 'Field width ≤NS of fractional part of number.' 'IA←+⌿NA≠⌊NA←(10*-1-⍳NS)∘.×NA' '1=⎕IO' 2 'Field width for integral part of number.' 'IA←1+⌊10⍟1⌈NA' '' 2 'Fifo stock NV decremented with NS units.' 'A-¯1↓0,A←0⌈(+\NV)-NS' '' 0 'Filling XV with last element of XV to length IS.' 'IS↑XV,IS⍴¯1↑XV' '' 0 'Find description of VY from VX index to VVX.' 'VVY←(VVX,'' '')[VX⍳VY]' '' 2 'Find functions that contain string C.' 'CM←(1∊¨(⊂C)⍷¨⎕CR¨⊂[1]CM)⌿CM←⎕NL 3' '0=⎕IO' 2 'Find functions that contain string C.' 'CM←(1∊¨(⊂C)⍷¨⎕CR¨⊂[2]CM)⌿CM←⎕NL 3' '1=⎕IO' 2 'Find the exponent of NA such that NA*FA = A.' 'FA←NA⍟A' '' 2 'Finds the rows of CM containing C.' 'CM←(∨/C⍷CM)⌿CM' '' 2 'Finds the rows of CM that start with C.' 'CM←(,1↑[1]C⍷CM)⌿CM' '0=⎕IO' 2 'Finds the rows of CM that start with C.' 'CM←(,1↑[2]C⍷CM)⌿CM' '1=⎕IO' 2 'Finds word number NS in C.' ('C←NS⊃(C≠'' '')',(⎕ucs 8838 67)) '' 2 'First column as a matrix.' 'XM[;,1]' '' 0 'First column as a vector.' 'XM[;1]' '' 0 'First group of ones.' 'BA∧∧\BA=∨\BA' '' 0 'First IS figurative numbers.' 'I←+\+\1+⍳IS' '0=⎕IO' 2 'First IS figurative numbers.' 'I←+\+\⍳IS' '1=⎕IO' 2 'First IS triangular numbers.' 'I←+\1+⍳IS' '0=⎕IO' 2 'First IS triangular numbers.' 'I←+\⍳IS' '1=⎕IO' 2 'First occurrence of string XV in matrix XM.' '(XM∧.=XV)⍳1' '¯1↑⍴XM ←→ ⍴XV' 0 'First occurrence of string XV1 in string XV2.' '(∧⌿(¯1+⍳⍴XV1)⌽XV1∘.=XV2)⍳1' '' 0 'First one (&lt;\) in each subvector of BV2 indicated by BV1.' '(BV2∧BV1)∨(BV2∨BV1)\A>¯1↓0,A←(BV2∨BV1)/BV2' '' 0 'First one (turn off all ones after first one).' '&lt;\BA' '' 0 'First ones in groups of ones.' 'BA>((-⍴⍴BA)↑¯1)↓0,BA' '' 0 'First ones in groups of ones.' 'BV>¯1↓0,BV' '' 0 'First part of numeric code ABBB.' '⌊IA÷1000' '' 0 'First word in CV.' '(¯1+CV⍳'' '')↑CV' '' 0 'Force 0÷0 into DOMAIN ERROR in division.' 'NA2×÷NA1' '' 0 'Force each item to same shape by overtake.' 'AV←(⌈/⍴¨AV)↑¨AV' '' 2 'Force each item to same shape by reshape.' 'AA←(⌈/(-⌈/⍴¨⍴¨AA)↑¨⍴¨AA)⍴¨AA' '' 2 'Force N numbers to range 0≤N≤NS.' 'N←0⌈NS⌊N' '' 2 'Force to 0 any N greater than NS.' 'N←N×N≤NS' '' 2 'Force to 0 any N less than NS.' 'N←N×NS≤N' '' 2 'For-loop ending construct.' '→IS2⌈⍳IS3≥IS1←IS1+1' '' 0 'Format and right justify columns of report.' 'CM←1↓[0]⍕0,[0]AA' '0=⎕IO' 2 'Format and right justify columns of report.' 'CM←1↓[1]⍕0,[1]AA' '1=⎕IO' 2 'Format and right justify NS wide columns.' 'CM←1↓[0](NS,0)⍕0,[0]AA' '0=⎕IO' 2 'Format and right justify NS wide columns.' 'CM←1↓[1](NS,0)⍕0,[1]AA' '1=⎕IO' 2 'Formatting a numerical vector to run down the page.' '⍕NV∘.+,0' '' 0 'Formatting NA with IV2 decimals in fields of width IV1.' '(,IV1,[1.1]IV2)⍕NA' '' 0 'Formatting with zero values replaced with blanks.' '(⍴A)⍴B\(B←,(''0''≠A)∨'' ''≠¯1⌽A)/,A←'' '',⍕XA' '' 0 'Forming a IS-row matrix with all rows alike (XV).' '(IS,⍴XV)⍴XV' '' 0 'Forming a transitive closure.' '→⎕LC⌈⍳∨/,(BM←BM∨BM∨.∧BM)≠+BM' '' 0 'Forming a two-column matrix.' 'XV1,[1.1]XV2' '' 0 'Forming a two-row matrix.' 'XV1,[.1]XV2' '' 0 'Forming an initially empty array to be expanded.' '0 80⍴0' '' 0 'Forming first row of a matrix to be expanded.' '1 80⍴80↑XV' '' 0 'Fractional part.' '1|NA' '' 0 'Fractional part of number with sign.' 'FA←(×NA)|NA' '' 2 'Fractional part of number.' 'FA←1|NA' '' 2 'Fractional part with sign.' '(×NA)|NA' '' 0 'Framing.' '''_'',[1](''|'',CM,''|''),[1]''¯''' '' 0 'Framing CM in a box.' 'CM←''|'',(''¯'',[0]CM,[0]''_''),''|''' '0=⎕IO' 2 'Framing CM in a box.' 'CM←''|'',(''¯'',[1]CM,[1]''_''),''|''' '1=⎕IO' 2 'Frequency of X in Y.' 'N←+/X∘.=Y' '' 2 'From complex to magnitude and radians.' 'A←10 12∘.○ZA' '2=≢A' 2 'From magnitude AX and degrees AY to complex.' 'ZA←AX×¯12○○AY÷180' '' 2 'From magnitude AX and radians AY to complex.' 'ZA←AX×¯12○AY' '' 2 'From nested to simple char image.' 'CM←⍕⊂1/AA' '' 2 'Future value of cash flows NA at int FS.' 'A←(1+FS)⊥NA' '' 2 'Future value of cash flows NV at interest rate NS %.' '(1+NS÷100)⊥NV' '' 0 'Gamma function.' '!NS-1' '' 0 'Gamma function.' 'N←!N-1' '' 2 'Get (N+1)th item in vector V.' 'S←⊃N↓V' '' 2 'Get angle (deg) of real AX and imaginary AY.' 'NA←(180÷○1)×12○AX+¯11○AY' '' 2 'Get angle (rad) of real AX and imaginary AY.' 'NA←12○AX+¯11○AY' '' 2 'Get angle in degrees of A.' 'NA←(180÷○1)×12○0J1⊥⊖A' '' 2 'Get angle in radians of A.' 'NA←12○0J1⊥⊖A' '2=≢A (x,y) pairs' 2 'Get magnitude of A.' 'NA←|0J1⊥⊖A' '2=≢A (x,y) pairs' 2 'Get magnitude of AX, AY coordinates.' 'NA←|AX+¯11○AY' '' 2 'Get magnitude of NA pairs.' 'NA←|0J1⊥⊖NA' '2=≢NA' 2 'Get magnitude of real AX and imaginary AY.' 'NA←|AX+¯11○AY' '2=≢A (x,y) pairs' 2 'Ghost Buster. Inc rank by one on last dim.' 'A←,['''']A' '' 2 'Giving a character default value for input.' '1↑⍞,CS' '' 0 'Giving a numeric default value for input.' '1⍴(⍎⍞,'',⍬''),NS' '' 0 'Grade down (⍒) for sorting subvectors of NV having lengths IV.' 'A[⍋(+\(⍳⍴NV)∊+\⎕IO,IV)[A←⍒NV]]' '⍴NQ ←→ +/IV' 0 'Grade down (⍒) for sorting subvectors of NV indicated by BV.' 'A[⍋(+\BV)[A←⍒NV]]' '' 0 'Grade up (⍋) for sorting subvectors of NV having lengths IV.' 'A[⍋(+\(⍳⍴NV)∊+\⎕IO,IV)[A←⍋NV]]' '⍴NQ ←→ +/IV' 0 'Grade up (⍋) for sorting subvectors of NV indicated by BV.' 'A[⍋(+\BV)[A←⍋NV]]' '' 0 'Grade up according to key XV1.' '⍋XV1⍳XV2' '' 0 'Graph of XV(NV) at points NV (''NV''∊XV).' ''' *''[⎕IO+(⌽(¯1+⌊/A)+⍳1+(⌈/A)-⌊/A)∘.=A←⌊.5+⍎XV]' '' 0 'Gray code or reflected binary. Inverse of ≠\.' 'B←2≠/0,B' '' 2 'Greatest common divisor of elements of IV.' '⌈/(∧/0=A∘.|IV)/A←⍳⌊/IV' '' 0 'Greatest common divisor of vector I.' 'IS←⌈/(∧/0=V∘.|I)/V←1+⍳⌊/I' '0=⎕IO' 2 'Greatest common divisor of vector I.' 'IS←⌈/(∧/0=V∘.|I)/V←⍳⌊/I' '1=⎕IO' 2 'Groups of ones in BA2 pointed to by BA1 (or trailing parts).' 'BA2∧A=⌈\BA1×A←+\BA2>¯1↓0,BA2' '' 0 'Groups of ones in BV2 pointed to by BV1.' 'BV2∧A∊(BV1∧BV2)/A←+\BV2>¯1↓0,BV2' '' 0 'Handling array XA temporarily as a vector.' ('(⍴XA)⍴ ',(⎕ucs 8230),' ,XA') '' 0 ('Helps locating column positions 1',(⎕ucs 8230),'IS.') '1 0⍕10 10⊤1-⎕IO-⍳IS' '' 0 'Hex to Dec.' ('I←16⊥¨(⌈.5×(2|⍴H)+1+⍳⍴H)',(⎕ucs 8838),'(⎕D,⎕A)⍳H') '0=⎕IO' 2 'Hex to Dec.' ('I←16⊥¨(⌈.5×(2|⍴H)+⍳⍴H)',(⎕ucs 8838),'16|(⎕D,⎕A)⍳H') '1=⎕IO' 2 'Hex/Char.' ('C←⎕UCS 16⊥¨(⌈.5×(2|⍴H)+1+⍳⍴H)',(⎕ucs 8838),'(⎕D,⎕A)⍳H') '0=⎕IO' 2 'Hex/Char.' ('C←⎕UCS 16⊥¨(⌈.5×(2|⍴H)+⍳⍴H)',(⎕ucs 8838),'16|(⎕D,⎕A)⍳H') '1=⎕IO' 2 'Hilbert matrix of order IS.' '÷¯1+(⍳IS)∘.+⍳IS' '' 0 'Hilbert matrix of order IS.' 'M←÷1+(⍳IS)∘.+⍳IS' '0=⎕IO' 2 'Hilbert matrix of order IS.' 'M←÷¯1+(⍳IS)∘.+⍳IS' '1=⎕IO' 2 'Histogram (distribution barchart; down the page).' ''' ⎕''[⎕IO+(⌽⍳⌈/A)∘.≤A←+/(⍳1+(⌈/IV)-⌊/IV)∘.=IV]' '' 0 'Hyperbolic Arccosine of NA in radians.' 'FA←¯6○NA' '' 2 'Hyperbolic Arcsine of NA in radians.' 'FA←¯5○NA' '' 2 'Hyperbolic Arctangent of NA in radians.' 'FA←¯7○NA' '' 2 'Hyperbolic Cosine of NA in radians.' 'FA←6○NA' '' 2 'Hyperbolic Sine of NA in radians.' 'FA←5○NA' '' 2 'Hyperbolic Tangent of NA in radians.' 'FA←7○NA' '' 2 'I random boolean numbers.' 'BA←?I⍴2' '0=⎕IO' 2 'I random boolean numbers.' 'BA←¯1+?I⍴2' '1=⎕IO' 2 'Identity matrix of shape of matrix NM.' '(⍴NM)⍴1,0×NM' '' 0 'Identity matrix: IS by IS.' 'M←IS IS⍴1,IS⍴0' '' 2 'Identity matrix: IS by IS.' 'M←⊃⌹/0⍴⊂IS⍴0' '' 2 'Identity matrix: IS by IS.' 'M←(⍳IS)∘.=⍳IS' '' 2 'Identity of two sets.' '∧/(XV1∊XV2),XV2∊XV1' '' 0 'IF NOT. Branch if condition B false.' '→IS×1~B' '' 2 'If Then/Else.' 'A←⍎⊃BS↓''else part'' ''then part''' '' 2 'IF. Branch on condition B.' '→IS+0~B' '' 2 'Increase rank by one after dim IS.' 'A←,[IS+.5]A' '' 2 'Increase rank by one on the first dim.' 'A←,[¯.5]A' '0=⎕IO' 2 'Increase rank by one on the first dim.' 'A←,[.5]A' '1=⎕IO' 2 'Increase rank of AX to rank of AY.' 'A←((-⍴⍴AY)↑((⍴⍴AY)⍴1),⍴AX)⍴AX' '' 2 'Increasing absolute value without change of sign.' '(×NA1)×NA2+|NA1' '' 0 'Increasing rank of XA2 to rank of XA1.' '((((⍴⍴XA1)-⍴⍴XA2)⍴1),⍴XA2)⍴XA2' '' 0 'Increasing the dimension of XV to multiple of IS.' 'XV,(IS|-⍴XV)↑0/XV' '' 0 'Incrementing cyclic counter NA with upper limit NS.' '1+NS⊤NA' '' 0 'Index Generator with step IS. From X to Y.' 'N←X+IS×⍳0⌈(IS≠0)+⌊(Y-X)÷IS' '0=⎕IO' 2 'Index Generator with step IS. From X to Y.' 'N←X+IS×¯1+⍳0⌈(IS≠0)+⌊|(Y-X)÷IS' '1=⎕IO' 2 'Index Generator. Range from X to Y.' 'N←X+(×N)×⍳1+⌊|N←Y-X' '0=⎕IO' 2 'Index Generator. Range from X to Y.' 'N←X+0,(×N)×⍳⌊|N←Y-X' '1=⎕IO' 2 'Index of (first) maximum element of NV.' 'NV⍳⌈/NV' '' 0 'Index of (first) minimum element of NV.' '1↑⍋NV' '' 0 'Index of (first) minimum element of NV.' 'NV⍳⌊/NV' '' 0 'Index of first differing element in vectors XV1 and XV2.' '(XV2≠XV1)⍳1' '' 0 'Index of first maximum element of NV.' '1↑⍒NV' '' 0 'Index of first non-blank, counted from the rear.' '('' ''=CV)⊥1' '' 0 'Index of first occurrence of elements of CV2.' '⌊/CV1⍳CV2' '' 0 'Index of first occurrence of XA in XV (circularly) after IS.' '⎕IO+(⍴XV)|IS+(IS⌽XV)⍳XA' '' 0 'Index of first occurrences of rows of XA as rows of XM.' '⎕IO++⌿∧⍀XM∨.≠⍉XA' '' 0 'Index of first one after index IS in BV.' 'IS+(IS↓BV)⍳1' '' 0 'Index of first satisfied condition in BV.' 'BV⍳1' '' 0 'Index of key XA in key vector XV.' 'XV⍳XA' '' 0 'Index of last maximum element of NV.' '¯1↑⍋NV' '' 0 'Index of last occurrence of XA in XV (⎕IO-1 if not found).' '((¯1 1)[2×⎕IO]+⍴XV)-(⌽XV)⍳XA' '' 0 'Index of last occurrence of XA in XV (0 if not found).' '(1+⍴XV)-(⌽XV)⍳XA' '' 0 'Index of last occurrence of XA in XV, counted from the rear.' '(⌽XV)⍳XA' '' 0 'Index of the elements of NV1 in NV2.' '(((1,A)/B)⌊1+⍴NV2)[(⍴NV2)↓(+\1,A←(1↓A)≠¯1↓A←A[B])[⍋B←⍋A←NV2,NV1]]' '' 0 'Index of the largest item.' 'IS←⊃⍒N' '' 2 'Index of the largest item.' 'IO←N⍳⌈/N' '' 2 'Index of the smallest item.' 'IS←⊃⍋N' '' 2 'Index of the smallest item.' 'IO←N⍳⌊/N' '' 2 'Index origin (⎕IO) as a vector.' '⍳1' '' 0 'Index pairs of saddle points.' '⎕IO+(⍴NM)⊤-⎕IO-(,(NM=(⍴NM)⍴⌈⌿NM)∧NM=⍉(⌽⍴NM)⍴⌊/NM)/⍳×/⍴NM' '' 0 'Indexing independent of index origin.' 'XV[⎕IO+IA]' '' 0 'Indexing scattered elements.' '(,XA)[⎕IO+(⍴XA)⊥IM-⎕IO]' '' 0 'Indexing when rank is not known beforehand.' '⍎''XA['',((¯1+⍴⍴XA)⍴'';''),''IA]''' '' 0 'Indexing with boolean value BA (plotting a curve).' ''' *''[⎕IO+BA]' '' 0 'Indicating equal elements of XV as a logical matrix.' '⍉XV∘.=(1 1⍉&lt;\XV∘.=XV)/XV' '' 0 'Indicator of first occurrence of each unique element of XV.' '(XV⍳XV)=⍳⍴XV' '' 0 'Indices of all occurrences of elements of XA in XV.' '(XV∊XA)/⍳⍴XV' '' 0 'Indices of all occurrences of XS in XV.' '(XS=XV)/⍳⍴XV' '' 0 'Indices of elements of XM2 in corr. rows of XM1 (XM1[i;]⍳XM2[i;]).' '1++/∧\1 2 1 3⍉XM2∘.≠XM1' '' 0 'Indices of elements XA2 in array XA1.' '⎕IO+(⍴XA1)⊤(-⎕IO)+(,XA1∊XA2)/⍳⍴,XA1' '' 0 'Indices of first blanks in rows of array CA.' '⎕IO++/∧\'' ''≠CA' '' 0 'Indices of last non-blanks in rows.' '('' ''≠CA)⌈.×⍳¯1↑⍴CA' '' 0 'Indices of ones in logical vector BV.' '(+/BV)↑⍒BV' '' 0 'Indices of ones in logical vector BV.' '(+\BV)⍳⍳+/BV' '' 0 'Indices of ones in logical vector BV.' 'BV/⍳⍴BV' '' 0 'Indices of subvectors of length IS starting at IV+1.' 'IV∘.+⍳IS' '' 0 'Initialize a matrix with no rows.' 'M←0 IS⍴''''' '' 2 'Initialize variables to the empty vector.' 'N←B←I←F←Z←⍬' '' 2 'Input continuation.' 'V←1 2 3 4 5 6 7 8 9 0,⎕' '' 2 'Input of row IS of text matrix CM.' 'CM[IS;]←(≢CM)↑⍞' '' 0 'Insert NS items S after each item of V.' 'V←∊V,¨⊂NS⍴S' '' 2 'Insert NS items S before each item of V.' 'V←∊(⊂NS⍴S),¨V' '' 2 'Insert the first item of C where C is in CM.' ('CM←↑∊¨⊂[1]CM',(⎕ucs 8867),'((,CM∊C)/,CM)←↑C') '0=⎕IO' 2 'Insert the first item of C where C is in CM.' ('CM←↑∊¨⊂[2]CM',(⎕ucs 8867),'((,CM∊C)/,CM)←↑C') '1=⎕IO' 2 'Insert vector for IV[i] elements before i:th element.' '(⍳+/A)∊+\A←1+IV' '' 0 'Insert vector for IV[i] zeroes after i:th subvector.' '(⍳(⍴BV)++/IV)∊+\1+¯1↓0,(1⌽BV)\IV' '' 0 'Insert X after positions P in V.' 'V←(V,X)[⍋(⍳⍴V),P]' '(⍴P)=⍴X' 2 'Inserting IS *''s into vector CV after indices IV.' '(CV,''*'')[(⎕IO+⍴CV)⌊⍋(⍳⍴CV),(IS×⍴IV)⍴IV]' '' 0 'Inserting vector XV into matrix XM after row IS.' 'XM[⍳IS;],[1]((1↓⍴XM)↑XV),[1](2↑IS)↓XM' '' 0 'Inserting vector XV to the end of matrix XM.' '(A↑XM),[⍳1](1↓A←(⍴XM)⌈0,⍴XV)↑XV' '' 0 'Inserting XS after each element of XV.' ',XV,[1.1]XS' '' 0 'Inserting XV1 into XV2 after index IS.' '(IS↑XV2),XV1,IS↓XV2' '' 0 'Integer and fractional parts of positive numbers.' '0 1⊤NA' '' 0 'Integer representation of logical vectors.' '2⊥BA' '' 0 'INTEGER. Truncate to whole number.' 'IA←(×NA)×⌊|NA' '' 2 'Integral+fractional part of positive number.' 'FA←0 1⊤NA' '' 2 'Interpolated value of series (NV1,NV2) at NS.' 'NS⊥NV2⌹NV1∘.*⌽-⎕IO-⍳⍴NV1' '' 0 'Interpretation of roman numbers.' '+/A×¯1*A&lt;1⌽A←0,(1000 500 100 50 10 5 1)[''MDCLXVI''⍳XA]' '' 0 'Intersection of sets, ⍞.' '(XV∊XA)/XV' '' 0 'Intersection of two sets of numbers.' 'V←(X∊Y)/X' '' 2 'Intersection of two sets of numbers.' 'V←Y~Y~X' '' 2 'Inverse of +\. Difference of adjacent pairs.' 'N←¯2-/0,N' '' 2 'Inverting a permutation.' '⍋IV' '' 0 'Inverting a permutation.' 'IV⍳⍳⍴IV' '' 0 'Inverting a permutation.' 'A←⍳⍴IV ⋄ A[IV]←A ⋄ A' '' 0 'Inverting a permutation.' 'I←⍋N' '' 2 'Is CX lexically greater than CY?' 'BS←>/⍋⎕UCS↑CX CY' '' 2 'Is CX lexically greater than or equal to CY?' 'BS←&lt;/⍒⎕UCS↑CX CY' '' 2 'Is CX lexically less than CY?' 'BS←>/⍒⎕UCS↑CX CY' '' 2 'Is CX lexically less than or equal to CY?' 'BS←&lt;/⍋⎕UCS↑CX CY' '' 2 'IS degree polynomial fit given X,Y values.' 'C←Y⌹X∘.*⍳IS+1' '0=⎕IO' 2 'IS degree polynomial fit given X,Y values.' 'C←Y⌹X∘.*(⍳IS+1)-1' '1=⎕IO' 2 'IS first figurate numbers.' '#NAME?' '' 0 'IS first triangular numbers.' '#NAME?' '' 0 'Is IS (YYYY) a leap year?' 'B←0≠.=400 100 4∘.|IS' '' 2 'IS largest elements of NV in order of occurrence.' '((⍋⍒NV)∊⍳IS)/NV' '' 0 'IS months from "0" given IS (YYYYMM) date.' 'IS←0 12⊥0 100⊤IS' '' 2 'Is N an integer in range [XY) XY ←→ lo,hi.' 'B←&lt;/(N&lt;⌈N),N∘.&lt;XY' '' 2 'Is N in range (XY) XY ←→ lo,hi.' 'B←((⊃XY)&lt;N)∧N&lt;⊃⌽XY' '' 2 'Is N in range (XY] XY ←→ lo,hi.' 'B←>/N∘.>XY' '' 2 'Is N in range [XY) XY ←→ lo,hi.' 'B←&lt;/N∘.&lt;XY' '' 2 'Is N in range [XY] XY ←→ lo,hi.' 'B←((⊃XY)≤N)∧N≤⊃⌽XY' '' 2 'IS place-base NS rep. of a fraction.' 'NA←(¯1⌽⍳1+⍴⍴FA)⍉⌊(IS⍴NS)⊤(NS*IS)×1|FA' '' 2 'IS smallest elements of NV in order of occurrence.' '((⍋⍋NV)∊⍳IS)/NV' '' 0 'IS:th subvector of XV (subvectors indicated by BV).' '(IS=+\BV)/XV' '' 0 'IS:th subvector of XV (subvectors separated by XV[1]).' '1↓(IS=+\XV=1↑XV)/XV' '' 0 'IS×IS identity matrix.' '(⍳IS)∘.=⍳IS' '' 0 'IS×IS identity matrix.' '(IS,IS)⍴1,IS⍴0' '' 0 'IS×IS lower triangular matrix.' '(⍳IS)∘.≥⍳IS' '' 0 'IS×IS upper triangular matrix.' '(⍳IS)∘.≤⍳IS' '' 0 'ISBN check digit generator from C.' 'IS←|¯11|+/+\10↑⍎¨C' 'C∧.∊⎕D' 2 'IS-degree polynomial (curve) fit of points (NV1,NV2).' '⌽NV2⌹NV1∘.*0,⍳IS' '' 0 'Isometric scaling by 2.1.' 'ZA←ZA×2.1' '' 2 'ISth subvector of V given boolean B.' ('V←IS⊃(+\B)',(⎕ucs 8838 86)) '' 2 'ISth subvector of V given length L.' ('V←IS⊃(L/⍳⍴L)',(⎕ucs 8838 86)) '' 2 'Item equals. Find item V in array A.' 'BA←A≡¨⊂V' '' 2 'Ith starting indicators BV1.' '(+\BV1)∊BV2/⍳⍴BV2' '' 0 'IV is the ranking of NA in same order.' 'IV←⍋⍋NA' '' 2 'IV is the ranking of NA in same order.(fast).' 'IV[I]←IV←⍳⍴I←⍋NA' '' 2 'IV2-shaped array of random numbers within ( IV1[1],IV1[2] ].' 'IV1[1]+?IV2⍴--/IV1' '' 0 'Join XA real and YA imaginary to complex.' 'ZA←AX+¯11○AY' '' 2 'Joining a set of variables into one variable.' 'VV←N B I F Z' '' 2 'Joining array of arrays - horizontally.' 'A←↑,/AA' '' 2 'Joining array of arrays - vertically.' 'M←↑,[0]/AA' '0=⎕IO' 2 'Joining array of arrays - vertically.' 'A←↑,[1]/AA' '1=⎕IO' 2 'Joining conforming matrices - horizontally.' 'M←⊃,/MW MX MY' '' 2 'Joining corresponding items in vectrices.' 'AV←⊃,¨/VA' '' 2 'Joining current date.' 'IS←0 100 100⊥3↑⎕TS' '' 2 'Joining matrices - vertically.' 'M←↑⊃,/⊂[1]¨MW MX MY' '0=⎕IO' 2 'Joining matrices - vertically.' 'M←↑⊃,/⊂[2]¨MW MX MY' '1=⎕IO' 2 'Joining pairs of ones.' 'BA∨≠\BA' '' 0 'Joining sentences.' 'XV,0⍴XA' '' 0 'Julian date (YYYYDDD).' 'IS←(1000×Y)+D+(M⊃0 0,+\30+1 ¯2,∊5 4⍴¨⊂1 0)+(M>2)∧0=4|Y' '1=⎕IO' 2 'Julian date (YYYYDDD).' 'IS←(1000×Y)+D+(M⊃0,+\30+1 ¯2,∊5 4⍴¨⊂1 0)+(M>2)∧0=4|Y' '0=⎕IO' 2 'Julian day (DDD) given Y M D.' 'IS←D+(M⊃0 0,+\30+1 ¯2,∊5 4⍴¨⊂1 0)+(M>2)∧0=4|Y' '1=⎕IO' 2 'Julian day (DDD) given Y M D.' 'IS←D+(M⊃0,+\30+1 ¯2,∊5 4⍴¨⊂1 0)+(M>2)∧0=4|Y' '0=⎕IO' 2 'Justifying left.' '(+/∧\'' ''=CA)⌽CA' '' 0 'Justifying left fields of XV (lengths IV) to length IS.' '(,IV∘.>(⍳IS)-⎕IO)\XV' '' 0 'Justifying right.' '(1-('' ''=CA)⊥1)⌽CA' '' 0 'Justifying right.' '(-+/∧\⌽'' ''=CA)⌽CA' '' 0 'Justifying right fields of XV (lengths IV) to length IS.' '(,IV∘.>⌽(⍳IS)-⎕IO)\XV' '' 0 'Justifying text CV to right edge of field of width IS.' '(-IS)↑CV' '' 0 'Juxtapositioning planes of rank 3 array XQ.' '(×⌿2 2⍴1,⍴XQ)⍴2 1 3⍉XQ' '' 0 'Keep even words in a phrase.' 'C←(≠\C='' '')/C' '' 2 'Keep everything from ⊃C to ⊃1↓C in V.' 'V←(V⍳⊃1↓C)↑V←(1+V⍳⊃C)↓V' '0=⎕IO' 2 'Keep everything from ⊃C to ⊃1↓C in V.' 'V←(¯1+V⍳⊃1↓C)↑V←(V⍳⊃C)↓V' '1=⎕IO' 2 'Keep everything in range [0,NS).' 'N←(>/N∘.>0 NS)/N' '' 2 'Keep everything up to the 1st return.' 'C←(∧\C≠⎕UCS 10)/C' '' 2 'Keep odd words in a phrase.' 'C←(≠\¯1↓1,C='' '')/C' '' 2 'Keep PFK within range 1-12.' 'PFK←12+¯12|PFK' '' 2 'Koch island new generation.' 'Z←¯3↓,Z-[0]((2-/Z÷3),0)∘.×0 1,(1+1D60),2' '0=⎕IO' 2 'Koch island new generation.' 'Z←¯3↓,Z-[1]((2-/Z÷3),0)∘.×0 1,(1+1D60),2' '1=⎕IO' 2 'Kronecker delta of IA1 and IA2 (element of identity matrix).' 'IA2=IA1' '' 0 'L sequences of IS ones and zeros.' 'B←IS/L⍴1 0' '' 2 'Largest possible number.' 'FS←⌊/⍬' '' 2 'Last element of numeric vector NV as a scalar.' '0⊥NV' '' 0 'Last ones in groups of ones.' 'BV>1↓BV,0' '' 0 'Last part of numeric code ABBB.' '1000|IA' '' 0 'Last row of matrix XA as a vector.' '0⊥XA' '' 0 'Leading ones (∧\) in each subvector of BV2 indicated by BV1.' '~≠\(BV2≤BV1)\A≠¯1↓0,A←~(BV2≤BV1)/BV2' '' 0 'Leading ones (turn off all ones after first zero).' '∧\BA' '' 0 'Leading zeroes for IV in fields of width IS.' '0 1↓(2↑IS+1)⍕IV∘.+,10*IS' 'IV≥0' 0 'Least squares linear fit given X,Y values.' 'V←N+.×Y⌹N←X∘.*0 1' '' 2 'Left justify C in field width NS.' 'C←(-NS)↑C' '' 2 'Left justify matrix CM.' 'CM←(+/∧\CM='' '')⌽CM' '' 2 'Leftmost neighboring elements.' '((-⍴⍴NA)↑¯1)↓0,NA' '' 0 'Leftmost neighboring elements cyclically.' '¯1⌽XA' '' 0 'Length of polygon.' 'S←+/|2-/Z' '' 2 'Length vector given boolean vector B.' 'L←(1↓P,1+⍴B)-P←B/⍳⍴B' '' 2 'Length vector given first position indices.' 'L←¯2-/P,1+⍴B' '' 2 'Length vector given last position indices.' 'L←¯2-/0,P' '' 2 'Length vector given unique items in V.' 'L←+/U∘.≡V' '' 2 'Lengthening matrix XM1 to be compatible with XM2.' '((1 0×⍴XM2)⌈⍴XM1)↑XM1' '' 0 'Lengths of groups of ones in BV.' '(A>0)/A←(1↓A)-1+¯1↓A←(~A)/⍳⍴A←0,BV,0' '' 0 'Lengths of subvectors of XV having equal elements.' '(1↓A)-¯1↓A←(A,1)/⍳1+⍴A←1,(1↓XV)≠¯1↓XV' '' 0 'Life: next generation given O&lt;=>140 3x3 wins.' 'M←¯1⌽¯1⊖⊃∨/O⍷¨⊂M' '' 2 'Limiting indices and giving a default value XS.' '(XV,XS)[(1+⍴XV)⌊IA]' '' 0 'Limiting NA between NV[1] and NV[2], inclusive.' 'NV[1]⌈NV[2]⌊NA' '' 0 'Limits NA to fit in ⍕ field IV[1 2].' '(NA⌈1↓A)⌊1↑A←(2 2⍴¯1 1 1 ¯.1)+.×10*(-1↓IV),-/IV+IV>99 0' '' 0 'List of functions and operators without '' ''.' 'VV←(⊂[1]⎕NL 3 4)~¨'' ''' '0=⎕IO' 2 'List of functions and operators without '' ''.' 'VV←(⊂[2]⎕NL 3 4)~¨'' ''' '1=⎕IO' 2 'List of names in CM (one per row).' '1↓,'','',CM' '' 0 'Locating field number IS starting with first element of CV.' '(IS=+\CV=1↑CV)/CV' '' 0 'Locations of texts between and including quotes.' 'A∨¯1↓0,A←≠\CV=''''''''' '' 0 'Locations of texts between and including quotes.' 'A∨¯1↓0,A←2|+\CV=''''''''' '' 0 'Locations of texts between quotes.' 'A∧¯1↓0,A←≠\CV=''''''''' '' 0 'Locations of texts between quotes.' 'A∧¯1↓0,A←2|+\CV=''''''''' '' 0 'Lower triangular matrix: IS by IS.' 'M←(⍳IS)∘.>⍳IS' '' 2 'Magnitude of fractional part.' '1||NA' '' 0 'Magnitude of fractional part of number.' 'FA←1||NA' '' 2 'Magnitude. Absolute Value of NA.' 'NA←|NA' '' 2 'Major diagonal of array XA.' '(1*⍴XA)⍉XA' '' 0 'Major diagonal of matrix XM.' '1 1⍉XM' '' 0 'Mask Operator. Merge X and Y using B.' 'V[⍋~B]←V←(B/X),(~B)/Y' '' 2 'Matricize - for any rank.' 'M←,[¯1↓⍳⍴⍴A]1/A' '' 2 'Matricize - for any rank.' 'M←((×/¯1↓⍴A),¯1↑1,⍴A)⍴A' '' 2 'Matricize - rank 0, 1, or 2.' 'M←(¯2↑1 1,⍴A)⍴A' '' 2 'Matrix for choosing all subsets of XV (truth table).' '((⍴XV)⍴2)⊤¯1+⍳2*⍴XV' '' 0 'Matrix of all indices of XA.' '⎕IO+(⍴XA)⊤(⍳×/⍴XA)-⎕IO' '' 0 'Matrix of vectors to vector of matrices.' 'VM←↑¨⊂[1]MV' '0=⎕IO' 2 'Matrix of vectors to vector of matrices.' 'VM←↑¨⊂[2]MV' '1=⎕IO' 2 'Matrix product.' 'NA1+.×NA2' '¯1↑⍴NA1 ←→ 1↑⍴NA2' 0 'Matrix product.' 'M←MX+.×MY' '' 2 'Matrix to vector at character CS.' 'V←¯1↓(,⌽1,∨\CS≠⌽CM)/,CM,CS' '' 2 'Matrix to vector of column vectors.' 'VV←,⌿M' '' 2 'Matrix to vector of row vectors.' 'VV←⊂[1]M' '0=⎕IO' 2 'Matrix to vector of row vectors.' 'VV←⊂[2]M' '1=⎕IO' 2 'Matrix with IS columns NV.' '⍉(IS,⍴NV)⍴NV' '' 0 'Matrix with IV[i] leading ones on row i.' 'IV∘.≥⍳⌈/IV' '' 0 'Matrix with IV[i] leading zeroes on row i.' 'IV∘.&lt;⍳⌈/IV' '' 0 'Matrix with IV[i] trailing ones on row i.' 'IV∘.≥⌽⍳⌈/IV' '' 0 'Matrix with IV[i] trailing zeroes on row i.' 'IV∘.&lt;⌽⍳⌈/IV' '' 0 'Matrix with shape of XM and XV as its columns.' '⍉(⌽⍴XM)⍴XV' '' 0 'Maxima (⌈/) of elements of subvectors of NV indicated by BV.' 'NV[A[BV/⍋(+\BV)[A←⍒NV]]]' '' 0 'Maxima of elements of subsets of XV specified by BA.' 'A+(XV-A←⌊/XV)⌈.×BA' '' 0 'Maximum of elements of NV.' '⌈/NV' '' 0 'Maximum of magnitude of NM preserving sign.' 'N←N××.5-(⌈/NM)≠N←⌈/|NM' '' 2 'Maximum of magnitude of NM.' 'N←⌈/|NM' '' 2 'Maximum of negative value of NM.' 'N←⌊/NM,0' '' 2 'Maximum of NV1 with weights NV2.' 'NV2⌈.×NV1' '' 0 'Maximum of positive value of NM.' 'N←⌈/NM,0' '' 2 'Maximum table.' '(⍳IS)∘.⌈⍳IS' '' 0 'Maximum value of NM.' 'N←⌈/NM' '' 2 'Meaning of life.' '⍎⊖⍕⊃⊂|⌊-*+○⌈×÷!⌽⍉⌹~⍴⍋⍒,⍟?⍳0' '' 0 'Median.' 'NV[(⍋NV)[⌈.5×⍴NV]]' '' 0 'Median of non-empty N.' 'MED←.5×+/N[(⍋N)[⌈.5×¯1 0+⍴N←,N]]' '0=⎕IO' 2 'Median of non-empty N.' 'MED←.5×+/N[(⍋N)[⌈.5×0 1+⍴N←,N]]' '1=⎕IO' 2 'Merge X and Y alternately.' 'V←∊X,¨Y' '' 2 'Merging vectors XV1 and XV2 alternately.' ',XV2,[⎕IO+.5]XV1' '' 0 'Merging XV1 and XV2 under control of BV (mesh).' '(XV1,XV2)[⍋⍋BV]' '' 0 'Merging XV1 and XV2 under control of BV (mesh).' '(XV2,XV1)[⍋⍒BV]' '' 0 'Merging XV1 and XV2 under control of BV (mesh).' 'A[⍋BV]←A←XV2,XV1 ⋄ A' '' 0 'Merging XV1 and XV2 under control of BV (mesh).' 'A←BV\XV1 ⋄ A[(~BV)/⍳⍴BV]←XV2 ⋄ A' '' 0 ('Merging XV1, XV2, XV3, ',(⎕ucs 8230),' under control of IV (mesh).') ('(XV1,XV2,XV3,',(⎕ucs 8230),')[⍋⍋IV]') '' 0 'Mesh V according to mask pattern IV.' 'V←V[⍋⍋IV]' '' 2 'Mesh X and Y in V using boolean pattern B.' 'V[⍋B]←V←X,Y' '' 2 'Mid product of AX and AY.' 'A←AX,.×AY' '' 2 'Minima (⌊/) of elements of subvectors of NV indicated by BV.' 'NV[A[BV/⍋(+\BV)[A←⍋NV]]]' '' 0 'Minimum of elements of NV.' '⌊/NV' '' 0 'Minimum of magnitude of NM preserving sign.' 'N←N××.5-(⌊/NM)≠N←⌊/|NM' '' 2 'Minimum of magnitude of NM.' 'N←⌊/|NM' '' 2 'Minimum of NV1 with weights NV2.' 'NV2⌊.×NV1' '' 0 'Minimum value of NM.' 'N←⌊/NM' '' 2 'Mirror in X if B.' 'ZA←(¯10+~BA)○ZA' '' 2 'Mirror in X.' 'ZA←+ZA' '' 2 'Mirror in Y.' 'ZA←-+ZA' '' 2 'Mode(s) of data.' 'MODE←(I=⌈/I←+⌿N∘.=NU)/NU←(∨⌿&lt;\N∘.=N)/N' '' 2 'MODULO of NAX and NAY.' 'NA←NAY|NAX' '' 2 'Move blanks to end of each row of M.' '(,M)←(,M)[⍋,(2×⍳≢M)+[0]'' ''=M]' '0=⎕IO' 2 'Move blanks to end of each row of M.' '(,M)←(,M)[⍋,(2×⍳≢M)+[1]'' ''=M]' '1=⎕IO' 2 'Move figure by x=6, y=9.' 'ZA←ZA+6J9' '' 2 'Move items X to end of Y.' 'V←Y[⍋Y∊X]' '' 2 'Move set of points NM into first quadrant.' '1 2 1⍉NM∘.-⌊/NM' '' 0 'Moving all blanks to end of each row.' '(⍴CA)⍴(,(+/A)∘.>-⎕IO-⍳¯1↑⍴CA)\(,A←CA≠'' '')/,CA' '' 0 'Moving all blanks to end of text.' 'CV[⍒'' ''≠CV]' '' 0 'Moving elements satisfying condition BV to the start of XV.' 'XV[⍒BV]' '' 0 'Moving index of width IS for vector XV.' '(0,⍳(⍴XV)-IS)∘.+IS' '' 0 'Multiplication table.' '(⍳IS)∘.×⍳IS' '' 0 'Multiplication table: IS by IS.' 'M←(1+⍳IS)∘.×1+⍳IS' '0=⎕IO' 2 'Multiplication table: IS by IS.' 'M←(⍳IS)∘.×⍳IS' '1=⎕IO' 2 'Multiply each row of NM by vector N.' 'NM←NM×[0]N' '0=⎕IO' 2 'Multiply each row of NM by vector N.' 'NM←NM×[1]N' '1=⎕IO' 2 'N column matrix from N vectors.' 'M←↑[0]V W X Y' '0=⎕IO' 2 'N column matrix from N vectors.' 'M←↑[1]V W X Y' '1=⎕IO' 2 'N column matrix from N vectors.' 'M←⍉↑V W X Y' '' 2 'N row matrix from N vectors.' 'M←↑V W X Y' '' 2 'Negative infinity; the smallest representable value.' '⌈/⍬' '' 0 'Nested to simple char image w/o extra blanks.' 'CM←I↓(-I←(-2-2>⍴⍴AA)↑|≡AA)↓⍕⊂1/AA' '' 2 'None, neither.' '~∨/BA' '' 0 'Not first zero (≤\) in each subvector of BV2 indicated by BV1.' '~(B∧BV1)∨(B∨BV1)\A>¯1↓0,A←(B∨BV1)/B←~BV2' '' 0 'Not first zero (turn on all zeroes after first zero).' '≤\BA' '' 0 'Not leading zeroes (turn on all zeroes after first one).' '∨\BA' '' 0 'Not leading zeroes(∨\) in each subvector of BV2 indicated by BV1.' '≠\(BV2∨BV1)\A≠¯1↓0,A←(BV2∨BV1)/BV2' '' 0 'NS differences of differences of adjacents.' 'N←⊃-//NS 1/¯2 N' '' 2 'NS months after date IS (YYYYMM).' 'I←1+0 100⊥0 12⊤(0 12⊥0 100⊤IS)+⍳NS' '0=⎕IO' 2 'NS months after date IS (YYYYMM).' 'I←1+0 100⊥0 12⊤(0 12⊥0 100⊤IS)-1-⍳NS' '1=⎕IO' 2 'NS months before date IS (YYYYMM).' 'I←1+0 100⊥0 12⊤(0 12⊥0 100⊤IS)-2+⌽⍳NS' '0=⎕IO' 2 'NS months before date IS (YYYYMM).' 'I←1+0 100⊥0 12⊤(0 12⊥0 100⊤IS)-1+⌽⍳NS' '1=⎕IO' 2 'NS spokes of unit wheel.' 'VZ←0,¨*○0J2×(1+⍳NS)÷NS' '' 2 'NS spokes of unit wheel.' 'VZ←0,¨*○0J2×(⍳NS)÷NS' '' 2 'NS-point spline.(M=Bezier matrix, Z ctrl pts).' 'Z←(,[⍬](1+⍳NS)÷NS)⊥M+.×Z' '0=⎕IO' 2 'NS-point spline.(M=Bezier matrix, Z ctrl pts).' 'Z←(,[⍬](⍳NS)÷NS)⊥M+.×Z' '1=⎕IO' 2 'Number and its negative (''plus minus'').' '1 ¯1×NS' '' 0 'Number of ?s intersecting ?s (NV1=starts, NV2=stops).' '+/A∧⍉A←NV1∘.≤NV2' '' 0 'Number of areas intersecting areas in X.' '+/A∧⍉A←∧/X[;A⍴1;]≤2 1 3⍉X[;(A←≢X)⍴2;]' '⍴NQ ←→ (n × 2 × dim)' 0 'Number of columns in A as vector.' 'IO←⊃⌽⍴A' '' 2 'Number of columns in A.' 'IS←⊃⌽⍴A' '' 2 'Number of columns in array XA.' '(⍴XA)[⍴⍴XA]' '' 0 'Number of columns in array XA as a scalar.' '0⊥⍴XA' '' 0 'Number of columns in matrix XM.' '¯1↑⍴XM' '' 0 'Number of columns in matrix XM.' '1↓⍴XM' '' 0 'Number of columns in matrix XM.' '(⍴XM)[2]' '' 0 'Number of combinations of NA1 objects taken NA2 at a time.' 'NA2!NA1' '' 0 'Number of days in month IS of years IA (for all leap years).' '(12⍴7⍴31 30)[IS]-0⌈¯1+2⊥(IS=2),[.1](0≠400|IA)-(0≠100|IA)-0≠4|IA' '' 0 'Number of days in month IS of years IA (for most leap years).' '(12⍴7⍴31 30)[IS]-0⌈¯1+2⊥(IS=2),[.1]0≠4|IA' '' 0 'Number of decimals (up to IS) of elements of NA.' '0+.≠(⌈(10*IS)×10*⎕IO-⍳IS+1)∘.|⌈NA×10*IS' '' 0 'Number of decimals of elements of NV.' '⌊10⍟(⍎(''.''≠A)/A←⍕NV)÷NV' '' 0 'Number of digit positions in integers in IA.' '1+⌊10⍟(IA=0)+IA×(1 ¯10)[1+IA&lt;0]' '' 0 'Number of digit positions in scalar NS (depends on ⎕PP).' '⍴⍕NS' '' 0 'Number of digitpositions in integers in IA.' '1+(IA&lt;0)+⌊10⍟|IA+0=IA' '' 0 'Number of digits in positive integers in IA.' '1+⌊10⍟IA+0=IA' '' 0 'Number of elements (also of a scalar).' '×/⍴XA' '' 0 'Number of elements (also of a scalar).' '⍴,XA' '' 0 'Number of elements in A as vector.' 'IO←⍴,A' '' 2 'Number of elements in a plane of 3D A.' 'IS←×/1↓⍴A' '' 2 'Number of elements in A.' 'IS←×/⍴A' '' 2 'Number of elements satisfying condition BV.' '+/BV' '' 0 'Number of leading blanks.' 'NA←+/∧\CA='' ''' '' 2 'Number of occurrences of scalar XS in array XA.' 'XS+.=,XA' '' 0 'Number of occurrences of scalar XS in array XA.' '+/XS=,XA' '' 0 'Number of permutations of (N,K) combinations.' 'NS←(!K)×K!N' '' 2 'Number of permutations of NA1 objects taken NA2 at a time.' '(!NA2)×NA2!NA1' '' 0 'Number of rows in array XA (also of a vector).' '×/¯1↓⍴XA' '' 0 'Number of rows in M as vector.' 'IO←1↑⍴M' '' 2 'Number of rows in M.' 'IS←≢M' '' 2 'Number of rows in matrix XM.' '≢XM' '' 0 'Number of rows in matrix XM.' '¯1↓⍴XM' '' 0 'Number of rows in matrix XM.' '(⍴XM)[1]' '' 0 'Number of rows in matrix XM.' '≢XM' '' 0 'Number of sortable columns at a time using ⊥ and alphabet CV.' '⌊(1+⍴CV)⍟2*(A=¯1+A←2*⍳128)⍳1' '' 0 'Number of trailing blanks.' 'NA←+/∧\⌽CA='' ''' '' 2 'Numeric headers (elements of NV) for rows of table XM.' '(3⌽7 0⍕NV∘.+,0),⍕XM' '' 0 'Numeric matrix of (N,K) combinations.' 'M←(∧⌿2&lt;⌿M)/M←1+((-K)↑⍳N+1)⊤⍳(!K)×K!N' '0=⎕IO' 2 'Numeric matrix of (N,K) combinations.' 'M←(∧⌿2&lt;⌿M)/M←1+((-K)↑⍳N)⊤⍳(!K)×K!N' '1=⎕IO' 2 'Occurences of the elements of NV.' '|-⌿(2,⍴NV)⍴⍋⍋NV,NV' '' 0 'Occurrences of string CV1 in string CV2.' '(∧⌿(¯1+⍳⍴CV1)⌽(CV1∘.=CV2),0)/⍳1+⍴CV2' '' 0 'Occurrences of string XV1 in string XV2.' '(XV2[A∘.+¯1+⍳⍴XV1]∧.=XV1)/A←(A=1↑XV1)/⍳⍴A←(1-⍴XV1)↓XV2' '' 0 'Occurrences of string XV1 in string XV2.' '((-A)↓XV1∧.=(A,1+⍴XV2)⍴XV2)/⍳(⍴XV2)+1-A←⍴XV1' '' 0 'Ohm''s Law - resistance of parallel resistors.' 'NS←÷+/÷N' '' 2 'One column matrix from vector V.' 'M←,['''']V' '' 2 'One row matrix from vector V.' 'M←,[¯.5]V' '0=⎕IO' 2 'One row matrix from vector V.' 'M←,[.5]V' '1=⎕IO' 2 'Ones, same shape and structure.' 'B←A=A' '' 2 'Ones, same shape plus one.' 'B←0×/V' '' 2 'Open a gap of IV1[i] after XV[IV2[i]] (for all i).' '((⍳(⍴XV)++/IV1)∊+\1+¯1↓0,((⍳⍴XV)∊IV2)\IV1)\XV' '' 0 'Open a gap of IV1[i] before XV[IV2[i]] (for all i).' '((⍳(⍴XV)++/IV1)∊+\1+((⍳⍴XV)∊IV2)\IV1)\XV' '' 0 'Open gaps before each item of V, L wide.' 'V←∊(-L+1)↑¨V' '' 2 'Open gaps between each item in V, L wide.' 'V←∊(L+1)↑¨V' '' 2 'Open gaps between points B in V, L wide.' 'V←((~B)-B\L)/V' '' 2 'Open NS-1 spaces between each item in V.' 'V←∊NS↑¨V' '' 2 'Ordinal numbers of words in CV that indices IA point to.' '⎕IO++/IA∘.≥('' ''=CV)/⍳⍴CV' '' 0 'Outer product.' 'M←X∘.×Y' '' 2 'Outline of bar chart of data V.' 'Z←0J1⊥1 0⌽2/↑V(⍳1+⍴V)' '0=⎕IO' 2 'Outline of bar chart of data V.' 'Z←0J1⊥1 0⌽2/0,↑V(⍳⍴V)' '1=⎕IO' 2 'Output assigned value.' '⎕←A←2 10⍴⍳20' '' 2 'Output of an empty line.' '0⍴XA←' '' 0 'Output of assigned value.' ((⎕ucs 8866),'NA←') '' 0 'Output of assigned value.' '⎕←XA←' '' 0 'Pack an array into a vector based on BA.' 'V←(,BA)/,A' '' 2 'Pairwise differences of successive columns (inverse of +\).' 'NA-((-⍴⍴NA)↑¯1)↓0,NA' '' 0 'Pairwise differences of successive elements of vector NV.' '(1↓NV)-¯1↓NV' '' 0 'Pairwise ratios of successive elements of vector NV.' '(1↓NV)÷¯1↓NV' '' 0 'Parallel projection of 3D object in M.' 'Z←0J1⊥M[1 0;]' '0=⎕IO' 2 'Parallel projection of 3D object in M.' 'Z←0J1⊥M[2 1;]' '1=⎕IO' 2 'Parity.' '≠/BA' '' 0 'Parity. Connect odd and even ones.' 'B←≠\B' '' 2 'Parity+connectors. Connect odd and even ones.' 'B←B∨≠\B' '' 2 'Pascal''s triangle of order IS (binomial coefficients).' '⍉A∘.!A←0,⍳IS' '' 0 'Pascal''s triangle of order IS.' 'V←V∘.!V←⍳IS+1' '0=⎕IO' 2 'Pascal''s triangle of order IS.' 'V←V∘.!V←0,⍳IS' '1=⎕IO' 2 'Perspective projection from distance D.' 'Z←0J1⊥M[1 0;]×D÷D-M[2;]' '0=⎕IO' 2 'Perspective projection from distance D.' 'Z←0J1⊥M[2 1;]×D÷D-M[3;]' '1=⎕IO' 2 'Pinpoint figure rather than polygon.' 'VZA←,¨ZA' '' 2 'Places between pairs of ones.' '(~BA)∧≠\BA' '' 0 'Playing order in a cup for IS ranked players.' ',⍉(A⍴2)⍴(2*A←⌈2⍟IS)↑⍳IS' '' 0 'Plot of scalaroid function ''f'' for data V.' 'Z←V+¯11○f V' '' 2 'Plotting a curve from boolean values.' 'CA←'' *''[BA]' '0=⎕IO' 2 'Plotting a curve from boolean values.' 'CA←'' *''[1+BA]' '1=⎕IO' 2 'Plus Minus. Number and its negative.' 'NA←(⊂1 ¯1)×NA' '' 2 'Poisson distribution of states IA with average number NS.' '(*-NS)×(NS*IA)÷!IA' '' 0 'Poisson distribution of states X and Y avg.' 'N←(*-Y)×(Y*X)÷!X' '' 2 'Polynomial with roots NV.' '⌽((0,⍳⍴NV)∘.=+⌿~A)+.×(-NV)×.*A←((⍴NV)⍴2)⊤¯1+⍳2*⍴NV' '' 0 'Combining two lines into one.' ('X←''line1''',(⎕ucs 8867),'Y←''line2''') '' 2 'Position of comment in each row of array CA.' 'B←(&lt;\''/*''⍷CA)∨⌽&lt;\''/*''⍷⌽CA' '' 2 'Position of first blanks in rows of M.' 'P←(⊂[1]CM)⍳¨'' ''' '0=⎕IO' 2 'Position of first blanks in rows of M.' 'P←(⊂[2]CM)⍳¨'' ''' '1=⎕IO' 2 'Position of first item in CX not in C.' 'P←⊃(~CX∊C)/⍳⍴CX' '' 2 'Position of first occurrence of C in VV.' 'PO←VV⍳⊂C' '' 2 'Position of last Y in X - from left.' 'PO←(⌽X)⍳Y' '' 2 'Position of last Y in X.' 'PO←(⍴X)-(1,X≠Y)⊥1' '1=⎕IO' 2 'Position of last Y in X.' 'PO←1+(⍴X)-(1,X≠Y)⊥1' '0=⎕IO' 2 'Position of the first non-blank char by row.' 'P←(&lt;\~CM∊'' '')+.×⍳⊃⌽⍴CM' '' 2 'Position of the first non-blank char.' 'PO←(C≠'' '')⍳1' '' 2 'Position of the first satisfied condition.' 'PO←B⍳1' '' 2 'Position of the last non-blank char by row.' 'P←(⊃⌽⍴CM)-(1,CM='' '')⊥1' '1=⎕IO' 2 'Position of the last non-blank char by row.' 'P←1+(⊃⌽⍴CM)-(1,CM='' '')⊥1' '0=⎕IO' 2 'Position of the last non-blank char.' 'PO←(⍴C)-(1,C='' '')⊥1' '1=⎕IO' 2 'Position of the last non-blank char.' 'PO←1+(⍴C)-(1,C='' '')⊥1' '0=⎕IO' 2 'Position of the NSth Y in X.' 'PO←(+\X≡¨Y)⍳NS' '' 2 'Position of trailing blanks in rows.' 'P←(CM≠'' '')⌈.×⍳⊃⌽⍴CM' '' 2 'Position of V in corresponding row of M.' 'N←M⌊.⍳V' '' 2 'Position(s) of V in each row of M.' 'VN←M,.⍳V' '' 2 'Positions of items in set C in string CX.' 'P←(CX∊C)/⍳⍴CX' '' 2 'Positions of ones given length vector L.' 'P←¯1↓+\0,L' '1=⎕IO' 2 'Positions of ones given length vector L.' 'P←¯1↓+\1,L' '0=⎕IO' 2 'Positions of ones in boolean vector B.' 'P←B/⍳⍴B' '' 2 'Positions of ones in boolean vector B.' 'P←(+/B)↑⍒B' '' 2 'Positions of start of C in string CX.' 'P←(C⍷CX)/⍳⍴CX' '' 2 'Positive infinity; the largest representable value.' '⌊/⍬' '' 0 'Positive maximum, at least zero (also for empty NV).' '⌈/NV,0' '' 0 'Postfix vector to each row of matrix.' 'M←↑,/M,⊂V' '' 2 'Predicted values of best linear fit (least squares).' 'A+.×NV2⌹A←NV1∘.*0 1' '' 0 'Predicted values of exponential (curve) fit.' '*A+.×(⍟NV2)⌹A←NV1∘.*0 1' '' 0 'Prefix vector to each row of matrix.' 'M←⊃,/V,⊂M' '' 2 'Present value of cash flows NA at int FS.' 'A←(÷1+FS)⊥⌽NA' '' 2 'Present value of cash flows NV at interest rate NS %.' '(÷1+NS÷100)⊥⌽NV' '' 0 'Prime numbers from 1...IS.' 'I←(2=+⌿0=I∘.|I)/I←1+⍳IS' '0=⎕IO' 2 'Prime numbers from 1...IS.' 'I←(2=+⌿0=I∘.|I)/I←⍳IS' '1=⎕IO' 2 'Product by bucket. U = buckets.' 'N←N×.*V∘.≡U' '⍴N ←→ ⍴V' 2 'Product of elements of NV.' '×/NV' '' 0 'Product of N.' 'NS←×/N' '' 2 'Product of two polynomials with coefficients NV1 and NV2.' '+⌿(⎕IO-⍳⍴NV1)⌽NV1∘.×NV2,0×1↓NV1' '' 0 'Products over subsets of XV specified by BA.' 'XV×.*BA' '' 0 'Progressive index of (without replacement).' '((⍴XV1)⍴⍋⍋XV1⍳XV1,XV2)⍳(⍴XV2)⍴⍋⍋XV1⍳XV2,XV1' '' 0 'Progressive index of (without replacement).' '((⍋XV1⍳XV1,XV2)⍳⍳⍴XV1)⍳(⍋XV1⍳XV2,XV1)⍳⍳⍴XV2' '' 0 'Prompt and response on same line.' 'V←(⍴V)↓⊃⍞ V←⍞←''Finished? ''' '' 2 'Proof. Returns items of VVX not in VVY list.' 'VV←VVX~VVY' '' 2 'Pythagorean: FA = hypotenuse NA = side ratio.' 'FA←4○NA' '' 2 'Pythagorean: FA = side NA = hyp:side ≥ 1.' 'FA←¯4○NA' '' 2 'Pythagorean: FA = side NA = side:hyp ≤ 1.' 'FA←0○NA' '' 2 'Pythagorean: Sum of the squares of AX.' 'NA←AX+.*2' '' 2 'Quick input of (×/I) strings.' 'VA←⍎¨I⍴''⍞''' 'I=⍴VA' 2 'Quick list of all functions and operators.' 'M←,['''']⎕CR¨⊂[1]⎕NL 3 4' '0=⎕IO' 2 'Quick list of all functions and operators.' 'M←,['''']⎕CR¨⊂[2]⎕NL 3 4' '1=⎕IO' 2 'Quick membership (∊) for positive integers.' 'A←(⌈/IV1,IV2)⍴0 ⋄ A[IV2]←1 ⋄ A[IV1]' '' 0 'Random numbers between 1-IS w/o repl.' 'I←1+IS?IS' '0=⎕IO' 2 'Random numbers between 1-IS w/o repl.' 'I←IS?IS' '1=⎕IO' 2 'Random numbers between 1-IS w/repl.' 'I←1+?IS⍴IS' '0=⎕IO' 2 'Random numbers between 1-IS w/repl.' 'I←?IS⍴IS' '1=⎕IO' 2 'Randomizing random numbers (in ⎕LX in a workspace).' '⎕RL←⎕TS+.*2' '' 0 'Range of non-empty N.' 'RANGE←(⌈/N)-⌊/N' '' 2 'Rank of A.' 'IO←⍴⍴A' '' 2 'Rank of array XA.' '⍴⍴XA' '' 0 'Rank of each item in an array.' 'AV←⍴¨⍴¨AA' '' 2 'Rank of the first item in an array.' 'IO←⊃⍴¨⍴¨AA' '' 2 'Rank of the first item in an array.' 'IO←⍴⍴⊃AA' '' 2 'Ravel of a matrix to IV[1] columns with a gap of IV[2].' '(A×IV[1]*¯1 1)⍴(A←(⍴XM)+(IV[1]|-≢XM),IV[2])↑XM' '' 0 'Real from ZAX and imaginary from ZAX.' 'ZA←(9○ZAX)+¯11○11○ZAY' '' 2 'Reassign main diagonal of matrix.' '(0 0⍉M)←1' '0=⎕IO' 2 'Reassign main diagonal of matrix.' '(1 1⍉M)←1' '1=⎕IO' 2 'Reblock. Cut VV into many ≤LS length vecs.' 'VV←↑,/((⍴¨VV)⍴¨⊂1+LS↑1)⊂¨VV' '' 2 'Rectangular scale by x=2,y=3.' 'ZA←(2,¯11○3)+.×9 11∘.○ZA' '' 2 'Reduce each item of VV by B.' 'VV←⊂[2]B/↑VV' '(⍴B)∧.=∊⍴¨VV' 2 'Reduction with function ⍺ in dimension IS, rank unchanged.' '((⍴XA)*IS≠⍳⍴⍴XA)⍴ ⍺/[IS]XA' '' 0 'Reduction with FUNCTION ⍺ without respect to shape.' '⍺/,NA' '' 0 'Regular unit polygon of NS edges.' 'Z←*○0J2×(⍳NS+1)÷NS' '0=⎕IO' 2 'Regular unit polygon of NS edges.' 'Z←*○0J2×(0,⍳NS)÷NS' '1=⎕IO' 2 'REMAINDER from division of NAX by NAY.' 'NA←(×NAX)×(|NAY)||NAX' '' 2 'Remove blank columns.' 'CM←('' ''∨.≠CM)/CM' '' 2 'Remove blank rows.' 'CM←(CM∨.≠'' '')⌿CM' '' 2 'Remove blanks in each string.' 'C←C~¨'' ''' '' 2 'Remove blanks.' 'C←C~'' ''' '' 2 'Remove duplicate blank columns.' 'CM←(¯1↓1,B∨1⌽B←'' ''∨.≠CM)/CM' '' 2 'Remove duplicate blank rows.' 'CM←(¯1↓1,B∨1⌽B←CM∨.≠'' '')⌿CM' '' 2 'Remove lead, trail, and duplicate blanks.' 'V←1↓(B∨1⌽B←0,C≠'' '')/'' '',C' '' 2 'Remove leading blank columns.' 'CM←(∨\'' ''∨.≠CM)/CM' '' 2 'Remove leading blank rows.' 'CM←(∨\CM∨.≠'' '')⌿CM' '' 2 'Remove leading blanks.' 'V←(∨\C≠'' '')/C' '' 2 'Remove punctuation.' 'C←C~''.,:;?!''' '' 2 'Remove trailing blank columns.' 'CM←(1-(1,'' ''∧.=CM)⊥1)↓[1]CM' '0=⎕IO' 2 'Remove trailing blank columns.' 'CM←(1-(1,'' ''∧.=CM)⊥1)↓[2]CM' '1=⎕IO' 2 'Remove trailing blank rows.' 'CM←(1-(1,CM∧.='' '')⊥1)↓[0]CM' '0=⎕IO' 2 'Remove trailing blank rows.' 'CM←(1-(1,CM∧.='' '')⊥1)↓[1]CM' '1=⎕IO' 2 'Remove trailing blanks.' 'V←(⌽∨\⌽C≠'' '')/C' '' 2 'Removing blank columns.' '('' ''∨.≠CM)/CM' '' 0 'Removing blank rows.' '(CM∨.≠'' '')⌿CM' '' 0 'Removing blanks.' '('' ''≠XV)/XV' '' 0 'Removing columns IV from array XA.' '(~(⍳¯1↑⍴XA)∊IV)/XA' '' 0 'Removing duplicate blank columns.' '(A∨1,¯1↓A←'' ''∨.≠CM)/CM' '' 0 'Removing duplicate blank rows.' '(A∨1↓1⌽1,A←CM∨.≠'' '')⌿CM' '' 0 'Removing duplicate elements (nub).' '((XV⍳XV)=⍳⍴XV)/XV' '' 0 'Removing duplicate elements (nub).' '(1 1⍉&lt;\XV∘.=XV)/XV' '' 0 'Removing duplicate rows.' '((A⍳A)=⍳⍴A←2⊥XM∧.=⍉XM)⌿XM' '' 0 'Removing duplicate rows.' '((A⍳A)=⍳⍴A←⎕IO++⌿∧⍀XM∨.≠⍉XM)⌿XM' '' 0 'Removing duplicate rows.' '(∨⌿&lt;\XM∧.=⍉XM)⌿XM' '' 0 'Removing duplicate rows.' '(1 1⍉&lt;\XM∧.=⍉XM)⌿XM' '' 0 'Removing duplicate rows from ordered matrix XM.' '(¯1⌽1↓(∨/XM≠¯1⊖XM),1)⌿XM' '' 0 'Removing duplicate XS''s from vector XV.' '(A∨¯1↓1,A←XV≠XS)/XV' '' 0 'Removing duplicates from an ordered vector.' '(¯1⌽1↓(XV≠¯1⌽XV),1)/XV' '' 0 'Removing duplicates from positive integers.' 'A←9999⍴0 ⋄ A[IV]←1 ⋄ A/⍳9999' '' 0 'Removing elements XA from beginning and end of vector XV.' '((A⍳1)-⎕IO)↓(⎕IO-(⌽A←~XV∊XA)⍳1)↓XV' '' 0 'Removing elements XA from beginning of vector XV.' '(((~XV∊XA)⍳1)-⎕IO)↓XV' '' 0 'Removing elements XA from end of vector XV.' '(⎕IO-(~⌽XV∊XA)⍳1)↓XV' '' 0 'Removing elements XS from vector XV.' '(XV≠XS)/XV' '' 0 'Removing every IS:th element of XV.' '(0≠IS|⍳⍴XV)/XV' '' 0 'Removing every second element of XV.' '(2|⍳⍴XV)/XV' '' 0 'Removing leading and multiple blanks.' '(A∨¯1↓0,A←'' ''≠CV)/CV' '' 0 'Removing leading and trailing blanks.' '((⌽∨\⌽A)∧∨\A←'' ''≠CV)/CV' '' 0 'Removing leading blank columns.' '(∨\'' ''∨.≠CM)/CM' '' 0 'Removing leading blank rows.' '(∨\CM∨.≠'' '')⌿CM' '' 0 'Removing leading blanks.' '(∨\'' ''≠CV)/CV' '' 0 'Removing leading blanks.' '(+/∧\'' ''=CV)↓CV' '' 0 'Removing leading zeroes.' '(¯1+(XV=''0'')⍳0)↓XV' '' 0 'Removing leading, multiple and trailing blanks.' '('' ''=1↑CV)↓((1↓A,0)∨A←'' ''≠CV)/CV' '' 0 'Removing leading, multiple and trailing XS''s.' '(1↑A)↓(A⍲1⌽A←XS=XV)/XV' '' 0 'Removing multiple and trailing blanks.' '((1↓A,0)∨A←'' ''≠CV)/CV' '' 0 'Removing multiple blanks.' '(A∨¯1↓1,A←'' ''≠CV)/CV' '' 0 'Removing punctuation characters.' '(~XV∊'' .,:;?'''''')/XV' '' 0 'Removing trailing blank columns.' '(⌽∨\⌽'' ''∨.≠CM)/CM' '' 0 'Removing trailing blank columns.' '(⌽∨\⌽∨⌿'' ''≠CM)/CM' '' 0 'Removing trailing blank rows.' '(-2↑+/∧\⌽CM∧.='' '')↓CM' '' 0 'Removing trailing blanks.' '(1-('' ''=CV)⊥1)↓CV' '' 0 'Removing trailing blanks.' '(1-(⌽'' ''≠CV)⍳1)↓CV' '' 0 'Removing trailing blanks.' '(⌽∨\⌽'' ''≠CV)/CV' '' 0 'Removing trailing blanks.' '(-+/∧\⌽'' ''=CV)↓CV' '' 0 'Removing trailing blanks.' '(¯1↑('' ''≠CV)/⍳⍴CV)⍴CV' '' 0 'Repeat matrix.' '(((¯1⌽~A)∧A←(¯1↓XV1=1⌽XV1),0)/XV2)∘.=XV2' '' 0 'Replace all blanks with dashes.' '((,CA='' '')/,CA)←''-''' '' 2 'Replace all items, shape unchanged.' '(,A)←⊂AX' '' 2 'Replace all occurrences of element in array.' '((,CA∊1↓C)/,CA)←↑C' '' 2 'Replace leading zeros with blanks.' '((1=⌈\'' 0''⍳C)/C)←'' ''' '0=⎕IO' 2 'Replace leading zeros with blanks.' '((2=⌈\'' 0''⍳C)/C)←'' ''' '1=⎕IO' 2 'Replace rows of M given boolean start vector.' 'M←M[⌈\B×⍳⍴B;]' '' 2 'Replace selected items, shape unchanged.' '(B/,A)←(+/B)⍴V' '' 2 'Replacing all values XS1 in XA with XS2.' 'A[(A=XS1)/⍳⍴A←,XA]←XS2 ⋄ (⍴XA)⍴A' '' 0 'Replacing elements of XA in set XV1 with corresponding XV2.' 'A[B/⍳⍴B]←XV2[(B←B≤⍴XV2)/B←XV1⍳A←,XA] ⋄ (⍴XA)⍴A' '' 0 'Replacing elements of XA not satisfying BV with blanks/zeroes.' 'BV\BV/XA' '' 0 'Replacing elements of XS in set XV with blanks/zeroes.' 'A\(A←~XS∊XV)/XS' '' 0 'Replacing elements of XV not in set XA with blanks/zeroes.' 'A\(A←XV∊XA)/XV' '' 0 'Replacing elements of XV satisfying BV with XS.' 'XV[BV/⍳⍴XV]←XS' '' 0 'Replacing first element of XV with XS.' '¯1⌽1↓XV,XS' '' 0 'Replacing last element of XV with XS.' '1⌽¯1↓XS,XV' '' 0 'Replacing zeroes with corresponding elements of NA2.' 'NA1+NA2×NA1=0' '' 0 'Replicate CM at rows indicated by B.' 'CM←(1+B)⌿CM' '' 2 'Replicate MU given boolean start vector.' 'M←MU[¯1++\B;]' '0=⎕IO' 2 'Replicate MU given boolean start vector.' 'M←MU[+\B;]' '1=⎕IO' 2 'Replicate XV[i] IV[i] times (for all i).' '((IV≠0)/XV)[+\¯1⌽(⍳+/IV)∊+\IV]' '' 0 'Replicate XV[i] IV[i] times (for all i).' 'XV[+\(⍳+/IV)∊¯1↓1++\0,IV]' '' 0 'Replicate XV[i] IV[i] times (for all i).' 'XV[⎕IO++\(⍳+/IV)∊⎕IO++\IV]' '' 0 'Replicating a dimension of rank three array XQ IS-fold.' 'XQ[;,(IS⍴1)∘.×⍳(⍴XQ)[2];]' '' 0 'Representation of current date (American).' 'A←⍕100|1⌽3↑⎕TS ⋄ A[('' ''=A)/⍳⍴A]←''/'' ⋄ A' '' 0 'Representation of current date (ascending format).' 'A←⍕⌽3↑⎕TS ⋄ A[('' ''=A)/⍳⍴A]←''.'' ⋄ A' '' 0 'Representation of current date (descending format).' 'A←⍕1000⊥3↑⎕TS ⋄ A[5 8]←''-'' ⋄ A' '' 0 'Representation of current time (12 hour clock).' '(1⌽,'' ::'',3 2⍴6 0⍕100⊥12 0 0|3↑3↓⎕TS),''AP''[1+12≤⎕TS[4]],''M''' '' 0 'Representation of current time (24 hour clock).' 'A←⍕1000⊥3↑3↓⎕TS ⋄ A[3 6]←'':'' ⋄ A' '' 0 'Representation of NS1 in base NS2.' '((1+⌊NS2⍟NS1)⍴NS2)⊤NS1' '' 0 'Reshaping a 400×12 character matrix to fit into one page.' '40 120⍴2 1 3⍉10 40 12⍴CM' '' 0 'Reshaping first element of XA into a scalar.' '⍬⍴XA' '' 0 'Reshaping NA into a matrix of width IS.' '((⌈(⍴,NA)÷IS),IS)⍴NA' '' 0 'Reshaping NA into a matrix of width IS.' '(((⍴,NA),1)×IS*¯1 1)⍴NA' '' 0 'Reshaping non-empty lower-rank array XA into a matrix.' '(1⌈¯2↑⍴XA)⍴XA' '2≥⍴⍴XA' 0 'Reshaping non-empty lower-rank array XA into a matrix.' '(¯2↑1 1,⍴XA)⍴XA' '2≥⍴⍴XA' 0 'Reshaping numeric vector NV into a one-column matrix.' 'NV∘.+,0' '' 0 'Reshaping one-element vector XV into a scalar.' '+/XV' '' 0 'Reshaping only one-element numeric vector NV into a scalar.' '⍎⍕NV' '' 0 'Reshaping planes of rank 3 array to a matrix.' '(×/2 2⍴(⍴XQ),1)⍴XQ' '' 0 'Reshaping planes of rank 3 array to rows of a matrix.' '(×/2 2⍴1,⍴XQ)⍴XQ' '' 0 'Reshaping scalar XA into a one-element vector.' '1/XA' '' 0 'Reshaping vector XV into a one-column matrix.' '(⌽1,⍴XV)⍴XV' '' 0 'Reshaping vector XV into a one-column matrix.' '((⍴XV),1)⍴XV' '' 0 'Reshaping vector XV into a one-row matrix.' '(1,⍴XV)⍴XV' '' 0 'Reshaping vector XV into a two-column matrix.' '((0.5×⍴XV),2)⍴XV' '' 0 'Residue replacing 0 with NS.' 'NA←NS+(-NS)|NA' '' 2 'Resistance of parallel resistors.' '÷+/÷NV' '' 0 'Restoring argument of cumulative sum (inverse of +\).' 'NV-¯1↓0,NV' '' 0 'Retrieving scattered elements IM from matrix XM.' '1 1⍉XM[IM[1;];IM[2;]]' '' 0 'RETURN. Leave function, return to caller.' '→0' '' 2 'Reversal (⌽) of subvectors of NV having lengths IV.' 'NV[⌽⍒+\(⍳⍴NV)∊+\⎕IO,IV]' '' 0 'Reversal (⌽) of subvectors of XV indicated by BV.' 'XV[⌽⍒+\BV]' '' 0 'Reverse vector XV on condition BS.' 'XV[⍒BS!⍳⍴XV]' '' 0 'Reverse vector XV on condition BS.' ',⌽[⎕IO+BS](1,⍴XV)⍴XV' '' 0 'Reversing disclose.' 'VV←(+/∨\⌽M≠'' '')↑¨⊂[1]M' '0=⎕IO' 2 'Reversing disclose.' 'VV←(+/∨\⌽M≠'' '')↑¨⊂[2]M' '1=⎕IO' 2 'Reversing disclose. Eliminating blanks.' 'V←(⊂[1]M)~¨'' ''' '0=⎕IO' 2 'Reversing disclose. Eliminating blanks.' 'V←(⊂[2]M)~¨'' ''' '1=⎕IO' 2 'Right justify C in field width NS.' 'C←NS↑C' '' 2 'Right justify matrix CM.' 'CM←(1-(1,CM='' '')⊥1)⌽CM' '' 2 'Rightmost neighboring elements.' '((-⍴⍴NA)↑1)↓NA,0' '' 0 'Rightmost neighboring elements cyclically.' '1⌽XA' '' 0 'Roman numerals to Arabic.' 'I←+/I×¯1*I&lt;1⌽I←0,(,(10*⍳4)∘.×1 5)[''IVXLCDM''⍳C]' '0=⎕IO' 2 'Roman numerals to Arabic.' 'I←+/I×¯1*I&lt;1⌽I←0,(,(1,10*⍳3)∘.×1 5)[''IVXLCDM''⍳C]' '1=⎕IO' 2 'Rotate and scale at same time.' 'ZA←ZA×2.1D30' '' 2 'Rotate figure 30 degrees.' 'ZA←ZA×1D30' '' 2 'Rotate figure in direction of point ZS.' 'ZA←ZA××ZS' '' 2 'Rotate first elements (1⌽) of subvectors of XV indicated by BV.' 'XV[⍋BV++\BV]' '' 0 'Rotation matrix for angle NS (in radians) counter-clockwise.' '2 2⍴1 ¯1 1 1×2 1 1 2○NS' '' 0 'Round to nearest integer.' '⌊0.5+NA' '' 1 'Rounding currencies to nearest 5 subunits.' '.05×⌊.5+NA÷.05' '' 0 'Rounding to ⎕PP precision.' '⍎⍕NV' '' 0 'Rounding to IA decimals.' '(10*-IA)×⌊0.5+NA×10*IA' '' 0 'Rounding to IS decimal places.' 'FA←⍎(|IS)⍕NA' '' 2 'Rounding to nearest even integer.' '⌊NA+1≤2|NA' '' 0 'Rounding to nearest even number.' 'IA←(×NA)×⌊(1≤2||NA)+|NA' '' 2 'Rounding to nearest hundredth.' '0.01×⌊0.5+100×NA' '' 0 'Rounding to nearest integer.' '⌊0.5+NA' '' 0 'Rounding to nearest NSth.' 'FA←(×NA)×(⌊.5+|NA÷NS)×NS' '' 2 'Rounding to nearest whole number.' 'IA←(×NA)×⌊.5+|NA' '' 2 'Rounding to zero values of NA1 close to zero.' 'NA1×NA2≤|NA1' '' 0 'Rounding, to nearest even integer for .5 = 1||NA.' '⌊NA+.5×.5≠2|NA' '' 0 'Row averages of NM.' 'RAVE←(+/NM)÷1⌈⊃⌽⍴NM' '' 2 'Row averages of NM. (non-zero).' 'RAVG←(+/NM)÷1⌈+/0≠NM' '' 2 'Row positions given boolean vector B.' 'P←B/⍳≢A' '' 2 'Row positions of MX in MY (0 for not found).' 'P←(&lt;\MX∧.=⍉MY)+.×⍳↑⍴MY' '' 2 'Row positions of MX in MY.' 'P←(⊂[1]MY)⍳⊂[1]MX' '0=⎕IO' 2 'Row positions of MX in MY.' 'P←(⊂[2]MY)⍳⊂[2]MX' '1=⎕IO' 2 'Row standard deviation of A.' 'STD←(((N×+/A*2)-(+/A)*2)÷N×1⌈¯1+N←1⌈⊃⌽⍴A)*.5' '' 2 'Row sum of a matrix.' '+/NM' '' 0 'Row table. Vectors to rows of a matrix.' 'M←↑VV' '' 2 'Row theoretical standard deviation of A.' 'STD←(((N×+/A*2)-(+/A)*2)*.5)÷N←1⌈⊃⌽⍴A' '' 2 'Row theoretical variance of A.' 'VAR←((N×+/A*2)-(+/A)*2)÷(N←1⌈⊃⌽⍴A)*2' '' 2 'Row variance of A.' 'VAR←((N×+/A*2)-(+/A)*2)÷N×1⌈¯1+N←1⌈⊃⌽⍴A' '' 2 'Row-by-row formatting (width IS) of NM with IV decimals per row.' '((1,IS)×⍴NM)⍴2 1 3⍉(⌽IS,⍴NM)⍴(,IS,[1.1]IV)⍕⍉NM' '' 0 'Rows of matrix XM starting with string XV.' '((((≢XM),⍴XV)↑XM)∧.=XV)⌿XM' '' 0 'Rows of non-empty matrix XM starting with a character in XV.' '(XM[;1]∊XV)⌿XM' '' 0 'Row-wise percentage per row.' 'N←100×NM÷[0]+/NM' '0=⎕IO' 2 'Row-wise percentage per row.' 'N←100×NM÷[1]+/NM' '1=⎕IO' 2 'Running parity.' '≠\BA' '' 0 'Running parity (≠\) over subvectors of BV2 indicated by BV1.' '≠\BV2≠BV1\A≠¯1↓0,A←BV1/≠\¯1↓0,BV2' '' 0 'Running sum of IS consecutive elements of NV.' '((IS-1)↓A)-0,(-IS)↓A←+\NV' '' 0 'Running sum of NS consecutive elements of N.' 'N←NS+/N' '' 2 'Scalar (dot) product of vectors.' 'NV2+.×NV1' '' 0 'Scan from end with function ⍺.' '⌽⍺\⌽XA' '' 0 'Scatter assignment.' '(,A)[(⍴A)⊥⍉PM]←V' '0=⎕IO ⋄ (⍴PM)=(⍴V),⍴⍴A' 2 'Scatter assignment.' '(,A)[1+(⍴A)⊥⍉¯1+PM]←V' '1=⎕IO ⋄ (⍴PM)=(⍴V),⍴⍴A' 2 'Scatter assignment.' '(PV⌷¨⊂A)←V' '(⍴PV)=⍴V ⋄ (⍴¨PV)=⍴⍴A' 2 'Scatter indexing.' 'V←PV⌷¨⊂A' '(⍴PV)=⍴V ⋄ (⍴¨PV)=⍴⍴A' 2 'Select random item from vector. Works on ''''.' 'NS←V[(0≠⍴V)?⍴V]' '' 2 'Select X or Y depending on BS.' 'Z←BS⊃X Y' '0=⎕IO' 2 'Select X or Y depending on BS.' 'Z←(BS+1)⊃X Y' '1=⎕IO' 2 'Select X or Y depending on BS.' 'Z←⊃BS↓X Y' '' 2 'Selecting elements of XA satisfying condition BV.' 'BV/XA' '' 0 'Selecting elements satisfying condition BA, others to 1.' 'BA!NA' '' 0 'Selecting elements satisfying condition BA, others to one.' 'NA*BA' '' 0 'Selecting elements satisfying condition BA, zeroing others.' 'BA×NA' '' 0 'Selecting specific elements from a ''large'' outer product.' 'IV⍉XA1∘.⍺XA2' '' 0 'Selection depending on index origin.' 'XV[2×⎕IO]' '' 0 'Selection depending on index origin.' 'XV[1]' '' 0 'Selection depending on sign of array.' 'A←(⊂¯1 0 1⍳×NA)⌷SW SX SY' '' 2 'Selection depending on sign of scalar.' 'S←(¯1 0 1⍳×NS)⊃SW SX SY' '' 2 'Selection of elements of NA1 and NA2 depending on condition BA.' '(NA1×BA)+NA2×~BA' '' 0 'Selection of XS1 or XS2 depending on condition BS.' '''''⍴BS↓XS1,XS2' '' 0 'Selection of XS1 or XS2 depending on condition BS.' '(XS1,XS2)[⎕IO+BS]' '' 0 'Selective multiple subarrays from array.' 'AV←PAV⊃¨¨⊂⊂A' '' 2 'Sentence from vector of words.' 'C←∊'' '',¨VV' '' 2 'Sentence to vector of words.' ('VV←⍎∊'''''''',C,''''''''',(⎕ucs 8867),'((C='' '')/C)←⊂'''''' ''''''') '' 2 'Sentence to vector of words.' 'VV←((2>/1,B)/⍳⍴B)↓¨(1+(2&lt;/B,1)/⍳⍴B←C='' '')↑¨⊂C' '0=⎕IO' 2 'Sentence to vector of words.' 'VV←(¯1+(2>/1,B)/⍳⍴B)↓¨((2&lt;/B,1)/⍳⍴B←C='' '')↑¨⊂C' '1=⎕IO' 2 'Sentence to vector of words.' ('VV←(C≠'' '')',(⎕ucs 8838 67)) '' 2 'Separating a date YYMMDD to YY, MM, DD.' '⍉(3⍴100)⊤NA' '' 0 'Separating date IS - YYYYMMDD format.' '(IW IX IY)←0 100 100⊤IS' '' 2 'Separating variable length lines.' 'XV1,⎕TC[2],XV2' '' 0 'Sequence from NX for IX items.' 'N←∊NX+⍳¨IX' '0=⎕IO' 2 'Sequence from NX for IX items.' 'N←¯1+∊NX+⍳¨IX' '1=⎕IO' 2 'Setting a constant with hyphens.' '⎕LX←⍞' '' 0 'Shift B forward or backward IS positions.' 'B←((×IS)×⍴B)↑IS↓B' '' 2 'Shifting vector XV left with IS without rotate.' '(⍴XV)↑IS↓XV' '' 0 'Shifting vector XV right with IS without rotate.' '(-⍴XV)↑(-IS)↓XV' '' 0 'Shur product.' '1 2 1 2⍉NM1∘.×NM2' '' 0 'Sign of point ZS relative to edges of Z.' 'V←×11○(ZS-1↓Z)×+2-/Z' '' 2 'SIGN. Transfer of sign from NAY to NAX.' 'NA←(×NAY)×|NAX' '' 2 'Sine of a complex number.' '(2 2⍴1 6 2 5)×.○NA' '≢NA ←→ 2' 0 'Sine of NA in radians.' 'FA←1○NA' '' 2 'Size of range of elements of NV.' '(⌈/NV)-⌊/NV' '' 0 'Skew by 30 percent in y.' 'ZA←ZA+¯11○.3×9○ZA' '' 2 'Smallest possible number.' 'FS←⌈/⍬' '' 2 'Sort by highfliers - M ←→ groups of length L.' 'M←M[⍒L/L;]' '' 2 'Sort each column in ascending order.' '(,⍉A)←(,A)[⍋,A+(⍴A)⍴(⌈/,A)×⍳×/¯1↓⍴A]' '' 2 'Sort each column in ascending order.' 'A←↑[I](⊂¨⍋¨A)⌷¨A←⊂[I←¯2+⍴⍴A]A' '1=⎕IO ⋄ 2≤⍴⍴A' 2 'Sort each column in ascending order.' 'A←↑[I](⊂¨⍋¨A)⌷¨A←⊂[I←¯1+⍴⍴A]A' '0=⎕IO ⋄ 2≤⍴⍴A' 2 'Sort each row in ascending order.' '(,A)←(,A)[⍋,A+(⊃⌽⍴A)/(⌈/,A)×⍳×/¯1↓⍴A]' '' 2 'Sort each row in ascending order.' 'A←↑(⊂¨⍋¨A)⌷¨A←⊂[¯1+⍴⍴A]A←1/A' '1=⎕IO' 2 'Sort each row in ascending order.' 'A←↑(⊂¨⍋¨A)⌷¨A←⊂[⍴⍴A]A←1/A' '0=⎕IO' 2 'Sorting a matrix according to Y:th column.' 'NM[⍋NM[;Y];]' '' 0 'Sorting a matrix into lexicographic order.' 'NM[⍋+⌿A&lt;.-⍉A←NM,0;]' '' 0 'Sorting a matrix into reverse lexicographic order.' 'NM[⍒+⌿A&lt;.-⍉A←NM,0;]' '' 0 'Sorting CM in ascending row order.' 'CM←CM[⍋⎕UCS CM;]' '' 2 'Sorting CM in descending row order.' 'CM←CM[⍒⎕UCS CM;]' '' 2 'Sorting CM in reverse SEQ order.' 'CM←CM[SEQ⍒CM;]' '' 2 'Sorting CM in SEQ row order.' 'CM←CM[SEQ⍋CM;]' '' 2 'Sorting CVV in alphabetical order.' 'CVV←CVV[⍋⎕UCS↑CVV]' '' 2 'Sorting indices IV according to data NV.' 'IV[⍋NV[IV]]' '' 0 'Sorting NM in ascending row order.' 'NM←NM[⍋NM;]' '' 2 'Sorting NM in descending row order.' 'NM←NM[⍒NM;]' '' 2 'Sorting NV into ascending order.' 'NV[⍋NV]' '' 0 'Sorting NV into descending order.' 'NV[⍒NV]' '' 0 'Sorting rows of matrix NM into ascending order.' '(⍴NM)⍴(,NM)[A[⍋(,⍉(⌽⍴NM)⍴⍳≢NM)[A←⍋,NM]]]' '' 0 'Sorting rows of matrix NM into ascending order.' 'A←(⍋,NM)-⎕IO ⋄ (⍴NM)⍴(,NM)[⎕IO+A[⍋⌊A÷¯1↑⍴NM]]' '' 0 'Sorting rows of XM according to key XV (alphabetizing).' 'XM[⍋(1+⍴XV)⊥XV⍳⍉XM;]' '' 0 'Sorting words in list CM according to word length.' 'CM[⍋CM+.≠'' '';]' '' 0 'Sorting XV2 according to XV1.' 'XV2[⍋XV1]' '' 0 'Spacing out text.' '((2×⍴CV)⍴1 0)\CV' '' 0 'Spacing out text.' ',CV,[1.1]'' ''' '' 0 'Split A into a vector of arrays given B.' ('VA←↑[1↓⍳⍴⍴A]¨(+\B)',(⎕ucs 8838),'⊂[1↓⍳⍴⍴A]A') '' 2 'Split complex array into real and imaginary.' 'NA←9 11∘.○ZA' '' 2 'Split V into subvectors given boolean B.' 'VV←(+\B)⊂V' '' 2 'Split V into subvectors indicated by L.' ('VV←(L/⍳⍴L)',(⎕ucs 8838 86)) '' 2 'Splitting a variable into a set of variables.' '(N B I F Z)←VV' '' 2 'Square of elements of NA without change of sign.' 'NA×|NA' '' 0 'Square without changing sign.' 'NA←NA×|NA' '' 2 'Standard deviation of NV.' '((+/(NV-(+/NV)÷⍴NV)*2)÷⍴NV)*.5' '' 0 'Starting points for IS1 fields of width IS2.' '(IS1×IS2)⍴IS2↑1' '' 0 'Starting points for XV in indices pointed by IV.' '(⍳⍴XV)∊IV' '' 0 'Starting points of groups of equal elements (non-empty XV).' '1,(1↓XV)≠¯1↓XV' '' 0 'Starting positions of subvectors having lengths IV.' '#NAME?' '' 0 'State of switch given BX=on and BY=off spikes.' 'B←≠\B\2≠/0,(B←BX∨BY)/BX' '' 2 'Stereo pair. (Eye separation NS).' 'VZ←(¯.5 .5×NS)+⊂Z' '' 2 'Students grades given score IA.' 'CA←''FDCBA''[+/IA∘.≥10×6 7 8 9]' '0=⎕IO' 2 'Students grades given score IA.' 'CA←''FDCBA''[+/IA∘.≥10×0 6 7 8 9]' '1=⎕IO' 2 'Successive transposes of XA (IV1 after IV2: IV1⍉IV2⍉XA).' 'IV1[IV2]⍉XA' '' 0 'Sum by bucket. U = buckets.' 'N←N+.×V∘.≡U' '⍴N ←→ ⍴V' 2 'Sum elements of NV1 marked by succeeding identicals in NV2.' 'A-¯1↓0,A←(NV2≠1↓NV2,0)/+\NV1' '' 0 'Sum of all elements in NA.' 'NS←+/∊NA' '' 2 'Sum of alternating reciprocal series NV2÷NV1.' 'NV2-.÷NV1' '' 0 'Sum of common parts of matrices (matrix sum).' '1 2 1 2⍉NM1∘.+NM2' '' 0 'Sum of elements of NV.' '+/NV' '' 0 'Sum of magnitude of N.' 'NS←+/|N' '' 2 'Sum of N.' 'NS←+/N' '' 2 'Sum of numbers in character matrix XM.' '⍎,''+'',XM' '' 0 'Sum of reciprocal series NV2÷NV1.' 'NV2+.÷NV1' '' 0 'Sum of squares of NV.' 'NV+.*2' '' 0 'Sum of squares of NV.' 'NV+.×NV' '' 0 'Sum of subvectors of V given boolean B.' ('N←+/¨(+\B)',(⎕ucs 8838 86)) '' 2 'Sum of subvectors of V indicated by L.' ('N←+/¨(L/⍳⍴L)',(⎕ucs 8838 86)) '' 2 'Sum of the elements of vector NV.' '1⊥NV' '' 0 'Sum over elements of NV1 determined by elements of NV2.' 'NV1+.×NV2∘.=((⍳⍴NV2)=NV2⍳NV2)/NV2' '' 0 'Summation over subsets of XV specified by BA.' 'XV+.×BA' '' 0 'Sums according to codes XA2.' '(XA2∘.=XA1)+.×NA' '' 0 'Sums over (+/) subvectors of NV indicated by BV.' 'A-¯1↓0,A←(1⌽BV)/+\NV' '' 0 'Sums over (+/) subvectors of NV, lengths in IV.' 'A-¯1↓0,A←(+\NV)[+\IV]' '' 0 'Swap real and imaginary.' 'ZA←¯11○+ZA' '' 2 'SWIFT check digit from IS bank number.' 'IS←97+¯97|IS' '' 2 'Syllabization of a Finnish word XV.' '(~A∊1,⍴XV)/A←A/⍳⍴A←(1↓A,0)←~XV∊''aeiouyäö''' '' 0 'Syntax error to stop execution.' (,'∘') '' 0 'Table of divisibility.' 'M←0=(1+⍳⌈/I)∘.|I' '0=⎕IO' 2 'Table of divisibility.' 'M←0=(⍳⌈/I)∘.|I' '1=⎕IO' 2 'Take of at most IA elements from XA.' '(IA⌊⍴XA)↑XA' '' 0 'Taking every IS:th element of XV.' '(0=IS|⍳⍴XV)/XV' '' 0 'Tangent of NA in radians.' 'FA←3○NA' '' 2 'Taylor series at point X, coefficients Y.' 'N←+/Y×(X*N)÷!N←⍳⍴Y' '0=⎕IO' 2 'Taylor series at point X, coefficients Y.' 'N←+/Y×(X*N)÷!N←¯1+⍳⍴Y' '1=⎕IO' 2 'Temporary ravel of XA1 for indexing with IA.' 'A←⍴XA1 ⋄ XA1←,XA1 ⋄ XA1[IA]←XA2 ⋄ XA1←A⍴XA1' '' 0 'Temporary ravel of XA1 for indexing with IA.' 'A←,XA1 ⋄ A[IA]←XA2 ⋄ XA1←(⍴XA1)⍴A' '' 0 'Test for antisymmetricity of square matrix NM.' '~0∊NM=-⍉NM' '' 0 'Test for associativity of f1 and f2.' 'BS←((V f1 X)f2 Y)≡V f1 X f2 Y' '' 2 'Test for commutativity of fn.' 'BS←⊃≡/X Y fn Y X' '' 2 'Test for distributivity of f1 and f2.' 'BS←((V f1 X)f2 Y)≡⊃f1/V X f2⊂Y' '' 2 'Test for symmetricity of matrix XM.' '⍎⍎''1'',''↑↓''[⎕IO+∧/(⍴XM)=⌽⍴XM],''''''0~0∊XM=⍉XM''''''' '' 0 'Test for symmetricity of matrix XM.' '⍎(¯7*A∧.=⌽A←⍴XM)↑''0~0∊XM=⍉XM''' '' 0 'Test for symmetricity of square matrix XM.' '~0∊XM=⍉XM' '' 0 'Test if all elements of vector BV are equal.' '∨/∧/0 1∘.=BV' '' 0 'Test if all elements of vector BV are equal.' 'BV∧.=∨/BV' '' 0 'Test if all elements of vector BV are equal.' 'BV∧.=∧/BV' '' 0 'Test if all elements of vector BV are equal.' '⍲/0 1∊BV' '' 0 'Test if all elements of vector BV are equal.' '(∧/BV)∨~∨/BV' '' 0 'Test if all elements of vector BV are equal.' '(∧/BV)=∨/BV' '' 0 'Test if all elements of vector BV are equal.' '∧/BV÷∨/BV' '' 0 'Test if all elements of vector BV are equal.' '≠/0 1∊BV' '' 0 'Test if all elements of vector BV are equal.' '∧/BV/1⌽BV' '' 0 'Test if all elements of vector BV are equal.' '~∧/BV∊~BV' '' 0 'Test if all elements of vector BV are equal.' '0=(⍴BV)|+/BV' '' 0 'Test if all elements of vector NV are equal.' '(⌈/NV)=⌊/NV' '' 0 'Test if all elements of vector XV are equal.' '∧/⎕IO=XV⍳XV' '' 0 'Test if all elements of vector XV are equal.' '∧/XV=1⌽XV' '' 0 'Test if all elements of vector XV are equal.' '∧/XV=1↑XV' '' 0 'Test if all elements of vector XV are equal.' '∧/XV=XV[1]' '' 0 'Test if arrays are identical.' '~0∊XA1=XA2' '' 0 'Test if arrays of equal shape are identical.' '∧/,XA1=XA2' '⍴XA1 ←→ ⍴XA2' 0 'Test if circular lists are equal (excluding phase).' '∨/XV2∧.=⍉(⍳⍴XV1)⌽(2⍴⍴XV1)⍴XV1' '' 0 'Test if CV is a valid APL name.' '¯1≠⎕NC CV' '' 0 'Test if each element of XV occurs only once.' '∧/(XV⍳XV)=⍳⍴XV' '' 0 'Test if elements differ from next ones (non-empty XV).' '(¯1↓XV≠1⌽XV),1' '' 0 'Test if elements differ from previous ones (non-empty XV).' '1,1↓XV≠¯1⌽XV' '' 0 'Test if elements of XM1 belong to corr. row of XM2 (XM1[i;]∊XM2[i;]).' '∨/1 2 1 3⍉XM1∘.=XM2' '≢XM1 ←→ ≢XM2' 0 'Test if even.' '~2|IA' '' 0 'Test if IA is a leap year.' '(0=400|IA)∨(0≠100|IA)∧0=4|IA' '' 0 'Test if integer.' 'NA=⌊NA' '' 0 'Test if IS1 is an integer within range [ IS2,IS3 ).' '~IS1≤.≥(⌈IS1),IS2,IS3' '' 0 'Test if IV is a permutation vector.' 'IV∧.=⍋⍋IV' '' 0 'Test if IV is a permutation vector.' 'IV[⍋IV]∧.=⍳⍴IV' '' 0 'Test if IV is a permutation vector.' '∧/1=+⌿IV∘.=⍳⍴IV' '' 0 'Test if IV is a permutation vector.' '∧/(⍳⍴IV)∊IV' '' 0 'Test if NA is in ascending order along direction IS.' '∧/[IS]NA=⌈\[IS]NA' '' 0 'Test if NA is in descending order along direction IS.' '∧/[IS]NA=⌊\[IS]NA' '' 0 'Test if NA is within range ( NM[1;],NM[2;] ].' 'NA&lt;.≤NM' '≢NQ ←→ 2' 0 'Test if NA is within range ( NM[1;],NM[2;] ].' '(NA,[.1+⍴⍴NA]NA)>.>NM' '≢NQ ←→ 2' 0 'Test if NA is within range ( NV[1],NV[2] ).' '(NV[1]&lt;NA)∧NA&lt;NV[2]' '' 0 'Test if NA is within range [ NV[1],NV[2] ).' '≠/NA∘.≥NV' '' 0 'Test if NA is within range [ NV[1],NV[2] ].' '(NV[1]≤NA)∧(NA≤NV[2])' '2=⍴NQ' 0 'Test if NM is a lower triangular matrix.' '∧/,(0≠NM)≤A∘.≥A←⍳≢NM' '' 0 'Test if NM is an upper triangular matrix.' '∧/,(0≠NM)≤A∘.≤A←⍳≢NM' '' 0 'Test if NS is within range ( NM[1;],NM[2;] ].' 'NS&lt;.≤NM' '≢NQ ←→ 2' 0 'Test if NS is within range [ NM[1;],NM[2;] ).' 'NS&lt;.&lt;NM' '≢NQ ←→ 2' 0 'Test if numeric.' '0∊0\0⍴XV' '' 0 'Test if numeric.' '0∊1↑0⍴XA' '' 0 'Test if numeric and conversion to numeric form.' '1↓⍎''0 '',(∧/CV∊'' '',⎕D)/CV' '' 0 'Test if NV1 and NV2 are permutations of each other.' 'NV2[⍋NV2]∧.=NV1[⍋NV1]' '' 0 'Test if rows of XA contain elements differing from XS.' 'XA∨.≠XS' '' 0 'Test if single or scalar.' '1∊⍴,XA' '' 0 'Test if the elements of NV are ascending.' 'NV&lt;.≥1⌽NV' '' 0 'Test if vector.' '1∊⍴⍴XA' '' 0 'Test if vector XV is a row of array XA.' '1∊XA∧.=XV' '' 0 'Test if XA and XV have elements in common.' '∨/XV∊XA' '' 0 'Test if XA is an empty array.' '0∊⍴XA' '' 0 'Test if XA is boolean.' '∧/,XA∊0 1' '' 0 'Test if XV is a subset of XA (XV ⊂ XA).' '∧/XV∊XA' '' 0 ('Test relations of elements of NA1 to range NA2; result in ¯2',(⎕ucs 8230 50 46)) '+/×NA1∘.-NA2' '2=¯1↑⍴NA2' 0 'Tests the social security number (Finnish).' '(¯1↑X)=((~Y∊''GIOQ'')/Y)[1+31|⍎9↑X]' '10=⍴X' 0 'Text (including quotes) in expression.' 'C←(B∨≠\B←C='''''''')/C' '' 2 'Text (with first quote) in expression.' 'C←(≠\C='''''''')/C' '' 2 'Text (without quotes) in expression.' ('VV←((~B)∧≠\B←C='''''''')',(⎕ucs 8838 67)) '' 2 'The average # of lines per pgm. in a WS.' 'IS←(+/⊃¨⍴¨⎕CR¨⊂[1]M)÷≢M←⎕NL 3 4' '0=⎕IO' 2 'The average # of lines per pgm. in a WS.' 'IS←(+/⊃¨⍴¨⎕CR¨⊂[2]M)÷≢M←⎕NL 3 4' '1=⎕IO' 2 'The enclose of the items of PV (which must be of depth 2) catenated along their first axes.' '⍪/PV' '' 1 'The enclose of the items of PV (which must be of depth 2) catenated along their last axes.' ',/PV' '' 1 'The Exponential. e to the NAth power.' 'FA←*NA' '' 2 'The first item in any rank array.' 'A←⊃A' '' 2 'The first sub-array along the first axis of XA.' ((⎕ucs 8867),'⌿XA ') '' 1 'The first sub-array along the last axis of XA.' ((⎕ucs 8867),'/XA ') '' 1 'The index of positive integers in IV.' 'A←9999⍴⎕IO+⍴IV ⋄ A[⌽IV]←⌽⍳⍴IV ⋄ A[IA]' '' 0 'The item in the bottom right of XA (⎕ML&lt;2).' '⊃⌽,XA' '' 1 'The item in the bottom right of XA (⎕ML≥2).' '↑⌽,XA' '' 1 'The item in the top right of XA (⎕ML&lt;2).' '⊃⌽XA' '' 1 'The item in the top right of XA (⎕ML≥2).' '↑⌽XA' '' 1 'The last item in any rank array.' 'A←⊃⌽,A' '' 2 'The last sub-array along the first axis of XA.' ((⎕ucs 8866),'⌿XA ') '' 1 'The last sub-array along the last axis of XA.' ((⎕ucs 8866),'/XA ') '' 1 'The length of the first axis of each item in XA (⎕ML&lt;2).' '⊃∘⍴¨XA' '' 1 'The length of the first axis of each item in XA (⎕ML≥2).' '↑∘⍴¨XA' '' 1 'The natural logarithm of NA.' 'FA←⍟NA' '' 2 'The NAX based logarithm of NAY.' 'FA←NAX⍟NAY' '' 2 'The NAYth root of the items in NAX.' 'FA←NAX*÷NAY' '' 2 'The number of code lines in a workspace.' 'IS←+/⊃¨⍴¨⎕CR¨⊂[1]⎕NL 3 4' '0=⎕IO' 2 'The number of code lines in a workspace.' 'IS←+/⊃¨⍴¨⎕CR¨⊂[2]⎕NL 3 4' '1=⎕IO' 2 'The number of leading 1s in each row of BA.' '+/∧\BA' '' 1 'The number of leading blank spaces in each row of CA.' '+/∧\'' ''=CA' '' 1 'The number of objects in a workspace.' 'IS←≢⎕NL 2 3 4' '' 2 'The positions in BV corresponding to the 1s in XV.' 'XV/⍳⍴BV' '' 1 'The prototype of A.' 'A←⊃0⍴⊂⊃A' '' 2 'The rank of XA as a 1-element vector.' '⍴⍴XA' '' 1 'The rank of XA as a scalar.' '≢⍴XA' '' 1 'The subset of BV corresponding to the 1s in NS.' 'NS/⍳BV' '' 1 'The subset of XV in the index positions defined by NA (equivalent to XV[NA]).' 'NA⊃¨⊂XV' '' 1 'The type of A.' 'A←⊃0⍴⊂A' '' 2 'Three wise rolling average.' 'AVG3←(3+/NA)÷3' '' 2 'Total standard deviation of A.' 'STD←((+/(,A-(+/,A)÷1⌈⍴,A)*2)÷1⌈¯1+⍴,A)*.5' '' 2 'Total theoretical standard deviation of A.' 'STD←((+/(,A-(+/,A)÷N)*2)÷N←1⌈⍴,A)*.5' '' 2 'Total theoretical variance of A.' 'VAR←(+/(,A-(+/,A)÷N)*2)÷N←1⌈⍴,A' '' 2 'Total variance of A.' 'VAR←(+/(,A-(+/,A)÷1⌈⍴,A)*2)÷1⌈¯1+⍴,A' '' 2 'Transpose every submatrix of A.' 'A←(⍋(-⍴⍴A)↑1 0)⍉A' '' 2 'Transpose matrix XM on condition BS.' '(BS⌽1 2)⍉XM' '' 0 '''Transpose'' of matrix XM with column fields of width Y.' '((⌽A)×1,Y)⍴2 1 3⍉(1⌽Y,A←(⍴XM)÷1,Y)⍴XM' '' 0 'Transpose of planes of a rank three array.' '1 3 2⍉XQ' '' 0 'Truth table with IS variables.' 'M←2|⌊(⍳2*IS)∘.÷1+2*IS-⍳IS' '0=⎕IO' 2 'Truth table with IS variables.' 'M←2|⌊(¯1+⍳2*IS)∘.÷2*IS-⍳IS' '1=⎕IO' 2 'Truth table: All possibilities of and(∧).' 'CM←(''∧-'',B),[0]B,''|'',B∘.∧B←0 1' '0=⎕IO' 2 'Truth table: All possibilities of and(∧).' 'CM←(''∧-'',B),[1]B,''|'',B∘.∧B←0 1' '1=⎕IO' 2 'Truth table: All possibilities of nand(⍲).' 'CM←(''⍲-'',B),[0]B,''|'',B∘.⍲B←0 1' '0=⎕IO' 2 'Truth table: All possibilities of nand(⍲).' 'CM←(''⍲-'',B),[1]B,''|'',B∘.⍲B←0 1' '1=⎕IO' 2 'Truth table: All possibilities of nor(⍱).' 'CM←(''⍱-'',B),[0]B,''|'',B∘.⍱B←0 1' '0=⎕IO' 2 'Truth table: All possibilities of nor(⍱).' 'CM←(''⍱-'',B),[1]B,''|'',B∘.⍱B←0 1' '1=⎕IO' 2 'Truth table: All possibilities of or(∨).' 'CM←(''∨-'',B),[0]B,''|'',B∘.∨B←0 1' '0=⎕IO' 2 'Truth table: All possibilities of or(∨).' 'CM←(''∨-'',B),[1]B,''|'',B∘.∨B←0 1' '1=⎕IO' 2 'Two column matrix from one vector.' 'M←((⌈.5×⍴V),2)⍴V' '' 2 'Two column matrix from two vectors.' 'M←X,[.5]Y' '0=⎕IO' 2 'Two column matrix from two vectors.' 'M←X,[1.5]Y' '1=⎕IO' 2 'Two row matrix from two vectors.' 'M←X,[¯.5]Y' '0=⎕IO' 2 'Two row matrix from two vectors.' 'M←X,[.5]Y' '1=⎕IO' 2 'Type of simple A. 1-char, 2-num, 3-mixed.' 'IO←1+(0,⍴,A)⍳0+.=⊃¨0⍴¨,A' '0=⎕IO' 2 'Type of simple A. 1-char, 2-num, 3-mixed.' 'IO←(0,⍴,A)⍳0+.=⊃¨0⍴¨,A' '1=⎕IO' 2 'Underlines a string.' 'CM←C,[¯.5]''¯''' '0=⎕IO' 2 'Underlines a string.' 'CM←C,[.5]''¯''' '1=⎕IO' 2 'Underlines non-blanks in a string.' 'CM←C,(⎕UCS 10),(C≠'' '')\''¯''' '' 2 'Underlining a string.' 'CV,[⎕IO-.1]''¯''' '' 0 'Underlining words.' 'CV,[⎕IO-.1]('' ''≠CV)\''¯''' '' 0 'Union of sets, ?' 'XV2,(~XV1∊XV2)/XV1' '' 0 'Union of two sets of numbers.' 'V←Y,(~X∊Y)/X' '' 2 'Union of two sets of numbers.' 'V←Y,X~Y' '' 2 'Unique. Drop duplicates from list.' 'MU←(∨⌿&lt;\M∧.=⍉M)⌿M' '' 2 'Unique. Drop duplicates from ordered list.' 'MU←(¯1↓1,∨/MG≠1⊖MG)⌿MG' '' 2 'Unique. Drop duplicates from ordered vector.' 'U←(¯1↓1,V≠1⌽V)/V' '' 2 'Unique. Drop duplicates from vector.' 'U←((V⍳V)=⍳⍴V)/V' '' 2 'Unique. Drop duplicates from vector.' 'U←(∨⌿&lt;\V∘.=V)/V' '' 2 'Unit cube.' 'M←2 2 2⊤1+⍳8' '0=⎕IO' 2 'Unit cube.' 'M←2 2 2⊤⍳8' '1=⎕IO' 2 'Unit square.' 'M←2 2⊤1+⍳4' '0=⎕IO' 2 'Unit square.' 'M←2 2⊤⍳4' '1=⎕IO' 2 'Unit tesseract.' 'M←2 2 2 2⊤1+⍳16' '0=⎕IO' 2 'Unit tesseract.' 'M←2 2 2 2⊤⍳16' '1=⎕IO' 2 'Unpack a vector into an array based on BA.' '((,BA)/,A)←V' '' 2 'Using a variable named according to XS.' '⍎''VAR'',(⍕XS),''←XA''' '' 0 'Using boolean matrix BM in expanding XV.' '(⍴BM)⍴(,BM)\XV' '' 0 'Using default value 100 if XA does not exist.' '⍎(¯3*2≠⎕NC ''XA'')↑''XA100''' '' 0 'Value of fixed-degree polynomial NV at points NA.' 'NV[3]+NA×NV[2]+NA×NV[1]' '' 0 'Value of polynomial with coefficients NA at point NS.' 'NS⊥NA' '' 0 'Value of polynomial with coefficients NA at point NS.' '(NS*¯1+⍳⍴NA)+.×⌽NA' '' 0 'Value of polynomial with coefficients NV2 at points NV1.' '(NV1∘.+,0)⊥NV2' '' 0 'Value of saddle point.' '(&lt;\,(NM=(⍴NM)⍴⌈⌿NM)∧NM=⍉(⌽⍴NM)⍴⌊/NM)/,NM' '' 0 'Value of Taylor series with coefficients NV at point NS.' '+/NV×(NS*A)÷!A←¯1+⍳⍴NV' '' 0 'Value of Taylor series with coefficients NV at point NS.' '+/NV××\1,NS÷⍳¯1+⍴NV' '' 0 'Variance (dispersion) of NV.' '(+/(NV-(+/NV)÷⍴NV)*2)÷⍴NV' '' 0 'Vector (cross) product of vectors.' '((1⌽NA1)×¯1⌽NA2)-(¯1⌽NA1)×1⌽NA2' '' 0 ('Vector (IV[1]⍴1),(IV[2]⍴0),(IV[3]⍴1),',(⎕ucs 8230)) '≠\(⍳+/IV)∊+\⎕IO,IV' '' 0 ('Vector (IV1[1]⍴1),(IV2[1]⍴0),(IV1[2]⍴1),',(⎕ucs 8230)) '(⍳+/IV1,IV2)∊+\1+¯1↓0,((⍳+/IV1)∊+\IV1)\IV2' '' 0 ('Vector (IV2[1]+⍳IV1[1]),(IV2[2]+⍳IV1[2]),(IV2[3]+⍳IV1[3]),',(⎕ucs 8230)) '⎕IO++\1+((⍳+/IV1)∊+\⎕IO,IV1)\IV2-¯1↓1,IV1+IV2' '⍴IV1 ←→ ⍴IV2' 0 'Vector having as many ones as XM has rows.' '∨/0/XM' '' 0 'Vector of length IS2 with IS1 ones on the left, the rest zeroes.' 'IS2↑IS1⍴1' '' 0 'Vector of matrices to matrix of vectors.' 'MV←⍉↑⊂[1]¨VM' '0=⎕IO' 2 'Vector of matrices to matrix of vectors.' 'MV←⍉↑⊂[2]¨VM' '1=⎕IO' 2 'Vector of matrices to vector of vectors.' 'VV←⊃,/⊂[1]¨VM' '0=⎕IO' 2 'Vector of matrices to vector of vectors.' 'VV←⊃,/⊂[2]¨VM' '1=⎕IO' 2 'Vector of positions of ones in boolean array.' 'VP←(,BA)/,⊃∘.,/⍳¨⍴BA' '' 2 'Vector to expand a new element after each one in BV.' '(,BV,[1.5]1)/,BV,[1.5]~BV' '' 0 'Vector to matrix at selected characters.' ('CM←↑(~V∊C)',(⎕ucs 8838 86)) '' 2 'Vectorize - for any rank.' 'V←⊂[1↓⍳⍴⍴A]1/A' '' 2 'Vectorize - keep only 1st column of M.' 'V←M[;0]' '0=⎕IO' 2 'Vectorize - keep only 1st column of M.' 'V←M[;1]' '1=⎕IO' 2 'Vectors as column matrices in catenation beneath each other.' 'X,[1+.5×⌈/(⍴⍴X),⍴⍴Y]Y' '' 0 'Vectors as row matrices in catenation upon each other.' 'X,[.5×⌈/(⍴⍴X),⍴⍴Y]Y' '' 0 'Weekday (S-S:0-6) given Y M D.' 'IS←7|+/D(⍎M⊃''0032503514624''),⌊5 1.25×4 100⊤Y-3>M' '1=⎕IO' 2 'Weekday (S-S:0-6) given Y M D.' 'IS←7|+/D(⍎M⊃''032503514624''),⌊5 1.25×4 100⊤Y-3>M' '0=⎕IO' 2 'Weekday (S-S:0-6) of first of year IS (YYYY).' 'IS←7|6+IS+-/⌈IS÷4 100 400' '' 2 'Weighted average of vector/matrix columns.' 'WAVG←(N+.×NM)÷+/N' '' 2 'Weighted average of vector/matrix rows.' 'WAVG←(NM+.×N)÷+/N' '' 2 'WHERE. Execute "fn" on condition B mask.' '((,B)/,A)←fn(,B)/,A' '' 2 'Which class do elements of NA belong to.' '+/NA∘.≥0 50 100 1000' '' 0 'Which elements of XA are not in set XV (difference of sets).' '(⎕IO+⍴XV)=XV⍳XA' '' 0 'Which rows of M are all numeric?' 'B←0∧.=↑¨0⍴¨M' '' 2 'Widening matrix XM1 to be compatible with XM2.' '((0 1×⍴XM2)⌈⍴XM1)↑XM1' '' 0 'Window enclosing Z.' 'Z←0J1⊥0 1⌽2/|⌊/M,[0.5]-M←11 9∘.○Z' '0=⎕IO' 2 'Window enclosing Z.' 'Z←0J1⊥0 1⌽2/|⌊/M,[1.5]-M←11 9∘.○Z' '1=⎕IO' 2 'Word lengths of words in list CA.' 'CA+.≠'' ''' '' 0 'XA1 (XA2 is ignored).' 'XA1{⍺}XA2' '' 1 'XA1 and XA2 are ignored (no result produced).' 'XA1{}XA2' '' 1 'XA1 and XA2 as a two item vector (XA1 XA2).' 'XA1{⍺ ⍵}XA2' '' 1 'XA1 redefined to be XA1 with XA2 catenated along its first axis.' 'XA1⍪←XA2' '' 1 'XA1 redefined to be XA1 with XA2 catenated along its last axis.' 'XA1,←XA2' '' 1 'XA2 (XA1 is ignored).' 'XA1{⍵}XA2' '' 1 'XM with the rows sorted into numerical or alphabetical order.' '{⍵[⍋⍵;]}XM' '' 1 'XM with the rows sorted into reverse numerical or alphabetical order.' '{⍵[⍒⍵;]}XM' '' 1 'XM1⍳XM2 for rows of matrices.' '⎕IO++⌿∧⍀XM1∨.≠⍉XM2' '' 0 'XV sorted into numerical or alphabetical order.' '{⍵[⍋⍵]}XV' '' 1 'XV sorted into reverse numerical or alphabetical order.' '{⍵[⍒⍵]}XV' '' 1 'Y:th moment of NV.' '(+/(NV-(+/NV)÷⍴NV)*Y)÷⍴NV' '' 0 'Z←AX(lo OAX I)AY. Run "lo" on axes I of AX.' 'Z←↑[I](⊂[I]AX)lo⊂AY' '' 2 'Z←AX(lo OAY I)AY. Run "lo" on axes I of AY.' 'Z←↑[I](⊂AX)lo⊂[I]AY' '' 2 'Z←X(lo IO B)Y;⎕IO. Run "lo" in origin B.' ('Z←X lo Y',(⎕ucs 8867),'⎕IO←B') '' 2 'Z←X(lo PR)Y. Perform "lo" as scalar.' '⍎''Z←X lo '',((1&lt;|≡Y)/''PR¨''),''Y''' '' 2 'Zero array of shape and size of NA.' '0×NA' '' 0 'Zero or space depending on the type of XA (fill element).' '1↑0⍴XA' '' 0 'Zeroing a vector (without change of size).' 'NV[]←0' '' 0 'Zeroing all boolean values.' '0∧BA' '' 0 'Zeroing elements of NA1 depending on their values.' 'NA1×~NA1∊NA2' '' 0 'Zeros, same shape and structure.' 'B←A≠A' '' 2 'Zeros, same shape plus one.' 'B←0+/V' '' 2 'Zeros, same shape when A is simple.' 'B←A∊⍬' '' 2
﻿ msg←Test dummy
input←'TagName'Find'input' 'type' 'search'
output←Find'output'
input SendKeys'rank off'
:If 0=⍴msg←output WaitFor'No matching records found'
input SendKeys Backspace
0=⍴msg←∊∪output WaitFor¨'⍴⍴XA' 'Dyalog' 'FinnAPL' '((((⍴⍴XA1)-⍴⍴XA2)⍴1),⍴XA2)⍴XA2'
:EndIf
﻿ msg←Test dummy;old;new;alef;sound;ALEF
ALEF←'letter1488'
⍝ Check if letter button is there
:If 0=⍴msg←'No "Alef"'/⍨0≡alef←Find ALEF
⍝ Check if it causes expected output
Click ALEF
:AndIf 0=⍴msg←'output'WaitFor'א'
⍝ Check if it causes expected sound
:AndIf 0=⍴msg←'No sound'/⍨0≡sound←Find'autoplay'
⍝ Check that the correct sound is played
:AndIf 0=⍴msg←'Wrong sound'/⍨~∨/ALEF⍷sound.GetAttribute,⊂'src'
⍝ Check that color changes upon starting over
old←alef.GetAttribute,⊂'style'
Click'new' ⋄ ⎕DL 0.2 ⍝ Wait for update to finish... (May fail on slow machines or if color happens to be the same)
new←(Find ALEF).GetAttribute,⊂'style' ⍝ ... otherwise "Find" will return the old one immediately
:AndIf 0=⍴msg←'Failed to recolor'/⍨new≡old
⍝ Check that the output is emptied now that we started over
msg←'Failed to clear output'/⍨''≢(Find'output').Text
:EndIf
﻿ msg←Test dummy;X;O;R;C;At;Next
(X O)←' line' ' circle'
R←'board_r'∘,
C←{∊⍕¨⍺,'c',⍵}
At←{'Expected symbol did not appear'/⍨0≡'CssSelector'Find'#',⍵,⍺⊣Click ⍵}
Next←{'next'WaitFor'Next: ',⍵}
:If 1
⍝ Ready?
:AndIf 0=⍴msg←'status'WaitFor'Go!'
⍝ X is the first player?
:AndIf 0=⍴msg←Next'X'
⍝ X is put onto the board?
:AndIf 0=⍴msg←X At R 2 C 2
⍝ Next player is O?
:AndIf 0=⍴msg←Next'O'
⍝ O is put onto the board?
:AndIf 0=⍴msg←O At R 2 C 3
⍝ Return to the first player?
:AndIf 0=⍴msg←Next'X'
⍝ Keep playing
:AndIf 0=⍴msg←X At R 1 C 3
:AndIf 0=⍴msg←O At R 3 C 1
:AndIf 0=⍴msg←X At R 1 C 1
:AndIf 0=⍴msg←O At R 1 C 2
:AndIf 0=⍴msg←X At R 3 C 3
⍝ X won?
:AndIf 0=⍴msg←'status'WaitFor'X wins!'
⍝ Check that the board is cleared
:AndIf 0=⍴msg←'status'WaitFor'Board cleared!'⊣Click'reset'
:EndIf
﻿ msg←Test dummy
msg←''
:if 0∊Find¨'inputs' 'city' 'from' 'to'
msg←'Expected page content not found! tube.dws might be missing...'
:endif﻿ msg←Test dummy;link
:If 0≡link←Find'link'                       ⍝ find the link
msg←'link not found'
:ElseIf link.TagName≢,'a'                   ⍝ is it an <a> ?
msg←'wrong tag'
:ElseIf 'here'≢link.Text                    ⍝ saying "here"
msg←'wrong text'
:ElseIf '.png'≢¯4↑link.GetAttribute,⊂'href' ⍝ linking to the picture?
msg←'wrong link'
:Else                                       ⍝ everything is OK
msg←''
:EndIf
﻿ msg←Test dummy
⍝ This checks the presense of the audio tag
msg←'Control not found'/⍨~{0≢Find'sound'}Retry ⍬﻿ msg←Test dummy
Click'btnPressMe'
msg←'output' WaitFor 'Thank You!'﻿ msg←Test dummy;Value;Wrong;cb;ClickDoesNotMake
Value←{⍵.GetAttribute⊂'value'}
ClickDoesNotMake←{
msg⊢←' wrong state',⍨id←cb.GetAttribute⊂'id'
⍵≢Value cb⊣Click id
}
msg←''
⍝ Each If: failure → set msg and quits
:If 0≡cb←Find'cb1'
msg←'cb1 not found'
:ElseIf 'unchecked'≢Value cb
msg←'cb1 wrong state'
:ElseIf ClickDoesNotMake'checked'
:ElseIf ClickDoesNotMake'unchecked'
:ElseIf ClickDoesNotMake'checked'
:ElseIf 0≡cb←Find'cb2'
msg←'cb2 not found'
:ElseIf 'unchecked'≢Value cb
msg←'cb2 wrong state'
:ElseIf ClickDoesNotMake'checked'
:ElseIf 'checked'≢Value cb←Find'cb1'⊣⎕DL 0.2
msg←'cb1 unexpected change'
:ElseIf ClickDoesNotMake'indeterminate'
:ElseIf ClickDoesNotMake'unchecked'
:ElseIf ClickDoesNotMake'checked'
:Else
msg←''
:EndIf
﻿ msg←Test dummy;Value;Wrong;cb;ClickDoesNotMake
Value←{⍵.GetAttribute⊂'value'}
ClickDoesNotMake←{
msg⊢←' wrong state',⍨id←cb.GetAttribute⊂'id'
⍵≢Value cb⊣Click id
}
msg←''
⍝ Each If: failure → set msg and quits
:If 0≡cb←Find'cb1'
msg←'cb1 not found'
:ElseIf 'unchecked'≢Value cb
msg←'cb1 wrong state'
:ElseIf ClickDoesNotMake'checked'
:ElseIf ClickDoesNotMake'unchecked'
:ElseIf 0≡cb←Find'cb2'
msg←'cb2 not found'
:ElseIf 'indeterminate'≢Value cb
msg←'cb2 wrong state'
:ElseIf ClickDoesNotMake'unchecked'
:ElseIf ClickDoesNotMake'checked'
:ElseIf ClickDoesNotMake'indeterminate'
:Else
msg←''
:EndIf
﻿ msg←Test dummy
'opts'∘SendKeys¨'F'Down Tab ⍝ Auto-complete using F, down-arrow
Click'btnPressMe'
msg←'output'WaitFor'You selected "Four"!'
﻿ msg←Test dummy
'input'SendKeys'Brian'
Click'done'
msg←'output'WaitFor'Hello, Brian!'﻿ msg←Test dummy
'fname' 'lname'SendKeys¨'Morten' 'Kromberg'
msg←'output'WaitFor'Hi Morten Kromberg!'﻿ msg←Test dummy;fig
fig←Find'fig'
msg←(~fig.Displayed∧0∧.≠fig.Size.(Height Width))/'figure not displayed'﻿ msg←Test dummy
msg←'output'WaitFor'Why Use a Form'﻿ msg←Test dummy;result
result←Find¨'alpha' 'beta' 'gamma'
:If '?'∧.=∊result.Text
msg←'' ⍝ no gyroscope found
:Else
msg←∊∪result WaitFor¨'0'
:EndIf
﻿ msg←Test dummy
'inp2'SendKeys'morten'
Click'inp5'
:If 0∊⍴msg←'Failed to detect invalid input'/⍨0≡Find'inp5' ⍝ inp5 will be gone if POST succeeded
'inp2'SendKeys'@dyalog.apl'
Click'inp5'
msg←'output'WaitFor'Input accepted'
:EndIf﻿ msg←Test dummy;CR;files;f;result;file;path;stats;s;c
⍝ try to upload a sampling of files in the Data-directory
msg←''
CR←⎕UCS 13
⍝↓↓↓ remove directories, select one of each file type based on extension
files←{⍵[{⍵⍳∪⍵}3⊃¨⎕NPARTS¨⍵]}{⍵[;1]/⍨~⍵[;4]}#.Files.List path←AppRoot,'examples\data\'
⍝⍞←' testing ',(⍕⍴files),' files '
c←0
:For f :In files  ⍝ all files, no directories
(Find'ipfl').SendKeys⊂file←path,f  ⍝ must send all at once, otherwise causing Selenium-Exception because of filename...
Click'submit'
⎕DL 2 ⍝ allow short delay for processing...
result←Find'output'
{~0∊∊⍴¨result.Text}Retry ⍬ ⍝ Wait (a bit) to see if it gets populated
:If ~∨/f⍷result.Text
msg,←CR,'Upload of file ',file,' failed'
:ElseIf 2≠⍴stats←⊃(//)⎕VFI result.Text
msg,←CR,'File ',file,' uploaded but statistics are not found - ',result.Text
:Else
⍝         s←{t←⍵ ⎕NTIE 0 ⋄ (⎕NUNTIE t)⊢{(⍴⍵),255|+/⍵}⎕NREAD t,83,2↑⎕NSIZE t}file
s←{t←⍵ ⎕NTIE 0 ⋄ (⎕NUNTIE t)⊢{(⍴⍵),(255|+)/⎕UCS ⍵}⎕NREAD t,(⎕dr' '),2↑⎕NSIZE t}file
:If stats≢s
msg,←CR,'File ',file,' uploaded but statistics are different - uploaded = ',(⍕stats),', original = ',⍕s
:EndIf
:EndIf
c+←1
⍝⍞←⍕10|c
:EndFor
﻿ msg←Test dummy;cell
⍝ Test /Examples/DC/InputGridSimple
cell←'CssSelector'Find'.myig_label'
msg←'Auto-assigned ID not found'/⍨~{'First name'≡cell.Text}Retry ⍬﻿ msg←Test dummy;data
⍝ Test /Examples/DC/InputGridSimple
data←'Morten' 'Kromberg'(⍕1↓∊'/',¨⌽3↑⎕TS) ⍝ It's my birthday every day!
'fname' 'lname' 'bdate'SendKeys¨data
Click'ClickMe'
msg←'output'WaitFor'Hi Morten Kromberg. Happy Birthday!'﻿ msg←Test dummy;result
('inp'∘,¨⍕¨⍳5)SendKeys¨'Morten' 'Kromberg' '52' 'secret'Right
result←Find¨'out'∘,¨⍕¨⍳5
:If {~0∊∊⍴¨result.Text}Retry ⍬ ⍝ Wait (a bit) to see if it gets populated
msg←'Expected output was not produced.'/⍨result.Text≢'Entered: '∘,¨'(optional)Morten' 'Kromberg' '52' '(that''s a secret)' '6'
:Else
msg←'Missing output.'
:EndIf
﻿ msg←Test dummy
msg←'list not found'/⍨8≢≢⌷'CssSelectors'Find'#links li'
﻿ msg←Test dummy
'fruits'ListMgrSelect'Oranges' 'Lemons'
Click'btnSave'
msg←'output'WaitFor'You picked: Oranges Lemons'﻿ msg←Test dummy
msg←'Expected output was not produced.'/⍨'Apples' 'Bananas' 'Grapes' 'Oranges'≢(⌷'CssSelectors'Find'#fruits li').Text
﻿ msg←Test dummy;link;output
:If 0∊⍴msg←'list not found'/⍨0≡link←('CssSelectors'Find'#links li')[1]
output←Find'output'
msg←'Mouseover test failed'/⍨~{∨/'new'⍷output.Text⊣⎕DL 0.1⊣MoveToElement link 10 10}Retry ⍬
:EndIf
﻿ msg←Test dummy
msg←'Expected output was not produced.'/⍨'Apples' 'Bananas' 'Grapes' 'Oranges'≢(⌷'CssSelectors'Find'#fruits li').Text
﻿ msg←Test dummy;t2
⍝ Test if it is there at all
:If 0=⍴msg←'Radio button not found'/⍨0≡t2←Find'Transport_2'
⍝ Test if it is checked
msg←'RadioButton not checked as expected.'/⍨'true'≢t2.GetAttribute⊂'checked'
:EndIf﻿ msg←Test dummy;output
Click'Transport_3'
msg←'output'WaitFor'You selected: Automobile'﻿ msg←Test dummy;fname;HasValue
HasValue←{'Unexpected content.'/⍨⍵≢⍺.GetAttribute⊂'value'}
fname←Find'fname'
:If 0=⍴msg←fname HasValue''
fname SendKeys'Morten'
:AndIf 0=⍴msg←fname HasValue'Morten'
Click'Reset'
:AndIf 0=⍴msg←fname HasValue''
:EndIf
﻿ msg←Test dummy
⍝ Test /Examples/DC/ScriptAdvanced
Click'reverse'
msg←'output'WaitFor'Thank goodness'﻿ msg←Test dummy
⍝ Test /Examples/DC/ScriptSimple
Click'reverse'
msg←'output'WaitFor'Thank goodness'﻿ msg←Test dummy
⍝ Test /Examples/DC/SelectAdvanced
⍝ Ensure 'multi' (the selection list) is there:
:If 0∊⍴msg←'selection list not there'/⍨0≡Find'multi'
⍝ Grab the 2 elements already chosen:
Click'PressMe'
:AndIf 0∊⍴msg←'output'WaitFor'You picked: Bananas Pears'
⍝ Make a single selection:
'multi'SelectItemText'~' 'Grapes'
Click'PressMe'
:AndIf 0∊⍴msg←'output'WaitFor'You picked: Grapes'
⍝ Make another selection:
'multi'SelectItemText'Pears'
Click'PressMe'
msg←'output'WaitFor'You picked: Grapes Pears'
:EndIf﻿ msg←Test dummy;sel
⍝ Test /Examples/DC/SelectSimple
⍝ Ensure 'fruit' is there:
:If 0∊⍴msg←'selection list not there'/⍨0≡sel←Find'fruit'
sel SendKeys'P'
Click'btnPressMe'
msg←'output'WaitFor'You picked: Pears'
:EndIf﻿ msg←Test dummy
⍝ There is little to do here
msg←(0∊Find¨'red' 'green' 'blue' 'outer')/'StackPanels not found on page'﻿ msg←Test dummy
⍝ There is little to do here
msg←(0∊Find¨'hsp' 'vsp')/'StackPanel controls not found'﻿ msg←Test dummy
msg←'output'WaitFor'_.StyleSheet' 'Page does not contain expected content'﻿ msg←Test dummy
msg←'output'WaitFor'Adding Style' 'Page does not begin which expected text'﻿ msg←Test dummy;fname;fnameValue
fnameValue←{⍵≡fname.GetAttribute⊂'value'}
⍝ First, test that the input field is accepting input
fname←Find'fname'
fname SendKeys'Morten'
:If 0∊⍴msg←'Could not type into fname'/⍨~fnameValue Retry'Morten'
⍝ Test that Reset actually clears the form
Click'Reset'
:AndIf 0∊⍴msg←'Reset did not work'/⍨~fnameValue Retry''
⍝ Test that the submit button works
fname'lname'SendKeys¨'Morten' 'Kromberg'
Click'Submit'
⎕DL 0.1 ⍝ wait for the page to refresh
msg←'output'WaitFor'Hello, Morten Kromberg!' 'Submit did not produce expected output'
:EndIf
﻿ msg←Test dummy
⍝ Just check to see whether the little multiplication table seems to have been produced
msg←'Expected output was not produced.'/⍨'90' '100'≢('CssSelectors'Find'#myt td')[108 109].Text
﻿ msg←Test dummy
⍝ Just check to see whether the litte multiplication table seems to have been produced
msg←'Expected output was not produced.'/⍨'90' '100'≢('CssSelectors'Find'#myTable td')[98 99].Text
﻿ msg←Test dummy;old;new
⍝ Check if the initial states have been outputted
:If 0=⍴msg←∊∪'Aoutput' 'Boutput'WaitFor¨⊂'─────────╫'
⍝ Check that the A display moves and the B does not, after A is started
Click'Arun'
:AndIf 0=⍴msg←∊∪'Aoutput' 'Boutput'WaitFor¨('╫─' 'A failed to move ')('─────────╫' 'B failed to stay')
⍝ Check that the B display moves after being started
Click'Brun'
:AndIf 0=⍴msg←'Boutput'WaitFor'╫─' 'B failed to move'
⍝ Check that the A display is static after being stopped
Click'Astop'
⎕DL 0.1
old←(Find'Aoutput').Text
⎕DL 0.3
new←(Find'Aoutput').Text
msg←'A failed to stop'/⍨old≢new
:EndIf
﻿ msg←Test dummy
⎕DL 2 ⍝ Wait until first output appears
msg←'output'WaitFor'Now the time is:'﻿ msg←Test dummy;link;output
:If 0∊⍴msg←'list not found'/⍨0≡link←('CssSelectors'Find'#links li')[1]
output←Find'output'
msg←'Mouseover test failed'/⍨~{∨/'new'⍷output.Text⊣MoveToElement link 10 10}Retry ⍬
:EndIf﻿ msg←Test dummy
msg←'Expected output was not produced.'/⍨'Apples' 'Bananas' 'Grapes' 'Oranges'≢(⌷'CssSelectors'Find'#fruits li').Text
﻿ msg←Test dummy;Has
Has←{(~∨/⍵⍷∊(⌷'CssSelectors'Find'#output p').Text⊣Wait 200⊣'LinkText'Click ⍺)/⍺,' text not visible'}
:If 0=⍴msg←'Latin'Has'Neque'
:AndIf 0=⍴msg←'German'Has'Fu en leuchtete'
:AndIf 0=⍴msg←'English'Has'Continual'
:AndIf 0=⍴msg←'French'Has'Que ans avez'
:EndIf
﻿ msg←Test dummy;output;button;Then;Is
(output button)←Find¨'output' 'button'
Is←{⍵≡output.GetAttribute⊂'class'}
Then←{
~0∊⍴msg←'Wrong initial class'/⍨~Is ⍺:msg
~0∊⍴msg←'Missing transistion'/⍨(⍺≢⍵)∧Is ⍵⊣⎕DL 0.1⊣Click button:msg
~0∊⍴msg←'Wrong final class'/⍨~Is ⍵⊣⎕DL 1:msg
''
}
:If 1 ⍝ for consistency and easy of inserting more tests
:AndIf 0=⍴msg←''Then'redclass' ⍝ transition to new class
:AndIf 0=⍴msg←'redclass'Then'redclass' ⍝ make sure it doesn't toggle
:EndIf
msg←Test dummy;Gives;GO;Boots
Gives←{'output'WaitFor ⍵⊣'CssSelector'∘Click¨⊂⍣(1=≡⍺)⊢⍺}
GO←'#menu_2' ⋄ Boots←'label[for="footwear_2"] span'
msg←''
:If 0=⍴msg←GO Gives'barefoot'
msg←Boots GO Gives'Boots'
:EndIf
﻿ msg←Test dummy;dragon
dragon←Find'dragon'
(Selenium.ACTIONS.DragAndDropToOffset dragon 1 2).Perform
msg←'dragon'WaitFor'You stopped at: (1,2)'﻿ msg←Test dummy;dragon;dropin
dragon←Find'dragon'
dropin←Find'dropin'
(Selenium.ACTIONS.DragAndDrop dragon dropin).Perform
msg←'dropin'WaitFor'Good Job!'﻿ msg←Test dummy;output;button;Then;Is
(output button)←Find¨'output' 'button'
Is←{⍵≡output.GetAttribute⊂'class'}
Then←{
~0∊⍴msg←'Wrong initial class'/⍨~Is ⍺:msg
~0∊⍴msg←'Missing transistion'/⍨(⍺≢⍵)∧Is ⍵⊣⎕DL 0.1⊣Click button:msg
~0∊⍴msg←'Wrong final class'/⍨~Is ⍵⊣⎕DL 1:msg
''
}
:If 1 ⍝ for consistency and easy of inserting more tests
:AndIf 0=⍴msg←'redclass'Then'' ⍝ removed class
:AndIf 0=⍴msg←''Then'' ⍝ make sure it doesn't toggle
:EndIf﻿ msg←Test dummy;handle
handle←'ClassName'Find'ui-resizable-se'
(Selenium.ACTIONS.DragAndDropToOffset handle 1 2).Perform
msg←'sizable'WaitFor'Resize me! New size: 152×151'﻿ msg←Test dummy;Msg;slave;min;max;LeftUntil;RightUntil
LeftUntil←{∨/(Find ⍺).Text≡⍕⍵⊣(⍎⍺)DragAndDropToOffset ¯60 0}
RightUntil←{∨/(Find ⍺).Text≡⍕⍵⊣(⍎⍺)DragAndDropToOffset 60 0}
Msg←/∘'Wrong limit'~
(slave min max)←⌷'CssSelectors'Find'.ui-slider-handle'
:If 1
:AndIf 0=⍴msg←Msg{'slave'LeftUntil 20}Retry ⍬
:AndIf 0=⍴msg←Msg{'slave'RightUntil 40}Retry ⍬
:AndIf 0=⍴msg←Msg{'min'LeftUntil 0}Retry ⍬
:AndIf 0=⍴msg←Msg{'slave'RightUntil 40}Retry ⍬
:AndIf 0=⍴msg←Msg{'max'RightUntil 100}Retry ⍬
:AndIf 0=⍴msg←Msg{'slave'RightUntil 100}Retry ⍬
:EndIf﻿ msg←Test dummy;handle;output;Msg;SlideUntil
output←Find'output'
Msg←/∘'Could not move slider'~
SlideUntil←{∨/output.Text⍷⍨⍕⍵⊣handle DragAndDropToOffset ⍺ 0}
:If 1 ⍝ for consistency and easy of inserting more tests
handle←'CssSelector'Find'#Default span'
:AndIf 0=⍴msg←output WaitFor'Default Slider changed to 0'⊣Click handle
:AndIf 0=⍴msg←Msg{60 SlideUntil 100}Retry ⍬
handle←'CssSelector'Find'#Ranged span'
:AndIf 0=⍴msg←output WaitFor'Ranged Slider changed to 20 40'⊣Click handle
:AndIf 0=⍴msg←Msg{60 SlideUntil 100 40}Retry ⍬
handle←⊃⌽⌷'CssSelectors'Find'#Ranged span'
:AndIf 0=⍴msg←Msg{¯60 SlideUntil 100 0}Retry ⍬
:EndIf
﻿ msg←Test dummy;locs;Fi;i;offset;imgs;order;orderedlis;output;repetition;repetitions;orderedimgs;next
Fi←{⍎(⍕⍵)∩⎕D,','}    ⍝ Fix input
output←Find'output'
repetitions←3
:For repetition :In ⍳repetitions
imgs←⌷'CssSelectors'Find'#sort img'
order←(⊃⌽)¨imgs.GetAttribute⊂,⊂'id' ⍝ the <img> tags have ids DuckX
locs←Fi¨imgs.Location
orderedimgs←imgs[⍋order]
:For i :In ⍳12
:If ∨/'You succeeded'⍷output.Text ⋄ :Leave ⋄ :EndIf ⍝ finished?
:While ∨/5<|offset←(i⊃locs)-Fi(Find'Duck',i⊃⎕A).Location ⍝ Do we need to move it significantly?
orderedimgs[i]DragAndDropToOffset offset ⍝ do it!
:If i∊4 8 ⍝ Last img in row will not move there, so we have it slide in place by moving...
next←i⌷'CssSelectors'Find'#sort img' ⍝ ... the one that is occupying the desired position
i←⎕A⍳⊃⌽next.GetAttribute,⊂'id'
:EndIf
:EndWhile
:EndFor
:If repetition=repetitions ⋄ :Leave ⋄ :Else
Click'shuffle' ⋄ ⎕DL 0.2
:EndIf
:EndFor
msg←output WaitFor'You succeeded'
﻿ msg←Test dummy;Fi;lis;locs;output;To;After
Fi←{⍎(⍕⍵)∩⎕D,','}    ⍝ Fix input
lis←⌷'CssSelectors'Find'#sort li'
locs←{Fi ⍵}¨lis.Location
output←Find'output'
To←{lis[⍺]DragAndDropToOffset(⍵⊃locs)-Fi lis[⍺].Location}
After←{0=⍴msg←output WaitFor⍕⍺⊣⎕dl 0.1}
:If 1⊣msg←''
:AndIf 2 3 4 5 1 After 1 To 5
:AndIf 5 2 3 4 1 After 5 To 1
:AndIf 5 3 4 2 1 After 2 To 4
:AndIf 'reversed'After 3 To 3
:AndIf 1 5 4 3 2 After 1 To 1
:AndIf 1 2 5 4 3 After 2 To 2
:AndIf 1 2 3 5 4 After 3 To 3
:AndIf 'restored'After 4 To 4
:EndIf﻿ msg←Test dummy;Spin;HasValue
HasValue←{'Wrong value'/⍨⍵≢{6::⍬ ⋄ ⊢⍎(Find ⍵).GetAttribute⊂'value'}⍺}
Spin←{shy←⍵⊣Click('Simple' 'Preset'⍳⍵[1])⊃⌷'CssSelectors'Find'.ui-spinner-',⊃⌽⍵}
:If 1 ⍝ for consistency and easy of inserting more tests
:AndIf 0=⍴msg←'Simple'HasValue ⍬
:AndIf 0=⍴msg←'Simple'HasValue 1⊣Spin'Simple' 'up'
:AndIf 0=⍴msg←'output'WaitFor'Simple Spinner changed to 1'⊣Click'Update'
:AndIf 0=⍴msg←'Simple'HasValue ¯1⊣Spin⍣2⊢'Simple' 'down'
:AndIf 0=⍴msg←'Preset'HasValue 7
:AndIf 0=⍴msg←'Preset'HasValue 10⊣Spin⍣4⊢'Preset' 'up'
:AndIf 0=⍴msg←'output'WaitFor'Preset Spinner changed to 10'⊣Click'Update'
:AndIf 0=⍴msg←'Preset'HasValue 0⊣Spin⍣11⊢'Preset' 'down'
:EndIf﻿ msg←Test dummy;output;button;Then;Is
(output button)←Find¨'output' 'button'
Is←{⍵≡output.GetAttribute⊂'class'}
Then←{
~0∊⍴msg←'Wrong initial class'/⍨~Is ⍺:msg
~0∊⍴msg←'Missing transistion'/⍨(⍺≢⍵)∧Is ⍵⊣⎕DL 0.1⊣Click button:msg
~0∊⍴msg←'Wrong final class'/⍨~Is ⍵⊣⎕DL 1:msg
''
}
:If 1 ⍝ for consistency and easy of inserting more tests
:AndIf 0=⍴msg←'redclass'Then'yelclass' ⍝ switched class
:AndIf 0=⍴msg←'yelclass'Then'yelclass' ⍝ make sure it doesn't toggle
:EndIf﻿ msg←Test dummy;Has
Has←{(~∨/⍵⍷∊(⌷'CssSelectors'Find'#output p').Text⊣Wait 200⊣'LinkText'Click ⍺)/⍺,' text not visible'}
:If 0=⍴msg←'Latin'Has'Neque'
:AndIf 0=⍴msg←'German'Has'Fu en leuchtete'
:AndIf 0=⍴msg←'English'Has'Continual'
:AndIf 0=⍴msg←'French'Has'Que ans avez'
:EndIf
﻿ msg←Test dummy;output;button;Then;Is
(output button)←Find¨'output' 'button'
Is←{⍵≡output.GetAttribute⊂'class'}
Then←{
~0∊⍴msg←'Wrong initial class'/⍨~Is ⍺:msg
~0∊⍴msg←'Missing transistion'/⍨(⍺≢⍵)∧Is ⍵⊣⎕DL 0.1⊣Click button:msg
~0∊⍴msg←'Wrong final class'/⍨~Is ⍵⊣⎕DL 1:msg
''
}
:If 1 ⍝ for consistency and easy of inserting more tests
:AndIf 0=⍴msg←''Then'redclass' ⍝ added class
:AndIf 0=⍴msg←'redclass'Then'' ⍝ removed class
:EndIf﻿ msg←Test dummy;output;Has;Transitions
output←Find'output'
Has←{∧/∨/¨(⊂⍣(1=≡⍵)⊢⍵)⍷¨⊂output.GetAttribute⊂'style'}
Transitions←{
~0=⍴msg←'Wrong initial style'/⍨Has ⍵:msg
~0=⍴msg←'Missing transistion'/⍨~Has ⍵⊣⎕DL 0.1⊣Click ⍺:msg
~0=⍴msg←'Wrong final style'/⍨Has ⍵⊣⎕DL 1:msg
''
}
:If 1 ⍝ for consistency and easy of inserting more tests
:AndIf 0=⍴msg←'Toggle'Transitions'position'
:AndIf 0=⍴msg←'Toggle'Transitions'position'
:AndIf 0=⍴msg←'Hide'Transitions'position' 'opacity'
:AndIf 0=⍴msg←'Show'Transitions'opacity'
:EndIf﻿ msg←Test dummy;country
:If 'Afghanistan'≢('ClassName'Find'sorting_1').Text
msg←'missing expected data'
:ElseIf 'Country'≢country←('ClassName'Find'sorting_asc').Text
msg←'missing expected header'
:Else
('ClassName'Find'sorting_asc').Click
msg←'sorting failed'/⍨'Zambia'≢('ClassName'Find'sorting_1').Text
:EndIf
﻿ msg←Test dummy
1 ejAccordionTab'Second' 'p2'
msg←'output'WaitFor'You activated section 1' 'Accordion Selection Failed'
﻿ msg←Test dummy;Has
Has←{(~∨/⍵⍷∊(⌷'CssSelectors'Find'#output p').Text⊣Wait 200⊣'LinkText'Click ⍺)/⍺,' text not visible'}
:If 0=⍴msg←'Latin'Has'Neque'
:AndIf 0=⍴msg←'German'Has'Fu en leuchtete'
:AndIf 0=⍴msg←'English'Has'Continual'
:AndIf 0=⍴msg←'French'Has'Que ans avez'
:EndIf
﻿ msg←Test dummy;output
output←Find¨'bc1' 'bc2'
msg←'Barcode images did not have the expected size'/⍨~{(116 116)(174 147)≡output.Size.(Height Width)}Retry ⍬﻿ msg←Test dummy;comp;tooltip;sums;i;Nums
Nums←{⊃(//)⎕VFI b\⍵/⍨b←~⍵∊⎕UCS 13 10}
sums←0 0
:For i :In ¯1+⍳4
comp←Find'output_svg_FeatureMeasure_',⍕i
MoveToElement comp
tooltip←'ClassName'Find'tooltipDivoutput'
sums+←Nums tooltip.Text
:EndFor
msg←'wrong tooltip values'/⍨≠/sums
﻿ msg←Test dummy;comp;tooltip
comp←Find'output_svg_ComparativeMeasure_0'
MoveToElement comp
tooltip←'ClassName'Find'tooltipDivoutput'
msg←'Values not found'/⍨'Current : 8.9Target : 7.6'≢tooltip.Text~⎕UCS 13 10
﻿ msg←Test dummy;result;output;txt
⍝ Test /Examples/DC/ejButtonAdvanced
output←Find'output'
msg←'The output should have been empty to start with'
:If {0∊⍴output.Text}Retry ⍬
⍝ Try clicking the 2nd button - this should not do anything
Click'btn2'
msg←'There should not have been any output produced'
:AndIf {0∊⍴output.Text}Retry ⍬
⍝ Click the 1st button to enable the 2nd one
Click'btn1'
msg,←' on the 2nd click'
:AndIf 0∊⍴output.Text
⍝ The 2nd button should be enabled now
Click'btn2'
:AndIf 0∊⍴msg←'output'WaitFor'You pressed the'
⍝ Push again to get a new msg
Click'btn2'
:AndIf 0∊⍴msg←'output'WaitFor'2 times' 'Text did not change'
⍝ Click the 1st button to disable the 2nd one
Click'btn1'
msg←'Text was not removed'
:AndIf {0∊⍴output.Text}Retry ⍬
⍝ Try the 2nd button again, it should not work
Click'btn2'
msg←'Text should be empty'
:AndIf {0∊⍴output.Text}Retry ⍬
⍝ Looks OK
msg←''
:EndIf﻿ msg←Test dummy
Click'btnPushMe'
msg←'output' WaitFor 'Thanks!'﻿ msg←Test dummy;First
First←{('CssSelector'Find'g path:first-child').GetAttribute,⊂⍵}
⍝ Test for chart title
:If 0∊⍴msg←'mychart_svg_ChartTitle'WaitFor'Workspace Object Sizes' 'Chart title not found'
⍝ Test for correct first pie slice
:AndIf 0∊⍴msg←'First pie slice not found'⌿⍨'mychart_svg_Series0_Point0'≢First'id'
⍝ Test that the first slice disappears when legend icon is clicked
slices←('CssSelectors' Find 'g path').Count
Click'mychart_svg_LegendItemShape0'
msg←'First slice did not disappear'/⍨slices≠1+('CssSelectors' Find 'g path').Count
:EndIf
﻿ msg←Test dummy;message
message←Find'message'
:Trap 90 ⋄ Click'ejcb1'
:Else ⋄ msg←'Unable to click on checkbox' ⋄ →0
:EndTrap
:If {'check'≡message.Text}Retry ⍬ ⍝ Wait to see if it gets populated
Click'ejcb1'
:AndIf {'uncheck'≡message.Text}Retry ⍬ ⍝ Wait to see if it gets populated
msg←''
:Else
msg←'Check/UnCheck failed.'
:EndIf﻿ msg←Test dummy;canvas
canvas←'TagName'Find'canvas'
:If 0=⍴msg←'canvas not found'/⍨0≡canvas
:AndIf 0=⍴msg←'wrong role'/⍨'presentation'≢canvas.GetAttribute,⊂'role'
:EndIf﻿ msg←Test dummy;canvas
canvas←'TagName'Find'canvas'
:If 0=⍴msg←'canvas not found'/⍨0≡canvas
:AndIf 0=⍴msg←'wrong role'/⍨'presentation'≢canvas.GetAttribute,⊂'role'
:EndIf﻿ msg←Test dummy;picker;result;ok
picker←'ClassName'Find'e-arrow-sans-down'
picker.Click
picker.Click
result←Find'result'
ok←{'Selected from NormalCP:'≡23↑result.Text}Retry ⍬ ⍝ Wait (a bit) to see if it gets populated
msg←(~ok)/'Color selection did not work'
﻿ msg←Test dummy;dates;DateToIDN;idns;ok
DateToIDN←{2 ⎕NQ'.' 'datetoidn'⍵}
dates←(Find¨'in' 'out').GetAttribute⊂⊂'value'
idns←DateToIDN¨2⊃¨'/'∘⎕VFI¨dates
ok←7=-/⌽idns
msg←(~ok)/'Date time pickers not working'﻿ msg←Test dummy;expect;ok;dp
expect←,'ZI4,</>,ZI2,</>,ZI2'⎕FMT 1 3⍴⎕TS
dp←Find'dp'
ok←{expect≡dp.GetAttribute⊂'value'}Retry ⍬ ⍝ Wait (a bit) to see if it gets populated
msg←(~ok)/'Datepicker not rendered'﻿ msg←Test dummy;ts;in;out
ts←∊⍕¨100+1↓¯2↓⎕TS
ts[1 4 7 10]←'// :'
(in out)←(⍕¨1 ¯1+⊃⎕TS),¨⊂ts
'in'∘SendKeys¨End(Shift Home)(in,Tab,out,Enter)
:If 0∊⍴msg←'output'WaitFor'Going back in time?' 'Input validation failed'
'out'∘SendKeys¨Home(Control Shift Right)(Shift Left)(⍕2+⊃⎕TS)Enter
msg←'output'WaitFor'The difference in days is: 3'
:EndIf
﻿ msg←Test dummy;dtp
dtp←Find'dtp'
⍝ Will fail in 1:3600
msg←'Expected date not found'/⍨~{(⍎dtp.GetAttribute⊂'value')≡4↑⎕TS}Retry ⍬ ⍝ Wait (a bit) to see if it gets populated﻿ msg←Test dummy;TryClick
⍝ 'msg if not clickable' 'msg if clickable' TryClick 'elementid'
TryClick←{90::⊃⍺ ⋄ ⊃⌽⍺⊣Click ⍵}
:If 1 ⍝ For consistency, and to make it easy to insert more tests
⍝ Is the dialog open and modal so it blocks the banner?
:AndIf 0∊⍴msg←'' 'Dialog not modal'TryClick'banner'
⍝ Check dialog content
:AndIf 0∊⍴msg←'dialog'WaitFor'Please tell'
⍝ Display the terms and conditions
:AndIf 0∊⍴msg←'popup'WaitFor'This example'⊣Click'terms'
⍝ Ensure that the original dialog does not block the popup
:AndIf 0∊⍴msg←'Parent blocks child' ''TryClick'popup_title'
⍝ Close the original dialog, and check mode
:AndIf 0∊⍴msg←'Failed to unblock' ''TryClick'banner'⊣⎕DL 0.2⊣Click'dialog_closebutton'
⍝ Re-invoke the dialog and check that it blocks the orphan popup
:AndIf 0∊⍴msg←'' 'Dialog not modal'TryClick'popup_closebutton'⊣Click'show'⊣⎕DL 0.2
:EndIf
﻿ msg←Test dummy;result;output;txt
⍝ The dialog should not be visible
:If 0∊⍴msg←'dialog'WaitFor''
⍝ Clicking the button should open it
Click'show'
:AndIf 0∊⍴msg←'dialog'WaitFor'This is'
⍝ Closing the window should work too
Click'dialog_closebutton'
msg←'dialog'WaitFor''
:EndIf
﻿ msg←Test dummy;canvases
canvases←⌷'TagNames'Find'canvas'
:If 0=⍴msg←'canvases not found'/⍨5≢≢canvases
:AndIf 0=⍴msg←'canvas with wrong role'/⍨∨/'presentation'∘≢¨canvases.GetAttribute 5/⊂⊂'role'
:EndIf﻿ msg←Test dummy;canvas
canvas←'TagName'Find'canvas'
:If 0=⍴msg←'canvas not found'/⍨0≡canvas
:AndIf 0=⍴msg←'wrong role'/⍨'presentation'≢canvas.GetAttribute,⊂'role'
:EndIf﻿ msg←Test dummy;text;pages
Click'onSave'
:If {21=('CssSelectors'Find'#result td').Count}Retry ⍬
text←('CssSelectors'Find'#result td')[0 3 4 5].Text
msg←(text≢'SAVE:' 'Name' 'Type' 'Tastiness')/'Save button not working'
:Else ⋄ msg←'Save button did not work.'
:EndIf
﻿ msg←Test dummy;text;pages
ExecuteScript'scrollBy(0, 250);'
('CssSelector'Find'.e-lastpage').Click             ⍝ Go to the last page
text←' ',('CssSelector'Find'.e-parentmsgbar').Text ⍝ Text at bottom right
pages←⊃text←1↓¨(text=' ')⊂text
msg←((pages'of'pages)≢3↑text)/'Navigate to last page failed'
﻿ msg←Test dummy;canvas
canvas←'TagName'Find'canvas'
:If 0=⍴msg←'canvas not found'/⍨0≡canvas
:AndIf 0=⍴msg←'wrong role'/⍨'presentation'≢canvas.GetAttribute,⊂'role'
:EndIf﻿ msg←Test dummy;canvas
canvas←'TagName'Find'canvas'
:If 0=⍴msg←'canvas not found'/⍨0≡canvas
:AndIf 0=⍴msg←'wrong role'/⍨'presentation'≢canvas.GetAttribute,⊂'role'
:EndIf﻿ msg←Test dummy;Has
Has←{(~∨/⍵⍷∊(⌷'CssSelectors'Find'#tab1 div').Text⊣Wait 200⊣'LinkText'Click ⍺)/⍺,' text not visible'}
:If 0=⍴msg←'Tab One'Has'Lorem ipsum'
:AndIf 0=⍴msg←'Another'Has'Ut sed'
:AndIf 0=⍴msg←'Fourth Tab'Has'Vivamus'
:AndIf 0=⍴msg←'Third Tab'Has'Donec'
:EndIf
﻿ msg←Test dummy;tabs;i
tabs←⌷'CssSelectors'Find'#tab1 li'
:For i :In ⍳⍴tabs
tabs[i].Click
:If ~(Find'tab1_section_',⍕i).Displayed
msg←'Tab ',(⍕i),' did not become visible' ⋄ →0
:EndIf
:EndFor
msg←''﻿ msg←Test dummy;tags
tags←⌷'CssSelectors'Find'#tc1 li'
msg←(5>9+.=#.⎕NC↑tags.Text)/'Tag cloud did not render'﻿ msg←Test dummy;button
button←'CssSelector'Find'.e-btn'
⍝ Check if button toggles on
Click button
:If 0=⍴msg←button WaitFor'That was a BOLD move!' 'First toggle did not happen'
⍝ Check if button toggles off
Click button
msg←button WaitFor'Toggle me if you dare...' 'Second toggle did not happen'
:EndIf﻿ msg←Test dummy
⍝ Test that we can add a node
Click'Add'
'LinkText'Click'Added_1' ⍝ Select the new node
:If 0=⍴msg←'output'WaitFor'Select on unknown' 'Add node failed'
⍝ Test that we can check a node
'tv'SendKeys Space   ⍝ Turn checkbox on
:AndIf 0=⍴msg←'output'WaitFor'Check on unknown' 'Check node failed'
⍝ Test for proper model
Click'Del' ⍝ delete the node server side
'tv'SendKeys Delete ⍝ make the client model match
Click'Mod' ⍝ ... and display the model
:AndIf 0=⍴msg←'Display Model button did not work, or models do not agree.'/⍨~{33=('CssSelectors'Find'#tvModel td').Count}Retry ⍬
msg←'tvModel'WaitFor'Server≡Browser' 'Server/Browser model mismatch.'
:EndIf
﻿ msg←Test dummy;visible
('CssSelectors'Find'.e-plus')[0].Click ⍝ Open first node
visible←{⊃¨5↓¨(⌷Selenium.BROWSER.FindElementsByCssSelector⊂'#tv li').Text}
{'123  6 8'≡visible ⍬}Retry ⍬
msg←('123  6 8'≢visible ⍬)/'Tree expansion did not work as expected'﻿ msg←Test dummy;q;t;MatchText;sampleText
CR2HTML←{∊'<br />'@((⎕UCS 13)∘=)⍵}
MatchText←{q←Find'SI',⍵ ⋄ t←q.Text~⎕UCS 10 ⋄ ⍺≡t←1↓(1=+\t='"')/t:'' ⋄ 'Field "',⍵,'" did not contain expected value "',(CR2HTML ⍺),'" but "',(CR2HTML t),'"'}    ⍝ return the text that was output after form submission
sampleText←'This sample text shows umlauts äöüÄÖÜ',Selenium.Keys.Enter,'as well as APL-symbols: ⌸⍣⍥⍤⍨←⍸⍴'
ClearInput'user' ⋄ 'user'SendKeys'morten'
ClearInput'text' ⋄ 'text'SendKeys sampleText
ClearInput'number' ⋄ 'number'SendKeys'4243'
q←'TagName'Find'form'
q.Submit
msg←'morten'MatchText'user'
sampleText←(⎕UCS 13)@((Selenium.Keys.Enter∘=))sampleText
msg,←sampleText MatchText'text'
msg,←'4243'MatchText'number'
q←Find'SInumber'
t←{2⊃⎕VFI(⍵⍳':')↓⍵}q.Text
msg,←(t≠4243)/'0 Get''number'' did not return expected value 4243, but ',⍕t
r←MS3_init
⎕se.SALT.Load'APLProcess'
⎕se.SALT.Load ##.TESTSOURCE,'../../Selenium'
myapl←⎕NEW #.APLProcess((##.TESTSOURCE,'../miserver')(''))
⍝⍝⍝::run "c:\batch\currapl.btm   c:\git\dui `c:\git\dui\dui.dws AppRoot=./MS3/ MSPort=8080 NoLink=0`"﻿ r←MS3_init_8080 dummy
⍝ vars are global by design here ;)
⍝ nneds the following repos as siblings: GhostRider,
:if ''≡r←MS3_init_common  ''
config←'Chrome86'  ⍝ name the config we want to run against
:endif﻿ r←MS3_init_common params;cmd
⍝ vars are global by design here ;)
⍝ needs the following repos as siblings of the paren't parent (ie /Git/DUI, /Git/GhostRider) : GhostRider
r←''
grdui←1  ⍝ during development: run MiServer through GhostRider (the goal, but currentty not working),
⍝  1=GhostRider
⍝  0=use APLProcess to run DUI and connect to it with GhostRider to adjust Config-Settings,
⍝ ¯1=don't use GhostRider (don't fiddle with Config)
⍝ we need GhostRider for some fine-tuning of the config of the DUI-Server - but it's not too critical if we can't do that,...⌈
MSdir←1⊃⎕NPARTS ¯1↓1⊃1 ⎕NPARTS ##.TESTSOURCE
⎕SE.SALT.Load'APLProcess'
⎕SE.SALT.Load MSdir,'QA/SeleniumTests.dyalog -target=#'
⎕SE.SALT.Load MSdir,'../Selenium/Selenium.dyalog -target=#.SeleniumTests'
:If grdui≥0 ⋄ ⎕SE.SALT.Load(1⊃⎕NPARTS ¯1↓MSdir),'/GhostRider/GhostRider.dyalog -target=#' ⋄ :EndIf
:If 1<≢##.args.Arguments ⋄ TestCase←2⊃##.args.Arguments ⋄ :Else ⋄ TestCase←'' ⋄ :EndIf
⍝ Start a separate APLProcess that serves the pages
:If grdui=1
GR←⎕NEW #.GhostRider('RIDE_SPAWNED=0 MiServer=',MSdir,'MS3/ ',params)  ⍝ RIDE_SPAWNED=0 should make the session visible - that has no effect on MB's machine.
GR.APL'⎕load''',MSdir,'miserver',''''
GR.(INFO TRACE)←##.verbose×~##.quiet
GR.DEBUG←##.halt
:ElseIf grdui=0
myapl←⎕NEW APLProcess((MSdir,'miserver')('MiServer=',MSdir,'MS3/ ',params)0 'serve:*:4052')
:Else
myapl←⎕NEW APLProcess((MSdir,'miserver')('MiServer=',MSdir,'MS3/ ',params))
:EndIf
⍝ hmmm......???
⍝ 'DUI'#.⎕NS''
⍝#.DUI.AppRoot←MSdir,'/MS3/'
⍝#.DUI.WC2Root←MSdir
⍝{}⎕SE.SALT.Load MSdir,'DUI.dyalog -target=#'
⍝#.Boot.ms.Config.Port←8080
⍝{}#.DUI.Initialize
{}⎕SE.SALT.Load MSdir,'Core/Boot.dyalog -target=#'
{}⎕SE.SALT.Load MSdir,'Utils/Files.dyalog -target=#'
{}⎕SE.SALT.Load MSdir,'Utils/dates.dyalog -target=#'
{}⎕SE.SALT.Load MSdir,'Utils/Strings.dyalog -target=#'
{}⎕SE.SALT.Load MSdir,'Utils/xml.dyalog -target=#'
⍝ Connect to the MiServer-Instance
:If grdui>¯1
:If grdui=0 ⋄ GR←⎕NEW #.GhostRider 4052 ⋄ :End
⍝ override settings with appropriate values (according to ]DTest-Flags) in the local DUI (used for testing) as well as the server
cmd←'#.Boot.ms.Config.LogMessageLevel←',⍕(0 1 ¯1)[(2+##.verbose)*##.quiet=0]   ⍝ 0-none -1-all 1-error/important 2-warning 4-informational 8-Transactional
{}GR.APL cmd
cmd←'#.Boot.ms.Config.(Production TrapErrors)←','01'[2-##.halt]
{}GR.APL cmd
:EndIf
﻿ r←MS3_teardown dummy
r←''
:If grdui=1
GR.APL'⍝ now shutting down this instance!'
⎕ex'GR'   ⍝ this should trigger the destructor which should terminate the remote session - but it doesn't always work...
:Else ⋄ {}myapl.Kill
:EndIf
﻿ r←MS3_test dummy
r←##.halt #.Test(MSdir,'MS3/')TestCase config
﻿:Namespace QA
⍝ MiServer 3 QA suite
∇ Run
RenderHTML
RenderPages
∇
∇ result←RenderHTML;nss;ns;class;c;name;res;f;root
⍝ make sure all HTML-generating classes render
nss←#.(_html _DC _JQ _SF) ⍝ add _JQM when it's ready
root←#.Boot.MSRoot
result←0 7⍴'' 0 0 0 0 0 0  ⍝ [1] name [2] DocBase? [3] DocDyalog? [3] ApiLevel [4] Renders [5] id≠constructor[1]
:For ns :In nss
:For class :In (ns.⎕NL ¯9)~(⊂'SALT_Data'),'_'ns.⎕NL ¯9
res←0 0 0 0 1 ''
name←⍕c←ns⍎class
res[1]←0≠c.⎕NC⊂'DocBase'
:If res[2]←0≠f←c.⎕NC⊂'DocDyalog'
res[2]×←¯1*#.Files.Exists root,c.DocDyalog
:EndIf
res[3]←{6::0 ⋄ ⍵.ApiLevel}c
res[4]←{0::0 ⋄ 1⊣(⎕NEW ⍵).Render}c
:If #._html≢ns
res[5]←{0::1 ⋄ 'xyz123'≡(⎕NEW ⍵'xyz123').id}c
:EndIf
:If ns∊#._SF #._JQ
res[6]←{6::0 ⋄ 1⊣⍵.IntEvt}c
:EndIf
result⍪←(⊂name),res
:EndFor
:EndFor
result←'Element/Widget' 'DocBase?' 'DocDyalog?' 'ApiLevel' 'Renders?' 'id≠args[1]?' 'IntEvt'⍪result
∇
∇ r←RenderPages;class
r←0 2⍴'' 0
r⍪←{⍵(_Test_Page ⍵)}#.Boot.MSRoot,'QA/TestMiPageTemplate'
r⍪←{⍵(_Test_Page ⍵)}#.Boot.MSRoot,'QA/TestMiPageSample'
∇
∇ r←_Test_Page page;class;z
r←'Passed'
:Trap 0
class←⎕SE.SALT.Load page
z←⎕NEW class
z._Request←⎕NEW #.HTTPRequest('' '')
z._Request.Server←#.Boot.ms
{}⎕XML z.Wrap
:Else
r←∊⎕DM
:EndTrap
∇
∇ ParseAttrQA;Try;disp
'disp'⎕CY'dfns'
Try←{disp ⍵(#.HtmlElement.ParseAttr ⍵)}
Try'foo'
Try'foo' 'checked'
Try'foo checked'
Try'#foo' 'checked'
Try'#foo checked'
Try'foo' '.goo' 'checked'
Try'foo goo checked'
Try'foo'('goo' 'checked')
Try'foo' 'goo=moo' 'checked'
Try'#foo' 'goo="moo boo"' 'loo'
∇
:endnamespace
﻿:Namespace SeleniumTests
⍝ needs Selenium/ in a folder that is on the same level as the DUI- or MiServer-Folder (ie /Git/MiServer & /Git/Selenium)
∇ x←eis x
⍝ Enclose if simple
:If (≡x)∊0 1 ⋄ x←,⊂,x ⋄ :EndIf
∇
∇ r←lopFirst url
⍝ remove first segment of URL
r←{⍵/⍨(1+'/'=1↑⍵)≤+\'/'=⍵}url
∇
∇ r←stop Run1Test page;name;ref;Test;pg
⍝ eg MS3Test '/QA/DC/InputGridSimple'
:Trap 11
Selenium.GoTo SITE,lopFirst page ⍝ Drop the "QA"
:Else
r←'Error while opening "',(lopFirst page),'": ',⎕DM
→(stop=0)/0
∘∘∘
:EndTrap
:If 9=⎕NC'#.DUI' ⋄ pg←#.DUI.AppRoot,page ⋄ :Else ⋄ pg←AppRoot,page ⋄ :EndIf
:If 'Test'≡name←⎕SE.SALT.Load pg
:Trap stop×9999
'Test'⎕STOP⍨1/⍨2=stop ⍝ stop on line 1 if stop=2
:If stop⌊0≠⍴r←Test ⍬
⎕←'test for ',page,' failed:' ⋄ ⎕←r ⋄ ⎕←'Rerun:' ⋄ '      Test ⍬'
∘∘∘
:EndIf
:Else
r←'Trapped error: ',,⍕⎕DMX.EN
:EndTrap
:Else ⋄ r←pg,' does not define a function called Test'
:EndIf
∇
∇ r←{ext}FindAllFiles root;folders;ext
:If 0=⎕NC'ext'
:If 0=⎕NC'Config.DefaultExtension' ⋄ ext←'.dyalog'
:Else ⋄ ext←Config.DefaultExtension
:EndIf
:EndIf
root,←'/'/⍨~'/\'∊⍨¯1↑root ⍝ append trailing / if missing
r←root∘,¨(('*',ext)#.Files.List root)[;1]
:If 0≠⍴folders←{(('.'≠⊃¨⍵[;1])∧⍵[;4])/⍵[;1]}#.Files.List root
r←r,⊃,/ext∘FindAllFiles¨root∘,¨folders
:EndIf
∇
∇ r←stop_port Test site;count;ctl;examples;f;fail;nodot;start;t;time;z;i;START;COUNT;FAIL;Config;selpath;files;n;ext;filter;⎕PATH;keynames;maxlen;⎕USING;stopOnError;stop;dui;appr;cfg
⍝ stop: 0 (default) ignore but report errors; 1 stop on error; 2 stop before every test
⍝⍵: site filter config
⍝                config refers to a named entry in Selenium/settings.json
⍝ ie. Test'./MS3' '' 'HTMLRenderer'
stop←⊃stop_port
r←''
dui←9=⎕NC'#.DUI'
(site filter config)←3↑(eis site),'' '' ''
:If dui
:Else
⍝:If 0=⍴AppRoot←#.Load site
:If 0=⍴AppRoot←∊1⎕nparts site
⎕←'Test abandoned' ⋄ →0
:EndIf
:EndIf
⍝ selpath←({∊'/',⍨¨¯1↓'/\'#.Utils.penclose ⍵}#.Boot.MSRoot),'Selenium/'
selpath←(1⊃⎕NPARTS ¯1↓1⊃⎕NPARTS ¯1↓1⊃⎕NPARTS SALT_Data.SourceFile),'Selenium/'
:If 0=⎕NC'Selenium'
:Trap 0 ⋄ ⎕SE.SALT.Load selpath,'Selenium'
:Else
⎕←'Selenium library not found at: ',selpath
→0⍴⍨0∊⍴selpath←{⍞↓⍨⍴⍞←⍵,': '}'Selenium path'
:Trap 0 ⋄ ⎕SE.SALT.Load selpath,'Selenium'
:Else ⋄ ⎕←'Unable to load Selenium' ⋄ →0
:EndTrap
:EndTrap
:EndIf
⎕PATH,←' Selenium'
Selenium.DLLPATH←selpath  ⍝ backward compatibility
Selenium.ApplySettings config
Selenium.QUIETMODE←{6::(,1)≡,2⊃⎕VFI ⍵ ⋄ Selenium.QUIETMODE ⋄ }2 ⎕NQ'.' 'GetEnvironment' 'QUIETMODE'  ⍝ for automated tests! ;)
:If dui
:If 0≠⊃z←#.DUI.Initialize
⎕←'Error initializing!' ⋄ ⎕←z
∘∘∘
:EndIf
appr←#.DUI.AppRoot
cfg←#.Boot.ms.Config
:Else
Config←#.Boot.ConfigureServer AppRoot
ext←Config.DefaultExtension
Config.DefaultExtension←'.dyalog' ⍝ We are searching for code
appr←AppRoot
cfg←Config
:EndIf
n←⍴files←(⍴appr)↓¨{∊2↑⎕nparts ⍵}¨FindAllFiles appr,'QA'
⍝ // Add code to compare this to the mipages found in the whole app
:If 0≠≢filter
files←(filter ⎕S'%')files
:If ~Selenium.QUIETMODE ⋄ ⎕←'Selected: ',(⍕≢files),' of ',(⍕n),' tests.'⋄:endif
:EndIf
n←⍴files
⍝SITE←'http://127.0.0.1:',⍕⊃1↓stop_port,Config.Port
⍝SITE←'http://',(2 ⎕NQ'.' 'TCPGetHostID'),':',(⍕{6::⍵.MSPort ⋄ ⍵.Port}#.Boot.ms.Config)
:if 2=Selenium.SETTINGS.⎕nc'SITEROOT'
SITE←Selenium.SETTINGS.SITEROOT
:else
SITE←'http://',(2 ⎕NQ'.' 'TCPGetHostID'),':',⍕⊃1↓stop_port,⍎⍕{6::⍵.MSPort ⋄ ⍵.Port}cfg
:endif
:if ~Selenium.QUIETMODE
⎕←'Site=',SITE
:endif
⍝⍝ Un-comment to play music while testing:
⍝      :If site filter≡'MS3' ''
⍝          ⎕CMD('"\Program Files (x86)\Windows Media Player\wmplayer.exe" "',AppRoot,'\Examples\Data\tellintro.mp3"')''
⍝      :EndIf
Selenium.InitBrowser''
⍝ Localize non-alphanumeric key names for easy access
keynames←⍕#.SeleniumTests.Selenium.Keys.⎕NL ¯2
⍎keynames,'←∊#.SeleniumTests.Selenium.Keys.(',keynames,')'
START←⎕AI[3] ⋄ COUNT←0 ⋄ FAIL←0
maxlen←¯2+⌈/⊃∘⍴¨files
:For i :In ⍳n
COUNT+←1
:If 0=⍴t←stop Run1Test z←i⊃files
:If ~Selenium.QUIETMODE ⋄ ⎕←z,' *** PASSED ***' ⋄ :EndIf
:Else
FAIL+←1
r,←⊂z,': ',t
:If ~Selenium.QUIETMODE  ⍝ only show msg if not running with quietmode
⎕←z,' *** FAILED *** #',(⍕i),' of ',(⍕n),': ',z,': ',t
:endif
:EndIf
:EndFor
:If ~Selenium.QUIETMODE ⋄ :OrIf 0<FAIL
⎕←'Total of ',(⍕COUNT),' samples tested in ',(∊(⍕¨24 60⊤⌊0.5+(⎕AI[3]-START)÷1000),¨'ms'),': ',(⍕FAIL),' failed.'
:EndIf
Selenium.BROWSER.Quit
∇
:EndNamespace
﻿:Namespace HTMLInput
(⎕IO ⎕ML)←1
⎕FX 'r←CRLF' 'r←⎕UCS 13 10' ⍝ So it will be :Included
enlist←{⎕ML←1 ⋄ ∊⍵} ⍝ APL2 enlist
eis←{(,∘⊂)⍣((326∊⎕DR ⍵)<2>|≡⍵),⍵} ⍝ Enclose if simple
ine←{0∊⍴⍺:'' ⋄ ⍵} ⍝ if not empty
ischar←{0 2∊⍨10|⎕DR⍵}
quote←{0∊⍴⍵:'' ⋄ '"',({w←⍵⋄((w='"')/w)←⊂'\"'⋄enlist w}⍵),'"'}
iotaz←{(⍴⍺){⍵×⍺≥⍵}⍺⍳⍵}
innerhtml←{⊃↓/(⍵ iotaz'>')(-(⌽⍵)iotaz'<') ⍵}
dtlb←{⍵{((∨\⍵)∧⌽∨\⌽⍵)/⍺}' '≠⍵}
∇ r←atts Enclose innerhtml;i
⍝ Put an HTML tag around some HTML
:If 1<|≡innerhtml ⋄ innerhtml←CRLF,enlist innerhtml,¨⊂CRLF ⋄ :EndIf
:If 0∊⍴atts
r←innerhtml
:Else
i←¯1+(atts←,atts)⍳' '
r←'<',atts,'>',innerhtml,'</',(i↑atts),'>',CRLF
:EndIf
∇
∇ r←{nl}Tag tag
⍝ Make a  self-closing tag
nl←{6::1 ⋄ nl}⍬
r←'<',tag,' />',nl/CRLF
∇
FormatAttrs←{
⍝ format name/value pairs as tag attributes
⍝  ⍵ - name/value pairs, valid forms:
⍝  'name="value"'
⍝  [n,2⍴] 'name1' 'value1' ['name2' 'value2'...]
⍝ ('name1' 'value1') [('name2' 'value2')]
0∊⍴⍵:''
{
enlist{(×⍴⍺)/' ',⍺,(×⍴⍵)/'=',quote ⍵}/,∘⍕¨⊃⍵
}_pifn¨,2 _box _pifn{
1=|≡⍵:⍵
2=|≡⍵:{1=⍴⍴⍵:(⌽2,0.5×⍴⍵)⍴⍵ ⋄ ⍵}⍵
↑⍵}⍵
}
∇ r←tag GetAttr attr;attrs
r←''
:Trap 6
→0⍴⍨0∊⍴tag←⎕XML tag
:EndTrap
attrs←(⊂1 4)⊃tag
r←(attrs[;1]⍳⊂attr)⊃attrs[;2],⊂''
∇
Styles←{
⍝ format name/value pairs as CSS style attributes
⍝  ⍵ - name/value pairs, valid forms:
⍝  'name: value'
⍝  [n,2⍴] 'name1' 'value1' ['name2' 'value2'...]
⍝ ('name1' 'value1') [('name2' 'value2')]
⍺←''
0∊⍴⍵:''
(0∊⍴⍺)↓⍺,' ',{'{',({';'=¯1↑⍵:⍵ ⋄ ⍵,';'}⍵),' }'}{
enlist{(×⍴⍺)/' ',⍺,(×⍴⍵)/': ',⍵,';'}/,∘⍕¨⊃⍵
}_pifn¨,2 _box _pifn{
1=|≡⍵:⍵
2=|≡⍵:{1=⍴⍴⍵:(⌽2,0.5×⍴⍵)⍴⍵ ⋄ ⍵}⍵
↑⍵}⍵
}
_box←{⍺←1 ⋄ (⊂⍣(⍺=|≡⍵))⍵}
_pifn←{({⍵''}⍣(1=|≡⍵))⍵}
∇ r←ScriptFollows;lines;pgm;from
⍝ Treat following commented lines in caller as a script, lines beginning with ⍝⍝ are stripped out
:If 0∊⍴lines←(from←⎕IO⊃⎕RSI).⎕NR pgm←2⊃⎕SI
lines←↓from.(180⌶)pgm
:EndIf
r←2↓∊CRLF∘,¨{⍵/⍨'⍝'≠⊃¨⍵}{1↓¨⍵/⍨∧\'⍝'=⊃¨⍵}dtlb¨(1+2⊃⎕LC)↓lines
∇
∇ html←TextToHTML html;mask;CR
⍝ Add/insert <br/>, replaces CR with <br/>,CR
:If ~0∊⍴html
:If ∨/mask←html=CR←''⍴CRLF
(mask/html)←⊂'<br/>',CR
html←enlist html
:EndIf
html,←(~∨/¯2↑mask)/'<br/>',CRLF
:EndIf
∇
∇ html←{fontsize}APLToHTML APL
⍝ returns APL code formatted for HTML
fontsize←{6::'' ⋄ ';font-size:',⍎⍵}'fontsize'
:If 1<|≡APL ⋄ APL←enlist,∘CRLF¨APL ⋄ :EndIf
:Trap 0
html←3↓¯4↓'whitespace' 'preserve'⎕XML 1 3⍴0 'x'APL
:Else
html←APL
:EndTrap
html←('pre style="font-family:APL385 Unicode',fontsize,'"')Enclose'code'Enclose CRLF,⍨html
∇
∇ html←APLToHTMLColor APL;types;colors;class;codes;apply;lines;head;tail;c;ent
⍝ returns APL code formatted for HTML with syntax coloring
:Trap 0
colors←⍬
colors,←⊂'i200comment'(1 26 63)
colors,←⊂'i200char'(4 29)
colors,←⊂'i200num'(5 30)
colors,←⊂'i200local'(10 32 35 53)
colors,←⊂'i200global'(7 52 55)
colors,←⊂'i200primitive'(19 44 146 To 153 214 To 221)
colors,←⊂'i200idiom'(23 48)
colors,←⊂'i200control'(58 155 To 179 181 To 213 222 To 248)
colors,←⊂'i200space'(8 9 33 34)
colors,←⊂'i200quad'(12 To 15 37 To 40)
html←({(+/∨\' '≠⌽⍵)↑¨↓⍵}⍣(1≥|≡APL))APL ⍝ Make VTV if matrix
lines←∊1↑¨⍨≢¨html
types←0,0,⍨∊200⌶html                        ⍝ 200⌶ is color coding
:For c ent :InEach '&<'('&amp;' '&lt;')
((c⍷∊html)/∊html)←⊂⊂ent
:EndFor
html←' ',' ',⍨⊃,/html
:For class codes :In colors
apply←1 0⍷types∊codes
(apply/html)←(apply/html),¨⊂'</span>'
:EndFor
:For class codes :In colors
apply←0 1⍷types∊codes
(apply/html)←(apply/html),¨⊂'<span class="',class,'">'
:EndFor
head←1↓⊃html ⋄ tail←¯1↓⊃⌽html
html←lines⊂1↓¯1↓html
(⊃html),⍨←head ⋄ (⊃⌽html),←tail
html←∊¨html
html,⍨¨←,∘'</span>'¨↓↑('<span class="i200line">['∘,,∘']')¨⍕¨¯1+⍳⍴html ⍝ Prepend line numbers
html←'pre'Enclose'code'Enclose html
:Else
html←APLToHTML APL
:EndTrap
∇
To←{(¯1↓⍺),((¯1+⊃⌽⍺)+⍳1+(⊃⍵)-(⊃⌽⍺)),1↓⍵}
∇ html←{id}Anchor pars;href;title;target;other;content
⍝ Builds an anchor <a> tag
⍝ pars: content {href} {title} {target} {other_attrs}
:If 0=⎕NC'id' ⋄ id←'' ⋄ :EndIf
pars←eis pars
content href title target other←5↑pars,(⍴pars)↓'' '' '' '' ''
html←('a',(FormatAttrs'id' 'href' 'title' 'target'{(⍵ ine ⍺)⍵}¨id href title target),FormatAttrs other)Enclose content
∇
∇ html←{n}BRA html
⍝ (BReak After) Add n <br/>'s after html
:If 0=⎕NC'n' ⋄ n←1 ⋄ :EndIf
html,←n{(⍺×⍴⍵)⍴⍵}'<br/>'
∇
∇ html←{n}BR html
⍝ (BReak) Add n <br/>'s before html
:If 0=⎕NC'n' ⋄ n←1 ⋄ :EndIf
html←(n{(⍺×⍴⍵)⍴⍵}'<br/>'),html
∇
∇ html←{n}SP html
⍝ (SPace) Add n non-breaking spaces &nbsp; before html
:If 0=⎕NC'n' ⋄ n←1 ⋄ :EndIf
html←(n{(⍺×⍴⍵)⍴⍵}'&nbsp;'),html
∇
∇ html←{n}SPA html
⍝ (SPace) Add n non-breaking spaces &nbsp; after html
:If 0=⎕NC'n' ⋄ n←1 ⋄ :EndIf
html,←n{(⍺×⍴⍵)⍴⍵}'&nbsp;'
∇
∇ r←{src}JS script
⍝ Javascript
⍝ script: javascript script if no src or filename if src=1
:If 0≠⎕NC'src' ⋄ r←('script src=',quote src)Enclose''
:Else ⋄ r←'script'Enclose script
:EndIf
∇
∇ r←{name}DropDown pars;values;display;gv;mask;n
⍝ par - items selected_value(s) attributes sort
⍝ if items is 2 column matrix, [;1] is values, [;2] is display
:If 0=⎕NC'name' ⋄ name←'' ⋄ :EndIf
:If 2=⍴⍴pars ⋄ pars←,⊂pars ⋄ :EndIf
pars←pars,(⍴pars)↓('Item1' 'Item2')'Item1' '' 0
:If ~ischar 1⊃pars ⋄ pars[1]←⊂⍕¨1⊃pars ⋄ :EndIf
:If 1=⍴⍴1⊃pars ⋄ values display←pars[1]
:Else ⋄ values display←↓[1]1⊃pars
:EndIf
mask←values∊⍕¨eis 2⊃pars
:If 4⊃pars ⋄ gv←⍒mask ⋄ values←values[gv] ⋄ display←display[gv] ⋄ mask←mask[gv] ⋄ :EndIf ⍝ Sort selected items first
r←'<select ',(3⊃pars),(name ine' id=',n,' name=',n←quote name),'>',CRLF
r,←enlist(mask{'<option value="',(⍕⍵),'"',(⍺/' selected="selected"'),'>'}¨values),¨display,¨⊂'</option>',CRLF
r,←'</select>',CRLF
∇
∇ r←{atts}(method Form)innerhtml
:If 9=⎕NC'atts' ⋄ atts←'action="',atts.Page,'"' ⍝ MildPage calling
:ElseIf 0=⎕NC'atts' ⋄ atts←'' ⋄ :EndIf
atts,←' method="',method,'"'
atts,←('post'≡#.Strings.lc method)/' enctype="multipart/form-data"'
r←('form ',atts)Enclose innerhtml
∇
∇ r←lab Label tag;id
id←tag GetAttr'id'
r←tag,⍨('label',id ine' for="',id,'"')Enclose lab
∇
∇ r←{name}Edit pars;att;size;val
⍝ pars: [value] [size] [attributes]
:If 0=⎕NC'name' ⋄ name←''
:Else ⋄ name←enlist(,∘('="',name,'"'))¨' id' ' name'
:EndIf
pars←,eis pars
val size att←3↑pars,(⍴pars)↓''⍬''
r←Tag'input ',att,((~0∊⍴size)/' size="',(⍕size),'"'),' type="text" value="',(⍕val),'"',name
∇
∇ r←{name}Submit pars
⍝ pars: value [attributes]
:If 0=⎕NC'name' ⋄ name←''
:Else ⋄ name←enlist(,∘('="',name,'"'))¨' id' ' name'
:EndIf
pars←,eis pars
pars←pars,(⍴pars)↓'Submit' ''
r←Tag'input type="submit" ',(2⊃pars),' value="',(1⊃pars),'"',name
∇
∇ r←{name}Button pars
⍝ pars: value [attributes]
:If 0=⎕NC'name' ⋄ name←''
:Else ⋄ name←enlist(,∘('="',name,'"'))¨' id' ' name'
:EndIf
pars←,eis pars
pars←pars,(⍴pars)↓'Button' ''
r←Tag'input type="button" ',(2⊃pars),' value="',(1⊃pars),'"',name
∇
∇ r←{name}File pars
⍝ pars: [value [size [attributes]]
:If 0=⎕NC'name' ⋄ name←''
:Else ⋄ name←enlist(,∘('="',name,'"'))¨' id' ' name'
:EndIf
pars←,eis pars
pars←pars,(⍴pars)↓''⍬''
r←Tag'input ',(3⊃pars),' type="file" size="',(⍕2⊃pars),'" value="',(1⊃pars),'"',name
∇
∇ r←{name}Hidden pars
⍝ pars: value [attributes]
:If 0=⎕NC'name' ⋄ name←''
:Else ⋄ name←enlist(,∘('="',name,'"'))¨' id' ' name'
:EndIf
pars←,eis pars
pars←pars,(⍴pars)↓'' ''
r←Tag'input ',(2⊃pars),' type="hidden" value="',(1⊃pars),'"',name
∇
∇ r←{name}Password pars;att;size;val
⍝ pars: [value] [size] [attributes]
:If 0=⎕NC'name' ⋄ name←''
:Else ⋄ name←enlist(,∘('="',name,'"'))¨' id' ' name'
:EndIf
val size att←3↑pars,(⍴pars)↓''⍬''
r←Tag'input ',att,((~0∊⍴size)/' size="',(⍕size),'"'),' type="password" value="',val,'"',name
∇
∇ r←{name}CheckBox pars
⍝ pars: checked [attributes]
:If 0=⎕NC'name' ⋄ name←''
:Else ⋄ name←enlist(,∘('="',name,'"'))¨' id' ' name'
:EndIf
pars←eis pars
pars←pars,(⍴pars)↓0 ''
r←Tag'input ',(2⊃pars),' type="checkbox"',name,(0≠1⊃pars)/' checked="checked"'
∇
∇ r←{name}CheckBoxGroup pars;choices;sel
⍝ pars: values/texts
name←{6::'' ⋄ enlist(,∘('="',name,'"'))¨' id' ' name'}⍬
:If 2=|≡pars ⋄ choices←pars ⋄ sel←⍬
:Else ⋄ (choices sel)←pars
:EndIf
:If 1=⍴⍴choices ⋄ choices←choices,[1.1]choices ⋄ :EndIf
sel←(⊃⍴choices)↑sel
r←enlist name∘{BRA(0 Tag'input type="checkbox"',⍺,' value="',(1⊃⍵),'"',(1=3⊃⍵)/' checked="checked"'),(2⊃⍵)}¨↓choices,sel
∇
∇ r←{name}RadioButton pars
⍝ pars: checked [value [attributes]]
:If 0=⎕NC'name' ⋄ name←''
:Else ⋄ name←enlist(,∘('="',name,'"'))¨' id' ' name'
:EndIf
pars←eis pars
pars←pars,(⍴,pars)↓0 name''
r←Tag'input ',(3⊃pars),' type="radio" value="',(2⊃pars),'"',name,(0≠1⊃pars)/' checked="checked"'
∇
∇ r←{name}RadioButtonGroup pars;choices;sel
⍝ pars: values/texts [sel]
name←{6::'' ⋄ enlist(,∘('="',name,'"'))¨' id' ' name'}⍬
:If 2=|≡pars ⋄ choices←pars ⋄ sel←⍬
:Else ⋄ (choices sel)←pars
:EndIf
:If 1=⍴⍴choices ⋄ choices←choices,[1.1]choices ⋄ :EndIf
sel←(⊃⍴choices)↑sel
r←enlist name∘{BRA(0 Tag'input type="radio"',⍺,' value="',(1⊃⍵),'"',(1=3⊃⍵)/' checked="checked"'),(2⊃⍵)}¨↓choices,sel
∇
∇ r←{id}Table pars;x;data;atts;tdc;tda;thc;tha;hdrrows;z;mask;cellids;n;rowids;rows
⍝ pars: data table_atts cell_attribs header_attribs #header_rows cell-ids? row-ids?
:If 0=⎕NC'id' ⋄ id←'' ⋄ :EndIf
:If 2=⍴⍴pars ⋄ pars←,⊂pars ⋄ :EndIf ⍝ Matrix of data only
pars←pars,(⍴,pars)↓(1 1⍴⊂'data')'' '' '' 0 0 0
data atts tda tha hdrrows cellids rowids←pars
hdrrows←⍬⍴hdrrows
data←((rows←×/¯1↓⍴data),¯1↑⍴data)⍴data
x←⍕¨data
:If cellids ⍝ do we add cell ids?
r←(' id="'∘,∘(,∘'">')¨{enlist'rc',¨⍕¨⍵}¨⍳⍴data),¨x,¨⊂'</td>'
:Else
r←'>',¨x,¨⊂'</td>'
:EndIf
:If (⍴tda)≡⍴data
r←('<td'∘,¨tda ine¨' ',¨tda),¨r
:ElseIf (⍴tda)=¯1↑⍴data
r←↑(⊂'<td'∘,¨tda ine¨' ',¨tda),¨¨↓r
:Else
r←('<td',tda ine' ',tda)∘,¨r
:EndIf
:If z←0≠hdrrows ⋄ r[⍳hdrrows;]←(⊂'<th',(tha ine' ',tha),'>'),¨x[⍳hdrrows;],¨⊂'</th>' ⋄ :EndIf
:If rowids ⍝ if using row ids, add them for non-header rows
r←(⍳rows){'<tr id="row_',(⍕⍺),'">',⍵,'</tr>',CRLF}¨,/r
:Else
r←'<tr>'∘,¨(,/r),¨⊂'</tr>',CRLF
:EndIf
:If z ⋄ mask←(4+⍴r)⍴1 ⋄ mask[n←1,(2 3+hdrrows),⍴mask]←0
r←mask\r
r[n]←'<thead>' '</thead>' '<tbody>' '</tbody>',¨⊂CRLF
:EndIf
r←('table',(id ine' id="',id,'"'),(atts ine' ',atts))Enclose CRLF,(enlist r),CRLF
∇
∇ r←{name}List pars;items;ordered;t
⍝ pars: items [ordered? 0/1]
:If 0=⎕NC'name' ⋄ name←'' ⋄ :EndIf
:Select ≡pars
:CaseList 1 ¯2 ⋄ ordered←¯1↑pars ⋄ items←eis ¯1↓pars
:Case 2 ⋄ ordered←0 ⋄ items←pars
:Else ⋄ (items ordered)←2↑pars,(⍴,pars)↓'' 0
:EndSelect
t←(1+ordered)⊃'ul' 'ol'
r←(t,name ine' id=',quote name)Enclose enlist'li'∘Enclose¨items
∇
∇ r←{name}MultiEdit pars
⍝ pars: (rows cols) [values [attributes]]
:If 0=⎕NC'name' ⋄ name←'' ⋄ :EndIf
pars←pars,(⍴pars)↓(10 40)'' ''
r←'textarea ',(3⊃pars),(name ine' id="',name,'" name="',name,'"'),' rows="',(⍕1 1⊃pars),'" cols="',(⍕1 2⊃pars),'"'
r←r Enclose CRLF,(2⊃pars),CRLF
∇
MakeStyle←{
⍺←''
0∊⍴⍵:''
(' ',⍨¯2↓enlist(eis ⍺),¨⊂', '),Styles ⍵
}
∇ r←HtmlSafeText txt;i;m;u;ucs
⍝ make text HTML "safe"
r←,⎕FMT txt
i←'&<>"#'⍳r
i-←(i=1)∧1↓(i=5),0 ⍝ mark & that aren't &#
m←i∊⍳4
u←127<ucs←⎕UCS r
(m/r)←('&amp;' '&lt;' '&gt;' '&quot;')[m/i]
(u/r)←(~∘' ')¨↓'G<&#ZZZ9;>'⎕FMT u/ucs
r←enlist r
∇
:EndNamespace
﻿:Namespace JQUI
⎕IO ⎕ML ⎕WX←1 1 3
⍝ == JQUI - JQueryUI
⍝ For more information:
⍝ * JQuery - http://jquery.com
⍝ * JQUery UI - http://jqueryui.com
CRLF←⎕UCS 13 10
⍝ --- Utility functions ---
ine←{0∊⍴⍺:'' ⋄ ⍵}  ⍝ if not empty
eis←{0∊⍴⍵:⍵ ⋄ 2>|≡⍵:,⊂⍵ ⋄ ⍵} ⍝ Enclose if simple
enlist←{⎕ML←2 ⋄ ∊⍵} ⍝ APL2 style enlist
quote←{'"'∊⍵:⍵ ⋄ '"',⍵,'"'}
firstAfter←{pos str←⍵ ⋄ pos+1⍳⍨⍺⍷pos↓str} ⍝ return position of first occurrence after a position
empty←{0∊⍴⍵}
SignalError←{}∘{0≠1↑⍵: ⍺ ⎕SIGNAL ⍵ ⋄ ⍵}
∇ r←class insertClass attrs;m;beg;end;q;f
⍝ insert class into a list of attributes, if there's already a class= attribute append class to it
:If ~∨/m←'class='⍷attrs ⋄ r←'class="',class,'"',(0∊⍴attrs)↓' ',attrs ⋄ :Return ⋄ :EndIf
q←(6+beg←m⍳1)⊃attrs,' '
:If q∊'''"' ⋄ end←¯1+q firstAfter(6+beg)attrs ⋄ r←(end↑attrs),' ',class,end↓attrs
:Else
f←~(⍴attrs)≥end←¯1+' 'firstAfter(5+beg)attrs
r←attrs
r[beg+5]←⊂'="'
r←enlist((end-f)↑r),(f↓' ',class,'"'),end↓r
:EndIf
∇
⍝ --- Widget functions ---
∇ r←{req}Accordion pars;id;hdrs;content;jqpars
⍝ req - HTTPRequest object
⍝ id - the id for the accordion
⍝ jqpars - Accordion parameters
⍝ hdrs - n-element array of header names for each accordion folder
⍝ content - n-element array of content for each accordion folder
⍝ updates req.Response.head and returns html
pars←eis pars
id hdrs content jqpars←4↑pars,(⍴pars)↓'' '' '' ''
:If 0∊⍴id ⋄ id←'myAccordian' ⋄ :EndIf
:If 9=⎕NC'req' ⋄ req.Use'JQueryUI' ⋄ :EndIf
hdrs←#.HTML.h3¨('href' '#')∘#.HTML.a¨hdrs
content←#.HTML.div¨content
r←'id'id #.HTML.div,hdrs,[1.1]content
r,←#.JQ.JQueryfn('accordion'id jqpars)
∇
∇ r←{req}Button pars;id;jqpars;caption;buttonpars
:If 9=⎕NC'req' ⋄ req.Use'JQueryUI' ⋄ :EndIf
pars←eis pars
id caption buttonpars jqpars←4↑pars,(⍴pars)↓'' '' '' ''
r←(('id'id),{0∊⍴⍵:⍵ ⋄ eis ⍵}buttonpars)#.HTML.button caption
r,←#.JQ.JQueryfn'button'id jqpars
∇
∇ r←{req}DatePicker pars;id;editpars;jqpars
⍝ req - HTTPRequest object
⍝ pars - id editpars jqpars
⍝ id - the id for the datepicker
⍝ editpars - parameters for the edit field (see HTMLInput.Edit)
⍝ jqpars - datepicker parameters
⍝ updates req.Response.head and returns html
:If 9=⎕NC'req' ⋄ req.Use'JQueryUI' ⋄ :EndIf
pars←eis pars
id editpars jqpars←pars,(⍴pars)↓''⍬''
:If 0∊⍴id ⋄ id←'myDatePicker' ⋄ :EndIf
r←id #.HTMLInput.Edit editpars
r,←#.JQ.JQueryfn'datepicker' ('#',id) jqpars
∇
∇ r←{req}Dialog pars;id;title;innerhtml;jqpars;chain
⍝ req - HTTPRequest object
⍝ id - the id for the dialog
⍝ jqpars - Dialog parameters
⍝ title - title for the dialog
⍝ innerhtml - body for the dialog
⍝ updates req.Response.head and returns html
pars←eis pars
id title innerhtml jqpars chain←5↑pars,(⍴pars)↓'' '' '' '' ''
:If 9=⎕NC'req' ⋄ req.Use'JQueryUI' ⋄ :EndIf
r←''
r←((title∘ine¨'title'title),(id∘ine¨'id'id))#.HTML.div innerhtml
r,←#.JQ.JQueryfn'dialog'id jqpars chain
∇
∇ r←{req}Draggable pars;id;jqpars
⍝ req - HTTPRequest object
⍝ id - the selector(s) (generally ids) for items to be dragged
⍝ jqpars - Draggable parameters (if supplied, will override the default)
⍝ updates req.Response.head and returns html
pars←eis pars
id jqpars←2↑pars,(⍴pars)↓'' ''
:If empty id ⋄... ⋄ :EndIf ⍝ id is required
:If 9=⎕NC'req' ⋄ req.Use'JQueryUI' ⋄ :EndIf
:If 0∊⍴jqpars ⋄ jqpars←'appendTo: "body", helper: "clone"' ⋄ :EndIf
r←#.JQ.JQueryfn('draggable'id jqpars)
∇
∇ r←page Droppable pars;jqpars;accept;id;update;page;dtype;success
⍝ req - HTTPRequest object
⍝ id - the selector(s) for the droppable elements
⍝ accept - the selectors(s) for what can be dropped on them
⍝ update - the selector(s) for the element whose html to update if the server returns data (empty if no data expected)
⍝ jqpars - Droppable parameters (if supplied, will override the default)
⍝ updates req.Response.head and returns html
⍝
⍝ NB: the default behavior expects id attributes on both the dragger and droppee
:Select ⊃⎕NC'page'
:Case 9 ⋄ page.Use'JQueryUI' ⋄ page←page.Page ⍝ page is the request object
:EndSelect
page←quote page
pars←eis pars
id accept update jqpars←4↑pars,(⍴pars)↓'' '' '' ''
'id and accept cannot be empty'SignalError 900×∨/empty¨id accept
:If empty jqpars
:If 0∊⍴update ⍝ if no response element specified
dtype←'"json"'
success←'success: function(obj){$.each(obj,function(i,d){if(typeof(d.replace)!=="undefined"){$(d.replace).html(d.data);}else if(typeof(d.append)!=="undefined"){$(d.append).append(d.data);}else if(typeof(d.prepend)!=="undefined"){$(d.prepend).prepend(d.data);}else if(typeof(d.execute)!=="undefined"){eval(d.execute);}});}'
:Else
dtype←'"html"'
success←'success: function(d){$(',(quote update),').empty().html(d);}'
:EndIf
jqpars←'accept: "',accept,'", activeClass: "ui-state-default", hoverClass: "ui-state-hover", '
jqpars,←'drop: function(evt, ui){$.ajax({url:',page,', cache:false, type:"POST", dataType:',dtype,', data:{event:"drop",drag:ui.draggable.attr("id"),receiver:$(this).attr("id")},',success,'});}'
⍝          :If ~empty update
⍝              jqpars,←', function(data){$("',update,'").html(data)}, "html"'
⍝          :EndIf
:EndIf
r←#.JQ.JQueryfn('droppable'id jqpars)
∇
∇ r←{req}Sortable pars;ids;lists;styles;usehd;jqpars;chain;liststyle;itemstyle;style;js;callback;lids;cbcode;cbids;i;update
pars←eis pars
usehd ids lists styles jqpars chain callback update←8↑pars,(⍴pars)↓0 '' '' '' '' '' 0 ''
:If 9=⎕NC'req'
req.Use'JQueryUI'
:If 0∊⍴styles ⋄ liststyle←itemstyle←''
:Else ⋄ liststyle itemstyle←styles
:EndIf
liststyle←liststyle,⍨'list-style-type' 'none' 'margin' 0 'padding' 0 'float' 'left' 'margin-right' '10px' 'background' '#eee' 'padding' '5px' 'width' '143px'
itemstyle←itemstyle,⍨'margin' '5px' 'padding' '5px' 'font-size' '1.2em' 'width' '120px'
ids←eis ids
style←⊂('#'∘,¨ids)#.HTMLInput.MakeStyle liststyle
style,←⊂('#'∘,¨ids,¨⊂' li')#.HTMLInput.MakeStyle itemstyle
style req.Style''
:EndIf
lists←eis¨lists
:If callback
lids←(⊂¨ids),¨¨'_'∘,∘⍕¨¨⍳∘⍴¨lists ⍝ list IDs
lids←'li class="ui-state-default" id="'∘,∘(,∘'"')¨¨lids
lists←lids #.HTMLInput.Enclose¨¨lists
:Else
lists←'li class="ui-state-default"'∘#.HTMLInput.Enclose¨¨lists
:EndIf
:If usehd
lists←{w←⍵ ⋄ f←'ui-state-disabled'insertClass 1⊃w ⋄ w[1]←⊂f ⋄ w}¨lists
:EndIf
lists←(1∘⌽¨'"ul id="'∘,¨ids)#.HTMLInput.Enclose¨lists
jqpars←2↓enlist', '∘,¨(⊂'')~⍨((1<⍴lists)/'connectWith: "ul"')(usehd/'items: "li:not(.ui-state-disabled)"')jqpars
:If callback
js←{'{',2↓(enlist ⍵),'}'}{', ',⍵,': $("#',⍵,'").sortable("serialize")'}¨ids
cbcode←', update: function(){$.post("',req.Page,'", ',js
:If ~empty update
cbcode,←', function(d){$("',update,'").empty().html(d)}'
:EndIf
jqpars,←(2×empty jqpars)↓cbcode,')}'
:EndIf
chain←'.disableSelection()',chain
js←#.JQ.JQueryfn'sortable'ids jqpars chain
r←(enlist CRLF∘,¨lists),CRLF,js,'div style="clear: both;"'#.HTMLInput.Enclose''
∇
∇ r←{req}Tabs pars;id;tabnames;content;jqpars;uris;tabids;hrefs
⍝ req - HTTPRequest object
⍝ id - the id for the tabs
⍝ jqpars - Tabs parameters
⍝ tabnames - n-element vector of charvec of names to appear on the tabs
⍝ content - n-element vector of charvecs with the HTML content for each tab
⍝ updates req.Response.head and returns html
:If 9=⎕NC'req' ⋄ req.Use'JQueryUI' ⋄ :EndIf
pars←eis pars
id tabnames content jqpars←4↑pars,(⍴pars)↓'' '' '' ''
:If 0∊⍴id ⋄ id←'myTabs' ⋄ :EndIf
tabnames←eis tabnames
:If 1<|≡id
tabids←1↓id
id←1⊃id
:Else
tabids←id∘,¨'-'∘,¨⍕¨⍳⍴tabnames
:EndIf
content←eis content
uris←(empty¨content)<{∧/⍵∊'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%-._~:/?#[]@!$&''()*+,;='}¨content ⍝ identify likely URIs
hrefs←'#',¨tabids
(uris/hrefs)←uris/content
hrefs←'a href='∘,¨#.HTMLInput.quote¨hrefs
r←'ul'#.HTMLInput.Enclose enlist'li'∘#.HTMLInput.Enclose¨hrefs #.HTMLInput.Enclose¨tabnames
:If ~∧/uris
r,←enlist('div id="'∘,¨(,∘'"')¨(~uris)/tabids)#.HTMLInput.Enclose¨(~uris)/content
:EndIf
r←'id'id #.HTML.div r
r,←#.JQ.JQueryfn'tabs'id jqpars
∇
∇ r←{req}Slider pars;id;jqpars;cur;max;min;exec
⍝ req - HTTPRequest object
⍝ id
⍝ min - minimum value
⍝ max - maximum value
⍝ cur - current value
⍝ exec - script to execute when value changes
⍝ jqpars - Draggable parameters (if supplied, will override the default)
⍝ updates req.Response.head and returns html
pars←eis pars
id min max cur exec jqpars←6↑pars,(⍴pars)↓'' 1 10 1 '' ''
:If empty id ⋄ 'id cannot be empty'⎕SIGNAL 11 ⋄ :EndIf ⍝ id is required
:If 9=⎕NC'req' ⋄ req.Use'JQueryUI' ⋄ :EndIf
jqpars,←(0∊⍴jqpars)↓',min: ',(⍕min),', max: ',(⍕max),', value: ',(⍕cur),(~0∊exec)/', slide: function(evt,ui){',exec,(';'=¯1↑exec)↓';}'
r←#.JQ.JQueryfn'slider'id jqpars
∇
:EndNamespace
﻿:Class MS2Page : MildPage
⍝∇:require =/MildPage.dyalog
:Include #.HTMLInput
∇ Wrap req;body;head;html;footer;banner;content;lang
⍝ "Wraps" the HTML body
⍝ This version implements a template to create a standard look and feel for all MildPages served by this site
⍝ This is provided as an example for some of the uses of Wrap
:Access Public
req.Use'JQuery'
head←'title'Enclose req.Server.Config.Name ⍝ Sets the name of the page at the top of the browser to the Name specified in server.xml
head,←Tag'link href="/Styles/style.css" rel="stylesheet" type="text/css"' ⍝ add the style sheet reference
head,←Tag'meta http-equiv="content-type" content="text/html;charset=UTF-8"' ⍝ make it UTF-8
⍝↓↓↓ If your code that builds the page updates HTMLHead (content that goes in the <head> element of the HTML document) it gets appended here.
⍝    This means that any style changes introduced by your code will override those in the /Styles/style.css for elements defined by both stylesheets
head,←req.Response.HTMLHead,CRLF ⍝ Adds additional html head information
head←'head'Enclose head
⍝ The design for this template implements a structure for the content within the body of the HMTL file
⍝ The <body> element encloses three <div> elements containing: a banner, the content, a footer
banner←#.Files.ReadText req.Server.Config.AppRoot,'Styles\banner.txt'
content←'div id="contentblock"'Enclose req.Response.HTML
content,←'div id="codeblock" style="display: none;"'Enclose APLToHTML ⎕SRC⊃⊃⎕CLASS ⎕THIS
content,←JS'$(function(){$("#bannerimage").on("click", function(evt){$("#contentblock,#codeblock").toggle();});});'
footer←#.Files.ReadText req.Server.Config.AppRoot,'Styles\footer.txt'
⍝↓↓↓ We enclose the banner/content/footer with a "wrapper" div so that the visible content of the page can be sized, aligned, floated, etc.
⍝    <body> serves as the background and overall container (not to mention being required!)
body←'body'Enclose CRLF,'div id="wrapper"'Enclose banner,CRLF,content,CRLF,footer
⍝↓↓↓ We use XHTML for this site and recommend its use.  See http://www.w3schools.com/html/html_xhtml.asp for a discussion of HTML v. XHTML
lang←req.Server.Config.Lang ⍝ use the language specified in Server.xml
html←'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',CRLF
html,←('html lang="',lang,'" xml:lang="',lang,'" xmlns="http://www.w3.org/1999/xhtml"')Enclose head,body
req.Response.HTML←html
∇
:EndClass
﻿:Class MildPage
:Field Public Instance _PageName←'' ⍝ Page file name
:Field Public Instance _PageDate←'' ⍝ Page saved date
∇ Render req ⍝ Called on a GET or POST to the page
:Access Public Instance
req.Return'GET of Empty Page: ',req.Page
∇
∇ Wrap req;enc ⍝ Do some minimal wrapping for the page
:Access public instance
enc←#.HTMLInput.Enclose
req.Response.HTML←'html' enc ('head' enc req.Response.HTMLHead),'body' enc req.Response.HTML
∇
∇ Close session ⍝ Called when the session ends
:Access Public Instance
∇
:EndClass﻿:Class index : MS2Page
:Include #.HTMLInput
∇ html←Render req;items
:Access Public
html←'h2'Enclose'MiServer 2.1 Compatability MiSite'
html,←'This MiSite is a minimal template intended to help MiServer 2 users migrate to using MiServer 3 without having to completely rewrite their pages.'
html,←2 BR'h4'Enclose'The steps to migrate are:'
items←⊂'Copy the folder structure of this sample MiSite (MS2).  It''s important that you include the /Code/ folder.'
items,←⊂'Change any of your pages that are based on the MiPage class to be based on the MS2Page'
items,←⊂'Change any references to Server.Root to Server.Config.AppRoot'
html,←List items
html,←BR Anchor'Mortgage calculation sample page' '/mortgagems2'
html,←BR Anchor'What''s your sign?' '/zodiacsign'
∇
:EndClass
﻿:Class mortgageMS2 : MS2Page
:Include #.HTMLInput
⍝ define the fields for our calculation
:field public prin←100000      ⍝ principal field
:field public rate←4.5         ⍝ rate
:field public term←30          ⍝ term (years)
:field public pmt←⍬            ⍝ payment
tonum←{{(,1)≡1⊃⍵:2⊃⍵ ⋄ ''}⎕VFI ⍕⍵} ⍝ very simple check for a single number
⍝ ↓ calculate payment based on principal, rate, and term
calcpmt←{0::'' ⋄ p r n←⍵÷1 1200 (÷12) ⋄ .01×⌈100×p×r÷1-(1+r)*-n}
⍝ ↓ calculate how much you can borrow based on rate, term, and payment
calcprin←{0::'' ⋄ r n m←⍵÷1200 (÷12) 1 ⋄ .01×⌈100×m÷r÷1-(1+r)*-n}
∇ html←Render req ⍝ render the initial page
:Access Public
pmt←calcpmt prin rate term
html←'h2'Enclose'Mortgage Calculator'
html,←'Modify principal, rate or term to recalculate payment.'
html,←BR 2 BRA'Change payment to recalculate the principal'
⍝ define the input fields and form - the form is never submitted but serves as a container for serialization
html,←'id="mortgage"'('POST'Form)Table 4 2⍴'Principal'('prin'Edit prin)'Interest Rate'('rate'Edit rate)'Term (years)'('term'Edit term)'Payment'('pmt'Edit pmt)
⍝ define the onchange handler for all input fields in the #mortage form
⍝ the first argument to JQ.On is the selector(s) for the handler to apply to
⍝ the second argument is the event(s) to listen for
⍝ the third argument tells JQ.On what data to send to the server from the browser
⍝     in this case, we send back a variable called "formdata" which holds the serialization of the #mortgage form
⍝     MiServer understands serialized forms and will populate public fields matching the ids of the input elements
html,←req #.JQ.On'#mortgage input' 'change'('formdata' 'mortgage' 'serialize')
∇
∇ resp←APLJax req;p;r;m;n ⍝ respond to AJAX calls
:Access public
p r n m←tonum¨prin rate term pmt ⍝ convert input fields to numbers
resp←''
:Select req.GetData'_what' ⍝ what field changed?
:CaseList 'prin' 'rate' 'term' ⍝ one of prin rate or term changed, calculate payment
:If ~∨/{0∊⍴⍵}¨p r n ⍝ if we have values for all inputs...
⍝ ... calculate the payment and replace the value attribute in the input element
resp←('execute'('$("#pmt").val("',(⍕calcpmt p r n),'")'))
:EndIf
:Case 'pmt' ⍝ payment changed, calculate principal
:If ~∨/{0∊⍴⍵}¨r n m ⍝ if we have values for all inputs...
⍝ ... calculate the principal and replace the value attribute in the input element
resp←('execute'('$("#prin").val("',(⍕calcprin r n m),'")'))
:EndIf
:EndSelect
∇
:EndClass﻿:Class ZodiacSign : MS2Page
:field public name
:field public birthdate
:include #.HTMLInput
∇ r←Render req
:Access public
r←'h2'Enclose'What''s Your Sign'
r,←2 SPA'Name: ','name'Edit'' 30
r,←2 SPA'Birth Date: ',req #.JQUI.DatePicker'birthdate'('' 20)'showButtonPanel: true,dateFormat: "yy-mm-dd"'
r,←2 BRA'go'Button' Go! '
r,←'div id="answer"'Enclose''
r,←req #.JQ.On'#go' 'click'(('name' '#name')('birthdate' '#birthdate'))'#answer'
∇
∇ r←APLJax req;resp
:Access public
:If 0∊⍴name
resp←'Please enter your name.'
:ElseIf 0∊⍴birthdate
resp←name,', please select your birthdate.'
:ElseIf 0≡date←{0::0 ⋄ 3↑#.Dates.(IDNToDate DateToIDN ⍵)}⊃(//)⎕VFI{⍵{⍵\⍵/⍺}⍵∊⎕D}birthdate
resp←name,', "',birthdate,'" is not a valid date. Please try again.'
:Else
resp←name,', you''re ',{'a',(('A'≠1⊃⍵)↓'n '),⍵}ZodiacSignFor date
:EndIf
r←resp
∇
∇ r←ZodiacSignFor date;signs
signs←13⍴'Capricorn' 'Aquarius' 'Pisces' 'Aries' 'Taurus' 'Gemini' 'Cancer' 'Leo' 'Virgo' 'Libra' 'Scorpio' 'Sagitarius'
r←(0 120 219 320 420 521 621 722 822 923 1023 1122 1221+.<100⊥1↓date)⊃signs
∇
:EndClass
﻿:Class MiPageTemplate : #.MiPage
⍝ This is a template that adds a consistent header to all pages based on it
∇ {r}←Wrap;lang;header;home;menu
:Access Public
⍝ set the tab/window title to the name of the application defined in Config/Server.xml
Add _.title _Request.Server.Config.Name
⍝ add a link to our CSS stylesheet
_CssOverride←'/Styles/style.css'
⍝ wrap the content of the body element in two divs
'#contentblock'Body.Push _.div
⍝'#bodyblock'Body.Push _.div
⍝ add the header to the top of the page
header←'#banner'Insert _.header
home←header.Add _.A'[insert the name of your site here]' '/' ⍝ click to go home
'src="/Styles/Images/duck.png"'home.Insert _.img ⍝ logo
menu←'#menu'header.Add _.nav
{menu.Add _.A ⍵('/',⍵)}¨'Products' 'Support' 'Corporate'
⍝ Add a bar under the menu item that is currently open
Add _.style('#menu a[href="',_Request.OrigPage,'"] {border-bottom: 0.25em solid;}')
⍝ call the base class Wrap function
r←⎕BASE.Wrap
∇
:EndClass
:Namespace APLTreeUtils
⍝ *** Version 4.2.1 ⋄ 2018-05-16 ***
⍝
⍝ ## Overview
⍝ Version 4.0.0 is a major change in two respects:
⍝
⍝ ### Clean-up
⍝ Several functions that turned out to be very rarely used have been removed from `APLTreeUtils`. For a
⍝ full list see further down. Use `Fire` to change any calls to those functions.
⍝
⍝ ### Use the new ⎕N\*-functions introduced in 15.0
⍝ This was a necessary step in order to ensure platform compatability which was the main goal of
⍝ version 15.0 of Dyalog. It means that version 4.0.0 of APLTreeUtils is **not backwards-compatible**,
⍝ something that is normally avoided, but platform compatability is so important that we had to bite the bullet.
⍝
⍝ ## Updating
⍝ Of course this means that you cannot just update, this time you have to check carefully to take action,
⍝ even if you use already 15.0.\\
⍝ However, you can be sure that all members of the APLTree project themselves are ready for this.\\
⍝ Note that `APLTreeUtils` does not work with the Classic edition - it requires Unicode.
⍝
⍝ ## List of removed functions
⍝ Several functions have been removed from APLTreeUtils:
⍝ * `CreateUUID`
⍝ * `DropEmptyZerosAndBlanks`
⍝ * `Enlist`
⍝ * `First`
⍝ * `Mix`
⍝ * `ReadBytesAs8BitSignedIntegersFromFile`
⍝ * `WriteBytesAs8BitSignedIntegersToFile`
⍝
⍝ ## Version History
⍝ * 4.2.1
⍝   * `GoToWebPage` was not clear about "file://" versus "file:///"
⍝   * `GoToWebPage` with "file://" or "file:///" did not work from Ride
⍝ * 4.2.0
⍝   `GoToWebPage` was not clear about "file://" versus "file:///"
⍝ * 4.1.1
⍝   * Very serious performance issue fixed in `WriteUtf8File` with "append".
⍝   Bug fixes:
⍝   * `GoToWebPage` worked on a Mac only when connected to Ride.
⍝   * Test case 998 crashed on the Mac.
⍝ * 4.1.0
⍝   * Now managed by acre 3.
⍝ * 4.0.2
⍝   * Documentation improved.
⍝ * 4.0.1
⍝   * Bug fix: call to `GetOperatingSystem` was incorrectly addressing `APLTreeUtils` relatively.
⍝ * 4.0.0
⍝   * Tidied up: several functions got removed
⍝   * This version uses 15.0-features. **It's not backwards-compatible!**
⍝
⍝ Kai Jaeger - APL Team Ltd.\\
⍝ Homepage: <http://aplwiki.com/APLTreeUtils>
∇ array←Uppercase array
⍝ Fast uppercasing that excepts scalars, vectors and matrices as well as vectors and
⍝ matrices of text vectors.\\
⍝ Note that `Uppercase` converts lower case chars well beyond the ANSII character set.
array←1(819⌶)array
∇
∇ array←Lowercase array
⍝ Fast lowercasing that excepts scalars, vectors and matrices as well as vectors and
⍝ matrices of text vectors.\\
⍝ Note that `Lowercase` converts upper case chars well beyond the ANSII character set.
array←0(819⌶)array
∇
IsChar←{0 2∊⍨10|⎕dr ⍵}
∇ r←IsDevelopment;⎕IO;⎕ML
⍝ Returns 1 in case the function is running under a Dyalog development (EXE or DLL).
⎕ML←⎕IO←1
r←'Development'≡4⊃'#'⎕WG'APLVersion'
r∨←'DLL'≡4⊃'#'⎕WG'APLVersion'   ⍝ May be DLLRT instead!
∇
∇ r←IsUnicode
⍝ Returns a 1 if running under Dyalog Unicode.
r←80=⎕DR' '
∇
SplitPath←{
⍝ `'C:\Buffer\' 'my.txt' ←→ SplitPath 'C:\Buffer\my.txt'`
⍝ `(,¨'1.2.3.4.') (,'5') ←→ '.' SplitPath '1.2.3.4.5'`
⎕ML←⎕IO←1
⍺←'/\'
l←1+-⌊/⍺⍳⍨⌽⍵
(l↓⍵)(l↑⍵)
}
Split←{
⍝  `'First' 'Second' ←→ Split 'First',(⎕UCS 13 10),'Second'`
⍝ `(,¨'1' '2' '3') ←→ '.' Split '1.2.3'`
⎕ML←⎕IO←1
⍺←⎕UCS 13 10 ⍝ Default is CR+LF
b←(1↑⍨⍴⍺),⍺⍷⍵     ⍝ This is more efficient in terms of memory then doing it one one line
(⍴,⍺)↓¨b⊂⍺,⍵
}
Nest←{
⍝ `0 1 1 2 3 ←→ ≡¨ '1' (,'1') (1 2)((1 2)(3 4))(1(2 3(4 5)))`
⍝ `0 1 1 2 3 ←→ ≡¨ Nest  '1' (,'1') (1 2)((1 2)(3 4))(1(2 3(4 5)))`
⎕ML←⎕IO←1
(⊂∘,⍣(0 1∊⍨≡⍵))⍵
}
Where←{⎕IO←(⎕IO⊃⎕RSI).⎕IO ⋄ ⍵/⍳⍴,⍵}        ⍝ Return indices for Boolean ⍵; depends on ⎕IO in caller's space
Last←{
⍝ `(,¨'3') ←→ Last '1.2.3'`
⎕ML←⎕IO←1
⍺←'.'
(⍴,⍵)=where←¯1+⌊/⍺⍳⍨⌽,⍵:0⍴⍵
0 1∊⍨≡r←(-where)↑⍵:r
''⍴r
}
dmb←{
⍝ Delete leading, trailing and multiple blanks. Accepts scalar, vector and matrix as argument.
⍺←' '
⎕ML←⎕IO←1
~0 1∊⍨≡⍵:∇¨⍵
2=⍴⍴⍵:↑∇¨↓⍵
(,⍺)≡,⍵:''
w←1↓¯1↓⍺{⍵/⍨~(2⍴⍺)⍷⍵}⍺,⍵,⍺
(0=⍴⍴⍵)∧1=⍴w:⍬⍴⍵
w
}
dlb←{
⍝ Delete leading blanks. Accepts scalar, vector and matrix as argument.
⎕IO←1 ⋄ ⎕ML←1
(2=|≡⍵):∇¨⍵
(1=⍴⍴⍵):(+/∧\' '=⍵)↓⍵                 ⍝ Vectors (main application)
(2=⍴⍴⍵):(+/∧\' '=⍵)⌽⍵                 ⍝ Matrix
(0=⍴⍴⍵):(⎕IO+' '≡⍵)⊃⍵''               ⍝ Scalar
'Invalid argument'⎕SIGNAL 11
}
dtb←{
⍝ Delete trailing blanks. Accepts scalar, vector and matrix as argument.
⎕IO←1 ⋄ ⎕ML←1
(2=|≡⍵):∇¨⍵
(1=⍴⍴⍵):⌽{(+/∧\' '=⍵)↓⍵}⌽⍵            ⍝ Vectors (main application)
(2=⍴⍴⍵):(-+/∧⌿∧\' '=⌽⍵)↓[2]⍵          ⍝ Matrix
(0=⍴⍴⍵):(⎕IO+' '≡⍵)⊃⍵''               ⍝ Scalar
'Invalid argument'⎕SIGNAL 11
}
∇ r←{flat}ReadUtf8File fileIdentifier;filename;fno;noOfBytes;bytes;⎕IO;⎕ML;b;typeFlag
⍝ By default `ReadUtf8File` returns one of:
⍝ * A nested vector with each item carrying a record (line) in case any of the common
⍝   "newline" definitions (⎕UCS 10 or ⎕UCS 13 ⎕UCS 13 10 depending on the platform) is
⍝   found in the file.
⍝
⍝   Note that the function first tries to find (⎕UCS 13 10) and when it can't ⎕UCS 10
⍝   and then, finally, ⎕UCS 13.
⍝ * A simple character vector otherwise.
⍝ If you want to get a simple stream in any case then specify 'flat' as left argument.\\
⍝ `fileIdentifier` can be one of:
⍝ * A filename. Then the file is tied, read and untied.
⍝ * A file tie number. In this case the file is just read, it remains tied. Use this
⍝   to tie a file with certain rights **before** calling `ReadUtf8File`, for example 34
⍝   which requests read+write but grants just read to others.
⎕IO←⎕ML←1
r←''
flat←{900⌶⍬:0 ⋄ 'flat'≡⍎⍵}'flat'
:If typeFlag←' '=1↑0⍴fileIdentifier
filename←fileIdentifier
(('\'=filename)/filename)←'/'
:Trap 19 22
fno←(filename~'"')⎕NTIE 0
:Else
('Could not read file: ',filename)⎕SIGNAL ⎕EN
:EndTrap
:Else
fno←fileIdentifier
:EndIf
noOfBytes←⎕NSIZE fno
bytes←⎕NREAD fno 83,noOfBytes,0
:If typeFlag
⎕NUNTIE fno
:EndIf
bytes+←256×bytes<0                 ⍝ Make sure it is unsigned
bytes↓⍨←3×239 187 191≡3⍴bytes      ⍝ drop a potential UTF-8 marker
r←'UTF-8'⎕UCS bytes
:If ~flat
:If ∨/(⎕UCS 13 10)⍷r
r←Split r
:ElseIf ∨/r=⎕UCS 10
r←(⎕UCS 10)Split r
:ElseIf ∨/r=⎕UCS 13
r←(⎕UCS 13)Split r
:EndIf
:EndIf
∇
∇ {r}←{append}WriteUtf8File(fileIdentifier data);filename;fno;fullname;flag;⎕ML;⎕IO;i;max;size;simpleFlag;wasOpenFlag;newline
⍝ Note that Dyalog 15.0 comes with the newly introduced system functions `⎕NPUT`
⍝ and `⎕NGET`. They offer a powerful, flexible and platform-independent interface
⍝ for reading and writing files.\\
⍝ However, `ReadUtf8File` and `WriteUtf8File` remain available in `APLTreeUtils`
⍝ for two reasons:
⍝ * Compatability
⍝ * Dealing with slippery networks. `WriteUtf8File` does not give up easily!
⍝ * `WriteUtf8File` allows you to append data **to the last record** rather than
⍝   appending records if you wish so.
⍝
⍝   This is not POSIC compatible yet most software packages (~70%) offer this
⍝   feature, and there are applications for this.
⍝
⍝ Writes UTF-8 "data" to "fileIdentifier" (**without** a BOM - UTF8 files do
⍝ not have a BOM according to the spec!).\\
⍝ If the left argument equals the string "append" then "data" is appended to an
⍝ already existing file. If there is no such file yet it is created no matter
⍝ what the left argument is.\\
⍝ "fileIdentifer" can be one of:
⍝ * A filename. In this case `WriteUtf8File` ties the file, writes
⍝   it and then unties it.
⍝ * A tie number. In this case the data is just written to the file.
⍝
⍝   Use this to tie a file with certain rights like 34: request read
⍝   & write but grant just read.
⍝
⍝ When the tie fails the function tries a couple of times with an
⍝ increasing delay before giving up.
⍝
⍝ Under Windows `newline` gets `⎕UCS 13 10` and `⎕UCS 10` otherwise.
⍝ When a nested vector is passed as data then "newline" is appended to every single
⍝ record **but** the last one.\\
⍝ That means that there will be **no** "newline" at the end of the file. That
⍝ violates  the POSIX recommendations but is in line with the majority of Windows
⍝ software. For example, MS Word adds "newline" but Wordpad does not.\\
⍝ When "append" is specified, "newline" is also added as a prefix to
⍝ the data in case the file does already exist and was not empty yet.\\
⍝ That leads to the desired result when you add stuff to a file you have
⍝ created with `WriteUTF8File` but not necessarily in other cases - watch out!\\
⍝ If a simple string is passed it is written as it is: nothing is
⍝ added at all. And yes, this **is** correct! It can only be argued
⍝ whether it should be used this way. There are applications for
⍝ this in any case.\\
⍝ It means **you** are in charge for inserting the correct "newline" characters
⍝ (if any) depending on the platform.
⎕IO←1 ⋄ ⎕ML←1
r←''
'Invalid data: must not be a matrix'⎕SIGNAL 11/⍨2=⍴⍴data
append←{900⌶⍬:'' ⋄ ⍎⍵}'append'
'Invalid right argument'⎕SIGNAL 11/⍨~(⊂append)∊'append' 1 0 ''⍬
append←(⊂append)∊'append' 1
simpleFlag←0 1∊⍨≡data
newline←(1+'Win'≡GetOperatingSystem ⍬)⊃(⎕UCS 10)(⎕UCS 13 10)
data{⍵:(-⍴,newline)↓⊃,/⍺,¨⊂newline ⋄ ⍺}←~simpleFlag
max←5
fno←0⍴i←size←flag←0
:Repeat
⎕DL 1×i>0
:If wasOpenFlag←0=1↑0⍴fileIdentifier
fno←fileIdentifier
size←⎕NSIZE fno
flag←1
:Else
filename←fileIdentifier
(('\'=filename)/filename)←'/'
:Trap 19 22
fno←(filename~'"')⎕NTIE 0 17  ⍝ Open exclusively
size←⎕NSIZE fno
flag←1
:Case 22
fno←(filename~'"')⎕NCREATE 0
flag←1
:Else
('Could not open file ',filename)⎕SIGNAL ⎕EN
:EndTrap
:EndIf
:Until flag∨max<i←i+1
:If append
:AndIf (0<size)∧~simpleFlag
data,⍨←newline
:EndIf
{}0 ⎕NRESIZE⍣(⊃(~append)∨append∧fno≡⍬)⊣fno
data←⎕UCS'UTF-8'⎕UCS data             ⍝ Enforce UTF-8
data ⎕NAPPEND fno
:If ~wasOpenFlag
⎕NUNTIE fno
:EndIf
∇
∇ {r}←{browser}GoToWebPage Url;wsh;⎕IO;url;⎕WX;⎕ML;html;title;EncodeBlanksForNix
⍝ Fires up the default browser and displays "Url". Exception is when the current
⍝ session is connected to Ride: then "Url" is displayed in the Ride browser.\\
⍝ Instead of using the default browser you can specify an EXE (Windows) or command
⍝ as the left argument. That will then be used to show "Url". Note that the left
⍝ argument is ignored in case the current session is connected to Ride.\\
⍝ For displaying a local file rather then a url add "file:///".\\
⍝ However, note that "file:///" does not work on some systems / with some browsers.\\
⍝ Examples:
⍝ ~~~
⍝ GoToWebPage 'file:///c:/my.html'
⍝ GoToWebPage 'file://localhost/c:/my.html'
⍝ GoToWebPage 'http://aplwiki.com'
⍝ GoToWebPage 'https://en.wikipedia.org/wiki/Main_Page'
⍝ ~~~
⎕WX←1 ⋄ ⎕IO←0 ⋄ ⎕ML←3
r←⍬
url←Lowercase Url
:If ∨/'file:'{⍺≡(⍴⍺)↑⍵}url
Url←'file://'{⍺,(⍴⍺)↓⍵}Url
:ElseIf ∨/'https:'{⍺≡(⍴⍺)↑⍵}url
Url←'https://'{⍺,(⍴⍺)↓⍵}Url
:ElseIf ∨/'http:'{⍺≡(⍴⍺)↑⍵}url
Url←'http://'{⍺,(⍴⍺)↓⍵}Url
:Else
:If ∨/'//:'∊Url  ⍝ Any protocol at all?!
⍝ ? No idea what that protocol is, so we just allow it going through.
:Else
Url←'http://',Url    ⍝ That's the default
:EndIf
:EndIf
(('\'=Url)/Url)←'/'
Url←{l←3+1⍳⍨'://'⍷⍵ ⋄ (l↑⍵),{(~'//'⍷⍵)/⍵}l↓Url}Url
:If 3501⌶⍬ ⍝ Connected to Ride?
:If 'file://'{⍺≡(⍴⍺)↑⍵}Url
EncodeBlanksForNix←{0∊⍴w←⍵:w ⋄ 0=+/b←' '=w:w ⋄ (b/w)←⊂'\ ' ⋄ ↑,/w}
Url←EncodeBlanksForNix Url
Url←(⍴'file:')↓Url
Url←{⍵↓⍨+/∧\'/'=⍵}Url
html←ReadUtf8File Url
title←'<title'{{⍵↑⍨¯1+⍵⍳'<'}⍵↓⍨(⍴⍺)+1⍳⍨⍺⍷⍵}∊html
title(3500⌶)∊html
:Else
html←'<html>' '<head>'
html,←⊂'<meta http-equiv="refresh" content="0;url=',Url,'" />'
html,←'</head>' '</html>'
Url(3500⌶)∊html
:EndIf
:Else
browser←{2<⎕NC ⍵:⍎⍵ ⋄ ''}'browser'
:Select GetOperatingSystem ⍬
:Case 'Win'
:If 0∊⍴browser
'wsh'⎕WC'OLEClient' 'WScript.Shell'
{}wsh.Run Url
:Else
{}wsh.Run browser,' ',Url
:EndIf
:Case 'Lin'
:If 0∊⍴browser
{}⎕SH'xdg-open ',Url,'</dev/null > /dev/null 2>&1 &'
:Else
{}⎕SH browser,' ',Url,'</dev/null > /dev/null 2>&1 &'
:EndIf
:Case 'Mac'
{}⎕SH'open Safari ',Url
:EndSelect
:EndIf
∇
FindPathTo←{
⍝ `⍵` is the name of a script (namespace, interface or class).\\
⍝ Tries to find `⍵` in:
⍝ 1. The same namespace `⎕THIS` is coming from.
⍝ 2. The namespace where the class (if instanciated) comes from.
⍝ 3. In `#`.
⍝ 4. Where it was called from (**not** the same as either 1 or 2!).
⍝ If it fails to find `⍵` an empty string is returned.
⎕IO←1 ⋄ ⎕ML←1
base←⎕THIS.##                        ⍝ were are we coming from?
base{11::0 ⋄ 9=⍺.⎕NC ⍵}⍵:base        ⍝ Is it in that namespace?
base←{11::⍬ ⋄ (1⊃∊⎕CLASS ⍵).##}⍵     ⍝ Where stems the class from?
base{11::0 ⋄ 9=⍺.⎕NC{Last ⍵}⍕1⊃⊃⎕CLASS ⍵}⍵:base  ⍝ Is it in that namespace?
9={11::0 ⋄ #.⎕NC ⍵}⍵:#               ⍝ Is it in root?
path←1⊃⎕RSI~⎕THIS                    ⍝ From where got we called?
0<path.⎕NC ⍵:path                    ⍝ May be it's there?
''                                   ⍝ Give up
}
∇ r←GetOperatingSystem dummy;⎕ML;⎕IO
⍝ Returns one of: "Win", "Mac", "AIX", "Lin"
⍝ Note that under Linux you might need more information.
⎕IO←0 ⋄ ⎕ML←1
r←3↑⊃'.'⎕WG'APLVersion'
∇
∇ r←{length}FormatDateTime ts;ts2;formatstring;bool;⎕IO;⎕ML;buffer
⍝ Formats the right argument (defaults to `⎕TS` if empty) as a string with:\\
⍝ 'YYYY-MM-DD HH:MM:SS.MILLISECOND\\
⍝ The right argument can be one of:
⍝ * A single float (like 20120102030405) representing date and time.
⍝ * A simple vector of length 6 or 7 representing a timestamp (`⎕TS`).
⍝ * A matrix of either floats or vectors (length 6 or 7) representing a DateTime.
⍝ Note that you cannot mix floats and time stamps.\\
⍝ If the right argument has not 7 but 6 or 3 elements, formatting is done accordingly.\\
⍝ Via the left argument the length of the right argument can be set to
⍝ ⍬, 3, 6 or 7; default is 6; ⍬ Accepts any length of the right argument which is 3, 6 or 7.\\
⍝ If the right argument is a...
⍝ * simple vector, a string is returned.
⍝ * matrix, a matrix is returned.
⎕IO←⎕ML←1
:If 645≡⎕DR ts
:If (⍴⍴ts)∊0 1
:If 1=⍴,ts
ts←{0∊⍴,⍵:⍬ ⋄ ⎕ML←3 ⋄ ⍎¨(4 2 2 2 2 2/⍳6)⊂14 0⍕⍵}ts
:EndIf
:Else
ts←↑,{0=⍵:6⍴0 ⋄ v←14 0⍕⍵ ⋄ ⎕ML←3 ⋄ ⍎¨(4 2 2 2 2 2/⍳6)⊂v}¨ts
:EndIf
:EndIf
:If ⍬≡length←{2=⎕NC ⍵:⍎⍵ ⋄ 6}'length'
length←''⍴¯1↑⍴ts
:EndIf
:If ~0∊⍴ts
:If 2=⍴⍴ts
buffer←{⍵/⍨0<⊃∘⍴¨⍵~¨⊂' ' 0}↓ts
'Invalid right argument: must be integer'⎕SIGNAL 11/⍨~326 163∊⍨∪⎕DR¨buffer
'Invalid right argument: must not be negative'⎕SIGNAL 11/⍨∨/¯1∊¨×¨buffer
'Invalid right argument: must be simple'⎕SIGNAL 11/⍨1≠∪≡¨buffer
:Else
'Invalid right argument: must be integer'⎕SIGNAL 11/⍨~326 163∊⍨⎕DR ts
'Invalid right argument: must not be negative'⎕SIGNAL 11/⍨¯1∊×,ts
'Invalid right argument: must be simple'⎕SIGNAL 11/⍨1≠≡ts
:EndIf
:EndIf
:If 2=⍴⍴ts
ts2←length↑[2]ts
:Else
ts2←,[0.5]length↑{0∊⍴⍵:⎕TS ⋄ ts}ts
:EndIf
:Select ⊃length
:Case 3
formatstring←'ZI4,<->,ZI2,<->,ZI2'
:CaseList 6 7
formatstring←'ZI4,<->,ZI2,<->,ZI2,< >,ZI2,<:>,ZI2,<:>,ZI2'
:Else
'Invalid left argument'⎕SIGNAL 11
:EndSelect
bool←(ts2∨.≠' ')∧ts2∨.≠0
r←bool⍀formatstring ⎕FMT(6⌊length)↑[2]bool⌿ts2
:If 7=2⊃⍴ts2
r←⊃(↓r),¨{0=⍵:'' ⋄ 0∊⍴⍵~' ':'' ⋄ '.',⍕⍵}¨ts2[;7]
:EndIf
:If 2≠⍴⍴ts
r←,r
:EndIf
∇
:EndNamespace ⍝ APLTreeUtils﻿:Namespace Base64
⍝ CHK's code, converted to Dyalog Classic+Unicode by MKROM
⎕IO←0 ⋄ ⎕ML←1
CharSet←'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
∇ rc←Encode txt;p
⍝p Encode messages into Base64 (MIME)
⍝o CHK 31.05.1999 <chk@hoesle-kienzlen.de>
⍝d How does base64 work? The purpose of the base64 algorithm is to
⍝d convert all 256 characters of the character set into the 64 characters
⍝d shown below, as those characters are common on all possible machines
⍝d through wich a mail message can pass on it's way through the Internet.
⍝d To do this, every 24 bits (3 8-bit characters) are split into 4 6-bit
⍝d chunks (=24 bits again). Those 6-bit chunks are used as an index into
⍝d the base64 alfabet. If the message does not contain a number of
⍝d characters divisible by 3, "=" characters are appended as padding after
⍝d encoding, to help the decoding function do it's work.
⎕SIGNAL((⎕DR txt)∊80 82)↓92     ⍝ Single-byte Chars only
p←(3×⌈(⍴txt)÷3)-⍴txt            ⍝ number of padding characters
txt←,⍉(8⍴2)⊤Char txt            ⍝ convert to 8-bit binary
txt←2⊥⍉((⌈(⍴txt)÷6),6)⍴txt,5⍴0  ⍝ re-convert every 6 bits to decimal
rc←(CharSet,'=')[txt,p⍴64]           ⍝ index into BASE64 alfabet (+ padding)
∇
∇ rc←Decode txt;p
⍝p Decode messages which are encoded in Base64 (MIME)
⍝o CHK 31.05.1999 <chk@hoesle-kienzlen.de>
⍝ the base 64 alphabet (= is the padding character):
txt←(txt∊CharSet)/txt  ⍝ process only BASE64 characters
p←-6×+/txt='='         ⍝ the number of padding bits
⍝ decode every 6 bits of the BASE64 text into ⎕AV:
rc←p↓,⍉(6⍴2)⊤CharSet⍳txt    ⍝ convert index to 6-bit binary
rc←⍉((⌊(⍴rc)÷8),8)⍴rc  ⍝ make chunks of 8 bits
rc←Char 2⊥rc           ⍝ re-convert to index into ⎕AV
∇
∇ r←Char x
⍝ Chars to numbers 0-255 and vice versa
:If 80=⎕DR' ' ⋄ r←⎕UCS x  ⍝ Unicode
:ElseIf 82=⎕DR x ⋄ r←83 ⎕DR x ⍝ Classic, Char=>Num
:Else ⋄ r←82 ⎕DR x           ⍝ Classic, Num=>Char
:EndIf
∇
:EndNamespace﻿:Namespace DrA
Version←'2.1' ⍝ This version integrated with MiServer
(⎕ML ⎕IO)←1
⍝  --- Developer Tools ---
∇ r←SetDefaults
⍝ Set default values for DrA globals
⍝ For interactive session:  ⎕TRAP←DrA.TrapGUI
⍝ For unattended operation: ⎕TRAP←DrA.TrapServer ⋄ DrA.NoUser←1
⍝                           and have a branch destination called RESUME
TrapGUI←((901 902)'E' '⎕SIGNAL 10+⎕EN')(0 'E' '⍎#.DrA.Start ⍎⎕FX #.DrA.(⎕NR ''_DrA_GetErrorInfo'')')
TrapServer←(⊂912 'C' '→RESUME'),TrapGUI
GUI_Title←AppName←'My Application'
Path←{(1-⌊/(⌽⍵)⍳'/\')↓⍵}⎕WSID ⍝ Application root ('DrA/' will be added)
Mode←1            ⍝ 1=Runtime, 2=Developer Mode, see Start
NoUser←0          ⍝ 1: Running unattended: Log Error, "Resume" (signals 912)?
⍝ 2: Means attempt to send e-mail
LogVars←0⍴⊂''     ⍝ List of variables to be included in all logs
SMTP_Gateway←''
MailMethod←'NONE'
MailRecipient←''
LogFn←''          ⍝ Set to name of external logging function if relevant
r←'DrA defaults applied'
∇
∇ {_NS}←{mode}Diagnose _PATH;⎕TRAP;_FILE;_TN;_HDR;_DATA;_Z;_M;_N
⍝ Create Diagnosis Namespace from file name or path name
⎕TRAP←0 'S'
:If 0=⎕NC'mode' ⋄ mode←1 ⋄ :EndIf
:If 0=⍴_PATH
_PATH←Path
_PATH←#.Files.Normalize _PATH,(('/\'∊⍨¯1↑_PATH)/'\'),'DrA'
:EndIf
:Trap 0
_TN←(_FILE←_PATH)⎕FSTIE 0 ⍝ Try to tie the file
:Else                  ⍝ If that fails, see if it was a path
:Select ⊃⍴_FILE←⎕FLIB _PATH
:Case 0 ⋄ ('No error files found in ',_PATH)⎕SIGNAL 11
:Case 1 ⋄ _FILE←,_FILE
:Else ⍝ Ask user to select a file
(⍕((⊃⍴_FILE),1)⍴⍳⊃⍴_FILE),'.',' ',_FILE
_Z←⎕
_FILE←_FILE[_Z;]
:EndSelect
_TN←_FILE ⎕FSTIE 0
:EndTrap
_HDR _DATA←⎕FREAD _TN,1
⎕FUNTIE _TN
_Z←↑[0.5]_HDR _DATA
_NS←⎕NS ⍬
:With _NS
_M←_Z[;1]⍳'⎕XSI' '⎕LC'
_Z[1⊃_M;2]←⊂,[1.5](⊃_Z[1⊃_M;2]),¨{'[',(⍕⍵),']'}¨⊃_Z[2⊃_M;2]
_Z←((2⊃_M)≠⍳⊃⍴_Z)⌿_Z
_Z[_M;2]←⊂↑⊃_Z[_M←_Z[;1]⍳⊂'⎕DM';2]
_M←_Z[;1]⍳⊂'TimeStamps'
_Z[_M;2]←⊂{((-5⌊n)↑[1]⍵)⍪(¯1↑⍴⍵)↑'(',(⍕n←1↑⍴⍵),' occurrences)'}'ZI4,<->,ZI2,<->,ZI2,< >,ZI2,<:>,ZI2,<:>,ZI2'⎕FMT(↑⊃_Z[_M;2])[;⍳6]
_M←_Z[;1]⍳⊂'Variables'
_Z[_M;2]←⊂{r←⍵ ⋄ r[;5]←40{w←,⍕⍵ ⋄ (⍺↑w),(⍺<⍴w)/'...'}¨r[;5] ⋄ 'Name' 'Shape' 'Depth' 'Bytes' 'Data'⍪r}⊃_Z[_M;2]
_M←_Z[;1]⍳⊂'Function'
_Z[_M;2]←⊂⎕FMT⊃_Z[_M;2]
DrAInfo←_Z
:If mode=1 ⋄ ⎕←⎕FMT¨DrAInfo
'Function Fixed: ',⎕FX(_HDR⍳⊂'Function')⊃_DATA
_Z←(_HDR⍳⊂'Variables')⊃_DATA
:If ∨/_M←_Z[;2]≡¨⍴¨_Z[;5] ⍝ Snapshot taken
_N←2⌈+/_M
⍎(,⍕_N⍴_M/_Z[;1]),'←_N⍴_M/_Z[;5]'
'Variables defined: ',,⍕_M/_Z[;1]
:EndIf
:If (0≠⍴_M)∧~∨/_M
'Variables not defined: ',,⍕(~_M)/_Z[;1]
:EndIf
:EndIf
:EndWith
∇
∇ r←Entry args
⍝ Called on entry to a function which is going to be debugged/monitored
⍝ Return Trap setting
⍝ Later: Turn on logging, etc...
Show'Entry'(2⊃⎕XSI)args
r←Trap
∇
∇ Exit result
⍝ Called on exit from a function which is being debugged/monitored
⍝ Currently does nothing, will later collect statistics
'Exit'result
∇
⍝ --- Error Handling ---
∇ ⍙00←_DrA_GetErrorInfo;⎕TRAP;⍙99;⍙98;⍙97;⎕IO;⍙95
⍝ Gather information for error logging
⎕TRAP←0 'C' '→ELSE' ⍝ Forget extra info if we fail
⎕TRAP←0 'S'
'⍙99'⎕NS''     ⍝ Create work NS
⍙99.Info←⎕DM(⍕⎕THIS)(1↓⎕XSI)(1↓⎕LC)⎕TS ⎕WA ⎕IO ⎕EN(,⊂⎕TS)⎕WSID('.'⎕WG'APLVersion')
⍙99.Hdr←'⎕DM' '⎕THIS' '⎕XSI' '⎕LC' '⎕TS' '⎕WA' '⎕IO' '⎕EN' 'TimeStamps' '⎕WSID' 'APLVersion'
⎕IO←1
⍙99.t←(⍙99.t⍳']')↓⍙99.t←2⊃(1⊃⍙99.Info),'' ''         ⍝ Line of code which failed
⍙99.t←(¯1+((~≠\⍙99.t='''')∧⍙99.t='⍝')⍳1)↑⍙99.t       ⍝ Without Comments
⍙99.t,←' ',{(¯1+⍵⍳'⍝')↑⍵}((⎕CR 2⊃⎕SI,⊂'')⍪' ')[1;]   ⍝ Add header of function which failed (up to comment)
⍙99.n←⍙99.t∊⎕A,⎕D,'#.abcdefghijklmnopqrstuvwxyz⍙∆_'  ⍝ Chars which could be part of names
⍙99.m←⍙99.n>¯1↓0,⍙99.n                               ⍝ Start of names
⍙99.t←∪#.DrA.LogVars,(⎕NL-2),(⍙99.n/⍙99.m)⊂⍙99.n/⍙99.t ⍝ Unique, individual names
:If 0≠⍴⍙99.t←(2=|⌊⎕NC ⍙99.t)/⍙99.t ⍝ Any are variables?
⍙99.t←⍙99.t,(↑{6::¯1 ⍬ ⋄ {(⍴⍵)(≡⍵)}⍎⍵}¨⍙99.t),(⎕SIZE ⍙99.t),[1.5]⊂⍬  ⍝ Names, shape, depth, sizes, slots for data
:If 0≠⍴⍙99.n←((100000>⍙99.t[;4])∧(¯1≢¨⍙99.t[;2])∧{6 11 16::1 ⋄ 0⊣⎕CLASS⍎⍵}¨⍙99.t[;1])/⍳⊃⍴⍙99.t ⍝ Log values of vars with size < 100,000 bytes
⍙99.t[⍙99.n;5]←⍎¨⍙99.t[⍙99.n;⎕IO]    ⍝ (in 5th column)
:EndIf
⍙99.Info,←⊂⍙99.t
:Else
⍙99.Info,←⊂0 5⍴0
:EndIf
⍙99.Info,←⊂⎕VR 2⊃⎕SI ⍝ Log the function definition
⍙99.Hdr,←'Variables' 'Function'
⍙00←⍙99.Hdr ⍙99.Info
→0
ELSE:
⎕←'DrA.GetErrorInfo failed' ⋄ ⎕←↑⎕DM
→NoUser⍴0
⎕TRAP←0 'S'
'⍙00'⎕WC'MsgBox' 'Trap in GetErrorInfo'⎕DM'Warn' ⋄ ⎕DQ'⍙00' ⋄ ⎕EX'⍙00'
⍙00←⍙99.Hdr ⍙99.Info
∘
∇
∇ msg←CallBack msg
⍝ Callback function for DrA
:Select 2⊃msg
:CaseList 'KeyPress' 'KEYPRESS'
:Select msg[4 6]
:Case 13 0 ⍝ Unshifted Carriage Return
⎕NQ(⊃msg)1001 ⍝ Enqueue 'Execute'
:Case 27 0 ⍝ Unshifted Escape
⎕NQ(⊃msg)1002 '' ⍝ Enqueue 'Exit' (with empty result)
:EndSelect
:EndSelect
∇
∇ _Z←Exec _X;_A;_P
⍝ Execute user input in DrA
_X←(+/∧\_X=' ')↓_X
:Select ⊃_X
:Case '→' ⍝ Branch Arrow
_Z←⍬
⎕NQ'MAIN.IN' 1002 _X ⍝ Branch on
:Case ')' ⍝ )SYSTEM CMD
_X _A←((_P-1)↑_X)((_P←_X⍳' ')↓_X)
:Select _X
:CaseList ')si' ')SI'
_Z←(2↓⎕XSI),¨'[',¨(⍕¨2↓⎕LC),¨']'
:CaseList ')ed' ')ED'
⎕ED _A ⋄ _Z←0⍴⊂''
:CaseList ')WSID' ')wsid'
_Z←,⊂⎕WSID
:Else
_Z←,⊂'System command "',_X,'"not supported.'
:EndSelect
:Else ⍝ Just something to execute
:Trap 0
_Z←(2⊃⎕NSI)⍎_X ⍝ Execute in namespace where DrA was called
_Z←↓⍕,⊂_Z
_Z←{1↓¨(_A=⎕AV[4])⊂_A←⎕AV[4],⍵}¨_Z
_Z←⊃,/_Z
:Else
_Z←⎕DM
:EndTrap
:EndSelect
∇
∇ {r}←{TIT}GuiMessage CTL;c;h;MSG;MSGBOX;TYPE;⎕IO;⎕TRAP;fname
⍝ Inform user of message 1⊃CTL with title TIT, box type 2⊃CTL
⍝ ... TIT    - Caption
⍝ ... CTL[1] - Message text
⍝ ... CTL[2] - Type: M/I(i)/Q(?)/W(!)/E
⍝ ... CTL[3] - Buttons: O/OC/RC/YN/YNC/ARI
⍝ ... CTL[4] - Default: 1/2/3
⍝ ... r      -  1 ~ Første knap (Ok/Ok    /Retry /Yes/Yes   /Abort)
⍝ ...           0 ~ Anden knap  (- /Cancel/Cancel/No /No    /Retry)
⍝ ...          ¯1 ~ Tredje knap (- /-     /-     /-  /Cancel/Ignore)
fname←'MSGBOX'
⎕IO←1 ⋄ ⍎(0=⎕NC'TIT')/'TIT←GUI_Title'
:If (NoUser≠0)∨LogFn∨.≠' ' ⋄ Log(⊂TIT),{1=≡⍵:⊂⍵ ⋄ ⍵}CTL ⋄ →0 ⋄ :EndIf
⍎(1=≡CTL)/'CTL←CTL ''INFO'' ''OK'' 1⋄→DO'
CTL[2]←('MSG' 'INFO' 'QUERY' 'QUERY' 'WARN' 'WARN' 'ERROR' 'MSG')['MIQ?W!E'⍳''⍴2⊃CTL]
→(3>⍴CTL)⍴DO
→(6<h←'O' 'OC' 'RC' 'YN' 'YNC' 'ARI'⍳⊂3⊃CTL)⍴DO
CTL[3]←(('OK')('OK' 'CANCEL')('RETRY' 'CANCEL')('YES' 'NO')('YES' 'NO' 'CANCEL')('ABORT' 'RETRY' 'IGNORE'))[h]
→(4>⍴CTL)⍴DO
CTL[4]←1 2 3 1⍳4⊃CTL
DO:
⎕TRAP←11 'C' '→ERR'
:If 1<≡⊃CTL
:AndIf 15<⍴1⊃CTL
(1⊃CTL)←(15↑1⊃CTL),⊂'...[',(⍕(⍴1⊃CTL)-15),' more lines removed]...'
:EndIf
fname ⎕WC('MSGBOX'TIT),CTL,⊂('EVENT'(61 62 63)1)
h←⎕WN'.' ⋄ →(0=⍴h←((⊂'FORM')≡¨h ⎕WG¨⊂'TYPE')/h)⍴GO
→(0=⍴h←(h ⎕WG¨⊂'ONTOP')/h)⍴GO
h ⎕WS¨⊂'ONTOP' 0
GO:⍝c←Ptr 0
r←62-2⊃⎕DQ fname
⍝c←Ptr c
⎕EX fname
→(0=⍴h)⍴0 ⋄ h ⎕WS¨⊂'ONTOP' 1
→0
ERR:'Invalid message parameters'⎕SIGNAL 11
∇
∇ _F Make _Q;_B;_E;_T;_O;_P
⍝ Make the DrA form. _Q: 1=User Mode, 2=Developer Mode
_E←('Event' 'KeyPress' 'CallBack')('Event'(1001 1002)1)
'#'⎕WS'3D' 'Plinth'
'MAIN'⎕WC'Form'('Dr. A says ...',(0≠⍴_F)/' [',_F,']')('Size' 600 800)('Coord' 'Pixel')('Font' 'Dyalog Std')('OnTop' 1)('Border' 2)('Event' 'Close' 1),_E
'MAIN.Tip'⎕WC'TipField'
'MAIN'⎕WS'TipObj' 'MAIN.Tip'
:If _Q=1 ⍝ User
'MAIN'⎕WS'Caption' 'System Error'
_T←⊂'You have encountered an error in ',AppName,'. Please report the following'
_T,←'information to your Administrator:' ''
_T,←(80⍴'=')''('Error description: ',⊃_M)''
:If 1<⍴_M ⋄ _T,←'Expression which failed: '(2⊃_M)'' ⋄ :EndIf
_T,←(⊂'Stack: '),(2↓⎕XSI,¨'[',¨(⍕¨⎕LC),¨']'),''(80⍴'=')
_T,←'' 'A diagnostic file has been created with the following name:' ''(_F,'.DCF')'' 'Please include this file when reporting the error.'
_T,←'' 'Click on RESUME below to end the current Engine call and attempt to resume'
_T,←'work (you may see this form several times before application execution resumes).' ''
_T,←⊂'NOTE: Even if the application resumes successfully, it is HIGHLY recommended that '
_T,←⊂'you restart the Application as soon as possible following an engine failure.'
_M←_T
:EndIf
'MAIN.OUT'⎕WC'Edit'_M(10 10)(515 780)('Style' 'Multi')('HScroll' ¯1)('VScroll' ¯1)('Attach' 'Top' 'Left' 'Bottom' 'Right'),_E
_B←(⍬ 100)('Attach' 'Bottom' 'Left' 'Bottom' 'Left')('Event' 'Select' 1),_E ⍝ Common Button Props
_O←10 ⋄ ⎕FX'_R←_P' '_R←565,_O ⋄ _O←_O+110' ⍝ Position of next button
:If _Q=2 ⍝ Developer
'MAIN.L1'⎕WC'Label' 'Input:'(535 10)('Attach' 'Bottom' 'Left' 'Bottom' 'Left')
'MAIN.IN'⎕WC'Edit' ''(535 60)(23 730),_E,('Attach' 'Bottom' 'Left' 'Bottom' 'Right')('Tip' 'Enter APL expressions here and hit ENTER to execute them')
⎕NQ'MAIN.IN' 'GotFocus'
:If 'D'=4 1⊃'.'⎕WG'APLVersion'
'MAIN.Debug'⎕WC'Button' 'Debug'_P,_B,⊂('Tip' 'Exit from Dr. A to the APL Session')
:EndIf
'MAIN.Cont'⎕WC'Button' '→⎕LC'_P,_B,⊂('Tip' 'Resume execution of the suspended function')
'MAIN.Edit'⎕WC'Button' 'Edit'_P,_B,⊂('Tip' 'Edit the suspended function')
:If 4≤⍴⎕XSI ⋄ _T←(4⊃⎕XSI),'[',(⍕4⊃⎕LC),']'
'MAIN.Pop'⎕WC'Button' 'Pop'_P,_B,⊂('Tip'('Signal the error at ',_T))
:EndIf
:EndIf
'MAIN.Res'⎕WC'Button' 'Resume'_P,_B,⊂('Tip' 'Attempt to resume execution')
'MAIN.Copy'⎕WC'Button' 'Copy'_P,_B,⊂('Tip' 'Copy diagnostic message to clipboard')
'MAIN.Send'⎕WC'Button' 'Send e-Mail'_P,_B,⊂('Tip' 'Send diagnostic e-mail') ⍝ Disabled until further notice
⍝ 'MAIN.End'⎕WC'Button' 'Exit'_P,_B,⊂('Tip' 'Terminate ',AppName)')
∇
∇ F←Info MakeFile Dir;get;Z;D;F;TN;TS;MKDIR;old;⎕TRAP
⍝ Create a DrA Error Log file under the installation directory
⎕TRAP←0 'C' '→ELSE'
Dir←#.Files.Normalize Dir,((~'/\'∊⍨¯1↑Dir)/'\'),'DrA/'
get←{(2,(1⊃⍺)⍳⊂⍵)⊃⍺}                     ⍝ Info retrieval function
F←,'ZI4,ZI2,ZI2'⎕FMT 1 3⍴⎕TS             ⍝ Todays date
F←F,'_'{(0≠⍴⍵)/⍺,⍵},'[]#'~⍨{(1-(⌽⍵)⍳'.')↑⍵},Info get'⎕THIS' ⍝ Class
F←F,'_',({(1-(⌽⍵)⍳'.')↑⍵}⊃(Info get'⎕XSI'),⊂''),'_' ⍝ Function Name
F←F,(,'ZI4'⎕FMT⊃(Info get'⎕LC'),0),'_'   ⍝ Line Number
F←F,,'ZI4'⎕FMT Info get'⎕EN'             ⍝ Event Number
:If ~#.Files.DirExists Dir
:EndIf
:If 0≠TN←{0::0 ⋄ ⍵ ⎕FSTIE 0}Dir,F        ⍝ Is there already a file for this error from today?
TS←(⎕FREAD TN,1)get'TimeStamps'
((2,(1⊃Info)⍳⊂'TimeStamps')⊃Info)←TS,Info get'TimeStamps'
⎕FDROP TN,-/2↑⎕FSIZE TN              ⍝ We will overwrite it
:Else
TN←(Dir,F)⎕FCREATE 0
(1 3⍴0 ¯1 0)⎕FSTAC TN
:EndIf
Info ⎕FAPPEND TN
⎕FUNTIE TN
F←Dir,F
→0
ELSE:
F←''
⎕TRAP←0 'S' ⍝ 0 'C' '→0'
'Error Logging System'GuiMessage('Unable to create error log file' ''(Dir,F))'E' 'O'
∇
∇ _R←Resume;_T;_Q
⍝ Determine whether we can resume execution by →ABORT, →0 or another ⎕SIGNAL 902
:If 2<⍴_T←⎕XSI
_T←⎕CR 3⊃_T                ⍝ Source of calling function
_Q←((⊃⍴_T),10)↑(':'∊_T)⌿_T ⍝ 1st 10 cols of labelled lines
_Q←(+/∧\' '=_Q)⌽_Q         ⍝ Remove leading Blanks
:If ∨/_Q[;⍳6]∧.='ABORT:'   ⍝ There is an ABORT: label
_R←'→ABORT'            ⍝ Try branching to it
:Else
:If (3=⍴⎕XSI)∧0≠1↑⍴_T  ⍝ If this is the last function on the stack
_Q←('←'∊_Q)/(¯1+_Q⍳'←')↑_Q←_T[1;] ⍝ Name of result
_Q←(2≠⎕NC _Q)/_Q                  ⍝ Don't set it if it already has a value
_R←((0≠⍴_Q)/_Q,'←¯1 ''Trap'' ''Execution Failed due to a Trapped Error in ',(10↓⊃¯1↑⎕XSI),''''),' ⋄ →0' ⍝ Set result (if any) and →0
:Else
_R←'''POP'' ⎕SIGNAL 902' ⍝ We must pop again
:EndIf
:EndIf
:If NoUser=2 ⋄ MailReport _F ⋄ :EndIf ⍝ Unattended with e-mail option
:Else
_R←'' ⍝ There is no calling function?
:EndIf
∇
∇ Show x;Form
'Form'⎕WC'Form' 'DrA.Show'
'Form.T'⎕WC'Text'(⍕x)(50 50)
⎕DQ'Form'
∇
∇ _R←Start _INFO;_F;_D;_E;_I;_Z;_N;_X;_M;⎕TRAP;_G;_T;MAIN;CLIP
⍝ Main Entry point when errror is trapped
⍝ Create a log file, then allow a developer to inspect a problem
⍝ Globals: Mode   (0=off, 1=runtime, 2=developer mode)
⍝          Path   (Where to create log files)
⍝          NoUser (1 means there is no user interface, so don't pop up, 2 means send e-mail)
⎕TRAP←0 'C' '→_ERR'
_D _E←(2⊃_INFO)[(1⊃_INFO)⍳'⎕DM' '⎕EN']
_R←'' ⍝ Return a string to be executed by the calling ⎕TRAP
LastFile←''
:If _E≠912 ⍝ If resuming, don't make file
LastFile←_F←_INFO MakeFile Path
⎕←↑LastError←_D ⍝ Display Diagnostic Message in session
:EndIf
:If NoUser≠0 ⋄ _R←Resume ⋄ →0 ⋄ :EndIf ⍝ If no user interface, just "Resume"
:If Mode=2 ⋄ ⎕TRAP←0 'S' ⋄ :EndIf
:Select _E
:Case 911 ⋄ _M←(⊂'Stack Popped'),¯2↑_D ⍝ Stack Popped one level
:Case 912 ⋄ _R←Resume ⋄ →0             ⍝ Resume
:Case 1001 ⋄ _M←(⊂'Stop'),¯2↑_D
:Else ⋄ _M←_D,(0=⍴_D)/,⊂''
:EndSelect
_F Make Mode
:Repeat
'MAIN'⎕WS'Cursor' 0
_I←⎕DQ'MAIN'
:If 0≠⍴_I
'MAIN'⎕WS'OnTop' 0 ⍝ Don't need to be OnTop after user has done anything...
'MAIN'⎕WS'Cursor' 1
:Select 2⊃_I
:Case 1001 ⍝ Execute
_Z←Exec _X←'MAIN.IN'⎕WG'Text'
_Z←('MAIN.OUT'⎕WG'Text'),(⊂'      ',_X),_Z
_N←¯1+⌊(⊃'MAIN.OUT'⎕WG'Size')÷⊃'MAIN.OUT'⎕WG⊂'TextSize' 'xxx'
_Z←(-_N⌊⍴_Z)↑_Z
'MAIN.OUT'⎕WS'Text'_Z
'MAIN.IN'⎕WS'Text' '' ⋄ ⎕NQ'MAIN.IN' 'GotFocus'
:Case 1002 ⍝ Branch (enqueued by DrAExec)
_R←3⊃_I ⋄ :Leave
:CaseList 'Select' 'SELECT' ⍝ One of the buttons
:Select ⊃_I
:Case 'MAIN.Debug'
_R←'' ⋄ :Leave
:Case 'MAIN.Cont'
_R←'→⎕LC' ⋄ :Leave
:Case 'MAIN.Edit'
⎕ED 2⊃⎕XSI
:Case 'MAIN.Copy'
'CLIP'⎕WC'ClipBoard'('Text'('MAIN.OUT'⎕WG'Text'))
:Case 'MAIN.Send'
MailReport _F
:Case 'MAIN.Pop'
_R←'→⎕SIGNAL 901' ⋄ :Leave
:Case 'MAIN.Res'
_R←Resume ⋄ :Leave
:Case 'MAIN.End'
⎕OFF
:EndSelect
:EndSelect
:EndIf
:Until 9≠⎕NC'MAIN'
⎕EX'MAIN'
→0
_ERR:
⎕TRAP←0 'S'
'Internal DrA Error'GuiMessage(⎕DM)'E' 'O'
_R←Resume
→0
∇
∇ Log text;⎕PW
⎕PW←255
:If 1=≡text ⋄ text←,⊂text ⋄ :EndIf
:If 3=⎕NC LogFn ⋄ (⍎LogFn)text
:Else ⋄ ⎕←,[1.5]text ⋄ :EndIf
∇
⍝ --- Mail Tools ---
∇ MailReport _F;_X;_T;_M;_Z
:Trap 0
⎕←_F
_T←_F ⎕FSTIE 0
_X←⎕FREAD _T,1
⎕FUNTIE _T
_M←~(⊃_X)∊'Variables' 'Function'
_X←⍉_M/↑_X
_X←(_X[;1],¨'='),¨,∘⍕¨_X[;2]
:If (⊃_Z←(_F,'.dcf')Send _X)∊0 221
'DrA Message Interface'GuiMessage(,⍕1↓_Z)'I' 'O'
:Else
'DrA Message Interface'GuiMessage('Attempt to send message failed:'(,⍕_Z)'Please send the following log file to your application helpdesk:'_F)'E' 'O'
:EndIf
:Else
'DrA Message Interface'GuiMessage'Unable to send message' 'E' 'O'
:EndTrap
∇
∇ z←att Send text;⎕TRAP
⍝ Send message to MailRecipient
:If 9=⎕NC'Mailer'
att Mailer.Send text
:Else
'No mailer defined'⎕SIGNAL 11
:EndIf
∇
∇ z←{att}SendNetMail text;⎕USING;M;P;PORT
⍝ Send
z←0 ''
:Trap 0
⎕USING←'System' 'System.Net,System.dll'
:If 2=≡text ⋄ text←⊃,/text,¨⎕UCS 13 ⋄ :EndIf
M←⎕NEW Mail.MailMessage(MailRecipient MailRecipient('DrA Error Report for ',AppName)text)
M.Attachments.Add ⎕NEW Mail.Attachment(att(⎕NEW Mime.ContentType(⊂'application/binary')))
P←SMTP_Gateway⍳':'
PORT←⊃2⊃⎕VFI{⍵,(0=⍴⍵)/'25'}P↓SMTP_Gateway
(⎕NEW Mail.SmtpClient(((P-1)↑SMTP_Gateway)PORT)).Send M
M.Dispose
z←0 'Message sent to ',MailRecipient
:Case 90
z←90((⎕UCS 10)~⍨'Unable to send message: ',⎕EXCEPTION.Message,(⎕UCS 13),{(⍵⍳⎕UCS 13)↑⍵}⍕⎕EXCEPTION.InnerException)
:Else
z←1('Unable to send message: ',1⊃⎕DM)
:EndTrap
∇
∇ z←{att}SendSMTP text
⍝ Send message to MailRecipient via SMTP
⍝      Left argument is attachments
'smtp mail library not loaded'⎕SIGNAL(9≠⎕NC'##.SMTPMail')/11
:If 0=⎕NC'att' ⋄ att←⍬ ⋄ :EndIf
z←att SendSMTPMessage MailRecipient MailRecipient('DrA Error Report for ',AppName)text
∇
∇ z←{att}SendSMTPMessage ctl;to;from;subj;text;CRLF;atts;a;d;i;tn;smtp
smtp←##.SMTPMail
to from subj text←ctl
CRLF←⎕UCS 13 10
:If 0=⍴smtp.SERVERID←SMTP_Gateway
z←1('SMTP Gateway not configured') ⋄ →0
:EndIf
:If (⍴smtp.SERVERID)≥i←smtp.SERVERID⍳':'
smtp.PORT←⊃2⊃⎕VFI i↓smtp.SERVERID
smtp.SERVERID←(i-1)↑smtp.SERVERID
:Else ⋄ smtp.PORT←25 ⍝ Default
:EndIf
:If 2=≡text ⋄ text←↑text ⋄ :EndIf
:Trap 0
atts←''
:If 2=⎕NC'att'
:If (0≠⍴att)∧1=≡att ⋄ att←,⊂att ⋄ :EndIf
:For a :In att
tn←a ⎕NTIE 0 ⋄ (¯1+⍳256)⎕NXLATE tn
d←⎕NREAD tn,(⎕DR'A'),⎕NSIZE tn ⋄ ⎕NUNTIE tn
d←smtp.stuff smtp.∆b64enc d ⍝ Encode and stuff
a←⌽(¯1+a⍳'\')↑a←⌽a          ⍝ Last fragment of file name
atts←atts,⊂a d              ⍝ File name and data
:EndFor
:EndIf
:Else
z←1('Error processing attachment ',a,': ',⊃⎕DM) ⋄ →0
:EndTrap
→(0≠⊃z←smtp.logon from)⍴0
→(0≠⊃z←(,⊂'To: ',to)smtp.sendmail subj(72 smtp.stuff text),atts)⍴0
{}smtp.logoff
∇
⍝ --- HTML Tools ---
∇ html←{linkpage}GenHTML file;z;files;r;isChar;subst;i
⍝ Generate HTML error report
⍝ If file is empty, list files, with links to individual files
⍝ If file identifies specific file, show that output
isChar←{(10|⎕DR ⍵)∊0 2}
subst←{(a b)←⍺ ⋄ w←⍵ ⋄ ((w∊a)/w)←⊂b ⋄ ∊w}
:If 0=⎕NC'linkpage' ⋄ linkpage←'' ⋄ :EndIf
:If 0≠⍴file ⍝ A file selected
z←0 Diagnose((~∨/'\/'∊file)/Path,'DrA/'),file
z←z.DrAInfo
z[;2]←{2=⍴⍴⍵:,(⍕⍵),⎕UCS 13 ⋄ ⍕⍵}¨z[;2]
z[;2]←((⎕UCS 13)'<br>')∘subst¨(' ' '&nbsp;')∘subst¨('>' '&gt;')∘subst¨('<' '&lt;')∘subst¨z[;2] ⍝ NL => <br>
i←z[;1]⍳'⎕DM' 'Function' 'Variables'
z[i;2]←{'<code>',⍵,'</code>'}¨z[i;2]
i←'/DrA/',((1-⌊/(⌽file)⍳'/\')↑file),'.dcf'
z⍪←'LogFile'('<a href="'i,'">',i,'</a>')
html←'border=1 align="top"'HTMLTable z
:Else ⍝ List Files
r←0 2⍴⊂''
:If 0≠⍴files←{(⍴⍵)↓¨{(-+/∧\' '=⌽⍵)↓¨↓⍵}⎕FLIB ⍵}Path,'DrA/'
z←{'<a href="',linkpage,'&LogFile=',⍵,'">',(9↓⍵),'</a>'}¨files
z←({(4↑⍵),'-',(⍵[5 6]),'-',(⍵[7 8])}¨8↑¨files),[1.5]z
r←r⍪'Date' 'Subject'⍪z[⍒↑z[;1];]
html←'border=1'HTMLTable r
:Else
html←'(no error log files in ',Path,'DrA)'
:EndIf
:EndIf
html←'<font face="APL385 Unicode">',html,'</font>'
∇
∇ r←{options}HTMLTable data;NL
⍝ Format an HTML Table
NL←⎕UCS 13 10 ⍝ CR LF
:If 0=⎕NC'options' ⋄ options←'' ⋄ :EndIf
r←,∘⍕¨data                     ⍝ make strings
r←,/(⊂'<td>'),¨r,¨⊂'</td>'     ⍝ enclose cells to make rows
r←⊃,/(⊂'<tr>'),¨r,¨⊂'</tr>',NL ⍝ enclose table rows
r←'<table ',options,'>',r,'</table>'
∇
:EndNamespace
﻿:Namespace Files
⍝ Description::
⍝ The Files library provides cross-platform tools for use with native files.
⍝ It is the successor to the Files workspace that was distributed with Dyalog APL up to version 15.0
⍝
⍝ Overview::
⍝ This namespace is completely stand-alone and requires no other code to run
⍝
⍝ Functions::
⍝
⍝ data Append filename              - appends data to existing file
⍝ text AppendText filename          - appends (single-byte) text to filename
⍝ text AppendTextU filename         - appends unicode text to filename (NB: no validation or transformation of encodings, use responsibly!)
⍝ t←Nopen filename                  - create/open native file
⍝ data Put filename                 - Put data into filename
⍝ text PutText filename             - write (single-byte) text to filename
⍝ text PutTextU filename            - writes unicode text to filename, encoding might be specified as 2nd right arg (UTF-8 is dflt)
⍝ (tn name)←{dcf}CreateTemp pattern - create a temporary-file in specified dir and return tie-number
⍝                                     (if dcf=1, create a dcf-file, otherwise native)
⍝ R←GetBom Filename                 - returns the "byte order mark" of a file
⍝ R←{vtv}ReadText filename          - returns content of file (vtv=1: as a vtv of lines, otherwise simple vector)
⍝
⍝ {protect}Copy (from to)           - copies a file, optionally failing if "protect" is set and "to" exists
⍝ R←Exists path                     - check if file or directory exists
⍝ {z}←Delete path                   - delete file or directory
⍝ Move (from to)                    - move a file from "from" to "to"
⍝
⍝ MkDir path                        - make a directory
⍝ RmDir path                        - remove directory
⍝ R←{types}Dir pattern              - a ⎕NINFO-compatible replacement of the "Dir"-fn which was moved to WinFiles (types matches ⍺ of ⎕NINFO)
⍝ R←{pattern} List path             - a cover for "Dir", compatible with MiServer's Files.List
⍝
⍝ Functions to deal with component files:
⍝ c←idx FREAD filename              - read specified component from file (
⍝ t←RDCIFromTS ts                   - convert ⎕TS style data into ⎕FRDCI timestamp form
⍝ ts←TSFromRDCI ts                  - Convert ⎕FRDCI timestamps to ⎕TS form
⍝ ts←TSOfComp tn                    - Find timestamp of component tie,n
⍝ r←filename Fopen tieno            - opens component file (creating it if necessary) and returns tieno. Optional tieno[2] controls exclusive access.
⍝
⍝
⍝ Notes::
⍝ When migrating from MiServer/Utils/Files.dyalog...
⍝ MiServer also included an early version of Files.dyalog, but the focus on this re-implementation was compatibility with Files.dws,
⍝ so a few fns were changed and some taken away. Here's a list of differences to consider when migrating to this new class:
⍝
⍝    * Changed:
⍝        * DirExists w -> 1 Exists w
⍝        * GetText w -> 0 ReadText w  (alias created 14 Nov 2019)
⍝        * GetVTV w -> 1 ReadText w   (alias created 14 Nov 2019)
⍝        * {pattern}List path
⍝            * previously would return '.' and '..' - no longer does!
⍝            * List '/dir' will (as it did before) return info about the DirName, but the casing of the name will be the one from the argument, not "normalized", as used to be (maybe even ⎕NINFO should do this?)
⍝
⍝    * Removed
⍝        * GetCurrentDirectory & SetCurrentDirectory
⍝        * LikelyURL
⍝        * SplitFilename - use ⎕NPARTS instead
⍝        * _Filetime_to_TS -->use  WinFiles._Filetime_to_TS
⍝        * _CMD, _SH
⍝        * isWin
⍝        * unixfix
⍝        * APLVersion
(⎕IO ⎕ML)←1
∇ R←Version
:Access public shared
R←'Files' '1.0.2' '2019-11-14'
∇
Normalize←∊1∘⎕NPARTS ⍝ normalize a file name
SplitFilename←1∘⎕NPARTS ⍝ splits a file name
Filename←{∊1↓1⎕NPARTS ⍵} ⍝ return file name only
eis←{(,∘⊂)⍣((326∊⎕DR ⍵)<2>|≡⍵),⍵} ⍝ Enclose if simple
⍝ aliases for backward compatibility
GetText←{0 ReadText ⍵}
GetVTV←{1 ReadText ⍵}
∇ r←data Append name
⍝ Append "data" to file specified by "name", creating the file if needed
⍝ r - number of bytes written
r←data{(⎕NUNTIE ⍵)⊢⍺ ⎕NAPPEND ⍵}name Nopen 0
∇
∇ r←text AppendText name;tn
⍝ Append single-byte "text" to file specified by "name", creating the file if needed
⍝ r - number of bytes written
r←text{(⎕NUNTIE ⍵)⊢⍺ ⎕NAPPEND ⍵(⎕DR' ')}name Nopen 0
∇
∇ {r}←text PutText name_encoding;name;encoding;nl
⍝ Write text to file (single byte)
⍝ name_encoding - filename [encoding]
⍝ text - character scalar, vector, matrix or vtv
⍝ r - number of bytes written
:If 1<≡name_encoding
(name encoding)←name_encoding
:Else
name←name_encoding
encoding←(1+127∨.<⎕UCS text)⊃'ANSI' 'ASCII'
:EndIf
:If 1<⍴⍴text
text←,text,⎕UCS nl←10
:Else
nl←(<\(⎕UCS 10 13)∊text)/10 13
:EndIf
r←(text encoding nl)⎕NPUT name
∇
∇ {r}←text PutTextU name_encoding;name;encoding;nl
⍝ Write text to file (unicode)
⍝ name_encoding - filename [encoding]
⍝ text - character scalar, vector, matrix or vtv
⍝ r - number of bytes written
:If 1<≡name_encoding
(name encoding)←name_encoding
:Else
name←name_encoding
encoding←'UTF-8'
:EndIf
:If 1<⍴⍴text
text←,text,⎕UCS nl←10
:Else
nl←(<\(⎕UCS 10 13)∊text)/10 13
:EndIf
r←(text encoding nl)⎕NPUT name
∇
∇ r←{vtv}ReadText name
⍝ Return the contents of a text file (single byte or Unicode)
⍝ name - the name of the file
⍝ vtv - (optional, default = 0) if 1, return contents as a vector of text vectors
⍝ r - the contents of the file as specified by vtv
vtv←{0::⍵ ⋄ vtv}0
r←⊃⎕NGET name vtv
∇
∇ {r}←text AppendTextU name;tn;bom;bytes;num;le;int
⍝ Append text to existing file. This will transform the data into the current encoding of the file
⍝ but will not modify the file's encoding, i.e. you cannot append unicode to an ASCII-File. (Will throw error)
⍝ r=number of bytes written
int←{¯128+256|128+⍵}
bom←GetBom name ⋄ bytes←2+2×∨/'32'⍷bom ⋄ le←∨/'LE'⍷bom
tn←name ⎕NTIE 0
:Select bom
:CaseList 'UTF-8' 'UTF-8-NOBOM' ⋄ r←(int'UTF-8'⎕UCS text)⎕NAPPEND tn 83
:CaseList 'UTF-16BE' 'UTF-16LE' 'UTF-32BE' 'UTF-32LE' 'UTF-16' 'UTF-32'
num←(bytes⍴256)⊤(6↑bom)⎕UCS text
num←int,⍉le{⍺:⊖⍵ ⋄ ⍵}num
{}num ⎕NAPPEND tn 83
:Else
('Unrecognized bom: ',bom)⎕SIGNAL 11 ⍝ issue DOMAIN ERROR if file's bom not recogized
:EndSelect
⎕NUNTIE tn
∇
∇ r←filename Fopen tn
⍝ Ties a component file (creates if not found) and returns tieno.
⍝ tn[1] is the tie number (0 to get next available)
⍝ tn[2] is optional (default=0) where a value of 1 indicates to tie exclusively
tn←2↑tn ⍝ default to shared tie
:Trap 22
r←filename{⍵[2]:⍺ ⎕FTIE ⍵[1] ⋄ ⍺ ⎕FSTIE ⍵[1]}tn
:Else
r←filename{⍵[2]:⍵[3] ⋄ ⍺ ⎕FSTIE ⍵[1]⊣⎕FUNTIE ⍵[3]}tn,filename ⎕FCREATE tn[1]
:EndTrap
∇
∇ r←comp FREAD filename
⍝ Read component comp from file named filename
⍝ FREAD ties, reads the component, and unties
r←comp{⍺{(⎕FUNTIE ⍵)⊢⎕FREAD ⍵ ⍺}⍵ ⎕FSTIE 0}filename
∇
∇ r←filename Nopen args;wipe;tn
⍝ Opens (ties) a native file (creates if not found) and returns tieno.
⍝ args[1] - the tie number (0 to get next available)
⍝ args[2] - (optional) 1 indicates to empty the file (0 ⎕NRESIZE)
⍝ r is either the tie number or 0 if the operation failed
(tn wipe)←2↑args
:Trap 22
r←filename ⎕NCREATE tn
:Else
r←filename ⎕NTIE tn
:EndTrap
:If wipe ⋄ 0 ⎕NRESIZE r ⋄ :EndIf
∇
∇ r←data Put args;name;disposition
⍝ Puts data to a native file, either creating the file or overwriting it if it exists
⍝ data - the data to be written
⍝ args[1] - the name of the file to write to
⍝ args[2] - 0 (default) error if file exists
⍝           1 - overwrite if file exists
⍝           2 - append if file exists
⍝ r - number of bytes written or ¯1 if the file exists and was not to be overwritten
args←eis args
(name disposition)←args,(⍴args)↓'' 0
:If disposition<⎕NEXISTS name
r←¯1
:Else
r←data{(⎕NUNTIE ⍵)⊢⍺ ⎕NAPPEND ⍵(⎕DR ⍺)}name Nopen 0,disposition=1
:EndIf
∇
∇ r←GetBom Filename;nu;bin2hex
⍝ returns the BOM of specified file (matching the file-encodings documented @ http://help.dyalog.com/16.0/Content/Language/System%20Functions/nget.htm#Encodings )
bin2hex←{(⎕D,⎕A)[1+2⊥⍉((0.25×⍴⍵),4)⍴⍵]}  ⍝ may have a small impact on performance, but improves readability
nu←Filename ⎕NTIE 0 64  ⍝ asking for the BOM of a non-existent file will cause an error
⍝ look at the first bytes and try to determine encoding
:Select 1
:Case 'EFBBBF'≡bin2hex ⎕NREAD nu,11 3 0 ⋄ r←'UTF-8'
:Case '0000FEFF'≡bin2hex ⎕NREAD nu,11 4 0 ⋄ r←'UTF-32BE' ⍝ Big Endian
:Case 'FFFE0000'≡bin2hex ⎕NREAD nu,11 4 0 ⋄ r←'UTF-32LE' ⍝ Little Endian
:Case 'FEFF'≡bin2hex ⎕NREAD nu,11 2 0 ⋄ r←'UTF-16BE'     ⍝ Big Endian
:Case 'FFFE'≡bin2hex ⎕NREAD nu,11 2 0 ⋄ r←'UTF-16LE'     ⍝ Little Endian
:Else  ⍝ if the file had no BOM
⎕NUNTIE nu
r←2⊃⎕NGET Filename   ⍝ read it with ⎕NGET and get the encoding from its result...
:EndSelect
⎕NUNTIE nu
∇
∇ {protect}Copy FmTo;nu1;nu2;seg;fSize1;pos
⍝ Copies a file
⍝ FmTo - 2 element vector of [1] the source file name, [2] the destination file name
⍝ protect - optional flag indicating whether to fail if destination file (protect=1) exists, default is 0
protect←{6::⍵ ⋄ protect}0
nu1←nu2←0
⎕SIGNAL(protect∧Exists 2⊃FmTo)/⊂('EN' 22)('Message' 'Destination file exists')
:Trap 0
Delete 2⊃FmTo
nu1←(1⊃FmTo)⎕NTIE 0
nu2←(2⊃FmTo)⎕NCREATE 0
seg←(fSize1←⎕NSIZE nu1)⌊0.2×⎕WA  ⍝ length of segments per pass: use 20% of the free ws
pos←0  ⍝ start at position 0
:Repeat
(⎕NREAD nu1,83,seg,pos)⎕NAPPEND nu2,83
pos+←seg
:Until pos≥fSize1
⎕NUNTIE nu1,nu2
:Else
⎕NUNTIE nu1,nu2
⎕SIGNAL⊂'EN' 'EM' 'Message'{⍺(⍵⍎⍺)}¨⎕DMX
:EndTrap
∇
∇ {r}←{x}Delete name
⍝ Delete specified file or directory
⍝ name - the file or directory name
⍝ x - optional Boolean to indicate to NOT signal an error if the file does not exist
⍝ r - 1 if a file/directory was deleted, 0 otherwise (file/directory didn't exist)
x←{6::⍵ ⋄ x}0
:Trap 0
r←x ⎕NDELETE name
:Else
⎕SIGNAL⊂'EN' 'EM' 'Message'{⍺(⍵⍎⍺)}¨⎕DMX
:EndTrap
∇
∇ r←{types}Dir path;dir
⍝ Cover for ⎕NINFO wildcarded file search
⍝ path - character vector file path to search (may include wildcards)
⍝ types - (optional) the types of information to return, if omitted, just return the matching filenames
⍝ r - a vector of vectors, with each element corresponding to an element in types
⍝
⍝ Note: this function differs in syntax from the Dir utility found in the files workspace in versions of Dyalog old than v16
⍝       The old version is available in WinFiles for Windows-only
:If 0=⎕NC'types'
types←⊢
:EndIf
r←,types(⎕NINFO⍠1)path
∇
∇ r←{pattern}List path;hasPattern;isFolder
⍝ path and pattern are related.
⍝ If there is no pattern (or pattern is empty)
⍝   If path ends with '/' or '\' then return information for the contents of the folder, otherwise, return information about the folder (or file) itself
⍝ If a non-empty pattern exists, it is used as a filter on the contents of path (path is treated as a folder name)
⍝ Examples:
⍝   List '/dir/foo'  ⍝ returns information about /dir/foo
⍝   List '/dir/foo/' ⍝ returns information about the contents of /dir/foo/
⍝   '*.dyalog' List '/dir/foo'  ⍝ returns information about the .dyalog files in /dir/foo/
⍝   List '/dir/foo/*.dyalog'    ⍝ also returns information about the .dyalog files in /dir/foo/
⍝ Information returned is:
⍝ [;0] Name [;1] Length [;2] LastAccessTime [;3] IsDirectory
⍝ (cover for MiServer's Files.List)
r←0 4⍴'' 0 ⍬ 0
path←Normalize path
hasPattern←~0∊⍴pattern←{6::⍵ ⋄ pattern}''
isFolder←'/'=¯1↑path
:If isFolder≠hasPattern
pattern←'/',pattern,hasPattern↓'*'
:EndIf
:Trap 22  ⍝ file name error (file not found)
r←⍉↑0 2 3 1(⎕NINFO⍠1)path,pattern
r[;4]←r[;4]=1           ⍝ flag directories
r[;1]←Filename¨r[;1]  ⍝ remove paths
:EndTrap
∇
Exists←{
⍝ test for existence of file or folder
⍝ ⍺ - optional flag where 1 indicates test for folder (default is 0)
⍺←0 ⋄ ⎕NEXISTS ⍵,⍺/'/'}
DirExists←1∘Exists
MkDir←{
⍝ create a directory (cover for ⎕MKDIR)
⍺←⊢ ⋄ ⍺ ⎕MKDIR ⍵}
∇ Move filenames
⍝ move/rename file
⍝ filenames - [1] source file name [2] destination file name
:Trap 0
⎕NUNTIE(2⊃filenames)⎕NRENAME((1⊃filenames)⎕NTIE 0)
:Else
⎕SIGNAL⊂'EN' 'EM' 'Message'{⍺(⍵⍎⍺)}¨⎕DMX
:EndTrap
∇
∇ RmDir path
⍝ removes directory specified in path.
⍝ path - directory name to remove
:If 1 Exists path
:Trap 0
⎕NDELETE path
:Else
⎕SIGNAL⊂'EN' 'EM' 'Message'{⍺(⍵⍎⍺)}¨⎕DMX
:EndTrap
:Else
⎕SIGNAL⊂('EN' 22)('Message' 'Directory does not exist')
:EndIf
∇
∇ t←RDCIFromTS ts;s;⎕IO
⍝ Accepts a numeric vector or array in ⎕TS format with 7≥¯1↑⍴argument
⍝ Returns time and date in ⎕FRDCI format with shape ¯1↓⍴argument
⎕IO←0 ⋄ s←¯1↓⍴ts ⋄ ts←((1⌈×/s),¯1↑⍴ts)⍴ts
ts←((1↑⍴ts),7)↑ts ⍝ years<100 are in window 1950-2049
ts[;0]+←(ts[;0]≤99)×(50/2000 1900)[100|ts[;0]]
ts[;6]×←6÷100     ⍝ turn milisecs into 1/60th units
t←¯60 ¯29 ¯1 30 60 91 121 152 183 213 244 274[ts[;1]-1]
t-←(4|ts[;0])<2≥ts[;1]
t←(t+⌊365.25×¯60+1900|ts[;0]),0 2↓ts
t←¯18626112000+s⍴1 1 24 60 60 60⊥⍉t
∇
∇ ts←TSFromRDCI ts;md;s;sm;yr;z;⎕IO
⍝ Returns ⎕TS style timestamps (shape (⍴argument),7) - note that RDCI is UTC, so some Timezone-Conversion might be required...
⎕IO←0 ⋄ s←⍴ts ⋄ ts←,ts+18626112000
md←365.2501|1+1461|yr←⌊ts÷5184000
sm←31 61 92 122 153 184 214 245 275 306 337 366
z←(,⍉<⍀sm∘.≥md)/,((⍴md),12)⍴⍳12
md←(1+12|z+2),[0.1]⌈md-(0,sm)[z]
ts←(1960+⌊(yr+60)÷365.25),md,⍉24 60 60 60⊤ts
ts[;6]←⌊0.5+ts[;6]×100÷6
ts←(s,7)⍴ts
∇
∇ ts←ComponentTS tncomp
⍝ Returns ⎕TS-style component timestamp
⍝ tncomp - [1] tie number, [2] component number
ts←TSFromRDCI(2+⎕IO)⊃⎕FRDCI tncomp
∇
∇ (tn name)←{dcf}CreateTemp pattern;folder;i;cnt;z
⍝ Create a temporary file based on pattern e.g. c:\folder\*.ext
⍝ pattern - the local
⍝ Will create the file as .DCF if dcf=1, native file otherwise.
dcf←{6::⍵ ⋄ dcf}0
pattern←Normalize pattern
⎕SIGNAL(1≠'*'+.=pattern)/⊂('EN' 11)('Message' 'pattern must contain exactly 1 *')
folder←⊃SplitFilename pattern
i←pattern⍳'*'
tn←cnt←0 ⋄ z←⊂''
:Trap 102 ⋄ z←folder∘,¨Dir pattern ⋄ :EndTrap
:Repeat ⍝ Avoid race conditions
name←1⊃((⊂((i-1)↑pattern),'temp_',(⍕cnt),'_'),¨(⍕¨⍳1+⍴z),¨⊂i↓pattern)~z
:If dcf
:Trap 22 ⋄ tn←name ⎕FCREATE 0 ⋄ :EndTrap
:Else
:Trap 22 ⋄ tn←name ⎕NCREATE 0 ⋄ :EndTrap
:EndIf
cnt←cnt+1
:Until (cnt>20)∨tn≠0
⎕SIGNAL tn↓⊂('EN' 22)('Message' 'Unable to create temporary file')
∇
:Section Documentation Utilities
⍝ these are generic utilities used for documentation
∇ docn←ExtractDocumentationSections what;⎕IO;box;CR;sections;eis;matches
⍝ internal utility function
⎕IO←1
eis←{(,∘⊂∘,⍣(1=≡,⍵))⍵}
CR←⎕UCS 13
box←{{⍵{⎕AV[(1,⍵,1)/223 226 222],CR,⎕AV[231],⍺,⎕AV[231],CR,⎕AV[(1,⍵,1)/224 226 221]}⍴⍵}(⍵~CR),' '}
docn←1↓⎕SRC ⎕THIS
docn←1↓¨docn/⍨∧\'⍝'=⊃¨docn ⍝ keep all contiguous comments
docn←docn/⍨'⍝'≠⊃¨docn     ⍝ remove any lines beginning with ⍝⍝
sections←{∨/'::'⍷⍵}¨docn
:If ~0∊⍴what
matches←∨⌿∨/¨(eis(819⌶what))∘.⍷(819⌶)sections/docn
(sections docn)←((+\sections)∊matches/⍳≢matches)∘/¨sections docn
:EndIf
(sections/docn)←box¨sections/docn
docn←∊docn,¨CR
∇
∇ r←Documentation
⍝ return full documentation
:Access public shared
r←ExtractDocumentationSections''
∇
∇ r←Describe
⍝ return description only
:Access public shared
r←ExtractDocumentationSections'Description::'
∇
∇ r←ShowDoc what
⍝ return documentation sections that contain what in their title
⍝ what can be a character scalar, vector, or vector of vectors
:Access public shared
r←ExtractDocumentationSections what
∇
:EndSection
:EndNamespace
﻿:Class FilesAndDirs
⍝ This class exists solely in support of MarkAPL from APLTeam
⍝ It provides comparable functionality to the FilesAndDirs class from https://github.com/aplteam/filesanddirs
⍝ for 2 methods - NormalizePath and Exists
(⎕ML ⎕IO)←1 1
∇ r←{expand}NormalizePath f
:Access public shared
:If 0=⎕NC'expand' ⋄ expand←0 ⋄ :EndIf
r←∊expand ⎕NPARTS f
∇
∇ r←Exists f
:Access public shared
r←⎕NEXISTS∊⎕NPARTS f
∇
:EndClass
﻿:Namespace HtmlUtils
(⎕IO ⎕ML)←1
⎕FX 'r←CRLF' 'r←⎕UCS 13 10' ⍝ So it will be :Included
eis←{(,∘⊂)⍣((326∊⎕DR ⍵)<2>|≡⍵),⍵} ⍝ Enclose if simple
ine←{0∊⍴⍺:'' ⋄ ⍵} ⍝ if not empty
ischar←{0 2∊⍨10|⎕DR⍵}
quote←{0∊⍴⍵:'' ⋄ '"',({w←⍵⋄((w='"')/w)←⊂'\"'⋄∊ w}⍵),'"'}
iotaz←{(⍴⍺){⍵×⍺≥⍵}⍺⍳⍵}
innerhtml←{⊃↓/(⍵ iotaz'>')(-(⌽⍵)iotaz'<') ⍵}
dtlb←{⍵{((∨\⍵)∧⌽∨\⌽⍵)/⍺}' '≠⍵}
∇ r←atts Enclose innerhtml;i
⍝ Put an HTML tag around some HTML
:If 1<|≡innerhtml ⋄ innerhtml←CRLF,∊innerhtml,¨⊂CRLF ⋄ :EndIf
:If 0∊⍴atts
r←innerhtml
:Else
i←¯1+(atts←,atts)⍳' '
r←'<',atts,'>',innerhtml,'</',(i↑atts),'>',CRLF
:EndIf
∇
∇ r←{nl}Tag tag
⍝ Make a  self-closing tag
nl←{6::1 ⋄ nl}⍬
r←'<',tag,' />',nl/CRLF
∇
FormatAttrs←{
⍝ format name/value pairs as tag attributes
⍝  ⍵ - name/value pairs, valid forms:
⍝  'name="value"'
⍝  [n,2⍴] 'name1' 'value1' ['name2' 'value2'...]
⍝ ('name1' 'value1') [('name2' 'value2')]
0∊⍴⍵:''
{
∊{(×⍴⍺)/' ',⍺,(×⍴⍵)/'=',quote ⍵}/,∘⍕¨⊃⍵
}_pifn¨,2 _box _pifn{
1=|≡⍵:⍵
2=|≡⍵:{1=⍴⍴⍵:(⌽2,0.5×⍴⍵)⍴⍵ ⋄ ⍵}⍵
↑⍵}⍵
}
∇ r←tag GetAttr attr;attrs
r←''
:Trap 6
→0⍴⍨0∊⍴tag←⎕XML tag
:EndTrap
attrs←(⊂1 4)⊃tag
r←(attrs[;1]⍳⊂attr)⊃attrs[;2],⊂''
∇
Styles←{
⍝ format name/value pairs as CSS style attributes
⍝  ⍵ - name/value pairs, valid forms:
⍝  'name: value'
⍝  [n,2⍴] 'name1' 'value1' ['name2' 'value2'...]
⍝ ('name1' 'value1') [('name2' 'value2')]
⍺←''
0∊⍴⍵:⍺,'{}'
(0∊⍴⍺)↓⍺,{'{',({';'=¯1↑⍵:⍵ ⋄ ⍵,';'}⍵),'}'}{
∊{(×⍴⍺)/⍺,(×⍴⍵)/':',⍵,';'}/,∘⍕¨⊃⍵
}_pifn¨,2 _box _pifn{
1=|≡⍵:⍵
2=|≡⍵:{1=⍴⍴⍵:(⌽2,0.5×⍴⍵)⍴⍵ ⋄ ⍵}⍵
↑⍵}⍵
}
_box←{⍺←1 ⋄ (⊂⍣(⍺=|≡⍵))⍵}
_pifn←{({⍵''}⍣(1=|≡⍵))⍵}
∇ r←ScriptFollows;lines;pgm;from
⍝ Treat following commented lines in caller as a script, lines beginning with ⍝⍝ are stripped out
:If 0∊⍴lines←(from←⎕IO⊃⎕RSI).⎕NR pgm←2⊃⎕SI
lines←↓from.(180⌶)pgm
:EndIf
r←2↓∊CRLF∘,¨{⍵/⍨'⍝'≠⊃¨⍵}{1↓¨⍵/⍨∧\'⍝'=⊃¨⍵}dtlb¨(1+2⊃⎕LC)↓lines
∇
∇ html←TextToHTML html;mask;CR
⍝ Add/insert <br/>, replaces CR with <br/>,CR
:If ~0∊⍴html
:If ∨/mask←html=CR←''⍴CRLF
(mask/html)←⊂'<br/>',CR
html←∊html
:EndIf
html,←(~∨/¯2↑mask)/'<br/>',CRLF
:EndIf
∇
∇ html←{fontsize}APLToHTML APL
⍝ returns APL code formatted for HTML
fontsize←{6::'' ⋄ ';fontsize:',⍎⍵}'fontsize'
:If 1<|≡APL ⋄ APL←∊,∘CRLF¨APL ⋄ :EndIf
:Trap 0
html←3↓¯4↓'whitespace' 'preserve'⎕XML 1 3⍴0 'x'APL
:Else
html←APL
:EndTrap
html←('pre style="font-family:APL385 Unicode',fontsize,'"')Enclose CRLF,⍨html
∇
∇ html←APLToHTMLColor APL;types;colors;class;codes;apply;lines;head;tail;c;ent;to;style;nums
⍝ returns APL code formatted for HTML with syntax coloring
to←{(¯1↓⍺),((¯1+⊃⌽⍺)+⍳1+(⊃⍵)-(⊃⌽⍺)),1↓⍵}
:Trap 0
colors←⍬
colors,←⊂'i200comment'(1 26 63)
colors,←⊂'i200char'(4 29)
colors,←⊂'i200num'(5 30)
colors,←⊂'i200local'(10 32 35 53)
colors,←⊂'i200global'(7 52 55)
colors,←⊂'i200primitive'(19 44 146 to 153 214 to 221)
colors,←⊂'i200idiom'(23 48)
colors,←⊂'i200control'(58 155 to 179 181 to 213 222 to 248)
colors,←⊂'i200space'(8 9 33 34)
colors,←⊂'i200quad'(12 to 15 37 to 40)
html←({(+/∨\' '≠⌽⍵)↑¨↓⍵}⍣(1≥|≡APL))APL ⍝ Make VTV if matrix
html,¨←' '
lines←∊1↑¨⍨≢¨html
types←0,0,⍨∊200⌶html                        ⍝ 200⌶ is color coding
:For c ent :InEach '&<'('&amp;' '&lt;')
((c⍷∊html)/∊html)←⊂⊂ent
:EndFor
html←' ',' ',⍨⊃,/html
:For class codes :In colors
apply←1 0⍷types∊codes
(apply/html)←(apply/html),¨⊂'</span>'
:EndFor
:For class codes :In colors
apply←0 1⍷types∊codes
(apply/html)←(apply/html),¨⊂'<span class="',class,'">'
:EndFor
head←1↓⊃html ⋄ tail←¯1↓⊃⌽html
html←lines⊂1↓¯1↓html
(⊃html),⍨←head ⋄ (⊃⌽html),←tail
html←∊¨html
nums←⍕¨¯1+⍳≢html
style←'<style>' ⍝ speudo
style,←∊(1+≢⊃⌽nums){'.i200line.l',⍵,'::after{content:"[','"}',⍨⍺↑⍵,']'}¨nums
style,←'</style>'
html,¨⍨←'<span class="i200line l'∘,¨nums,¨⊂'"></span>' ⍝ Prepend line numbers
html←style,'pre'Enclose'code'Enclose html
:Else
html←APLToHTML APL
:EndTrap
∇
MakeStyle←{
⍺←''
0∊⍴⍵:''
(' ',⍨¯2↓∊(eis ⍺),¨⊂', '),Styles ⍵
}
∇ r←HtmlSafeText txt;i;m;u;ucs;s
⍝ make text HTML "safe"
r←,⎕FMT txt
i←'&<>"''#'⍳r
i-←(i=1)∧1↓(i=6),0 ⍝ mark & that aren't &#
m←i∊⍳5
u←127<ucs←⎕UCS r
s←' '=r
(s/r)←⊂'&nbsp;'
(m/r)←('&amp;' '&lt;' '&gt;' '&quot;' '&apos;')[m/i]
(u/r)←(~∘' ')¨↓'G<&#ZZZ9;>'⎕FMT u/ucs
r←∊r
∇
:EndNamespace
﻿:Class HttpCommand
⍝ Description::
⍝ HttpCommand is a stand alone utility to issue HTTP commands and return their
⍝ results.  HttpCommand can be used to retrieve the contents of web pages,
⍝ issue calls to web services, and communicate with any service which uses the
⍝ HTTP protocol for communications.
⍝
⍝ N.B. requires Conga - the TCP/IP utility library (see Notes below)
⍝
⍝ Overview::
⍝ HttpCommand can be used in two ways:
⍝   1) Create an instance of HttpCommand using ⎕NEW
⍝      This gives you very fine control to specify the command's parameters
⍝      You then use the Run method to execute the request
⍝
⍝        h←⎕NEW HttpCommand                       ⍝ create an instance
⍝        h.(Command URL)←'get' 'www.dyalog.com'   ⍝ set the command parameters
⍝        r←h.Run                                  ⍝ run the request
⍝
⍝   2) Alternatively you can use the "Get" or "Do" methods which make it
⍝      easier to execute some of the more common use cases.
⍝        r←HttpCommand.Get 'www.dyalog.com'
⍝        r←HttpCommand.Do 'get' 'www.dyalog.com'
⍝
⍝ Constructor::
⍝        cmd←⎕NEW HttpCommand [(Command [URL [Params [Headers [Cert [SSLFlags [Priority]]]]]])]
⍝
⍝ Constructor Arguments::
⍝ All of the constructor arguments are also exposed as Public Fields
⍝
⍝   Command  - the case-insensitive HTTP command to issue
⍝              typically one of 'GET' 'POST' 'PUT' 'OPTIONS' 'DELETE' 'HEAD'
⍝
⍝   URL      - the URL to direct the command at
⍝              format is:  [HTTP[S]://][user:pass@]url[:port][/page[?query_string]]
⍝
⍝   Params   - the parameters to pass with the command
⍝              this can be one of
⍝              - a properly URLEncoded simple character vector
⍝              - a namespace containing the named parameters
⍝              - a vector of an even number of character vectors representing name/value pairs
⍝
⍝   Headers  - the HTTP headers for the request
⍝              this can be one of
⍝              - an empty array - this means that only the HttpCommand default headers will be sent
⍝              - a vector of 2-element vectors containing name/value pairs
⍝              - a matrix of [;1] header-name [;2] values
⍝
⍝              these are any additional HTTP headers to send with the request
⍝              or headers whose default values you wish to override
⍝              headers that HttpCommand will set by default are:
⍝               User-Agent     : Dyalog/Conga
⍝               Accept         : */*
⍝               Content-Type   : application/x-www-form-urlencoded
⍝               Content-Length : length of the request body
⍝               Accept-Encoding: gzip, deflate
⍝
⍝   Cert     - if using SSL, this is either:
⍝              - an instance of the X509Cert class (see Conga SSL documentation)
⍝              - or a 2 element vector of character vectors of the [1] client public certificate filename [2] client private key filename
⍝
⍝   SSLFlags - if using SSL, these are the SSL flags as described in the Conga documentation
⍝
⍝   Priority - if using SSL, this is the GNU TLS priority string (generally you won't change this from the default)
⍝
⍝ Notes on Params and query_string:
⍝ When using the 'GET' HTTP command, you may specify parameters using either the query_string or Params
⍝ Hence, the following are equivalent
⍝     HttpCommand.Get 'www.someplace.com?userid=fred'
⍝     HttpComment.Get 'www.someplace.com' ('userid' 'fred')
⍝
⍝ Additional Public Fields::
⍝   LDRC            - if set, this is a reference to the DRC namespace from Conga - otherwise, we look for DRC in the workspace root
⍝   WaitTime        - time (in seconds) to wait for the response (default 30)
⍝   CongaMode       - 'http' for Conga 3.0 and later, 'text' for Conga before 3.0 or if forcing text mode when using Conga 3.0 and later
⍝   SuppressHeaders - Boolean which, if set to 1, will suppress all HttpCommand-generated headers
⍝                     you may still supply your own headers in the Headers field
⍝
⍝
⍝ The methods that execute HTTP requests - Do, Get, and Run - return a namespace containing the variables:
⍝   Data          - the response message payload
⍝   HttpVer       - the server HTTP version
⍝   HttpStatus    - the response HTTP status code (200 means OK)
⍝   HttpMessage   - the response HTTP status message
⍝   Headers       - the response HTTP headers
⍝   PeerCert      - the server (peer) certificate if running secure
⍝   Redirections  - a vector (possibly empty) of redirection links
⍝   rc            - the Conga return code (0 means no error, ¯1 means failure to initialize Conga)
⍝   msg           - status/error msg (non-HTTP)  Empty indicates no non-HTTP error
⍝   Command       - the request's HTTP command
⍝   URL           - the request's URL
⍝
⍝ Public Instance Methods::
⍝
⍝   result←Run            - executes the HTTP request
⍝   name AddHeader value  - add a header value to the request headers if it doesn't already exist
⍝   name SetHeader value  - set a request header, adding it if it doesn't exist,
⍝                           overwriting the value if it does exist
⍝
⍝ Public Shared Methods::
⍝
⍝   result←Get URL [Params [Headers [Cert [SSLFlags [Priority]]]]]
⍝   - Perform an GET operation on URL
⍝
⍝   result←Do  Command URL [Params [Headers [Cert [SSLFlags [Priority]]]]]
⍝   - Perform the HTTP operation specified by Command on URL
⍝
⍝   result←GetJSON Command URL [Params [Headers [Cert [SSLFlags [Priority]]]]]
⍝   - Perform the HTTP operation specified by Command on URL
⍝   - Params is converted to JSON and the response data is expected to be in
⍝     JSON format and then converted to APL data
⍝
⍝    Where the arguments are as described in the constructor parameters section.
⍝     Get and Do are shortcut methods to make it easy to execute an HTTP request on the fly.
⍝     GetJSON is a shortcut method to access JSON-based services
⍝
⍝   r←Base64Decode vec     - decode a Base64 encoded string
⍝
⍝   r←Base64Encode vec     - Base64 encode a character vector
⍝
⍝   r←UrlDecode vec        - decodes a URL-encoded character vector
⍝
⍝   r←{name} UrlEncode arg - URL-encodes string(s)
⍝     name is an optional name
⍝     arg can be one of
⍝       - a character vector
⍝       - a vector of character vectors of name/value pairs
⍝       - a 2-column matrix of name/value pairs
⍝       - a namespace containing named variables
⍝     Examples:
⍝
⍝       UrlEncode 'Hello World!'
⍝ Hello%20World%21
⍝
⍝      'phrase' UrlEncode 'Hello World!'
⍝ phrase=Hello%20World%21
⍝
⍝       UrlEncode 'company' 'dyalog' 'language' 'APL'
⍝ company=dyalog&language=APL
⍝
⍝       UrlEncode 2 2⍴'company' 'dyalog' 'language' 'APL'
⍝ company=dyalog&language=APL
⍝
⍝       (ns←⎕NS '').(company language)←'dyalog' 'APL'
⍝       UrlEncode ns
⍝ company=dyalog&language=APL
⍝
⍝ Notes::
⍝ HttpCommand uses Conga for TCP/IP communications and supports both Conga 2 and Conga 3
⍝ Conga 2 uses the DRC namespace
⍝ Conga 3 uses either the Conga namespace or DRC namespace for backwards compatibility
⍝ HttpCommand will search for #.Conga and #.DRC and use them if they exist - or try to ⎕CY them if they're not found
⍝ You can set the CongaRef public field to have HttpCommand use Conga or DRC located other than in the root of the workspace
⍝ Otherwise HttpCommand will attempt to copy Conga or DRC from the conga workspace supplied with Dyalog APL
⍝
⍝ Normally HttpCommand will specify an "Accept-Encoding" request header so that the server can use gzip or deflate compression in the response.
⍝ However, if you use the HEAD HTTP method, this header is not set, so that the content-length header will
⍝   reflect the uncompressed length of the response's body.
⍝   You can add the header manually if you want the compressed message length, e.g.:
⍝   r←HttpCommand.Do 'HEAD' 'someurl' '' (1 2⍴'Accept-Encoding' 'gzip, deflate')
⍝
⍝
⍝ Example Use Cases::
⍝
⍝ Retrieve the contents of a web page
⍝   result←HttpCommand.Get 'www.dyalog.com'
⍝
⍝ Update a record in a web service
⍝   cmd←⎕NEW HttpCommand                        ⍝ create an instance
⍝   cmd.(Command URL)←'PUT' 'www.somewhere.com' ⍝ set a couple of fields
⍝   (cmd.Params←⎕NS '').(id name)←123 'Fred'    ⍝ set the parameters for the "PUT" command
⍝   result←cmd.Run                              ⍝ and run it
⍝
⎕ML←⎕IO←1
:field public Command←'GET'                    ⍝ default HTTP command
:field public URL←''                           ⍝ requested resource
:field public Params←''                        ⍝ request parameters
:field public Headers←0 2⍴⊂''                  ⍝ request headers
:field public Result                           ⍝ command result namespace
:field public WaitTime←30                      ⍝ seconds to wait for a response before timing out
:field public SuppressHeaders←0                ⍝ set to 1 to suppress HttpCommand default request headers
:field public CongaMode←''                     ⍝ valid values are 'text' or 'http' ('http' valid with Conga 3.0 or later only)
:field public shared CongaRef←''               ⍝ user-supplied reference to Conga library
:field public shared LDRC                      ⍝ HttpCommand-set reference to Conga after CongaRef has been resolved
:field public Cert←⍬                           ⍝ X509 instance if using HTTPS
:field public SSLFlags←32                      ⍝ SSL/TLS flags - 32 = accept cert without checking it
:field public Priority←'NORMAL:!CTYPE-OPENPGP' ⍝ default GnuTLS priority string
:field public PublicCertFile←''                ⍝ if not using an X509 instance, this is the client public certificate file
:field public PrivateKEyFile←''                ⍝ if not using an X509 instance, this is the client private key file
∇ r←Version
:Access public shared
r←'HttpCommand' '2.1.23' '2019-03-12'
∇
∇ make
:Access public
:Implements constructor
makeCommon
∇
∇ make1 args
:Access public
:Implements constructor
⍝ args - [Command URL Params Headers Cert SSLFlags Priority]
args←eis args
Command URL Params Headers Cert SSLFlags Priority←7↑args,(⍴args)↓Command URL Params Headers Cert SSLFlags Priority
makeCommon
∇
∇ makeCommon
Result←⎕NS''
Result.(Command URL rc msg HttpVer HttpStatus HttpMessage Headers Data PeerCert Redirections)←Command URL ¯1 '' ''⍬''(0 2⍴⊂'')''⍬(0⍴⊂'')
:If 0∊⍴Headers ⋄ Headers←0 2⍴⊂'' ⋄ :EndIf
∇
∇ r←Run
:Access public
:If 0∊⍴Cert
r←(Command HttpCmd)URL Params Headers
:Else
r←(Cert SSLFlags Priority)(Command HttpCmd)URL Params Headers
:EndIf
∇
∇ r←Get args
⍝ Description::
⍝ Shortcut method to perform an HTTP GET request
⍝ args - [URL Params Headers Cert SSLFlags Priority]
:Access public shared
r←(⎕NEW ⎕THIS((⊂'GET'),eis args)).Run
∇
∇ r←Do args
⍝ Description::
⍝ Shortcut method to perform an HTTP request
⍝ args - [Command URL Params Headers Cert SSLFlags Priority]
:Access public shared
r←(⎕NEW ⎕THIS(eis args)).Run
∇
∇ r←GetJSON args;cmd
⍝ Description::
⍝ Shortcut method to perform an HTTP request with JSON data as the request and response payloads
⍝ args - [Command URL Params Headers Cert SSLFlags Priority]
:Access public shared
cmd←⎕NEW ⎕THIS(eis args)
cmd.('content-type'SetHeader'application/json')
:If 0∊⍴cmd.Command ⋄ cmd.Command←'POST' ⋄ :EndIf
:Trap 0
cmd.Params←1 ⎕JSON cmd.Params
:Else
r←cmd.Result
r.(rc msg)←¯1 'Could not convert parameters to JSON format'
→Done
:EndTrap
r←cmd.Run
:If r.rc=0
:If r.HttpStatus=200
:If ∨/'application/json'⍷lc r.Headers Lookup'content-type'
:Trap 0
r.Data←⎕JSON r.Data
:Else
r.(rc msg)←1 'Could not convert response payload to JSON format'
→Done
:EndTrap
:Else
r.(rc msg)←2 'Response content-type is not application/json'
→Done
:EndIf
:Else
r.(rc msg)←3 'HTTP failure'
→Done
:EndIf
:EndIf
→0
Done: ⍝ reset ⎕DF if messages have changed
r.⎕DF 1⌽'][rc: ',(⍕r.rc),' | msg: "',r.msg,'"',(r.rc≥0)/' | HTTP Status: ',(⍕r.HttpStatus),' "',r.HttpMessage,'" | ⍴Data: ',⍕⍴r.Data
∇
∇ r←Init r;ref;root;nc;class;dyalog;n;ns;congaCopied
⍝↓↓↓ Check is LDRC exists (VALUE ERROR (6) if not), and is LDRC initialized? (NONCE ERROR (16) if not)
:Hold 'HttpCommandInit'
:If {6 16 999::1 ⋄ ''≡LDRC:1 ⋄ 0⊣LDRC.Describe'.'}''
LDRC←''
:If 9=#.⎕NC'Conga' ⋄ {#.Conga.X509Cert.LDRC←''}⍬ ⋄ :EndIf ⍝ if #.Conga exists, reset X509Cert.LDRC reference
:If ~0∊⍴CongaRef  ⍝ did the user supply a reference to Conga?
LDRC←ResolveCongaRef CongaRef
→∆END↓⍨0∊⍴r.msg←(''≡LDRC)/'CongaRef (',(⍕CongaRef),') does not point to a valid instance of Conga'
:Else
:For root :In ##.## #
ref nc←root{1↑¨⍵{(×⍵)∘/¨⍺ ⍵}⍺.⎕NC ⍵}ns←'Conga' 'DRC'
:If 9=⊃⌊nc ⋄ :Leave ⋄ :EndIf
:EndFor
:If 9=⊃⌊nc
LDRC←ResolveCongaRef root⍎∊ref
→∆END↓⍨0∊⍴r.msg←(''≡LDRC)/(⍕root),'.',(∊ref),' does not point to a valid instance of Conga'
→∆COPY↓⍨{999::0 ⋄ 1⊣LDRC.Describe'.'}'' ⍝ it's possible that Conga was saved in a semi-initialized state
:Else
∆COPY:
class←⊃⊃⎕CLASS ⎕THIS
dyalog←{⍵,'/'↓⍨'/\'∊⍨¯1↑⍵}2 ⎕NQ'.' 'GetEnvironment' 'DYALOG'
congaCopied←0
:For n :In ns
:Trap 0
n class.⎕CY dyalog,'ws/conga'
LDRC←ResolveCongaRef class⍎n
→∆END↓⍨0∊⍴r.msg←(''≡LDRC)/n,' was copied from [DYALOG]/ws/conga, but is not valid'
congaCopied←1
:Leave
:EndTrap
:EndFor
→∆END↓⍨0∊⍴r.msg←(~congaCopied)/'Neither Conga nor DRC were successfully copied from [DYALOG]/ws/conga'
:EndIf
:EndIf
:EndIf
∆END:
:EndHold
∇
∇ LDRC←ResolveCongaRef CongaRef;z;failed
⍝ CongaRef could be a charvec, reference to the Conga or DRC namespaces, or reference to an iConga instance
:Access public shared  ⍝!!! testing only  - remove :Access after testing
LDRC←'' ⋄ failed←0
:Select ⎕NC⊂'CongaRef' ⍝ what is it?
:Case 9.1 ⍝ namespace?  e.g. CongaRef←DRC or Conga
Try:
:Trap 0
:If ∨/'.Conga'⍷⍕CongaRef ⍝ is it Conga?
LDRC←CongaRef.Init'HttpCommand'
:ElseIf 0≡⊃CongaRef.Init'' ⍝ DRC?
LDRC←CongaRef
:Else
→0⊣LDRC←''
:End
:Else ⍝ if HttpCommand is reloaded and re-executed in rapid succession, Conga initialization may fail, so we try twice
:If failed
→0⊣LDRC←''
:Else
→Try⊣failed←1
:EndIf
:EndTrap
:Case 9.2 ⍝ instance?  e.g. CongaRef←Conga.Init ''
LDRC←CongaRef ⍝ an instance is already initialized
:Case 2.1 ⍝ variable?  e.g. CongaRef←'#.Conga'
:Trap 0
LDRC←ResolveCongaRef(⍎∊⍕CongaRef)
:EndTrap
:EndSelect
∇
∇ r←{certs}(cmd HttpCmd)args;url;parms;hdrs;urlparms;p;b;secure;port;host;page;x509;flags;priority;auth;req;err;chunked;chunk;buffer;chunklength;done;data;datalen;header;headerlen;rc;donetimeformContentType;ind;len;mode;obj;evt;dat;clt;z;contentType;redirected;origHost;origPort;noHost;origSecure;msg;timedOut;certfile;keyfile;cert;secureParams
⍝ issue an HTTP command
⍝ certs - optional [X509Cert [SSLValidation [Priority]]]
⍝ args  - [1] URL in format [HTTP[S]://][user:pass@]url[:port][/page[?query_string]]
⍝         {2} parameters is using POST - either a namespace or URL-encoded string
⍝         {3} HTTP headers in form {↑}(('hdr1' 'val1')('hdr2' 'val2'))
⍝ Makes secure connection if left arg provided or URL begins with https:
⍝ Result: (conga return code) (HTTP Status) (HTTP headers) (HTTP body) [PeerCert if secure]
:If 900⌶⍬ ⋄ certs←'' ⋄ :EndIf ⍝ default when monadic
args←eis args
(url parms hdrs)←args,(⍴args)↓''(⎕NS'')''
r←Result
r.(Command URL rc msg HttpVer HttpStatus HttpMessage Headers Data PeerCert Redirections)←cmd url ¯1 '' ''⍬''(0 2⍴⊂'')''⍬(0⍴⊂'')
→∆END↓⍨0∊⍴r.msg←(0∊⍴url)/'No URL specified' ⍝ exit early if no URL
→∆END↓⍨0∊⍴(Init r).msg
url←,url
cmd←uc,cmd
(url urlparms)←{⍵{((¯1+⍵)↑⍺)(⍵↓⍺)}⍵⍳'?'}url
:If 'GET'≡cmd   ⍝ if HTTP command is GET, all parameters are passed via the URL
urlparms,←{0∊⍴⍵:⍵ ⋄ '&',⍵}{(⎕DR ⍵)∊80 82:⍵ ⋄ UrlEncode ⍵}parms
parms←''
:EndIf
urlparms←{0∊⍴⍵:'' ⋄ ('?'=1↑⍵)↓'?',⍵}{⍵↓⍨'&'=⊃⍵}urlparms
redirected←0
GET:
p←(∨/b)×1+(b←'//'⍷url)⍳1
secure←(0<⍴,certs)∨(lc(p-2)↑url)≡'https:'
url←p↓url                                  ⍝ Remove HTTP[s]:// if present
(host page)←'/'split url,(~'/'∊url)/'/'    ⍝ Extract host and page from url
page←{w←⍵ ⋄ ((' '=w)/w)←⊂'%20' ⋄ ∊w}page   ⍝ convert spaces in page name to %20
:If redirected∧noHost←0∊⍴host ⍝ if we're redirected and no host is specified in the location header...
host←origHost ⍝ ...use original host
secure←origSecure
port←origPort
:EndIf
secureParams←''
:If secure
LDRC.X509Cert.LDRC←LDRC
:If 0∊⍴certs
:If ~0∊⍴PublicCertFile
certs←⊃LDRC.X509Cert.ReadCertFromFile PublicCertFile
certs.KeyOrigin←'DER'PrivateKeyFile
:EndIf
:Else
:If 0 2∊⍨10|⎕DR⊃⊃certs ⍝ file name?
:If 2=≡certs
(certfile keyfile)←certs
:Else
(certfile keyfile)←⊃certs
:EndIf
cert←⊃LDRC.X509Cert.ReadCertFromFile certfile
cert.KeyOrigin←'DER'keyfile
certs[1]←cert
:EndIf
:EndIf
x509 flags priority←3↑certs,(⍴,certs)↓(⎕NEW LDRC.X509Cert)SSLFlags Priority
secureParams←('x509'x509)('SSLValidation'flags)('Priority'priority)
:EndIf
:If '@'∊host ⍝ Handle user:password@host...
auth←'Authorization: Basic ',(Base64Encode(¯1+p←host⍳'@')↑host),NL
host←p↓host
:Else ⋄ auth←''
:EndIf
:If ~redirected∧noHost  ⍝ if not redirected and no host was specified in the location header
:If (≢host)<ind←host⍳':' ⍝ then if there's no port specified in the host
port←(1+secure)⊃80 443 ⍝ use the default HTTP/HTTPS port
:Else
:If 0=port←⊃toNum ind↓host
→∆END⊣r.msg←'Invalid host/port - ',host
:EndIf
host↑⍨←ind-1
:EndIf
:EndIf
:If 0∊⍴host
→∆END⊣r.msg←'No host specified'
:EndIf
:If ~(port>0)∧(port≤65535)∧port=⌊port
→∆END⊣r.msg←'Invalid port - ',⍕port
:EndIf
hdrs←makeHeaders hdrs
:If ~SuppressHeaders
hdrs←'User-Agent'(hdrs addHeader)'Dyalog/Conga'
hdrs←'Accept'(hdrs addHeader)'*/*'
:EndIf
:If ~0∊⍴parms         ⍝ if we have any parameters
:If cmd≢'GET'     ⍝ and not a GET command
⍝↓↓↓ specify the default content type (if not already specified)
:If ~SuppressHeaders
hdrs←'Content-Type'(hdrs addHeader)formContentType←'application/x-www-form-urlencoded'
:EndIf
contentType←hdrs Lookup'Content-Type'
:Select contentType
:Case formContentType
parms←{(⎕DR ⍵)∊80 82:⍵ ⋄ UrlEncode ⍵}parms
:Case 'application/json'
:If 1≥⍴⍴parms ⍝ if it's a simple charvec, it's already considered to be formated JSON
:AndIf ' '=1↑0⍴parms
:Else ⍝ otherwise, convert it
parms←1 ⎕JSON parms
:EndIf
:EndSelect
:If ~SuppressHeaders
hdrs←'Content-Length'(hdrs addHeader)⍴parms
:EndIf
:EndIf
:EndIf
⍝↓↓↓ If using HEAD method, don't indicate we accept compressed responses
⍝    this way content-length in the response reflects the actual size of the response
⍝    The user can always add the header manually if he wants the compressed size
:If SuppressHeaders<'HEAD'≢cmd
hdrs←'Accept-Encoding'(hdrs addHeader)'gzip, deflate'
:EndIf
req←cmd,' ',(page,urlparms),' HTTP/1.1',NL,(~SuppressHeaders)/'Host: ',host,NL
req,←fmtHeaders hdrs
req,←(~SuppressHeaders)/auth
donetime←⌊⎕AI[3]+1000×WaitTime ⍝ time after which we'll time out
mode←'text'
:If 3≤⊃LDRC.Version ⍝ Conga 3 or later?
mode←'text' 'http'⊃⍨(,⊂'text')⍳⊆lc CongaMode ⍝ use CongaMode (default to http)
:EndIf
Go:
:If 0=⊃(err clt)←2↑rc←LDRC.Clt''host port mode 100000,secureParams ⍝ 100,000 is max receive buffer size
:If mode≡'http'
:If 0≠1⊃LDRC.SetProp clt'DecodeBuffers' 15 ⍝ set advanced HTTP parsing
{}LDRC.Close clt ⍝ if that's not available
mode←'text'      ⍝ fall back to text mode
→Go
:EndIf
:EndIf
:If 0=⊃rc←LDRC.Send clt(req,NL,parms)
chunked chunk buffer chunklength←0 '' '' 0
timedOut done data datalen headerlen header←0 0 ⍬ 0 0 ⍬
:Repeat
:If ~done←0≠err←1⊃rc←LDRC.Wait clt 5000            ⍝ Wait up to 5 secs
(err obj evt dat)←4↑rc
:Select evt
⍝ Conga 3.0+ handling
:Case 'HTTPHeader'
:If 1=≡dat ⍝ HTTP header parsing failed?
r.Data←dat
r.msg←'Conga failed to parse the response HTTP header'
→∆END
:Else
r.(HttpVersion HttpStatus HttpMessage)←3↑dat
header←4⊃dat
datalen←⊃(toNum header Lookup'Content-Length'),¯1 ⍝ ¯1 if no content length not specified
chunked←∨/'chunked'⍷header Lookup'Transfer-Encoding'
done←(cmd≡'HEAD')∨chunked<datalen<1
:EndIf
:Case 'HTTPBody'
data←dat
done←1
:Case 'HTTPChunk'
:If 1=≡dat ⍝ HTTP chunk parsing failed?
r.Data←dat
r.msg←'Conga failed to parse the response HTTP chunk'
→∆END
:Else
data,←1⊃dat
:EndIf
:Case 'HTTPTrailer'
:If 2≠≢⍴dat ⍝ HTTP trailer parsing failed?
r.Data←dat
r.msg←'Conga failed to parse the response HTTP trailer'
→∆END
:Else
header⍪←dat
done←1
:EndIf
:Case 'HTTPFail'
r.Data←dat
r.msg←'Conga failed to parse the HTTP reponse'
→∆END
⍝ Pre-Conga 3.0 handling
:CaseList 'Block' 'BlockLast'             ⍝ If we got some data
:If chunked
chunk←4⊃rc
:ElseIf 0<⍴data,←4⊃rc
:AndIf 0=headerlen
(headerlen header)←DecodeHeader data
:If 0<headerlen
data←headerlen↓data
:If chunked←∨/'chunked'⍷header Lookup'Transfer-Encoding'
chunk←data
data←''
:Else
datalen←⊃(toNum header Lookup'Content-Length'),¯1 ⍝ ¯1 if no content length not specified
:EndIf
r.(HttpVer HttpStatus HttpMessage)←{⎕ML←3 ⋄ ⍵⊂⍨{⍵∨2<+\~⍵}⍵≠' '}(⊂1 1)⊃header
header↓⍨←1
:EndIf
:EndIf
:If chunked
buffer,←chunk
:While done<¯1≠⊃(len chunklength)←getchunklen buffer
:If (⍴buffer)≥4+len+chunklength
data,←chunklength↑(len+2)↓buffer
buffer←(chunklength+len+4)↓buffer
:If done←0=chunklength ⍝ chunked transfer can add headers at the end of the transmission
header←header⍪2⊃DecodeHeader buffer
:EndIf
:EndIf
:EndWhile
:Else
:If ~done←done∨(cmd≡'HEAD')∨'BlockLast'≡3⊃rc  ⍝ Done if socket was closed
:If datalen>0
done←done∨datalen≤⍴data ⍝ ... or if declared amount of data rcvd
:Else
done←done∨(∨/'</html>'⍷data)∨(∨/'</HTML>'⍷data)
:EndIf
:EndIf
:EndIf
:Case 'Timeout'
timedOut←done←⎕AI[3]>donetime
:Case 'Error'
r.msg←'Conga error processing your request: ',,⍕rc
done←err←1
:Else  ⍝ This shouldn't happen
⎕←r.msg←'*** Unhandled Conga event type - ',evt
∘∘∘  ⍝ !! Intentional !!
:EndSelect
:ElseIf 100=err ⍝ timeout?
timedOut←done←⎕AI[3]>donetime
:Else           ⍝ some other error (very unlikely)
r.msg←'Conga wait error ',,⍕rc
:EndIf
:Until done
:If timedOut
→∆END⊣r.(rc msg)←(⊃rc)'Request timed out before server responded'
:EndIf
:If 0=err
r.HttpStatus←toNum r.HttpStatus
redirected←0
:Trap 0 ⍝ If any errors occur, abandon conversion
:Select header Lookup'content-encoding' ⍝ was the response compressed?
:Case 'deflate'
data←120 ¯100{(2×⍺≡2↑⍵)↓⍺,⍵}83 ⎕DR data ⍝ append 120 156 signature because web servers strip it out due to IE
data←fromutf8 256|¯2(219⌶)data
:Case 'gzip'
data←fromutf8 256|¯3(219⌶)83 ⎕DR data
:Else
:If ∨/'charset=utf-8'⍷header Lookup'content-type'
data←'UTF-8'⎕UCS ⎕UCS data ⍝ Convert from UTF-8
:EndIf
:EndSelect
:EndTrap
:If redirected←r.HttpStatus∊301 302 303 305 307 ⍝ redirected? (HTTP status codes 301, 302, 303, 305, 307)
url←header Lookup'location' ⍝ use the "location" header field for the URL
:If ~0∊⍴url
r.Redirections,←⊂url
(origHost origPort origSecure)←host port secure
{}LDRC.Close clt
→GET
:EndIf
:EndIf
:If secure
:AndIf 0=⊃z←LDRC.GetProp clt'PeerCert'
r.PeerCert←2⊃z
:EndIf
:EndIf
r.(Headers Data)←header data
:Else
r.msg←'Conga connection failed ',,⍕1↓rc
:EndIf
:Else
r.msg←'Conga client creation failed ',,⍕1↓rc
:EndIf
r.rc←1⊃rc
∆END:
{}{0::⍬ ⋄ LDRC.Close clt}⍬
r.⎕DF 1⌽'][rc: ',(⍕r.rc),' | msg: "',r.msg,'"',(r.rc=0)/' | HTTP Status: ',(⍕r.HttpStatus),' "',r.HttpMessage,'" | ⍴Data: ',⍕⍴r.Data
∇
NL←⎕UCS 13 10
fromutf8←{0::(⎕AV,'?')[⎕AVU⍳⍵] ⋄ 'UTF-8'⎕UCS ⍵} ⍝ Turn raw UTF-8 input into text
utf8←{3=10|⎕DR ⍵: 256|⍵ ⋄ 'UTF-8' ⎕UCS ⍵}
sint←{⎕io←0 ⋄ 83=⎕DR ⍵:⍵ ⋄ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 ¯128 ¯127 ¯126 ¯125 ¯124 ¯123 ¯122 ¯121 ¯120 ¯119 ¯118 ¯117 ¯116 ¯115 ¯114 ¯113 ¯112 ¯111 ¯110 ¯109 ¯108 ¯107 ¯106 ¯105 ¯104 ¯103 ¯102 ¯101 ¯100 ¯99 ¯98 ¯97 ¯96 ¯95 ¯94 ¯93 ¯92 ¯91 ¯90 ¯89 ¯88 ¯87 ¯86 ¯85 ¯84 ¯83 ¯82 ¯81 ¯80 ¯79 ¯78 ¯77 ¯76 ¯75 ¯74 ¯73 ¯72 ¯71 ¯70 ¯69 ¯68 ¯67 ¯66 ¯65 ¯64 ¯63 ¯62 ¯61 ¯60 ¯59 ¯58 ¯57 ¯56 ¯55 ¯54 ¯53 ¯52 ¯51 ¯50 ¯49 ¯48 ¯47 ¯46 ¯45 ¯44 ¯43 ¯42 ¯41 ¯40 ¯39 ¯38 ¯37 ¯36 ¯35 ¯34 ¯33 ¯32 ¯31 ¯30 ¯29 ¯28 ¯27 ¯26 ¯25 ¯24 ¯23 ¯22 ¯21 ¯20 ¯19 ¯18 ¯17 ¯16 ¯15 ¯14 ¯13 ¯12 ¯11 ¯10 ¯9 ¯8 ¯7 ¯6 ¯5 ¯4 ¯3 ¯2 ¯1[utf8 ⍵]}
lc←(819⌶) ⍝ lower case conversion
uc←1∘lc   ⍝ upper case conversion
dlb←{(+/∧\' '=⍵)↓⍵} ⍝ delete leading blanks
split←{(p↑⍵)((p←¯1+⍵⍳⍺)↓⍵)} ⍝ split ⍵ on first occurrence of ⍺
h2d←{⎕IO←0 ⋄ 16⊥'0123456789abcdef'⍳lc ⍵} ⍝ hex to decimal
getchunklen←{¯1=len←¯1+⊃(NL⍷⍵)/⍳⍴⍵:¯1 ¯1 ⋄ chunklen←h2d len↑⍵ ⋄ (⍴⍵)<len+chunklen+4:¯1 ¯1 ⋄ len chunklen}
toNum←{0∊⍴⍵:⍬ ⋄ 1⊃2⊃⎕VFI ⍕⍵} ⍝ simple char to num
makeHeaders←{0∊⍴⍵:0 2⍴⊂'' ⋄ 2=⍴⍴⍵:⍵ ⋄ ↑2 eis ⍵} ⍝ create header structure [;1] name [;2] value
fmtHeaders←{0∊⍴⍵:'' ⋄ ∊{0∊⍴2⊃⍵:'' ⋄ NL,⍨(firstCaps 1⊃⍵),': ',⍕2⊃⍵}¨↓⍵} ⍝ formatted HTTP headers
firstCaps←{1↓{(¯1↓0,'-'=⍵) (819⌶)¨ ⍵}'-',⍵} ⍝ capitalize first letters e.g. Content-Encoding
addHeader←{'∘???∘'≡⍺⍺ Lookup ⍺:⍺⍺⍪⍺ ⍵ ⋄ ⍺⍺} ⍝ add a header unless it's already defined
∇ r←a breakOn w
⍝ break left argument at occurences of any element in right argument
:Access public shared
r←{a⊆⍨~a∊w}
∇
∇ r←table Lookup name
⍝ lookup a name/value-table value by name, return '∘???∘' if not found
:Access Public Shared
r←table{(⍺[;2],⊂'∘???∘')⊃⍨(lc¨⍺[;1])⍳eis lc ⍵}name
∇
∇ name AddHeader value
⍝ add a header unless it's already defined
:Access public
Headers←makeHeaders Headers
Headers←name(Headers addHeader)value
∇
∇ name SetHeader value;ind
:Access public
⍝ set a header value, overwriting any existing one
ind←(lc¨Headers[;1])⍳eis lc name
Headers↑⍨←ind⌈≢Headers
Headers[ind;]←name value
∇
∇ r←{a}eis w;f
⍝ enclose if simple
:Access public shared
f←{⍺←1 ⋄ ,(⊂⍣(⍺=|≡⍵))⍵}
:If 0=⎕NC'a' ⋄ r←f w
:Else ⋄ r←a f w
:EndIf
∇
∇ r←Base64Encode w
⍝ Base64 Encode
:Access public shared
r←{⎕IO←0
raw←⊃,/11∘⎕DR¨⍵
cols←6
rows←⌈(⊃⍴raw)÷cols
mat←rows cols⍴(rows×cols)↑raw
'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'[⎕IO+2⊥⍉mat],(4|-rows)⍴'='}w
∇
∇ r←Base64Decode w
⍝ Base64 Decode
:Access public shared
r←{
⎕IO←0
{
80=⎕DR' ':⎕UCS ⍵  ⍝ Unicode
82 ⎕DR ⍵          ⍝ Classic
}2⊥{⍉((⌊(⍴⍵)÷8),8)⍴⍵}(-6×'='+.=⍵)↓,⍉(6⍴2)⊤'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='{⍺⍳⍵∩⍺}⍵
}w
∇
∇ r←DecodeHeader buf;len;d
⍝ Decode HTTP Header
r←0(0 2⍴⊂'')
:If 0<len←¯1+⊃{((NL,NL)⍷⍵)/⍳⍴⍵}buf
d←(⍴NL)↓¨{(NL⍷⍵)⊂⍵}NL,len↑buf
d←↑{((p-1)↑⍵)((p←⍵⍳':')↓⍵)}¨d
d[;1]←lc¨d[;1]
d[;2]←dlb¨d[;2]
r←(len+4)d
:EndIf
∇
∇ r←{name}UrlEncode data;⎕IO;z;ok;nul;m;noname;format
⍝ data is one of:
⍝      - a simple character vector
⍝      - an even number of name/data character vectors
⍝       'name' 'fred' 'type' 'student' > 'name=fred&type=student'
⍝      - a namespace containing variable(s) to be encoded
⍝ name is the optional name
⍝ r    is a character vector of the URLEncoded data
:Access Public Shared
⎕IO←0
format←{
1=≡⍵:⍺(,⍕⍵)
↑⍺∘{⍺(,⍕⍵)}¨⍵
}
noname←0
:If 9.1=⎕NC⊂'data'
data←⊃⍪/{0∊⍴t←⍵.⎕NL ¯2:'' ⋄ ⍵{⍵ format ⍺⍎⍵}¨t}data
:Else
:If 1≥|≡data
:If noname←0=⎕NC'name' ⋄ name←'' ⋄ :EndIf
data←name data
:EndIf
:EndIf
nul←⎕UCS 0
ok←nul,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~'
z←⎕UCS'UTF-8'⎕UCS∊nul,¨,∘⍕¨data
m←~z∊ok
(m/z)←↓'%',(⎕D,⎕A)[⍉16 16⊤⎕UCS m/z]
data←(⍴data)⍴1↓¨{(⍵=nul)⊂⍵}∊z
r←noname↓¯1↓∊data,¨(⍴data)⍴'=&'
∇
∇ r←UrlDecode r;rgx;rgxu;i;j;z;t;m;⎕IO;lens;fill
:Access public shared
⎕IO←0
((r='+')/r)←' '
rgx←'[0-9a-fA-F]'
rgxu←'%[uU]',(4×⍴rgx)⍴rgx ⍝ 4 characters
r←(rgxu ⎕R{{⎕UCS 16⊥⍉16|'0123456789ABCDEF0123456789abcdef'⍳⍵}2↓⍵.Match})r
:If 0≠⍴i←(r='%')/⍳⍴r
:AndIf 0≠⍴i←(i≤¯2+⍴r)/i
z←r[j←i∘.+1 2]
t←'UTF-8'⎕UCS 16⊥⍉16|'0123456789ABCDEF0123456789abcdef'⍳z
lens←⊃∘⍴¨'UTF-8'∘⎕UCS¨t  ⍝ UTF-8 is variable length encoding
fill←i[¯1↓+\0,lens]
r[fill]←t
m←(⍴r)⍴1 ⋄ m[(,j),i~fill]←0
r←m/r
:EndIf
∇
:Section Documentation Utilities
⍝ these are generic utilities used for documentation
∇ docn←ExtractDocumentationSections what;⎕IO;box;CR;sections;eis;matches
⍝ internal utility function
⎕IO←1
eis←{(,∘⊂∘,⍣(1=≡,⍵))⍵}
CR←⎕UCS 13
box←{{⍵{⎕AV[(1,⍵,1)/223 226 222],CR,⎕AV[231],⍺,⎕AV[231],CR,⎕AV[(1,⍵,1)/224 226 221]}⍴⍵}(⍵~CR),' '}
docn←1↓⎕SRC ⎕THIS
docn←1↓¨docn/⍨∧\'⍝'=⊃¨docn ⍝ keep all contiguous comments
docn←docn/⍨'⍝'≠⊃¨docn     ⍝ remove any lines beginning with ⍝⍝
sections←{∨/'::'⍷⍵}¨docn
:If ~0∊⍴what
matches←∨⌿∨/¨(eis(819⌶what))∘.⍷(819⌶)sections/docn
(sections docn)←((+\sections)∊matches/⍳≢matches)∘/¨sections docn
:EndIf
(sections/docn)←box¨sections/docn
docn←∊docn,¨CR
∇
∇ r←Documentation
⍝ return full documentation
:Access public shared
r←ExtractDocumentationSections''
∇
∇ r←Describe
⍝ return description only
:Access public shared
r←ExtractDocumentationSections'Description::'
∇
∇ r←ShowDoc what
⍝ return documentation sections that contain what in their title
⍝ what can be a character scalar, vector, or vector of vectors
:Access public shared
r←ExtractDocumentationSections what
∇
:EndSection
∇ r←Upgrade;z
⍝ loads the latest version from GitHub
:Access public shared
z←Get'https://raw.githubusercontent.com/Dyalog/library-conga/master/HttpCommand.dyalog'
:If z.rc≠0
r←z.(rc msg)
:ElseIf z.HttpStatus≠200
r←¯1(⍕z)
:Else
{}LDRC.Close'.' ⍝ close Conga
LDRC←''         ⍝ reset local reference so that Conga gets reloaded
:Trap 0
r←0 ''
:Else
r←¯1('Could not ⎕FIX new HttpCommand: ',2↓∊': '∘,¨⎕DMX.(EM Message))
:EndTrap
:EndIf
∇
:EndClass
﻿:Namespace JQ
(⎕IO ⎕ML)←1
⍝ == JQ - JQuery Utilities
⍝ For more information:
⍝ * JQuery - http://jquery.com
CRLF←⎕UCS 13 10
eis←{(,∘⊂)⍣((326∊⎕DR ⍵)<2>|≡⍵),⍵} ⍝ Enclose if simple
quote←{'⍎'=1↑⍵:⍵ ⋄ '"'∊⍵:⍵ ⋄ '"',⍵,'"'}
ine←{0∊⍴⍺:'' ⋄ ⍵} ⍝ if not empty
∇ r←{script}JQueryfn pars;jqfn;sel;jqpars;chain;script;oname;prejs;option
⍝ pars -
⍝   [1] jquery function name,
⍝   [2] selectors,
⍝   [3] jquery function parameters,
⍝   [4] jquery function chain,
⍝   [5] object name for the created object
⍝   [6] JavaScript to execute prior to function call
⍝   [7] option
⍝ for usage examples, see other functions in this namespace
script←{6::⍵ ⋄ script}⍬  ⍝[1] wrap with <script>? [2]add jQuery onload $(function(){});? [3] 1=use jQuery selector, 0=use JavaScript New
script←3↑script,(⍴,script)↓1 1 1
pars←eis pars
jqfn sel jqpars chain oname prejs option←pars,(⍴pars)↓'' '' '' '' '' '' ''
chain,←(';'=¯1↑chain)↓';'
sel←quote ¯2↓∊{⍵,', '}¨eis sel
:If 9=|⎕NC'jqpars'
jqpars←#.JSON.toJQueryParameters jqpars
:ElseIf '{'≠1↑(+/∧\jqpars∊' ',CRLF)↓jqpars
jqpars←'{',jqpars,'}'
:EndIf
:If ~0∊⍴option
jqpars,⍨←(quote option),', '
:EndIf
r←script[3]{⍺:'$(',sel,').',⍵ ⋄ 'new ',⍵}jqfn,'(',jqpars,')',chain
r←script[2]{⍺:'$(function(){',⍵,'});' ⋄ ⍵}(prejs ine prejs,(';'=¯1↑prejs)↓';'),(oname ine oname,' = '),r
r←script[1]{⍺:'<script>',⍵,'</script>' ⋄ ⍵}(oname ine'var ',oname,';'),r
∇
∇ r←page On pars;delegate;selector;event;clientdata;response;script;data;cd;name;id;type;what;dtype;success;ajax;useajax;jquerywrap;scriptwrap;hourglass;hg;removehg;status
⍝ pars - [1] selector(s) (delegates), [2] events to bind to,  [3] data to send to server [4] id if the object whose HTML is to be updated
⍝ [1] - a simple character vector of selector(s) or a two element vector of (selectors delegates)
⍝ [2] - a character vector of events to bind
⍝ [3] - data to be sent to the server in the form: (name {id} type what)...
⍝
⍝       name - the name for the piece of data - if 'serialize', then serialize all form data on the page
⍝
⍝       id - selector for where to get the data
⍝
⍝       type - type of data to retrieve.  one of:
⍝              attr - data is an attribute of the selected element
⍝              css - data is a css setting of the selected element
⍝              html - data is the html content of the selected element
⍝              val - the value if it's an input element
⍝              is - see jQuery.is()
⍝              eval - data will be the evaluation of the what parameter
⍝              event - the jquery event object
⍝              string - just a string
⍝              serialize - send form data back in serialized format
⍝
⍝       what - type and what are related as follows:
⍝              type         what                               example of what JQ.On generates
⍝              ----         ----                               -------------------------------
⍝              attr         attribute name to return           attr("id")
⍝              css          css setting to return              css("background-color")
⍝              html         (not used - should be '')          html()
⍝              val          (not used - should be '')          val()
⍝              is           jQuery.on selector                 is(":checked")
⍝              eval         javascript expression              eval("confirm('Are you sure?')")
⍝              event        the element of the event object to return
⍝              string       the string to send back
⍝              serialize    the selector for the form whose data is to be serialized
⍝
⍝ [4] - response handling
⍝       if empty, the response is assumed to be a json array of either:
⍝       {(replace|append|prepend: selector),(data: "data to replace with, append, or prepend)}
⍝       {execute: "javascript expression"}
⍝       if non-empty, this parameter is the selector for the element whose content will be replaced by the server response
⍝ [5] - script - if non-empty, this is javascript to execute in the browser prior to the AJAX call
⍝ [6] - useajax - if 0 don't make an AJAX call, just execute the script
⍝ [7] - jQueryWrap - if 0, don't wrap with $(function(){...}
⍝ [8] - ScriptWrap - if 0, don't wrap with <script>...</script>
⍝ [9] - Hourglass - if 1, display hourglass cursor during AJAX call
:Select ⊃⎕NC'page'
:Case 9 ⋄ page.Use'JQuery' ⋄ page←page.Page ⍝ page is the request object
:EndSelect
page←quote page
pars←eis pars
delegate←''
selector event clientdata response script useajax jquerywrap scriptwrap hourglass←9↑pars,(⍴pars)↓'' '' '' '' '' 1 1 1 1
:If 1<|≡selector ⋄ selector delegate←selector ⋄ delegate←', ',quote delegate ⋄ :EndIf
data←'_event: event.type, _what: '
data,←'(("undefined" == typeof($(event.currentTarget).attr("name")) ? $(event.currentTarget).attr("id") : $(event.currentTarget).attr("name")))'
data,←', _value: $(event.currentTarget).val()'
data,←', _selector: "',selector,'"'
clientdata←eis clientdata ⍝ :If 2=|≡clientdata ⋄ clientdata←,⊂clientdata ⋄ :EndIf
:If 0∊⍴clientdata
:OrIf (1=⍴clientdata)∧'_callback'≡⊃⊃clientdata
data,←',_serialized_: $("form").serialize()'
:EndIf
:For cd :In clientdata
cd←eis cd
(name id type what)←4↑cd,(⍴cd)↓4⍴⊂''
:If name≡'serialize'
(name id type what)←4↑(⊂''),name id type
:EndIf
:If (~0∊⍴name)∨(⊂'serialize')∊id type
:Select id
:CaseList 'attr' 'css' 'html' 'is' 'val' ⍝ no selector specified, use event.target
type what←id type
id←'event.target'
:Case 'serialize'
type id←id type
:If 0∊⍴id ⋄ id←'form' ⋄ :EndIf
id←quote id
:Case 'eval'
type what←id type
id←''
:Case 'event'
type what←id type
id←''
:Case 'string'
type what←id(quote type)
id←''
:Case ''
id←quote'#',name
:Else
id←quote id
:EndSelect
:Select type
:Case 'eval'
type←what
:Case 'event'
type←type,'.',what
:Case ''
type←'val()'
:Case 'string'
type←what
:Else
:If type≡'serialize'
name,←'_serialized_'
:EndIf
type←type,'(',(what ine quote what),')'
:EndSelect
data,←',',name,': ',(id ine'$(',id,').'),type
:EndIf
:EndFor
(hg removehg)←hourglass∘{⍺:'document.body.style.cursor="',⍵,'";' ⋄ ''}¨'wait' 'default'
:If 0∊⍴response ⍝ if no response element specified
dtype←'"json"'
success←'success: function(obj){APLJaxReturn(obj);',removehg,'}'
:Else
dtype←'"html"'
success←'success: function(d){$(',(quote response),').empty().html(d);',removehg,'}'
:EndIf
status←'statusCode:{ 408: function(){alert("Session timed out");',removehg,'}}'
ajax←script ine script,';'
ajax,←useajax/hg,'$.ajax({url: ',page,', cache: false, type: "POST", dataType: ',dtype,', headers:{"isAPLJax": "true"}, data: {',data,'}, ',success,', ',status,'});'
r←'$(',(quote selector),').on(',(quote event),delegate,', function(event){',ajax,'});'
:If jquerywrap ⋄ r←'$(function(){',r,'});' ⋄ :EndIf
:If scriptwrap ⋄ r←'<script>',r,'</script>' ⋄ :EndIf
∇
:section Position
∇ r←selector Position args;inds;mask;parameters;my;at;of;collision;within;q;tmp
⍝ Description:: Cover for jQueryUI Position widget
⍝ Arguments::
⍝ selector - jQuery selector
⍝ args - position information per jQueryUI's Position widget http://api.jqueryui.com/position/
⍝        can be in any of the following forms
⍝      1) positional (my at of collision within)  N.B. we don't use the "using" parameter
⍝         example:  myDiv Position 'left top' 'right bottom' '#otherElement'
⍝                   positions myDiv's top left corner at the bottom right corner of the element with id "otherElement"
⍝      2) paired
⍝                   myDiv Position 'my' 'left top' 'at' 'right bottom' 'of' '#otherElement'
⍝                   myDiv Position ('my' 'left top') ('at' 'right bottom') ('of' '#otherElement')
⍝                   myDiv Position 3 2⍴'my' 'left top' 'at' 'right bottom' 'of' '#otherElement'
⍝ Note: positional arguments are in form horizontal (left center right) vertical (top center bottom)
parameters←'my' 'at' 'of' 'collision' 'within'
q←{1⌽'''''',{⍵/⍨1+''''=⍵}⍕⍵}
:If 2=⍴⍴args ⍝ matrix
args←,args
:ElseIf 3=≡args
args←⊃,/args
:EndIf
args←eis args
inds←parameters⍳args
:If ∨/mask←inds≤⍴parameters
:If mask≡(2×+/mask)⍴1 0
parameters←mask/args
args←(1⌽mask)/args
:EndIf
:Else
parameters←(⍴args)↑parameters
:EndIf
tmp←⎕NS''
parameters(tmp{⍺⍺⍎⍺,'←',q ⍵})¨args
r←0 JQueryfn'position'selector tmp
∇
:endsection
:section APLJax helpers (for legacy pages)
∇ r←selector Replace content
r←⊂('replace'selector)('data'content)
∇
∇ r←selector Append content
r←⊂('append'selector)('data'content)
∇
∇ r←selector Prepend content
r←⊂('prepend'selector)('data'content)
∇
∇ r←Execute content
r←⊂('execute'content)
∇
:endsection
:EndNamespace
﻿:Class MarkAPL
⍝ ## Overview
⍝ MarkAPL is a parser that converts Markdown to valid HTML5.\\
⍝ The Markdown can be specified in two ways:
⍝ * As a vector of text vectors.
⍝ * As a filename.
⍝
⍝ ## How to get help
⍝ In order to view MarkAPL's cheat sheet execute this:\\
⍝ ~~~
⍝ #.MarkAPL.Help 0
⍝ ~~~
⍝ This will work if MarkAPL's `Files/` folder lives in the current directory.
⍝ If it doesn't then either make sure that it does or create a parameter
⍝ space by calling `CreateHelpParms` and then specify the folder that hosts
⍝ MarkAPL's `Files/` folder on  `homeFolder`. It will show the cheat sheet
⍝ in your default browser.\\
⍝ If you need comprehensive information call:
⍝ ~~~
⍝ #.MarkAPL.Reference 0
⍝ ~~~
⍝ ## Examples
⍝ ### Creating an HTML file from a Markdown file
⍝ ~~~
⍝ report←#.MarkAPL.ConvertMarkdownFile 'C:\MyMarkdown.md'
⍝ ~~~
⍝ This converts the Markdown in the file `C:\MyMarkdown.md` into fully-fledged
⍝ HTML and writes it to a file `C:\MyMarkdown.html`.\\
⍝ `report` is ideally empty but might be a vector of text vectors with warnings
⍝ or even error messages.a
⍝ The example uses just defaults. Instead you can specify parameters via a
⍝ namespace passed as the optional left argument. See further down an example how
⍝ to do this with the `Markdown2HTML` method.
⍝ ### Creating HTML from Markdown
⍝ Of course you can also convert Markdown from a variable in the workspace:
⍝ ~~~
⍝ MyMarkdown←'# MarkAPL' 'All about **_MarkAPL_**'
⍝ ~~~
⍝ ~~~
⍝ (html ns)←#.MarkAPL.Markdown2HTML MyMarkdown
⍝ ~~~
⍝ This converts `MyMarkdown` into HTML. By default the HTML is just a snippet, not
⍝ a fully-fledged HTML page. You can change that by:
⍝ ~~~
⍝ parms←#.MarkAPL.CreateParms
⍝ parms.inputFilename←'in.md'
⍝ parms.outputFilename←'out.md'
⍝ (html ns)←parms #.MarkAPL.Markdown2HTML ''
⍝ ~~~
⍝ If you want to create a full-blown HTML page without any files being involved you
⍝ can also set the `createFullHtmlPage` parameter to 1.
⍝ ## Misc
⍝ |Homepage:    | <http://aplwiki.com/MarkAPL> |
⍝ |Cheat sheet: | <http://download.aplteam.com/MarkAPL_CheatSheet.html> |
⍝ |Reference:   | <http://download.aplteam.com/MarkAPL.html> |
⍝ Kai Jaeger ⋄ APL Team Ltd
⎕IO←1 ⋄ ⎕ML←1
:Include ##.APLTreeUtils
∇ r←Version
:Access Public Shared
⍝ See `History`
r←(Last⍕⎕THIS)'4.4.5.7' '2018-09-13'
∇
∇ History
:Access Public Shared
⍝ * 4.4.5
⍝   * Bug fix: HTML blocks at the beginning of a document were not recognized.
⍝ * 4.4.4
⍝   * Bug fix: table cells with an odd number of ticks caused havoc (loss of text).
⍝ * 4.4.3
⍝   * Bug fixes
⍝     * In a definition list the term should never become an <abbr> tag.
⍝     * Assigning special attributes on multi-line SetText headers failed to work.
⍝     * Special attributes assigned to the definition part of a def list (the <dd> tag) were ignored.
⍝ * 4.4.2
⍝   * CSS got changes in order to make code better readable.
⍝     * Bug fixes:
⍝       * An abbreviation title that contained itself an abbreviation led to mutilated HTML.
⍝       * Abbreviations did not honour word boundaries.
⍝ * 4.4.1
⍝   * The MarkAPL.html document had a problem with it's CSS files.
⍝   * Documentation improved.
⍝ * 4.4.0
⍝   * Converted from the APL wiki to GitHub.
∇
:Field Public Shared ReadOnly PartOfNames←⎕A,⎕D,'_∆⍙','qwertyuiopasdfghjklzxcvbnm'
:Field Public Shared ReadOnly AllWhiteSpaceChars←⎕ucs 32 9 10 11 13
⎕IO←1 ⋄ ⎕ML←1
∇ {(html ns)}←{parms}Markdown2HTML markdown
⍝ `⍵` is one of:
⍝   * Vector of character vectors representing a Markdown document.
⍝   * Empty vector. In this case the parameter "inputFilename" must be specified.
⍝ `⍺` Is a namespace with parameters, typically create by calling `CreateParms`.\\
⍝ `←` Is a two-element vector starting from version 1.7.0:
⍝ 1. Is always the HTML created. As a side effect this HTML will also be written
⍝    to the file specified by `outputFilename` - if that is not empty that is.
⍝ 2. The `ns` namespace created by `Init` and needed / processed by `Process. This contains `ns.report`,
⍝    something you might want to check.
⍝ In case `outputFilename` is not empty the HTML is also written to file.
:Access Public Shared
parms←{0<⎕NC ⍵:⍎⍵ ⋄ CreateParms}'parms'
:If 0∊⍴markdown
:If 0∊⍴parms.inputFilename
'Neither "markdown" nor "inputFilename" defined'⎕SIGNAL 6
:Else
markdown←ReadUtf8File parms.inputFilename
:EndIf
:EndIf
ns←Init parms markdown
ns←Process ns
html←ns.html
:If (~0∊⍴ns.parms.outputFilename)∧0≠ns.parms.createFullHtmlPage
:OrIf 1=ns.parms.createFullHtmlPage
html←ns.parms MakeHTML_Doc html
:EndIf
{}html{WriteUtf8File⍣(~0∊⍴⍵)⊣⍵ ⍺}ns.parms.outputFilename
∇
∇ r←parms MakeHTML_Doc html;bool;lines;sh;ind
⍝ Takes HTML, typically created by calling `Process`, and makes it a fully fledged document by adding
⍝ <body>, <head> -- with <title> -- and <html> including the DocType. By default CSS is injected as well.
:Access Public Shared
r←⊂'<!DOCTYPE html>'
r,←⊂'<html',((~0∊⍴parms.lang)/' lang="',(parms.lang~'"'),'"'),'>'
r,←⊂'<head>'
:If parms.enforceEdge
⍝ ↓↓↓ https://blogs.msdn.microsoft.com/askie/2009/03/23/understanding-compatibility-modes-in-internet-explorer-8/
r,←⊂'<meta http-equiv="X-UA-Compatible" content="IE=edge">'
⍝ This MUST be the first <meta> tag!
:EndIf
r,←⊂'<meta charset="',parms.charset,'">'
:If ⎕NULL≡parms.title
:If 1=+/ind←∨/¨⊃∨/'<h1 ' '<h1>'{⍺∘⍷¨⍵}¨⊂html
parms.title←{⍵↑⍨¯1+⍵⍳'<'}{⍵↓⍨⍵⍳'>'}{⍵↓⍨¯1+1⍳⍨'<h1'⍷⍵}(ind⍳1)⊃html
:Else
parms.title←'MarkAPL'
:EndIf
:EndIf
r,←⊂'<title>',parms.title,'</title>'
parms←EstablishDefaultHomeFolder parms
:If 0=parms.noCSS
:If ⎕NULL≡parms.cssURL
parms.cssURL←parms.homeFolder
:EndIf
parms.cssURL~←'"'
:If ~0∊⍴parms.cssURL
parms.cssURL,←{'/'/⍨~(¯1↑⍵)∊'/\'}parms.cssURL
((parms.cssURL='\')/parms.cssURL)←'/'
:EndIf
:If parms.linkToCSS
r,←'screen'InjectCssFilenamesIntoHtml parms
:If ~0∊⍴parms.printCSS
r,←'print'InjectCssFilenamesIntoHtml parms
:EndIf
:Else
:If ~0∊⍴parms.screenCSS
r,←'screen'InjectCssIntoHtml parms
:EndIf
:If ~0∊⍴parms.printCSS
r,←'print'InjectCssIntoHtml parms
:EndIf
:EndIf
:EndIf
:If ~0∊⍴parms.head
r,←Nest parms.head
:EndIf
r,←'</head>' '<body>',html,'</body>' '</html>'
∇
∇ html←type InjectCssIntoHtml parms;css;cssFiles;cssFile;blockNo;cssFile_
⍝ Inject zero, one or many CSS files and embrace them with a <style> tag.
⍝ The CSS is converted into a single line if `compressCSS` is 1.
⍝ The parameter `tocCaption` is honoured.
'Invalid CSS media type'⎕SIGNAL 11/⍨0=+/(⊂type)∊'screen' 'print'
cssFiles←','Split parms.⍎type,'CSS'
html←''
:For cssFile :In cssFiles
:If 0∊⍴parms.cssURL
cssFile_←cssFile
:Else
cssFile_←parms.cssURL,'/',cssFile
:EndIf
css←ReadUtf8File MassageFilename cssFile_
:If type≡'screen'
:AndIf ~0∊⍴blockNo←'<<maxwidth>>'⎕S 2⊣css
blockNo+←1
(blockNo⊃css)←'max-width:',({' '=1↑0⍴⍵:⍵,(0∊⍴⍵~⎕D)/'px' ⋄ (⍕⍵),'px'}parms.width),';'
:EndIf
css←2 InsertTocCaption parms css
css←{CompressCSS 2↓⊃,/(⎕UCS 13 10)∘,¨⍵}⍣parms.compressCSS⊣css
html,←Nest css
:EndFor
:If ~0∊⍴html
html←(⊂'<style media="',type,'">'),html,(⊂'</style>')
:EndIf
∇
∇ html←type InjectCssFilenamesIntoHtml parms;css;cssFiles;cssFile
⍝ Inject zero, one or many CSS filenames and embrace them with a <style> tag.
'Invalid CSS media type'⎕SIGNAL 11/⍨0=+/(⊂type)∊'screen' 'print'
cssFiles←','Split parms.⍎type,'CSS'
cssFiles←{0=+/b←'\'=r←⍵~'"':r ⋄ (b/r)←'/' ⋄ r}¨cssFiles
html←''
:For cssFile :In cssFiles
html,←⊂'<link href="',parms.cssURL,cssFile,'" rel="stylesheet" media="',type,'">'
:EndFor
∇
InsertTocCaption←{
⍝ Replace the two occurences of "<<tocCaption>><<showHide>>" in the css against parms.tocCaption
⍝ ⍺ is 1 for print CSS and 2 for screen CSS.
(parms css)←⍵
lines←Where∨/¨bool←'<<tocCaption>>'∘⍷¨css
0∊⍴lines:css
bool←bool[lines]
(tpd tpu)←⎕UCS 9660 9650   ⍝ Triangle Point Down, Triangle Pointing Up
(1=⍺)∨1=⍴,lines:css
css[lines[2]]←⊂'content: ''',(parms.tocCaption,' ',tpu,''''),';'
css
}
∇ {report}←{parms}ConvertMarkdownFile filename;ns
⍝ Converts the contents of `filename` to HTML5. The output filename equals `filename` except that
⍝ the extension changes from `.md` to `.html`.\\
⍝ This can be overwritten by specifying a parameter space as left argument (typically created
⍝ by calling `CreateParms`) and setting `outputFilename`.\\
⍝ Note however that when you specify `inputFilename` to anything but '' or `filename an error is
⍝ generated. Other settings in parms are honoured.\\
⍝ If no left argument is passed then defaults take place, in particular regarding the CSS.\\
⍝ Note that by default `ConvertMarkdownFile` creates a fully-fledged HTML page.\\
⍝ The result is either an empty text vector or a vector of text vectors. It may contain warnings or error
⍝ messages. It's what is returned by `Init` on `ns.report`.
:Access Public Shared
parms←{0=⎕NC ⍵:CreateParms ⋄ ⍎⍵}'parms'
:If ~0∊⍴parms.inputFilename
:AndIf parms.inputFilename≢filename
'"inputFilename" must not be specified'⎕SIGNAL 11
:EndIf
parms.inputFilename←##.FilesAndDirs.NormalizePath filename
parms.createFullHtmlPage←(1+¯1≡parms.createFullHtmlPage)⊃parms.createFullHtmlPage 1
:If 0∊⍴parms.outputFilename
parms.outputFilename←##.FilesAndDirs.NormalizePath∊(¯1↓⎕NPARTS filename),'.html'
:EndIf
ns←Init parms''
ns←Process ns
:If parms.createFullHtmlPage
ns.html←ns.parms MakeHTML_Doc ns.html
:EndIf
WriteUtf8File parms.outputFilename ns.html
report←ns.report
∇
∇ r←CreateParms;clp;SetTo
⍝ Returns a parameter namespace with default values.
⍝ Use method `∆List` to list all names and their values.
:Access Public Shared
r←⎕NS''
clp←GetCommandLineParms''
SetTo←{0=clp.⎕NC ⍺:⍎'r.',⍺,'←⍵' ⋄ ⍎'r.',⍺,'←clp.⍎⍺'}  ⍝ Take command line parms or default
'bookmarkLink'SetTo 6
'bookmarkMayStartWithDigit'SetTo 1
r.debug←IsDevelopment
'charset'SetTo'utf-8'
'checkFootnotes'SetTo r.debug
'checkLinks'SetTo r.debug
'collapsibleTOC'SetTo 0
'compileFunctions'SetTo 1
'compressCSS'SetTo 1
'createFullHtmlPage'SetTo ¯1
'cssURL'SetTo ⎕NULL
'div_h_tag'SetTo 1
'enforceEdge'SetTo 1
'footnotesCaption'SetTo'Footnotes'
'head'SetTo''
'homeFolder'SetTo ⎕NULL
'ignoreEmbeddedParms'SetTo 0
'imageURL'SetTo''
'inputFilename'SetTo''
'lang'SetTo'en'
'leanpubExtensions'SetTo 0
'leanpubIconsUrl'SetTo'https://download.aplwiki.com/LeanPub/Images/'
'lineNumberOffset'SetTo 0
'linkToCSS'SetTo 0
'markdownStrict'SetTo 0
'numberHeaders'SetTo 0
'noCSS'SetTo 0
'outputFilename'SetTo''
'printCSS'SetTo'MarkAPL_print.css'
'reportLinks'SetTo 0
'reportLinksCaption'SetTo'Link report'
'screenCSS'SetTo'MarkAPL_screen.css'
'subTocs'SetTo 1
'syntaxSugar'SetTo 1
'title'SetTo ⎕NULL
'toc'SetTo 0
'tocCaption'SetTo'Table of contents'
'verbose'SetTo r.debug
'width'SetTo 900
r.⎕FX'r←∆List;⎕IO' '⍝ List all variables and possible references in this namespace' '⎕IO←1' 'r←{⍵,[1.5]⍎¨⍵}⎕NL-2 9'
∇
∇ parms←CreateHelpParms
:Access Public Shared
parms←CreateParms
parms.linkToCSS←0
parms.toc←2 3
parms.numberHeaders←2 3 4 5 6
parms.bookmarkLink←6
parms.compileFunctions←0
parms.viewInBrowser←1
parms.collapsibleTOC←1
parms.compressCSS←1
parms.title←'MarkAPL Reference'
parms.width←1100
parms.reportLinks←1
∇
∇ ns←Init(parms markdown);buffer
⍝ Creates a namespace "ns" that contains important stuff needed to process `markdown`.
⍝ See "MarkAPL.html" for details.
:Access Public Shared
parms←CompileParms parms
{}CompileMarkAPLFnsAndOprs parms
markdown←GetMarkdown markdown
ns←Create_NS ⍬
ns.markdown←dtb(Nest markdown),⊂''
ns.lineNumbers←⍳⍴ns.markdown                  ⍝ Useful for reporting problems
ns←RemoveAllComments ns
ns←parms ProcessLeanPubExtensions ns
:If 0<⍴'^ *{:: encoding=".*$'⎕S 0⊣⊃ns.markdown
ns.markdown←1↓ns.markdown
:EndIf
ns.markdownLC←Lowercase ns.markdown           ⍝ We need this often, so we do this ONCE
buffer←dlb ns.markdown
ns.emptyLines←GetEmptyLines buffer
ns.leadingChars←(16⌊⍴∘,¨ns.markdown)↑¨buffer
ns.withoutBlanks←ns.markdown~¨' '
ns.parms←parms
ns←ProcessEmbeddedParms⍣(~parms.ignoreEmbeddedParms)⊣ns
:If (,0)≢,ns.parms.toc
ns.parms.bookmarkLink⌈←⌈/ns.parms.toc
:EndIf
ns.parms.head←Nest ns.parms.head
∇
∇ parms←CompileParms parms
:If 0∊⍴parms
parms←CreateParms
:EndIf
parms←EstablishDefaultHomeFolder parms
:If ⎕NULL≡parms.cssURL
parms.cssURL←'file:///',parms.homeFolder
:EndIf
((parms.cssURL='\')/parms.cssURL)←'/'
((parms.leanpubIconsUrl='\')/parms.leanpubIconsUrl)←'/'
parms.cssURL,←(~(¯1↑parms.cssURL)∊' /')/'/'
parms.leanpubIconsUrl,←(~(¯1↑parms.leanpubIconsUrl)∊' /')/'/'
parms.(inputFilename outputFilename)←1 CorrectSlash¨parms.(inputFilename outputFilename)
parms.(cssURL screenCSS printCSS)←0 CorrectSlash¨parms.(cssURL screenCSS printCSS)
∇
∇ markdown←GetMarkdown markdown;length
:If 0∊⍴markdown
'Neither "markdown" nor "inputFilename" are set?!'⎕SIGNAL 6/⍨0∊⍴parms.inputFilename
markdown←ReadUtf8File parms.inputFilename
:EndIf
markdown←,,¨markdown
'Invalid Markdown (depth)'⎕SIGNAL 11/⍨2≠|≡markdown
'Invalid Markdown (depth)'⎕SIGNAL 11/⍨(,1)≢∪≡¨markdown
length←⍴markdown
:If length>⍴markdown←'\t'⎕R(4⍴' ')⍠('Mode' 'M')⊣markdown              ⍝ Replace all <TAB> chars by 4 spaces
markdown,←(length-⍴markdown)⍴⊂''                                  ⍝ In order to overcome bug <01446>
:EndIf
markdown←{0=+/b←(⎕UCS 0)=⍵:⍵ ⋄ w←⍵ ⋄ (b/w)←⎕UCS 65533 ⋄ w}¨markdown   ⍝ Replace U+0000 by U+FFFD for secutity reasons
⍝Done
∇
∇ ns←Process ns
⍝ Takes a namespace, typically created by calling `Init`, and then processes `ns.markdown`,
⍝ creating ns.html along the way.
⍝
⍝ The result is all MarkDown converted to HTML but not a fully-fledged HTML document. In order to
⍝ achieve that call `MakeHTML_Doc` in the next step.
:Access Public Shared
ns.noOf←1               ⍝ Minimum number of lines to be removed from ns.(markdown leadingChars emptyLines) per cycle.
ns←ScanMarkdown ns
ns.toc←CollectToc ns
ns←SetTitle ns
ns←NumberHeaders ns
ns←InjectTOC ns
ns←InjectSubTOCs ns
ns←ReplaceLinkIDs ns
ns←ReportLinks ns
ns←InjectFootNotes ns
ns←HandleAbbreviations ns
ns←CheckInternalLinks ns
ns←CheckForInvalidFootnotes ns
:If IsDevelopment
:AndIf ns.parms.verbose
:AndIf ~0∊⍴ns.report
⎕←⍪ns.report
:EndIf
ns.html←{1=≡⍵:⍵ ⋄ ⊃,/⊃⍵}¨ns.html
∇
∇ r←Execute y
⍝ This is used for test purposes only: to execute non-public methods.
:Access Public Shared
'Invalid call'⎕SIGNAL 11/⍨~IsDevelopment
:If 0=⎕NC'ns'
⎕SHADOW'ns'
ns←Create_NS ⍬
:EndIf
r←⍎y
∇
∇ {ns}←{parms}Reference recompileFlag
⍝ Displays the file MarkAPL.html with your default browser.
⍝
⍝ `recompileFlag`:
⍝ - A zero shows the file as it stands.
⍝ - A 1 lets MarkAPL recompile it from MarkAPL.md first.
⍝ Returns either `⍬` or the `ns` namespace created by `Init` and modified by `Process`.
:Access Public Shared
parms←{0<⎕NC ⍵:⍎⍵ ⋄ CreateHelpParms}'parms'
ns←CompileHelp'MarkAPL.html'recompileFlag parms
:If ¯1≠×recompileFlag  ⍝ This syntax is used only by the `Make` workspace and test cases, therefore it is not documented.
:AndIf parms.viewInBrowser
:If ⍬≢ns
GoToWebPage'file:///',ns.parms.outputFilename
:Else
GoToWebPage'file:///',parms.outputFilename
:EndIf
:EndIf
∇
∇ {ns}←{parms}Help recompileFlag
⍝ Displays the file MarkAPL_CheatSheet.html with your default browser.
⍝
⍝ `recompileFlag`:
⍝ - A zero shows the file as it stands.
⍝ - A 1 lets MarkAPL recompile it from MarkAPL_CheatSheet.md first.
⍝ Returns either `⍬` or the `ns` namespace created by `Init` and modified by `Process`.
:Access Public Shared
parms←{0<⎕NC ⍵:⍎⍵ ⋄ CreateHelpParms}'parms'
ns←CompileHelp'MarkAPL_CheatSheet.html'recompileFlag parms
:If ¯1≠×recompileFlag  ⍝ This syntax is used only by the `Make` workspace and test cases, therefore it is not documented.
:AndIf parms.viewInBrowser
:If ⍬≢ns
GoToWebPage'file:///',ns.parms.outputFilename
:Else
GoToWebPage'file:///',parms.outputFilename
:EndIf
:EndIf
∇
∇ r←{colHeader}Matrix2MarkdownTable mat;b;⎕IO;dt;mask;noOfColumns
:Access Public Shared
⍝ Converts an APL matrix into Markdown.\\
⍝ Since the Markdown is created automatically we value space & performance more than readability.\\
⍝ Without a left argument the right argument transforms into a matrix without
⍝ column headers. If a column is strictly numeric it is right-aligned.\\
⍝ If a left argument is provided then it is expected to be a vector of text vectors
⍝ defining column headers.\\
⍝ Such column headers may define column alignment via a leading and/or a trailing `:`; that means
⍝ that when using this method you cannot have a trailing `:` in a column header.\\
⍝ In case no column headers are specified or the column headers don't define alignment then columns
⍝ that contain nothing but numeric data are by default right-aligned while all other columns
⍝ are left-aligned.\\
⍝ This method does not allow special attributes, although they may be added in a seperate
⍝ step of course.
'Invalid right argument - not a matrix'⎕SIGNAL 11/⍨2≠⍴⍴r←mat
:If 0<=/b←,∨/¨'|'∊¨r                          ⍝ Any "|" anywhere?!
(b/,r)←EscapePipeSymbolInCell¨b/,r
:EndIf
dt←0=⊃¨0⍴¨r                                   ⍝ Data type
:If 0=⎕NC'colHeader'                          ⍝ If no left argument...
colHeader←,[0.5](':-' '-:')[1+∧⌿dt]       ⍝ ... then we right-align numeric cols.
:Else
'Left argument: length error'⎕SIGNAL 6/⍨(⍴colHeader)≠2⊃⍴mat
'Left argument: depth error'⎕SIGNAL 11/⍨2≠≡colHeader
colHeader←⍉↑(∧⌿dt)BuildColumnHeader¨colHeader
:EndIf
r←colHeader⍪r
dt←((⍴colHeader)⍴0)⍪dt
((,dt)/,r)←⍕¨(,dt)/,r                         ⍝ Format numeric cells only
r←'|',¨r                                      ⍝ Insert the "|" for cell recognition
noOfColumns←2⊃⍴r
r←↓r
r←noOfColumns{⎕ML←3 ⋄ (1<⍺)↓¨∊¨⍵}r
∇
∇ md←Matrix2MarkdownList mat;i;type
:Access Public Shared
⍝ Converts an APL matrix in to list definition(s).\\
⍝ The matrix must have three columns:\\
⍝ 1. List type. 0=bulleted list, 1 etc numeric list **and** starting point.
⍝ 2. Nesting level. May start with either 0 or 1.
⍝ 3. Text vector of vector of text vector.
'Invalid right argument - not a matrix'⎕SIGNAL 11/⍨2≠⍴⍴mat
'Invalid right argument - must have 2 columns'⎕SIGNAL 11/⍨3≠2⊃⍴mat
'First line''s level must be either 0 or 1'⎕SIGNAL 11/⍨~(⊃mat)∊0 1
'Invalid right argument - must have 2 columns'⎕SIGNAL 11/⍨~∧/mat[;1]∊0,⍳999
mat[;2]←{⍵-1}⍣(1=⊃mat[;2])⊣mat[;2]        ⍝ Ensure 0 is first level
md←mat[;2]⍴¨' '
type←0=mat[;1]
(type/md)←(type/md),¨⊂'* '
type←~type
(type/md)←(type/md),¨(⍕¨type/mat[;1]),¨⊂'. '
md←⊃,/md{(≡⍵)∊0 1:⊂⍺,⍵ ⋄ (⊂⍺,⊃⍵),(⊂(⍴⍺)⍴' '),¨1↓⍵}¨mat[;3]
md←'' '',md,'' ''
⍝Done
∇
∇ css←CompressCSS css;start;end;mask;bool;flag;b1;b2;b
:Access Public Shared
⍝ Takes CSS and compresses it to a single line.
⍝ Along the way it...
⍝ * removes all comments
⍝ * removes any spaces around `;:{}`
⍝ * replaces <TAB> chars by spaces
⍝ * removes multiple spaces
⍝
⍝ Note that this method can have desastrous results when performed on non-valid CSS!\\
⍝ Throws an error in case something is not right with the CSS.
css←{(1↓⊃,/(⎕UCS 13),¨⍵)}⍣(1≠≡css)⊣css
start←'/*'⍷css
end←'*/'⍷css
mask←~{⍵∨≠\⍵}css='"'
'Cannot compress CSS: number of occurrences of /* and */ are different'⎕SIGNAL 11/⍨0=≡/+/¨mask∘/¨start end
'Cannot compress CSS: Invalid nested comments'⎕SIGNAL 11/⍨~0∊⍴(∪⊃-/+\¨start end)~0 1
start∧←mask
end∧←mask
bool←~{⍵∨≠\⍵}start∨end
bool[1+Where end]←0
css←bool/css
css←dmb css~⎕TC
((css=⎕UCS 9)/css)←' '
mask←~{⍵∨≠\⍵}css='"'
b1←mask\mask/⊃∨/' :' ' ;' ' {' ' }'⍷¨⊂css
b2←mask\mask/⊃∨/': ' '; ' '{ ' '} '⍷¨⊂css
b←~b1∨0,¯1↓b2
css←b/css
∇
⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
⍝                                                                                                           ⍝
⍝                                                   Private stuff                                           ⍝
⍝                                                                                                           ⍝
⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
EscapePipeSymbolInCell←{
⍝ ⍵ is a cell from any APL matrix.
⍝ We convert any | to \| (escaping) except when it lives within code
c←⍵
mask←~GetMaskForCode c     ⍝ We must ignore code
0=+/mask:c                 ⍝ Everything is code? Done!
b←'|'=mask/c               ⍝ Where are the | when we ignore the code?
0=+/b:c                    ⍝ None?! Done!
buff←mask/c                ⍝ Get what's not code
(b/buff)←⊂'\|'             ⍝ Replace all | by \|
(mask/c)←buff              ⍝ Put stuff back
⊃,/c                       ⍝ Simplify
}
BuildColumnHeader←{
⍺←0 ⍝ Default data type is 0 (Char)
dt←⍺
~':'∊(1↑⍵),¯1↑⍵:⍵((-dt)⌽':','-')
'::'≡2↑¯1⌽⍵:(1↓¯1↓⍵)':-:'
':'=⊃¯1⌽⍵:(¯1↓⍵)'-:'
':'=⊃⍵:(1↓⍵)'-:'
':-'
}
∇ r←ProcessLists ns;noOf
r←0
:If 0=ns.parms.markdownStrict
:OrIf ∆LastLineWasEmpty
:If 3 IsHtmlList⊃ns.markdown
r←ProcessList ns
:EndIf
:EndIf
∇
∇ r←ProcessDefinitionLists ns;noOf;bool;bl;html;nop;not2;buff;bl2;total;el;not;sa;colons
r←0
:If 1<⍴ns.markdown                                ⍝ A definitions has at least two lines
:AndIf 1≤ScanForPara ns                           ⍝ Exactly one line for a term but there might be no empty line after it.
:AndIf ~0∊⍴'^\s{0,3}:\s'⎕S 0⊣⊃(+/∧\1↓ns.emptyLines)↓1↓ns.markdown  ⍝ Is there ": " in the first non-empty line?
noOf←(⍴ns.markdown)⌊(1 1⍷ns.emptyLines)⍳1     ⍝ Maximum number of lines until the last `:` of this definition list
colons←': '∘≡¨2↑¨noOf↑ns.leadingChars         ⍝ Where are any leading colons followed by a space?
total←0
:AndIf 0<+/colons                                 ⍝ Any at all? If not it's not a definition list!
bl←noOf↑ns.markdown                           ⍝ The whole lot
html←⊂'<dl>'
el←{0=⊃¨⍴¨⍵}bl~¨' '                           ⍝ Empty lines
:Repeat
:If 1<⍴bl
:AndIf ~0∊⍴∊1↓bl
:AndIf ~0∊⍴'^\s{0,3}:\s'⎕S 0⊣{⍵⊃⍨1⍳⍨0<⊃¨⍴¨⍵}1↓bl
sa←GetSpecialAttributes⊃bl
(⊃bl)←sa DropSpecialAttributes⊃bl
buff←('dt',sa)∘Tag¨1⊃¨ns ProcessInlineMarkUp¨1↑bl
not←1++/∧\1↓el
(bl colons el)←not↓¨bl colons el
:AndIf 0∊el
⍝ Now we pick up everything that fulfills one of the following conditions:
⍝ * Starts with a ": "
⍝ * Starts with two spaces (plus any leading spaces before the ":")
⍝ * Is an empty line
nop←+/∧\el∨colons∨{⊃(' '=¯1↓⍵)∧' '≠¯1↑⍵}¨(3++/∧\' '=⊃bl)↑¨bl
:AndIf 0<⍴bl2←nop↑bl
(bl colons el)←(⍴bl2)↓¨bl colons el
:AndIf ~0∊⍴bl2←(0<⊃¨⍴¨bl2~¨' ')/bl2
bl2{v←⍺ ⋄ 0∊⍴⍵:v ⋄ ((¯1+⊃⍵)⊃v)←dmb((¯1+⊃⍵)⊃v),' ',(⊃⍵)⊃v ⋄ ((⊃⍵)⊃v)←'' ⋄ v ∇ 1↓⍵}←⌽Where':'≠⊃¨dlb¨bl2
bl2←(0<⊃∘⍴¨bl2)/bl2
bl2←{⍵↓⍨1+⍵⍳':'}¨bl2
sa←GetSpecialAttributes¨bl2
bl2←sa DropSpecialAttributes¨bl2
bl2←⊃¨ns ProcessInlineMarkUp¨bl2
:If 1=not
:AndIf 1=⍴bl2
bl2←⊂('dd',⊃sa)Tag⊃bl2
:Else
:If 1<⍴bl2←((⊂'dd'),¨sa)Tag¨Tag¨bl2
(1⊃bl2)←'<p>'⎕R'<p class="first_dd">'⊣1⊃bl2
:EndIf
:EndIf
html,←buff,bl2
total+←not+nop
:Else
bl←''
:EndIf
:Until 0∊⍴bl
ns.noOf←total
html,←⊂'</dl>'
r←1
ns.html,←html
ns←Drop ns
∆LastLineWasEmpty←1
:EndIf
∇
∇ r←ProcessBlockQuotes ns;parms;md;ns2
⍝ Processes any blockquotes recursively. That way they can contain **everything**, including blockquotes.
r←0
:If '> '≡2↑⊃ns.leadingChars
ns.noOf←ScanForBlockQuotes ns
parms←CreateParms
parms.bookmarkLink←0
parms.markdownStrict←ns.parms.markdownStrict
parms.verbose←0
parms.checkLinks←0
parms.checkFootnotes←0
parms.subTocs←0
parms.syntaxSugar←ns.parms.syntaxSugar
parms.lineNumberOffset←⊃ns.lineNumbers
md←ns.noOf↑ns.markdown
(1⊃md)←2↓1⊃md
(1↓md)←(2×'> '∘≡¨2↑¨1↓md)↓¨1↓md
ns2←Init parms md
ns2←Process ns2
ns.html,←(⊂'<blockquote>'),ns2.html,⊂'</blockquote>'
ns.report,←ns2.report
ns←Drop ns
r←1
:EndIf
∇
∇ r←ProcessList ns;bl;type;i;startAt;item;pFlag;noOfBlanks;levels;levelChange;buff;sa;lastType;lastItem;toBeAdded;indentations;html;lastWasEmpty;indendations;cb;drop;para;Max;buff2;ns2;parms;ns3;md;report;infoString;buff3
⍝ Processing lists is more complex than one would think at first glance for several reasons:
⍝ * Lists can be nested at any level.
⍝ * A nested list can have a different type.
⍝ * Changing the bullet char for bulleted lists (+-*) starts a new list!
⍝ * Lists may contain independent paragrahs; their level is defined by indenting.
⍝ * MarkAPL allows lazy indenting: if a list items spans over several lines only the first
⍝   line must be indented properly. All other lines may or may not be indented.
⍝ * A single backslash at the end of an item are interpreted as "inject <br> here". So is
⍝   the insertion of `<<br>>` anywhere in the code but `<<br>>` is actually handled at a later stage.
⍝      {0=#.⎕NC ⍵: ⋄ #.STOP:.}'STOP'
:If 0=ns.noOf←IdentifyListItems ns
r←0
:Else
type←,(1+(⊃⊃ns.leadingChars)∊'*+-')⌷'ou'
bl←dtb GetListBlock ns.noOf↑ns.markdown
report←''
:If type='u'
html←,⊂'<ul>'
:Else
startAt←{⍵↑⍨¯1+⌊/⍵⍳'.)'}dlb⊃bl
html←,⊂'<ol start="',startAt,'">'
:EndIf
i←lastWasEmpty←levelChange←0
⍝ `levels` and `indentation` record almost the same thing:
⍝ * `level` counts white-space until the first non-white-space character.
⍝ * `indentation` does the same but then adds the length of the list-marker.
⍝ The latter is needed in order to identify the level of paragraphs and code blocks within a list.
levels←+/∧\' '=⊃bl
indendations←GetLengthOfLeadingWhitespacePlusListMarker⊃bl
lastType←⊃dlb⊃bl
:Repeat
drop←1
i←i+1
:If IsHtmlList dlb⊃bl
noOfBlanks←+/∧\' '=⊃bl
:If noOfBlanks≠¯1↑levels
:If noOfBlanks>¯1↑levels
type,←(1+(⊃i⊃ns.leadingChars)∊'*+-')⌷'ou'
((⍴html)⊃html)←'</li>'{⍵↓⍨(-⍴⍺)×⍺≡(-⍴⍺)↑⍵}(⍴html)⊃html
:If 'u'=¯1↑type
html,←⊂'<ul>'
:Else
startAt←{⍵↑⍨¯1+⌊/⍵⍳'.)'}dlb⊃bl
html,←⊂'<ol start="',startAt,'">'
:EndIf
levels,←noOfBlanks
indendations,←GetLengthOfLeadingWhitespacePlusListMarker⊃bl
lastType,←⊃dlb⊃bl
:Else
levelChange←+/∧\(⌽levels)>noOfBlanks
html,←({'</',(¯1↑⍵),'l>'}¨⌽(-levelChange)↑type),¨⊂'</li>'
(levels indendations lastType type)←(-levelChange)↓¨levels indendations lastType type
:EndIf
:ElseIf ~0∊⍴⊃bl
:AndIf (¯1↑lastType){~⍺∊'+-*':~⍵∊⎕D ⋄ ⍺≠⍵}⊃dlb⊃bl
html,←⊂'</',(¯1↑type),'l>'
((⍴type)⊃type)←(1+(⊃i⊃ns.leadingChars)∊'*+-')⌷'ou'
lastType,←⊃dlb⊃bl
:If 'u'=¯1↑type
html,←⊂'<ul>'
:Else
startAt←{⍵↑⍨¯1+⍵⍳'.'}dlb⊃bl
html,←⊂'<ol start="',startAt,'">'
:EndIf
:EndIf
:EndIf
:If 0∊⍴' '~⍨⊃bl
lastWasEmpty←1
:Else
:If IsHtmlList dlb⊃bl
(drop item)←CollectItem bl
:If ~0∊⍴sa←GetSpecialAttributes⊃bl
item←dlb dtb sa DropSpecialAttributes item
:If (⊂3↑(⍴html)⊃html)∊'<ul' '<ol'
((⍴html)⊃html)←(¯1↓((⍴html)⊃html)),sa,'>'
:EndIf
:Else
item←dlb dtb item
:EndIf
i←i+drop-1
item←ns CheckOddNumberOfDoubleQuotes item'list item'
:If '\'=¯1↑item
item,←'<br>'
:EndIf
buff←⊃¯1↑html
:If ~(⊂{' '~⍨{⍵↑⍨⌊/⍵⍳' >'}{⌽⍵↑⍨⍵⍳'<'}⌽⍵}buff)∊'</ul>' '</ol>' '</li>' '<ul' '<ol' '<ul>' '<ol>'
(¯1↑html)←⊂buff,'</li>'
:EndIf
buff3←⊃ns ProcessInlineMarkUp{dlb ⍵↓⍨⍵⍳' '},item
html,←⊂'<li>',(dlb buff3),'</li>'
lastWasEmpty←0
:Else
noOfBlanks←+/∧\' '=⊃bl
:If (¯1↑indendations){0=⍵:0 ⋄ ⍵≠⍺}noOfBlanks          ⍝ The level has changed
:If noOfBlanks∊indendations                       ⍝ Did the user get the indentation right?
levelChange←¯1+(⌽indendations)⍳noOfBlanks
:Else                                             ⍝ No he did not.
levelChange←0⌈¯1++/indendations<noOfBlanks    ⍝ Let's get as close as possible
:EndIf
:If 0≠levelChange
:If '>'=¯1↑buff←⊃¯1↑html
:AndIf ~(⊂{⌽⍵↑⍨⍵⍳'<'}⌽buff)∊'</ul>' '</ol>' '<ul>' '<ol>'
⍝                                  (¯1↑html)←⊂buff,'</li>'
:EndIf
html,←({'</',⍵,'l>'}¨(-levelChange)↑type),¨⊂'</li>'
(type levels indendations lastType)←(-levelChange)↓¨type levels indendations lastType
:EndIf
:EndIf
:If lastWasEmpty
buff←⊃bl
:If ~0∊⍴cb←(¯1↑indendations)GetCodeBlockFrom bl
sa←GetSpecialAttributes⊃cb
infoString←(¯1↑indendations)GetInfoString⊃cb
:If (+/∧\' '=⊃cb)≥⊃noOfBlanks                  ⍝ Max number of spaces is the indentation
cb←MassageCodeBlock cb noOfBlanks
cb←¯1↓1↓cb
:If 0<+/⊃¨⍴¨cb~¨' '
buff2←⊃¯1↑html
:If '</li>'{⍺≡(-⍴⍺)↑⍵}buff2
buff2←(-⍴'</li>')↓buff2
(¯1↑html)←⊂buff2
:EndIf
html,←MarkUpAsCode(2 EscapeSpecialChars¨cb)sa infoString
(¯1↑html)←⊂(⊃¯1↑html),'</li>'
:EndIf
drop←2+⍴cb
i+←1+⍴cb
:EndIf
:ElseIf '|'=⊃dlb buff                             ⍝ Is it a table?
:AndIf (+/∧\' '=buff)≥⊃noOfBlanks                 ⍝ Max number of spaces is the indentation
drop←+/∧\'|'=,1↑[2]dlb↑bl
buff←drop↑bl
parms←CreateParms
parms←ns.parms CopyTo parms
parms.lineNumberOffset←⊃ns.lineNumbers
ns2←Init parms(dlb buff)
ns2←Process ns2
report,←ns2.report
((⍴html)⊃html)←(-⍴'</li>')↓(⍴html)⊃html
html,←ns2.html
((⍴html)⊃html),←'</li>'
:ElseIf '> '≡2⍴dlb buff                           ⍝ Is it a blockquote?
ns3←⎕NS''
ns3.(markdown markdownLC leadingChars emptyLines withoutBlanks lineNumbers)←(ns.noOf-⍴bl)↓¨ns.noOf↑¨ns.(markdown markdownLC leadingChars emptyLines withoutBlanks lineNumbers)
drop←ScanForBlockQuotes ns3
parms←CreateParms
parms.bookmarkLink←0
parms.markdownStrict←ns.parms.markdownStrict
parms.verbose←0
parms.checkLinks←0
parms.checkFootnotes←0
parms.subTocs←0
parms.syntaxSugar←ns.parms.syntaxSugar
parms.lineNumberOffset←⊃ns.lineNumbers
md←noOfBlanks↓¨drop↑ns3.markdown
ns2←Init parms md
ns2←Process ns2
((⍴html)⊃html)←(-⍴'</li>')↓(⍴html)⊃html
html,←ns2.html
((⍴html)⊃html),←'</li>'
report,←ns2.report
:Else
(drop para)←CollectItemPara bl
i←i+drop-1
:If '!['{⍺≡(⍴⍺)↑⍵}dlb buff
:AndIf '![CDATA['{⍺≢(⍴⍺)↑⍵}dlb buff
:AndIf 1
⍝ Regular expression needed that catches the image.
⍝ If nothing is left then any special attributes belong to the image rather than the paragraph.
⍝ OR: The definition of images is wrong and special attributes MUST be specified inside the ()!!!!
⍝ (That's much more likely!)
sa←'' ⍝ then any special attributes
:Else
sa←GetSpecialAttributes para
:EndIf
para←dtb sa DropSpecialAttributes para
buff←⊃¯1↑html
:If '</li>'≡({{⌽⍵↑⍨⍵⍳'<'}⌽⍵}buff)
buff←(-⍴'</li>')↓buff
(¯1↑html)←⊂buff
:EndIf
buff3←⊃ns ProcessInlineMarkUp para
html,←⊂'<p',sa,'>',(dlb buff3),'</p></li>'
:EndIf
:Else
html,←⊂'<p>',(⊃bl),'</p>'
:EndIf
lastWasEmpty←0
:EndIf
:EndIf
bl←drop↓bl
:Until 0∊⍴bl
html,←({'</',(¯1↑⍵),'l>'}¨⌽type),¨((¯1+⍴type)⍴⊂'</li>'),⊂''
html←InjectBR¨html
ns.html,←html
ns←Drop ns
r←1
:EndIf
∇
GetLengthOfLeadingWhitespacePlusListMarker←{
⍝ 9 ← ∇ '  123)   List item'
⍝ 0 ← ∇ 'List item'
⊃'^\s*?\b\d{1,9}\b[.)]\s+' '^\s*?[-*+]{1}\s+'⎕S 1⊢⍵
}
ProcessHorizontalRulers←{
ns←⍵
3<+/∧\' '=⊃ns.markdown:0              ⍝ Zero to a maximum of three leading white space characters are allowed.
sa←GetSpecialAttributes⊃ns.markdown
0=+/∧/¨(⊂sa DropSpecialAttributes' '~⍨⊃ns.leadingChars)='*-_':0
line←dlb⊃ns.markdown
line←sa DropSpecialAttributes line
3>line+.=⊃line:0
~0∊⍴line~' ',⊃line:0
ns.html,←⊂'<hr',sa,'>'
ns←Drop ns
1
}
∇ r←ProcessTable ns;b;max
r←0
:If IsTableRow⊃ns.markdown
max←+/∧\∨/'|'=↑ns.withoutBlanks
ns.noOf←+/∧\IsTableRow¨max↑ns.markdown
:If 1<ns.noOf
:AndIf ∨/{∧/'-'='|: '~⍨⍵}¨2↑ns.markdown
r←ProcessTable_ ns
:Else
r←ProcessTableWithoutColTitles ns
:EndIf
:EndIf
∇
∇ r←ProcessTable_ ns;specialAttrs;ind;align;drop;cells;rows;b;head;noOfCols;footer
:Trap (~ns.parms.debug)/0
specialAttrs←GetSpecialAttributes⊃ns.markdown
ns.html,←⊂{0∊⍴⍵:'<table>' ⋄ '<table',⍵,'>'}specialAttrs
:If {∧/'-'='|: '~⍨⍵}2⊃ns.markdown
ns.html,←⊂'<thead>'
ns.html,←⊂'<tr>'
ind←{~':'∊⍵:1 ⋄ '::'≡2⍴¯1⌽⍵:3 ⋄ ':'=1⍴⍵:2 ⋄ 4}¨' '~¨⍨SplitTableRowButMaskCode 2⊃ns.markdown
align←↑¨ind⌷¨⊂'?' 'left' 'center' 'right'
head←SplitTableRowButMaskCode specialAttrs DropSpecialAttributes 1⊃ns.markdown
head←ns{⍺ CheckOddNumberOfDoubleQuotes ⍵'header'}¨head
head←⊃¨ns ProcessInlineMarkUp¨head
:If ns.parms.syntaxSugar
head←ns.parms.lang∘SmartQuotes¨head
:EndIf
drop←2
:Else
ind←{~':'∊⍵:1 ⋄ '::'≡2⍴¯1⌽⍵:3 ⋄ ':'=1⍴⍵:2 ⋄ 4}¨' '~¨⍨SplitTableRowButMaskCode 1⊃ns.markdown
align←↑¨ind⌷¨⊂'?' 'left' 'center' 'right'
drop←1
:EndIf
:If ~0∊⍴cells←drop↓ns.noOf↑ns.markdown
cells←SplitTableRowButMaskCode¨cells
cells←{dlb∘dtb ⍵}¨¨cells
cells←ns{⍺ CheckOddNumberOfDoubleQuotes ⍵'header'}¨¨cells
cells←⊃¨¨ns ProcessInlineMarkUp¨¨cells
:If ∨/b←∨/¨'?'=align
noOfCols←⌈/(⍴align),⊃∘⍴¨cells
b←noOfCols↑b
:If (⍴align)>noOfCols
cells←cells,¨((⍴align)-noOfCols)⍴(⊃⌈/⍴¨cells)⍴⊂,' '
:ElseIf (⍴align)<noOfCols
align←noOfCols↑align,noOfCols⍴⊂'left'
:EndIf
:If noOfCols∨.≠⊃∘⍴¨cells
cells←noOfCols↑¨cells,¨noOfCols⍴¨⊂,' '
:EndIf
(b/align)←('left' 'right')[{{0∊⍴⍵~' ':1 ⋄ 1+⊃∧\⊃⎕VFI ⍵}⊃,/' ',¨⍵}¨↓⍉↑b∘/¨cells]
:EndIf
:Else
:If ∨/b←∨/¨'?'=align
(b/align)←⊂'left'
:EndIf
:EndIf
:If 2=drop
ns.html,←('th'∘{⍺,⍵}¨1 AddAlignStyle¨align)Tag¨(⍴align)↑head,(⍴align)⍴⊂''
ns.html,←⊂'</tr>'
ns.html,←⊂'</thead>'
:EndIf
(footer cells)←ns.parms.markdownStrict GetFooter cells
ns.html,←⊂'<tbody>'
rows←{('td'∘{⍺,⍵}¨2 AddAlignStyle¨align)Tag¨⍵}¨(⍴align)↑¨cells
ns.html,←⊃,/{(⊂'<tr>'),⍵,⊂'</tr>'}¨rows
ns.html,←⊂'</tbody>'
:If ~0∊⍴footer
ns.html,←⊂'<tfoot>'
ns.html,←⊃,/{(⊂'<tr>'),⍵,⊂'</tr>'}¨{('td'∘{⍺,⍵}¨2 AddAlignStyle¨align)Tag¨⍵}¨(⍴align)↑¨footer
ns.html,←⊂'</tfoot>'
:EndIf
ns.html,←⊂'</table>'
ns←Drop ns
r←1
:Else
r←1
ns←Drop ns
:EndTrap
∇
GetFooter←{
strict←⍺
strict:''⍵ ⍝ No footers
cells←⍵
0=+/bool←{'='∧.=⊃,/⍵}¨cells:''cells
ind←¯1+bool⍳1
((1+ind)↓cells)(ind↑cells)
}
∇ r←ProcessTableWithoutColTitles ns;specialAttrs;cells;align;footer;rows
r←1
specialAttrs←GetSpecialAttributes⊃ns.markdown
ns.html,←⊂{0∊⍴⍵:'<table>' ⋄ '<table',⍵,'>'}specialAttrs
cells←SplitTableRowButMaskCode¨{(⊂specialAttrs DropSpecialAttributes⊃⍵),1↓⍵}ns.noOf↑ns.markdown
cells←{dlb∘dtb ⍵}¨¨cells
cells←ns{⍺ CheckOddNumberOfDoubleQuotes ⍵'header'}¨¨cells
cells←⊃¨¨ns ProcessInlineMarkUp¨¨cells
align←('left' 'right')[1+{∧/⊃⎕VFI∊' ',¨⍵}¨↓⍉↑cells]
(footer cells)←ns.parms.markdownStrict GetFooter cells
:If ~0∊⍴footer
ns.html,←⊂'<tfoot>'
ns.html,←⊃,/{(⊂'<tr>'),⍵,⊂'</tr>'}¨{('td'∘{⍺,⍵}¨2 AddAlignStyle¨align)Tag¨⍵}¨(⍴align)↑¨footer
ns.html,←⊂'</tfoot>'
:EndIf
ns.html,←⊂'<tbody>'
rows←{('td'∘{⍺,⍵}¨AddAlignStyle¨align)Tag¨⍵}¨(⊃⌈/⍴¨cells)↑¨cells
ns.html,←⊃,/{(⊂'<tr>'),⍵,⊂'</tr>'}¨rows
ns.html,←⊂'</tbody>'
ns.html,←⊂'</table>'
ns←Drop ns
∇
ProcessHeaders←{
ns←⍵
'#'=1⍴⊃ns.leadingChars:ProcessATX_Header ns
~0∊⍴' {0,3}\[#{1,6} [~_*a-zA-Z0-9].*] *\(.+\)'⎕S 0⍠('Greedy' 0)⊣1⍴ns.markdown:ProcessATX_HeaderLink ns
ProcessSetextHeader ns
}
∇ flag←ProcessATX_Header ns;l;txt;sa;c;c2;bookmarkName;anchor
flag←0
l←+/∧\'#'=1⊃ns.leadingChars                   ⍝ Level
'Invalid header level'⎕SIGNAL 11/⍨~l∊⍳6
txt←1⊃ns.markdown
:If 4>+/∧\' '=txt                             ⍝ A maximum of three spaces is allowed
:AndIf ' '=⊃txt~'#'                           ⍝ The first char after the # must be a blank
sa←GetSpecialAttributes⊃ns.markdown
txt←sa DropSpecialAttributes txt
c←{⍵↓⍨-+/∧\(⌽⍵)∊'# '}{⍵↓⍨+/∧\⍵∊'# '}txt   ⍝ Caption. Delete leading and trailing blanks in the process
c←ns CheckOddNumberOfDoubleQuotes c'header'
c2←⊃ns ProcessInlineMarkUp c
bookmarkName←ns GetBookMarkNameFromCaption txt((l≤ns.parms.bookmarkLink)/sa)
anchor←AddBookmarkLink l ns bookmarkName
ns.html,←ns.parms.div_h_tag/⊂'<div class="h_tag">'
ns.html,←{⊂⍣(~0∊⍴⍵)⊣⍵}anchor
ns.html,←⊂'<h',(⍕l),(RemoveIdFromSpecialAttributes⍣(~0∊⍴anchor)⊣sa),'>',c2,'</h',(⍕l),'>'
ns.html,←((,0)≢,ns.parms.bookmarkLink)/⊂'</a>'
ns.html,←ns.parms.div_h_tag/⊂'</div>'
ns.headers⍪←l bookmarkName c2
ns.headerLineNos,←⊃ns.lineNumbers
ns.noOf←1
ns←Drop ns
flag←1
:EndIf
∇
∇ flag←ProcessATX_HeaderLink ns;row;sa;header
⍝ This should only happen when an HTML document that was created by MarkAPL is converted back into Markdown.
⍝ We try to limit the damage here but we don't create a link, and such headers are going into a TOC.
flag←0
row←⊃ns.markdown
sa←GetSpecialAttributes ¯1↓dtb row
:If ∨/' class="autoheader_anchor" '⍷' ',sa,' '
header←{⍵↑⍨¯1+⍵⍳']'}↑{⍵↓⍨⍵⍳'['}row
sa←'class="autoheader_anchor"'⎕R''⊣sa
sa←dmb'id=".*"'⎕R''⊣sa
header←dlb dtb header,sa
(1⊃ns.markdown)←header
(1⊃ns.markdownLC)←Lowercase header
(1⊃ns.leadingChars)←(16⌊⍴header)↑header
(1⊃ns.withoutBlanks)←' '~⍨1⊃ns.withoutBlanks
flag←ProcessATX_Header ns
:EndIf
∇
∇ flag←ProcessSetextHeader ns;noOf;ind;sa;l;c;c2;anchor;bookmarkName
flag←0
noOf←ScanForPara ns                           ⍝ Because only what qualifies as paragraph can be an ATX header
:If noOf≠0
:AndIf noOf<⍴ns.markdown
ind←noOf+Where∊'-='IotaSetextHeader¨⊂(1+noOf)⌷¨ns.(withoutBlanks markdown emptyLines)
:AndIf ~0∊⍴ind                             ⍝ It's not a Setext header
ind←⊃ind
sa←GetSpecialAttributes(ind-1)⊃ns.markdown
l←1+'-'=⊃ind⊃ns.leadingChars
c←CompilePara noOf↑ns.markdown
c←sa DropSpecialAttributes c
ns.noOf←1+noOf
c2←⊃ns ProcessInlineMarkUp c
c←ns CheckOddNumberOfDoubleQuotes c'header'
bookmarkName←ns GetBookMarkNameFromCaption c2((l≤ns.parms.bookmarkLink)/sa)
anchor←AddBookmarkLink l ns bookmarkName
ns.html,←ns.parms.div_h_tag/⊂'<div class="h_tag">'
ns.html,←{⊂⍣(~0∊⍴⍵)⊣⍵}anchor
ns.html,←⊂'<h',(⍕l),(RemoveIdFromSpecialAttributes⍣(~0∊⍴anchor)⊣sa),'>',c2,'</h',(⍕l),'>'
ns.html,←((,0)≢,ns.parms.bookmarkLink)/⊂'</a>'
ns.html,←ns.parms.div_h_tag/⊂'</div>'
ns.headers⍪←l bookmarkName c2
ns.headerLineNos,←⊃ns.lineNumbers
ns←Drop ns
flag←1
:EndIf
∇
∇ r←RemoveLampLines ns
r←0
:If '⍝'=⊃⊃ns.markdown
ns←Drop ns
r←1
:EndIf
∇
∇ r←ProcessCodeBlock ns;bl;buff;sa;pattern;min;line;infoString;fence
⍝ Handles code block, either "~~~" (Markdown2 Extra) or "```" (Git).
r←0
line←⊃ns.markdown
:If IsFenceStart line
line←dlb line
min←{(⊃⍵)+.=⍵}line
fence←⊃line
pattern←('^\s{0,3}'),fence,'{',(⍕,min),',}'
:AndIf ¯1≢ns.noOf←pattern FindFenceEnd 1↓ns.markdown
:If 2<ns.noOf
bl←1↓¯1↓ns.noOf↑ns.markdown
sa←GetSpecialAttributes line
line←sa DropSpecialAttributes line
infoString←GetInfoString line
:If 0<+/⊃∘⍴¨bl~¨' '
bl←((+/∧\' '=⊃ns.markdown)⌊⌊/+/∧\' '=↑bl)↓¨bl   ⍝ Drop as many blanks as there are indendet blanks
buff←MarkUpAsCode(2 EscapeSpecialChars¨bl)sa infoString
:If ns.parms.leanpubExtensions
buff←ProcessLeanPubCodeEmphasizing buff
:EndIf
ns.html,←buff
:EndIf
ns.noOf←2+⍴bl
:ElseIf 2≠ns.noOf
:OrIf ~0∊⍴(⊃ns.markdown)~'~` '
ns.noOf←0
:Return
:EndIf
r←1
ns←Drop ns
:EndIf
∇
Drop←{
ns←⍵
ns.(markdown markdownLC leadingChars emptyLines withoutBlanks lineNumbers)←ns.noOf↓¨ns.(markdown markdownLC leadingChars emptyLines withoutBlanks lineNumbers)
ns.noOf←1
ns
}
∇ (html isHtmlBlock)←ns ProcessFunctionCalls html;mask;ind;noOf;call;result;flag;isEmpty
mask←~GetMaskForCodeTags html
isHtmlBlock←0
:If ~0∊⍴ind←'[^⍎]⍎⍎[^⍎]'⎕S 0⊣' ',(mask/html),' '  ⍝ Two blanks for the ≠ to fit start and end. The first one also fixes ⎕io
:AndIf ~0∊⍴ind←(2×⌊0.5×⍴ind)↑ind
:Repeat
html←(⊃ind)⌽html
noOf←-/ind[2 1]
call←dlb dtb 1↓(noOf-1)↑1↓html
html←(2+noOf)↓html
:If ~0∊⍴result←ns ExecExternalFns call
isEmpty←0=⊃∘⍴¨result~¨' '
result←(0⌈¯1++/∧\isEmpty)↓(-0⌈¯1++/∧\⌽isEmpty)↓result ⍝ Allow max 1 leading/trailing blank line
flag←⊃ns.parms.syntaxSugar
isHtmlBlock←CheckForHtmlBlock result(0=⊃∘⍴¨' '~¨⍨result)ns.topOfDocument
:If 1=≡result
:If flag∧~isHtmlBlock
result←⊃ns ProcessInlineMarkUp result
:EndIf
:Else
'Embeded function returned invalid result'⎕SIGNAL 11/⍨(,1)≢∪≡¨,¨result
:If flag∧~isHtmlBlock
result←Nest result
result←,⊃¨ns ProcessInlineMarkUp¨dmb result
:EndIf
:EndIf
'Called function returned an HTML block but does not stand on its own'⎕SIGNAL 11/⍨isHtmlBlock∧0≠⍴html
:If 0∊⍴html
html←(-ind[1])⌽result,html
:Else
html←(-ind[1])⌽(⊃⍣(1<≡html)⊣result),html
:EndIf
:EndIf
:Until 0∊⍴ind←2↓ind
:EndIf
∇
∇ {r}←∆LastLineWasEmpty ProcessParagraph ns;sa;para;tag;isHtmlBlock
r←⍬
ns.noOf←ScanForPara ns
ns.noOf←1⌈ns.noOf
para←CompilePara ns.noOf↑ns.markdown
para←ns CheckOddNumberOfDoubleQuotes para'paragraph'
sa←GetSpecialAttributes para
para←sa DropSpecialAttributes⍣(0<⊃⍴sa)⊣para
(para isHtmlBlock)←ns ProcessInlineMarkUp para
:If ~0∊⍴para
ns.html,←Nest sa{2=≡⍵:⍺∘∇¨⍵ ⋄ '<p',({0∊⍴⍵:'>' ⋄ ⍵,'>'}⍺),⍵,'</p>'}para
:EndIf
ns←Drop ns
∇
∇ r←ScanForBlockQuotes ns;ns2;lc;b;max
r←0
ns2←⎕NS''
lc←↑2↑¨ns.leadingChars        ⍝ Leading two chars
max←¯1+ns.emptyLines⍳1        ⍝ An empty line marks the end
ns2.(markdown markdownLC leadingChars emptyLines withoutBlanks lineNumbers)←max↑¨ns.(markdown markdownLC leadingChars emptyLines withoutBlanks lineNumbers)
lc←max↑lc                     ⍝ Leading chars
:While 0<ns2.noOf←1 ScanForPara ns2
lc←ns2.noOf↓lc            ⍝ Leading chars
:If 0∊⍴lc                 ⍝ No blockquotes...
:OrIf '> '≢lc[1;]         ⍝ any more?
r+←ns2.noOf
:Leave                ⍝ No - we are done
:EndIf
ns2.noOf+←+/∧\lc∧.='> '   ⍝ Add them
r+←ns2.noOf
ns2←Drop ns2
:EndWhile
∇
∇ noOf←{dontCheckForBlockQuote}ScanForPara ns;buff;bool
⍝ `noOf` : Number of lines, if any), the next paragraph will comprise.
dontCheckForBlockQuote←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'dontCheckForBlockQuote'
:If 1≠noOf←+/∧\0=ns.emptyLines                                                          ⍝ How many lines until next empty line?
:AndIf 1≠noOf←noOf⌊¯1+⊃'='IotaSetextHeader noOf↑¨ns.(withoutBlanks markdown emptyLines) ⍝ Header (= syntax)
:AndIf 1≠noOf←noOf⌊¯1+⊃'-'IotaSetextHeader noOf↑¨ns.(withoutBlanks markdown emptyLines) ⍝ Header (- syntax)
:AndIf 1≠noOf←+/∧\~(noOf↑⊃¨ns.leadingChars)∊'|#='                                       ⍝ header, tables?
:AndIf 1≠noOf←+/∧\~(noOf↑⊃¨ns.leadingChars)∊'|#='                                       ⍝ HTML header, tables?
:AndIf 1≠noOf←+/∧\~{⊃⍴'^\s{0,3}[-+\*]\s'⎕S 0⊣⍵}¨noOf↑ns.markdown                        ⍝ bulleted list
:AndIf 1≠noOf←+/∧\~{⊃⍴'^\s{0,3}[0-9]{1,9}[.)]'⎕S 0⊣⍵}¨noOf↑ns.markdown                  ⍝ Ordered lists?
:AndIf 1≠noOf←+/∧\~{∨/({⍵⍴⍨3⌊⍴⍵}⍵~' ')∘≡¨'***' '---' '___'}¨noOf↑ns.markdown            ⍝ Horizontal rulers?
:AndIf 1≠noOf←+/∧\~'```'∘{⍺≡(⍴⍺)↑⍵}¨noOf↑ns.markdown                                    ⍝ Code block (``` syntax)
:AndIf 1≠noOf←+/∧\~'~~~'∘{⍺≡(⍴⍺)↑⍵}¨noOf↑ns.markdown                                    ⍝ Code block (~~~ syntax)
:AndIf 1≠noOf←+/∧\'<<subtoc>>'∘≢¨Lowercase noOf↑ns.markdown                             ⍝ Sub TOCs
:AndIf 1≠noOf←+/∧\{0∊⍴'<pre\b[^>]*>' '<style\b[^>]*>' '<script\b[^>]*>'⎕S 0⊣⍵}¨noOf↑ns.leadingChars               ⍝
:AndIf ~dontCheckForBlockQuote
noOf←+/∧\~(noOf↑⊃¨ns.leadingChars)∊'|>#='                                           ⍝ Blockquote (>) MUST be the last check!
:EndIf
∇
∇ anchor←AddBookmarkLink(level ns bookmarkName)
⍝ Add ID and HREF if that is okay with ns.parms.bookmarkLink
anchor←''
:If 0<ns.parms.bookmarkLink
:AndIf ns.parms.bookmarkLink≥level
anchor,←' href="#',bookmarkName,'" id="',bookmarkName,'"'
⍝ Make sure the class is assigned after ID/Href, otherwise you'll break `CheckInternalLinks`
anchor,←' class="autoheader_anchor"'
anchor←'<a',anchor,'>'
:EndIf
∇
MarkUpAsCode←{
(code specialAttrs infoString)←⍵
code←Nest code
st←'<pre',((~0∊⍴infoString)/' class="',infoString,'"'),'><code',({0∊⍴⍵:⍵ ⋄ ' ',⍵}dmb specialAttrs),'>'    ⍝ Start tag
(1⊃code)←st,1⊃code
((⍴code)⊃code),←'</code></pre>'
code
}
∇ tx←MarkUpInlineCode tx_;b;s;e;tx2;tx1;tx;ind;even;ind2
:If 0<+/b←'`'=tx←tx_                  ⍝ We are done if there are no back-ticks
ind←Where b                       ⍝ All indices
:If ∨/b←∧\'\'=(' ',tx)[ind]
ind2←b/ind
ind←(~b)/ind
:Else
ind2←⍬
:EndIf
:AndIf 0<⍴ind
s←⊃ind                            ⍝ First one
even←(0 1⍴⍨⍴ind)/ind              ⍝ Only these can be closing ones,
:If 0=e←⊃('`'≠(tx,' ')[even+1])/even   ⍝ Only odd ` with no ` to their right can be a closing back-tick
e←1+⍴tx
:EndIf
tx1←(s-1)⍴tx
tx2←(e-s-1)↑(⍴tx1)↓tx
:If ~0∊⍴ind2
tx1←tx1[(⍳⍴tx1)~ind2-1]
:EndIf
tx←e↓tx
tx2←'<code>',(1↓¯1↓tx2),'</code>'
tx2←(~'``'⍷tx2)/tx2
tx←MarkUpInlineCode tx
tx←tx1,tx2,tx
:EndIf
∇
Tag←{
⍺←'p'
'<',⍺,'>',⍵,'</',({⍵↑⍨¯1+⍵⍳' '},⍺),'>'
}
EscapeSpecialChars←{
⍝ ⍵ is typically a line of a Markdown document.
⍝ Code is **not** masked here: we need to exchange "<>&" even in code.
⍝ See `EscapeSpecialCharsOutsideCode` if you don't want this to happen.
⍝ However, don't touch anything between "" inside <> (attribute definitions).
⍝ ⍺ may be 1 or 2 and defaults to 1; that means that "<<" remains untouched.
⍝ If ⍺ is 2 (typically ⍵ is code then) "<<" is converted, and so is <.
⍺←1
0∊⍴⍵:⍵
⍺=1:'(?<!\<)<\<(?!<)' '(?<!\>)>\>(?!>)' '<' '>' '(?<!\\)&'⎕R'&' '&' '\&lt;' '\&gt;' '\&amp;'⊣⍵
⍺=2:'<'⎕R'\&lt;'⊣'>'⎕R'\&gt;'⊣'\&'⎕R'&amp;'⊣⍵
. ⍝ Huuh?! Invalid left argument
}
EscapeSpecialCharsOutsideCode←{
⍝ ⍵ is typically a line of a Markdown document.
⍝ Code is masked here. If you don't want this see `EscapeSpecialChars`
0∊⍴⍵:⍵
((⊂'`.*?`'),,¨'<>&')⎕R'\0' '\&lt;' '\&gt;' '&amp;'⊢⍵
}
BringBackSpecialHtmlEntities←{
⍝ Bring back the three special HTML entities: &lt; and &gt; and &amp;
⍝ Needed in cases processed stuff must be processed again (TOC for example)
0∊⍴⍵:⍵
'&amp;'⎕R'\&'⊣'&gt;'⎕R'>'⊣'&lt;'⎕R'<'⊣⍵
}
∇ r←ProcessSubTOC ns;header;level
r←0
:If '<<subtoc>>'{⍺≡(⍴⍺)↑⍵}⊃ns.markdownLC
:If ns.parms.subTocs
(level header)←{'<h'{⍺≡(⍴⍺)↑⍵}⊃⍵:{({⍎⍵↑⍨¯1+⍵⍳'>'}2↓⍵)({⍵↑⍨¯1+⍵⍳'<'}⍵↓⍨⍵⍳'>')}⊃⍵ ⋄ ∇ 1↓⍵}⌽ns.html
ns.subToc,←⊂level header
ns.html,←Lowercase 1↑ns.markdown
:EndIf
ns←Drop ns
r←1
:EndIf
∇
∇ ns←InjectSubTOCs ns;where;i;header;level;ind;from;noOf;levels;toc;drop;md;ns2;subToc;parms
:If (,0)≢,ns.parms.toc
:AndIf ~0∊⍴ns.subToc
where←Where∨/¨'<<subtoc>>'∘⍷¨Lowercase ns.html
:For i :In ⍳⍴ns.subToc
(level header)←i⊃ns.subToc
ind←i⊃where
from←1⍳⍨(ns.headers[;1]=level)∧(ns.headers[;3]≡¨⊂header)
noOf←+/∧\level<from↓ns.headers[;1]
levels←noOf↑from↓ns.headers[;1]
toc←↑3↑¨noOf↑from↓ns.toc
:If (⊃⍴toc)∊0 1
ns.html[i⊃where]←⊂''
ns.report,←⊂'No SubTOC injected for "',header,'": no items found'
:Leave
:Else
:If (,0)≢,ns.parms.numberHeaders
toc,←toc{⍵[;4]⌿⍨⍵[;2]∊⍺[;3]}ns.headers
:EndIf
drop←⌊/toc[;1]
:If (,0)≢,ns.parms.numberHeaders
md←{(' '⍴⍨(1⊃⍵)-drop),'* [',(4⊃⍵),' ',(2⊃⍵),'](#',(3⊃⍵),')'}¨↓toc
:Else
md←{(' '⍴⍨(1⊃⍵)-drop),'* [',(2⊃⍵),'](#',(3⊃⍵),')'}¨↓toc
:EndIf
parms←CreateParms
parms.markdownStrict←ns.parms.markdownStrict
parms.verbose←0
parms.checkLinks←0
parms.checkFootnotes←0
parms.syntaxSugar←0
ns2←Init parms md
{}ProcessLists ns2
:If (,0)≢,ns.parms.numberHeaders
ns2.html←'href="#\d{0,}-'⎕R'href="#'⍠('Greedy' 0)⊣ns2.html
:EndIf
subToc←'<nav>'('<p>Topics:</p>'),ns2.html,⊂'</nav>'
ns.html[i⊃where]←⊂subToc
:EndIf
:EndFor
ns.html←⊃,/{1=≡⍵:⊂⍵ ⋄ ⍵}¨ns.html
:EndIf
∇
∇ r←ProcessReferenceLinks ns;line;id;url;alt;sa
r←0
:If '['=⊃⊃ns.leadingChars
:AndIf ~0∊⍴'\[[A-Za-z0-9_-]*\]:'⎕S 0⊣⊃ns.markdown      ⍝ Find identifiers
id←{1↓⍵↑⍨¯2+⍵⍳':'}⊃ns.markdown
url←dlb dtb{⍵↓⍨⍵⍳':'}⊃ns.markdown
:AndIf {~'='∊⍵↑⍨⌊/⍵⍳'?{'}url   ⍝ `?` parts URL parameter, `{` parts special attributes. Both may carry `=`!
sa←GetSpecialAttributes url
url←dtb sa DropSpecialAttributes url
:If 2=+/'"'=url
alt←{¯1↓⍵↓⍨⍵⍳'"'}url
url←dtb{⍵↑⍨¯1+⍵⍳'"'}url
:Else
alt←''
:EndIf
ns.linkRefs,←⊂id url alt sa
ns←Drop ns
r←1
:EndIf
∇
∇ ns←ProcessEmbeddedParms ns;mask;buff;bool;noOf;def;i;id;value;b;v
⍝ Here we do not need to add ns.parms.lineNumberOffset because there are no
⍝ embedded parameters with recursive calls anyway!
:If 0<noOf←+/∧\'['=⊃¨ns.leadingChars
buff←noOf↑ns.markdown
noOf←'[parm]:'{+/∧\⍺∘≡¨{(Lowercase 5↑¨⍵),¨5↓¨⍵}(⍴⍺)↑¨⍵}buff
ns.noOf←noOf
buff←noOf↑buff
ns←Drop ns
:For i def :InEach (⍳noOf)buff
:If '='∊def
(id value)←¯1 0↓¨7 0↓¨{i←⍵⍳'=' ⋄ (i↑⍵)(i↓⍵)}def
id~←' '
value←dlb dtb value
:If 0∊⍴value
ns.report,←⊂'Data definition on line ',(⍕i),' is invalid'
:Continue
:EndIf
:If ''''∊value
:If ''''''≡2⍴¯1⌽value
value←¯1↓1↓value
:Else
value←''
ns.report,←⊂'Data value definition for line ',(⍕⊃i),' is invalid'
:EndIf
:Else
(b v)←⎕VFI value
:If ∧/b
value←{1=⍴⍵:⍬⍴⍵ ⋄ ⍵}v
:EndIf
:EndIf
ns.embeddedParms⍪←id value
⍎'ns.parms.',id,'←value'
:Else
ns.report,←⊂'Data definition on line ',(⍕i),' is invalid'
:EndIf
:EndFor
:If ∨/b←~ns.embeddedParms[;1]∊CreateHelpParms.∆List[;1]
ns.report,←⊂'Invalid embbed parameter',((1<+/b)/'s'),': ',⊃{⍺,',',⍵}/'"',¨'"',⍨¨b/ns.embeddedParms[;1]
:EndIf
:EndIf
∇
∇ r←ProcessDataDefs ns;def;value;id;b;v
r←0
:If '['=⊃⊃ns.leadingChars
:If ~0∊⍴Where'[data]:'≡Lowercase 7↑⊃ns.leadingChars      ⍝ Find identifiers
def←⊃ns.markdown
:If '='∊def
(id value)←¯1 0↓¨7 0↓¨{i←⍵⍳'=' ⋄ (i↑⍵)(i↓⍵)}def
value←dlb dtb value
:If ''''∊value
:If ''''''≡2⍴¯1⌽value
value←¯1↓1↓value
:Else
value←''
ns.report,←⊂'Data value definition for line ',(⍕ns.parms.lineNumberOffset+⊃ns.lineNumbers),' is invalid'
:EndIf
:Else
(b v)←⎕VFI value
:If ∧/b
value←{1=⍴⍵:⍬⍴⍵ ⋄ ⍵}v
:EndIf
:EndIf
ns.data,←⊂id value
:Else
ns.report,←⊂'Data definition on line ',(⍕ns.parms.lineNumberOffset+⊃ns.lineNumbers),' is invalid'
:EndIf
ns←Drop ns
r←1
:EndIf
:EndIf
∇
∇ r←ProcessAbbreviationDefs ns;def;abbr;comment
r←0
:If '*['≡2⍴⊃ns.leadingChars
r←1
:If ~0∊⍴'\*\[[\p{L} \/\+-_=&]*\]:'⎕S 0⊣⊃ns.markdown      ⍝ Find identifiers
(abbr comment)←¯1 0↓¨':'Split 2↓⊃ns.markdown
(abbr comment)←dlb∘dtb¨abbr comment
ns.abbreviations⍪←abbr comment
:Else
ns.report,←⊂'Invalid abbreviation in line ',⍕ns.parms.lineNumberOffset+⊃ns.lineNumbers
:EndIf
ns←Drop ns
:EndIf
∇
∇ r←ProcessFootnoteDefs ns;b1;noOf;b2;def;id
r←0
:If ~0∊⍴'^\[\^[A-Za-z0-9_⍙∆]*\]:'⎕S 0⊣⊃ns.markdown       ⍝ Find identifiers
noOf←ScanForPara ns
noOf←1⍳⍨'[^'∘≡¨2↑¨(noOf-1)↑1↓ns.markdown
b1←'  '∘≡¨2↑¨noOf↓ns.markdown
b2←noOf↓ns.emptyLines
ns.noOf←noOf+(+/∧\b1)⌊1⍳⍨1 1⍷b2
def←dlb{(⊂{'  ',dlb ⍵↓⍨⍵⍳':'}⊃⍵),1↓⍵}ns.noOf↑ns.markdown
:AndIf ':'=1↑{⍵↓⍨⍵⍳']'}⊃ns.markdown
id←{⍵↑⍨¯1+⍵⍳']'}2↓⊃ns.markdown
:AndIf ∧/~AllWhiteSpaceChars∊id
:AndIf ~0∊⍴def←(-+/∧\0=⌽⊃¨⍴¨def)↓def
:AndIf ~0∊⍴def←{1↓¨(' '=⊃¨⍵)⊂⍵}' ',def
:AndIf ~0∊⍴def←CompilePara¨def
:AndIf ~0∊⍴def←⊃¨ns ProcessInlineMarkUp¨def
ns.footnoteDefs⍪←id def
ns←Drop ns
r←1
:EndIf
∇
∇ r←ProcessEmeddedHTML ns;tags;b;flag
r←1
:If CheckForHtmlBlock ns.(markdown emptyLines topOfDocument)
⍝ For details see regarding HTML block see http://spec.commonmark.org/0.24/#html-blocks
⍝ There's more to it then meets the eye at first glance.
:If r←ProcessHtmlBlockType_1 ns
:AndIf r←ProcessHtmlBlockType_2 ns
:AndIf r←ProcessHtmlBlockType_3 ns
:AndIf r←ProcessHtmlBlockType_5 ns   ⍝ 5 must be executed ...
:AndIf r←ProcessHtmlBlockType_4 ns   ⍝ ... before 4!
:AndIf r←ProcessHtmlBlockType_6 ns
:AndIf r←ProcessHtmlBlockType_7 ns
:AndIf ⊃ns.emptyLines
ns.noOf←1
ns←Drop ns
:EndIf
:EndIf
∇
∇ r←ProcessHtmlBlockType_1 ns;start
⍝ <script>, <style> or <pre>.
⍝ These are special because the first two can never be nested while the last one
⍝ preserves white space by definition.
⍝ ← is 0 when found and processed, otherwise 0.
r←0
:If '^<script\b[^>]*>'DetectOpeningTag(⊃ns.emptyLines)↓ns.markdown
ns←Drop⍣(⊃ns.emptyLines)⊣ns
ns.noOf←DetectClosingTag ns.markdownLC'</script>'
ns.html,←'</script>'DropTailAfterClosingTag ns.noOf↑ns.markdown
ns←Drop ns
:ElseIf '^<pre\b[^>]*>'DetectOpeningTag(⊃ns.emptyLines)↓ns.markdown
ns←Drop⍣(⊃ns.emptyLines)⊣ns
ns.noOf←DetectClosingTag ns.markdownLC'</pre>'
ns.html,←Process_PRE ns.noOf↑ns.markdown
ns←Drop ns
:ElseIf '^<style>'DetectOpeningTag(⊃ns.emptyLines)↓ns.markdown
ns←Drop⍣(⊃ns.emptyLines)⊣ns
ns.noOf←DetectClosingTag ns.markdownLC'</style>'
ns.html,←'</style>'DropTailAfterClosingTag ns.noOf↑ns.markdown
ns←Drop ns
:Else
r←1
:EndIf
∇
∇ r←ProcessHtmlBlockType_2 ns;start;e;md
⍝ <!-- and -->
⍝ ← is 0 when found and processed, otherwise 0.
r←1
:If 2<⍴ns.markdown
:AndIf 1∊e←1↓ns.emptyLines
md←(1+(1↓ns.emptyLines)⍳1)↑ns.markdown
:AndIf ∨/'<!--'⍷⊃1↓md
:If ∨/'-->'⍷⊃¯1↑¯1↓md
ns.noOf←¯1+⍴md
ns.html,←'-->'DropTailAfterClosingTag 1↓ns.noOf↑ns.markdown
ns←Drop ns
r←0
:Else
ns.noOf←⊃ns.emptyLines
:EndIf
:EndIf
∇
∇ r←ProcessHtmlBlockType_3 ns;start;b;md
⍝ <? and ?>
⍝ ← is 0 when found and processed, otherwise 0.
r←1
:If 2<⍴ns.markdown
:AndIf ⊃ns.emptyLines
:AndIf '<?'{⍺≡(⍴⍺)↑⍵}2⊃ns.leadingChars
:If 0<+/b←1↓ns.emptyLines
md←(b⍳1)↑ns.markdown
:AndIf 0<ns.noOf←DetectClosingTagBeforeEmptyLine ns.markdown'?>'
ns.html,←'?>'DropTailAfterClosingTag 1↓ns.noOf↑ns.markdown
ns←Drop ns
r←0
:EndIf
:EndIf
∇
∇ r←ProcessHtmlBlockType_4 ns;start
⍝ "<!",⎕A
⍝ ← is 0 when found and processed, otherwise 0.
r←1
:If 2<⍴ns.markdown
:AndIf 0∊⍴⊃ns.markdown
:AndIf '<!'{⍺≡(⍴⍺)↑⍵}2⊃ns.leadingChars
:AndIf 0<ns.noOf←DetectClosingTagBeforeEmptyLine ns.markdown'!>'
ns.html,←'!>'DropTailAfterClosingTag 1↓ns.noOf↑ns.markdown
ns←Drop ns
r←0
:EndIf
∇
∇ r←ProcessHtmlBlockType_5 ns;start
⍝ <![CDATA[ and ]]
⍝ ← is 0 when found and processed, otherwise 0.
r←1
:If 2<⍴ns.markdown
:AndIf 0∊⍴⊃ns.markdown
:AndIf '<![CDATA['{⍺≡(⍴⍺)↑⍵}2⊃ns.leadingChars
:AndIf 0<ns.noOf←DetectClosingTagBeforeEmptyLine ns.markdown']]>'
ns.html,←']]>'DropTailAfterClosingTag 1↓ns.noOf↑ns.markdown
ns←Drop ns
r←0
:EndIf
∇
∇ r←ProcessHtmlBlockType_6 ns;start;t;f1;f2;buff;tag;noOfEmptyLines
⍝ Check for all possible (allowed and block) HTML5 tags.
⍝ This is different from others because it may start with a closing tag.
⍝ ← is 0 when found and processed, otherwise 1.
r←1
:If 1<⍴ns.markdown
:AndIf ns.topOfDocument∨∆LastLineWasEmpty∨⊃ns.emptyLines
noOfEmptyLines←+/∧\ns.emptyLines
:If f1←'</'≡2↑2⊃ns.leadingChars
:OrIf '<'=⊃⊃noOfEmptyLines↓ns.leadingChars
:If 1∊(1+noOfEmptyLines)↓ns.emptyLines ⍝ Without a closing empty line it cannot be an HTML block
buff←dlb(f1+1)↓⊃noOfEmptyLines↓ns.markdownLC
buff←(buff⍳'>')↑buff               ⍝ Drop all behind the closing ">" or a blank
:If '/'∊buff
tag←⊂buff←buff~'<>/'
:Else
tag←⊂,'<'~⍨(¯1+⌊/buff⍳AllWhiteSpaceChars,'/>')↑buff
:EndIf
tag←{⍵↑⍨¯1+⍵⍳' '}¨tag
⍝ Most frequently used tags first:
:If tag∊,¨'div' 'h1' 'h2' 'h3' 'h4' 'h5' 'h6' 'li' 'ol' 'p' 'table' 'tbody' 'td' 'tfoot' 'th' 'thead' 'tr' 'ul'
:OrIf tag∊,¨'address' 'article' 'aside' 'basefont' 'blockquote' 'caption' 'center' 'colgroup' 'col'
:OrIf tag∊,¨'dd' 'details' 'dialog' 'dir' 'dl' 'dt' 'fieldset' 'figcaption' 'figure' 'footer' 'form' 'frame'
:OrIf tag∊,¨'frameset' 'head' 'header' 'hr' 'html' 'iframe' 'legend' 'link' 'main' 'menu' 'menuitem' 'meta' 'nav'
:OrIf tag∊,¨'noframes' 'optgroup' 'option' 'param' 'section' 'source' 'summary' 'title' 'track' 'pre' 'a' 'img'
buff←(⍴↑tag)↓buff
:If 0∊⍴buff
:OrIf '>'=¯1↑buff
:OrIf '/>'≡2⍴buff
:OrIf (1⍴buff)∊AllWhiteSpaceChars
ns.noOf←CalcNumberOfLinesOfHtmlBlock(⊃tag)ns.markdown
∆LastLineWasEmpty←1
ns.html,←ns.noOf↑ns.markdown
ns←Drop ns
r←0
:EndIf
:EndIf
:EndIf
:EndIf
:EndIf
∇
∇ r←ProcessHtmlBlockType_7 ns;start;cl
⍝ Free-style (= user defined) tags.
⍝ ← is 0 when found and processed, otherwise 0.
r←1
:If 1<⍴ns.markdown
:AndIf ns.topOfDocument∨⊃ns.emptyLines
cl←⊃(+/∧\ns.emptyLines)↓ns.markdownLC
:If ~0∊⍴'<[a-z]*\b[^>]*>' '</[a-z][^>]*>'⎕S 0⊣cl     ⍝ Look for any tag
:AndIf 0∊⍴'<script\b[^>]*>' '<style\b[^>]*>' '<pre\b[^>]*>'⎕S 0⊣cl
:AndIf 0∊⍴{⍵↓⍨⍵⍳'>'}(2⊃ns.markdown)~AllWhiteSpaceChars
ns.noOf←(1↓ns.emptyLines)⍳1
:AndIf '>'=¯1↑dtb⊃¯1↑(1-ns.topOfDocument)↓ns.noOf↑ns.markdown
ns.html,←(1-ns.topOfDocument)↓ns.noOf↑ns.markdown
ns←Drop ns
r←0
:EndIf
:EndIf
∇
∇ noOf←CalcNumberOfLinesOfHtmlBlock(tag markdown);open;close
:If 0∊⍴⊃2↓markdown
noOf←3            ⍝ The tag stands on its own (=is followed by an empty line)
:Else
open←1↓+\{⊃⍴('<',tag,'[^>]*>')⎕S 0⍠('Greedy' 0)('Mode' 'L')('IC' 1)⊣⍵}¨markdown
close←{⊃⍴('</',tag,'>')⎕S 0⍠('Greedy' 0)('Mode' 'L')('IC' 1)⊣⍵}¨1↓markdown
noOf←1+{+/∧\0<⍵}open-+\close
noOf+←2                               ⍝ One for the empty line and 1 for ⎕IO (⎕S is ⎕IO←0!)
:EndIf
∇
∇ md←Process_PRE md;first;last
md←,md
:If 1=⍴,md
:If 0=⍴'<code\b[^>]*>'⎕S 0⊣⊃md   ⍝ <code> missing?!
(⊃md)←'(<pre\b[^>]*>)'⎕R'\1<code>'⊣⊃md
:EndIf
:If 0=⍴'</code>'⎕S 0⊣⊃md   ⍝ </code> missing?!
((⍴md)⊃md)←'(</pre>)'⎕R'</code>\1'⊣(⍴md)⊃md
:EndIf
:Else
(first last)←md[1,⍴md]
:If 0∊⍴'<code\b[^>]*>'⎕S 0⊣first
:AndIf 0∊⍴'<code\b[^>]*>'⎕S 0⊣⊃1↓md ⍝ '<cod'{⍺≢(⍴,⍺)↑⍵}⊃1↓md
first,←'<code>'
:EndIf
:If 0=+/'</code'⍷last
:AndIf '</cod'{⍺≢(⍴,⍺)↑⍵}⊃¯2↑md
:If 0∊⍴{⍵↓⍨⍵⍳'>'}last
last,⍨←'</code>'
:Else
last←'</code>',last
:EndIf
:EndIf
md[1]←⊂first
md[⍴md]←⊂last
:If {(⍴⍵)=+/∧\2≥+\⍵='>'}1⊃md  ⍝ Do <pre> and <code> stand on their own?
md←(,/2↑md),2↓md
:EndIf
:If {(⍴⍵)=+/∧\2≥+\⍵='>'}(⍴md)⊃md  ⍝ Do </pre> and </code> stand on their own?
md←(¯2↓md),,/¯2↑md
:EndIf
:EndIf
md←'</pre>'DropTailAfterClosingTag md
∇
DeleteTrailingWhiteSpace←{
⍝ Blanks, Tabs, you name it.
⍝ See https://www.wikiwand.com/en/Whitespace_character for details.
⎕IO←1 ⋄ ⎕ML←1
(2=|≡⍵):∇¨⍵
ws←⎕UCS 9 10 11 12 13 32 133 160
(1=⍴⍴⍵):⌽{(+/∧\⍵∊ws)↓⍵}⌽⍵
}
IsHtmlList←{
⍝ Returns a 1 in case ⍵ qualifies as an LI element of a list.
⍝ That is the case if one of the following conditions holds true:
tx←⍵
⍺←99                          ⍝ Number of leading blanks allowed.
⍺ IsBulletedHtmlList tx:1
⍺ IsOrderedHtmlList tx
}
IsOrderedHtmlList←{
⍝ Returns a 1 in case ⍵ qualifies as an LI element of an ordered list.
⍝ ⍺ is the number of leading blanks allowed (for a starting list item this would be 3).
⍝ [1] Zero to many white spaces
⍝ [2] 1 to 9 digits ...
⍝ [3] ... but not more than 9 of them
⍝ [4] Either a `.` or a `)`
⍝ [5] One or more white spaces
⍝ Then it's an ordered list item
tx←⍵
0∊⍴'^\s*?\b\d{1,9}\b[.)]\s+?'⎕S 0⊣tx:0
⍺>3:1
3≥+/∧\' '=tx
}
IsBulletedHtmlList←{
⍝ Returns a 1 in case ⍵ qualifies as an LI element of a bulleted list.
tx←,⍵
~{(⊃dlb ⍵)∊'*+-'}tx:0
pattern←'^\s{0,',(⍕⍺),'}[-+\*]\s'
~0∊⍴pattern ⎕S 0⊣tx
}
∇ r←IdentifyListItems ns;max;buff;ind;b1;b2;b
⍝ Takes "ns" as right argument and figures out how many items belong to the current list.
⍝ Things are complicated by ...
⍝ * the fact that lazyness is allowed.
⍝ * lines might be glued together with a trailing `\` or divided by <<br>>.
⍝ * Laziness and indentation might be mixed together.
⍝ * Lists might be nested.
⍝ Note that a single blank line between items is okay; only more than one empty line breaks a list definition.
⍝ We know already where two blank lines occur (max).
r←max←{0=+/⍵:⍴⍵ ⋄ ⍵⍳1}⍨1 1⍷ns.emptyLines      ⍝ Two empty lines stop a list dead in any case
buff←max↑ns.markdown
:If ~0∊⍴ind←(Where max↑ns.emptyLines)~max     ⍝ We are interested in the lines after any empty line
b1←0=+/∧\' '=↑buff[ind+1]                 ⍝ If those are not indented they potentially break the list
b2←~IsHtmlList¨buff[ind+1]                ⍝ Which ones are not list items as such at all?
:If 0<+/b←b1∧b2
r←⊃b/ind
:EndIf
:EndIf
∇
IsGlued←{
⍝ Takes a vector of vectors and returns a 1 for those lines
⍝ that end either with \ of with <<br>>
b←'\'=⊃¨¯1↑¨⍵
0,¯1↓b∨'<<br>>'∘{⍺≡(-⍴⍺)↑⍵}¨⍵
}
IdentifyBulletedList←{
⍝ This uses ns.leadingChars, meaning that it ignores indentation
ns←⍵
max←⍺
IdentifyList__ ns max'*'
}
IdentifyOrderedList←{
ns←⍵
max←⍺
IdentifyList__ ns max'1'
}
IdentifyList__←{
(ns max type)←⍵
nl←0,¯1↓'\'=⊃¨¯1↑¨max↑ns.markdown                                 ⍝ nl flags all lines that...
nl∨←0,¯1↓(~max↑ns.emptyLines)∧'  '∘≡¨¯2↑¨max↑ns.markdown          ⍝ ... belong to the predecessor...
nl∨←0,¯1↓'<<br>>'{⍺∘≡¨(-⍴⍺)↑¨⍵}max↑ns.markdown                    ⍝ ... due to line breaks.
markers←(1+'*'=type)⊃'0123456789 ' '+-* '                         ⍝ "markers" depends on list type.
max←+/∧\nl∨(⊃¨max↑ns.leadingChars)∊markers                        ⍝
'*'≡type:+/∧\{(' '=⍵)∨~⊃∘IsOrderedHtmlList¨⍵}⊃¨max↑ns.markdown    ⍝ No mistake: we check for the ...
'1'≡type:+/∧\{(' '=⍵)∨~⊃∘IsBulletedHtmlList¨⍵}⊃¨max↑ns.leadingChars  ⍝ OTHER list type here!
.                                                                 ⍝ Huuh?!
}
∇ (r isHtmlBlock)←ns ProcessInlineMarkUp tx
⍝ Note: sequence matters! Think thrice before changing, and run test cases immediately if you do anyway.
r←1 ProcessInlineMarkUp_ tx ns.parms
(r isHtmlBlock)←ns ProcessFunctionCalls r
∇
∇ r←escapeFlag ProcessInlineMarkUp_(tx parms)
⍝ Note: sequence matters! Think thrice before changing, and run test cases immediately if you do anyway.
r←tx
r←Process_BR r
r←ProcessAutomaticLinks r
r←ProcessSpecialHTML_Chars⍣escapeFlag⊣r
r←parms SmartStuff⍣(⊃parms.syntaxSugar)⊣r
r←(,¨'<>')⎕R'\&lt;' '\&gt;'⊣r                 ⍝ Needed!
r←ProcessImages r
r←parms.bookmarkMayStartWithDigit ProcessLinks r
r←ProcessDoubleAsterisks r
r←ProcessAsterisks r
r←ProcessDoubleUnderscores r
r←1 ProcessUnderscores r
r←ProcessDoubleTildes r
r←MarkUpInlineCode r
r←RemoveEscapeChars r
r←InjectBR r
r←InjectPointyBrackets r
⍝Done
∇
∇ txt←{mask}ProcessAsterisks txt_;noOf;bool;ind;start;end;txt2
⍝ Takes a string and marks up everything between * and * as <em>
⍝ except when it...
⍝ * occurs within a word
⍝ * occurs within APL code
⍝ * has a white-space char to the right of any opening marker
⍝ * has a white-space char to the left of any closing marker
⍝ Call this **after** having called ProcessDoubleAsterisks
txt2←txt←'  ',txt_,'  '
txt2←'\\\*'⎕R'⌹⌹'⍠('Mode' 'D')⊣txt2
:If 0<+/bool←(⍳⍴txt)∊2+∊'\s\*[^*|\s]' '[^\s|*]\*[^*]'{⍺ ⎕S 0⍠('Mode' 'D')⊣⍵}¨⊂txt2
:AndIf 0<+/bool←bool\'\'≠txt[¯1+Where bool]
mask←GetMaskForCode txt
bool∧←~mask
:AndIf ~0∊⍴ind←Where bool
start←((⍴ind)⍴1 0)/ind
end←((⍴ind)⍴0 1)/ind
txt[start]←⊂'<em>'
txt[end]←⊂'</em>'
txt←⊃,/txt
:EndIf
txt←2↓¯2↓txt
∇
∇ txt←{mask}ProcessDoubleAsterisks txt_;noOf;bool;ind;start;end
⍝ Takes a string and marks up everything between ** and ** as <strong>
⍝ except when it occurs within a word or within APL code.
⍝ Call this **before** calling ProcessAsterisks.
txt←'  ',txt_,'  '
:If 0<+/bool←(⍳⍴txt)∊2+'[^*]\*\*'⎕S 0⍠('Mode' 'D')⊣txt
:AndIf 0<+/bool←bool∧bool\'*'≠txt[2+Where bool]
:AndIf 0<+/bool←bool\'\'≠txt[¯1+Where bool]
mask←GetMaskForCode txt
bool∧←~mask
:AndIf ~0∊⍴ind←Where bool
start←((⍴ind)⍴1 0)/ind
end←((⍴ind)⍴0 1)/ind
txt[start]←⊂'<strong>'
txt[end]←⊂'</strong>'
txt[1+start,end]←⊂''
txt←⊃,/txt
:EndIf
txt←2↓¯2↓txt
∇
∇ txt←{mask}ProcessDoubleUnderscores txt_;noOf;bool;ind;start;end
⍝ Takes a string and marks up everything between __ and __ as <strong>
⍝ except when it occurs within a word or within APL code or as part of a function call.
txt←'  ',txt_,'  '
:If 0<+/bool←(⍳⍴txt)∊2+'[^_]__[^_]'⎕S 0⊣txt
:AndIf 0<+/bool←bool\'\'≠txt[¯1+Where bool]
mask←GetMaskForCode txt
bool∧←~mask
:AndIf ~0∊⍴ind←Where bool
:AndIf ~0∊⍴ind←((txt 2∘NotWithinWord¨ind))/ind
start←((⍴ind)⍴1 0)/ind
end←((⍴ind)⍴0 1)/ind
txt[start]←⊂'<strong>'
txt[end]←⊂'</strong>'
txt[1+start,end]←⊂''
txt←⊃,/txt
:EndIf
txt←2↓¯2↓txt
∇
∇ txt←{ignoreURLs}ProcessUnderscores txt_;noOf;bool;ind;start;end;txt2;b;buff
⍝ Takes a string and marks up everything between _ and _ as <strong>
⍝ except when it occurs ...
⍝ * within a word
⍝ * within APL code
⍝ * as part of a function call
⍝ * between &amp;pointybracket_open; and &amp;pointybracket_close;
⍝ * within the URL
ignoreURLs←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'ignoreURLs'
txt2←txt←'  ',txt_,'  '
txt2←'\\_'⎕R'⌹⌹'⍠('Mode' 'D')⊣txt2
:If 0<+/bool←(⍳⍴txt)∊2+'\s_[^_\s]' '[^\s_]_[^_]'⎕S 0⍠('Mode' 'D')⊣txt2
:AndIf 0<+/bool←bool\'\'≠txt[¯1+Where bool]
bool∧←~GetMaskForCode txt
:If ignoreURLs
:AndIf ~0∊⍴buff←'<a .*>*.</a>'⎕S 0 1⍠('Greedy' 0)⊣(~bool){⍺\⍺/⍵}txt
bool[{⊃,/{⍵[1]+⍳⍵[2]}¨⍵}buff]←0
:EndIf
bool∧←~MaskPointyBrackets txt
bool∧←~MaskTagAttrs txt
bool∧←~MaskFunctionCall txt
:AndIf ~0∊⍴ind←Where bool
:AndIf ~0∊⍴ind←((txt 1∘NotWithinWord¨ind))/ind
start←((⍴ind)⍴1 0)/ind
end←((⍴ind)⍴0 1)/ind
txt[start]←⊂'<em>'
txt[end]←⊂'</em>'
txt←⊃,/txt
:EndIf
txt←2↓¯2↓txt
∇
∇ txt←ProcessDoubleTildes txt_;noOf;bool;ind;start;end;mask;bool1;bool2
⍝ Takes a string and marks up everything between ~~ and ~~ as <del>
⍝ except when it occurs within a word or within APL code.
⍝ "~~" might also appear as "~~~", and it might be escaped.
txt←'  ',txt_,'  '
:If 0<+/bool←'~~'⍷txt
ind←Where bool
:AndIf 0<+/bool1←bool∧bool\~txt[¯1+ind]∊'\~'
:AndIf 0<+/bool2←bool∧bool\~txt[ind+⍴'~~']∊'~\'
:AndIf 0<+/bool←bool1∧bool2
mask←GetMaskForCode txt
bool∧←~mask
:AndIf ~0∊⍴ind←Where bool
:AndIf ~0∊⍴ind←((txt 2∘NotWithinWord¨ind))/ind
start←((⍴ind)⍴1 0)/ind
end←((⍴ind)⍴0 1)/ind
txt[start]←⊂'<del>'
txt[end]←⊂'</del>'
txt[1+start,end]←⊂''
txt←⊃,/txt
:EndIf
txt←2↓¯2↓txt
∇
ProcessImages←{
txt←⍵
mask←~GetMaskForCode txt
0∊⍴i1←¯1+Where mask∧'!['⍷txt:txt
i1←⊃i1
'![CDATA['{⍺≡(⍴⍺)↑⍵}i1↓txt:txt        ⍝ Invalid <![CDATA[ section (probably missing empty lines)
txt←i1⌽txt
alt←2↓¯1↓{⍵↑⍨⍵⍳']'}txt
txt←{⍵↓⍨⍵⍳']'}txt
buff←1↓¯1↓txt↑⍨0⍳⍨(+\'('=txt)>+\')'=txt
specialAttributes←GetSpecialAttributes{'{'≠⊃⍵:'' ⋄ {⍵↑⍨⍵⍳'}'}⍵}(2+⍴buff)↓txt
txt←specialAttributes DropSpecialImageAttributes txt
title←{dlb ¯1↓dtb{⍵↑⍨⍵⍳'"'}⍵↓⍨⍵⍳'"'}buff
url←{dlb dtb ⍵↑⍨¯1+⌊/⍵⍳'"{'}buff
((url='\')/url)←'/'
url←url ProcessImageUrl ns.parms.imageURL
insert←'<img src="',url,'"'
insert,←specialAttributes
(('"'=alt)/alt)←''''
(title alt)←title{0∊⍴⍺:⊂⍵ ⋄ 0∊⍴⍵:⊂⍺ ⋄ ⍺ ⍵}alt
insert,←' alt="',alt,'"'
insert,←(~0∊⍴title)/' title="',title,'"'
insert,←'>'
txt←(-i1)⌽insert,(2+⍴buff)↓txt
∇ txt
}
Process_BR←{
⍝ The extended syntax of MarkAPL allows `<<br>>` in the code which will be
⍝ converted to <br> in two stages: here we replace this by a ⎕UCS 13 (CR).
txt←⍵
'`<<br>>`' '<<br>>'⎕R'\0' '\r'⍠('IC' 1)⊣txt
}
ProcessAutomaticLinks←{
⍝ This must be done early because later any "<" and ">" will be replaced by there HTML entities.
⍝ (It was a very bad idea to use this syntax! [](url} is so obvious!)
⍝ Therefore we replace "<" and ">" by made-up HTML entities which we replace later by "<" & ">".
⍝ Note that this function escapes any of `_`, `__`, `*`, `**`, `~~`.
txt←⍵
mask←~GetMaskForCode txt
0∊⍴i1←¯1+Where'<'=mask\mask/txt:txt
txt←i1[1]⌽txt
(⍴txt)<l←txt⍳'>':(-i1[1])⌽txt
link←¯1↓1↓l↑txt
sa←GetSpecialAttributes{'{'∊⍵:{⍵↑⍨⍵⍳'}'}{⍵↓⍨¯1+⍵⍳'{'}⍵ ⋄ ⍵}link
link←{⍵/⍨~Between ⍵∊'{}'}link
∨/link∊AllWhiteSpaceChars:⍵                       ⍝ The link text must not contain any white space
0={(∨/'://'⍷⍵)∨'@'∊⍵}link:⍵                       ⍝ We need to catch URLs and email addresses
link,⍨←(0={(∨/'://'⍷⍵)∨'@'∊⍵}link)/'http://'
link←'\_' '\*' '\~\~'⎕R'\\_' '\\*' '\\~\\~'⍠('Greedy' 0)⊣link
pbo←'&pointybracket_open;'                        ⍝ Later converted ...
pbc←'&pointybracket_close;'                       ⍝ ... back to < and >.
class←' class="',((1+'mailto'{⍺≡(⍴⍺)↑⍵}link)⊃'external_link' 'mailto_link'),'"'
linkText←sa DropSpecialAttributes'mailto:'{⍵↓⍨(⍴⍺)×⍺≡(⍴⍺)↑⍵}1↓¯1↓l↑txt
linkText←'\_' '\*' '\~\~'⎕R'\\_' '\\*' '\\~\\~'⍠('Greedy' 0)⊣linkText
txt←(pbo,'a href="',link,'"',class,sa,pbc,linkText,pbo,'/a',pbc),l↓txt
txt←(-i1[1])⌽txt
∇ txt
}
ProcessLinks←{
⍺←1
bookmarkMayStartWithDigit←⍺
txt←⍵
mask←~GetMaskForCode txt
⍬≡on←mask IsolateLink txt:txt
txt←on⌽txt
mask←on⌽mask
closeBracket←(']('⍷(mask\mask/txt))⍳1
mask←(closeBracket⍴1),{(+\⍵='(')-+\⍵=')'}closeBracket↓txt  ⍝ Careful: a caption might contain ")" when just ⍳')' would not suffice
off←1++/∧\1=(∧\0=mask)∨mask>0
linkDef←off↑txt
linkDef←dmb ReplaceQTC_byBlank linkDef
mask←~GetMaskForCode linkDef
sa←GetSpecialAttributes⌽{'{'∊⍵:{⍵↑⍨⍵⍳'{'}{⍵↓⍨¯1+⍵⍳'}'}⍵ ⋄ ''}⌽mask/linkDef   ⍝ Because special attributes for a link follow straight after the link
txt←off↓txt
mask←⌽~GetMaskForCode linkDef
linkDef←⌽mask{'{'∊⍺/⍵:')',(⍵↓⍨(⍺\⍺/⍵)⍳'{') ⋄ ⍵}⌽linkDef                ⍝ Drop the special attribute but leave any code alone
(url title)←GetUrlAndTitleFromLink linkDef
poundFlag←⊃'#'=1⍴url
mask←~GetMaskForCode linkDef
linkText←1↓dtb mask{⍵↑⍨¯1+1⍳⍨⍺\']('⍷⍺/⍵}linkDef
url←linkText(bookmarkMayStartWithDigit∘CompileBookMarkName{(1<⍴⍵)∧'#'=1↑⍵:'#',⍺⍺ ⍵'' ⋄ (,'#')≡,⍵:'#',⍺⍺ ⍺'' ⋄ ⍵})url
linkText{0∊⍴⍵:⍺ ⋄ ⍵}←(1+poundFlag)⊃linkText title
linkText←ProcessInlineMarkupInLinkText linkText
linkText{0∊⍴⍺~' ':⍵ ⋄ ⍺}←url
tag←'a href="',url,'"'
tag,←(~poundFlag)/' class="',((1+'mailto'{⍺≡(⍴⍺)↑⍵}url)⊃'external_link' 'mailto_link'),'"'
tag,←AddBookmarkClassName⍣poundFlag⊣sa
tag,←((~poundFlag)∧~0∊⍴title)/' title="',title,'"'
insert←tag Tag linkText
txt←(-on)⌽insert,txt
∇ txt
}
ProcessInlineMarkupInLinkText←{
r←ProcessDoubleAsterisks ⍵
r←ProcessAsterisks r
r←ProcessDoubleUnderscores r
r←0 ProcessUnderscores r
r←ProcessDoubleTildes r
ns.parms SmartStuff⍣(⊃ns.parms.syntaxSugar)⊣r
}
AddBookmarkClassName←{
sa←⍵  ⍝ Special attributes - they MAY contain a user-defined class name
0=+/'class="'⍷sa:sa,' class="bookmark_link"'
'class="'⎕R'&bookmark_link '⊣sa
}
∇ r←GetMaskForCode txt;noOf
⍝ Returns a mask (vector of Booleans with zeros for all APL code in ⍵.
⍝ Does not fall over odd number of ticks.
:If 0<+/r←'`'=' ',txt
r[Where r]←'\'≠txt[¯1+Where r]
:AndIf 0<+/r
:If 0<noOf←+/r
:AndIf {⍵≠⌊⍵}noOf÷2
(¯1↑r)←1
:EndIf
r←1↓r∨≠\r
:Else
r←(⍴txt)⍴0
:EndIf
∇
GetMaskForCodeTags←{
⍝ Returns a mask for everything between <code*> and </code>.
⍝ We can savely assume valid HTML5 here.
txt←⍵
r←(⍴txt)⍴0=1
0=+/b←'</code>'⍷txt:r         ⍝ No closing tag? Done!
r[(¯1+⍴'</code>')+Where b]←1
ind←Where'<code'⍷txt
ind←(txt[ind+⍴'<code']∊'> ')/ind
r[ind]←1
Between r
}
SplitTableRowButMaskCode←{
⍝  'First' 'Second' ←→ SplitTableRowButMaskCode 'First',(⎕UCS 13 10),'Second'
⍝ (,¨'1' '2' '3') ←→ '.' SplitTableRowButMaskCode '1.2.3'
⍝ But:
⍝ 'Code' '`{{⍵/⍨2=+⌿0=⍵∘.|⍵}⍳⍵}`' '' ←→ '|' SplitTableRowButMaskCode '|Code | `{{⍵/⍨2=+⌿0=⍵∘.|⍵}⍳⍵}` |
⎕ML←⎕IO←1
txt←dlb dtb ⍵
txt←(('|'≠⊃txt)/'|'),txt
txt,←{'|'/⍨('|'≠1↑1↓⍵)∧'\|'≢⊃⍵}¯2⌽txt
txt←{⍵,'`|'}⍣(1=2|+/txt='`')⊣txt           ⍝ Add trailing tick and pipe in case of odd number of ticks
mask←~GetMaskForCode txt
bool←mask\'|'=mask/txt
bool[1~⍨Where bool]←'\'≠txt[¯1+1~⍨Where bool]
r←1↓¨¯1↓bool⊂txt
{0=+/b←'\|'⍷w←⍵:w ⋄ (~b)/w}¨r
}
NotWithinWord←{
⍝ ⍵ is a vector of hits for, say, `_`
⍝ ⍺ is a two-element vector:
⍝   [1] Something like a paragraph
⍝   [2] Length of markup (_, *, **, __, ~~, ...); 1∨2
⍝ Does not recoginze compound names, but they should be between `` anyway!
(txt length)←⍺
hit←⍵
boundaries1←(⊂hit+¯1,length)⌷txt      ⍝ What's to the left and right of the hit
boundaries2←(⊂hit+¯2,length+1)⌷txt    ⍝ What's to the left and right of boundary1 (for recognizing compound names)
1 1≢boundaries1∊PartOfNames
}
∇ name←{ns}GetBookMarkNameFromCaption(txt specialAttrs)
⍝ Remove all formatting, links, etc.
⍝ Remove everything between <>, () and [].
⍝ Remove all punctuation except underscores, hyphens, and periods.
⍝ Remove all HTML &{word}: entities
⍝ Remove all code.
⍝ Remove HTML.
⍝ Remove leading and trailing spaces.
⍝ Replace all remaining spaces with hyphens.
⍝ Convert all alphabetic characters to lowercase.
⍝ Remove everything up to the first letter or `∆⍙`.
⍝ If nothing is left after this, use `section` as identifier.
ns←{
0<⎕NC ⍵:⍎⍵
r←⎕NS''
r.headerLineNos←⍬
r.headers←0 3⍴''
r.lineNumbers←0
r.report←''
r.parms←⎕NS''
r.parms.bookmarkMayStartWithDigit←1
r.parms.lineNumberOffset←0
r
}'ns'
:If 0={0=⍵.⎕NC'parms.bookmarkLink':1 ⋄ ⍵.parms.bookmarkLink}ns
name←''
:Else
name←ns.parms.bookmarkMayStartWithDigit CompileBookMarkName txt specialAttrs
:If 0∊⍴name                              ⍝ Nothing left?
name←'section'                       ⍝ Go for the name section
ns.report,←⊂'Warning: header on line ',(⍕ns.parms.lineNumberOffset+⊃ns.lineNumbers),': no bookmark name left; name assigned'
:EndIf
:If (⊂name)∊ns.headers[;2]               ⍝ Does this bookmark already exist?
name←1{n←⍵,'-',⍕⍺ ⋄ ~(⊂n)∊ns.headers[;2]:n ⋄ (1+⍺)∇ ⍵}name  ⍝ Append a number
ns.report,←⊂'Warning: header on line ',(⍕ns.parms.lineNumberOffset+⊃ns.lineNumbers),': ambiguous name; number added'
:EndIf
:EndIf
∇
∇ ns←InjectTOC ns;param;levels;b;h;ns2;html;r;tocHtml;drop;parms;links;noOf;buff;toc
⍝ Inject a TOC in case the user has specified this
:If 1=⍴,ns.parms.toc
levels←⍳ns.parms.toc
:Else
levels←ns.parms.toc
:EndIf
:If ~0∊⍴toc←↑((⊃¨ns.toc)∊levels)/ns.toc
drop←⌊/toc[;1]
:If (,0)≢,ns.parms.numberHeaders
toc,←toc{⍵[;4]⌿⍨⍵[;2]∊⍺[;3]}ns.headers
links←ns.parms.bookmarkMayStartWithDigit{⍺ CompileBookMarkName ⍵''}¨toc[;3]
tocHtml←ns CreateTOC toc[;1 2 4],links
:Else
links←{(3⊃⍵)≡GetBookMarkNameFromCaption(2⊃⍵)'':3⊃⍵ ⋄ 3⊃⍵}¨↓toc
tocHtml←ns CreateTOC(toc[;1 2],(⊂'')),links
:EndIf
:If '<a' '<h'≡2↑¨2↑ns.html                        ⍝ First two lines define a header?!
noOf←1⍳⍨'</a>'{⍺∘≡¨(⍴⍺)↑¨⍵}ns.html
ns.html←(noOf↑ns.html),tocHtml,noOf↓ns.html   ⍝ Insert after the first header
:Else
ns.html←tocHtml,ns.html                       ⍝ Put TOC before anything else
:EndIf
:EndIf
∇
∇ ns←ScanMarkdown ns;∆LastLineWasEmpty;isHtmlBlock;html
∆LastLineWasEmpty←0
ns.topOfDocument←1
:Repeat
:If ~0∊⍴'^⍎⍎[#_A-Za-z∆⍙].*⍎⍎$'⎕S 0⍠('Greedy' 0)⊣⊃ns.markdown ⍝  Does the line call an embedded function but nothing else?
:AndIf 3=⎕NC{⍵↑⍨¯1+⍵⍳'⍎'}2↓⊃ns.markdown
(html isHtmlBlock)←ns ProcessFunctionCalls⊃ns.markdown
:AndIf ~0∊⍴html
:If 0=isHtmlBlock
html←'<p>'∘,¨(Nest html),¨⊂'</p>'
:EndIf
ns.html,←Nest html
ns←Drop ns
:Else
:If ProcessEmeddedHTML ns
:If ⊃ns.emptyLines
⍝ ns.noOf←+/∧\ns.emptyLines  ⍝ No! Don't do this: it breaks the logic
ns←Drop ns
∆LastLineWasEmpty←1
:Else
:If 0=ProcessSubTOC ns
:AndIf 0=ProcessFootnoteDefs ns
:AndIf 0=ProcessAbbreviationDefs ns
:AndIf 0=ProcessDataDefs ns
:AndIf 0=ProcessReferenceLinks ns
:AndIf 0=ProcessCodeBlock ns
:AndIf 0=ProcessHeaders ns
:AndIf 0=RemoveLampLines ns
:AndIf 0=ProcessBlockQuotes ns
:AndIf 0=ProcessTable ns
:AndIf 0=ProcessHorizontalRulers ns
:AndIf 0=ProcessLists ns
:AndIf 0=ProcessDefinitionLists ns
∆LastLineWasEmpty ProcessParagraph ns      ⍝ This must be the last one!
∆LastLineWasEmpty←0
:EndIf
:EndIf
:Else
:If ⊃ns.emptyLines
:AndIf '<'≠⊃⊃1↑1↓ns.leadingChars
ns.noOf←1
ns←Drop ns
:EndIf
:EndIf
:EndIf
ns.topOfDocument←0
:Until 0∊⍴ns.leadingChars
:If ~0∊⍴ns.html
ns.html←{'&#96;'⎕R'`'⊣⍵}⊣,¨ns.html
:EndIf
∇
IotaSetextHeader←{
⍝ Returns indices as a vector of Booleans for all lines in ns.markdown that in itself would qualify as a SeText header.
⍝ "In itself" means that it does not check whether what is above it is a para; that need to be checked independently.
type←⍺
(withoutBlanks markdown emptyLines)←⍵
0=+/b←(~emptyLines)∧withoutBlanks∧.=¨type:1+⍴markdown
Where b\{4>+/∧\' '=⍵}¨b/markdown          ⍝ Max 3 leading blanks
}
CompilePara←{
para←⍵
para←('⍝'≠⊃¨para)/para  ⍝ Get rid of lines that start with a lamp symbol.
para←{'\'≠¯1↑⍵:⍵ ⋄ (¯1↓⍵),⎕UCS 13}¨para
dmb(1↓⊃,/' ',¨para)
}
IsTableRow←{
⍝ ⍵ qualifies as a table row if it contains at least 2 un-escaped pipes (`|`).
row←,⍵
mask←~GetMaskForCode row
0=+/b←'|'=mask/row:0
∨/'\'≠(' ',row)[Where b]
}
IsFenceStart←{
⍝ The start of a code block fence may have an info string after the fence as such.
md←⍵
3<noOfBlanks←+/∧\' '=md:0             ⍝ Max three blanks
md←noOfBlanks↓md
fence←⊃md
~fence∊'`~':0
3>noOfFencingChars←+/∧\md=fence:0     ⍝ At least three fencing characters
0∊⍴md←noOfFencingChars↓md:1
~fence∊md                             ⍝ Any info string must not contain the fence character
}
FindFenceEnd←{
⍝ The end of a fence must have at last three ⍺ characters and may have leading and trailing blanks as well
⍝ but nothing else, in particular no special attributes.
⍝ ⍵ is a vector of Markdown vectors.
pattern←⍺
~0∊⍴noOf←1+(pattern,'\s{0,}$')⎕S 2⍠('Mode' 'L')⊣⍵:1+⊃noOf
1+⍴⍵            ⍝ To the end of the document!
}
GetInfoString←{
⍺←3
indendation←⍺
md←⍵
fence←⊃md~' '
0∊⍴md←(+/∧\md=fence)↓md:''
0∊⍴md←(¯1+md⍳'{')↑md:''               ⍝ Remove special attributes (if any)
pattern←'^\s{0,',(⍕indendation),'}',fence,'{3,}'
0∊⍴infoString←dlb dtb pattern ⎕R''⊣md:''
(~fence∊infoString)/infoString        ⍝ Any info string must not contain a fencing character
}
IsStyleBlockStart←{
start←⍵
'<style'{⍺≢(⍴⍺)↑⍵}start:0
later←(⍴'<style')↓start
'>'=⊃later:1
0=⍴later:1
}
DetectOpeningTag←{
⍝ When this is called we know that the first char of the current line is a `<` character.
⍝ ⍺ is something like "<style" (Yes, without the closing >!)
⍝ We now need to find out whether it is really an HTML tag.
md←⍵                                  ⍝ Nested vector with all the Markdown
tag←⍺
~0∊⍴tag ⎕S 0⍠('IC' 1)⊣⊃md
}
DetectClosingTag←{
⍝ Find the tag
(md tag)←⍵
(∨/¨tag∘⍷¨md)⍳1
}
DetectClosingTagBeforeEmptyLine←{
⍝ Find the tag followed by a blank line
(md tag)←⍵
b←(∨/¨tag∘⍷¨md)∧((1↓0=⊃¨⍴¨md)),0
0=+/b:0
b⍳1
}
DropTailAfterClosingTag←{
html←⍵
tag←⍺
buff←(⍴html)⊃html
buff←((¯1+⍴tag)+1⍳⍨tag⍷Lowercase buff)↑buff
((⍴html)⊃html)←buff
html
}
RemoveHTML←{
⍝ 'This contains a tag'←∇ 'This contains a <span>tag'</span>
txt←⍵
'<>'{⍵/⍨~Between ⍵∊⍺}txt
}
ProcessSpecialHTML_Chars←{
tx←⍵
0=+/tx∊'&<>':tx
EscapeSpecialChars tx
}
∇ r←RemoveEscapeChars tx;mask;b;specialChars;ind;b2
⍝ Remove the "\" (Escape character) from ⍵ except when ...
⍝ * there are two of them in a row (one survives)
⍝ * they are part of code (survives untouched)
⍝ * it appears with an attribute definition like <div attr="\3">
⍝ * any character to the right of the `\` is not one of `_*|<~{}(&`
⍝ This does not work on, say, "\\\\\\\\\\\\\\\; that why this is no legal.
mask←~GetMaskForCodeTags tx
mask←mask\{~Between ⍵∊'<>'}mask/tx
b←'\'=(mask/tx),' '
⍝ We try to be smart: only those are to be escaped anyway, so nothing else is touched
specialChars←'_*|<~`{}(&\'
b∧←b\((mask/tx),' ')[1+Where b]∊specialChars
b←¯1↓b∧b\'\'≠((mask/tx),' ')[1+Where b]
r←((~mask)∨mask\~b)/tx
mask←~GetMaskForCodeTags r
b←~mask\'\\'⍷mask/r
r←b/r
∇
∇ ns←HandleAbbreviations ns;html;abbr;comment;match2;match1;tag1;tag2;b;ignore
:If ~0∊⍴ns.abbreviations
html←ns.html
:For abbr comment :In ↓ns.abbreviations
:If ns.parms.syntaxSugar
comment←EscapeSpecialChars comment
comment←ns.parms SmartStuff comment
comment←'&'⎕R'\\&'⊣comment         ⍝ & is a reserved character (Dyalog, not PCRE!)
:EndIf
tag1←'<abbr title="',comment,'">\&ldquo;',abbr,'\&rdquo;</abbr>'
tag2←'<abbr title="',comment,'">',abbr,'</abbr>'
match2←{0=+/b←'&'=w←⍵:w ⋄ (b/w)←⊂'&amp;' ⋄ ⊃,/w}abbr
match1←'"',match2,'"'
match2←'\b',match2,'\b'
ignore←'<img.*>' '<a .*>.*</a>' '<code>.*</code>' '<code .*>.*</code>'
ignore,←⊂'<abbr .*>.*</abbr>'          ⍝ Abbreviations themselves should be left alone
ignore,←⊂'<dt>.*</dt>'                 ⍝ The keyword of a definition should not become an <abbr> tag.
ignore,←⊂'<dt .*>.*</dt>'              ⍝ Same in case of special attributes
html←(ignore,match1 match2)⎕R((,¨(⍴ignore)⍴'&'),tag1 tag2)⍠('Mode' 'D')('DotAll' 1)('Greedy' 0)⊣html
:EndFor
ns.html←html
:EndIf
∇
InjectFootNotes←{
ns←⍵
0∊⍴hits←GatherFootNoteReferences ns:ns
ns←ReplaceFootnoteReferences ns hits
AppendFootnoteDefinitions ns
}
∇ ns←ReplaceLinkIDs ns;mask;linkRefs
⍝ Replace the [{any link text}][link id] references in the HTML against the real thing: <a href="...
:If ~0∊⍴ns.linkRefs
:AndIf 0<+/mask←∨/¨~GetMaskForCodeTags¨ns.html
:AndIf ~0∊⍴∊linkRefs←GetAllLinkRefs mask/ns.html
ns ReplaceLinkID¨linkRefs
:EndIf
∇
ReportLinks←{
⍝ Injects a list with all external references together with a remark.
⍝ The resulting table is assigned the class "print_only" for obvious reasons.
ns←⍵
1≠ns.parms.reportLinks:ns
html←FlattenHTML ns.html
hits←'<a[^>]+class="external_link".*</a>'⎕S 0 1⍠('Greedy' 0)('Mode' 'D')⊣html
0∊⍴hits:ns
anchors←(-⍴'</a>')↓¨hits{⍺[2]↑⍺[1]⌽⍵}¨⊂html
urls←'href="'∘{{⍵↑⍨¯1+⍵⍳'"'}⍵↓⍨(¯1+⍴⍺)+1⍳⍨⍺⍷⍵}¨anchors
b←(urls⍳urls)=⍳⍴urls  ⍝ For dropping doubles
(anchors urls)←b∘/¨anchors urls
linkTexts←{⍵↓⍨⍵⍳'>'}¨anchors
linkTexts←(,¨'<>')⎕R'\&amp;pointybracket_open;' '\&amp;pointybracket_close;'⊣linkTexts
linkTexts←ns.parms{0 ProcessInlineMarkUp_ ⍵ ⍺}¨linkTexts
md←CreateMarkdownFromUrlAndLinkText urls linkTexts
md←'' '---' ''('**',ns.parms.reportLinksCaption,'**')'',md,''
ns2←Init''md
ns2←Process ns2
html2←InjectLinkTextIntoReportLink ns2.html linkTexts
ns.html,←(⊂'<div id="external_link_report" class="print_only">'),html2,(⊂'</div>')
ns
}
∇ md←CreateMarkdownFromUrlAndLinkText(urls linkTexts);url;linkText;i;buff
md←''
i←0
:For url linkText :InEach urls linkTexts
i+←1
buff←'* <',url,'>'
:If url≢linkText
buff,←':<<br>>','{{{{{',(⍕i),'}}}}}'
:EndIf
md,←⊂buff
:EndFor
∇
∇ html←InjectLinkTextIntoReportLink(html linkTexts);i;pattern;replaceBy;b1;b2;b3
:For i :In ⍳⍴linkTexts
pattern←'\{\{\{\{\{',(⍕i),'}}}}}'
replaceBy←i⊃linkTexts
b1←replaceBy='\'
b2←replaceBy='%'
b3←replaceBy='&'
(b1/replaceBy)←⊂'\\'
(b2/replaceBy)←⊂'\&'
(b3/replaceBy)←⊂'\&'
replaceBy←⊃,/replaceBy
html←pattern ⎕R replaceBy⍠('Greedy' 0)⊣html
:EndFor
∇
∇ hits←GatherFootNoteReferences ns;i;id;footnote;mask;bool;row;ind
⍝ Finds all the references to footnotes in the HTML
⍝ `hits` is a matrix with 4 columns:
⍝ [;1] Number
⍝ [;2] Original name
⍝ [;3] Row in ns.html where a hit was found
⍝ [;4] Index of the hit in that row.
hits←0 4⍴⍬
:For i id footnote :In ↓(⍳⊃⍴ns.footnoteDefs),ns.footnoteDefs
mask←{~Between⊃∨/'<code>' '</code>'⍷¨⊂⍵}¨ns.html
:If 0<+/∊bool←('[^',id,']')∘⍷¨mask/¨ns.html
:For row :In Where∨/¨bool
ind←1⍳⍨('[^',id,']')⍷row⊃ns.html                                      ⍝ Only the first one is taken into account
:If ~0∊⍴ind←(~ind∊Where GetMaskForCodeTags row⊃ns.html)/ind  ⍝ Remove those between <code tags
hits⍪←i,(⊂id),row,ind
:EndIf
:EndFor
:EndIf
:EndFor
hits←{⍵[⍒⍵[;3];]}{⍵[⍒⍵[;4];]}hits   ⍝ It's essential to turn them around!
∇
∇ ns←ReplaceFootnoteReferences(ns hits);i;ind;row;id;newID
⍝ Replaces the original footnote references (which have arbitrary names)
⍝ against ones which are strictly numbered from 1 to whatever.
:For i :In ⍳⊃⍴hits
(id row ind)←hits[i;1 3 4]
newID←'<a href="#fnref',(⍕id),'" class="footnote_link"><sup>',(⍕id),'</sup></a>]'
(row⊃ns.html)←(-ind)⌽newID,{⍵↓⍨⍵⍳']'}ind⌽row⊃ns.html
:EndFor
∇
∇ ns←AppendFootnoteDefinitions ns;i;footnote;html
html←''
html,←⊂'<div id="footnotes_div">'
html,←⊂'<hr>'
html,←⊂'<p><strong>',ns.parms.footnotesCaption,'</strong></p>'
html,←⊂'<ol>'
:For i footnote :InEach {(⍳⍴⍵)⍵}ns.footnoteDefs[;2]
footnote←': '⎕R':<br>'⊣footnote
html,←⊂'<li id="fnref',(⍕i),'">',(⊃,/Tag¨footnote),'<a href="#fnref',(⍕i),'" class="footnote_anchor"></a>'
:EndFor
html,←'</ol>' '</div>'
ns.html,←html
∇
InjectBR←{
⍝ In the original Markdown spec two blanks at the end of a line translate into a <br>
⍝ which is bad because the two blanks are invisible to the user. However, we still support this.
⍝ Earlier on those two blank have been translated into a `⎕UCS 13` (CR), and now its time to
⍝ replace every CR against a "<br>" tag:
tx←⍵
0=+/b←tx=⎕UCS 13:tx
'\r'⎕R' <br>'⍠'Mode' 'D'⊣tx
}
HandleEscapedNewLines←{
items←⍵
0=+/b←'\'=⊃¨¯1↑¨items:items
ind←Where b
items[ind]←{(¯1↓⍵),⎕UCS 13}¨items[ind]
items
}
SmartStuff←{
parms←⍺
buff←SmartTypography ⍵
parms.lang SmartQuotes buff
}
SmartTypography←{
⍝ Does all the smart stuff except double + single quote handling; see `SmartQuotes` for that.
⍝ This function does not check ns.syntaxSugar: that's up to the caller.
html←⍵
cb←'(^ {0,3}[~`]{3,}).*\1'                                ⍝ Code blocks (anything between `~~~` and three back ticks.
bbt←'`[^`].*?`'       ⍝ Between back-ticks (= code)
html←cb bbt'---'⎕R'\0' '\0' '—'⍠('Mode' 'D')('DotAll' 1)⊣html     ⍝ em dash
html←cb bbt'--'⎕R'\0' '\0' '–'⍠('Mode' 'D')('DotAll' 1)⊣html      ⍝ en dash
html←cb bbt'\.\.\.'⎕R'\0' '\0' '…'⍠('Mode' 'D')('DotAll' 1)⊣html  ⍝ Ellipses
html←cb bbt'<<'⎕R'\0' '\0' '«'⍠('Mode' 'D')('DotAll' 1)⊣html      ⍝ Chevron
html←cb bbt'>>'⎕R'\0' '\0' '»'⍠('Mode' 'D')('DotAll' 1)⊣html      ⍝ Chevron
html←cb bbt'\B\(c\)\B' '\B\(tm\)\B' '\B\(C\)\B' '\B\(TM\)\B'⎕R'\0' '\0' '©' '™' '©' '™'⊣html  ⍝ Copyright and Trademark
html←cb bbt'\B\&lt;==&gt;\B'⎕R'\0' '\0' '↔'⊣html                  ⍝ Left-and-right arrow
html←cb bbt'\B\&lt;==\B'⎕R'\0' '\0' '←'⊣html                      ⍝ Left arrow
html←cb bbt'\B\==&gt;\B'⎕R'\0' '\0' '→'⊣html                      ⍝ Right arrow
html
}
SmartQuotes←{
⍝ Exchange pairs of double quotes ←→ “„ but in DE, AT and CH ←→ „“.
⍝ See also SmartTypography for similar stuff.
⍝ This function does not check ns.syntaxSugar: that's up to the caller.
⍺←'en'                            ⍝ Default language is English.
lang←⍺
html←⍵
bbt←'`[^`].*?`'                   ⍝ Between back-ticks (= code)
cdq←'"".+?""'                     ⍝ Catch what is enclosed between two pairs (that is four of them!) of double quotes
cim←'!\[[^\)].*?\){.*?}'          ⍝ Catch image with special attributes
cl1←'\[\]\([^)]*.?\)'             ⍝ Catch simple link
cl2←'\[[^]]*.?\]\([^)]*.?\)'      ⍝ Catch simple link
ced←'\\"'                         ⍝ Catch escaped double quote
cpb←'&amp;pointybracket_open([^&]*.?)&amp;pointybracket_close' ⍝ Catch pointy brackets
me←'\0'
quotes1←'"(.*?)"'
quotes2←(1+(⊂lang)∊'de' 'at' 'ch')⊃'“\1”' '„\1“'
cpb cl1 cl2 cim bbt cdq ced quotes1 ⎕R((6⍴⊂me),'"'quotes2)⍠('Mode' 'D')('DotAll' 1)⊣html
}
NumberHeaders←{
ns←⍵
(,0)≡,ns.parms.numberHeaders:ns
ns←CalculateHeaderNumbers ns
InjectNumberedHeaders ns
}
SetTitle←{
ns←⍵
¯1≢ns.parms.title:ns
1≠ns.headers[;1]+.=1:ns⊣ns.parms.title←'MarkAPL'
ns.parms.title←{⊃⍵[⍵[;1]⍳1;3]}ns.headers
ns
}
Create_NS←{
ns←⎕NS''
ns.markdown←''
ns.emptyLines←⍬
ns.leadingChars←''
ns.lineNumbers←⍬                              ⍝ Useful for reporting problems
ns.report←''                                  ⍝ That's how MarkAPL tells about potential problem.
ns.withoutBlanks←⍬
ns.footnoteDefs←0 2⍴''
ns.headerLineNos←⍬
ns.headers←0 3⍴''                             ⍝ Level, bookmark, caption
ns.html←''                                    ⍝ Our result
ns.embeddedParms←0 2⍴''
ns.abbreviations←0 2⍴''
ns.linkRefs←⍬
ns.data←⍬
ns.(subToc toc)←⊂''
_←'parms'ns.⎕NS''
ns.parms.syntaxSugar←1
ns.parms.lang←'en'
ns
}
∇ {ns}←InjectNumberedHeaders ns;html;no;header;new;level;searchFor;ind;length;levelsToBeNumbered
:If ~0∊⍴ns.headers  ⍝ Are their any headers at all?
levelsToBeNumbered←{1≠⍴,⍵:⍵ ⋄ ⍳⍵}ns.parms.numberHeaders
:AndIf ∨/levelsToBeNumbered∊ns.headers[;1] ⍝ Right levels?!
html←FlattenHTML ns.html
:For level header no :In ↓ns.headers[;1 3 4]
:If level∊levelsToBeNumbered
searchFor←'>',header,'</h',(⍕level),'>'
ind←1⍳⍨searchFor⍷html
length←{¯1+⍵⍳'<'}{m←~GetMaskForCodeTags ⍵ ⋄ m\m/⍵}ind↓html
new←no,' ',header
html←(-ind)⌽new,length↓ind⌽html
:EndIf
:EndFor
ns.html←(⎕UCS 13)Split html
:EndIf
∇
∇ ns←CalculateHeaderNumbers ns;nos;current;level;lastLevel;i;bool;headers
current←6⍴0
bool←ns.headers[;1]∊{1=⍴,⍵:⍳⍵ ⋄ ⍵}ns.parms.numberHeaders
:If ~0∊⍴headers←bool⌿ns.headers
headers[;1]-←(⊃headers)-1
nos←(⊃⍴headers)⍴0
lastLevel←1
:For i :In ⍳⊃⍴headers
level←headers[i;1]
:If lastLevel>level
(level↓current)←0
:EndIf
current[level]+←1
nos[i]←⊂level↑current
lastLevel←level
:EndFor
ns.headers,←⊂''
(bool⌿ns.headers)[;4]←{⊃,/(⍕¨⍵),¨'.'}¨nos
:EndIf
∇
GetSpecialAttributes←{
⍝ Checks whether ⍵ (a single line of Markdown) carries a "special attributes" definition.
⍝ If so it returns a vector of definitions.
⍝ Example:
⍝ 'id="foo" class="cl1 cl2" attr1="A B C" attr2=123' ←→ ∇ '{#foo .cl1 .cl2 attr1="A B C" attr2=123}'
⍝  'style="color=red;font-family='APL385 Unicode'"' ←→ ∇ 'style="color:red;font-family:'APL385 Unicode'"
md←dtb ⍵
('!['≡2⍴md)∧0=+/'<<br>>'⍷md:''  ⍝ Might be a stand-alone image!
'}'≠¯1↑md:''
'\'=1↑¯2↑md:'' ⍝ Escaped?
~'{'∊md:''
0∊⍴def←dmb{¯1↓1↓⌽⍵↑⍨⍵⍳'{'}⌽md:''
mask←~Between'"'=def
defs←1↓¨(1,mask\' '=mask/def)⊂' ',def
0∊'='∊¨{⍵/⍨~(⊃¨⍵)∊'.#'}defs:''
0∨.≠2|'"'+.=¨defs:''
sp←⎕NS''          ⍝ Result space
sp.r←''           ⍝ Collects the result(s)
b←'.'=⊃¨defs      ⍝ All class definitions (if any)
sp{0∊⍴⍵:⍺ ⋄ ⍺ CompileClassNames ⍵}←b/defs
b←'#'=⊃¨defs      ⍝ An id definitions (if any)
1<+/b:'Invalid special attribute: more than one "id"'⎕SIGNAL 11
sp{0∊⍴⍵:⍺ ⋄ ⍺ CompileID_Names ⍵}←(b⍳1)⊃defs,⊂''
b←~(⊃¨defs)∊'#.'  ⍝ Any attribute defs
sp{0∊⍴⍵:⍺ ⋄ ⍺ CompileAttributes ⍵}←b/defs
sp.r/⍨←~''''''⍷sp.r  ⍝ APLers might specify double-quotes, so we remove them.
{⍵/⍨~'  '⍷⍵}sp.r
}
CompileClassNames←{
sp←⍺
sp.r,←' class="',(⊃{⍺,' ',⍵}/1↓¨⍵),'"'
sp
}
CompileID_Names←{
sp←⍺
sp.r,←' id="',(1↓⍵),'"'
sp
}
CompileAttributes←{
sp←⍺
attrs←dmb ⍵
attrs←CompileAttribute¨attrs
1=⍴attrs:sp⊣sp.r,←' ',⊃attrs
sp.r,←⊃{⍺,' ',⍵}/attrs
sp
}
CompileAttribute←{
attr←⍵
0≠2|'"'+.=attr:'Special attributes: invalid nunmber of "'⎕SIGNAL 11
mask←Between'"'=attr
0<+/mask:' ',attr
⊃{⍺,'="',⍵,'"'}/'='Split attr
}
CompileBookMarkName←{
⍝ Returns the bookmark name
⍺←1
bookmarkMayStartWithDigit←⍺
(txt specialAttrs)←⍵
txt←BringBackSpecialHtmlEntities txt
r←GetIdFromSpecialAttributes specialAttrs
~0∊⍴r:{{⍵↑⍨¯1+⍵⍳'"'}⍵↓⍨⍵⍳'"'}r
r←txt
r←'&[A-Za-z]*;'⎕R''⊢r                 ⍝ Remove HTML entities (&{word}; only)
r←'<.+?>'⎕R''⊣r                       ⍝ Remove everything between <>
r←RemoveHTML r
r←'\[.*\]'⎕R''⊣r                      ⍝ Remove everything between []
r←'\(.*\)'⎕R''⊣r                      ⍝ Remove everything between ()
allowed←' ∆⍙_-',⎕D,⎕A,Lowercase ⎕A
r←(r∊allowed)/r                       ⍝ Remove invalid characters
r←allowed{⍵↓⍨+/∧\~⍵∊⍺~⎕D}⍣(~bookmarkMayStartWithDigit)⊣r ⍝ Remove all leading digits if ~bookmarkMayStartWithDigit
r←dlb dtb r                           ⍝ Remove leading and trailing blanks
r←{0∊⍴⍵:⍵ ⋄ (⊃⍵)∊'∆⍙_',⎕D,⎕A,Lowercase ⎕A:⍵ ⋄ ∇ 1↓⍵}r
((' '=r)/r)←'-'                       ⍝ Replace remaining blanks by hyphens
r
}
DropSpecialAttributes←{
specialAttrs←⍺
0∊⍴specialAttrs:⍵
'\'=1↑¯2↑⍵:⍵
buff←(⎕UCS 13)Split ⍵     ⍝ In case of <<BR>>!
tx←dtb⊃buff
'}'≠¯1↑tx:1↓⊃,/(⎕UCS 13),¨(⊂tx),1↓buff
~'{'∊tx:1↓⊃,/(⎕UCS 13),¨(⊂tx),1↓buff
tx←dtb{⌽⍵↓⍨⍵⍳'{'}1↓⌽tx
1↓⊃,/(⎕UCS 13),¨(⊂tx),1↓buff
}
DropSpecialImageAttributes←{
⍝ In general special attributes are always located at the end of an object
⍝ while an image might might well be inside something else like a para or a cell etc.
specialAttrs←⍺
0∊⍴specialAttrs:⍵
'\'=1↑¯2↑⍵:⍵
buff←(⎕UCS 13)Split ⍵     ⍝ In case of <<BR>>!
tx←dtb⊃buff
b←('){')⍷tx
0=+/b:⍵
tx←(b⍳1)⌽⍵
(-b⍳1)⌽{⍵↓⍨⍵⍳'}'}tx
}
ExecExternalFns←{
ns←⍺
(fns __arg)←{∨/' '''∊⍵:(¯1+⌊/⍵⍳' '''){(⍺↑⍵)(dlb ⍺↓⍵)}⍵ ⋄ ⍵ ⍬}⍵
3≠⎕NC fns:''⊣ns.report,←⊂'Unknown external function: <',fns,'>'
0::''⊣ns.report,←⊂'External function <',fns,'> did crash'
1=2⊃1 ⎕AT fns:⍎fns,' ns'
⍎'__arg ',fns,' ns'
}
GetCommandLineParms←{
r←⎕NS''
clp←{⍵/⍨'-'≠⊃¨⍵}1↓2 ⎕NQ #'GetCommandLineArgs'
0∊⍴clp:r
0∊⍴clp←{⍵/⍨'='∊¨⍵}clp:r
clp←'='Split¨clp
_←r.{⍎⍺,'←',{'''',⍵,''''}⍣(~⊃⊃⎕VFI ⍵)⊢⍵}/¨clp
r
}
∇ r←GetCurrentDir
r←¯1↓⊃1 ⎕NPARTS''
∇
CorrectSlash←{
⍝ ⍺ is a Boolean that decides whether ⍵ shall be normalized (1) or not (0).
⍝ For everything that points to the local file system we want normalization,
⍝ but for stuff that potentially points elsewhere (like `cssUrl`) we don't want that:
⍝ We don't necessarily know the OS over there!
⍝ Default is normalization.
⍝ Leave any kind of protocol alone like "http://" etc. but also stuff like "foo://"
⍝ while "file://" and "file:///" is removed.
⍺←1
ss←'://' ⍝ Search string
0=+/bool←ss⍷⍵:##.FilesAndDirs.NormalizePath⍣(⊃⍺)⊣⍵
length←(¯1+⍴ss)+bool⍳1
(length↑⍵),##.FilesAndDirs.NormalizePath⍣(⊃⍺)⊣length↓⍵
}
InjectPointyBrackets←{
tx←⍵
tx←'&amp;pointybracket_open;'⎕R'<'⊣tx
'&amp;pointybracket_close;'⎕R'>'⊣tx
}
GetAllLinkRefs←{
⍝ This combs through the html and finds all link references ([][]-syntax).
⍝ Ignores in-line code.
⍝ Returns a three-item-vector for each hit.
⍝ [1] The link text - that can by anything.
⍝ [2] The ref id. That's what we hope to find in ns.linkRefs later on.
⍝     This must be US ASCII letters and digits and nothing else, not even white space.
⍝ [3] The match - -everything between the opening [ and the closing ], including [].
html←⍵
mask←GetMaskForCodeTags¨html
maskedHtml←mask{⎕ML←3 ⋄ 0=+/⍺:⍵ ⋄ w←⍵ ⋄ (⍺/w)←' ' ⋄ w}¨html
hits←↓⍉↑'\[[^\]]*\]\[[^\]][A-Za-z0-9-_]*\]'⎕S(0 1 2)⊣maskedHtml
0∊⍴∊hits:hits
html∘GetLinkRef¨↓⍉↑hits
}
GetLinkRef←{
html←⍺
(start length row)←⍵
row+←⎕IO
buff←row⊃html
match←(⊂start+⍳length)⌷buff
'[]['≡3↑match:''(¯1↓3↓match)match
(linkText id)←{⎕ML←3 ⋄ 0 2↓¨(1++\']['⍷⍵)⊂⍵}¯1↓1↓match
linkText id match
}
∇ {r}←ns ReplaceLinkID(linkText id searchFor);ind;url;title;sa;new
r←⍬
ind←(⊃¨ns.linkRefs)⍳⊂id
:If ind≤⍴ns.linkRefs
(url title sa)←1↓ind⊃ns.linkRefs
:If 0∊⍴title
:If 0∊⍴linkText
linkText←((ind,3)⊃ns.linkRefs)←url
:Else
((ind,3)⊃ns.linkRefs)←linkText
:EndIf
:EndIf
:If 0∊⍴linkText
linkText←title
:EndIf
new←'<a href="',url,'" class="external_link"',((~0∊⍴title)/' title="',title,'"'),sa,'>',linkText,'</a>'
ns.html←'<code>.*?</code>'(MakeLiteralForRegex searchFor)⎕R'\0'new⍠('Mode' 'D')('DotAll' 1)⊣ns.html
:EndIf
∇
MakeLiteralForRegex←{
⍝ Escapes all reserved chars in ⍵ which is a RegEx search pattern that needs to be interpreted literal.
literal←⍵
reservedChars←'^.\$|?+()['
b←literal∊reservedChars
0=+/b:literal
(b/literal)←('\',¨reservedChars)[reservedChars⍳b/literal]
⊃,/literal
}
FlattenHTML←{
⍝ Typically used to flatten ns.html
⍝ Bring back with :
⍝ ns.html ←→ (⎕Ucs 13) Split FlattenHTML ns.html
1↓⊃,/(⎕UCS 13),¨⍵
}
∇ r←ns CheckOddNumberOfDoubleQuotes(txt type);mask;ind;escape;openFlag;i;msg
⍝ Check "txt". That can be anything: paragraph, cell, list item, header, blockquote ...
⍝ * If it contains no " or an even number nothing changes.
⍝ * A single one is escaped.
⍝ * When an odd number is found the last one is escaped and a warning is issued, because
⍝   that might well not be what the user intended to do.
r←' ',txt
msg←''
mask←~GetMaskForCode r
:If 0∊⍴ind←Where mask\'"'=mask/r                      ⍝ No double quotes at all? Done!
r←txt
:ElseIf 1=⍴ind                                        ⍝ Just one double quote? Done!
r←'`(.*?)`' '"'⎕R'&' '\\"'⊣txt                    ⍝ Escapes the " but ignores `code`
msg←'Warning: single double quotes found in ',type
ns.report,←⊂msg,' (line ',(⍕ns.parms.lineNumberOffset+⊃ns.lineNumbers),')'
:Else
:If '\'∧.≠r[ind-1]                                ⍝ Nothing escaped?
:If 0=2|⍴ind                                  ⍝ Even number of "?
r←txt
:Else                                         ⍝ No, number is odd
(txt[¯1+¯1↑ind])←⊂'\"'                    ⍝ Escape the last one.
r←⊃,/txt
msg←'Warning: odd number of double quotes found in ',type
ns.report,←⊂msg,' (line ',(⍕¯1+ns.parms.lineNumberOffset+⊃ns.lineNumbers),')'
:EndIf
:Else                                             ⍝ We have some `\"` so we need a loop
openFlag←1
txt←' ',txt
:For i :In ind
:If '\"'≢txt[i-1 0]
:If openFlag
openFlag←0
:Else
openFlag←1
:EndIf
:EndIf
:EndFor
r←1↓⊃,/txt
:EndIf
:EndIf
∇
∇ ns←CheckForInvalidFootnotes ns;ind;ids;mask;html
⍝ At this point if we find any footnote refs they must be invalid, otherwise we wouldn't find them.
:If ns.parms.checkFootnotes
:AndIf ~0∊⍴ns.html
html←FlattenHTML ns.html
mask←~GetMaskForCodeTags html
:AndIf ~0∊⍴html←mask/html
:AndIf ~0∊⍴ind←Where'[^'⍷html
ids←ind{{⍵↑⍨¯1+⍵⍳']'}(⍺+1)↓⍵}¨⊂html
ns.report,←'Warning: invalid footnote: '∘,¨ids
:EndIf
∇
∇ ns←CheckInternalLinks ns;html;anchors;links
⍝ Checks all internal links for being correct (not pointing into nowhere land).
:If ns.parms.checkLinks
:AndIf ~0∊⍴ns.html
html←⊃,/ns.html
:AndIf ~0∊⍴html←(~GetMaskForCodeTags html)/html
anchors←GetBookmarkAnchors html
links←GetBookmarkLinks html
:AndIf ~0∊⍴links←(~links∊anchors)/links
ns.report,←'Invalid internal link: ['∘,¨links,¨']'
:EndIf
∇
∇ anchors←GetBookmarkAnchors html;buff
⍝ There are three different types of bookmark anchors:
⍝ * Headers (auto-generated; they have the class "autoheader_anchor")
⍝ * Footnotes (they have the class "footnote_anchor")
⍝ * Those with an ID assigned by special attributes or as part of an HTML block)
⍝ For that reason we need to take anything into account that carries an ID though
⍝ they might carry that ID only to be styleable with CSS.
anchors←''
buff←'<'Split html
:If ~0∊⍴buff←(∨/¨'id="'∘⍷¨buff)/buff
:AndIf ~0∊⍴anchors←(∨/¨' id="'∘⍷¨buff)/buff
anchors←{⍵{0∊⍴⍵:'' ⋄ {⍵↑⍨¯1+⍵⍳'"'}(+/⍵)↓⍺}⊃'id="'⎕S 0 1⊣⍵}¨anchors
:EndIf
⍝Done
∇
∇ links←GetBookmarkLinks html;buff
⍝ Those have the class "bookmark_link" or "footnote_link" assigned in case they are generated via Markdown.
⍝ However, if they are part of an HTML block then they might or not have any class assigned to them.
⍝ Therefore we need to take anything into account that carries an HREF attribute.
links←''
:If ~0∊⍴buff←'<'Split html
:AndIf ~0∊⍴links←(∨/¨' href="'∘⍷¨buff)/buff
links←{⍵{0∊⍴⍵:'' ⋄ {⍵↑⍨¯1+⍵⍳'"'}(+/⍵)↓⍺}⊃'href="'⎕S 0 1⊣⍵}¨links
⍝          links←(~∨/¨'://'∘⍷¨links)/links               ⍝ Drop all external links
⍝          links←(('mailto:'∘{⍺≢(⍴⍺)↑⍵}¨links))/links    ⍝ Drop all "mailto:" links
⍝          links←('#'=⊃¨links)↓¨links
links←1↓¨('#'=⊃¨links)/links
:EndIf
∇
CompileMarkAPLFnsAndOprs←{
parms←⍵
0=parms.compileFunctions:0    ⍝ Don't?!
1(400⌶)'Between':0            ⍝ already compiled
⍬ ⍝{2(400⌶)⍵}¨↓⎕NL 3
}
Between←{⍵∨≠\⍵}
MaskPointyBrackets←{
⍝ Some stuff is marked up internally as "&pointybracket_open;" and "&pointybracket_close;".
⍝ In some instances we need to mask whatever is between. This fns returns the mask.
⍝ Note that when called the "&" will be converted into "&amp;".
txt←⍵
r←(⍴txt)⍴0
0=+/b←'&amp;pointybracket_open;'⍷txt:r
start←¯1+Where b
end←('&amp;pointybracket_close;'{(⍴⍺)+Where ⍺⍷⍵}txt)-start+1
((,/start+¨⍳¨end)⌷r)←1
r
}
MaskTagAttrs←{
txt←⍵
r←(⍴txt)⍴0
~'<'∊txt:r
ind←∊{(⊃⍵)+⍳1↓⍵}¨'<[a-z]*\b[^>]*>'⎕S(0 1)⊣txt
r[ind]←1
r
}
MaskFunctionCall←{
txt←,⍵
b←(⍴txt)⍴0
mask←~GetMaskForCodeTags txt
0∊⍴ind←'[^⍎]⍎⍎[^⍎]'⎕S 0⊣' ',(mask/txt),' ':b
ind←{↑,/{⍵[1]+⍳⍵[2]-⍵[1]}¨↓(((⍴⍵)÷2),2)⍴⍵}ind
b[ind]←1
b
}
ReplaceQTC_byBlank←{
tx←⍵
0=+/b←tx∊⎕TC:tx
(b/tx)←' '
tx
}
∇ (noOf item)←CollectItem bl
⍝ Collects as many lines from `bl` as belong to what's a single list item.
⍝ bl:    All the lines a list may be compiled from.
⍝ The end is defined by one of:
⍝ * Empty line
⍝ * Line consisting of nothing but spaces
⍝ * The next list item (either numbered or bulleted, no matter what the indentation is)
⍝ Whatever comes first.
noOf←+/∧\0≠⊃¨⍴¨bl~¨' '
noOf←1++/∧\~IsHtmlList¨1↓noOf↑bl
item←FlattenNestedItem noOf↑bl
∇
∇ (noOf para)←CollectItemPara bl;options;buff
⍝ Collects as many lines from `bl` as belong to what's a paragraph.
⍝ bl:    All the lines a list may be compiled from.
⍝ indentation:   Number of blanks defining the indentation. May be zero.
⍝ ←:     [1]=Number of lines in bl the para is made of; [2]=the para as such
⍝ Note: this function must be called only when at least ⊃bl is a para indeed.
:If 1=noOf←+/∧\0≠⊃¨⍴¨bl
para←⊃bl
:Else
noOf←1++/∧\0=IsHtmlList¨1↓noOf↑bl
options←('Mode' 'M')('EOL' 'CR')('DotAll' 1)
:If ~0∊⍴buff←{⍵↑⍨⊃'[~`]{3,}\s{0,}'⎕S 0⍠options⊣⍵}1↓⊃,/(⎕UCS 13),¨dlb¨noOf↑bl
noOf←⊃((⎕UCS 13)+.={⍵↑⍨⊃'[~`]{3,}\s{0,}'⎕S 0⍠options⊣⍵}1↓⊃,/(⎕UCS 13),¨dlb¨noOf↑bl),noOf
noOf-←0∊⍴' '~⍨noOf⊃bl
:EndIf
para←dlb⊃,/' ',¨noOf↑bl
:EndIf
∇
GetListBlock←{
bl←⍵
mask←~Between{⊃3>⍴⍵:0 ⋄ (⊂3⍴⍵)∊'```' '~~~'}¨bl~¨' '
bl←(⌊/(~(⍴bl)⍴ns.emptyLines)⌿+/∧\' '=↑bl)↓¨bl
(mask/bl)←HandleEscapedNewLines mask/bl
leadingBlanks←+/∧\' '=↑bl
drop←{⍵⌊⊃⍵}leadingBlanks
drop↓¨bl
}
FlattenNestedItem←{
item←⍵
1=⍴,item:⊃item
1↓⊃,/' ',¨dlb item
}
∇ (url title)←GetUrlAndTitleFromLink link;noOf
⍝ Takes something like [Link Text](#A BookMark Link "The Title") and returns
⍝ '#a-bookmark-link` `The Title`
⍝ or [APL wiki](http://aplwiki.com "foo")
⍝ 'http://aplwiki.com' 'foo'
url←(link⍳']')↓link
url←(url⍳'(')↓url
url↓⍨←-{⍵⍳')'}⌽url
url←dtb url
((url='\')/url)←'/'
:If '"'=¯1↑url           ⍝ Has it a title?!
:AndIf 2≤'"'+.=url
noOf←1+{+/∧\1=+\⍵='"'}⌽url
title←¯1↓1↓(-noOf)↑url
url←dtb dlb(-noOf)↓url
:Else
title←''
:EndIf
:If 0=+/'://'⍷url         ⍝ Protocol
:AndIf 'mailto:'{⍺≢(⍴,⍺)↑⍵}url ⍝ Is not a "mailto" link
:AndIf '#'≠1⍴url          ⍝ Bookmark
:AndIf ':/'≢2⍴1↓url,'  '  ⍝ Absolute Windows path
:AndIf './'≢2⍴url,'  '    ⍝ Relative path
:AndIf '/'≠1⍴url          ⍝ Absolute UNIX path
url←'http://',url
:EndIf
∇
GetIdFromSpecialAttributes←{
⍝ 'id="foo"' ←→ GetIdFromSpecialAttributes 'class="qwe" id="foo" style="color:red;"'
0∊⍴buff←⊃'\sid="[^"]*."'⎕S(0 1)⊣⍵:''
(ind length)←buff
length↑(ind+1)↓⍵
}
RemoveIdFromSpecialAttributes←{
⍝ 'class="qwe" style="color:red;"' ←→ RemoveIdFromSpecialAttributes 'class="qwe" id="foo" style="color:red;"'
'\sid="[^"]*."'⎕R''⊣⍵
}
∇ r←ns CreateTOC def;lastLevel;level;caption;id;no;bf;nf;co;ff
⍝ def:
⍝ [;1] level
⍝ [;2] caption
⍝ [;3] running no
⍝ [;4] id
r←⊂'<nav id="main_nav">'
:If ns.parms.collapsibleTOC
r,←⊂'<input type="checkbox" id="hide_toc">'
r,←⊂'<label id="hide_toc_label" for="hide_toc"></label>'
:Else
r←⊂'<nav id="main_nav_no_collapse">'
:EndIf
r,←⊂'<div class="toc-container">'
:If ~ns.parms.collapsibleTOC
r,←⊂'<h3>',ns.parms.tocCaption,'</h3>'
:EndIf
r,←⊂'<ul>'
lastLevel←⊃⊃def
bf←(,0)≢,ns.parms.bookmarkLink        ⍝ Bookmark flag
nf←(,0)≢,ns.parms.numberHeaders       ⍝ Numbered flag
co←1                                  ⍝ Count opened lists
ff←1                                  ⍝ "First" flag
:For (level caption no id) :In ↓def
:If lastLevel<level
r,←⊂'<ul>'
co+←1
:ElseIf lastLevel>level
((⍴r)⊃r),←'</li>'
r,←(lastLevel-level)⍴⊂'</ul>',(co>1)/'</li>'
co-←lastLevel-level
:ElseIf lastLevel=level
:AndIf ~ff
((⍴r)⊃r),←'</li>'
:EndIf
caption←⊃ns ProcessInlineMarkUp caption
r,←⊂'<li><a href="#',id,'">',(nf/no,' '),caption,'</a>'
lastLevel←level
ff←0
:EndFor
r,←(0⌈co-1)⍴⊂'</li></ul></li>'
r,←⊂'</ul>'
r,←⊂'</div>'
r,←⊂'</nav>'
∇
RemoveDoubleSlashes←{'//'{⍵/⍨~⍺⍷⍵}'\\'{⍵/⍨~⍺⍷⍵}⍵}
EstablishDefaultHomeFolder←{
p←⍵
⎕NULL≢p.homeFolder:p
this←⍕⎕THIS
p.homeFolder←GetCurrentDir
f←∨/##.FilesAndDirs.Exists¨p.homeFolder∘,¨'/MarkAPL.html' '/MarkAPL_CheatSheet.html'
f:p
p.homeFolder←GetCurrentDir,'/Files'
f←∨/##.FilesAndDirs.Exists¨p.homeFolder∘,¨'/MarkAPL.html' '/MarkAPL_CheatSheet.html'
f:p
home←(⊃¯1↑'.'SplitPath this){6::(⊃⎕RSI)⍎⍺ ⋄ ⍎⍵}¯1↓⊃'.'SplitPath this
f←9≠home.⎕NC this,'.SALT_Data'
f:p⊣p.homeFolder←GetCurrentDir,'/'
sourceFolder←⊃SplitPath home.⍎'MarkAPL.SALT_Data.SourceFile'
f←∨/##.FilesAndDirs.Exists¨sourceFolder∘,¨'/MarkAPL.html' '/MarkAPL_CheatSheet.html'
f:p⊣p.homeFolder←sourceFolder
p.homeFolder←CorrectSlash sourceFolder,'/Files/'
p
}
RemoveAllComments←{
ns←⍵
markdown←ns.markdown
markdown←1↓∊(⎕UCS 10),¨markdown
ind←1+'^\s{0,3}[~`]{3,}\s{0,}({.*?})?\s{0,}$'⎕S 0⍠('Mode' 'M')('DotAll' 1)('EOL' 'LF')⊣markdown
ind,←1+'<pre\b' '</pre>'⎕S 0⍠('Mode' 'M')('DotAll' 1)⊣markdown
ind←ind[⍋ind]
b←(⍴markdown)⍴0
b[ind]←1
b←Between b
b∧←markdown≠⎕UCS 10
markdown[Where b]←' '
b2←'⍝'≠⊃¨(⎕UCS 10)Split markdown
ns.markdown←b2/ns.markdown
ns.lineNumbers←(+\~b2/b2)+b2/ns.lineNumbers
ns
}
∇ cb←MassageCodeBlock(cb noOfBlanks);pc
pc←¯1↓1↓cb                            ⍝ Pure code: without the fences.
:If ' '∧.=⊃,/noOfBlanks↑¨pc           ⍝ We take this as indicator that the pure code has it's own ideas regarding indentation; nothing needs to be done
(¯1↓1↓cb)←noOfBlanks↓¨pc
:EndIf
∇
∇ ns←CompileHelp(filename recompileFlag parms);ps;fn;b
⍝ Called by `Help` and `Reference`.
ns←⍬
parms←EstablishDefaultHomeFolder parms
:If ⎕NULL≡parms.cssURL
parms.cssURL←parms.homeFolder
:EndIf
fn←CorrectSlash parms.homeFolder,'/',filename
:If 0∊⍴parms.inputFilename
parms.inputFilename←(¯4↓fn),'md'
:EndIf
:If 0∊⍴parms.outputFilename
parms.outputFilename←fn
:EndIf
:If |recompileFlag
:If 0=##.FilesAndDirs.Exists parms.inputFilename
6 ⎕SIGNAL⍨'File "',parms.inputFilename,'" not found; set "homeFolder"'
:EndIf
:If 0∊⍴parms.outputFilename
parms.outputFilename←fn
:Else
fn←parms.outputFilename
:EndIf
ns←2⊃parms Markdown2HTML''
:EndIf
:If 0=parms.⎕NC'viewInBrowser'
parms.viewInBrowser←1
:EndIf
∇
∇ to←from CopyTo to;id;value;flag
⍝ ⍺ is typically something like embedded parms while ⍵ are THE parms
:For id :In ' '~¨⍨↓from.⎕NL 2
:If flag←0=to.⎕NC id
value←from.⍎id
:Else
:If flag←¯1≢value←to.⍎id
flag←~0∊⍴value
:EndIf
:EndIf
:If flag
id to.{⍎⍺,'←⍵'}value
:EndIf
:EndFor
∇
MassageFilename←{
CorrectSlash'file:/{2,3}'⎕R''⊣⍵
}
AddAlignStyle←{
⍺←2
(⍺=2)∧'left'≡⍵:''                 ⍝ For <th> ⍺←→1: headers default to center rather than left!
' style="text-align: ',⍵,';"'     ⍝ For "center" and "right"
}
∇ toc←CollectToc ns;ind;buff;level;caption;IDs
toc←⍬
:If ~0∊⍴ind←'<a .*href=".*" class="autoheader_anchor".*>'⎕S 2⍠('Greedy' 0)⊣ns.html
level←{⍎1↑2↓⊃⍵∘GetHitsFromRegExSearch¨'<h[1-6].*>'⎕S 0 1⍠('Greedy' 0)⊣⍵}¨ns.html[2+ind]
caption←{1↓¨(-1+⍴'<hx>')↓¨⍵ GetHitsFromRegExSearch¨{⊃'\>.*\</h[1-6]>'⎕S 0 1⍠('Greedy' 0)⊣⍵}¨⍵}ns.html[2+ind]
caption←{0∊⍴⍵:⍵ ⋄ '&lt;' '&gt;' '&amp;' '<code.*>' '</code>'⎕R('<' '>' '\&' '`' '`')⍠('Greedy' 0)('Mode' 'L')⊣⍵}¨caption
IDs←{⍵{{⍵↑⍨¯1+⍵⍳'"'}((⍴'id="')+⍵)↓⍺}¨'id="(.*)"'⎕S 0⍠('Greedy' 0)⊣⍵}ns.html[1+ind]
toc←↓(level,[1.5]caption),IDs
:EndIf
∇
GetHitsFromRegExSearch←{
⍝ ⍺ is a text string to be indexed.
⍝ ⍵ is a two-element vector as returned by `⎕S 0 1`: start and length
⍵[2]↑⍵[1]↓⍺
}
∇ r←GetEmptyLines md
⍝ Returns vector of Booleans for those lines that are empty.
⍝ Note that empty lines within code blocks are **ignored**!
r←0=⊃∘⍴¨md
r∧←~WhereAreCodeBlocks md
∇
∇ r←indendations GetCodeBlockFrom list;fence;pattern;bool;noOf
r←''
fence←⊃(⊃list)~' '
:If fence∊'~`'
pattern←'^\s{0,',(⍕indendations),'}',fence,'{3,}'
:AndIf ~0∊⍴pattern ⎕S 0⊣⊃list
:AndIf 0<+/bool←pattern∘{⊃⍴⍺ ⎕S 0⍠('Mode' 'L')('Greedy' 0)⊣⍵}¨1↓list
noOf←2++/∧\~bool
r←noOf↑list
:EndIf
∇
∇ html←ProcessLeanPubCodeEmphasizing html;patterns;replaceBy;hits;bool
⍝ Replaces `leanpub-start-insert` by an opening <span> and `leanpub-start-end` by a closing </span>.
⍝ Used to emphasize changes in the code with CSS.
⍝ html←'leanpub-start-insert' 'leanpub-end-insert'⎕R'<span class="leanpub_code">' '</span>'⍠('Greedy' 0)('IC' 1)⊣html
patterns←'^\\leanpub-start-insert' '^\\leanpub-end-insert' '^leanpub-start-insert' '^leanpub-end-insert'
replaceBy←'leanpub-start-insert' 'leanpub-end-insert' '<span class="leanpub_code">' '</span>'
html←patterns ⎕R replaceBy⍠('Greedy' 0)('IC' 1)('Mode' 'L')⊣html
html←1↓∊(⎕UCS 13),¨html
hits←↑'<span class="leanpub_code">' '</span>'⎕S 0 1 3⍠('Greedy' 0)('IC' 1)('Mode' 'M')⊣html
:If ~0∊⍴hits
⍝ Here we remove the CR between `leanpup-*-insert` and the following line
bool←(⍴html)⍴1
bool[1++/hits[;1 2]]←0
bool←(~bool)⍲(~bool)\(⎕UCS 13)=(~bool)/html  ⍝ Only when it's a CR: the last one does not have one!
html←bool/html
:EndIf
html←(⎕UCS 13)Split html
⍝Done
∇
∇ ns←parms ProcessLeanPubExtensions ns;flag
⍝ Replaces `A> ` and alikes against a <div> that is used to give it an outlook similar to what LeanPub is doing.
⍝ When this functions runs we have not yet established all embedded parameters from the Markdown, and we can't
⍝ at this stage - too early. But we cannot process the LeanPub extensions later either, so we have to look up for
⍝ any embedded parameter `leanpubExtensions` ourself.
:If 0=flag←parms.leanpubExtensions
:If 0=parms.ignoreEmbeddedParms
flag←(,1)≡,'leanpubExtensions'LookForEmbeddedParm RemoveLeanpubEncoding ns.markdown
:EndIf
:EndIf
:If flag
ns←parms ProcessLeanPubExtensions_ ns
:EndIf
∇
∇ ns←parms ProcessLeanPubExtensions_ ns;leanPubExtensions;extension;isNotCodeBlock;bool;start;lengths;i;ind;noOf;openDiv;body;html;img;after;report
leanPubExtensions←'AWTEIQDX'
:For extension :In leanPubExtensions
isNotCodeBlock←~WhereAreCodeBlocks ns.markdown
:If 0<+/bool←isNotCodeBlock\(3↑¨isNotCodeBlock/ns.markdown)≡¨⊂extension,'> '
:AndIf ~0∊⍴start←Where 0 1⍷bool
lengths←,+/¨bool{⎕ML←3 ⋄ ⍺⊂⍵}bool
:For i :In ⍳⍴start
ind←i⊃start
:If 0∊⍴ind⊃ns.markdown            ⍝ The line before must be empty
noOf←i⊃lengths
after←1+ind+noOf
:If 0∊⍴after⊃ns.markdown      ⍝ The line after must be empty
openDiv←⊂'<div class="leanpub',((extension≡'A')/'_A'),'">'
body←3↓¨ns.markdown[ind+⍳lengths[i]]
(html report)←ConvertLeanpubExtension2Markdown body
:If extension≠'A'
img←'<img src="',(parms LeanPubImageFor extension),'" alt="',(LeanPubAltTextFor extension),'">'
html←img'<div>',html,⊂'</div>'
:EndIf
html←openDiv,html,⊂'</div>'
ns.markdown←(ind↑ns.markdown),html,(ind+noOf)↓ns.markdown
ns.lineNumbers←(ind↑ns.lineNumbers),((⍴html)⍴⊂(1+ind),ind+noOf),(ind+noOf)↓ns.lineNumbers
:If ~0∊⍴report
ns.report,←((ind+1)⊃ns.lineNumbers)∘{i←-(⌽⍵)⍳' ' ⋄ (i↓⍵),' ',({1=⍴,⍵:⍕⍵ ⋄ ⊃{⍺,'-',⍵}/⍕¨⍵}⍺),')'}¨report
:EndIf
(i↓start)←(i↓start)+(⍴html)-noOf
:EndIf
:EndIf
:EndFor
:EndIf
:EndFor
∇
∇ (html report)←ConvertLeanpubExtension2Markdown markdown;parms;ns
⍝ `markdown` comes from an aside (= LeanPub extension like `A> `).
⍝ This requires to be converted to HTML with MarkAPL but without...
⍝ * header anchors
⍝ * numbering headers
⍝ etc.
parms←CreateParms
parms.numberHeaders←0
parms.bookmarkLink←0
parms.createFullHtmlPage←0
parms.verbose←0
parms.ignoreEmbeddedParms←1
parms.div_h_tag←0
(html ns)←parms Markdown2HTML markdown
html←ConvertH1AndH2HeadersToH3 html
report←ns.report
⍝Done
∇
ConvertH1AndH2HeadersToH3←{
⍝ This is called on code blocks within any Asid (LeanPub extension).
⍝ Since screen readers read out any H1 and H2 tags we convert those to h3.
html←⍵
html←'<h1>' '<h2>'⎕R'<h3>'⊣html
'</h1>' '</h2>'⎕R'</h3>'⊣html
}
LeanPubImageFor←{
icons←'error.png' 'discussion.png' 'information.png' 'warning.png' 'question.png' 'tip.png' 'exercise.png'
extension←'ediwqtx'
icon←(extension⍳Lowercase ⍵)⊃icons
parms←⍺
parms.leanpubIconsUrl,icon
}
LeanPubAltTextFor←{
altText←'Error' 'Discussion' 'Information' 'Warning' 'Question' 'Tip' 'Exercise'
extension←'ediwqtx'
(extension⍳Lowercase ⍵)⊃altText
}
ProcessImageUrl←{
base←⍵
0∊⍴base:⍺
url←⍺
base,(('/'≠¯1↑base)/'/'),url
}
∇ bool←WhereAreCodeBlocks md;b1;b2;fences;first
md←{⍵↓⍨3⌊+/∧\' '=⍵}¨md
b1←'~'IsFence¨md
b2←'`'IsFence¨md
:If 0=+/b1+b2                     ⍝ No code blocks at all: done!
bool←(⍴md)⍴0
:Else
:If >/b1 b2⍳¨1
(b2 b1)←b1 b2
:EndIf
b1←Between b1
(b1/b2)←0
b2←Between b2
bool←b1∨b2
:Return
fences←'~`'
first←>/⌊/¨Where¨b1 b2,¨1     ⍝ 0=~, 1=`
:If 0<+/b1
b1←b1\(fences[first+1])CheckForCodeBlocks b1/md
:EndIf
:If 0<+/b2
b2←b2\(fences[first+1])CheckForCodeBlocks b2/md
:EndIf
:If 0∨.≠2|(+/b1)(+/b2)        ⍝ If ~ or ` have on odd number of opening/closing then special treatment is needed
:If first
(¯1↑b1)←1
:Else
(¯1↑b2)←1
:EndIf
:EndIf
bool←Between b1∨b2
:EndIf
∇
IsFence←{
⍝ ⍺ must be either ~ or `
⍝ Returns 1 in case ⍵ is a valid fence for a code block.
md←⍵
fence←⍺
pattern←'^ {0,3}',fence,'{3,}'
0∊⍴pattern ⎕S 0⍠('Greedy' 0)('Mode' 'L')⊣md:0
remains←pattern ⎕R''⍠('Greedy' 0)('Mode' 'L')⊣md
~fence∊{⍵↓⍨+/∧\fence=⍵}remains
}
LookForEmbeddedParm←{
markdown←⍵
valueName←⍺
searchFor←'[parm]:'
0=+/bool←searchFor∘≡¨(⍴searchFor)↑¨markdown:''
buff←(⍴searchFor)↓¨bool/markdown
0=+/bool←valueName∘≡¨(⍴valueName)↑¨buff:''
buff←(⍴searchFor)↓(bool⍳1)⊃markdown
valueName≢(⍴valueName)↑buff:''
value←(1+⍴valueName)↓buff
''''=1⍴value:1↓¯1↓value
⊃(//)⎕VFI value
}
∇ flag←CheckForHtmlBlock(markdown emptyLines topOfDocument);row
⍝ Returns 1 if `markdown` starts with an HTML block and 0 otherwise
flag←0
:If topOfDocument
:OrIf ⊃⍴'^<pre.*>' '^<script.*>' '^<style.*>'⎕S 0⍠('Greedy' 0)⊣⊃markdown  ⍝ <pre>, <script>, <style> don't require empty lines around them.
:OrIf ∆LastLineWasEmpty∨(⊃emptyLines)∧'<'=1↑⊃⊃1↓markdown                  ⍝ But it MAY have a blank leading line anyway!
row←⊃(⊃emptyLines)↓markdown
flag←'<'=1⍴row
:If flag
flag←0∊⍴'<([a-zA-Z0-9]){3,5}://'⎕S 0⊣row                          ⍝ Tell implicit link (like <http://aplwiki.com>) from an HTML block!
:EndIf
:EndIf
∇
RemoveLeanpubEncoding←{
0∊⍴'^ *{:: encoding=".*$'⎕S 0⊣⊃⍵:⍵
1↓⍵
}
IsolateLink←{
txt←⍵
mask←⍺
0=+/b←']('⍷mask\mask/txt:⍬
link←⌽(b⍳1)↑txt
(⍴link)-1++/∧\~(+\link='[')=+\link=']'
}
:EndClass
﻿:NameSpace SMTPMail
⍝ Based on original work by Conrad Hoesle-Kienzlen in 1999
⍝ Updated by Morten Kromberg to use UTF-8 text, 2009
⍝ Updated by Brian Becker in jan2011 to make compatible with Unix and Unicode
CRLF←⎕UCS 13 10
(⎕IO ⎕ML)←1
∇ R←DTB A
→(' '≠¯1↑R←,A)⍴0
R←(1-(' '≠⌽R)⍳1)↓R
∇
∇ rc←boundary
⍝p Create a unique boundary designator
⍝o CHK 31.05.1999 <chk@hoesle-kienzlen.de>
⍝d boundaries are used to separate mail text from attachments
rc←(6⍴'-'),(,'ZI4'⎕FMT ⎕TS),'.APL'
∇
∇ rc←cmd cmd;i
⍝p Send a command to an smtp server and retrieve answer
⍝o CHK 31.05.1999 <chk@hoesle-kienzlen.de>
⍝d cmd: smtp command, or mail body, or empty vector
⍝d      If cmd is an empty vector, the function returns a pending answer
⍝d      from the server
⍝d rc : A 3-element vector with:
⍝d      [1]=0 if OK, ≠0 if error
⍝d      [2]=status message starting with a 3-digit status number
⍝d      [3]=status explanation or data
⍝g
⍝d Valid commands are:
⍝d Name Parameter      Description & return codes (S=success, E=error)
⍝d ---- -------------  ------------------------------------------------
⍝d HELO <domain>       Make yourself known to the server (use smtp_logon)
⍝d                      S: 250; E: 421 500 501 504
⍝d EHLO <domain>       Like HELO but request extended smtp services
⍝d                      S: 250; E: 421 500 501 504
⍝d                      NOTE: apart from code 250, the server answers with
⍝d                            a cr/lf delimited list of supported commands
⍝d MAIL FROM:<sender>  Start a new mail, <sender> is your mail address
⍝d                      S: 250; E: 421 451 452 500 501 552
⍝d RCPT TO:<receiver>  Identify the recipients, up to 100 are allowed
⍝d                      S: 250 251; E: 421 450 451 452 500 501 503 550-553
⍝d DATA                Initialize sending mail body
⍝d                      S: 354; E: 451 452 552 554
⍝d <maildata>          Send the mail body (use smtp_stuff to prepare it)
⍝d                      NOTE: there is no response until "end-of-mail" is sent.
⍝d .<cr/lf>            "end-of-mail" command, a line with only a dot and cr/lf
⍝d                      S: 250; E: 421 451 500 501 503 554
⍝d RSET                Cancel the mail just sent
⍝d                      S: 250; E: 421 500 501 504
⍝d SEND FROM:<sender>  Obsolete sendmail command, use MAIL instead
⍝d SOML FROM:<sender>  Obsolete send-or-mail command, use MAIL instead
⍝d SAML FROM:<sender>  Obsolete send-and-mail command, use MAIL instead
⍝d VRFY <string>       Verify a recipients mail address (often disabled)
⍝d                      S: 250 251; E: 421 500 501 502 504 550 551 553
⍝d EXPN <string>       Expand a mailing list (often disabled)
⍝d                      S: 250; E: 421 500 501 502 504 550
⍝d HELP [<string>]     Return a help message, optionally followed by a command
⍝d                      S: 211 214; E: 421 500 501 502 504
⍝d NOOP                Returns success or error
⍝d                      S: 250; E: 421 500
⍝d QUIT                End the smtp session (use smtp_logoff)
⍝d                      S: 221; E: 500
⍝d TURN                Reverse the roles of client and server (DON't USE!)
⍝d                      S: 250; E: 500 502 503
⍝d
⍝d Meaning of the return codes:
⍝d NOTE: If the 3-digit number is followed by "-", there is more data to follow
⍝d 211 System status, or system help reply
⍝d 214 Help message
⍝d 220 <domain> Service ready
⍝d 221 <domain> Service closing transmission channel
⍝d 250 Requested mail action okay, completed
⍝d 251 User not local; will forward to <forward-path> (this is not an error!)
⍝d 354 Start mail input; end with <CRLF>.<CRLF>
⍝d 421 <domain> Service not available, closing transmission channel
⍝d 450 Requested mail action not taken: mailbox unavailable [E.g., mailbox busy]
⍝d 451 Requested action aborted: local error in processing
⍝d 452 Requested action not taken: insufficient system storage
⍝d 500 Syntax error, command unrecognized
⍝d 501 Syntax error in parameters or arguments
⍝d 502 Command not implemented
⍝d 503 Bad sequence of commands
⍝d 504 Command parameter not implemented
⍝d 550 Requested action not taken: mailbox unavailable
⍝d 551 User not local; please try <forward-path>
⍝d 552 Requested mail action aborted: exceeded storage allocation
⍝d 553 Requested action not taken: mailbox name not allowed (typo?)
⍝d 555 Only used by this program to indicate a special error condition
:If 9=⎕NC'smtp'                    ⍝ if the socket exists
smtp.OK←0                        ⍝ set reply to "not complete"
'.'⎕WS'Cursor' 1                 ⍝ set cursor to hourglass
→(0=⍴cmd)/Read_Answer            ⍝ skip sending if no command given
'smtp'⎕WS'Data' ''               ⍝ empty response buffer
2 ⎕NQ'smtp' 'TCPSend'cmd         ⍝ send command to the server
2 ⎕NQ'smtp' 'TCPSend'CRLF        ⍝ send cr/lf (has to be sent separate)
Read_Answer:
rc←⎕DL 0.1                       ⍝ give it a chance to reply
:If 0=smtp.OK                    ⍝ reply is not yet complete
'smtp.tio'⎕WC'Timer' 60000('Event' 'Timer' 1)  ⍝ timeout is 60 secs
rc←⎕DQ'smtp' 'smtp.tio'        ⍝ wait for an event on either
⎕EX'smtp.tio'
:EndIf
'.'⎕WS'Cursor' ''                ⍝ set cursor back to standard
:If 0=⎕NC'smtp' ⋄ rc←1 'socket closed' '' ⋄ →0 ⋄ :EndIf
:If ('smtp.tio'≡⊃rc)∧0=smtp.OK   ⍝ timeout happened, but why?
i←'smtp'⎕WG'Data'              ⍝ set by tcp_error?
:If 'TCP/IP'∧.=6↑i             ⍝ if a TCP/IP error happened
rc←'555 ',i,' at SMTP command ',cmd,CRLF
:Else
rc←'555 timeout at SMTP command ',cmd,CRLF
:EndIf
:Else
rc←'smtp'⎕WG'Data'             ⍝ read response buffer
:EndIf
:Else                              ⍝ if the socket does not exist
rc←'555 SMTP server not connected',CRLF
:EndIf
rc←((⊃rc)∊'45')(¯2↓rc)''           ⍝ check for error and return
∇
∇ rc←logoff;x
⍝p Log out from an SMTP mail server
⍝o CHK 31.05.1999  <chk@hoesle-kienzlen.de>
⍝d rc  : the answer from the server, or an error text
⍝d       positive answers from the server start with the
⍝d       characters '250 ', errors start with '4xx' or '5xx'
⍝d NOTE: Mails will not really be sent before this command has completed
→(9≠⎕NC'smtp')/0,⍴rc←1 '555 SMTP server not connected' ''
:If 'Closed'≢'smtp'⎕WG'CurrentState'
rc←(cmd'QUIT')~CRLF  ⍝ tell the server we are done
:EndIf
⎕EX'smtp'                   ⍝ erase the socket
∇
∇ rc←{org}logon user;sender;dom;rpl;x
⍝p Log on to an SMTP mail server.
⍝o CHK 31.05.1999  <chk@hoesle-kienzlen.de>
⍝d user : the users mail-id and domain, e.g. <conrad@hoesle-kienzlen.de>,
⍝d        may optionally be preceeded by the real name of the user, enclosed
⍝d        in apostrophes: "Conrad Hoesle-Kienzlen" <conrad@hoesle-kienzlen.de>
⍝d        If user contains a slash and after it a second mail address, this
⍝d        will be used as a reply-to address: 'aaa@mail1.com / bbb@mail2.com'
⍝d org  : an optional character string containing the user's organization
⍝d rc   : answer of the SMTP mail server
⍝d NOTE: a connection to the ISP must already be established
⍝d The function needs two global variables:
⍝g smtp_SERVERID - name or IP address of the mail server
⍝g smtp_PORT     - the port number of the mailserver, usually 25
⍝d The function sets the global variables:
⍝g smtp_SENDER   - the mail address of the sender
⍝g smtp_USER     - the complete description of the sender
⍝g smtp_USERORG  - the organization of the sender (optional)
⍝g smtp_REPLYTO  - the reply-to address of the sender
rpl←''                                 ⍝ initialization
→(2=⎕NC'org')/⎕LC+1 ⋄ org←''           ⍝ default organization to empty
:If '/'∊user                           ⍝ is a reply-to address given?
rpl←'<',(∆addr(x←user⍳'/')↓user),'>' ⍝ extract reply-to address
user←(x-1)↑user                      ⍝ drop reply-to from "user"
:EndIf
sender←'<',(∆addr user),'>'            ⍝ mail address of sender
dom←((sender⍳'@')↓sender)~'<>'         ⍝ extract sender's domain
→(0≠⍴rpl)/⎕LC+1 ⋄ rpl←sender           ⍝ default rpl to sender's address
⎕EX'smtp'                              ⍝ erase the socket if it exists
x←⊂'RemoteAddrName'SERVERID       ⍝ prepare socket arguments
x←x,⊂'RemotePort'PORT             ⍝ prepare socket arguments
x←x,⊂'Event' 'Create' '⍎ smtp.OK←0 ⋄ smtp.end←CRLF'
x←x,⊂'Event' 'TCPClose' 'tcp_close'    ⍝ react to the close event
x←x,⊂'Event' 'TCPError' 'tcp_error'    ⍝ display TCP/IP error message
x←x,⊂'Event' 'TCPRecv' 'receive'  ⍝ read answer from server
x←x,⊂'Event' 1025 1                    ⍝ terminate ⎕DQ on the socket
'smtp'⎕WC(⊂'TCPSocket'),x              ⍝ create socket & connect to SMTP
→(0≠⊃rc←cmd'')/0                  ⍝ read login message from server
→(0≠⊃rc←cmd'HELO ',dom)/0         ⍝ log on user domain
SENDER←sender                     ⍝ needed for sending mail
USER←user                         ⍝ the complete user description
USERORG←org                       ⍝ store optional organization
REPLYTO←rpl                       ⍝ store reply-to address
∇
∇ receive msg;m;x
⍝p Callback to read answer from SMTP server
⍝o CHK 31.05.1999  <chk@hoesle-kienzlen.de>
⍝d msg[1]: Socket name
⍝d msg[2]: Event name
⍝d msg[3]: Data
⍝d msg[4]: Sender's IP address (not used)
⍝d msg[5]: Sender's port number (not used)
⍝d NOTE  : SMTP responses start with a 3-digit status code (see smtp_cmd)
⍝d         and are followed by a - if there is more data, otherwise a blank
'smtp'⎕WS'Data'(('smtp'⎕WG'Data'),m←3⊃msg) ⍝ add new data to receive buffer
x←∨/CRLF⍷m                                 ⍝ cr/lf is the end-of-line signal
x←x∧~'-'=4⊃m                               ⍝ but if - is present, there is more
→(~smtp.OK←x)/0                            ⍝ smtp.OK is 1 if data is complete
⎕NQ'smtp' 1025                             ⍝ terminate ⎕DQ on smtp
∇
∇ rc←reset
⍝p Send a RSET command to the SMTP mail account
⍝o CHK 31.05.1999  <chk@hoesle-kienzlen.de>
⍝d rc  : the answer of the server, or an error text
⍝d       positive answers from the server start with the
⍝d       characters '250', errors start with '4xx' or '5xx'
⍝d NOTE: this command cancels all mail that has been sent previousely
⍝d       within the same session (since smtp_logon)
rc←cmd'RSET'
∇
∇ rc←to sendmail data;txt;x;log;typ;bnd;nam;att
⍝p Send a mail to an SMTP mail server
⍝o CHK 31.05.1999  <chk@hoesle-kienzlen.de>
⍝d to   : A matrix or vector of vectors with the addresses of the recipients
⍝d      : e.g. 'To: <BGates@microsoft.com>' or 'CC: <hugo.miller@hotmail.com>
⍝d        Addresses must start with To: CC: or BCC: followed by a blank.
⍝d        NOTE: a maximum of 100 addresses is supported!
⍝d data : a vector of vectors, at least 2 elements must be there:
⍝d        The first element is a string with the subject of the message
⍝d        The second element is the body of the message, prepared with
⍝d        embedded cr/lf and dot-stuffing (use smtp_stuff),
⍝d        optionally followed by more strings containing attachments.
⍝d        If attachments are present, they themselves must consist of a
⍝d        string of two strings strings each, the first being the name of the
⍝d        attachment in the form of a filename (8.3 notation, to be save),
⍝d        the second string the attachment proper, Base64-encoded (use ∆b64enc)
⍝d        and interspersed with cr/lf every 72 characters (use smtp_stuff)
⍝d        An example of the data argument with one attachment:
⍝d        '...' smpt_sendmail 'Testmail' '..text..' ('TESTATT.ZIP' '..zipdata..')
⍝d rc[1]: numeric error code, 0=OK ≠0=error
⍝d rc[2]: Last answer of the SMTP mail server indicating success or failure
⍝d rc[3]: A log with all returns of the mail sending process
⍝d NOTE : A connection to the ISP must already be established and the user
⍝d        must be logged on to it via smtp_logon
⍝d The function needs the global variables (set by smtp_logon):
⍝g smtp_SENDER  - needed for sending mail
⍝g smtp_USER    - the complete user description (may be empty)
⍝g smtp_USERORG - user organization (may be empty)
⍝g smtp_REPLYTO - the sender's reply-to address
log←''                             ⍝ prepare mail log
→(~(1=≡to)∧2=⍴⍴to)/⎕LC+1 ⋄ to←∆dtb¨⊂[2]to ⍝ if matrix, make enclosed vector
→(2=≡to)/⎕LC+1 ⋄ to←,⊂to           ⍝ to must be enclosed
→(2≤≡data)/⎕LC+1 ⋄ data←''data     ⍝ data must be enclosed
→(2≤⍴data)/⎕LC+1 ⋄ data←(⊂''),data ⍝ data must have at least 2 elements
⍝------------------------------------ prepare the mail header
txt←'Date: ',∆timestamp,CRLF       ⍝ Internet-conform date first
txt←txt,'From: ',USER,CRLF    ⍝ the user's name & mail address
x←REPLYTO
txt←txt,(0<⍴x)/'Reply-To: ',x,CRLF ⍝ the reply-to address, if given
x←USERORG
txt←txt,(0<⍴x)/'Organization: ',x,CRLF  ⍝ the organization, if given
txt←txt,'X-Mailer: CHK-Mail 1.0 / Dyalog APL/W',CRLF
txt←txt,'MIME-Version: 1.0',CRLF
x←('B'≠⊃¨to)/to←,to                ⍝ remove BCC's from mail header
txt←txt,∊x,¨⊂CRLF                  ⍝ the recipients without BCC's
txt←txt,'Subject: ',(⊃data),CRLF   ⍝ the message subject
bnd←boundary                  ⍝ construct a boundary for attachments
⍝------------------------------------ process mail and attachments
typ←2<⍴data                        ⍝ typ=1 if attachments present
→(~typ)/Simple_Mail                ⍝ if no attachments, process mail
x←'Content-Type: multipart/mixed;' ⍝ a mail with attachments
x←x,' boundary="',(2↓bnd),'"',CRLF ⍝ add the boundary definition
x←x,CRLF,'This is a multi-part message in MIME format.',CRLF
txt←txt,x,bnd,CRLF                 ⍝ insert the boundary for the simple mail
⍝----------------------------------- simple mail text
Simple_Mail:
txt←txt,'Content-Type: text/plain; charset=utf-8',CRLF ⍝ normal text
txt←txt,'Content-Transfer-Encoding: 8bit',CRLF ⍝ standard encoding
txt←txt,CRLF                       ⍝ single CRLF separates header from body
txt←txt,⎕UCS'UTF-8'⎕UCS 2⊃data                     ⍝ add the message text
txt←txt,typ/bnd,CRLF               ⍝ boundary separates text from attachments
data←2↓data                        ⍝ drop subject and mail text
→(~typ)/End_Attach                 ⍝ no attachments? then send it off
⍝----------------------------------- attachment processing
:While 0≠⍴data
x←⊃data                          ⍝ process one attachment
→(2=≡x)/⎕LC+1 ⋄ x←''x            ⍝ should be name and attachment
(nam att)←x                      ⍝ split the two parts
:If 0=⍴nam                       ⍝ no name specified?
nam←,'4ZI2,<.>,ZI3'⎕FMT 1 5⍴2↓⎕TS  ⍝ make an arbitrary one
:EndIf
x←'Content-Type: application/octet-stream; name="',nam,'"',CRLF
x←x,'Content-Transfer-Encoding: base64',CRLF
x←x,'Content-Disposition: attachment; filename="',nam,'"'
txt←txt,x,CRLF,CRLF              ⍝ add attachment header, end with 2 cr/lf
txt←txt,att                      ⍝ add attachment proper
x←(0=⍴1↓data)/'--'               ⍝ add -- after boundary, if it's the end
txt←txt,bnd,x,CRLF               ⍝ boundary separator again
data←1↓data                      ⍝ process next attachment
:EndWhile
End_Attach:
txt←txt,CRLF,'.'                   ⍝ single dot ends data input for SMTP
⍝----------------------------------- send the mail recipients and sender
rc←cmd'MAIL FROM: ',SENDER  ⍝ tell the server the sender's address
→(0≠⊃rc)/Err_SMTP
log←log,⊂(2⊃rc)~CRLF               ⍝ save the returncode in the log
⍝----------------------------------- process each recipient
:While 0≠⍴to
x←∆addr⊃to                       ⍝ extract pure mail address
rc←cmd'RCPT TO: <',x,'>'    ⍝ tell the server the recipient's address
log←log,⊂(2⊃rc)~CRLF             ⍝ save the returncode in the log
to←1↓to                          ⍝ drop processed recipient
:EndWhile
⍝----------------------------------- send the actual data, mail and attachments
rc←cmd'DATA'                  ⍝ tell the server that the mail data follows
→(0≠⊃rc)/Err_SMTP
rc←cmd txt                    ⍝ send all of the mail text
→(0≠⊃rc)/Err_SMTP
log←log,⊂(2⊃rc)~CRLF               ⍝ save the returncode in the log
rc←0(2⊃rc~CRLF)log                 ⍝ return last answer and log
→0
⍝----------------------------------- error handling
Err_SMTP:
log←log,⊂2⊃rc~CRLF                 ⍝ save the last returncode in the log
log←log,⊂(2⊃cmd'RSET')~CRLF   ⍝ clear last message (if any)
rc←1(2⊃rc~CRLF)log                 ⍝ return last answer and log
∇
∇ rc←{len}stuff mat;x;y
⍝p Convert a text matrix to a vector with embedded cr/lf plus dot-stuffing
⍝o CHK 31.05.1999 <chk@hoesle-kienzlen.de>
⍝d mat : A text matrix or vector intended to be sent as mail through SMTP
⍝d len : the maximum line length, excluding cr/lf line ends. Defaults to 72,
⍝d       as 74 is a safe line length to transmit through SMTP
⍝d rc  : A string with cr/lf every len characters and dot-stuffing
⍝d NOTE: It is safe to send a Base64-encoded string through this function,
⍝d       as those strings do not contain any dots. However, the function does
⍝d       not work well if there are cr/lf already present in the input.
⍝d Dot-Stuffing: The end of an SMTP mail text is indicated by transmitting
⍝d               a line with a single dot. This means, that the original
⍝d               mail text must not contain a single dot on a line by itself.
⍝d               To prevent this, every line that starts with a dot get's
⍝d               preceeded with a second dot, which will be removed by the
⍝d               recipients mail client. See pop3_unstuff, the reverse function.
→(2=⎕NC'len')/⎕LC+1 ⋄ len←72    ⍝ default line length, if not given
→(~(1=⍴⍴mat)∧2>≡mat)/⎕LC+1 ⋄ mat←(1,⍴mat)⍴mat ⍝ if string, make 1-row matrix
mat←(DTB¨⊂[2]mat),¨⊂CRLF        ⍝ enclose, remove trailing blanks, add crlf
rc←''                           ⍝ prepare result buffer
Stuff_Loop:
→((2+len)≥⍴x←⊃mat)/OK_Length    ⍝ is line length ≤ len characters?
(x y)←((len↑x),CRLF)(len↓x)     ⍝ split line at len character, add cr/lf
mat←''y,(1↓mat)                 ⍝ put rest back on input buffer
OK_Length:
x←(('.'=⊃x)/'.'),x              ⍝ dot-stuffing for start of line
rc←rc,x                         ⍝ one line done
→(0<⍴mat←1↓mat)/Stuff_Loop
∇
∇ r←tcp_close msg
r←1
∇
∇ r←tcp_error msg
⎕EX 1⊃msg
r←0
∇
∇ rc←∆addr adr;i;del
⍝p extract the mail address from a string
⍝o CHK 10.07.1999 <chk@hoesle-kienzlen.de>
rc←''
del←'∧∘"§$%&/\()=?`´+*#,<>|;~ ''' ⍝ delimiter characters
i←adr⍳'@'                         ⍝ look for the @ character
→(i>⍴adr)/0                       ⍝ exit if not found
rc←(adr∊del)/⍳⍴adr                ⍝ look for delimiter characters
rc←0,rc,1+⍴adr                    ⍝ start & end are delimiters as well
rc←(¯1↑(i>rc)/rc),⊃(i<rc)/rc      ⍝ nearest delimiters surrounding @
rc←(⊃rc)↓(¯1+2⊃rc)↑adr            ⍝ everything between delimiters
∇
∇ rc←∆b64dec txt;⎕IO;p
⍝p Decode messages which are encoded in Base64 (MIME)
⍝o CHK 31.05.1999 <chk@hoesle-kienzlen.de>
⍝d NOTE: for an explanation of base64 see function ∆b64enc
⎕IO←0              ⍝ N.B. ⎕IO 0
⍝ the base 64 alfabet (= is the padding character):
rc←'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
txt←(txt∊rc)/txt       ⍝ process only BASE64 characters
p←-6×+/txt='='         ⍝ the number of padding bits
⍝ decode every 6 bits of the BASE64 text into ⎕AV:
rc←p↓,⍉(6⍴2)⊤rc⍳txt    ⍝ convert index to 6-bit binary
rc←⍉((⌊(⍴rc)÷8),8)⍴rc  ⍝ make chunks of 8 bits
rc←⎕UCS[2⊥rc]          ⍝ re-convert to index into ⎕AV
∇
∇ rc←∆b64enc txt;⎕IO;p
⍝p Encode messages into Base64 (MIME)
⍝o CHK 31.05.1999 <chk@hoesle-kienzlen.de>
⍝d How does base64 work? The purpose of the base64 algorithm is to
⍝d convert all 256 characters of the character set into the 64 characters
⍝d shown below, as those characters are common on all possible machines
⍝d through wich a mail message can pass on it's way through the Internet.
⍝d To do this, every 24 bits (3 8-bit characters) are split into 4 6-bit
⍝d chunks (=24 bits again). Those 6-bit chunks are used as an index into
⍝d the base64 alfabet. If the message does not contain a number of
⍝d characters divisible by 3, "=" characters are appended as padding after
⍝d encoding, to help the decoding function do it's work.
⎕IO←0                  ⍝ N.B.  ⎕IO 0!
⎕SIGNAL(80≠⎕DR txt)/92
⍝ the base 64 alfabet (= is the padding character):
rc←'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
⍝ encode the text into BASE64 characters:
p←(3×⌈(⍴txt)÷3)-⍴txt            ⍝ number of padding characters
txt←,⍉(8⍴2)⊤⎕UCS txt            ⍝ convert to 8-bit binary
txt←2⊥⍉((⌈(⍴txt)÷6),6)⍴txt,5⍴0  ⍝ re-convert every 6 bits to decimal
rc←(rc,'=')[txt,p⍴64]           ⍝ index into BASE64 alfabet (+ padding)
∇
∇ rc←∆timestamp;time;day;mon;s;x;LOCTIME;TIMEZONE;isWin;isUnicode;twid
⍝p returns an internet-conforming (RFC 2822) timestamp
⍝o CHK 31.05.1999 <chk@hoesle-kienzlen.de>
⍝  updated 11jan11 BPB for Unicode and Unix compatibility
isWin←'Win'≡3↑⊃'.'⎕WG'APLVersion'
:If isWin
isUnicode←80=⎕DR'A'
twid←64 32[1+isUnicode] ⍝ set width for text elements based on unicode or not
'LOCTIME'⎕NA'KERNEL32.C32|GetLocalTime >{I2[8]}' ⍝ associate GetLocalTime function
'TIMEZONE'⎕NA'U4 KERNEL32.C32|GetTimeZoneInformation >{I4 T[',(⍕twid),'] {I2[8]} I4 T[',(⍕twid),'] {I2[8]} I4}' ⍝ associate GetTimeZone function
⍝ prepare values for time formatting
day←'Sun,' 'Mon,' 'Tue,' 'Wed,' 'Thu,' 'Fri,' 'Sat,'
mon←'Jan ' 'Feb ' 'Mar ' 'Apr ' 'May ' 'Jun ' 'Jul ' 'Aug ' 'Sep ' 'Oct ' 'Nov ' 'Dec '
⍝ read the local time and format to Internet standard
time←⊃LOCTIME⊂8⍴1000
rc←(1+time[3])⊃day
rc←rc,,'< >,ZI2,< >'⎕FMT time[4]
rc←rc,time[2]⊃mon
rc←rc,,'I4,< >,ZI2,<:>,ZI2,<:>,ZI2,< >'⎕FMT 1 4⍴time[1 5 6 7]
⍝ call timezone function and calculate offset from GMT
x←TIMEZONE⊂0(twid⍴' ')(8⍴0)0(twid⍴' ')(8⍴0)0
x←(⊃x),2⊃x
s←'+-'[1+0>x←(-2⊃x)+-x[(5 8)[⊃x]]]
rc←rc,s,,'ZI4,< (GMT)>'⎕FMT|100×x÷60
:Else
rc←(1⊃⎕SH'date -R'),' (GMT)' ⍝ unix - call date command
:EndIf
∇
:EndNamespace﻿:Namespace SQL
(⎕IO ⎕ML)←1
∇ r←ConnectTo database;ind;ds;dsn;opts;rc;conx;pwd;user;ms;find;args
ms←#.Boot.ms
find←{(⍴⍺){⍵×⍺≥⍵}⍺⍳⊂⍵}
r←601 'No datasources defined'
:If 0<⍴{6::'' ⋄ ⍵.Datasources}ms ⍝ do we have Datasources defined?
:If 0=ind←ms.Datasources.Name find database ⍝ try to find it
r←601 ''('Datasource "',database,'" not found')
:Return
:Else ⍝ found it
ds←ind⊃ms.Datasources
r←601 'SQAPL not available'
:If 0=⊃#.SQA.Init''
(dsn opts user pwd)←{6::'' ⋄ ⍎⍵}¨'ds.'∘,¨'DSN' 'DriverOptions' 'User' 'Password'
conx←{⊃('C'∘,¨⍕¨⍳1+⍴⍵)~⍵}⊃¨2 2⊃#.SQA.Tree'.'
args←(conx dsn pwd user opts){⍵↓⍨-⊥⍨0∘∊∘⍴¨⍺}conx dsn pwd user('DriverOptions'(opts)) ⍝ drop off trailing
:If 1>1⊃rc←#.SQA.Connect args
r←0 conx ⍝ warning (¯1) means conn was established, so return ok!
:Else ⋄ r←601 ''('Unable to connect to "',database,'" due to ',⍕3⊃rc)
:EndIf
:EndIf
:EndIf
:EndIf
∇
∇ r←Do ctl;c;m;z;ns;conx;data
⍝ Prepare, Execute, Fetch a statement.
⍝       ctl: database sqlstmt {bindvars} {nulls}
r←⎕NS''
r.(ReturnCode Data Message)←¯1(0 0⍴0)''
→(0<1⊃z←ConnectTo(1⊃ctl))⍴l3 ⋄ conx←2⊃z
→(0<1⊃z←#.SQA.CursorName conx)⍴l3 ⋄ c←2⊃z
→(0<1⊃z←#.SQA.Prepare c(2⊃ctl))⍴l3
data←''
:If 3≤⍴ctl
:If 1<|≡3⊃ctl ⋄ data←3⊃ctl
:If 3<⍴ctl ⋄ data←(⊂data),ctl[4] ⋄ :EndIf  ⍝ deal with nulls
:Else ⋄ data←2↓ctl ⋄ :EndIf
:EndIf
→(0<1⊃z←#.SQA.Exec(⊂c),data)⍴l2
→(0<1⊃z←0 #.SQA.Describe c)⍴l2
→(0=⍴2 2⊃z)/l2  ⍝ MB: emails with BHC/BPB after err on DELETE
r.Columns←{(0=(⊂1 3)⊃¨⍵)/(⊂1 1)⊃¨⍵}2 2⊃z
→(0<2 1 5⊃z)⍴l1        ⍝ Fetch if there are Bind Vars
r.(ReturnCode Data)←0(0 0⍴0) ⋄ →l2
l1:
→(0<1⊃z←1 #.SQA.Fetch c)⍴l2
r.Data←⊃2⊃z
l2:
:If 0<r.ReturnCode←1⊃z ⋄ r.Message←3⊃z ⋄ :EndIf
→(0<1⊃z←#.SQA.Close conx)↓0
l3:
r.ReturnCode←1⊃z
r.Message←3⊃z
∇
∇ r←CloseAll
→(0∊⍴r←2 2⊃#.SQA.Tree'.')⍴0
r←#.SQA.Close¨1⊃¨r
∇
:EndNamespace
﻿ r←ShowContent elm
⍝ Show the content hierarchy for elm
p←⎕NEW page
p._Request←⎕NEW #.HTTPRequest('' '')
p._Request.Server←#.Boot.ms
p.Compose
﻿:Namespace Strings
(⎕IO ⎕ML)←1
lc←(819⌶) ⍝ :Includable Lower-casification of simple array
uc←1∘(819⌶) ⍝ Ditto Upper-casification
cis←{~0∊⍴(⍺ ⎕S 0 ⎕OPT'IC' 1)⍵} ⍝ Case Insensitive Search
nocase←{(lc ⍺)⍺⍺ lc ⍵} ⍝ case insensitive operator
firstCap←('(?<first>\w)(?<remainder>\w*)'⎕R'\u<first>\l<remainder>')
beginsWith←{(,⍺){⍵≡(⍴⍵)↑⍺},⍵}
endsWith←{(,⍺){⍵≡(-⍴⍵)↑⍺},⍵}
stringify←{¯2↓∊(↓⍕↑⍵),¨⊂⎕UCS 13 10}
split←{⎕ML←3 ⋄ ⍺←' ' ⋄ ⍵⊂⍨~⍵∊⍺}
vtom←↑split  ⍝ vector to matrix
dlb←{(+/∧\' '=⍵)↓⍵}               ⍝ Delete Leading Blanks
dtb←{(-+/∧\' '=⌽⍵)↓⍵}             ⍝ Delete Trailing Blanks
deb←{{1↓¯1↓(~'  '⍷⍵)/⍵}' ',⍵,' '} ⍝ Delete extraneous blanks
vtv←{{1↓¨(v=n)⊂v←(n←⎕UCS 10),⍵}⍵~⎕UCS 13} ⍝ vector of text vectors
stringToHex←{⎕IO←0⋄∊⍉(16⍴⎕D,⎕A)[16 16⊤⎕UCS ⍵]}
∇ str←str subst(from to);m;⎕IO;i
⍝ simple string substitution
⎕IO←0
:Trap 0
str←((esc from)⎕R(esc to))str
:Else
→(∨/m←from⍷str)↓0
i←m⍳1
str←((i↑str),to,(i+⍴from)↓str)subst(from to)
:EndTrap
∇
esc←{m←∊(-1+⍵∊'&%\')↑¨1 ⋄ r←m\⍵ ⋄ ((~m)/r)←'\' ⋄ r }
scaledFmt←{0=⍵:' 0' ⋄ ⍵{((1+⍵)⊃(⊂''),'KMGTQP'),⍨(1⌊⍵)⍕⍺÷10*3×⍵}⌊3÷⍨10⍟⍵}
tonum←{0∊⍴⍵:⍬ ⋄ w←⍕⍵ ⋄ ((w='-')/w)←'¯' ⋄ ⊃(//)⎕VFI w}
fmtNum←{⍺←⊢ ⋄ w←⍺⍕⍵ ⋄ (('¯'=,w)/,w)←'-' ⋄ w}
∇ r←{d}commaFmt n
:If 0=⎕NC'd'
r←(,¨'CI20'∘⎕FMT¨n)~¨' '
:Else
r←(,¨('CF20.',⍕d)∘⎕FMT¨n)~¨' '
:EndIf
(∊r)←{w←⍵ ⋄ w⊣((w='¯')/w)←'-'}∊r
∇
:EndNamespace
﻿ r←TestRender page;p;html
⍝ Render a MiPage for testing
:If ~#.Boot.isRunning
r←'*** MiServer is not running'
:Else
p←⎕NEW page
p._Request←⎕NEW #.HTTPRequest('' '')
p._Request.Server←#.Boot.ms
p.Compose
html←p.Wrap
:Trap 0
{}⎕XML html
r←1
:Else
r←0
:EndTrap
:EndIf﻿:Namespace Dates
(⎕ML ⎕IO)←1
∇ r←CookieFmt date;day;date;mon
⍝ Format date for cookie expiry
⍝ "expires Mon, 09-Dec-2002 13:46:00 GMT"
day←(7 3⍴'MonTueWedThuFriSatSun')[WeekDay date;]
mon←(12 3⍴'janfebmaraprmayjunjulaugsepoctnovdec')[2⊃date;]
r←,('<',day,', >,ZI2,<-',mon,'->,ZI4,< >,ZI2,<:>,ZI2,<:>,ZI2,< GMT>')⎕FMT 1 5⍴(6↑date)[3 1 4 5 6]
∇
∇ SetUtcOffset;ver;⎕USING
:If 0=⎕NC'_UtcOffset'
:If 'Win'≡ver←3↑1⊃'.'⎕WG'APLVersion'
:Hold '_UtcOffset'
⎕USING←,⊂''
_UtcOffset←¯60×(System.TimeZone.CurrentTimeZone.GetUtcOffset ⎕NEW System.DateTime(⎕TS)).Hours
:EndHold
:Else
:If (⊂ver)∊'Lin' 'AIX' 'Sol' 'Mac'
_UtcOffset←¯60×.01×⍎⊃⎕SH'date +%z'
:Else
_UtcOffset←0 ⍝ otherwise, assume GMT
:EndIf
:EndIf
:EndIf
∇
∇ r←{minOffset}HTTPDate ts;sign;day;mon;ver;⎕USING;t
⍝ return RCF 1123/822 compliant date
⍝ minOffset is option number of minutes to offset time with (used for HTTP caching expirations)
minOffset←{0::0 ⋄ minOffset}''
ts←6↑ts
SetUtcOffset
ts←IDNToDate((_UtcOffset+minOffset)÷24×60)+t←DateToIDN ts
day←(7 3⍴'MonTueWedThuFriSatSun')[1+7|(⌊t)-1;]
mon←(12 3⍴'JanFebMarAprMayJunJulAugSepOctNovDec')[2⊃ts;]
r←,('<',day,', >,ZI2,< ',mon,' >,ZI4,< >,ZI2,<:>,ZI2,<:>,ZI2,< GMT>')⎕FMT 1 5⍴ts[3 1 4 5 6]
∇
∇ SM←DateToIDN TS                  ⍝ Convert date format
SM←2 ⎕NQ'.' 'DateToIDN'(3↑TS)
:If 3<⍴TS
SM+←(24 60 60 1000⊥4↑3↓TS)÷86400000
:EndIf
∇
∇ TS←IDNToDate SM                ⍝ Convert IDN to date format : 3↑⎕TS ← IDN (akd TS_SM)
TS←3↑2 ⎕NQ'.' 'IDNToDate'(⌊SM)
TS,←⌊0.5+24 60 60 1000⊤86400000×1|SM
∇
∇ new←ts IdnAdd t
⍝ T is D HH MM SS
new←ts+(0 24 60 60 1000⊥¯5↑t,0)÷86400000
∇
∇ r←Now
r←DateToIDN ⎕TS
∇
∇ r←TSFmt ts
r←,'ZI4,<->,ZI2,<->,ZI2,< >,ZI2,<:>,ZI2,<:>,ZI2'⎕FMT 1 6⍴6↑ts
∇
∇ r←TSFmtNice ts;now;yday;today;z;i;m;idn;s
⍝ Format a vector of IDN's nicely
s←⍴ts
yday←¯1+today←⌊now←DateToIDN ⎕TS
r←↑IDNToDate¨,ts←,ts ⍝ Make matrix
r←'ZI4,<->,ZI2,<->,ZI2,< >,ZI2,<:>,ZI2'⎕FMT 5↑[2]r
:If 0≠⍴i←((ts≥yday)∧~m←ts≥today)/⍳⍴ts
r[i;]←r[i;11+⍳5],' ',((⍴i),10)⍴10↑'Yesterday'
:EndIf
:If 0≠⍴i←m/⍳⍴ts
r[i;]←r[i;11+⍳5],' ',((⍴i),10)⍴10↑'Today'
:EndIf
:If 0≠⍴i←(100>z←⌊(now-ts)×24×60)/⍳⍴ts
r[i;]←16↑[2]↑(⍕¨⌊z[i]),¨(' minutes ago' ' minute ago')[1+1=z[i]]
:EndIf
:If 0≠⍴i←(z<1)/⍳⍴ts
r[i;]←((⍴i),16)⍴16↑'Now'
:EndIf
r←(s,¯1↑⍴r)⍴r
∇
∇ r←WeekDay Date
⍝ Return weekday (Monday=1, Sunday=7)
r←1+7|(DateToIDN 3↑Date)-1
∇
∇ r←{opt}DateFormat ymd
⍝ opt - 0 dd MMM yyyy
⍝       1 dd Month yyyy
:If 0=⎕NC'opt' ⋄ opt←0 ⋄ :EndIf
:Select ⊃opt
:Case 0
r←(⍕ymd[3]),(1⌽'  ',3↑(3×¯1+ymd[2])↓'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'),⍕ymd[1]
:Case 1
r←(⍕ymd[3]),(1⌽'  ',ymd[2]⊃'January' 'February' 'March' 'April' 'May' 'June' 'July' 'August' 'September' 'October' 'November' 'December'),⍕ymd[1]
:Else
r←⍕ymd
:EndSelect
∇
∇ r←LogFmtNow;ver
⍝ returns now UTC adjusted, and formatted for log files (Common Log Format)
:If 'Win'≡ver←3↑1⊃'.'⎕WG'APLVersion'
r←((⍎⎕NA'kernel32|GetSystemTime >{U2 U2 U2 U2 U2 U2 U2 U2}')⊂8⍴0)[4 2 1 5 6 7]
r[2]←⊂(12 3⍴'JanFebMarAprMayJunJulAugSepOctNovDec')[,2⊃r;]
r←,'< [>,ZI2,</>,3A1,</>,ZI4,<:>,ZI2,<:>,ZI2,<:>,ZI2,< +0000] >'⎕FMT r
:Else
r←1⊃⎕SH'date +" [%d/%b/%Y:%T %z] "'
:EndIf
∇
∇ r←LogFmt ymdhms
r←ymdhms[3 2 1 4 5 6]
r[2]←⊂(12 3⍴'JanFebMarAprMayJunJulAugSepOctNovDec')[,2⊃r;]
r←,'< [>,ZI2,</>,3A1,</>,ZI4,<:>,ZI2,<:>,ZI2,<:>,ZI2,< +0000] >'⎕FMT r
∇
∇ ts←FTT fts;md;shape;tmp;yr;z;⎕IO
⍝ *** convert ⎕FRDCI/⎕FHIST timestamp(s) to ⎕ts-format for Dyalog/W ***
⍝ right argument: ⎕FRDCI-type timestamp(s) of any shape
⍝ result: ⎕ts-type timestamp(s) with shape <(⍴argument),7>
⎕IO←0 ⋄ shape←⍴fts ⋄ ts←,fts+18626112000
md←365.2501|1+1461|yr←⌊ts÷5184000
tmp←31 61 92 122 153 184 214 245 275 306 337 366
z←(,⍉<⍀tmp∘.≥md)/,((⍴md),12)⍴⍳12
md←(1+12|z+2),[0.1]⌈md-(0,tmp)[z]
ts←(1960+⌊(yr+60)÷365.25),md,⍉24 60 60 60⊤ts
ts[;6]←⌊0.5+ts[;6]×100÷6
ts←(shape,7)⍴ts
∇
∇ r←TTF ts;l;h;d;m;y
⍝ convert a ⎕TS style timestamp into 60ths of a second since 1st January 1970 a la ⎕FRDCI
l←⌈60×ts[7]÷1000                                         ⍝ convert milliseconds to 60ths
h←3600 60 60⊥ts[4 5 6]                                   ⍝ hours minutes seconds to to the nearest seconds total
d←ts[3]-1                                                ⍝ days since start of month
m←(2⊃ts)⊃++\0 31,(28+0=4|⊃ts),31 30 31 30 31 31 30 31 30 ⍝ days in completed months
y←{{(365×⍵)+⌈4÷⍨⍵-2}⍵-1970}⊃ts                           ⍝ days in years since 1970, leap years since 1972
r←l+60×h+86400×y+m+d                                     ⍝ sum, convert to seconds, add seconds in the day convert to 60ths, add on 60ths
∇
tonum←{(b v)←⎕vfi ⍵ ⋄ b/v}
∇ dt←ParseDate str;pos;mon;t;ymd
⍝ str is of the genre "Wed Aug 05 2015 07:30:21 GMT-0400 (Eastern Daylight Time)"
⍝ We need to weed out the day of the week and the time
str←(+/∧\' '=str)↓str           ⍝ remove the leading spaces
⍝ What kind of string is this?
:If ~∧/1⊃(dt dt)←{b←~⍵∊'/-:' ⋄ ⎕VFI b\b/⍵}str  ⍝ yyyy/mm/dd hh:mm:ss ?
:If 0∊⍴t←'Jan' 'Feb' 'Mar' 'Apr' 'May' 'Jun' 'Jul' 'Aug' 'Sep' 'Oct' 'Nov' 'Dec'⎕S 0 3⊢str      ⍝ look for the month as a string. If not found
ymd←3↑tonum str                ⍝ grab the 1st 3 numbers found
ymd←ymd[⍒(2×31<ymd)+ymd<12] ⍝ put in correct order
:Else                           ⍝ otherwise (if found)
(pos mon)←0 1+1⊃t
:If ~0∊⍴t←tonum pos↑str        ⍝ any number before the month? (e.g. 2 May 2021)
ymd←⌽⍣(31<⍬⍴t)⊢(1↑tonum pos↓str),mon,t
:Else
ymd←¯1⌽mon,2↑tonum pos↓str
:EndIf
:EndIf
⍝ Now grab the time
dt←ymd,tonum⍕'(\d+):(\d+):(\d+)'⎕S'\1 \2 \3'⊢str
:EndIf
∇
∇ ts←ParseISODate str
SetUtcOffset
ts←IDNToDate(-_UtcOffset÷24×60)+DateToIDN 7↑str{⊃(//)⎕VFI ⍵\⍵/⍺}str∊⎕D
∇
∇ r←{unit}ParseTime string;chunks;units;factors
⍝ Parse time string into units (default is ms)
⍝ String is a string like '5d4h47m6s266ms'
:If 0=⎕NC'unit' ⋄ unit←'ms' ⋄ :EndIf
units←(1 1 1 1 1 0⊂'dhmsms'),⊂''
factors←86400000 3600000 60000 1000 1 1
chunks←{⍵⊆⍨1+⍵∊⎕D},string
:Trap 0/0
r←(⍎¨{⍵∩⎕D}¨chunks)+.×factors[units⍳{#.Strings.lc ⍵~⎕D}¨chunks]
:Else
'Invalid time string'⎕SIGNAL 11
:EndTrap
r←r÷factors[units⍳⊂,unit]
∇
:EndNamespace
﻿:Namespace XML
(⎕ML ⎕IO)←1
∇ XML←ToNS x;level;names;values;ns;m;name;i;j;y;n
⍝ Turn XML into a namespace
:If (10|⎕DR x)∊0 2 ⋄ x←⎕XML x ⋄ :EndIf
level names values←↓[1]x[;1 2 3]
'Single root note required'⎕SIGNAL(1≠0+.=level)/11
'XML'⎕NS''
('XML.',name←(level⍳0)⊃names)⎕NS''
:Select ⌈/level
:Case 0 ⍝ Done
:Case 1
:For n :In {⍵/⍳⍴⍵}1=level
('XML.',name,'.',n⊃names)gets n⊃values
:EndFor
:Case 2
'All level 1 names must be the same for <ToNS> with 3 levels'⎕SIGNAL(1≠⍴∪(level=1)/names)/11
⍎(name←'XML.',name),'←⍬'
i←(level=1)⊂⍳⍴level
:For j :In ⍳⍴i
y←x[j⊃i;] ⋄ y[;1]-←1
⍎name,',←(ToNS y).',(level⍳1)⊃names
:EndFor
:Else
'Maximum level of nesting for <ToNS> is 3'⎕SIGNAL 11
:EndSelect
∇
∇ XML←ToNS_Deep x;xml;ns;leaves;next;i;switch;name;level;names;values;y;n;ind;l;root
⍝ Turn XML into a namespace
⍝ XML may be arbitrarily nested
xml←x
:If (10|⎕DR x)∊0 2 ⋄ xml←⎕XML x ⋄ :EndIf
'Single root note required'⎕SIGNAL(1≠0+.=xml[;1])/11
'XML'⎕NS''
level names values←↓[1]xml[;1 2 3]
leaves←level≥next←1↓level,0
'Only leaf nodes may contain data'⎕SIGNAL(leaves∨.<~0∘∊∘⍴¨values)/11
('XML.',name←(level⍳0)⊃names)⎕NS''
n←{⍵/⍳⍴⍵}1=level
l←(1↓n,1+⍴level)-n
:For i :In ⍳⍴n
:If leaves[ind←n[i]]
('XML.',name,'.',ind⊃names)gets2 ind⊃values
:Else
y←xml[(ind-1)+⍳l[i];]
y[;1]-←1
⍎('''XML.',name,'.',ind⊃names),''' gets2 (ToNS_Deep y).',ind⊃names
:EndIf
:EndFor
∇
∇ xml←{offset}ToXML ns;msg;n;level1;i;v;d;isRef
⍝ Turn namespace into XML
isRef←{(0=⍴⍴⍵)∧326=⎕DR ⍵}
offset←{6::⍵ ⋄ offset}0
msg←'Invalid structure for <ToXML>'
xml←0 3⍴0 '' ''
msg ⎕SIGNAL(1≠⍴n←ns.⎕NL ¯2 ¯9)/11
n←⊃n
level1←ns.⍎n
msg ⎕SIGNAL(~∧/'#.XML.XML.'∘≡¨10∘↑∘⍕¨level1)/11
:For i :In level1
xml⍪←offset(10↓⍕i)''
:For v :In i.⎕NL-2
d←i⍎v
:If ∧/isRef¨d
:For r :In d
:EndFor
:EndIf
xml⍪←(2-offset)v(i.⍎v)
:EndFor
:EndFor
xml←⎕XML xml
∇
∇ r←HTMLtoXHTML html;where;closes;inds;lco;lc;getline;msg;n;dmx;aft;bef;attr;dtb;noclose
where←{⍵/⍳⍴⍵}
dtb←{⍵↓⍨-+/∧\' '=⌽⍵}
lco←{(lc ⍺)⍺⍺(lc ⍵)} ⍝ lower case operator
getline←{}
lc←{('abcdefghijklmnopqrstuvwxyzáâãçèêëìíîïðòóôõùúûýàäåæéñöøü',⍵)[('ABCDEFGHIJKLMNOPQRSTUVWXYZÁÂÃÇÈÊËÌÍÎÏÐÒÓÔÕÙÚÛÝÀÄÅÆÉÑÖØÜ',⍵)⍳⍵]}
closes←where'>'=html
noclose←'<',¨'area ' 'base ' 'basefont ' 'br>' 'col ' 'frame ' 'hr ' 'hr>' 'img ' 'input ' 'isindex ' 'link ' 'meta ' 'param ' ⍝ elements with no closing tag
inds←closes[where∨⌿<\(where⊃∨/(noclose(⍷lco)¨⊂html))∘.<closes]
html[inds[where'/'≠html[inds-1]]]←⊂'/>'
r←∊html
loop:
:Trap 11
r←⎕XML r
r[;2]←lc¨r[;2]
r[;4]←{(lc¨⍵[;1]),⍵[;,2]}¨r[;4]
→0
:Else
dmx←⎕DMX
msg←dmx.Message
:Select 6↑msg
:Case '''='' ex' ⍝ empty attribute
:If ~0∊⍴n←⊃(//)⎕VFI msg
bef aft←r{(⍵↑⍺)(⍵↓⍺)}n-1
attr←lc(1-(⌽bef)⍳' ')↑bef←dtb bef
r←bef,'="',attr,'" ',aft
→loop
:EndIf
:Else
∘∘∘
:EndSelect
dmx.(EM,': ',Message)⎕SIGNAL dmx.EN
:EndTrap
∇
∇ a gets w
⍝ if the name is already assigned, concatenate
:If 0=⎕NC a ⋄ ⍎a,'←w'
:Else ⋄ ⍎a,'← ({2>|≡⍵:,⊂⍵⋄⍵}',a,'),⊂w'
:EndIf
∇
∇ a gets2 w
⍝ if the name is already assigned, concatenate
:Select ⍬⍴⌊|⎕NC a
:Case 0
⍎a,'←⊂w'
:Else
⍎a,',←⊂w'
:EndSelect
∇
:EndNamespace:Namespace chron
cmpx←{⍺←⍬ ⋄ r m c←1 50 0(⊢+⊣×0=⊢)3↑⍺
f←{(2-c)∘⊃(⍎'{0<⍵:∇⍵-1⊣',⍵,'⋄⎕AI}⍺')-⎕AI}
1{t←⍺f¨⍵ ⋄ m>(+/÷≢),t:(⍺×2)∇⍵
((⊢-0⌊⌊/∘,)t-⍺f'⍬')÷⍺×1000}(⊢⍴⍨r,⍴)⊆⍵}
tmx←{⍺←⍬ ⋄ r m c←1 5 0(⊢+⊣×0=⊢)3↑⍺
f←{(2-c)∘⊃(⍎'{0<⍵:∇⍵-1⊣',⍵,'⋄⎕AI}⍺')-⎕AI}
(2*m){((⊢-0⌊⌊/∘,)(⍺f¨⍵)-⍺f'⍬')÷⍺×1000}(⊢⍴⍨r,⍴)⊆⍵}
get←{
⍺←83                                ⍝ default: return 8-bit integers
0::⎕SIGNAL ⎕EN	                    ⍝ signal error to caller.
t←⍵ ⎕NTIE 0	                        ⍝ file handle.
z←⎕NREAD t ⍺,⎕NSIZE t               ⍝ all bytes.
z⊣⎕NUNTIE t	                        ⍝ ⎕AV chars.
}
putfile←{                               ⍝ Put rows to text-file.
⍺←2 ⋄ term←(-⍺)↑⎕UCS 13 10          ⍝ default: cr-lf terminated rows.
fid rows←⍵                          ⍝ file-id and row values.
ntie←{                              ⍝ handle on null file.
0::⎕SIGNAL ⎕EN                  ⍝ signal error to caller.
22::⍵ ⎕NCREATE 0                ⍝ ~exists: create.
0 ⎕NRESIZE ⍵ ⎕NTIE 0            ⍝  exists: truncate.
}fid
cvec←term,⍤1⍨rows                   ⍝ collected, terminated lines.
size←cvec ⎕NAPPEND ntie,⎕DR ⎕AV     ⍝ write lines to file.
1:rslt←size⊣⎕NUNTIE ntie            ⍝ shy result: file size.
}
newname←{'.dyalog',⍨'./chron/data/',⍵,'_data_',⊃,∘('-'∘,)/⍕¨⎕TS}
run←{f←⊢↑[1]⍨1⊃⌈∘⍴⍨∘⍴ ⋄ 1 putfile(⊂⍺(f⍨⍪f)⍕⍎⍵),⊂newname⍵}
OS←{'Mac' 'Linux'∨.≡3 5↑¨⊂⊃'.'⎕WG'APLVersion'}
specs←{
z←'sudo dmidecode --type 17'
z,←' && cat /proc/cpuinfo | grep processor -A 8'
z,←' && lspci -vnn | grep VGA'
OS⍬: ⍵,⍨⎕SH z
}
find←{v←'tests' 'data'≡¨⊂⍵ ⋄ ~1∊v:⎕EM 11
s←⊃v/'*_chron.dyalog' '*_data_*'
OS⍬: ⎕SH 'find ./chron/',⍵,' -name ',s
}
test←{⍺←1000
n←⎕SE.SALT.Load './chron/tests/','_chron.dyalog',⍨⊃⊆⍵
z←'#.chron.cmpx' ⎕NS⍨⍕n
m←' '⍪⍨'⍝',↑specs(~∘' ','←',∘⍕∘⍎ z,'.'∘,)¨↓n.⎕NL 2
t←('_chron',⍨⊃⊆⍵)((⊢(⌿⍨)(⊣≡↑⍨∘⍴⍨)⍤1))n.⎕NL 2
f←⊢↑[1]⍨1⊃⌈∘⍴⍨∘⍴
g←1 putfile (⊂∘newname⊢),∘⊂m(f⍨⍪f)∘⍕⊣n.cmpx∘⍎z,'.',⊢
⍬≢⍴1⊃2↑⊆⍵:⍺g⍤1⊢t
⍺g⊢t⌷⍨¯1+1⊃⍵
}
load_data←{⍎⍤1⊢1↓¯1↓(⊢(⌿⍨)'⍝'≠⊃⍤1)'UTF-16'⎕UCS⍤1⊢↑10~⍨¨(10∘=⊂⊢)163 get ⍵}
load_vars←{z←(⊢(⌿⍨)∘(∨/)'←'∘=)'UTF-16'⎕UCS⍤1⊢↑10~⍨¨(10∘=⊂⊢)163 get ⍵
⍎⍤1⊢0 1↓z⌿⍨~∨/∧⌿'_chron_'=⍤¯1⊢(⍳7)⌽⍤¯1⊢z⍴⍨7,⍴z}
⍝ Probability functions
mean←+⌿÷≢
hmean←≢÷+⌿∘÷
var←×⍨∘mean-⍨∘mean×⍨
var2←mean∘(×⍨)⊢-⍤¯1 15mean
cov←×∘mean⍨∘mean-⍨∘mean×
cov2←{mean(⍺-mean⍺)×(⍵-mean ⍵)}
stdev←.5*⍨var
zscore←stdev÷⍤¯1 15⍨⊢-⍤¯1 15 mean
skew←mean 3*⍨zscore
kurt←mean 4*⍨zscore
entropy←(-⊢+.×⍟)(≢⊢)⌸÷≢
meancomp←∘.-⍨∘mean÷.5*⍨∘.+⍨∘var÷≢
sort←⍋⌷⍤0 15⊢
freqtab←sort,∘≢⌸
chart←{⍺←10 ⋄ (⊢∘.(' x'⊃⍨=)⍨∘⍳1+⌈/)(⌊⍺×⊢-⌊/)mean zscore⍤1⊢⍵}
unitab←{⍺←1 ⋄ ⍺<|∘meancomp⍵}
unifreq←{⍺←1 ⋄ ((⍒⊣⌸)⌷⍤0 15,∘⊂⌸)mean ⍺<|meancomp ⍵}
heat←⌊256×7○|
range←(⌈/-⌊/)∘,
hyp←{1+(⊣×1+⊢)/⍵×⍤0 1⊢÷⌿×⌿(⍳⍺⍺)∘.+⍨(⊢⍴⍨2 2,1↓⍴)(0∘⌷⍪1⍪¯2∘↑)⍺}
Lbet←{(0∘⌷⍺)÷⍨(⍵*0∘⌷⍺)×⍵(200 hyp)⍨(0∘⌷⍪∘⊖1+1 ¯1×[0]⊢)⍺}
beta←1∘⌷×¯1!.++⍀
I←Lbet÷∘beta⊣
Lgam←{n←1+⍳100×⌈0.5*⍨⌈/,⍵÷⍺
⍺÷⍨(⍵*⍺)×⊃(⊣×1-⊢)/⊂⍤¯1⊢1⍪(n÷⍨⍤0 15⊢⍵)×⍤¯1⊢1-÷n+⍤0 15⊢⍺}
Ugam←Lgam-⍨∘!¯1+⊣
digam←{z←2*¯32 ⋄ (z÷⍨-⌿÷1∘⌷)!(z 0)+⍤0 15⊢¯1+⍵}
ddigam←{z←2*¯16 ⋄ (×⍨digam⍵)-⍨((×⍨z)÷⍨-⌿÷1∘⌷)!(,∘-⍨z 0)+⍤0 15⊢¯1+⍵}
erf←{((4×¯3○1)*-1÷2)×.5 Lgam ⍵*2}
normcdf←{2÷⍨1+(×⍵)×erf ⍵÷2*0.5}
chicdf←{(!1-⍨⍺÷2)÷⍨(2÷⍨⍺) Lgam 2÷⍨⍵}
Fcdf←(2÷⍨⊣)I∘÷1+(1⌷⊣)÷⊢×0⌷⊣
invgamcdf←((0⌷⊣)Ugam⍤15 ¯1⊢÷⍤15 ¯1⍨1⌷⊣)÷⍤¯1 15∘!¯1+0⌷⊣
sinvgamcdf←⊣invgamcdf⊢(+⍤¯1 15)2⌷⊣
gamcdf←{((0⌷⍺)Lgam⍤15 ¯1⊢⍵÷⍤¯1 15⊢1⌷⍺)÷⍤¯1 15⊢!¯1+0⌷⍺}
invgampdf←{((*⌿⊖⍺)÷!¯1+0⌷⍺)×⍤15 ¯1⊢(*-⍵÷⍤15 ¯1⍨1⌷⍺)×⍵*⍤¯1 15⊢-1+0⌷⍺}
gampdf←{((*⌿⊖⍺)×!¯1+0⌷⍺)÷⍤¯1 15⍨(*-⍵÷⍤¯1 15⊢1⌷⍺)×⍵*⍤¯1 15⊢¯1+0⌷⍺}
invgam_mom1←2+×⍨∘mean÷var
invgam_mom2←(⊢÷⍨3∘×+8+4×.5*⍨4∘+)×⍨∘skew
invgam_mom3←(2∘×÷⍨30+7∘×+0.5*⍨150∘+×6∘+)kurt
invgam_shift←⊣-∘mean⍨.5*⍨⊣×∘var⍨¯2+⊢
invgam_mlec←(-mean∘⍟+∘⍟+⌿∘÷)⊣+⍤¯1 15invgam_shift
invgam_mle1←⊢÷1+(invgam_mlec+×∘≢⍨-⍨∘⍟⍨∘digam⊢)÷1-⊢×∘ddigam⊢
fit←{1⌊0⌈-⌿⍺ ⍺⍺⍤15 ¯1⊢⍉(⊢(∘.+⍤1)0.5 ¯0.5∘.×⍨∘(|-⌿)2↑⍉)∪∘sort⍤1∘⍉⍵}
Evals←{(≢⍵)×⍺ ⍺⍺ fit ⍵}
Ovals←1⌷∘⍉sort∘freqtab⍤1∘⍉
good←{(Ovals ⍵)(+⌿⊢÷⍨2*⍨-)⍺ ⍺⍺ Evals ⍵}
⍝+/((×⍨-⍤1⍤15 1⍨)÷0.5×+⍤1⍤15 1⍨)1⊃⍤1⊢sort⍤2⊢(⍳21)(⊢⍪0,⍨∘⍪⊣~∘(⊃⍤1)⊢)∘(,∘≢⌸)⍤1⊢(⌈20×range÷⍨⊢-⌊/∘,)⍉0.00022⌊z00
:EndNamespace
:Namespace aes_chron
⎕IO ⎕ML ⎕WX←0 1 3
M←#.mystika
m0←128⍴0
m1←128⍴1
m2←?128⍴2
⍎⍤1⊢(↑'m',¨⍕¨⍳16),'←',⍕?⍪↑32⍴¨1+⍉(4⍴2)⊤⍳2*4
⍎⍤1⊢(↑'k',¨⍕¨⍳16),'←',⍕?⍪↑32⍴¨1+⍉(4⍴2)⊤⍳2*4
k128←?128⍴2
k192←?192⍴2
k256←?256⍴2
aes_chron_01←'k128 M.AES.ecr m0' 'k128 M.AES.ecr m1' 'k128 M.AES.ecr m2'
aes_chron_02←'k192 M.AES.ecr m0' 'k192 M.AES.ecr m1' 'k192 M.AES.ecr m2'
aes_chron_03←'k256 M.AES.ecr m0' 'k256 M.AES.ecr m1' 'k256 M.AES.ecr m2'
aes_chron_04←'k128 M.AES.dcr m0' 'k128 M.AES.dcr m1' 'k128 M.AES.dcr m2'
aes_chron_05←'k192 M.AES.dcr m0' 'k192 M.AES.dcr m1' 'k192 M.AES.dcr m2'
aes_chron_06←'k256 M.AES.dcr m0' 'k256 M.AES.dcr m1' 'k256 M.AES.dcr m2'
aes_chron_07←,('k',¨⍕¨⍳16)∘.{⍺,' M.AES.ecr ',⍵}('m',¨⍕¨⍳16)
aes_chron_08←(⊂'k15'){⍺,' M.AES.ecr ',⍵}¨('m',¨⍕¨⍳16)
:EndNamespace
:Namespace exp_chron
⎕IO ⎕ML ⎕WX←0 1 3
M←#.mystika
p1←256 0 0,¯64↑114 239,⍨30⍴255
a1←p1 M.mod M.mul⍨M.rol p1
e1←M.rol M.flo M.di2 p M.sub M.flo p M.big 1
e2←256,¯66↑1⌽32↑1 32
e3←256,¯66↑63,31⍴255
p2←256 0 0,¯128↑63 35,⍨62⍴255
p3←256 0 0,¯128↑107 27,⍨62⍴255
EXP∆01_CHRON←'e1 (p1 M.mex) a1' 'e2 (p1 M.mex) a1' 'e3 (p1 M.mex) a1'
:EndNamespace
:Namespace mex_chron
⎕IO ⎕ML ⎕WX←0 1 3
M←#.mystika
p1←256 0 0,¯64↑114 239,⍨30⍴255
a1←p1 M.mod M.mul⍨M.rol p1
e1←M.rol M.flo M.di2 p1 M.sub M.flo p1 M.big 1
e2←256,¯66↑1⌽32↑1 32
e3←256,¯66↑63,31⍴255
p2←256 0 0,¯128↑63 35,⍨62⍴255
p3←256 0 0,¯128↑107 27,⍨62⍴255
MEX∆01_CHRON←'e1 (p1 M.mex) a1' 'e2 (p1 M.mex) a1' 'e3 (p1 M.mex) a1'
:EndNamespace
:Namespace mul_chron
⎕IO ⎕ML ⎕WX←0 1 3
M←#.mystika
a192_64←64 0 0,?32⍴64
b192_64←64 0 0,?32⍴64
a192_16←16 M.bch a192_64
b192_16←16 M.bch b192_64
a192_256←256 M.bch a192_64
b192_256←256 M.bch b192_64
a256←256⍪0⍪0⍪?32⍴256
b256←256⍪0⍪0⍪?32⍴256
c256←256⍪0⍪0⍪¯32↑?16⍴256
x256←256⍪0⍪0⍪32⍴255
y256←256⍪0⍪0⍪¯32↑1
z256←256⍪0⍪0⍪¯32↑0
MUL∆01_CHRON←'a256 M.mul b256' 'a256 M.mul c256' 'a256 M.mul y256' 'a256 M.mul z256' 'x256 M.mul x256'
MUL∆02_CHRON←'a256 M.mul b256' 'b256 M.mul a256' 'a256 M.mul y256' 'y256 M.mul a256' 'x256 M.mul x256'
MUL∆03_CHRON←'z256 M.mul z256' 'z256 M.mul y256' 'y256 M.mul z256' 'y256 M.mul y256' 'x256 M.mul x256'
MUL∆04_CHRON←'a192_16  M.mul b192_16' 'a192_64 M.mul b192_64' 'a192_256 M.mul b192_256'
:EndNamespace
:Namespace sha_chron
⎕IO ⎕ML ⎕WX←0 1 3
M←#.mystika
m1←,⍉(8⍴2)⊤⎕UCS 'abc'
m2←,⍉(8⍴2)⊤⎕UCS 'abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq'
m3←,⍉(8⍴2)⊤⎕UCS 'abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu'
sha_chron_01←'256 M.SHA.sum m1' '256 M.SHA.sum m2'
sha_chron_02←'384 M.SHA.sum m1' '384 M.SHA.sum m3'
sha_chron_03←'512 M.SHA.sum m1' '512 M.SHA.sum m3'
:EndNamespace
:Namespace abs_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
ABS∆01_TEST←{_←X 16 0 0⍪(8⍴16)⊤0 ⋄ M.abs 16 0 0⍪(8⍴16)⊤0}
ABS∆02_TEST←{_←X 16 0 0⍪(8⍴16)⊤1 ⋄ M.abs 16 0 0⍪(8⍴16)⊤1}
ABS∆03_TEST←{_←X 16 0 0⍪(8⍴16)⊤1 ⋄ M.abs 16 0 1⍪(8⍴16)⊤1}
ABS∆04_TEST←{_←X 65552⍪0 0⍪(8⍴16)⊤1 ⋄ M.abs 65552⍪0 0⍪(8⍴16)⊤1}
ABS∆05_TEST←{_←X 65552⍪0 0⍪(8⍴16)⊤1 ⋄ M.abs 65552⍪0 1⍪(8⍴16)⊤1}
ABS∆06_TEST←{_←X 16 0 0⍪(8⍴16)⊤3678667686 ⋄ M.abs 16 0 0⍪(8⍴16)⊤3678667686}
ABS∆07_TEST←{_←X 16⍪0 0⍪(8⍴16)⊤2489643441 ⋄ M.abs 16 0 1⍪(8⍴16)⊤2489643441}
ABS∆08_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤(2 2⍴2489643441 335219058 655842322 3036358490) ⋄ M.abs 16⍪0⍪(2 2⍴1 0 0 1)⍪(8⍴16)⊤2 2⍴2489643441 335219058 655842322 3036358490}
ABS∆09_TEST←{_←X 10 29 0,⍎¨'11512167476196652343418415356617' ⋄ M.abs 0J10 0 0,(32⍴0J10)⊤97J62}
ABS∆10_TEST←{_←X 10 M.mov 10 0 0,(12⍴10)⊤94 ⋄ M.abs 0J10 0 0,(12⍴0J10)⊤0J94}
ABS∆11_TEST←{_←X 10 0 0,(12⍴10)⊤0 ⋄ M.abs 0J10 0 0,(12⍴0J10)⊤0}
ABS∆12_TEST←{_←X 0 30 29 M.mov 10⍪0 0 29⍪0⍪0,(¯32↑9 4),[.5]⍎¨'11512167476196652343418415356617' ⋄ M.abs 0J10⍪0⍪0⍪(32⍴0J10)⊤0 0J94 97J62}
:EndNamespace
:Namespace add_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
ADD∆01_TEST←{_←X 16 0 0,(8⍴16)⊤4271680396 ⋄ ⊃M.add/16,¨0,¨0,¨(⊂8⍴16)⊤¨4178339731 93340665}
ADD∆02_TEST←{_←X 16 0 0,(8⍴16)⊤4271680396 ⋄ ⊃M.add/16,¨0,¨0,¨(⊂8⍴16)⊤¨93340665 4178339731}
ADD∆03_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤5⍴4271680396 ⋄ ⊃M.add/16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨5⍴¨4178339731 93340665}
ADD∆04_TEST←{_←X 16 0 0,(8⍴16)⊤93340665 ⋄ ⊃M.add/16,¨0,¨0,¨(⊂8⍴16)⊤¨93340665 0}
ADD∆05_TEST←{_←X 16 0 0,(8⍴16)⊤0 ⋄ ⊃M.add/16,¨0,¨0 1,¨(⊂8⍴16)⊤¨93340665 93340665}
ADD∆06_TEST←{_←X 16 0 0,(8⍴16)⊤0 ⋄ ⊃M.add/16,¨0,¨0 1,¨(⊂8⍴16)⊤¨1 1}
ADD∆07_TEST←{_←X 16 0 1,(8⍴16)⊤1 ⋄ (11↑16) M.add 16 0 0,¯8↑¯1}
ADD∆08_TEST←{_←X 16 ¯1 0,32⍴1 ⋄ (35↑16) M.add 16 0 0,32⍴16}
ADD∆09_TEST←{_←X 256 0 0,¯8↑3⍴255 ⋄ (256,10↑0) M.add 256,¯10↑¯1+2*24}
ADD∆10_TEST←{_←X 16 0 0,(8⍴16)⊤743669601 ⋄ (16 0 0,(8⍴16)⊤239430974) M.add (16 0 0,(8⍴16)⊤201801714) M.add 16 0 0,(8⍴16)⊤302436913}
ADD∆11_TEST←{_←X 16 0 0,(8⍴16)⊤743669601 ⋄ ((16 0 0,(8⍴16)⊤239430974) M.add (16 0 0,(8⍴16)⊤201801714)) M.add 16 0 0,(8⍴16)⊤302436913}
ADD∆12_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤5⍴4271680396 ⋄ (16 0 0,(8⍴16)⊤4178339731) M.add 16⍪0⍪0⍪(8⍴16)⊤5⍴93340665}
ADD∆13_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤5⍴4271680396 ⋄ (16⍪0⍪0⍪(8⍴16)⊤5⍴4178339731) M.add 16 0 0,(8⍴16)⊤93340665}
ADD∆14_TEST←{_←X 19↑16 ⋄ (16 0 1,¯16↑1) M.add 16,¯18↑1}
ADD∆15_TEST←{_←X 19↑16 ⋄ (16 0 1,¯16↑1) M.add 65552,¯18↑1}
ADD∆16_TEST←{_←X 19↑16 ⋄ (65552 0 1,¯16↑1) M.add 16,¯18↑1}
ADD∆17_TEST←{_←X 19↑65552 ⋄ (65552 0 1,¯16↑1) M.add 65552,¯18↑1}
ADD∆18_TEST←{_←X 19↑16 ¯1 0 1 ⋄ (16 0 0,16⍴15) M.add 16,¯18↑1}
ADD∆19_TEST←{_←X 19↑16 ¯1 0 1 ⋄ (16 0 0,16⍴15) M.add 65552,¯18↑1}
ADD∆20_TEST←{_←X 19↑16 ¯1 0 1 ⋄ (65552 0 0,16⍴15) M.add 16,¯18↑1}
ADD∆21_TEST←{_←X 65552 0 0,16↑16,⍨12⍴15 ⋄ (65552 0 0,16⍴15) M.add 65552 0 0,¯16↑1}
ADD∆22_TEST←{_←X 65546 0 0,20↑10,⍨15⍴9 ⋄ (65546 0 0,20⍴9) M.add 65546 0 0,¯20↑1}
ADD∆23_TEST←{_←X 65545 0 0,20↑9,⍨15⍴8 ⋄ (65545 0 0,20⍴8) M.add 65545 0 0,¯20↑1}
ADD∆24_TEST←{_←X 65539 0 0,40↑3,⍨33⍴2 ⋄ (65539 0 0,40⍴2) M.add 65539 0 0,¯40↑1}
ADD∆25_TEST←{_←X 65538 0 0,40↑2,⍨31⍴1 ⋄ (65538 0 0,40⍴1) M.add 65538 0 0,¯40↑1}
ADD∆26_TEST←{_←X 32⍴1 ⋄ 16≥3↓(65552 0 0,32↑0) M.add 65552 0 0,32⍴32××⍨16}
ADD∆27_TEST←{_←X 32⍴1 ⋄ 10≥3↓(65546 0 0,32↑0) M.add 65546 0 0,32⍴32××⍨10}
ADD∆28_TEST←{_←X 32⍴1 ⋄ 9≥3↓(65545 0 0,32↑0) M.add 65545 0 0,32⍴32××⍨9}
ADD∆29_TEST←{_←X 32⍴1 ⋄ 3≥3↓(65539 0 0,32↑0) M.add 65539 0 0,32⍴32××⍨3}
ADD∆30_TEST←{_←X 32⍴1 ⋄ 2≥3↓(65538 0 0,32↑0) M.add 65538 0 0,32⍴32××⍨2}
ADD∆31_TEST←{_←X 65552 0 0,¯8↑¯1 ⋄ (11↑65552) M.add 65552,¯10↑¯1}
ADD∆32_TEST←{_←X 16⍴1 ⋄ 16≥|3↓ (65552,18↑0) M.add 65552,¯18↑¯205 0 286 0 222 0 ¯177 0 158}
ADD∆33_TEST←{_←X 0J16 0 0,(8⍴0J16)⊤349J248 ⋄ ⊃M.add/0J16⍪¨0⍪¨0⍪¨(⊂8⍴0J16)⊤¨234J31 115J217}
ADD∆34_TEST←{_←X 0J16 0 0,¯8↑¯1 0J15 ⋄ ⊃M.add/0J16⍪¨0⍪¨0⍪¨(⊂8⍴0J16)⊤¨0J¯1 0}
ADD∆35_TEST←{_←X 0J16 0 0,(8⍴0J16)⊤344J48 ⋄ (16 0 0,(8⍴16)⊤199) M.add 0J16 0 0,(8⍴0J16)⊤145J48}
ADD∆36_TEST←{_←X 0J16 0 0,(8⍴0J16)⊤344J48 ⋄ (0J16 0 0,(8⍴0J16)⊤145J48) M.add 16 0 0,(8⍴16)⊤199}
ADD∆37_TEST←{_←X 0J16 ¯3 0⍪¯3↓(11⍴0J16)⊤¯1+2*32 ⋄ (16 0 0,(8⍴16)⊤¯1+2*32) M.add 0J16 0 0,(8⍴0J16)⊤0}
ADD∆38_TEST←{_←X 0J16 ¯3 0⍪¯3↓(11⍴0J16)⊤¯1+2*32 ⋄ (0J16 0 0,(8⍴0J16)⊤0) M.add 16 0 0,(8⍴16)⊤¯1+2*32}
ADD∆39_TEST←{_←X 10⍪3 4 4 4 4 5 5 5⍪0⍪(8⍴10)⊤⌊(51163÷10*¯3 ¯3 ¯2 ¯1 0 0 1 2)+6979787÷10*1 0 0 0 0 ¯1 ¯1 ¯1  ⋄ (10⍪(⍳8)⍪0⍪(8⍴10)⊤8⍴51163) M.add 10 4 0,(8⍴10)⊤6979787}
ADD∆40_TEST←{_←X 10⍪3 4 4 4 4 5 5 5⍪0⍪(8⍴10)⊤⌊(6979787÷10*1 0 0 0 0 ¯1 ¯1 ¯1)+51163÷10*¯3 ¯3 ¯2 ¯1 0 0 1 2 ⋄ (10 4 0,(8⍴10)⊤6979787) M.add 10⍪(⍳8)⍪0⍪(8⍴10)⊤8⍴51163}
ADD∆41_TEST←{_←X 10 0 1,(8⍴10)⊤36478829 ⋄ ⊃M.add/10,¨0,¨0 1,¨(⊂8⍴10)⊤¨60412782 96891611}
ADD∆42_TEST←{_←X 10 0 0,(8⍴10)⊤36478829 ⋄ ⊃M.add/10,¨0,¨1 0,¨(⊂8⍴10)⊤¨60412782 96891611}
ADD∆43_TEST←{_←X 10 ¯1 0,(8⍴10)⊤⌊15730439.3 ⋄ ⊃M.add/10,¨0,¨0,¨(⊂8⍴10)⊤¨60412782 96891611}
ADD∆44_TEST←{_←X 10 ¯1 1,(8⍴10)⊤⌊15730439.3 ⋄ ⊃M.add/10,¨0,¨1,¨(⊂8⍴10)⊤¨60412782 96891611}
:EndNamespace
﻿:Namespace aes_tests
⎕IO ⎕ML←0 1
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
k1←M.h2b'000102030405060708090a0b0c0d0e0f'
k2←M.h2b'000102030405060708090a0b0c0d0e0f1011121314151617'
k3←M.h2b'000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f'
m1←M.h2b'00112233445566778899aabbccddeeff'
c1←M.h2b'69c4e0d86a7b0430d8cdb78070b4c55a'
c2←M.h2b'dda97ca4864cdfe06eaf70a0ec0d7191'
c3←M.h2b'8ea2b7ca516745bfeafc49904b496089'
AES∆01_TEST←{_←X c1 ⋄ k1 M.AES.ecr m1}
AES∆02_TEST←{_←X m1 ⋄ k1 M.AES.dcr c1}
AES∆03_TEST←{_←X c2 ⋄ k2 M.AES.ecr m1}
AES∆04_TEST←{_←X m1 ⋄ k2 M.AES.dcr c2}
AES∆05_TEST←{_←X c3 ⋄ k3 M.AES.ecr m1}
AES∆06_TEST←{_←X m1 ⋄ k3 M.AES.dcr c3}
AES∆07_TEST←{_←X 384⍴c1 ⋄ k1 M.AES.ecr 384⍴m1}
AES∆08_TEST←{_←X 384⍴m1 ⋄ k1 M.AES.dcr 384⍴c1}
AES∆09_TEST←{_←X 384⍴c2 ⋄ k2 M.AES.ecr 384⍴m1}
AES∆10_TEST←{_←X 384⍴m1 ⋄ k2 M.AES.dcr 384⍴c2}
AES∆11_TEST←{_←X 384⍴c3 ⋄ k3 M.AES.ecr 384⍴m1}
AES∆12_TEST←{_←X 384⍴m1 ⋄ k3 M.AES.dcr 384⍴c3}
:EndNamespace
﻿:Namespace b64_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
B64∆01_TEST←{_←X M.a64 ⋄ M.b64 64 0 0,⍳64}
B64∆02_TEST←{_←X 64 0 0,⍳64 ⋄ M.b64 M.a64}
B64∆03_TEST←{_←X 'CBd2JS' ⋄ M.b64 64 0 0,(6⍴64)⊤2172084818}
B64∆04_TEST←{_←X 64 0 0,(6⍴64)⊤2172084818 ⋄ M.b64 'CBd2JS'}
B64∆05_TEST←{_←X 'CBd2JS' ⋄ M.b64 16 0 0,(8⍴16)⊤2172084818}
B64∆06_TEST←{_←X 16 0 0,(9⍴16)⊤2172084818 ⋄ 16 M.b64 'CBd2JS'}
:EndNamespace
:Namespace bch_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
BCH∆01_TEST←{_←X 65552⍪0⍪0⍪(8⍴16)⊤1748127180 ⋄ 65552 M.bch 16 0 0,(8⍴16)⊤1748127180}
BCH∆02_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤3498529338 ⋄ 16 M.bch 65552 0 0,(8⍴16)⊤3498529338}
BCH∆03_TEST←{_←X 0J16⍪0⍪0⍪(8⍴0J16)⊤3115900899 ⋄ 0J16 M.bch 16 0 0,(8⍴16)⊤3115900899}
BCH∆04_TEST←{_←X 2⍪0⍪0⍪(32⍴2)⊤630828873 ⋄ 2 M.bch 16 0 0,(8⍴16)⊤630828873}
BCH∆05_TEST←{_←X 2⍪20⍪0⍪(32⍴2)⊤1068473967 ⋄ 2 M.bch 16 5 0,(8⍴16)⊤1068473967}
BCH∆06_TEST←{_←X 2⍪0⍪1⍪(32⍴2)⊤1068473967 ⋄ 2 M.bch 16 0 1,(8⍴16)⊤1068473967}
BCH∆07_TEST←{_←X 8⍪0⍪0⍪(11⍴8)⊤1068473967 ⋄ 8 M.bch 16 0 0,(8⍴16)⊤1068473967}
BCH∆08_TEST←{_←X 8 7 0,(11⍴8)⊤1068473967×2 ⋄ 8 M.bch 16 5 0,(8⍴16)⊤1068473967}
BCH∆09_TEST←{_←X 8⍪0⍪1⍪(11⍴8)⊤1068473967 ⋄ 8 M.bch 16 0 1,(8⍴16)⊤1068473967}
BCH∆10_TEST←{_←X 0J8⍪0⍪0⍪(11⍴0J8)⊤1068473967 ⋄ 0J8 M.bch 16 0 0,(8⍴16)⊤1068473967}
BCH∆11_TEST←{_←X 10⍪0⍪0⍪(10⍴10)⊤1068473967 ⋄ 10 M.bch 16 0 0,(8⍴16)⊤1068473967}
BCH∆12_TEST←{_←X 10⍪0⍪1⍪(10⍴10)⊤1068473967 ⋄ 10 M.bch 16 0 1,(8⍴16)⊤1068473967}
BCH∆13_TEST←{_←X 8⍪0⍪0⍪(22⍴8)⊤15 38 21 ⋄ 8 M.bch 8 16 4⍪0⍪0⍪⍉↑(16⍴8)(16⍴16)(16⍴4)⊤¨15 38 21}
BCH∆14_TEST←{_←X 10⍪0⍪0⍪(20⍴10)⊤15 38 21 ⋄ 10 M.bch 8 16 4⍪0⍪0⍪⍉↑(16⍴8)(16⍴16)(16⍴4)⊤¨15 38 21}
BCH∆15_TEST←{_←X 10 M.pla ¯1 M.mov 0J10⍪0⍪0⍪(11⍴0J10)⊤1068473967 ⋄ 0J10 M.bch 16 0 0,(8⍴16)⊤1068473967}
BCH∆16_TEST←{_←X 7 M.mov 10 3 0,(10⍴10)⊤350125 ⋄ 10 M.bch 16 1 0,(8⍴16)⊤5602}
BCH∆17_TEST←{_←X 16 0 0,(9⍴16)⊤1068473967 ⋄ 16 M.bch 10⍪0⍪0⍪(10⍴10)⊤1068473967}
BCH∆18_TEST←{_←X 16 0 1,(9⍴16)⊤1068473967 ⋄ 16 M.bch 10⍪0⍪1⍪(10⍴10)⊤1068473967}
BCH∆19_TEST←{_←X 16 9 0,2,⍨8⍴3 ⋄ 16 M.bch 10⍪1⍪0⍪(10⍴10)⊤2}
:EndNamespace
﻿:Namespace big_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
BIG∆01_TEST←{_←X 256 0 0,(36⍴256)⊤768 ⋄ M.big 768}
BIG∆02_TEST←{_←X 256 0 1,(36⍴256)⊤768 ⋄ M.big ¯768}
BIG∆03_TEST←{_←X 256 0 0,(36⍴256)⊤0 ⋄ M.big 0}
BIG∆04_TEST←{_←X 256⍪0⍪0 0 1⍪(36⍴256)⊤0 768 768 ⋄ M.big 0 768 ¯768}
BIG∆05_TEST←{_←X 0J256 0 0,(36⍴0J256)⊤¯272J2431 ⋄ M.big ¯272J2431}
BIG∆06_TEST←{_←X 0J256⍪0 0 0⍪0⍪(36⍴0J256)⊤0 ¯768 ¯272J2431 ⋄ M.big 0 ¯768 ¯272J2431}
BIG∆07_TEST←{_←X 256 1 0,(36⍴256)⊤64 ⋄ M.big 0.25}
BIG∆08_TEST←{_←X 256 5 0,(36⍴256)⊤30138469 ⋄ M.big 0.00002741077792}
BIG∆09_TEST←{_←X 256⍪0 0 4 1⍪0 1 0 0⍪0 0 0 ¯3⊖(36⍴256)⊤0 768,⌊0.1 0.25×2*32 ⋄ M.big 0 ¯768 0.1 0.25}
BIG∆10_TEST←{_←X 0J256⍪0 0 1 4⍪0⍪0 ¯4 ¯3 0⊖(36⍴0J256)⊤⌊0 ¯768 0.25 0.3J¯0.1×2*32 ⋄ M.big 0 ¯768 0.25 0.3J¯0.1}
BIG∆11_TEST←{_←X 16 0 0,(32⍴16)⊤768 ⋄ (35⍴16) M.big 768}
BIG∆12_TEST←{_←X 16 0 1,(32⍴16)⊤768 ⋄ (35⍴16) M.big ¯768}
BIG∆13_TEST←{_←X 65552 0 0,(32⍴16)⊤768 ⋄ (35⍴65552) M.big 768}
BIG∆14_TEST←{_←X 0J16 0 0,(32⍴0J16)⊤¯768 ⋄ (35⍴0J16) M.big ¯768}
BIG∆15_TEST←{_←X 0J65552 0 0,(32⍴0J16)⊤¯768 ⋄ (35⍴0J65552) M.big ¯768}
BIG∆16_TEST←{_←X 0J16 0 0,(32⍴0J16)⊤¯272J2431 ⋄ (35⍴16) M.big ¯272J2431}
BIG∆17_TEST←{_←X 0J65552 0 0,(32⍴0J16)⊤¯272J2431 ⋄ (35⍴65552) M.big ¯272J2431}
BIG∆18_TEST←{_←X 0J16 0 0,(32⍴0J16)⊤¯272J2431 ⋄ (35⍴0J16) M.big ¯272J2431}
BIG∆19_TEST←{_←X 0J65552 0 0,(32⍴0J16)⊤¯272J2431 ⋄ (35⍴0J65552) M.big ¯272J2431}
BIG∆20_TEST←{_←X 16 0 0,(32⍴16)⊤768 ⋄ (35 5⍴16) M.big 768}
BIG∆21_TEST←{_←X 16⍪0 0 8 1⍪0 1 0 0⍪0 0 0 ¯7⊖(32⍴16)⊤0 768,⌊0.1 0.25×2*32 ⋄ (35 5⍴16) M.big 0 ¯768 0.1 0.25}
BIG∆22_TEST←{_←X 65552⍪0 0 8 1⍪0 1 0 0⍪0 0 0 ¯7⊖(32⍴16)⊤0 768,⌊0.1 0.25×2*32 ⋄ (35 5⍴65552) M.big 0 ¯768 0.1 0.25}
BIG∆23_TEST←{_←X 10⍪2 0 0 ¯55 0⍪0 0 1 0 0⍪(20⍴10)⊤25 0 560 358 560  ⋄ (23⍴10) M.big 0.25 0 ¯560 3.58E57  560}
BIG∆24_TEST←{_←X 65546⍪2 0 0 ¯55 0⍪0 0 1 0 0⍪(20⍴10)⊤25 0 560 358 560 ⋄ (23⍴65546) M.big 0.25 0 ¯560 3.58E57  560}
:EndNamespace
:Namespace cat_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
CAT∆01_TEST←{_←X 16⍪(8|⍪⍳24)⍪0⍪(8⍴16)⊤⍪⍳24 ⋄ M.cat 16⍪(8|⍳24)⍪0⍪(8⍴16)⊤⍳24}
CAT∆02_TEST←{_←X 16⍪(5 3⍴8|⍳15)⍪0⍪(8⍴16)⊤5 3⍴⍳15 ⋄ M.cat 16⍪(5 3⍴8|⍳15)⍪0⍪(8⍴16)⊤5 3⍴⍳15}
CAT∆03_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤¯2⊖(7 3⍴⍳15) ⋄ (16⍪0⍪0⍪(8⍴16)⊤2 3⍴⍳15) M.cat 16⍪0⍪0⍪(8⍴16)⊤5 3⍴⍳15}
CAT∆04_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤¯12⌽36⍴(⍳24) ⋄ (16⍪0⍪0⍪(8⍴16)⊤⍳12) M.cat 16⍪0⍪0⍪(8⍴16)⊤⍳24}
:EndNamespace
:Namespace cel_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
CEL∆01_TEST←{_←X 16 0 0,(8⍴16)⊤1692725126 ⋄ M.cel 16 0 0,(8⍴16)⊤1692725126}
CEL∆02_TEST←{_←X 16 0 1,(8⍴16)⊤1159264275 ⋄ M.cel 16 0 1,(8⍴16)⊤1159264275}
CEL∆03_TEST←{_←X 16 0 0,(8⍴16)⊤0 ⋄ M.cel 16 0 0,(8⍴16)⊤0}
CEL∆04_TEST←{_←X 10 0 0,(10⍴10)⊤482200 ⋄ M.cel 10 2 0,(10⍴10)⊤48219906}
CEL∆05_TEST←{_←X 10 0 1,(10⍴10)⊤382945 ⋄ M.cel 10 2 1,(10⍴10)⊤38294501}
CEL∆06_TEST←{_←X 10 0 0,(10⍴10)⊤482199 ⋄ M.cel 10 2 0,(10⍴10)⊤48219900}
CEL∆07_TEST←{_←X 65546 0 0,¯10↑4 8 2 1 9 10 ⋄ M.cel 65546 2 0,(10⍴10)⊤48219906}
CEL∆08_TEST←{_←X 10⍪0⍪0⍪(10⍴10)⊤⌈9412.29 17592.1 169.220 ⋄ M.cel 10⍪2 1 3⍪0⍪(10⍴10)⊤941229 175921 169220}
CEL∆09_TEST←{_←X 10⍪0⍪0 1 1⍪(10⍴10)⊤|⌈149.006 ¯381.149 ¯715.999 ⋄ M.cel 10⍪3⍪0 1 1⍪(10⍴10)⊤149006 381149 715999}
CEL∆10_TEST←{_←X 16 ¯3 0,(8⍴16)⊤44459 ⋄ M.cel 16 ¯3 0,(8⍴16)⊤44459}
CEL∆11_TEST←{_←X 0J10 0 0,(10⍴0J10)⊤1484J5871 ⋄ M.cel 0J10 0 0,(10⍴0J10)⊤1484J5871}
CEL∆12_TEST←{_←X 0J10 0 0,(10⍴0J10)⊤⌈1484J5871÷0J10 ⋄ M.cel 0J10 1 0,(10⍴0J10)⊤1484J5871}
CEL∆13_TEST←{_←X 0J10 0 0,(10⍴0J10)⊤⌈1484J¯5871÷0J10 ⋄ M.cel 0J10 1 0,(10⍴0J10)⊤1484J¯5871}
CEL∆14_TEST←{_←X 0J10 0 0,(10⍴0J10)⊤⌈¯1484J5871÷0J10 ⋄ M.cel 0J10 1 0,(10⍴0J10)⊤¯1484J5871}
CEL∆15_TEST←{_←X 0J10 0 0,(10⍴0J10)⊤⌈¯1484J¯5871÷0J10 ⋄ M.cel 0J10 1 0,(10⍴0J10)⊤¯1484J¯5871}
CEL∆16_TEST←{_←X 0J10⍪0⍪0⍪(10⍴0J10)⊤⌈¯1J100 ¯1J¯10000÷0J10*1 3 ⋄ M.cel 0J10⍪1 3⍪0⍪(10⍴0J10)⊤¯1J100 ¯1J¯10000}
:EndNamespace
:Namespace cis_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
CIS∆01_TEST←{_←X 0J10 11 0,14↑¯1 0J9 ¯9 ⋄ M.cis 17↑10}
CIS∆02_TEST←{_←X 0J10 13 0,14↑¯1 ⋄ M.cis 10 13 0,⍎¨'31415926535898'}
CIS∆03_TEST←{_←X 0J10 13 0,1⌽14↑2⍴0J1 ⋄ M.cis 10 13 0,⍎¨'15707963267948'}
CIS∆04_TEST←{_←X M.cry M.r2c 10 10 0,-1 0J1+.×⍎¨↑'0760572397' '9971034531' ⋄ M.cis 10 9 0,⍎¨'4636258221'}
CIS∆05_TEST←{_←X M.cry M.r2c 10 10 0,-1 0J1-.×⍎¨↑'0760572397' '9971034531' ⋄ M.cis M.sub 10 9 0,⍎¨'4636258221'}
CIS∆06_TEST←{_←X M.cry M.r2c 10 13 0,¯1 0J1+.×⍎¨↑'73151100949011' '10427436562360' ⋄ M.cis 0J10 0 0,(14⍴0J10)⊤3J¯2}
CIS∆07_TEST←{_←X M.cry M.r2c 10 14 0,-1 0J1+.×⍎¨↑'13398091492954' '01909851626113' ⋄ M.cis 0J10 0 0,(14⍴0J10)⊤¯3J2}
CIS∆08_TEST←{_←X (0J10 11 0,14↑¯1 0J9 ¯9),M.cry M.r2c 10⍪14⍪0⍪,[.5]∘+⍨-1 0J1+.×⍎¨↑'98999249660045' '14112000805987' ⋄ M.cis 10⍪0⍪0 1 0⍪(14⍴10)⊤0 3 3}
:EndNamespace
:Namespace cnj_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
CNJ∆01_TEST←{_←X 0J16 0 0,(8⍴0J16)⊤31191J¯54028 ⋄ M.cnj 0J16 0 0,(8⍴0J16)⊤31191J54028}
CNJ∆02_TEST←{_←X 0J16 0 0,(8⍴0J16)⊤31191J54028 ⋄ M.cnj⍣2⊢0J16 0 0,(8⍴0J16)⊤31191J54028}
CNJ∆03_TEST←{_←X 0J16 0 0,(8⍴0J16)⊤3643311 ⋄ M.cnj 0J16 0 0,(8⍴0J16)⊤3643311}
CNJ∆04_TEST←{_←X 16 0 0,(8⍴16)⊤3643311 ⋄ M.cnj 16 0 0,(8⍴16)⊤3643311}
CNJ∆05_TEST←{_←X 0J16 0 0,(8⍴0J16)⊤0 ⋄ M.cnj 0J16 0 0,(8⍴0J16)⊤0}
CNJ∆06_TEST←{_←X 16 0 0,(8⍴16)⊤0 ⋄ M.cnj 16 0 0,(8⍴16)⊤0}
:EndNamespace
:Namespace dec_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
DEC∆01_TEST←{_←X '25337' ⋄ M.dec 16 0 0⍪(8⍴16)⊤25337}
DEC∆02_TEST←{_←X '¯25337' ⋄ M.dec 16 0 1⍪(8⍴16)⊤25337}
DEC∆03_TEST←{_←X '1583.5625' ⋄ M.dec 16 1 0⍪(8⍴16)⊤25337}
DEC∆04_TEST←{_←X '5.864E4' ⋄ M.dec 10 ¯1 0⍪(8⍴10)⊤5864}
DEC∆05_TEST←{_←X '5.864E¯6' ⋄ M.dec 10 9 0⍪(8⍴10)⊤5864}
DEC∆06_TEST←{_←X '0.75' ⋄ M.dec 16 1 0⍪(8⍴16)⊤12}
DEC∆07_TEST←{_←X '104J57' ⋄ M.dec 0J16 0 0⍪(12⍴0J16)⊤104J57}
DEC∆08_TEST←{_←X '104J¯57' ⋄ M.dec 0J16 0 0⍪(12⍴0J16)⊤104J¯57}
DEC∆09_TEST←{_←X '¯104J57' ⋄ M.dec 0J16 0 0⍪(12⍴0J16)⊤¯104J57}
DEC∆10_TEST←{_←X '3.5625J¯6.5' ⋄ M.dec 0J16 1 0⍪(12⍴0J16)⊤104J57}
DEC∆11_TEST←{_←X '¯912J¯1664' ⋄ M.dec 0J16 ¯1 0⍪(12⍴0J16)⊤¯104J57}
DEC∆12_TEST←{_←X ↑'192' '0.75' '92' '¯92' ⋄ M.dec 16⍪¯1 1 0 0⍪0 0 0 1⍪(8⍴16)⊤12 12 92 92}
:EndNamespace
:Namespace div_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
DIV∆01_TEST←{_←X  16 33 0⍪32⍴2 13 0 ⋄ M.div 16 0 0⍪(32⍴16)⊤91}
DIV∆02_TEST←{_←X  16 33 1⍪32⍴2 13 0 ⋄ M.div 16 0 1⍪(32⍴16)⊤91}
DIV∆03_TEST←{_←X  65552 33 0⍪32⍴2 13 0 ⋄ M.div 65552 0 0⍪(32⍴16)⊤91}
DIV∆04_TEST←{_←X  16 32 0⍪32⍴15 ⋄ M.div⍨ 16 0 1⍪(32⍴16)⊤91}
DIV∆05_TEST←{_←X  16 32 0⍪32⍴15 ⋄ M.div⍨ 16 0 1⍪(32⍴16)⊤91}
DIV∆06_TEST←{_←X  16 10 0⍪(12⍴16)⊤1 ⋄  (16⍪0⍪0⍪(12⍴16)⊤58) M.sub (16⍪0⍪0⍪(12⍴16)⊤7540) M.div 16⍪0⍪0⍪(12⍴16)⊤130}
DIV∆07_TEST←{_←X  16 10 0⍪(12⍴16)⊤1 ⋄ (16⍪0⍪0⍪(12⍴16)⊤130) M.sub (16⍪0⍪0⍪(12⍴16)⊤7540) M.div 16⍪0⍪0⍪(12⍴16)⊤58}
DIV∆08_TEST←{_←X  16 10 0 ⍪32⍴2 13 0  ⋄ M.div 16 23 0⍪(32⍴16)⊤91}
DIV∆09_TEST←{_←X  16 36 0 ⍪32⍴2 13 0  ⋄ M.div 16 0 0⍪(32⍴16)⊤372736}
DIV∆10_TEST←{_←X  30 M.mov 16 0 0⍪(32⍴16)⊤91 ⋄ M.div⍣2⊢16 0 0⍪(32⍴16)⊤91}
DIV∆11_TEST←{_←X  31 M.mov 16 0 0⍪(32⍴16)⊤1 ⋄ M.div 16 0 0⍪(32⍴16)⊤1}
DIV∆12_TEST←{_←X  31 M.mov 16 0 1⍪(32⍴16)⊤1 ⋄ M.div 16 0 1⍪(32⍴16)⊤1}
DIV∆13_TEST←{_←X  31 M.mov 16 0 1⍪(32⍴16)⊤1 ⋄ (16 0 0⍪(32⍴16)⊤1) M.div 16 0 1⍪(32⍴16)⊤1}
DIV∆14_TEST←{_←X  31 M.mov 16 0 1⍪(32⍴16)⊤1 ⋄ (16 0 1⍪(32⍴16)⊤1) M.div 16 0 0⍪(32⍴16)⊤1}
DIV∆15_TEST←{_←X  1 ⋄ M.zer (16 0 0⍪(32⍴16)⊤0) M.div 16 0 0⍪(32⍴16)⊤1}
DIV∆16_TEST←{_←X  1 ⋄ M.zer (16 0 0⍪(32⍴16)⊤0) M.div 16 0 0⍪(32⍴16)⊤91}
DIV∆17_TEST←{_←X  0J16 30 0 ¯1 0J15 ¯11J1,29⍴¯10J¯3 3J6 ¯7J3 ¯3J9 ⋄ M.div 0J16 0 0⍪(32⍴0J16)⊤1J3}
DIV∆18_TEST←{_←X  16 33 0 ⍪32⍴2 13 0 ⋄ M.rea M.div 0J16 0 0⍪(32⍴0J16)⊤91}
DIV∆19_TEST←{_←X  1 ⋄ M.zer M.ima M.div⍨0J16 0 0⍪(32⍴0J16)⊤91}
DIV∆20_TEST←{_←X  29 M.mov 0J16 0 0⍪(32⍴0J16)⊤1 ⋄ M.div⍨0J16 0 0⍪(32⍴0J16)⊤1J3}
DIV∆21_TEST←{_←X  31 M.mov 0J16 0 0⍪(32⍴0J16)⊤¯1 ⋄ M.div 0J16 0 0⍪(32⍴0J16)⊤¯1}
DIV∆22_TEST←{_←X  29 M.mov 0J16 0 0⍪(32⍴0J16)⊤1 ⋄ M.div 0J16 0 0⍪(32⍴0J16)⊤1}
DIV∆23_TEST←{_←X  0J16⍪9⍪0⍪(12⍴0J16)⊤0J1 ⋄ (0J16⍪0⍪0⍪(12⍴0J16)⊤108J170) M.sub (0J16⍪0⍪0⍪(12⍴0J16)⊤6970J36136) M.div 0J16⍪0⍪0⍪(12⍴0J16)⊤170J67}
DIV∆24_TEST←{_←X  0J16⍪9⍪0⍪(12⍴0J16)⊤0 ⋄ (0J16⍪0⍪0⍪(12⍴0J16)⊤170J67) M.sub (0J16⍪0⍪0⍪(12⍴0J16)⊤6970J36136) M.div 0J16⍪0⍪0⍪(12⍴0J16)⊤108J170}
DIV∆25_TEST←{_←X  10⍪24 24 23 24 25⍪(5↑1)⍪3,⍨3,⍨(24↑1),⍨⍉2 24⍴1 4 2 8 5 7 ⋄ M.div 10⍪0⍪1 0 0 0 0⍪(24⍴10)⊤7 7 1 3 30}
DIV∆26_TEST←{_←X  16⍪11 10 10⍪0⍪(12⍴16)⊤0 1 1 ⋄ (16⍪0⍪0⍪(12⍴16)⊤8 45 49) M.sub (16⍪0⍪0⍪(12⍴16)⊤32 1260 1519) M.div 16⍪0⍪0⍪(12⍴16)⊤4 28 31}
DIV∆27_TEST←{_←X  16⍪11 10 10⍪0⍪(12⍴16)⊤1 1 1 ⋄ (16⍪0⍪0⍪(12⍴16)⊤4 28 31) M.sub (16⍪0⍪0⍪(12⍴16)⊤212 1484 1643) M.div 16⍪0⍪0⍪(12⍴16)⊤53}
DIV∆28_TEST←{_←X  16⍪9 10 9⍪0⍪(12⍴16)⊤1 2 0 ⋄ (16⍪0⍪0⍪(12⍴16)⊤344 168 903) M.sub (16⍪0⍪0⍪(12⍴16)⊤7224) M.div 16⍪0⍪0⍪(12⍴16)⊤21 43 8}
DIV∆29_TEST←{_←X  16 1 0 8 ⋄ M.div 16 0 0 2}
DIV∆30_TEST←{_←X  16 0 0 1 ⋄ M.div 16 0 0 1}
:EndNamespace
:Namespace dot_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
DOT∆01_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤3392904 ⋄ (16⍪0⍪0⍪(8⍴16)⊤632 1255 1113) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤323 1121 1601}
DOT∆02_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤3392904 ⋄ (16⍪0⍪0⍪(8⍴16)⊤323 1121 1601) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤632 1255 1113}
DOT∆03_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤0 ⋄ (16⍪0⍪0⍪(8⍴16)⊤0 0 0) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤323 1121 1601}
DOT∆04_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤323 ⋄ (16⍪0⍪0⍪(8⍴16)⊤1 0 0) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤323 323 1601}
DOT∆05_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤1121 ⋄ (16⍪0⍪0⍪(8⍴16)⊤0 1 0) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤323 1121 1601}
DOT∆06_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤1601 ⋄ (16⍪0⍪0⍪(8⍴16)⊤0 0 1) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤323 1121 1601}
DOT∆07_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤323+1121+1601 ⋄ (16⍪0⍪0⍪(8⍴16)⊤1 1 1) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤323 1121 1601}
DOT∆08_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤3392904×199 ⋄ (16⍪0⍪0⍪(8⍴16)⊤632 1255 1113) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤323 1121 1601×199}
DOT∆09_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤3392904×199 ⋄ (16⍪0⍪0⍪(8⍴16)⊤632 1255 1113×199) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤323 1121 1601}
DOT∆10_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2860749 ⋄ (16⍪0⍪0⍪(8⍴16)⊤632 1255 1113) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤1963 1024 301}
DOT∆11_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2263854 ⋄ (16⍪0⍪0⍪(8⍴16)⊤1963 1024 301) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤323 1121 1601}
DOT∆12_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤3392904+2860749 ⋄ (16⍪0⍪0⍪(8⍴16)⊤632 1255 1113) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤323 1121 1601+1963 1024 301}
DOT∆13_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤3392904+2263854 ⋄ (16⍪0⍪0⍪(8⍴16)⊤632 1255 1113+1963 1024 301) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤323 1121 1601}
DOT∆14_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤+/1963 1024 301*2 ⋄ M.add M.dot M.mul⍨16⍪0⍪0⍪(8⍴16)⊤1963 1024 301}
DOT∆15_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2 2⍴1136753 2231159 2928269 4266107
(16⍪0⍪0⍪(8⍴16)⊤2 2⍴1273 120 829 1641) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤2 2⍴761 1583 1400 1800}
DOT∆16_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤⍉2 2⍴1136753 2231159 2928269 4266107
(16⍪0⍪0⍪(8⍴16)⊤⍉2 2⍴761 1583 1400 1800) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤⍉2 2⍴1273 120 829 1641}
DOT∆17_TEST←{_←X 1 ⋄ ≡∘(0 2 1∘⍉)⍨(16⍪0⍪0⍪(8⍴16)⊤2 2⍴1273 120 829 1641) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤⍉2 2⍴1273 120 829 1641}
DOT∆18_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤∘.=⍨⍳3 ⋄ M.add M.dot M.mul⍨16⍪0⍪0⍪(8⍴16)⊤∘.=⍨⍳3}
DOT∆19_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤1273 120 ⋄ (16⍪0⍪0⍪(8⍴16)⊤1 0) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤2 2⍴1273 120 829 1641}
DOT∆20_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤829 1641 ⋄ (16⍪0⍪0⍪(8⍴16)⊤0 1) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤2 2⍴1273 120 829 1641}
DOT∆21_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤1273 829 ⋄ (16⍪0⍪0⍪(8⍴16)⊤2 2⍴1273 120 829 1641) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤1 0}
DOT∆22_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤120 1641 ⋄ (16⍪0⍪0⍪(8⍴16)⊤2 2⍴1273 120 829 1641) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤0 1}
DOT∆23_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤120 1641 ⋄ (16⍪0⍪0⍪(8⍴16)⊤2 2⍴1273 120 829 1641) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤0 1}
DOT∆24_TEST←{_←X 3 7 6 2 ⋄ 1↓⍴(16⍪0⍪0⍪(8⍴16)⊤3 7 4⍴1) M.add M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤4 6 2⍴1}
DOT∆25_TEST←{_←X 16⍪0⍪(2 2⍴0 1 0 0)⍪(8⍴16)⊤2 2⍴2020446 3401742 11944998 6741442⋄ (16⍪0⍪0⍪(8⍴16)⊤2 2⍴1017 2544 4075 3332) M.sub M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤2 2⍴3390 4082 561 2969}
DOT∆26_TEST←{_←X 16⍪0⍪1⍪(8⍴16)⊤2 2⍴13186520 4977064 11528138 8465524 ⋄ (16⍪0⍪0⍪(8⍴16)⊤2 2⍴3390 4082 561 2969) M.sub M.dot M.mul 16⍪0⍪0⍪(8⍴16)⊤2 2⍴1017 2544 4075 3332}
DOT∆27_TEST←{_←X (2 4⍴6 2 7) >.< 4 5⍴5 3 9 ⋄ (16⍪0⍪0⍪(8⍴16)⊤2 4⍴6 2 7)>M.dot M.lth 16⍪0⍪0⍪(8⍴16)⊤4 5⍴5 3 9}
DOT∆28_TEST←{_←X (⍉2 4⍴6 2 7) >.<⍨ ⍉4 5⍴5 3 9 ⋄ (16⍪0⍪0⍪(8⍴16)⊤⍉2 4⍴6 2 7)>M.dot M.lth⍨16⍪0⍪0⍪(8⍴16)⊤⍉4 5⍴5 3 9}
:EndNamespace
:Namespace drp_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
DRP∆01_TEST←{_←X 16⍪(2↓⍳4)⍪0⍪(8⍴16)⊤2↓⌽⍳4 ⋄ 2 M.drp 16⍪(⍳4)⍪0 1 0 0⍪(8⍴16)⊤⌽⍳4}
DRP∆02_TEST←{_←X 16⍪(¯2↓⍳4)⍪0 1⍪(8⍴16)⊤¯2↓⌽⍳4 ⋄ ¯2 M.drp 16⍪(⍳4)⍪0 1 0 0⍪(8⍴16)⊤⌽⍳4}
DRP∆03_TEST←{_←X 16⍪(⍳4)⍪0 1 0 0⍪(8⍴16)⊤⌽⍳4 ⋄ 0 M.drp 16⍪(⍳4)⍪0 1 0 0⍪(8⍴16)⊤⌽⍳4}
DRP∆04_TEST←{_←X 11 0⍴⍬ ⋄ 7 M.drp 16⍪(⍳4)⍪0 1 0 0⍪(8⍴16)⊤⌽⍳4}
DRP∆05_TEST←{_←X 11 0 2⍴⍬ ⋄ ¯7 1 M.drp 16⍪(3 3⍴8|⍳9)⍪(3 3⍴0 0 1)⍪(8⍴16)⊤3 3⍴⍳9}
DRP∆06_TEST←{_←X 16⍪(2 2↓3 3⍴8|⍳9)⍪(2 2↓3 3⍴0 0 1)⍪(8⍴16)⊤2 2↓3 3⍴⍳9 ⋄ 2 2 M.drp 16⍪(3 3⍴8|⍳9)⍪(3 3⍴0 0 1)⍪(8⍴16)⊤3 3⍴⍳9}
DRP∆07_TEST←{_←X 16⍪(¯2 5↓3 3⍴8|⍳9)⍪(¯2 5↓3 3⍴0 0 1)⍪(8⍴16)⊤¯2 5↓3 3⍴⍳9 ⋄ ¯2 5 M.drp 16⍪(3 3⍴8|⍳9)⍪(3 3⍴0 0 1)⍪(8⍴16)⊤3 3⍴⍳9}
DRP∆08_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2 2 2↓2 3 4⍴⍳24 ⋄ 2 2 2 M.drp 16⍪0⍪0⍪(8⍴16)⊤2 3 4⍴⍳24}
DRP∆09_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2 2 ¯2↓2 3 4⍴⍳24 ⋄ 2 2 ¯2 M.drp 16⍪0⍪0⍪(8⍴16)⊤2 3 4⍴⍳24}
:EndNamespace
:Namespace enc_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
ENC∆01_TEST←{_←X 10 0 0,0 ⋄ M.enc '0'}
ENC∆02_TEST←{_←X 10 0 0,2 6 ⋄ M.enc '26'}
ENC∆03_TEST←{_←X 10 0 1,2 6 ⋄ M.enc '¯26'}
ENC∆04_TEST←{_←X 10 3 0,3 0 7 1 4 ⋄ M.enc '30.714'}
ENC∆05_TEST←{_←X 10 ¯33 0,1 9 4 ⋄ M.enc '1.94E35'}
ENC∆06_TEST←{_←X 0J10 0 0,(5⍴0J10)⊤¯52J63 ⋄ M.enc '¯52J63'}
ENC∆07_TEST←{_←X 0J10 2 0,(6⍴0J10)⊤170J¯203 ⋄ M.enc '¯1.7J2.03'}
ENC∆08_TEST←{_←X 0J10 ¯15 0,(12⍴0J10)⊤¯209J130000000 ⋄ M.enc '1.3E23J2.09E17'}
ENC∆09_TEST←{_←X 10⍪0 0 0 3 ¯33⍪0 0 1 0 0⍪⍉↑¯5↑¨0(2 6)(2 6)(3 0 7 1 4)(1 9 4) ⋄ M.enc '0' '26' '¯26' '30.714' '1.94E35'}
ENC∆10_TEST←{_←X 10⍪0 0 0 3 ¯33⍪0 0 1 0 0⍪⍉↑¯5↑¨0(2 6)(2 6)(3 0 7 1 4)(1 9 4) ⋄ M.enc ↑'0' '26' '¯26' '30.714' '1.94E35'}
ENC∆11_TEST←{_←X 0J10⍪0 0 0 2 ¯15⍪0⍪(12⍴0J10)⊤0 ¯26 ¯52J63 170J¯203 ¯209J130000000 ⋄ M.enc '0' '¯26' '¯52J63' '¯1.7J2.03' '1.3E23J2.09E17'}
ENC∆12_TEST←{_←X 0J10⍪0 0 0 2 ¯15⍪0⍪(12⍴0J10)⊤0 ¯26 ¯52J63 170J¯203 ¯209J130000000 ⋄ M.enc ↑'0' '¯26' '¯52J63' '¯1.7J2.03' '1.3E23J2.09E17'}
:EndNamespace
:Namespace eps_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
EPS∆01_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤⍳24 ⋄ M.eps 16⍪0⍪0⍪(8⍴16)⊤2 3 4⍴⍳24}
EPS∆02_TEST←{_←X 3⍴1 ⋄ (16⍪0⍪0⍪(8⍴16)⊤⍳3) M.eps 16⍪0⍪0⍪(8⍴16)⊤⍳20}
EPS∆03_TEST←{_←X 20↑3⍴1 ⋄ (16⍪0⍪0⍪(8⍴16)⊤⍳20) M.eps 16⍪0⍪0⍪(8⍴16)⊤⍳3}
EPS∆04_TEST←{_←X 10↑7⍴1 ⋄ (16⍪0⍪0⍪(8⍴16)⊤(3×⍳10)) M.eps 16⍪0⍪0⍪(8⍴16)⊤⍳20}
EPS∆05_TEST←{_←X 20⍴1 0 0 ⋄ (16⍪0⍪0⍪(8⍴16)⊤(⍳20)) M.eps 16⍪0⍪0⍪(8⍴16)⊤3×⍳10}
EPS∆06_TEST←{_←X 1 ⋄ (16⍪0⍪0⍪(8⍴16)⊤2) M.eps 16⍪0⍪0⍪(8⍴16)⊤⍳3}
EPS∆07_TEST←{_←X ¯3↑1 ⋄ (16⍪0⍪0⍪(8⍴16)⊤⍳3) M.eps 16⍪0⍪0⍪(8⍴16)⊤2}
:EndNamespace
﻿:Namespace eql_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
EQL∆01_TEST←{_←X 0 ⋄ (16 0 0,(8⍴16)⊤3656703249) M.eql 16 0 0,(8⍴16)⊤2824542574}
EQL∆02_TEST←{_←X 0 ⋄ (16 0 0,(8⍴16)⊤2824542574) M.eql 16 0 0,(8⍴16)⊤3656703249}
EQL∆03_TEST←{_←X 0 ⋄ (65552 0 0,(8⍴16)⊤2824542574) M.eql 65552 0 0,(8⍴16)⊤3656703249}
EQL∆04_TEST←{_←X 1 ⋄ M.eql⍨16 0 0,(8⍴16)⊤2824542574}
EQL∆05_TEST←{_←X 0 ⋄ (16 0 0,(8⍴16)⊤0) M.eql 16 0 0,(8⍴16)⊤2824542574}
EQL∆06_TEST←{_←X 0 ⋄ (16 0 0,(8⍴16)⊤2824542574) M.eql 16 0 0,(8⍴16)⊤0}
EQL∆07_TEST←{_←X 1 ⋄ M.eql⍨16 0 0,(8⍴16)⊤0}
EQL∆08_TEST←{_←X 0 ⋄ (65552 0 0,(8⍴16)⊤0) M.eql 65552 0 0,(8⍴16)⊤1}
EQL∆09_TEST←{_←X 0 ⋄ (65552 0 0,(8⍴16)⊤1) M.eql 65552 0 0,(8⍴16)⊤0}
EQL∆10_TEST←{_←X 0 0 1 1 0 ⋄ (65552⍪0⍪0⍪(8⍴16)⊤65 122 257 305 149) M.eql 65552⍪0⍪0⍪(8⍴16)⊤108 146 257 305 498}
EQL∆11_TEST←{_←X 0 ⋄ (16 0 0,(8⍴16)⊤0) M.eql 16 0 1,(8⍴16)⊤1}
EQL∆12_TEST←{_←X 0 ⋄ (16 0 1,(8⍴16)⊤1) M.eql 16 0 0,(8⍴16)⊤0}
EQL∆13_TEST←{_←X 0 ⋄ (65552 0 0,(8⍴16)⊤0) M.eql 65552 0 1,(8⍴16)⊤1}
EQL∆14_TEST←{_←X 0 ⋄ (65552 0 1,(8⍴16)⊤1) M.eql 65552 0 0,(8⍴16)⊤0}
EQL∆15_TEST←{_←X 0 ⋄ (10 0 1,⍳8) M.eql 10 0 0,⍳8}
EQL∆16_TEST←{_←X 0 ⋄ (10 1 0,⍳8) M.eql 10 0 0,⍳8}
EQL∆17_TEST←{_←X 0 ⋄ (10 1 0,⍳8) M.eql 10 0 1,⍳8}
EQL∆18_TEST←{_←X 1 ⋄ (0J10 1 0,(8⍴0J10)⊤¯500J2280) M.eql 0J10 0 0,(8⍴0J10)⊤228J50}
:EndNamespace
:Namespace exp_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
EXP∆01_TEST←{_←X 10 15 0,16↑1 ⋄ M.exp 10 0 0,(16⍴10)⊤0}
EXP∆02_TEST←{_←X 10 15 0,⍎¨'2718281828459045' ⋄ M.exp 10 0 0,(16⍴10)⊤1}
EXP∆03_TEST←{_←X 10 7 0,(8⍴10)⊤27182818 ⋄ M.exp 10 8 0⍪8⍴9}
EXP∆04_TEST←{_←X 10 ¯2 0,(8⍴10)⊤42949639 ⋄ M.exp 10 6 0,(8⍴10)⊤22180709}
EXP∆05_TEST←{_←X 10 2 0,⍎¨'1068647458152446' ⋄ M.exp 10 0 0,(16⍴10)⊤30}
EXP∆06_TEST←{_←X 10 29 0,⍎¨'9357622968840174' ⋄ M.exp 10 0 1,(16⍴10)⊤30}
EXP∆07_TEST←{_←X 10 12 0,⍎¨'8103083927575380' ⋄ (M.exp 10 0 0,(16⍴10)⊤6) M.mul M.exp 10 0 0,(16⍴10)⊤3}
EXP∆08_TEST←{_←X 10 15 0,⍎¨'1008677432528015' ⋄ M.exp 10 5 0,(16⍴10)⊤864}
EXP∆09_TEST←{_←X M.cry M.r2c 10 15 0⍪1 0J1-.× ⍎¨↑'0154251449887584' '0988031624092861' ⋄ M.exp 0J10 0 0,(16⍴0J10)⊤0J30}
EXP∆10_TEST←{_←X M.cry M.r2c 10 15 0⍪1 0J1+.× ⍎¨↑'0154251449887584' '0988031624092861' ⋄ M.exp 0J10 0 0,(16⍴0J10)⊤0J¯30}
EXP∆11_TEST←{_←X 0J10 15 0,16↑¯1⋄ M.exp M.pie 0J10 0 0,(16⍴0J10)⊤0J1}
EXP∆12_TEST←{_←X M.cry M.r2c 10 14 0⍪1 0J1-.× ⍎¨↑'0309822319217242' '1984514566699421' ⋄ (M.exp 10 0 0,(16⍴10)⊤3) M.mul M.exp 0J10 0 0,(16⍴0J10)⊤0J30}
EXP∆13_TEST←{_←X M.cry M.r2c 10 16 0,1 0J1+.×⍎¨↑'9920195144639593' '0049601389068795' ⋄ M.exp 0J10 3 0,(16⍴0J10)⊤5J8}
EXP∆14_TEST←{_←X 10⍪15 18 15⍪0⍪(16↑1),⍉⍎¨↑'6737946999085467' '1024290317890621' ⋄ M.exp 10⍪0 0 3⍪0 1 0⍪(16⍴10)⊤0 5 24}
:EndNamespace
:Namespace flo_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
FLO∆01_TEST←{_←X 16 0 0,(8⍴16)⊤6411780852 ⋄ M.flo 16 0 0,(8⍴16)⊤6411780852}
FLO∆02_TEST←{_←X 16 0 1,(8⍴16)⊤6192784840 ⋄ M.flo 16 0 1,(8⍴16)⊤6192784840}
FLO∆03_TEST←{_←X 16 0 0,(8⍴16)⊤0 ⋄ M.flo 16 0 0,(8⍴16)⊤0}
FLO∆04_TEST←{_←X 10 0 0,(10⍴10)⊤482194 ⋄ M.flo 10 2 0,(10⍴10)⊤48219406}
FLO∆05_TEST←{_←X 10 0 1,(10⍴10)⊤382950 ⋄ M.flo 10 2 1,(10⍴10)⊤38294901}
FLO∆06_TEST←{_←X 10 0 1,(10⍴10)⊤382949 ⋄ M.flo 10 2 1,(10⍴10)⊤38294900}
FLO∆07_TEST←{_←X 65546 0 1,¯10↑3 8 2 9 4 10 ⋄ M.flo 65546 2 1,(10⍴10)⊤38294901}
FLO∆08_TEST←{_←X 10⍪0⍪0⍪(10⍴10)⊤⌊17 113147 416 ⋄ M.flo 10⍪4 0 2⍪0⍪(10⍴10)⊤179273 113147 41659}
FLO∆09_TEST←{_←X 10⍪0⍪0 0 1⍪(10⍴10)⊤1792 1131 417 ⋄ M.flo 10⍪2⍪0 0 1⍪(10⍴10)⊤179273 113147 41659}
FLO∆10_TEST←{_←X 16 ¯3 0,(8⍴16)⊤44459 ⋄ M.flo 16 ¯3 0,(8⍴16)⊤44459}
FLO∆11_TEST←{_←X 0J10 0 0,(10⍴0J10)⊤1484J5871 ⋄ M.flo 0J10 0 0,(10⍴0J10)⊤1484J5871}
FLO∆12_TEST←{_←X 0J10 0 0,(10⍴0J10)⊤⌊1484J5871÷0J10 ⋄ M.flo 0J10 1 0,(10⍴0J10)⊤1484J5871}
FLO∆13_TEST←{_←X 0J10 0 0,(10⍴0J10)⊤⌊1484J¯5871÷0J10 ⋄ M.flo 0J10 1 0,(10⍴0J10)⊤1484J¯5871}
FLO∆14_TEST←{_←X 0J10 0 0,(10⍴0J10)⊤⌊¯1484J5871÷0J10 ⋄ M.flo 0J10 1 0,(10⍴0J10)⊤¯1484J5871}
FLO∆15_TEST←{_←X 0J10 0 0,(10⍴0J10)⊤⌊¯1484J¯5871÷0J10 ⋄ M.flo 0J10 1 0,(10⍴0J10)⊤¯1484J¯5871}
FLO∆16_TEST←{_←X 0J10⍪0⍪0⍪(10⍴0J10)⊤⌊¯1J100 ¯1J¯10000÷0J10*1 3 ⋄ M.flo 0J10⍪1 3⍪0⍪(10⍴0J10)⊤¯1J100 ¯1J¯10000}
:EndNamespace
﻿:Namespace gcd_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
GCD∆01_TEST←{_←X 16⍪0⍪0⍪(16⍴16)⊤53442 1 0 ⋄ (16 0 0,(16⍴16)⊤53442) M.gcd 16 0 0,(16⍴16)⊤0}
GCD∆02_TEST←{_←X 16⍪0⍪0⍪(16⍴16)⊤53442 0 1 ⋄ (16 0 0,(16⍴16)⊤0) M.gcd 16 0 0,(16⍴16)⊤53442}
GCD∆03_TEST←{_←X 16⍪0⍪0⍪(16⍴16)⊤1 0 1 ⋄ (16 0 0,(16⍴16)⊤53442) M.gcd 16 0 0,(16⍴16)⊤1}
GCD∆04_TEST←{_←X 16⍪0⍪0⍪(16⍴16)⊤1 1 0 ⋄ (16 0 0,(16⍴16)⊤1) M.gcd 16 0 0,(16⍴16)⊤53442}
GCD∆05_TEST←{_←X 16⍪0⍪0 0 1⍪(16⍴16)⊤1 82012418 ¯569664493 ⋄ (16 0 0,(16⍴16)⊤3516352793) M.gcd 16 0 0,(16⍴16)⊤506235861}
GCD∆06_TEST←{_←X 16⍪0⍪0 1 0⍪(16⍴16)⊤1 ¯569664493 82012418 ⋄ (16 0 0,(16⍴16)⊤506235861) M.gcd 16 0 0,(16⍴16)⊤3516352793}
GCD∆07_TEST←{_←X 16⍪0⍪0 0 1⍪(16⍴16)⊤135 3045569 ¯4116137 ⋄ (16 0 0,(16⍴16)⊤506235861) M.gcd 16 0 0,(16⍴16)⊤3516352793}
GCD∆08_TEST←{_←X 16⍪0⍪0 1 0⍪(16⍴16)⊤135 ¯4116137 3045569 ⋄ (16 0 0,(16⍴16)⊤3516352793) M.gcd 16 0 0,(16⍴16)⊤506235861}
GCD∆09_TEST←{_←X 16⍪0⍪(⍉2 3⍴0 0 1)⍪(16⍴16)⊤⍉2 3⍴1 82012418 ¯569664493 1 1 ¯1758176396
(16 0 0,(16⍴16)⊤3516352793) M.gcd 16 0 0,(16⍴16)⊤506235861 2}
GCD∆10_TEST←{_←X 16⍪0⍪(⍉2 3⍴0 1 0)⍪(16⍴16)⊤⍉2 3⍴1 ¯569664493 82012418 1 ¯1758176396 1
(16 0 0,(16⍴16)⊤506235861 2) M.gcd 16 0 0,(16⍴16)⊤3516352793}
:EndNamespace
﻿:Namespace geq_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
GEQ∆01_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤1187907038) M.geq 16 0 0⍪(8⍴16)⊤952750564}
GEQ∆02_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤952750564) M.geq 16 0 0⍪(8⍴16)⊤1187907038}
GEQ∆03_TEST←{_←X 0 ⋄ (65552 0 0⍪(8⍴16)⊤952750564) M.geq 65552 0 0⍪(8⍴16)⊤1187907038}
GEQ∆04_TEST←{_←X 1 ⋄ M.geq⍨16 0 0⍪(8⍴16)⊤952750564}
GEQ∆05_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤0) M.geq 16 0 0⍪(8⍴16)⊤952750564}
GEQ∆06_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤952750564) M.geq 16 0 0⍪(8⍴16)⊤0}
GEQ∆07_TEST←{_←X 1 ⋄ M.geq⍨16 0 0⍪(8⍴16)⊤0}
GEQ∆08_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤0) M.geq 16 0 0⍪(8⍴16)⊤1}
GEQ∆09_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤1) M.geq 16 0 0⍪(8⍴16)⊤0}
GEQ∆10_TEST←{_←X 0 0 1 1 0 ⋄ (65552⍪0⍪0⍪(8⍴16)⊤65 122 406 388 149) M.geq 65552⍪0⍪0⍪(8⍴16)⊤108 146 257 305 498}
GEQ∆11_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤0) M.geq 16 0 1⍪(8⍴16)⊤¯1+2*32}
GEQ∆12_TEST←{_←X 0 ⋄ (16 0 1⍪(8⍴16)⊤¯1+2*32) M.geq 16 0 0⍪(8⍴16)⊤0}
GEQ∆13_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤0) M.geq 16 0 0⍪(8⍴16)⊤¯1+2*32}
GEQ∆14_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤¯1+2*32) M.geq 16 0 0⍪(8⍴16)⊤0}
GEQ∆15_TEST←{_←X 1 ⋄ (35↑65552) M.geq 65552 0 0⍪¯32↑¯1}
GEQ∆16_TEST←{_←X 0 ⋄ (65552 0 0⍪¯32↑¯1) M.geq 35↑65552}
GEQ∆17_TEST←{_←X 0 0 1 1 0 ⋄ (16⍪0⍪0⍪(8⍴16)⊤65 122 406 388 149) M.geq 16 0 0,(8⍴16)⊤388}
GEQ∆18_TEST←{_←X 1 1 0 1 1 ⋄ (16 0 0,(8⍴16)⊤388) M.geq 16⍪0⍪0⍪(8⍴16)⊤65 122 406 388 149}
GEQ∆19_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤0) M.geq 16 8 0⍪(8⍴16)⊤1715283078}
GEQ∆20_TEST←{_←X 1 ⋄ (16 8 0⍪(8⍴16)⊤1715283078) M.geq 16 8 0⍪(8⍴16)⊤0}
:EndNamespace
﻿:Namespace gth_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
GTH∆01_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤1187907038) M.gth 16 0 0⍪(8⍴16)⊤952750564}
GTH∆02_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤952750564) M.gth 16 0 0⍪(8⍴16)⊤1187907038}
GTH∆03_TEST←{_←X 0 ⋄ (65552 0 0⍪(8⍴16)⊤952750564) M.gth 65552 0 0⍪(8⍴16)⊤1187907038}
GTH∆04_TEST←{_←X 0 ⋄ M.gth⍨16 0 0⍪(8⍴16)⊤952750564}
GTH∆05_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤0) M.gth 16 0 0⍪(8⍴16)⊤952750564}
GTH∆06_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤952750564) M.gth 16 0 0⍪(8⍴16)⊤0}
GTH∆07_TEST←{_←X 0 ⋄ M.gth⍨16 0 0⍪(8⍴16)⊤0}
GTH∆08_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤0) M.gth 16 0 0⍪(8⍴16)⊤1}
GTH∆09_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤1) M.gth 16 0 0⍪(8⍴16)⊤0}
GTH∆10_TEST←{_←X 0 0 1 1 0 ⋄ (65552⍪0⍪0⍪(8⍴16)⊤65 122 406 388 149) M.gth 65552⍪0⍪0⍪(8⍴16)⊤108 146 257 305 498}
GTH∆11_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤0) M.gth 16 0 1⍪(8⍴16)⊤¯1+2*32}
GTH∆12_TEST←{_←X 0 ⋄ (16 0 1⍪(8⍴16)⊤¯1+2*32) M.gth 16 0 0⍪(8⍴16)⊤0}
GTH∆13_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤0) M.gth 16 0 0⍪(8⍴16)⊤¯1+2*32}
GTH∆14_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤¯1+2*32) M.gth 16 0 0⍪(8⍴16)⊤0}
GTH∆15_TEST←{_←X 1 ⋄ (35↑65552) M.gth 65552 0 0⍪¯32↑¯1}
GTH∆16_TEST←{_←X 0 ⋄ (65552 0 0⍪¯32↑¯1) M.gth 35↑65552}
GTH∆17_TEST←{_←X 0 0 1 0 0 ⋄ (16⍪0⍪0⍪(8⍴16)⊤65 122 406 388 149) M.gth 16 0 0,(8⍴16)⊤388}
GTH∆18_TEST←{_←X 1 1 0 0 1 ⋄ (16 0 0,(8⍴16)⊤388) M.gth 16⍪0⍪0⍪(8⍴16)⊤65 122 406 388 149}
GTH∆19_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤0) M.gth 16 8 0⍪(8⍴16)⊤1715283078}
GTH∆20_TEST←{_←X 1 ⋄ (16 8 0⍪(8⍴16)⊤1715283078) M.gth 16 8 0⍪(8⍴16)⊤0}
:EndNamespace
﻿:Namespace hex_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
HEX∆01_TEST←{_←X'0123456789abcdef' ⋄ M.hex ,⍉(4⍴2)⊤⍳16}
HEX∆02_TEST←{_←X'0123456789abcdef' ⋄ M.hex ⍳16}
HEX∆03_TEST←{x←'000102030405060708090a0b0c0d0e0f'
_←X x,'101112131415161718191a1b1c1d1e1f'
8 M.hex ⍳32}
HEX∆04_TEST←{_←X'000102030405060708090a0b0c0d0e0f' ⋄ 8 M.hex ⍳16}
HEX∆05_TEST←{_←X'01234' ⋄ 5 M.hex 0 4 17 20}
HEX∆06_TEST←{_←X'01234b8' ⋄ 5 M.hex 0 4 17 20 23} ⍝ Credit: Nicolle's crazy
:EndNamespace
:Namespace ima_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
IMA∆01_TEST←{_←X 16 0 0,(8⍴0) ⋄ M.ima 16 0 0,(8⍴16)⊤4271680396}
IMA∆02_TEST←{_←X 16 0 0,(8⍴0) ⋄ M.ima 16 0 1,(8⍴16)⊤¯4271680396}
IMA∆03_TEST←{_←X 16 0 0,(8⍴0) ⋄ M.ima 0J16 0 0,(8⍴0J16)⊤4271680396}
IMA∆04_TEST←{_←X 16 0 0,(8⍴0) ⋄ M.ima 0J16 0 0,(8⍴0J16)⊤¯4271680396}
IMA∆05_TEST←{_←X 16 0 0,(8⍴16)⊤8980 ⋄ M.ima 0J16 0 0,(8⍴0J16)⊤5937J8980}
IMA∆06_TEST←{_←X 16 0 0,(8⍴16)⊤8980 ⋄ M.ima 0J16 0 0,(8⍴0J16)⊤¯5937J8980}
IMA∆07_TEST←{_←X 16 0 1,(8⍴16)⊤8980 ⋄ M.ima 0J16 0 0,(8⍴0J16)⊤¯5937J¯8980}
IMA∆08_TEST←{_←X 16 0 1,(8⍴16)⊤8980 ⋄ M.ima 0J16 0 0,(8⍴0J16)⊤5937J¯8980}
IMA∆09_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤622 430 782 ⋄ M.ima 0J16⍪0⍪0⍪(8⍴0J16)⊤766J622 701J430 83J782}
IMA∆10_TEST←{_←X 10 0 0,(8⍴0) ⋄ M.ima 10 2 0,(8⍴10)⊤4271680396}
IMA∆11_TEST←{_←X 10 2 0,(8⍴0) ⋄ M.ima 0J10 2 0,(8⍴0J10)⊤4271680396}
IMA∆12_TEST←{_←X 10 2 1,(8⍴10)⊤8980 ⋄ M.ima 0J10 2 0,(8⍴0J10)⊤5937J8980}
IMA∆13_TEST←{_←X 10 1 0,(12⍴10)⊤100 ⋄ M.ima 0J10 1 0,(12⍴0J10)⊤0J10*2}
IMA∆14_TEST←{_←X 10⍪1 3 2 1⍪0 1 1 0⍪(12⍴10)⊤0,10*6 5 6 ⋄ M.ima 0J10⍪1 3 2 1⍪0⍪(12⍴0J10)⊤0J10*3 6 5 6}
IMA∆15_TEST←{_←X 10 ¯2 1,(8⍴10)⊤8980 ⋄ M.ima 0J10 ¯2 0,(8⍴0J10)⊤5937J8980}
IMA∆16_TEST←{_←X 10 15 0,(16⍴0) ⋄ M.ima M.r2c 15 M.mov 10 2 0,(16⍴10)⊤471}
IMA∆17_TEST←{_←X 10 14 0,(15⍴0) ⋄ M.ima M.r2c 14 M.mov 10 2 0,(15⍴10)⊤471}
IMA∆18_TEST←{_←X 10 13 0,(14⍴0) ⋄ M.ima M.r2c 13 M.mov 10 2 0,(14⍴10)⊤471}
IMA∆19_TEST←{_←X 10 12 0,(13⍴0) ⋄ M.ima M.r2c 12 M.mov 10 2 0,(13⍴10)⊤471}
:EndNamespace
:Namespace ind_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
IND∆01_TEST←{_←X 4 ⋄ (16⍪0⍪0⍪(8⍴16)⊤(8⍴20 14 25 28 30)) M.ind 16⍪0⍪0⍪(8⍴16)⊤30}
IND∆02_TEST←{_←X 2 ⋄ (16⍪0⍪0⍪(8⍴16)⊤(8⍴20 14 25 28 30)) M.ind 16⍪0⍪0⍪(8⍴16)⊤25}
IND∆03_TEST←{_←X 8 ⋄ (16⍪0⍪0⍪(8⍴16)⊤(8⍴20 14 25 28 30)) M.ind 16⍪0⍪0⍪(8⍴16)⊤54}
IND∆04_TEST←{_←X 8 2 4 ⋄ (16⍪0⍪0⍪(8⍴16)⊤(8⍴20 14 25 28 30)) M.ind 16⍪0⍪0⍪(8⍴16)⊤54 25 30}
IND∆05_TEST←{_←X 1 ⋄ (16⍪0⍪0⍪(8⍴16)⊤(8 2⍴20 14 25 28 30)) M.ind 16⍪0⍪0⍪(8⍴16)⊤25 28}
IND∆06_TEST←{_←X 8 ⋄ (16⍪0⍪0⍪(8⍴16)⊤(8 2⍴20 14 25 28 30)) M.ind 16⍪0⍪0⍪(8⍴16)⊤61 39}
IND∆07_TEST←{_←X 3 ⋄ (16⍪0⍪0⍪(8⍴16)⊤(4 2⍴20 14 25 28 30)) M.ind 16⍪0⍪0⍪(8⍴16)⊤14 25}
IND∆08_TEST←{_←X 1 4 3 ⋄ (16⍪0⍪0⍪(8⍴16)⊤(4 2⍴20 14 25 28 30)) M.ind 16⍪0⍪0⍪(8⍴16)⊤3 2⍴25 28 61 39 14 25}
:EndNamespace
﻿:Namespace leq_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
LEQ∆01_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤1187907038) M.leq 16 0 0⍪(8⍴16)⊤952750564}
LEQ∆02_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤952750564) M.leq 16 0 0⍪(8⍴16)⊤1187907038}
LEQ∆03_TEST←{_←X 1 ⋄ (65552 0 0⍪(8⍴16)⊤952750564) M.leq 65552 0 0⍪(8⍴16)⊤1187907038}
LEQ∆04_TEST←{_←X 1 ⋄ M.leq⍨16 0 0⍪(8⍴16)⊤952750564}
LEQ∆05_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤0) M.leq 16 0 0⍪(8⍴16)⊤952750564}
LEQ∆06_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤952750564) M.leq 16 0 0⍪(8⍴16)⊤0}
LEQ∆07_TEST←{_←X 1 ⋄ M.leq⍨16 0 0⍪(8⍴16)⊤0}
LEQ∆08_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤0) M.leq 16 0 0⍪(8⍴16)⊤1}
LEQ∆09_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤1) M.leq 16 0 0⍪(8⍴16)⊤0}
LEQ∆10_TEST←{_←X 1 1 0 0 1 ⋄ (65552⍪0⍪0⍪(8⍴16)⊤65 122 406 388 149) M.leq 65552⍪0⍪0⍪(8⍴16)⊤108 146 257 305 498}
LEQ∆11_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤0) M.leq 16 0 1⍪(8⍴16)⊤¯1+2*32}
LEQ∆12_TEST←{_←X 1 ⋄ (16 0 1⍪(8⍴16)⊤¯1+2*32) M.leq 16 0 0⍪(8⍴16)⊤0}
LEQ∆13_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤0) M.leq 16 0 0⍪(8⍴16)⊤¯1+2*32}
LEQ∆14_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤¯1+2*32) M.leq 16 0 0⍪(8⍴16)⊤0}
LEQ∆15_TEST←{_←X 0 ⋄ (35↑65552) M.leq 65552 0 0⍪¯32↑¯1}
LEQ∆16_TEST←{_←X 1 ⋄ (65552 0 0⍪¯32↑¯1) M.leq 35↑65552}
LEQ∆17_TEST←{_←X 1 1 0 1 1 ⋄ (16⍪0⍪0⍪(8⍴16)⊤65 122 406 388 149) M.leq 16 0 0,(8⍴16)⊤388}
LEQ∆18_TEST←{_←X 0 0 1 1 0 ⋄ (16 0 0,(8⍴16)⊤388) M.leq 16⍪0⍪0⍪(8⍴16)⊤65 122 406 388 149}
LEQ∆19_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤0) M.leq 16 8 0⍪(8⍴16)⊤1715283078}
LEQ∆20_TEST←{_←X 0 ⋄ (16 8 0⍪(8⍴16)⊤1715283078) M.leq 16 8 0⍪(8⍴16)⊤0}
:EndNamespace
﻿:Namespace lth_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
LTH∆01_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤1187907038) M.lth 16 0 0⍪(8⍴16)⊤952750564}
LTH∆02_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤952750564) M.lth 16 0 0⍪(8⍴16)⊤1187907038}
LTH∆03_TEST←{_←X 1 ⋄ (65552 0 0⍪(8⍴16)⊤952750564) M.lth 65552 0 0⍪(8⍴16)⊤1187907038}
LTH∆04_TEST←{_←X 0 ⋄ M.lth⍨16 0 0⍪(8⍴16)⊤952750564}
LTH∆05_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤0) M.lth 16 0 0⍪(8⍴16)⊤952750564}
LTH∆06_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤952750564) M.lth 16 0 0⍪(8⍴16)⊤0}
LTH∆07_TEST←{_←X 0 ⋄ M.lth⍨16 0 0⍪(8⍴16)⊤0}
LTH∆08_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤0) M.lth 16 0 0⍪(8⍴16)⊤1}
LTH∆09_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤1) M.lth 16 0 0⍪(8⍴16)⊤0}
LTH∆10_TEST←{_←X 1 1 0 0 1 ⋄ (65552⍪0⍪0⍪(8⍴16)⊤65 122 406 388 149) M.lth 65552⍪0⍪0⍪(8⍴16)⊤108 146 257 305 498}
LTH∆11_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤0) M.lth 16 0 1⍪(8⍴16)⊤¯1+2*32}
LTH∆12_TEST←{_←X 1 ⋄ (16 0 1⍪(8⍴16)⊤¯1+2*32) M.lth 16 0 0⍪(8⍴16)⊤0}
LTH∆13_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤0) M.lth 16 0 0⍪(8⍴16)⊤¯1+2*32}
LTH∆14_TEST←{_←X 0 ⋄ (16 0 0⍪(8⍴16)⊤¯1+2*32) M.lth 16 0 0⍪(8⍴16)⊤0}
LTH∆15_TEST←{_←X 0 ⋄ (35↑65552) M.lth 65552 0 0⍪¯32↑¯1}
LTH∆16_TEST←{_←X 1 ⋄ (65552 0 0⍪¯32↑¯1) M.lth 35↑65552}
LTH∆17_TEST←{_←X 1 1 0 0 1 ⋄ (16⍪0⍪0⍪(8⍴16)⊤65 122 406 388 149) M.lth 16 0 0,(8⍴16)⊤388}
LTH∆18_TEST←{_←X 0 0 1 0 0 ⋄ (16 0 0,(8⍴16)⊤388) M.lth 16⍪0⍪0⍪(8⍴16)⊤65 122 406 388 149}
LTH∆19_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤0) M.lth 16 8 0⍪(8⍴16)⊤1715283078}
LTH∆20_TEST←{_←X 0 ⋄ (16 8 0⍪(8⍴16)⊤1715283078) M.lth 16 8 0⍪(8⍴16)⊤0}
:EndNamespace
﻿:Namespace max_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
MAX∆01_TEST←{_←X 16 0 0,(8⍴16)⊤3678667686 ⋄ (16 0 0,(8⍴16)⊤3678667686) M.max 16 0 0,(8⍴16)⊤1869131410}
MAX∆02_TEST←{_←X 16 0 0,(8⍴16)⊤3678667686 ⋄ (16 0 0,(8⍴16)⊤1869131410) M.max 16 0 0,(8⍴16)⊤3678667686}
MAX∆03_TEST←{_←X 16 0 0,(8⍴16)⊤3678667686 ⋄ (16 0 0,(8⍴16)⊤3678667686) M.max 16 0 0,(8⍴16)⊤3678667686}
MAX∆04_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2410 4007 3652 2984 ⋄ (16⍪0⍪0⍪(8⍴16)⊤1467 4007 3652 1442) M.max 16⍪0⍪0⍪(8⍴16)⊤2410 3125 571 2984}
MAX∆05_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤(2 2⍴2410 4007 3652 2984) ⋄ (16⍪0⍪0⍪(8⍴16)⊤(2 2)⍴1467 4007 3652 1442) M.max 16⍪0⍪0⍪(8⍴16)⊤(2 2)⍴2410 3125 571 2984}
MAX∆06_TEST←{_←X 65552 0 0,(8⍴16)⊤1 ⋄ (65552 0 0,(8⍴16)⊤1) M.max 65552 0 0,(8⍴16)⊤0}
MAX∆07_TEST←{_←X 65552 0 0,(8⍴16)⊤1 ⋄ (65552 0 0,(8⍴16)⊤0) M.max 65552 0 0,(8⍴16)⊤1}
MAX∆08_TEST←{_←X 16 0 0⍪(8⍴16)⊤0 ⋄ (16 0 1,(8⍴16)⊤1) M.max 16 0 0,(8⍴16)⊤0}
MAX∆09_TEST←{_←X 16 0 0⍪(8⍴16)⊤0 ⋄ (16 0 0,(8⍴16)⊤0) M.max 16 0 1,(8⍴16)⊤1}
MAX∆10_TEST←{_←X 16 0 0⍪(8⍴16)⊤0 ⋄ (16 0 1,(8⍴16)⊤1) M.max 65552 0 0,(8⍴16)⊤0}
MAX∆11_TEST←{_←X 16 0 0⍪(8⍴16)⊤0 ⋄ (65552 0 1,(8⍴16)⊤1) M.max 16 0 0,(8⍴16)⊤0}
MAX∆12_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2410 3125 746 2984 ⋄ (16 0 0,(8⍴16)⊤746) M.max 16⍪0⍪0⍪(8⍴16)⊤2410 3125 571 2984}
MAX∆13_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2410 3125 746 2984 ⋄ (16⍪0⍪0⍪(8⍴16)⊤2410 3125 571 2984) M.max 16 0 0,(8⍴16)⊤746}
MAX∆14_TEST←{_←X 16 8 0,(8⍴16)⊤46720940 ⋄ (16 0 0,(8⍴16)⊤0) M.max 16 8 0,(8⍴16)⊤46720940}
MAX∆15_TEST←{_←X 16 0 0,(8⍴16)⊤0 ⋄ (16 0 0,(8⍴16)⊤0) M.max 16 8 1,(8⍴16)⊤46720940}
:EndNamespace
﻿:Namespace mex_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
MEX∆01_TEST←{_←X 16 0 0,(4⍴16)⊤15155 ⋄ (16 0 0,(4⍴16)⊤25947)((16 0 0,(4⍴16)⊤65267) M.mex) 16 0 0,(4⍴16)⊤4}
MEX∆02_TEST←{_←X 16 0 0,(4⍴16)⊤1 ⋄ (16 0 0,(4⍴16)⊤65266)((16 0 0,(4⍴16)⊤65267) M.mex) 16 0 0,(4⍴16)⊤2}
MEX∆03_TEST←{_←X 16 0 0,(4⍴16)⊤4 ⋄ (16 0 0,(4⍴16)⊤1)((16 0 0,(4⍴16)⊤65267) M.mex) 16 0 0,(4⍴16)⊤4}
MEX∆04_TEST←{_←X 16 0 0,(4⍴16)⊤4 ⋄ (16 0 0,(4⍴16)⊤65267)((16 0 0,(4⍴16)⊤65267) M.mex) 16 0 0,(4⍴16)⊤4}
MEX∆05_TEST←{_←X 16 0 0,(4⍴16)⊤1024 ⋄ (16 0 0,(4⍴16)⊤5)((16 0 0,(4⍴16)⊤65267) M.mex) 16 0 0,(4⍴16)⊤4}
MEX∆06_TEST←{_←X 16⍪0⍪0⍪(4⍴16)⊤14433 60801 50933
(16⍪0⍪0⍪(4⍴16)⊤89 70 95)((16 0 0,(4⍴16)⊤65267) M.mex) 16 0 0,(4⍴16)⊤4}
MEX∆07_TEST←{_←X 16⍪0⍪0⍪(4⍴16)⊤19216 9923 37408
(16 0 0,(4⍴16)⊤796)((16 0 0,(4⍴16)⊤65267) M.mex) 16⍪0⍪0⍪(4⍴16)⊤22 58 12}
MEX∆08_TEST←{_←X 16 0 0,(4⍴16)⊤1 ⋄ (16 0 0,(4⍴16)⊤37516)((16 0 0,(4⍴16)⊤37909) M.mex) 16 0 0,(4⍴16)⊤151}
MEX∆09_TEST←{_←X 16 0 0,(4⍴16)⊤167 ⋄ (16 0 0,(4⍴16)⊤227)((16 0 0,(4⍴16)⊤37909) M.mex) 16 0 0,(4⍴16)⊤167}
MEX∆10_TEST←{_←X 16 0 0,(4⍴16)⊤227 ⋄ (16 0 0,(4⍴16)⊤167)((16 0 0,(4⍴16)⊤37909) M.mex) 16 0 0,(4⍴16)⊤227}
MEX∆11_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤1 2998219536 ⋄ (16⍪0⍪0⍪(8⍴16)⊤3337926832 3337926834)((16⍪0⍪0⍪(8⍴16)⊤3337926833 3337926835)M.mex)16 0 0,(8⍴16)⊤234}
MEX∆12_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤1 2998219536 1206 ⋄ (16⍪0⍪0⍪(8⍴16)⊤3337926832 3337926834 1718)((16⍪0⍪0⍪(8⍴16)⊤3337926833 3337926835 1719)M.mex)16 0 0,(8⍴16)⊤234}
:EndNamespace
﻿:Namespace min_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
MIN∆01_TEST←{_←X 16 0 0,(8⍴16)⊤1869131410 ⋄ (16 0 0,(8⍴16)⊤3678667686) M.min 16 0 0,(8⍴16)⊤1869131410}
MIN∆02_TEST←{_←X 16 0 0,(8⍴16)⊤1869131410 ⋄ (16 0 0,(8⍴16)⊤1869131410) M.min 16 0 0,(8⍴16)⊤3678667686}
MIN∆03_TEST←{_←X 16 0 0,(8⍴16)⊤3678667686 ⋄ (16 0 0,(8⍴16)⊤3678667686) M.min 16 0 0,(8⍴16)⊤3678667686}
MIN∆04_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤1467 3125 571 1442 ⋄ (16⍪0⍪0⍪(8⍴16)⊤1467 4007 3652 1442) M.min 16⍪0⍪0⍪(8⍴16)⊤2410 3125 571 2984}
MIN∆05_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤(2 2⍴1467 3125 571 1442) ⋄ (16⍪0⍪0⍪(8⍴16)⊤(2 2)⍴1467 4007 3652 1442) M.min 16⍪0⍪0⍪(8⍴16)⊤(2 2)⍴2410 3125 571 2984}
MIN∆06_TEST←{_←X 65552 0 0,(8⍴16)⊤0 ⋄ (65552 0 0,(8⍴16)⊤1) M.min 65552 0 0,(8⍴16)⊤0}
MIN∆07_TEST←{_←X 65552 0 0,(8⍴16)⊤0 ⋄ (65552 0 0,(8⍴16)⊤0) M.min 65552 0 0,(8⍴16)⊤1}
MIN∆08_TEST←{_←X 16 0 1⍪(8⍴16)⊤1 ⋄ (16 0 1,(8⍴16)⊤1) M.min 16 0 0,(8⍴16)⊤0}
MIN∆09_TEST←{_←X 16 0 1⍪(8⍴16)⊤1 ⋄ (16 0 0,(8⍴16)⊤0) M.min 16 0 1,(8⍴16)⊤1}
MIN∆10_TEST←{_←X 16 0 1⍪(8⍴16)⊤1 ⋄ (16 0 1,(8⍴16)⊤1) M.min 65552 0 0,(8⍴16)⊤0}
MIN∆11_TEST←{_←X 16 0 1⍪(8⍴16)⊤1 ⋄ (65552 0 1,(8⍴16)⊤1) M.min 16 0 0,(8⍴16)⊤0}
MIN∆12_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤746 746 571 746 ⋄ (16 0 0,(8⍴16)⊤746) M.min 16⍪0⍪0⍪(8⍴16)⊤2410 3125 571 2984}
MIN∆13_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤746 746 571 746 ⋄ (16⍪0⍪0⍪(8⍴16)⊤2410 3125 571 2984) M.min 16 0 0,(8⍴16)⊤746}
MIN∆14_TEST←{_←X 16 0 0,(8⍴16)⊤0 ⋄ (16 0 0,(8⍴16)⊤0) M.min 16 8 0,(8⍴16)⊤46720940}
MIN∆15_TEST←{_←X 16 8 1,(8⍴16)⊤46720940 ⋄ (16 0 0,(8⍴16)⊤0) M.min 16 8 1,(8⍴16)⊤46720940}
:EndNamespace
:Namespace mix_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
MIX∆01_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤⍳4 ⋄ M.mix 16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨↓⍳4}
MIX∆02_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤↑⍳4 4 ⋄ M.mix 16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨⍳4 4}
MIX∆03_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2 2⍴⍳4 ⋄ M.mix 16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨↓2 2⍴⍳4}
MIX∆04_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2 3 4⍴⍳24 ⋄ M.mix 16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨↓2 3 4⍴⍳24}
MIX∆05_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2 3 4 5⍴⍳120 ⋄ M.mix 16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨↓2 3 4 5⍴⍳120}
MIX∆06_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤↑(1)(2+⍳5)(2 4⍴7+⍳8) ⋄ M.mix 16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨(1)(2+⍳5)(2 4⍴7+⍳8)}
MIX∆07_TEST←{_←X 16⍪0⍪0⍪(32⍴16)⊤2 3⍴1 ⋄ M.mix (⊂16 0 0),¨2 3⍴¯16 ¯4 ¯8 ¯32 ¯16 ¯8↑¨1}
:EndNamespace
:Namespace mod_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
MOD∆01_TEST←{_←X  16 0 0⍪(8⍴16)⊤29917 ⋄ (16 0 0⍪(8⍴16)⊤41706) M.mod 16 0 0⍪(8⍴16)⊤1036841077}
MOD∆02_TEST←{_←X  16 0 0⍪(8⍴16)⊤11789 ⋄ (16 0 0⍪(8⍴16)⊤41706) M.mod 16 0 1⍪(8⍴16)⊤1036841077}
MOD∆03_TEST←{_←X  16 0 0⍪(8⍴16)⊤0 ⋄ (16 0 0⍪(8⍴16)⊤41706) M.mod 16 0 0⍪(8⍴16)⊤41706}
MOD∆04_TEST←{_←X  16 0 0⍪(8⍴16)⊤0 ⋄ (16 0 0⍪(8⍴16)⊤41706) M.mod 16 0 1⍪(8⍴16)⊤41706}
MOD∆05_TEST←{_←X  16 0 0⍪(8⍴16)⊤0 ⋄ (16 0 0⍪(8⍴16)⊤41706) M.mod 16 0 0⍪(8⍴16)⊤291942}
MOD∆06_TEST←{_←X  16 0 0⍪(8⍴16)⊤377 ⋄ (16 0 0⍪(8⍴16)⊤1045) M.mod 16⍪0⍪0⍪(8⍴16)⊤377}
MOD∆07_TEST←{_←X  16 0 0⍪(8⍴16)⊤1 ⋄ (16 0 0⍪(8⍴16)⊤1045) M.mod 16⍪0⍪0⍪(8⍴16)⊤1}
MOD∆08_TEST←{_←X  16 0 0⍪(8⍴16)⊤0 ⋄ (16 0 0⍪(8⍴16)⊤1045) M.mod 16⍪0⍪0⍪(8⍴16)⊤0}
MOD∆09_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤38 32 2 ⋄ (16⍪0⍪0⍪(8⍴16)⊤63 138 36) M.mod 16⍪0⍪0⍪(8⍴16)⊤1550}
MOD∆10_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤199 60 212 35 ⋄ (16 0 0⍪(8⍴16)⊤234) M.mod 16⍪0⍪1 0 1 1⍪(8⍴16)⊤737 528 3064 2305}
MOD∆11_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤57 12 78 ⋄ (16⍪0⍪0⍪(8⍴16)⊤223 14 176) M.mod 16⍪0⍪0 1 0⍪(8⍴16)⊤503 2830 1486}
MOD∆12_TEST←{_←X  16 0 0⍪(8⍴16)⊤29917 ⋄ (16 0 0⍪(8⍴16)⊤41706) M.mod 65552 0 0⍪(8⍴16)⊤1036841077}
MOD∆13_TEST←{_←X  16 0 0⍪(8⍴16)⊤29917 ⋄ (65552 0 0⍪(8⍴16)⊤41706) M.mod 16 0 0⍪(8⍴16)⊤1036841077}
MOD∆14_TEST←{_←X  65552 0 0⍪(8⍴16)⊤29917 ⋄ (65552 0 0⍪(8⍴16)⊤41706) M.mod 65552 0 0⍪(8⍴16)⊤1036841077}
MOD∆15_TEST←{_←X  0J16 0 0⍪(8⍴0J16)⊤38J29 ⋄ (0J16 0 0⍪(8⍴0J16)⊤33J139) M.mod 0J16 0 0⍪(8⍴0J16)⊤818J1459}
MOD∆16_TEST←{_←X  10 4 0⍪(8⍴10)⊤22393 ⋄ (10 4 0⍪(8⍴10)⊤57839) M.mod 10 3 0⍪(8⍴10)⊤19591}
MOD∆17_TEST←{_←X  10 4 0⍪(8⍴10)⊤35446 ⋄ (10 4 0⍪(8⍴10)⊤57839) M.mod 10 3 1⍪(8⍴10)⊤19591}
:EndNamespace
﻿:Namespace mov_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
MOV∆01_TEST←{_←X 10 3 0,4 5 3 7 4 4 5 1 ⋄ 3 M.mov 10 3 0,4 5 3 7 4 4 5 1}
MOV∆02_TEST←{_←X 10 1 0,¯8↑4 5 3 7 4 4 ⋄ 1 M.mov 10 3 0,4 5 3 7 4 4 5 1}
MOV∆03_TEST←{_←X 10 1 1,¯8↑4 5 3 7 4 4 ⋄ 1 M.mov 10 3 1,4 5 3 7 4 4 5 1}
MOV∆04_TEST←{_←X 10 8 0,8↑4 5 1 ⋄ 8 M.mov 10 3 0,4 5 3 7 4 4 5 1}
MOV∆05_TEST←{_←X 10 12 0,8↑0 ⋄ 12 M.mov 10 3 0,4 5 3 7 4 4 5 1}
MOV∆06_TEST←{_←X 10 ¯8 0,8↑0 ⋄ ¯8 M.mov 10 3 0,4 5 3 7 4 4 5 1}
MOV∆07_TEST←{_←X 10⍪(6⍴3 1 8)⍪0 0 0 1 1 1⍪⍉↑6⍴(4 5 3 7 4 4 5 1)(¯8↑4 5 3 7 4 4)(8↑4 5 1)
(6⍴3 1 8)M.mov 10⍪3⍪0 0 0 1 1 1⍪⍉6 8⍴4 5 3 7 4 4 5 1}
MOV∆08_TEST←{_←X 0J10 1 0,¯8↑¯6J1 ¯2 ¯8J1  ⋄ 1 M.mov 0J10 6 0,¯6J1 ¯2 ¯8J1 1J8 ¯7J1 2J7 ¯3J2 ¯1}
MOV∆09_TEST←{_←X 0J10 12 0,8↑¯3J2 ¯1  ⋄ 12 M.mov 0J10 6 0,¯6J1 ¯2 ¯8J1 1J8 ¯7J1 2J7 ¯3J2 ¯1}
MOV∆10_TEST←{_←X 0J10⍪1 12⍪0⍪⍉↑(¯8↑¯6J1 ¯2 ¯8J1)(8↑¯3J2 ¯1)
1 12 M.mov 0J10⍪6⍪0⍪⍉2 8⍴¯6J1 ¯2 ¯8J1 1J8 ¯7J1 2J7 ¯3J2 ¯1}
MOV∆11_TEST←{_←X 65546 3 0,4 5 3 7 4 4 5 1 ⋄ 3 M.mov 65546 3 0,4 5 3 7 4 4 5 1}
MOV∆12_TEST←{_←X 0J65546 6 0,¯6J1 ¯2 ¯8J1 1J8 ¯7J1 2J7 ¯3J2 ¯1
6 M.mov 0J65546 6 0,¯6J1 ¯2 ¯8J1 1J8 ¯7J1 2J7 ¯3J2 ¯1}
:EndNamespace
﻿:Namespace mrp_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
MRP∆01_TEST←{_←X 16⍪0⍪0⍪(4⍴16)⊤2 ⋄ M.mrp 16⍪0⍪0⍪(4⍴16)⊤2}
MRP∆02_TEST←{_←X 16⍪0⍪0⍪(4⍴16)⊤3 ⋄ M.mrp 16⍪0⍪0⍪(4⍴16)⊤3}
MRP∆03_TEST←{_←X 16⍪0⍪0⍪(4⍴16)⊤127 ⋄ M.mrp 16⍪0⍪0⍪(4⍴16)⊤127}
MRP∆04_TEST←{_←X 16⍪0⍪0⍪(5⍴16)⊤774149 ⋄ M.mrp 16⍪0⍪0⍪(5⍴16)⊤774149}
MRP∆05_TEST←{_←X ⍬ ⋄ M.mrp 16⍪0⍪0⍪(5⍴16)⊤575293}
MRP∆06_TEST←{_←X ⍬ ⋄ M.mrp M.mul M.red 16⍪0⍪0⍪(10⍴16)⊤4261 8521 12781}
MRP∆07_TEST←{_←X ⍬ ⋄ M.mrp 16⍪0⍪0⍪(4⍴16)⊤1}
MRP∆08_TEST←{_←X 16⍪0⍪0⍪(5⍴16)⊤2 3 127 774149 ⋄ M.mrp 16⍪0⍪0⍪(5⍴16)⊤2 3 127 774149 575293 1}
MRP∆09_TEST←{_←X 8 0 ⋄ ⍴M.mrp 16⍪0⍪0⍪(5⍴16)⊤575293 1}
:EndNamespace
:Namespace mul_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
MUL∆01_TEST←{_←X 16 0 0,(8⍴16)⊤1219869072 ⋄ (16 0 0,(8⍴16)⊤21519) M.mul 16 0 0,(8⍴16)⊤56688}
MUL∆02_TEST←{_←X 16 0 0,(8⍴16)⊤1219869072 ⋄ (16 0 0,(8⍴16)⊤56688) M.mul 16 0 0,(8⍴16)⊤21519}
MUL∆03_TEST←{_←X 16 0 0,(8⍴16)⊤0 ⋄ M.mul⍨16 0 0,(8⍴16)⊤0}
MUL∆04_TEST←{_←X 16 0 0,(8⍴16)⊤0 ⋄ (16 0 0,(8⍴16)⊤0) M.mul M.mul⍨16 0 0,(8⍴16)⊤1}
MUL∆05_TEST←{_←X 16 0 0,(8⍴16)⊤1 ⋄ M.mul⍨16 0 0,(8⍴16)⊤1}
MUL∆06_TEST←{_←X 16 0 0,(8⍴16)⊤56688 ⋄ (16 0 0,(8⍴16)⊤56688) M.mul M.mul⍨16 0 0,(8⍴16)⊤1}
MUL∆07_TEST←{_←X 16 0 0,(8⍴16)⊤1151799 ⋄ (16 0 0,(8⍴16)⊤121)M.mul(16 0 0,(8⍴16)⊤167)M.mul 16 0 0,(8⍴16)⊤57}
MUL∆08_TEST←{_←X 16 0 0,(8⍴16)⊤1151799 ⋄ ((16 0 0,(8⍴16)⊤121)M.mul(16 0 0,(8⍴16)⊤167))M.mul 16 0 0,(8⍴16)⊤57}
MUL∆09_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤5⍴1219869072 ⋄ (16⍪0⍪0⍪(8⍴16)⊤5⍴21519) M.mul 16⍪0⍪0⍪(8⍴16)⊤5⍴56688}
MUL∆10_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤5 3⍴1219869072 ⋄ (16⍪0⍪0⍪(8⍴16)⊤5 3⍴21519) M.mul 16⍪0⍪0⍪(8⍴16)⊤5 3⍴56688}
MUL∆11_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤5⍴1219869072 ⋄ (16 0 0,(8⍴16)⊤21519) M.mul 16⍪0⍪0⍪(8⍴16)⊤5⍴56688}
MUL∆12_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤5⍴1219869072 ⋄ (16⍪0⍪0⍪(8⍴16)⊤5⍴21519) M.mul 16 0 0,(8⍴16)⊤56688}
MUL∆13_TEST←{_←X 16 0 1,(8⍴16)⊤1219869072 ⋄ (16 0 0,(8⍴16)⊤21519) M.mul 16 0 1,(8⍴16)⊤56688}
MUL∆14_TEST←{_←X 16 0 1,(8⍴16)⊤1219869072 ⋄ (16 0 1,(8⍴16)⊤21519) M.mul 16 0 0,(8⍴16)⊤56688}
MUL∆15_TEST←{_←X 16 0 0,(8⍴16)⊤1219869072 ⋄ (16 0 1,(8⍴16)⊤21519) M.mul 16 0 1,(8⍴16)⊤56688}
MUL∆16_TEST←{_←X 16 0 1,(8⍴16)⊤21519 ⋄ (16 0 0,(8⍴16)⊤21519) M.mul 16 0 1,(8⍴16)⊤1}
MUL∆17_TEST←{_←X 16 0 0,(8⍴16)⊤21519 ⋄ (16 0 1,(8⍴16)⊤21519) M.mul 16 0 1,(8⍴16)⊤1}
MUL∆18_TEST←{_←X 16 0 1,(8⍴16)⊤0 ⋄ (16 0 0,(8⍴16)⊤0) M.mul 16 0 1,(8⍴16)⊤1}
MUL∆19_TEST←{_←X 16 0 1,(8⍴16)⊤1 ⋄ (16 0 0,(8⍴16)⊤1) M.mul 16 0 1,(8⍴16)⊤1}
MUL∆20_TEST←{_←X 16 0 0,(8⍴16)⊤1 ⋄ M.mul⍨16 0 1,(8⍴16)⊤1}
MUL∆21_TEST←{_←X 1,⍨514↑256 0 0,254,⍨,255⍴255 ⋄ M.mul⍨256 0 0,¯512↑256⍴255}
MUL∆22_TEST←{_←X 1,⍨1026↑128 0 0,126,⍨,511⍴127 ⋄ M.mul⍨128 0 0,¯1024↑512⍴127}
MUL∆23_TEST←{_←X 1,⍨2050↑64 0 0,62,⍨,1023⍴63 ⋄ M.mul⍨64 0 0,¯2048↑1024⍴63}
MUL∆24_TEST←{_←X 1,⍨4098↑32 0 0,30,⍨,2047⍴31 ⋄ M.mul⍨32 0 0,¯4096↑2048⍴31}
MUL∆25_TEST←{_←X 1,⍨8194↑16 0 0,14,⍨,4095⍴15 ⋄ M.mul⍨16 0 0,¯8192↑4096⍴15}
MUL∆26_TEST←{_←X 1,⍨16386↑8 0 0,6,⍨,8191⍴7 ⋄ M.mul⍨8 0 0,¯16384↑8192⍴7}
MUL∆27_TEST←{_←X 0J16⍪0⍪0⍪(8⍴0J16)⊤159J89×254J193 ⋄ ⊃M.mul/0J16⍪¨0⍪¨0⍪¨(⊂8⍴0J16)⊤¨159J89 254J193}
MUL∆28_TEST←{_←X 16 4 0,(8⍴16)⊤6613659 ⋄ (16 3 0,(8⍴16)⊤117) M.mul 16 1 0,(8⍴16)⊤56527}
MUL∆29_TEST←{_←X 10 9 0,(10⍴10)⊤1000005857 ⋄ (10 0 0,(10⍴10)⊤95566309) M.mul 10 12 0,(10⍴10)⊤10464}
MUL∆30_TEST←{_←X 10 11 0⍪12↑1 ⋄ (10 12 1,4,⍨11⍴3) M.mul 10 0 1,(12⍴10)⊤3}
MUL∆31_TEST←{_←X 0J16 0 0,(8⍴0J16)⊤558J1395 ⋄ (0J16 0 0,(8⍴0J16)⊤6J15) M.mul 16 0 0,(8⍴16)⊤93}
MUL∆32_TEST←{_←X 0J16 0 0,(8⍴0J16)⊤558J1395 ⋄ (16 0 0,(8⍴16)⊤93) M.mul 0J16 0 0,(8⍴0J16)⊤6J15}
:EndNamespace
﻿:Namespace neq_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
NEQ∆01_TEST←{_←X 1 ⋄ (16 0 0,(8⍴16)⊤3656703249) M.neq 16 0 0,(8⍴16)⊤2824542574}
NEQ∆02_TEST←{_←X 1 ⋄ (16 0 0,(8⍴16)⊤2824542574) M.neq 16 0 0,(8⍴16)⊤3656703249}
NEQ∆03_TEST←{_←X 1 ⋄ (65552 0 0,(8⍴16)⊤2824542574) M.neq 65552 0 0,(8⍴16)⊤3656703249}
NEQ∆04_TEST←{_←X 0 ⋄ M.neq⍨16 0 0,(8⍴16)⊤2824542574}
NEQ∆05_TEST←{_←X 1 ⋄ (16 0 0,(8⍴16)⊤0) M.neq 16 0 0,(8⍴16)⊤2824542574}
NEQ∆06_TEST←{_←X 1 ⋄ (16 0 0,(8⍴16)⊤2824542574) M.neq 16 0 0,(8⍴16)⊤0}
NEQ∆07_TEST←{_←X 0 ⋄ M.neq⍨16 0 0,(8⍴16)⊤0}
NEQ∆08_TEST←{_←X 1 ⋄ (65552 0 0,(8⍴16)⊤0) M.neq 65552 0 0,(8⍴16)⊤1}
NEQ∆09_TEST←{_←X 1 ⋄ (65552 0 0,(8⍴16)⊤1) M.neq 65552 0 0,(8⍴16)⊤0}
NEQ∆10_TEST←{_←X 1 1 0 0 1 ⋄ (65552⍪0⍪0⍪(8⍴16)⊤65 122 257 305 149) M.neq 65552⍪0⍪0⍪(8⍴16)⊤108 146 257 305 498}
NEQ∆11_TEST←{_←X 1 ⋄ (16 0 0,(8⍴16)⊤0) M.neq 16 0 1,(8⍴16)⊤1}
NEQ∆12_TEST←{_←X 1 ⋄ (16 0 1,(8⍴16)⊤1) M.neq 16 0 0,(8⍴16)⊤0}
NEQ∆13_TEST←{_←X 1 ⋄ (65552 0 0,(8⍴16)⊤0) M.neq 65552 0 1,(8⍴16)⊤1}
NEQ∆14_TEST←{_←X 1 ⋄ (65552 0 1,(8⍴16)⊤1) M.neq 65552 0 0,(8⍴16)⊤0}
NEQ∆15_TEST←{_←X 1 ⋄ (10 0 1,⍳8) M.neq 10 0 0,⍳8}
NEQ∆16_TEST←{_←X 1 ⋄ (10 1 0,⍳8) M.neq 10 0 0,⍳8}
NEQ∆17_TEST←{_←X 1 ⋄ (10 1 0,⍳8) M.neq 10 0 1,⍳8}
NEQ∆18_TEST←{_←X 0 ⋄ (0J10 1 0,(8⍴0J10)⊤¯500J2280) M.neq 0J10 0 0,(8⍴0J10)⊤228J50}
:EndNamespace
:Namespace out_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
OUT∆01_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤64962 32332∘.+45173 18486 46958 ⋄ (16⍪0⍪0⍪(8⍴16)⊤64962 32332) M.add M.out 16⍪0⍪0⍪(8⍴16)⊤45173 18486 46958}
OUT∆02_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤64962 32332∘.×45173 18486 46958 ⋄ (16⍪0⍪0⍪(8⍴16)⊤64962 32332) M.mul M.out 16⍪0⍪0⍪(8⍴16)⊤45173 18486 46958}
OUT∆03_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤⍉64962 32332∘.+45173 18486 46958 ⋄ (16⍪0⍪0⍪(8⍴16)⊤45173 18486 46958) M.add M.out 16⍪0⍪0⍪(8⍴16)⊤64962 32332}
OUT∆04_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤⍉64962 32332∘.×45173 18486 46958 ⋄ (16⍪0⍪0⍪(8⍴16)⊤45173 18486 46958) M.mul M.out 16⍪0⍪0⍪(8⍴16)⊤64962 32332}
OUT∆05_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤(3 2⍴⍳6)∘.+5 1 4⍴⍳20 ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 2⍴⍳6)M.add M.out 16⍪0⍪0⍪(8⍴16)⊤5 1 4⍴⍳20}
OUT∆06_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤(3 2⍴⍳6)∘.×5 1 4⍴⍳20 ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 2⍴⍳6)M.mul M.out 16⍪0⍪0⍪(8⍴16)⊤5 1 4⍴⍳20}
OUT∆07_TEST←{_←X 16⍪0⍪(2 3⍴0 0 0 1 0 1)⍪(8⍴16)⊤2 3⍴19789 46476 18004 12841 13846 14626 ⋄ (16⍪0⍪0⍪(8⍴16)⊤64962 32332) M.sub M.out 16⍪0⍪0⍪(8⍴16)⊤45173 18486 46958}
OUT∆08_TEST←{_←X 16⍪0⍪(3 2⍴1 0 1 1 1 0)⍪(8⍴16)⊤3 2⍴19789 12841 46476 13846 18004 14626 ⋄ (16⍪0⍪0⍪(8⍴16)⊤45173 18486 46958) M.sub M.out 16⍪0⍪0⍪(8⍴16)⊤64962 32332}
OUT∆09_TEST←{_←X 2 3⍴1 1 1 0 1 0 ⋄ (16⍪0⍪0⍪(8⍴16)⊤64962 32332) M.geq M.out 16⍪0⍪0⍪(8⍴16)⊤45173 18486 46958}
OUT∆10_TEST←{_←X 3 2⍴0 1 0 0 0 1 ⋄ (16⍪0⍪0⍪(8⍴16)⊤45173 18486 46958) M.geq M.out 16⍪0⍪0⍪(8⍴16)⊤64962 32332}
:EndNamespace
:Namespace pic_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
PIC∆01_TEST←{_←X 16 0 0,(8⍴16)⊤0 ⋄ M.pic 16⍪0⍪0⍪(8⍴16)⊤⍳24}
PIC∆02_TEST←{_←X 16 0 0,(8⍴16)⊤0 ⋄ M.pic 16⍪0⍪0⍪(8⍴16)⊤2 3⍴⍳6}
PIC∆03_TEST←{_←X 16 0 0,(8⍴16)⊤0 ⋄ M.pic 16⍪0⍪0⍪(8⍴16)⊤2 3 4⍴⍳24}
PIC∆04_TEST←{_←X 16 0 0,(8⍴16)⊤0 ⋄ M.pic 16⍪0⍪0⍪(8⍴16)⊤2 3 4 5⍴⍳120}
PIC∆05_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤⍳24 ⋄ M.pic ⊂16⍪0⍪0⍪(8⍴16)⊤⍳24}
PIC∆06_TEST←{_←X 16 0 0,(8⍴16)⊤8 ⋄ (⊂1 0 2) M.pic 16⍪0⍪0⍪(8⍴16)⊤2 2 3⍴⍳12}
PIC∆07_TEST←{_←X 16 0 0,(8⍴16)⊤9 ⋄ 3 M.pic 16⍪0⍪0⍪(8⍴16)⊤×⍨⍳12}
:EndNamespace
:Namespace pie_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
PIE∆01_TEST←{_←X 10 57 0,⍎¨'3141592653589793238462643383279502884197169399375105820974' ⋄ M.pie 10⍪0⍪0⍪(58⍴10)⊤1}
PIE∆02_TEST←{_←X 10⍪57⍪0⍪(58⍴10)⊤0 ⋄ M.pie 10⍪0⍪0⍪(58⍴10)⊤0}
PIE∆03_TEST←{_←X 10 57 1,⍎¨'3141592653589793238462643383279502884197169399375105820974' ⋄ M.pie 10⍪0⍪1⍪(58⍴10)⊤1}
PIE∆04_TEST←{_←X 10 55 0,⍎¨'4995132319207771249155602979414409585873499345006418255348' ⋄ M.pie 10⍪0⍪0⍪(58⍴10)⊤159}
PIE∆05_TEST←{z←(10⍪57⍪0⍪(58⍴10)⊤0),⍪10 55 0,⍎¨'4995132319207771249155602979414409585873499345006418255348'
z,←10 57 0,⍎¨'3141592653589793238462643383279502884197169399375105820974'
z,←10 57 1,⍎¨'3141592653589793238462643383279502884197169399375105820974' ⋄ _←X z ⋄ M.pie 10⍪0⍪0 0 0 1⍪(58⍴10)⊤0 159 1 1}
PIE∆06_TEST←{_←X  10 57 0,⍎¨'1570796326794896619231321691639751442098584699687552910487' ⋄ M.pie 10⍪1⍪0⍪(58⍴10)⊤5}
PIE∆07_TEST←{_←X  10 64 0,⍎¨'3141592653589793238462643383279502884197169399375105820974' ⋄ M.pie 10⍪7⍪0⍪(58⍴10)⊤1}
PIE∆08_TEST←{z←⊂'0251327412287183459077011470662360230735773551950008465678'
z,←⊂'0157079632679489661923132169163975144209858469968755291048'
_←X 58 M.pla M.cry 0J10⍪55⍪0⍪(60⍴1 0J1 ¯1 0J¯1)×¯60↑1 0J1+.×⍎¨↑z ⋄ M.pie 0J10 0 0,(58⍴0J10)⊤8J5}
:EndNamespace
﻿:Namespace pla_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
PLA∆01_TEST←{_←X 8 ⋄ M.pla 10 3 0⍪(8⍴10)⊤691557}
PLA∆02_TEST←{_←X 10 3 0⍪(12⍴10)⊤691557 ⋄ 12 M.pla 10 3 0⍪(8⍴10)⊤691557}
PLA∆03_TEST←{_←X 10 3 1⍪(12⍴10)⊤691557 ⋄ 12 M.pla 10 3 1⍪(8⍴10)⊤691557}
PLA∆04_TEST←{_←X 10 1 0⍪(4⍴10)⊤6915 ⋄ 4 M.pla 10 3 0⍪(8⍴10)⊤691557}
PLA∆05_TEST←{_←X 10 2 0⍪(4⍴10)⊤286 ⋄ 4 M.pla 10 2 0⍪(8⍴10)⊤286}
PLA∆06_TEST←{_←X 8 ⋄ M.pla 10⍪0⍪0⍪(8⍴10)⊤⍳5}
PLA∆07_TEST←{_←X 10⍪1 2 1⍪0 0 1⍪(4⍴10)⊤3⍴6915 286 ⋄ 4 M.pla 10⍪3 2 3⍪0 0 1⍪(8⍴10)⊤3⍴691557 286}
PLA∆08_TEST←{_←X 10⍪3 2 3⍪0 0 1⍪(12⍴10)⊤3⍴691557 286 ⋄ 12 M.pla 10⍪3 2 3⍪0 0 1⍪(8⍴10)⊤3⍴691557 286}
PLA∆09_TEST←{_←X 0J10 3 0,(12⍴0J10)⊤¯480J53 ⋄ 12 M.pla 0J10 3 0,(8⍴0J10)⊤¯480J53}
PLA∆10_TEST←{_←X 0J10 2 0,(4⍴0J10)⊤5J48 ⋄ 4 M.pla 0J10 3 0,(8⍴0J10)⊤¯480J53}
:EndNamespace
:Namespace pmu_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
PMU∆01_TEST←{_←X  16⍪0⍪0 1 0 1⍪(8⍴16)⊤15 6 35 14  ⋄ (16⍪0⍪0 1⍪(8⍴16)⊤5 2) M.pmu 16⍪0⍪0⍪(8⍴16)⊤3 0 7}
PMU∆02_TEST←{_←X  16⍪0⍪0 1 0 1⍪(8⍴16)⊤15 6 35 14  ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 0 7) M.pmu 16⍪0⍪0 1⍪(8⍴16)⊤5 2}
PMU∆03_TEST←{_←X  16⍪0⍪0 1⍪(8⍴16)⊤5 2  ⋄ (16⍪0⍪0 1⍪(8⍴16)⊤5 2) M.pmu 16⍪0⍪0⍪(8⍴16)⊤,1}
PMU∆04_TEST←{_←X  16⍪0⍪1 0⍪(8⍴16)⊤5 2  ⋄ (16⍪0⍪0 1⍪(8⍴16)⊤5 2) M.pmu 16⍪0⍪1⍪(8⍴16)⊤,1}
PMU∆05_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤2⍴0  ⋄ (16⍪0⍪0 1⍪(8⍴16)⊤5 2) M.pmu 16⍪0⍪0⍪(8⍴16)⊤,0}
PMU∆06_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤9 0 21  ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 0 7) M.pmu 16⍪0⍪0⍪(8⍴16)⊤,3}
PMU∆07_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤,95  ⋄ (16⍪0⍪0⍪(8⍴16)⊤,19) M.pmu 16⍪0⍪0⍪(8⍴16)⊤,5}
PMU∆08_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤4 3⍴117 126 387 390 438 696 143 160 275 78 88 126 ⋄ (16⍪0⍪0⍪(8⍴16)⊤2 3⍴13 14 43 39 44 63) M.pmu 16⍪0⍪0⍪(8⍴16)⊤9 3 2}
PMU∆09_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤2 3⍴91 98 301 273 308 441 ⋄ (16⍪0⍪0⍪(8⍴16)⊤,7) M.pmu 16⍪0⍪0⍪(8⍴16)⊤2 3⍴13 14 43 39 44 63}
PMU∆10_TEST←{_←X  10⍪4⍪1 0 1 1⍪(8⍴10)⊤9216 12576 3894 248 ⋄ (10⍪3⍪0 1 1⍪(8⍴10)⊤96 69 4) M.pmu 10⍪1⍪1 0⍪(8⍴10)⊤96 62}
PMU∆11_TEST←{_←X  0J10⍪0⍪0⍪(8⍴0J10)⊤21J27 ¯31J¯60 ¯14J53 24J¯28 ⋄ (0J10⍪0⍪0⍪(8⍴0J10)⊤0J¯3 0J4) M.pmu 0J10⍪0⍪0⍪(8⍴0J10)⊤¯9J7 8J¯1 ¯7J¯6}
PMU∆12_TEST←{_←X  0J10⍪1⍪0⍪(8⍴0J10)⊤27J¯21 ¯60J31 53J14 ¯28J¯24 ⋄ (0J10⍪0⍪0⍪(8⍴0J10)⊤0J¯3 0J4) M.pmu 0J10⍪1⍪0⍪(8⍴0J10)⊤7J9 ¯1J¯8 ¯6J7}
:EndNamespace
:Namespace pop_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
POP∆01_TEST←{_←X  16⍪0⍪1⍪(8⍴16)⊤2097593088 ⋄ M.sub M.pop 1⊢16⍪0⍪0⍪(8⍴16)⊤2097593088}
POP∆02_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤2097593088 ⋄ M.sub M.pop 2⊢16⍪0⍪0⍪(8⍴16)⊤2097593088}
POP∆03_TEST←{_←X  16⍪0⍪1⍪(8⍴16)⊤2097593088 ⋄ M.sub M.pop 3⊢16⍪0⍪0⍪(8⍴16)⊤2097593088}
POP∆04_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤59107+24250×24 ⋄ (16⍪0⍪0⍪(8⍴16)⊤24250)(M.add M.pop 24)16⍪0⍪0⍪(8⍴16)⊤59107}
POP∆05_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤181×51*3 ⋄ (16⍪0⍪0⍪(8⍴16)⊤51)(M.mul M.pop 3)16⍪0⍪0⍪(8⍴16)⊤181}
POP∆06_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤3⍴59107+24250×24 ⋄ (16⍪0⍪0⍪(8⍴16)⊤24250) (M.add M.pop 24) 16⍪0⍪0⍪(8⍴16)⊤3⍴59107}
POP∆07_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤3⍴181×51*3 ⋄ (16⍪0⍪0⍪(8⍴16)⊤51) (M.mul M.pop 3) 16⍪0⍪0⍪(8⍴16)⊤3⍴181}
POP∆08_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤154757 262687 149230 ⋄ (16⍪0⍪0⍪(8⍴16)⊤1777 3000 1684) (M.add M.pop 87) 16⍪0⍪0⍪(8⍴16)⊤158 1687 2722}
POP∆09_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤752982204 7411887 2799360 ⋄ (16⍪0⍪0⍪(8⍴16)⊤13 7 6) (M.mul M.pop 7) 16⍪0⍪0⍪(8⍴16)⊤12 9 10}
POP∆10_TEST←{_←X  65552 0 0,32↑16,⍨23⍴15 ⋄ (65552 0 0⍪¯32↑1)(M.add M.pop 16) 65552 0 0⍪32↑31⍴15}
POP∆11_TEST←{_←X  16 ¯1 0,32↑1 ⋄ (16 0 0⍪¯32↑1)(M.add M.pop 16) 16 0 0⍪32↑31⍴15}
POP∆12_TEST←{_←X  65552 0 0,32⍴0 ⋄ (65552 0 0⍪¯32↑1)(M.add M.pop 16) 65552 0 1⍪¯32↑1 0}
POP∆13_TEST←{_←X  16 0 0,32⍴0 ⋄ (16 0 0⍪¯32↑1)(M.add M.pop 16) 16 0 1⍪¯32↑1 0}
POP∆14_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤393573314 ⋄ (16⍪0⍪0⍪(8⍴16)⊤1)(M.add M.pop M.geq)16⍪0⍪0⍪(8⍴16)⊤393573313}
:EndNamespace
:Namespace rav_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
RAV∆01_TEST←{_←X 16⍪(8|⍳30)⍪0⍪(8⍴16)⊤⍳30 ⋄ M.rav 16⍪(8|⍳30)⍪0⍪(8⍴16)⊤⍳30}
RAV∆02_TEST←{_←X 16⍪(8|⍳15)⍪0⍪(8⍴16)⊤⍳15 ⋄ M.rav 16⍪(5 3⍴8|⍳15)⍪0⍪(8⍴16)⊤5 3⍴⍳15}
:EndNamespace
:Namespace rdf_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
RDF∆01_TEST←{_←X  16 0 0⍪(8⍴16)⊤14950715 ⋄ M.add M.rdf 16⍪0⍪0⍪(8⍴16)⊤2906258 11575550 222852 246055}
RDF∆02_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤14950715 ⋄ M.sub M.rdf 16⍪0⍪0 1 0 1⍪(8⍴16)⊤2906258 11575550 222852 246055}
RDF∆03_TEST←{_←X  16⍪0⍪1⍪(8⍴16)⊤8692495 ⋄ M.add M.rdf 16⍪0⍪0 1 0 1⍪(8⍴16)⊤2906258 11575550 222852 246055}
RDF∆04_TEST←{_←X  16⍪0⍪1⍪(8⍴16)⊤8692495 ⋄ M.sub M.rdf 16⍪0⍪0⍪(8⍴16)⊤2906258 11575550 222852 246055}
RDF∆05_TEST←{_←X  16 0 0⍪(8⍴16)⊤×/188 63 57 ⋄ M.mul M.rdf 16⍪0⍪0⍪(8⍴16)⊤188 63 57}
RDF∆06_TEST←{_←X  16 0 0⍪(8⍴16)⊤6×173 ⋄ M.add M.rdf 16⍪0⍪0⍪(8⍴16)⊤6⍴173}
RDF∆07_TEST←{_←X  16 0 0⍪(8⍴16)⊤11*7 ⋄ M.mul M.rdf 16⍪0⍪0⍪(8⍴16)⊤7⍴11}
RDF∆08_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤246 155 139 ⋄ M.add M.rdf 16⍪0⍪0⍪(8⍴16)⊤2 3⍴34 100 45 212 55 94}
RDF∆09_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤7208 5500 4230 ⋄ M.mul M.rdf 16⍪0⍪0⍪(8⍴16)⊤2 3⍴34 100 45 212 55 94}
RDF∆10_TEST←{_←X  65552 0 0,32↑16,⍨19⍴15 ⋄ M.add M.rdf 65552⍪0⍪0⍪0,15,⍪¯32↑1}
RDF∆11_TEST←{_←X  65552 0 0,32↑0 ⋄ M.add M.rdf 65552⍪0⍪0 1 0⍪(32⍴16)⊤0 1 1}
RDF∆12_TEST←{_←X  16 ¯1 0,24↑1 ⋄ M.add M.rdf 16⍪0⍪0⍪0,15,⍪¯24↑1}
RDF∆13_TEST←{_←X  16 0 0,24↑0 ⋄ M.add M.rdf 16⍪0⍪0 1 0⍪(24⍴16)⊤0 1 1}
RDF∆14_TEST←{_←X  0J16⍪0⍪0⍪(8⍴0J16)⊤580J660 ⋄ M.add M.rdf 0J16⍪0⍪0⍪(8⍴0J16)⊤193J71 153J150 71J88 102J213 61J138}
RDF∆15_TEST←{_←X  0J16⍪0⍪0⍪(12⍴0J16)⊤70J¯66 ⋄ M.sub M.rdf 0J16⍪0⍪0⍪(12⍴0J16)⊤193J71 153J150 71J88 102J213 61J138}
RDF∆16_TEST←{_←X  0J16⍪0⍪0⍪(12⍴0J16)⊤¯4027284J¯117237 ⋄ M.mul M.rdf 0J16⍪0⍪0⍪(12⍴0J16)⊤71J88 102J213 61J138}
RDF∆17_TEST←{_←X  10⍪4⍪0⍪(10⍴10)⊤633383 ⋄ M.add M.rdf 10⍪4 4 3 1 0⍪0⍪(10⍴10)⊤2 81 30 73 56}
RDF∆18_TEST←{_←X  10⍪4⍪0⍪(10⍴10)⊤487221 ⋄ M.add M.rdf 10⍪4 4 3 1 0⍪0 1 0 1 0⍪(10⍴10)⊤2 81 30 73 56}
RDF∆19_TEST←{_←X  10⍪¯1⍪0⍪10↑1 2 ⋄ M.add M.rdf 10⍪0⍪0⍪(10⍴10)⊤6⍴2×10*9}
RDF∆20_TEST←{_←X  10⍪¯7⍪0⍪10↑3 2 ⋄ M.mul M.rdf 10⍪0⍪0⍪(10⍴10)⊤5⍴2×10*3}
:EndNamespace
:Namespace rea_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
REA∆01_TEST←{_←X 16 0 0,(12⍴16)⊤4271680396 ⋄ M.rea 16 0 0,(12⍴16)⊤4271680396}
REA∆02_TEST←{_←X 16 0 1,(12⍴16)⊤4271680396 ⋄ M.rea 16 0 1,(12⍴16)⊤4271680396}
REA∆03_TEST←{_←X 16 0 0,(12⍴16)⊤4271680396 ⋄ M.rea 0J16 0 0,(12⍴0J16)⊤4271680396}
REA∆04_TEST←{_←X 16 0 1,(12⍴16)⊤4271680396 ⋄ M.rea 0J16 0 0,(12⍴0J16)⊤¯4271680396}
REA∆05_TEST←{_←X 16 0 0,(12⍴0) ⋄ M.rea 0J16 0 0,(12⍴0J16)⊤0J1553966288}
REA∆06_TEST←{_←X 16 0 0,(12⍴16)⊤5937 ⋄ M.rea 0J16 0 0,(12⍴0J16)⊤5937J8980}
REA∆07_TEST←{_←X 16 0 1,(12⍴16)⊤5937 ⋄ M.rea 0J16 0 0,(12⍴0J16)⊤¯5937J8980}
REA∆08_TEST←{_←X 16 0 1,(12⍴16)⊤5937 ⋄ M.rea 0J16 0 0,(12⍴0J16)⊤¯5937J¯8980}
REA∆09_TEST←{_←X 16 0 0,(12⍴16)⊤5937 ⋄ M.rea 0J16 0 0,(12⍴0J16)⊤5937J¯8980}
REA∆10_TEST←{_←X 16⍪0⍪0⍪(12⍴16)⊤766 701 83 ⋄ M.rea 0J16⍪0⍪0⍪(12⍴0J16)⊤766J622 701J430 83J782}
REA∆11_TEST←{_←X 16 2 0,(12⍴16)⊤4271680396 ⋄ M.rea 16 2 0,(12⍴16)⊤4271680396}
REA∆12_TEST←{_←X 10 2 0,(12⍴0) ⋄ M.rea 0J10 2 0,(12⍴0J10)⊤0J1553966288}
REA∆13_TEST←{_←X 10 2 1,(12⍴10)⊤5937 ⋄ M.rea 0J10 2 0,(12⍴0J10)⊤5937J8980}
REA∆14_TEST←{_←X 10 1 0,(12⍴10)⊤0 ⋄ M.rea 0J10 1 0,(12⍴0J10)⊤0J10*2}
REA∆15_TEST←{_←X 10⍪1 3 2 1⍪1 0 0 0⍪(12⍴10)⊤4↑1000 ⋄ M.rea 0J10⍪1 3 2 1⍪0⍪(12⍴0J10)⊤0J10*3 6 5 6}
REA∆16_TEST←{_←X 10 ¯2 1,(12⍴10)⊤5937 ⋄ M.rea 0J10 ¯2 0,(12⍴0J10)⊤5937J8980}
REA∆17_TEST←{_←X 15 M.mov 10 2 0,(16⍴10)⊤471 ⋄ M.rea M.r2c 15 M.mov 10 2 0,(16⍴10)⊤471}
REA∆18_TEST←{_←X 14 M.mov 10 2 0,(15⍴10)⊤471 ⋄ M.rea M.r2c 14 M.mov 10 2 0,(15⍴10)⊤471}
REA∆19_TEST←{_←X 13 M.mov 10 2 0,(14⍴10)⊤471 ⋄ M.rea M.r2c 13 M.mov 10 2 0,(14⍴10)⊤471}
REA∆20_TEST←{_←X 12 M.mov 10 2 0,(13⍴10)⊤471 ⋄ M.rea M.r2c 12 M.mov 10 2 0,(13⍴10)⊤471}
:EndNamespace
:Namespace red_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
RED∆01_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤14950715 ⋄ M.add M.red 16⍪0⍪0⍪(8⍴16)⊤2906258 11575550 222852 246055}
RED∆02_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤14950715 ⋄ M.sub M.red 16⍪0⍪0 1 0 1⍪(8⍴16)⊤2906258 11575550 222852 246055}
RED∆03_TEST←{_←X  16⍪0⍪1⍪(8⍴16)⊤8692495 ⋄ M.add M.red 16⍪0⍪0 1 0 1⍪(8⍴16)⊤2906258 11575550 222852 246055}
RED∆04_TEST←{_←X  16⍪0⍪1⍪(8⍴16)⊤8692495 ⋄ M.sub M.red 16⍪0⍪0⍪(8⍴16)⊤2906258 11575550 222852 246055}
RED∆05_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤675108 ⋄ M.mul M.red 16⍪0⍪0⍪(8⍴16)⊤188 63 57}
RED∆06_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤6×173 ⋄ M.add M.red 16⍪0⍪0⍪(8⍴16)⊤6⍴173}
RED∆07_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤11*7 ⋄ M.mul M.red 16⍪0⍪0⍪(8⍴16)⊤7⍴11}
RED∆08_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤179 361 ⋄ M.add M.red 16⍪0⍪0⍪(8⍴16)⊤2 3⍴34 100 45 212 55 94}
RED∆09_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤153000 1096040 ⋄ M.mul M.red 16⍪0⍪0⍪(8⍴16)⊤2 3⍴34 100 45 212 55 94}
RED∆10_TEST←{_←X  65552 0 0,32↑16,⍨19⍴15 ⋄ M.add M.red 65552⍪0⍪0⍪0,15,⍪¯32↑1}
RED∆11_TEST←{_←X  65552 0 0,32↑0 ⋄ M.add M.red 65552⍪0⍪0 1 0⍪(32⍴16)⊤0 1 1}
RED∆12_TEST←{_←X  16 ¯1 0,24↑1 ⋄ M.add M.red 16⍪0⍪0⍪0,15,⍪¯24↑1}
RED∆13_TEST←{_←X  16 0 0,24↑0 ⋄ M.add M.red 16⍪0⍪0 1 0⍪(24⍴16)⊤0 1 1}
RED∆14_TEST←{_←X  0J16⍪0⍪0⍪(8⍴0J16)⊤580J660 ⋄ M.add M.red 0J16⍪0⍪0⍪(8⍴0J16)⊤193J71 153J150 71J88 102J213 61J138}
RED∆15_TEST←{_←X  0J16⍪0⍪0⍪(12⍴0J16)⊤70J¯66 ⋄ M.sub M.red 0J16⍪0⍪0⍪(12⍴0J16)⊤193J71 153J150 71J88 102J213 61J138}
RED∆16_TEST←{_←X  0J16⍪0⍪0⍪(12⍴0J16)⊤¯4027284J¯117237 ⋄ M.mul M.red 0J16⍪0⍪0⍪(12⍴0J16)⊤71J88 102J213 61J138}
RED∆17_TEST←{_←X  10⍪4⍪0⍪(10⍴10)⊤633383 ⋄ M.add M.red 10⍪4 4 3 1 0⍪0⍪(10⍴10)⊤2 81 30 73 56}
RED∆18_TEST←{_←X  10⍪4⍪0⍪(10⍴10)⊤487221 ⋄ M.add M.red 10⍪4 4 3 1 0⍪0 1 0 1 0⍪(10⍴10)⊤2 81 30 73 56}
RED∆19_TEST←{_←X  10⍪¯1⍪0⍪10↑1 2 ⋄ M.add M.red 10⍪0⍪0⍪(10⍴10)⊤6⍴2×10*9}
RED∆20_TEST←{_←X  10⍪¯7⍪0⍪10↑3 2 ⋄ M.mul M.red 10⍪0⍪0⍪(10⍴10)⊤5⍴2×10*3}
:EndNamespace
:Namespace rho_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
RHO∆01_TEST←{_←X ⍴1 ⋄ M.rho 16 0 0,(8⍴16)⊤1}
RHO∆02_TEST←{_←X 2 3 4 ⋄ M.rho 16⍪0⍪0⍪(8⍴16)⊤2 3 4⍴⍳24}
RHO∆03_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2 3 4 ⍴ 1 ⋄ 2 3 4 M.rho 16⍪0⍪0⍪(8⍴16)⊤1}
RHO∆04_TEST←{_←X 16⍪(5⍴⍳2)⍪0⍪(8⍴16)⊤5⍴⍳2 ⋄ 5 M.rho 16⍪(⍳2)⍪0⍪(8⍴16)⊤⍳2}
RHO∆05_TEST←{_←X 16⍪(⍳2)⍪0⍪(8⍴16)⊤2⍴⍳5 ⋄ 2 M.rho 16⍪(⍳5)⍪0⍪(8⍴16)⊤⍳5}
RHO∆06_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2 3⍴⍳2 ⋄ 2 3 M.rho 16⍪0⍪0⍪(8⍴16)⊤⍳2}
RHO∆07_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤4⍴2 3⍴⍳6 ⋄ 4 M.rho 16⍪0⍪0⍪(8⍴16)⊤2 3⍴⍳6}
RHO∆08_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤1⍴2 3⍴⍳6 ⋄ 1 M.rho 16⍪0⍪0⍪(8⍴16)⊤2 3⍴⍳6}
RHO∆09_TEST←{_←X 16⍪0⍪(5⍴0 1)⍪(8⍴16)⊤5⍴1 1 ⋄ 5 M.rho 16⍪0⍪0 1⍪(8⍴16)⊤1 1}
:EndNamespace
:Namespace rof_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
ROF∆01_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤⊖2 4⍴⍳8 ⋄ M.rof 16⍪0⍪0⍪(8⍴16)⊤2 4⍴⍳8}
ROF∆02_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤⊖2 3 4⍴⍳8 ⋄ M.rof 16⍪0⍪0⍪(8⍴16)⊤2 3 4⍴⍳8}
ROF∆03_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤⊖⍳8 ⋄ M.rof 16⍪0⍪0⍪(8⍴16)⊤⍳8}
ROF∆04_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2⊖2 4⍴⍳8 ⋄ 2 M.rof 16⍪0⍪0⍪(8⍴16)⊤2 4⍴⍳8}
ROF∆05_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2⊖2 3 4⍴⍳8 ⋄ 2 M.rof 16⍪0⍪0⍪(8⍴16)⊤2 3 4⍴⍳8}
ROF∆06_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2⊖⍳8 ⋄ 2 M.rof 16⍪0⍪0⍪(8⍴16)⊤⍳8}
ROF∆07_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤(1 3)⊖4 2⍴⍳8 ⋄ (1 3) M.rof 16⍪0⍪0⍪(8⍴16)⊤4 2⍴⍳8}
ROF∆08_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤(2 3⍴⍳6)⊖4 2 3⍴⍳8 ⋄ (2 3⍴⍳6) M.rof 16⍪0⍪0⍪(8⍴16)⊤4 2 3⍴⍳8}
:EndNamespace
:Namespace rol_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
ROL∆01_TEST←{_←X 8⍴1 ⋄ 16 > 3↓M.rol 16 0 0⍪(8⍴16)⊤0}
ROL∆02_TEST←{_←X 8⍴1 ⋄ 0 ≤ 3↓M.rol 16 0 0⍪(8⍴16)⊤0}
ROL∆03_TEST←{_←X 16 8 0 ⋄ 3↑M.rol 16 0 0⍪(8⍴16)⊤0}
ROL∆04_TEST←{_←X 8⍴1 ⋄ 16 > 3↓M.rol 65552 0 0⍪(8⍴16)⊤0}
ROL∆05_TEST←{_←X 8⍴1 ⋄ 0 ≤ 3↓M.rol 65552 0 0⍪(8⍴16)⊤0}
ROL∆06_TEST←{_←X 65552 8 0 ⋄ 3↑M.rol 65552 0 0⍪(8⍴16)⊤0}
ROL∆07_TEST←{_←X 8⍴1 ⋄ 16 > 3↓M.rol 16 0 0,(8⍴16)⊤1187907038}
ROL∆08_TEST←{_←X 8⍴1 ⋄ 0 ≤ 3↓M.rol 16 0 0,(8⍴16)⊤1187907038}
ROL∆09_TEST←{_←X 16 0 0 ⋄ 3↑M.rol 16 0 0,(8⍴16)⊤1187907038}
ROL∆10_TEST←{_←X 1 ⋄ M.gth∘M.rol ⍨ 16 0 0,(8⍴16)⊤1187907038}
ROL∆11_TEST←{_←X 8⍴1 ⋄ 16 ≥ 3↓M.rol 65552 0 0,(8⍴16)⊤1187907038}
ROL∆12_TEST←{_←X 8⍴1 ⋄ 0 ≤ 3↓M.rol 65552 0 0,(8⍴16)⊤1187907038}
ROL∆13_TEST←{_←X 65552 0 0 ⋄ 3↑M.rol 65552 0 0,(8⍴16)⊤1187907038}
ROL∆14_TEST←{_←X 1 ⋄ M.gth∘M.rol ⍨ 65552 0 0,(8⍴16)⊤1187907038}
ROL∆15_TEST←{_←X 16⍪0⍪⍨⍉⍪0 8 8 0 8 ⋄ 3↑M.rol 16⍪0⍪0⍪(8⍴16)⊤5375 0 0 46259 0}
ROL∆16_TEST←{_←X 16⍪0⍪⍨⍉⍪0 8 8 0 8 ⋄ 3↑M.rol 16⍪0 1 0 0 0⍪0⍪(8⍴16)⊤5375 0 0 46259 0}
ROL∆17_TEST←{_←X 5⍴1 ⋄ (16⍪0⍪0⍪(8⍴16)⊤5375 1 1 46259 1) M.geq M.rol 16⍪0⍪0⍪(8⍴16)⊤5375 0 0 46259 0}
:EndNamespace
﻿:Namespace rop_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
ROP∆01_TEST←{_←X  3 2 1 2⍴(,11)(11 4 3 2 1) ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 2 1⍴⍳6)({(⍴⍺)(⍴⍵)}M.rop ¯4 15)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆02_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤(5×⍳5)∘.+⍳4 ⋄ (16⍪0⍪0⍪(8⍴16)⊤⍳5)(M.add M.rop ¯1)16⍪0⍪0⍪(8⍴16)⊤5 4⍴⍳20}
ROP∆03_TEST←{_←X  (3 6 9 13 16)(≥⍤¯1)5 4⍴⍳20 ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 6 9 13 16)(M.geq M.rop ¯1)16⍪0⍪0⍪(8⍴16)⊤5 4⍴⍳20}
ROP∆04_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤(3 2 1⍴⍳6)(+⍤0 15)4 3 2 1⍴⍳24 ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 2 1⍴⍳6)(M.add M.rop 0 15)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆05_TEST←{_←X  (3 2 1⍴⍳6)(≥⍤0 15)4 3 2 1⍴⍳24 ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 2 1⍴⍳6)(M.geq M.rop 0 15)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆06_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤(3 2 1⍴⍳6)(+⍤3 ¯1)4 3 2 1⍴⍳24 ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 2 1⍴⍳6)(M.add M.rop 3 ¯1)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆07_TEST←{_←X  (3 2 1⍴⍳6)(≥⍤3 ¯1)4 3 2 1⍴⍳24 ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 2 1⍴⍳6)(M.geq M.rop 3 ¯1)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆08_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤(3 2 1⍴⍳6)(+⍤2 ⍤15 ¯2)4 3 2 1⍴⍳24 ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 2 1⍴⍳6)(M.add M.rop 2 M.rop 15 ¯2)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆09_TEST←{_←X  (3 2 1⍴⍳6)(≥⍤2 ⍤15 ¯2)4 3 2 1⍴⍳24 ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 2 1⍴⍳6)(M.geq M.rop 2 M.rop 15 ¯2)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆10_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤(2 1⍴0 5)(+⍤2 ⍤15 2)4 3 2 1⍴⍳24 ⋄ (16⍪0⍪0⍪(8⍴16)⊤2 1⍴0 5)(M.add M.rop 2 M.rop 15 2)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆11_TEST←{_←X  (2 1⍴0 5)(≥⍤2 ⍤15 2)4 3 2 1⍴⍳24 ⋄ (16⍪0⍪0⍪(8⍴16)⊤2 1⍴0 5)(M.geq M.rop 2 M.rop 15 2)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆12_TEST←{_←X  (16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳6) ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 2 1⍴⍳6)({⍺} M.rop 3 ¯1)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆13_TEST←{_←X  (16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24) ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 2 1⍴⍳6)({⍵} M.rop 3 ¯1)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆14_TEST←{_←X  16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨(3 2 1⍴⍳6)({⍺⍵}⍤3 ¯1)4 3 2 1⍴⍳24 ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 2 1⍴⍳6)({⍺⍵} M.rop 3 ¯1)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆15_TEST←{_←X  16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨(3 2 1⍴⍳6)({⍺ ⍺ ⍵}⍤3 ¯1)4 3 2 1⍴⍳24 ⋄ (16⍪0⍪0⍪(8⍴16)⊤3 2 1⍴⍳6)({⍺ ⍺ ⍵} M.rop 3 ¯1)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆16_TEST←{_←X  16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨(⊂⍤0)4 3 2 1⍴⍳24 ⋄ (⊂ M.rop 0)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆17_TEST←{_←X  16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨(⊂⍤1)4 3 2 1⍴⍳24 ⋄ (⊂ M.rop 1)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆18_TEST←{_←X  16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨(⊂⍤2)4 3 2 1⍴⍳24 ⋄ (⊂ M.rop 2)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆19_TEST←{_←X  16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨(⊂⍤3)4 3 2 1⍴⍳24 ⋄ (⊂ M.rop 3)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆20_TEST←{_←X  16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨(⊂⍤¯1)4 3 2 1⍴⍳24 ⋄ (⊂ M.rop ¯1)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆21_TEST←{_←X  16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨(⊂⍤¯2)4 3 2 1⍴⍳24 ⋄ (⊂ M.rop ¯2)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
ROP∆22_TEST←{_←X  16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨(⊂⍤¯3)4 3 2 1⍴⍳24 ⋄ (⊂ M.rop ¯3)16⍪0⍪0⍪(8⍴16)⊤4 3 2 1⍴⍳24}
:EndNamespace
:Namespace rot_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
ROT∆01_TEST←{_←X 16⍪0⍪(8⍴16)⊤⌽2 4⍴⍳8 ⋄ M.rot 16⍪0⍪(8⍴16)⊤2 4⍴⍳8}
ROT∆02_TEST←{_←X 16⍪0⍪(8⍴16)⊤⌽2 3 4⍴⍳8 ⋄ M.rot 16⍪0⍪(8⍴16)⊤2 3 4⍴⍳8}
ROT∆03_TEST←{_←X 16⍪0⍪(8⍴16)⊤⌽⍳8 ⋄ M.rot 16⍪0⍪(8⍴16)⊤⍳8}
ROT∆04_TEST←{_←X 16⍪0⍪(8⍴16)⊤2⌽2 4⍴⍳8 ⋄ 2 M.rot 16⍪0⍪(8⍴16)⊤2 4⍴⍳8}
ROT∆05_TEST←{_←X 16⍪0⍪(8⍴16)⊤2⌽2 3 4⍴⍳8 ⋄ 2 M.rot 16⍪0⍪(8⍴16)⊤2 3 4⍴⍳8}
ROT∆06_TEST←{_←X 16⍪0⍪(8⍴16)⊤2⌽⍳8 ⋄ 2 M.rot 16⍪0⍪(8⍴16)⊤⍳8}
ROT∆07_TEST←{_←X 16⍪0⍪(8⍴16)⊤(1 3)⌽2 4⍴⍳8 ⋄ (1 3) M.rot 16⍪0⍪(8⍴16)⊤2 4⍴⍳8}
ROT∆08_TEST←{_←X 16⍪0⍪(8⍴16)⊤(2 3⍴⍳6)⌽2 3 4⍴⍳8 ⋄ (2 3⍴⍳6) M.rot 16⍪0⍪(8⍴16)⊤2 3 4⍴⍳8}
:EndNamespace
:Namespace rpr_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
RPR∆01_TEST←{_←X 8⍴1 ⋄ 16 > 3↓M.rpr 16 0 0⍪(8⍴16)⊤0}
RPR∆02_TEST←{_←X 8⍴1 ⋄ 0 ≤ 3↓M.rpr 16 0 0⍪(8⍴16)⊤0}
RPR∆03_TEST←{_←X 16 0 0 ⋄ 3↑M.rpr 16 0 0⍪(8⍴16)⊤0}
RPR∆04_TEST←{_←X 1 ⋄ M.gth∘M.rpr⍨16 0 0⍪(8⍴16)⊤23}
RPR∆05_TEST←{_←X 8⍴1 ⋄ 16 > 3↓M.rpr 16 0 0⍪(8⍴16)⊤23}
RPR∆06_TEST←{_←X 8⍴1 ⋄ 0 ≤ 3↓M.rpr 16 0 0⍪(8⍴16)⊤23}
RPR∆07_TEST←{_←X 16 0 0 ⋄ 3↑M.rpr 16 0 0⍪(8⍴16)⊤23}
RPR∆08_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤7)(⊢M.gth M.rpr)16 0 0⍪(8⍴16)⊤23}
RPR∆09_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤7)(⊣M.leq M.rpr)16 0 0⍪(8⍴16)⊤23}
RPR∆10_TEST←{_←X 8⍴1 ⋄ 16 > 3↓(16 0 0⍪(8⍴16)⊤7)M.rpr 16 0 0⍪(8⍴16)⊤23}
RPR∆11_TEST←{_←X 8⍴1 ⋄ 0 ≤ 3↓(16 0 0⍪(8⍴16)⊤7)M.rpr 16 0 0⍪(8⍴16)⊤23}
RPR∆12_TEST←{_←X 16 0 0 ⋄ 3↑(16 0 0⍪(8⍴16)⊤7)M.rpr 16 0 0⍪(8⍴16)⊤23}
RPR∆13_TEST←{_←X 1 ⋄ (16⍪0⍪0⍪(8⍴16)⊤7 11 13 17 19)M.eps⍨(16 0 0⍪(8⍴16)⊤7)M.rpr 16 0 0⍪(8⍴16)⊤23}
:EndNamespace
:Namespace rsg_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
RSG∆01_TEST←{_←X 8⍴1 ⋄ 16 > 3↓M.rsg 16 0 0⍪(8⍴16)⊤0}
RSG∆02_TEST←{_←X 8⍴1 ⋄ 0 ≤ 3↓M.rsg 16 0 0⍪(8⍴16)⊤0}
RSG∆03_TEST←{_←X 16 0 0 ⋄ 3↑M.rsg 16 0 0⍪(8⍴16)⊤0}
RSG∆04_TEST←{_←X 1 ⋄ M.gth∘M.rsg⍨16 0 0⍪(8⍴16)⊤74}
RSG∆05_TEST←{_←X 8⍴1 ⋄ 16 > 3↓M.rsg 16 0 0⍪(8⍴16)⊤74}
RSG∆06_TEST←{_←X 8⍴1 ⋄ 0 ≤ 3↓M.rsg 16 0 0⍪(8⍴16)⊤74}
RSG∆07_TEST←{_←X 16 0 0 ⋄ 3↑M.rsg 16 0 0⍪(8⍴16)⊤74}
RSG∆08_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤7)(⊢ M.gth M.rsg) 16 0 0⍪(8⍴16)⊤74}
RSG∆09_TEST←{_←X 1 ⋄ (16 0 0⍪(8⍴16)⊤7)(⊣ M.leq M.rsg) 16 0 0⍪(8⍴16)⊤74}
RSG∆10_TEST←{_←X 8⍴1 ⋄ 16 > 3↓(16 0 0⍪(8⍴16)⊤7)M.rsg 16 0 0⍪(8⍴16)⊤74}
RSG∆11_TEST←{_←X 8⍴1 ⋄ 0 ≤ 3↓(16 0 0⍪(8⍴16)⊤7)M.rsg 16 0 0⍪(8⍴16)⊤74}
RSG∆12_TEST←{_←X 16 0 0 ⋄ 3↑(16 0 0⍪(8⍴16)⊤7)M.rsg 16 0 0⍪(8⍴16)⊤74}
RSG∆13_TEST←{_←X 1 ⋄ (16⍪0⍪0⍪(8⍴16)⊤11 23 29 41 53)M.eps⍨(16 0 0⍪(8⍴16)⊤7)M.rsg 16 0 0⍪(8⍴16)⊤74}
:EndNamespace
:Namespace scf_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
SCF∆01_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤+⍀2906258 11575550 222852 246055 ⋄ M.add M.scf 16⍪0⍪0⍪(8⍴16)⊤2906258 11575550 222852 246055}
SCF∆02_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤|-⍀2906258 ¯11575550 222852 ¯246055 ⋄ M.sub M.scf 16⍪0⍪0 1 0 1⍪(8⍴16)⊤2906258 11575550 222852 246055}
SCF∆03_TEST←{_←X  16⍪0⍪0 1 1 1⍪(8⍴16)⊤|+⍀2906258 ¯11575550 222852 ¯246055 ⋄ M.add M.scf 16⍪0⍪0 1 0 1⍪(8⍴16)⊤2906258 11575550 222852 246055}
SCF∆04_TEST←{_←X  16⍪0⍪0 1 1 1⍪(8⍴16)⊤|-⍀2906258 11575550 222852 246055 ⋄ M.sub M.scf 16⍪0⍪0⍪(8⍴16)⊤2906258 11575550 222852 246055}
SCF∆05_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤×⍀188 63 57 ⋄ M.mul M.scf 16⍪0⍪0⍪(8⍴16)⊤188 63 57}
SCF∆06_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤173×1+⍳6 ⋄ M.add M.scf 16⍪0⍪0⍪(8⍴16)⊤6⍴173}
SCF∆07_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤11*1+⍳7 ⋄ M.mul M.scf 16⍪0⍪0⍪(8⍴16)⊤7⍴11}
SCF∆08_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤2 3⍴34 100 45 246 155 139 ⋄ M.add M.scf 16⍪0⍪0⍪(8⍴16)⊤2 3⍴34 100 45 212 55 94}
SCF∆09_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤2 3⍴34 100 45 7208 5500 4230 1096040 ⋄ M.mul M.scf 16⍪0⍪0⍪(8⍴16)⊤2 3⍴34 100 45 212 55 94}
SCF∆10_TEST←{_←X  65552⍪0⍪0⍪0,15,⍪32↑16,⍨19⍴15 ⋄ M.add M.scf 65552⍪0⍪0⍪0,15,⍪¯32↑1}
SCF∆11_TEST←{_←X  65552⍪0⍪0⍪¯32↑1 3⍴0 ¯1 0 ⋄ M.add M.scf 65552⍪0⍪0 1 0⍪(32⍴16)⊤0 1 1}
SCF∆12_TEST←{_←X  16⍪0 0 ¯1⍪0⍪0,15,⍪24↑1 ⋄ M.add M.scf 16⍪0⍪0⍪0,15,⍪¯24↑1}
SCF∆13_TEST←{_←X  16⍪0⍪0 1 0⍪(24⍴16)⊤0 1 0 ⋄ M.add M.scf 16⍪0⍪0 1 0⍪(24⍴16)⊤0 1 1}
SCF∆14_TEST←{_←X  0J16⍪0⍪0⍪(8⍴0J16)⊤+⍀193J71 153J150 71J88 102J213 61J138 ⋄ M.add M.scf 0J16⍪0⍪0⍪(8⍴0J16)⊤193J71 153J150 71J88 102J213 61J138}
SCF∆15_TEST←{_←X  0J16⍪0⍪0⍪(12⍴0J16)⊤-⍀193J71 153J150 71J88 102J213 61J138 ⋄ M.sub M.scf 0J16⍪0⍪0⍪(12⍴0J16)⊤193J71 153J150 71J88 102J213 61J138}
SCF∆16_TEST←{_←X  0J16⍪0⍪0⍪(12⍴0J16)⊤×⍀71J88 102J213 61J138 ⋄ M.mul M.scf 0J16⍪0⍪0⍪(12⍴0J16)⊤71J88 102J213 61J138}
SCF∆17_TEST←{_←X  10⍪4⍪0⍪(10⍴10)⊤2 83 383 73383 633383 ⋄ M.add M.scf 10⍪4 4 3 1 0⍪0⍪(10⍴10)⊤2 81 30 73 56}
SCF∆18_TEST←{_←X  10⍪4⍪0 1 0 1 0⍪(10⍴10)⊤2 79 221 72779 487221 ⋄ M.add M.scf 10⍪4 4 3 1 0⍪0 1 0 1 0⍪(10⍴10)⊤2 81 30 73 56}
SCF∆19_TEST←{_←X  10⍪0 0 0 0 ¯1 ¯1⍪0⍪(10⍴10)⊤20 40 60 80 10 12×10*8 ⋄ M.add M.scf 10⍪0⍪0⍪(10⍴10)⊤6⍴2×10*9}
SCF∆20_TEST←{_←X  10⍪0 0 0 ¯4 ¯7⍪0⍪(10⍴10)⊤2 4 8 16 32×10*3 6 9 8 8 ⋄ M.mul M.scf 10⍪0⍪0⍪(10⍴10)⊤5⍴2×10*3}
:EndNamespace
:Namespace scn_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
SCN∆01_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤+\2906258 11575550 222852 246055 ⋄ M.add M.scn 16⍪0⍪0⍪(8⍴16)⊤2906258 11575550 222852 246055}
SCN∆02_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤|-\2906258 ¯11575550 222852 ¯246055 ⋄ M.sub M.scn 16⍪0⍪0 1 0 1⍪(8⍴16)⊤2906258 11575550 222852 246055}
SCN∆03_TEST←{_←X  16⍪0⍪0 1 1 1⍪(8⍴16)⊤|+\2906258 ¯11575550 222852 ¯246055 ⋄ M.add M.scn 16⍪0⍪0 1 0 1⍪(8⍴16)⊤2906258 11575550 222852 246055}
SCN∆04_TEST←{_←X  16⍪0⍪0 1 1 1⍪(8⍴16)⊤|-\2906258 11575550 222852 246055 ⋄ M.sub M.scn 16⍪0⍪0⍪(8⍴16)⊤2906258 11575550 222852 246055}
SCN∆05_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤×\188 63 57 ⋄ M.mul M.scn 16⍪0⍪0⍪(8⍴16)⊤188 63 57}
SCN∆06_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤173×1+⍳6 ⋄ M.add M.scn 16⍪0⍪0⍪(8⍴16)⊤6⍴173}
SCN∆07_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤11*1+⍳7 ⋄ M.mul M.scn 16⍪0⍪0⍪(8⍴16)⊤7⍴11}
SCN∆08_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤2 3⍴34 134 179 212 267 361 ⋄ M.add M.scn 16⍪0⍪0⍪(8⍴16)⊤2 3⍴34 100 45 212 55 94}
SCN∆09_TEST←{_←X  16⍪0⍪0⍪(8⍴16)⊤2 3⍴34 3400 153000 212 11660 1096040 ⋄ M.mul M.scn 16⍪0⍪0⍪(8⍴16)⊤2 3⍴34 100 45 212 55 94}
SCN∆10_TEST←{_←X  65552⍪0⍪0⍪0,15,⍪32↑16,⍨19⍴15 ⋄ M.add M.scn 65552⍪0⍪0⍪0,15,⍪¯32↑1}
SCN∆11_TEST←{_←X  65552⍪0⍪0⍪¯32↑1 3⍴0 ¯1 0 ⋄ M.add M.scn 65552⍪0⍪0 1 0⍪(32⍴16)⊤0 1 1}
SCN∆12_TEST←{_←X  16⍪0 0 ¯1⍪0⍪0,15,⍪24↑1 ⋄ M.add M.scn 16⍪0⍪0⍪0,15,⍪¯24↑1}
SCN∆13_TEST←{_←X  16⍪0⍪0 1 0⍪(24⍴16)⊤0 1 0 ⋄ M.add M.scn 16⍪0⍪0 1 0⍪(24⍴16)⊤0 1 1}
SCN∆14_TEST←{_←X  0J16⍪0⍪0⍪(8⍴0J16)⊤+\193J71 153J150 71J88 102J213 61J138 ⋄ M.add M.scn 0J16⍪0⍪0⍪(8⍴0J16)⊤193J71 153J150 71J88 102J213 61J138}
SCN∆15_TEST←{_←X  0J16⍪0⍪0⍪(12⍴0J16)⊤-\193J71 153J150 71J88 102J213 61J138 ⋄ M.sub M.scn 0J16⍪0⍪0⍪(12⍴0J16)⊤193J71 153J150 71J88 102J213 61J138}
SCN∆16_TEST←{_←X  0J16⍪0⍪0⍪(12⍴0J16)⊤×\71J88 102J213 61J138 ⋄ M.mul M.scn 0J16⍪0⍪0⍪(12⍴0J16)⊤71J88 102J213 61J138}
SCN∆17_TEST←{_←X  10⍪4⍪0⍪(10⍴10)⊤2 83 383 73383 633383 ⋄ M.add M.scn 10⍪4 4 3 1 0⍪0⍪(10⍴10)⊤2 81 30 73 56}
SCN∆18_TEST←{_←X  10⍪4⍪0 1 0 1 0⍪(10⍴10)⊤2 79 221 72779 487221 ⋄ M.add M.scn 10⍪4 4 3 1 0⍪0 1 0 1 0⍪(10⍴10)⊤2 81 30 73 56}
SCN∆19_TEST←{_←X  10⍪0 0 0 0 ¯1 ¯1⍪0⍪(10⍴10)⊤20 40 60 80 10 12×10*8 ⋄ M.add M.scn 10⍪0⍪0⍪(10⍴10)⊤6⍴2×10*9}
SCN∆20_TEST←{_←X  10⍪0 0 0 ¯4 ¯7⍪0⍪(10⍴10)⊤2 4 8 16 32×10*3 6 9 8 8 ⋄ M.mul M.scn 10⍪0⍪0⍪(10⍴10)⊤5⍴2×10*3}
:EndNamespace
﻿:Namespace sgp_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
SGP∆01_TEST←{_←X 7 0 ⋄ ⍴M.sgp 16⍪0⍪0⍪(4⍴16)⊤1}
SGP∆02_TEST←{_←X 16⍪0⍪0⍪(4⍴16)⊤,2 ⋄ M.sgp 16⍪0⍪0⍪(4⍴16)⊤2}
SGP∆03_TEST←{_←X 16⍪0⍪0⍪(4⍴16)⊤,3 ⋄ M.sgp 16⍪0⍪0⍪(4⍴16)⊤3}
SGP∆04_TEST←{_←X 7 0 ⋄ ⍴M.sgp 16⍪0⍪0⍪(4⍴16)⊤7}
SGP∆05_TEST←{_←X 16⍪0⍪0⍪(6⍴16)⊤,799853 ⋄ M.sgp 16⍪0⍪0⍪(6⍴16)⊤799853}
SGP∆06_TEST←{_←X 9 0 ⋄ ⍴M.sgp 16⍪0⍪0⍪(6⍴16)⊤774149}
SGP∆07_TEST←{_←X 9 0 ⋄ ⍴M.sgp 16⍪0⍪0⍪(6⍴16)⊤776903}
SGP∆08_TEST←{_←X 16⍪0⍪0⍪(6⍴16)⊤2 799853 ⋄ M.sgp 16⍪0⍪0⍪(6⍴16)⊤1 2 7 774149 799853}
SGP∆09_TEST←{_←X 9 0 ⋄ ⍴M.sgp 16⍪0⍪0⍪(6⍴16)⊤1 7 774149 776903}
:EndNamespace
﻿:Namespace sha_tests
⎕IO ⎕ML←0 1
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
m1←'abc'
m2←'abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq'
m3←'abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn'
m3,←'hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu'
SHA512∆H1_TEST←{h←'ddaf35a193617abacc417349ae20413112e6fa4e89a97ea2'
h,←'0a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e'
h,←'2a9ac94fa54ca49f' ⋄ _←X h
M.hex 512 M.SHA.sum,⍉(8⍴2)⊤⎕UCS m1}
SHA512∆H2_TEST←{h←'8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa1'
h,←'7299aeadb6889018501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd2654'
h,←'5e96e55b874be909' ⋄ _←X h
M.hex 512 M.SHA.sum,⍉(8⍴2)⊤⎕UCS m3}
SHA384∆H1_TEST←{h←'cb00753f45a35e8bb5a03d699ac65007272c32ab0eded163'
h,←'1a8b605a43ff5bed8086072ba1e7cc2358baeca134c825a7' ⋄ _←X h
M.hex 384 M.SHA.sum,⍉(8⍴2)⊤⎕UCS m1}
SHA384∆H2_TEST←{h←'09330c33f71147e83d192fc782cd1b4753111b173b3b05d2'
h,←'2fa08086e3b0f712fcc7c71a557e2db966c3e9fa91746039' ⋄ _←X h
M.hex 384 M.SHA.sum,⍉(8⍴2)⊤⎕UCS m3}
SHA256∆H1_TEST←{h←'ba7816bf8f01cfea414140de5dae2223b00361a396177a9c'
h,←'b410ff61f20015ad' ⋄ _←X h
M.hex 256 M.SHA.sum,⍉(8⍴2)⊤⎕UCS m1}
SHA256∆H2_TEST←{h←'248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167'
h,←'f6ecedd419db06c1' ⋄ _←X h
M.hex 256 M.SHA.sum,⍉(8⍴2)⊤⎕UCS m2}
SHA512∆H3_TEST←{h←'ddaf35a193617abacc417349ae20413112e6fa4e89a97ea2'
h,←'0a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e'
h,←'2a9ac94fa54ca49f' ⋄ _←X 3 5 128⍴h
M.hex⍤1⊢512 M.SHA.sum 3 5 24⍴,⍉(8⍴2)⊤⎕UCS m1}
SHA512∆H4_TEST←{h←'8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa1'
h,←'7299aeadb6889018501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd2654'
h,←'5e96e55b874be909' ⋄ _←X 3 5 128⍴h
M.hex⍤1⊢512 M.SHA.sum 3 5 896⍴,⍉(8⍴2)⊤⎕UCS m3}
SHA384∆H3_TEST←{h←'cb00753f45a35e8bb5a03d699ac65007272c32ab0eded163'
h,←'1a8b605a43ff5bed8086072ba1e7cc2358baeca134c825a7' ⋄ _←X 3 5 96⍴h
M.hex⍤1⊢384 M.SHA.sum 3 5 24⍴,⍉(8⍴2)⊤⎕UCS m1}
SHA384∆H4_TEST←{h←'09330c33f71147e83d192fc782cd1b4753111b173b3b05d2'
h,←'2fa08086e3b0f712fcc7c71a557e2db966c3e9fa91746039' ⋄ _←X 3 5 96⍴h
M.hex⍤1⊢384 M.SHA.sum 3 5 896⍴,⍉(8⍴2)⊤⎕UCS m3}
SHA256∆H3_TEST←{h←'ba7816bf8f01cfea414140de5dae2223b00361a396177a9c'
h,←'b410ff61f20015ad' ⋄ _←X 3 5 64⍴h
M.hex⍤1⊢256 M.SHA.sum 3 5 24⍴,⍉(8⍴2)⊤⎕UCS m1}
SHA256∆H4_TEST←{h←'248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167'
h,←'f6ecedd419db06c1' ⋄ _←X 3 5 64⍴h
M.hex⍤1⊢256 M.SHA.sum 3 5 448⍴,⍉(8⍴2)⊤⎕UCS m2}
:EndNamespace
:Namespace sin_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
SIN∆01_TEST←{_←X 10 21 0,20↑0 ⋄ M.sin 10 0 0,(20⍴10)⊤0}
SIN∆02_TEST←{_←X 10 19 0,20↑1 ⋄ M.sin 10 19 0,⍎¨'15707963267948966192'}
SIN∆03_TEST←{_←X 10 0 0,20↑0 ⋄ M.sin 10 19 0,⍎¨'31415926535897932384'}
SIN∆04_TEST←{_←X 10 19 1,20↑1 ⋄ M.sin 10 19 0,⍎¨'47123889803846898576'}
SIN∆05_TEST←{_←X 10 0 0,20↑0 ⋄ M.sin 10 19 0,⍎¨'62831853071795864769'}
SIN∆06_TEST←{_←X 10 20 0,⍎¨'90018436125947441551' ⋄ M.sin 10 4 0,(20⍴10)⊤20214}
SIN∆07_TEST←{_←X 10 20 1,⍎¨'90018436125947441551' ⋄ M.sin 10 4 1,(20⍴10)⊤20214}
SIN∆08_TEST←{_←X M.cry M.r2c 10 16 0, -1 0J1+.×⍎¨↑'30662171147377330302' '26482645189580402287' ⋄ M.sin 0J10 0 0,(20⍴0J10)⊤4J9}
SIN∆09_TEST←{_←X 10⍪21 20 20⍪0 0 1⍪0,⍉⍎¨↑2⍴⊂'90018436125947441551' ⋄ M.sin 10⍪0 4 4⍪0 0 1⍪(20⍴10)⊤0 20214 20214}
:EndNamespace
:Namespace snh_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
SNH∆01_TEST←{_←X 10 19 0,(16⍴10)⊤0 ⋄ M.snh 10 0 0,(16⍴10)⊤0}
SNH∆02_TEST←{_←X 10 7 0,(10⍴10)⊤8161209051 ⋄ M.snh 10 9 0,⍎¨'7397710068'}
SNH∆03_TEST←{_←X 10 7 1,(10⍴10)⊤8161209051 ⋄ M.snh 10 9 1,⍎¨'7397710068'}
SNH∆04_TEST←{_←X M.cry M.r2c 10 14 0,¯1 0J1+.× ⍎¨↑'2701681325800393' '0385373803791938' ⋄ M.snh 0J10 0 0,(16⍴0J10)⊤4J3}
SNH∆05_TEST←{_←X 10⍪13 8 8⍪0 0 1⍪0,⍉⍎¨↑2⍴⊂'2728991719' ⋄ M.snh 10⍪0⍪0 0 1⍪(10⍴10)⊤0 4 4}
:EndNamespace
:Namespace spl_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
SPL∆01_TEST←{_←X 16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨↓⍳4 ⋄ M.spl 16⍪0⍪0⍪(8⍴16)⊤⍳4}
SPL∆02_TEST←{_←X 16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨↓2 2⍴⍳4 ⋄ M.spl 16⍪0⍪0⍪(8⍴16)⊤2 2⍴⍳4}
SPL∆03_TEST←{_←X 16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨↓2 3 4⍴⍳24 ⋄ M.spl 16⍪0⍪0⍪(8⍴16)⊤2 3 4⍴⍳24}
SPL∆04_TEST←{_←X 16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨↓2 3 4 5⍴⍳120 ⋄ M.spl 16⍪0⍪0⍪(8⍴16)⊤2 3 4 5⍴⍳120}
:EndNamespace
:Namespace sqd_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
SQD∆01_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤⌷5 5 5⍴×⍨⍳125 ⋄ M.sqd 16⍪0⍪0⍪(8⍴16)⊤5 5 5⍴×⍨⍳125}
SQD∆02_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤4⌷5 5 5⍴×⍨⍳125 ⋄ 4 M.sqd 16⍪0⍪0⍪(8⍴16)⊤5 5 5⍴×⍨⍳125}
SQD∆03_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2 4⌷5 5 5⍴×⍨⍳125 ⋄ 2 4 M.sqd 16⍪0⍪0⍪(8⍴16)⊤5 5 5⍴×⍨⍳125}
SQD∆04_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤89⌷×⍨⍳125 ⋄ 89 M.sqd 16⍪0⍪0⍪(8⍴16)⊤×⍨⍳125}
:EndNamespace
:Namespace sub_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
SUB∆01_TEST←{_←X 16 0 0,(8⍴16)⊤4084999066 ⋄ ⊃M.sub/16,¨0,¨0,¨(⊂8⍴16)⊤¨4178339731 93340665}
SUB∆02_TEST←{_←X 16 0 1,(8⍴16)⊤4084999066 ⋄ ⊃M.sub/16,¨0,¨0,¨(⊂8⍴16)⊤¨93340665 4178339731}
SUB∆03_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤5⍴4084999066 ⋄ ⊃M.sub/16⍪¨0⍪¨0⍪¨(⊂8⍴16)⊤¨5⍴¨4178339731 93340665}
SUB∆04_TEST←{_←X 16 0 0,(8⍴16)⊤0 ⋄ ⊃M.sub/16,¨0,¨0,¨(⊂8⍴16)⊤¨93340665 93340665}
SUB∆05_TEST←{_←X 16 0 0,(8⍴16)⊤93340665 ⋄ ⊃M.sub/16,¨0,¨0,¨(⊂8⍴16)⊤¨93340665 0}
SUB∆06_TEST←{_←X 16 0 1,(8⍴16)⊤93340665 ⋄ ⊃M.sub/16,¨0,¨0,¨(⊂8⍴16)⊤¨0 93340665}
SUB∆07_TEST←{_←X 16 0 0,(8⍴16)⊤0 ⋄ (16 0 1,¯8↑1) M.sub 16,¯10↑¯1}
SUB∆08_TEST←{_←X 16 0 0,(8⍴16)⊤1 ⋄ ⊃M.sub/16,¨0,¨0,¨(⊂8⍴16)⊤¨1 0}
SUB∆09_TEST←{_←X 16 0 1,(8⍴16)⊤1 ⋄ ⊃M.sub/16,¨0,¨0,¨(⊂8⍴16)⊤¨0 1}
SUB∆10_TEST←{_←X 16 ¯1 0,32⍴1 ⋄ (16 0 0,32⍴16) M.sub 35↑16}
SUB∆11_TEST←{_←X 16 0 1⍪(8⍴16)⊤1 ⋄ M.sub 16 0 0,(8⍴16)⊤1}
SUB∆12_TEST←{_←X 16 0 0⍪(8⍴16)⊤1 ⋄ M.sub 16 0 1,(8⍴16)⊤1}
SUB∆13_TEST←{_←X 16 0 1⍪(8⍴16)⊤93340665 ⋄ M.sub 16 0 0⍪(8⍴16)⊤93340665}
SUB∆14_TEST←{_←X 16 0 0⍪(8⍴16)⊤93340665 ⋄ M.sub 16 0 1⍪(8⍴16)⊤93340665}
SUB∆15_TEST←{_←X 16⍪0⍪1⍪(8⍴16)⊤5⍴93340665 ⋄ M.sub 16⍪0⍪0⍪(8⍴16)⊤5⍴93340665}
SUB∆16_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤5⍴4084999066 ⋄ (16 0 0⍪(8⍴16)⊤4178339731) M.sub 16⍪0⍪0⍪(8⍴16)⊤5⍴93340665}
SUB∆17_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤5⍴4084999066 ⋄ (16⍪0⍪0⍪(8⍴16)⊤5⍴4178339731) M.sub 16 0 0⍪(8⍴16)⊤93340665}
SUB∆18_TEST←{_←X 65552 0 1,(16⍴16)⊤1 ⋄ M.sub 65552,¯18↑1}
SUB∆19_TEST←{_←X 65552 0 0,¯16↑¯1 ⋄ (19↑65552) M.sub 65552,¯18↑1}
SUB∆20_TEST←{_←X 65552 0 0,(16⍴16)⊤1 ⋄ M.sub 65552 0 1,(16⍴16)⊤1}
SUB∆21_TEST←{_←X 65552 0 0,(16⍴16)⊤1 ⋄ (19↑65552) M.sub 65552 0 1,(16⍴16)⊤1}
SUB∆22_TEST←{_←X 0J16⍪0⍪(9⍴0J16)⊤¯4J29 ⋄ ⊃M.sub/0J16⍪¨0⍪¨(⊂9⍴0J16)⊤¨11J87 15J58}
SUB∆23_TEST←{_←X 0J16⍪0⍪¯9↑¯1 0J15 ⋄ ⊃M.sub/0J16⍪¨0⍪¨(⊂9⍴0J16)⊤¨0 0J1}
SUB∆24_TEST←{_←X 0J16 0 0,(8⍴0J16)⊤54J¯48 ⋄ (16 0 0,(8⍴16)⊤199) M.sub 0J16 0 0,(8⍴0J16)⊤145J48}
SUB∆25_TEST←{_←X 0J16 0 0,(8⍴0J16)⊤¯54J48 ⋄ (0J16 0 0,(8⍴0J16)⊤145J48) M.sub 16 0 0,(8⍴16)⊤199}
SUB∆26_TEST←{_←X 0J16 ¯3 0⍪¯3↓(11⍴0J16)⊤¯1+2*32 ⋄ (16 0 0,(8⍴16)⊤¯1+2*32) M.sub 0J16 0 0,(8⍴0J16)⊤0}
SUB∆27_TEST←{_←X 10 ¯1 0,(8⍴10)⊤15730439 ⋄ ⊃M.sub/10,¨0,¨0 1,¨(⊂8⍴10)⊤¨60412782 96891611}
SUB∆28_TEST←{_←X 10 ¯1 1,(8⍴10)⊤15730439 ⋄ ⊃M.sub/10,¨0,¨1 0,¨(⊂8⍴10)⊤¨60412782 96891611}
SUB∆29_TEST←{_←X 10 0 1,(8⍴10)⊤36478829 ⋄ ⊃M.sub/10,¨0,¨0,¨(⊂8⍴10)⊤¨60412782 96891611}
SUB∆30_TEST←{_←X 10 0 0,(8⍴10)⊤36478829 ⋄ ⊃M.sub/10,¨0,¨1,¨(⊂8⍴10)⊤¨60412782 96891611}
SUB∆31_TEST←{_←X 65552 0 0,(8⍴16)⊤39771 ⋄ (65552 0 0⍪(8⍴16)⊤280361536) M.sub 65552 0 0,0 16 11 5 5 14 14 5}
:EndNamespace
:Namespace tal_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
TAL∆01_TEST←{_←X 1 ⋄ M.tal 16 0 0,(8⍴16)⊤42}
TAL∆02_TEST←{_←X 5 ⋄ M.tal 16⍪0⍪0⍪(8⍴16)⊤5⍴42}
TAL∆03_TEST←{_←X 4 ⋄ M.tal 16⍪0⍪0⍪(8⍴16)⊤4 7⍴42}
:EndNamespace
:Namespace tan_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
TAN∆01_TEST←{_←X 10 35 0,16↑0 ⋄ M.tan 10 0 0,16↑0}
TAN∆02_TEST←{_←X 10 15 0,16↑1 ⋄ M.tan 10 16 0,⍎¨'7853981633974483'}
TAN∆03_TEST←{_←X 10 15 1,16↑1 ⋄ M.tan 10 16 1,⍎¨'7853981633974483'}
TAN∆04_TEST←{_←X 10 15 0,⍎¨'4234833608620395' ⋄ M.tan 10 4 0,(16⍴10)⊤44805}
TAN∆05_TEST←{_←X 10 15 1,⍎¨'4234833608620395' ⋄ M.tan 10 4 1,(16⍴10)⊤44805}
TAN∆06_TEST←{_←X M.cry M.r2c 10 16 0,¯1 0J1+.×⍎¨↑'1164930816631243' '7874123562675459' ⋄ M.tan 0J10 0 0,(16⍴0J10)⊤6J1}
TAN∆07_TEST←{_←X 10 ⍪35 15 15⍪0 0 1⍪0,⍎¨⍉↑2⍴⊂'4234833608620395' ⋄ M.tan 10 ⍪0 4 4 ⍪0 0 1⍪(16⍴10)⊤0 44805 44805}
:EndNamespace
:Namespace tke_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
TKE∆01_TEST←{_←X 16⍪(⍳2)⍪0 1⍪(8⍴16)⊤2↑⌽⍳4 ⋄ 2 M.tke 16⍪(⍳4)⍪0 1 0 0⍪(8⍴16)⊤⌽⍳4}
TKE∆02_TEST←{_←X 16⍪(¯2↑⍳4)⍪0⍪(8⍴16)⊤¯2↑⌽⍳4 ⋄ ¯2 M.tke 16⍪(⍳4)⍪0 1 0 0⍪(8⍴16)⊤⌽⍳4}
TKE∆03_TEST←{_←X 11 0⍴⍬ ⋄ 0 M.tke 16⍪(⍳4)⍪0 1 0 0⍪(8⍴16)⊤⌽⍳4}
TKE∆04_TEST←{_←X 16⍪(7↑⍳4)⍪(7↑0 1)⍪(8⍴16)⊤7↑⌽⍳4 ⋄ 7 M.tke 16⍪(⍳4)⍪0 1 0 0⍪(8⍴16)⊤⌽⍳4}
TKE∆05_TEST←{_←X 16⍪(¯7↑⍳4)⍪(¯7↑1 0 0)⍪(8⍴16)⊤¯7↑⌽⍳4 ⋄ ¯7 M.tke 16⍪(⍳4)⍪0 1 0 0⍪(8⍴16)⊤⌽⍳4}
TKE∆06_TEST←{_←X 11 0 2⍴⍬ ⋄ 0 2 M.tke 16⍪(3 3⍴8|⍳9)⍪(3 3⍴0 0 1)⍪(8⍴16)⊤3 3⍴⍳9}
TKE∆07_TEST←{_←X 16⍪(2 2↑3 3⍴8|⍳9)⍪(2 2↑3 3⍴0 0 1)⍪(8⍴16)⊤2 2↑3 3⍴⍳9 ⋄ 2 2 M.tke 16⍪(3 3⍴8|⍳9)⍪(3 3⍴0 0 1)⍪(8⍴16)⊤3 3⍴⍳9}
TKE∆08_TEST←{_←X 16⍪(¯2 5↑3 3⍴8|⍳9)⍪(¯2 5↑3 3⍴0 0 1)⍪(8⍴16)⊤¯2 5↑3 3⍴⍳9 ⋄ ¯2 5 M.tke 16⍪(3 3⍴8|⍳9)⍪(3 3⍴0 0 1)⍪(8⍴16)⊤3 3⍴⍳9}
TKE∆09_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2 2 2↑2 3 4⍴⍳24 ⋄ 2 2 2 M.tke 16⍪0⍪0⍪(8⍴16)⊤2 3 4⍴⍳24}
TKE∆10_TEST←{_←X 16⍪0⍪0⍪(8⍴16)⊤2 2 ¯2↑2 3 4⍴⍳24 ⋄ 2 2 ¯2 M.tke 16⍪0⍪0⍪(8⍴16)⊤2 3 4⍴⍳24}
:EndNamespace
:Namespace trn_tests
⎕IO ⎕ML ⎕WX←0 1 3
X←{⊢#.UT.expect←⍵} ⋄ M←#.mystika
TRN∆01_TEST←{_←X  16⍪(⍉2 3 4⍴⍳24)⍪0⍪(8⍴16)⊤⍉2 3 4⍴⍳24 ⋄ M.trn 16⍪(2 3 4⍴⍳24)⍪0⍪(8⍴16)⊤2 3 4⍴⍳24}
TRN∆02_TEST←{_←X  16⍪(1 2 0⍉2 3 4⍴⍳24)⍪0⍪(8⍴16)⊤1 2 0⍉2 3 4⍴⍳24 ⋄ 1 2 0 M.trn 16⍪(2 3 4⍴⍳24)⍪0⍪(8⍴16)⊤2 3 4⍴⍳24}
:EndNamespace
﻿:NameSpace UT
⎕IO ← 1
sac ← 0
expect_orig ← expect ← ⎕NS⍬
exception ← ⍬
nexpect_orig ← nexpect ← ⎕NS⍬
print_passed ← 1
print_summary ← 1
print_header ← 0
∇ {Z}←{Conf}run Argument;PRE_test;POST_test;TEST_step;COVER_step;FromSpace
load_display_if_not_already_loaded
load_salt_scripts_into_current_namespace_if_configured
FromSpace←1⊃⎕RSI
PRE_test←{}
POST_test←{}
COVER_step←{}
:If 0≠⎕NC'Conf'
:If Conf has'cover_target'
PRE_test←{{}⎕PROFILE'start'}
POST_test←{{}⎕PROFILE'stop'}
:EndIf
:EndIf
:If is_function Argument
TEST_step←single_function_test_function
COVER_file←Argument,'_coverage.html'
:ElseIf is_list_of_functions Argument
TEST_step←list_of_functions_test_function
COVER_file←'list_coverage.html'
:ElseIf is_file Argument
TEST_step←file_test_function
COVER_file←(get_file_name Argument),'_coverage.html'
:ElseIf is_dir Argument
test_files←test_files_in_dir Argument
TEST_step←test_dir_function
Argument←test_files
:EndIf
:If 0≠⎕NC'Conf'
:If Conf has'cover_target'
COVER_step←{Conf,←⊂('cover_file'COVER_file)
generate_coverage_page Conf}
:EndIf
:EndIf
PRE_test ⍬
Z←FromSpace TEST_step Argument
POST_test ⍬
COVER_step ⍬
∇
∇ load_display_if_not_already_loaded
:If 0=⎕NC'#.DISPLAY'
'DISPLAY'#.⎕CY'display'
:EndIf
∇
∇ load_salt_scripts_into_current_namespace_if_configured
:If 0≠⎕NC'#.UT.appdir'
:If ⍬≢#.UT.appdir
⎕SE.SALT.Load #.UT.appdir,'src/*.dyalog -target=#'
⎕SE.SALT.Load #.UT.appdir,'test/*.dyalog -target=#'
:EndIf
:EndIf
∇
∇ Z←FromSpace single_function_test_function TestName
Z←run_ut FromSpace TestName
∇
∇ Z←FromSpace list_of_functions_test_function ListOfNames;t
t←⎕TS
Z←run_ut¨{FromSpace ⍵}¨ListOfNames
t←⎕TS-t
:If print_summary
('Test execution report')print_passed_crashed_failed Z t
:EndIf
∇
∇ Z←FromSpace file_test_function FilePath;FileNS;Functions;TestFunctions;t
FileNS←⎕SE.SALT.Load FilePath,' -target=#'
Functions←↓FileNS.⎕NL 3
TestFunctions←(is_test¨Functions)/Functions
:If (0/⍬,⊂0/'')≡TestFunctions
⎕←'No test functions found'
Z←⍬
:Else
:If print_header
⎕←'Testing from ',FilePath
:EndIf
t←⎕TS
Z←run_ut¨{FileNS ⍵}¨TestFunctions
t←⎕TS-t
:If print_summary
(FilePath,' tests')print_passed_crashed_failed Z t
:EndIf
:EndIf
⎕EX⍕FileNS
∇
∇ Z←FromSpace test_dir_function Test_files;old_sum;old_head
:If Test_files≡⍬/⍬,⊂''
⎕←'No test files found'
Z←⍬
:Else
old_sum←print_summary
old_head←print_header
print_summary←0
print_header←1
t←⎕TS
Z←#.UT.run¨Test_files
t←⎕TS-t
print_summary←old_sum
print_header←old_head
:If print_summary
'All tests'print_passed_crashed_failed (⊃,/Z)t
:EndIf
:EndIf
∇
∇ Z←get_file_name Argument;separator
separator←⊃⌽(Argument∊'/\')/⍳⍴Argument
Z←¯7↓separator↓Argument
∇
∇ generate_coverage_page Conf;ProfileData;CoverResults;HTML
ProfileData←⎕PROFILE'data'
ToCover←retrieve_coverables¨(⊃'cover_target'in Conf)
:If (⍴ToCover)≡(⍴⊂1)
ToCover←⊃ToCover
:EndIf
Representations←get_representation¨ToCover
CoverResults←ProfileData∘generate_cover_result¨↓ToCover,[1.5]Representations
HTML←generate_html CoverResults
Conf write_html_to_page HTML
⎕PROFILE'clear'
∇
∇ Z←retrieve_coverables Something;nc;functions
nc←⎕NC Something
:If nc=3
Z←Something
:ElseIf nc=9
functions←strip¨↓⍎Something,'.⎕NL 3'
Z←{(Something,'.',⍵)}¨functions
:EndIf
∇
∇ Z←strip input
Z←(input≠' ')/input
∇
∇ Z←get_representation Function;nc;rep
nc←⎕NC⊂Function
:If nc=3.1
rep←↓⎕CR Function
rep[1]←⊂'∇',⊃rep[1]
rep,←⊂'∇'
rep←↑rep
:Else
rep←⎕CR Function
:EndIf
Z←rep
∇
∇ Z←ProfileData generate_cover_result(name representation);Indices;lines;functionlines;covered_lines
Indices←({name≡⍵}¨ProfileData[;1])/⍳⍴ProfileData[;1]
lines←ProfileData[Indices;2]
nc←⎕NC⊂name
:If 3.1=nc
functionlines←¯2+⍴↓representation
:Else
functionlines←⊃⍴↓representation
:EndIf
covered_lines←(⍬∘≢¨lines)/lines
Z←(nc lines functionlines covered_lines representation)
∇
∇ Z←generate_html CoverResults;Covered;Total;Percentage;CoverageText;ColorizedCode;Timestamp;Page
Covered←⊃⊃+/{⍴4⊃⍵}¨CoverResults
Total←⊃⊃+/{3⊃⍵}¨CoverResults
Percentage←100×Covered÷Total
CoverageText←'Coverage: ',Percentage,'% (',Covered,'/',Total,')'
ColorizedCode←⊃,/{colorize_code_by_coverage ⍵}¨CoverResults
Timestamp←generate_timestamp_text
Page←⍬
Page,←⊂⍬,'<html>'
Page,←⊂⍬,'<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>'
Page,←⊂⍬,'<style>pre cov {line-height:80%;}'
Page,←⊂⍬,'pre cov {color: green;}'
Page,←⊂⍬,'pre uncov {line-height:80%;}'
Page,←⊂⍬,'pre uncov {color:red;}</style>'
Page,←⊂⍬,CoverageText
Page,←⊂⍬,'<pre>'
Page,←ColorizedCode
Page,←⊂⍬,'</pre>'
Page,←Timestamp
Page,←⊂⍬,'</html>'
Z←Page
∇
∇ Z←colorize_code_by_coverage CoverResult;Colors;Ends;Code
:If 3.1=⊃CoverResult
Colors←(2+3⊃CoverResult)⍴⊂'<uncov>'
Colors[1]←⊂''
Colors[⍴Colors]←⊂''
Ends←(2+3⊃CoverResult)⍴⊂'</uncov>'
Ends[1]←⊂''
Ends[⍴Ends]←⊂''
:Else
Colors←(3⊃CoverResult)⍴⊂'<uncov>'
Ends←(3⊃CoverResult)⍴⊂'</uncov>'
:EndIf
Colors[1+4⊃CoverResult]←⊂'<cov>'
Ends[1+4⊃CoverResult]←⊂'</cov>'
Code←↓5⊃CoverResult
Z←Colors,[1.5]Code
Z←{⍺,(⎕UCS 13),⍵}/Z,Ends
∇
∇ Z←generate_timestamp_text;TS;YYMMDD;HHMMSS
TS←⎕TS
YYMMDD←⊃{⍺,'-',⍵}/3↑TS
HHMMSS←⊃{⍺,':',⍵}/3↑3↓TS
Z←'Page generated: ',YYMMDD,'|',HHMMSS
∇
∇ Conf write_html_to_page Page;tie;filename
filename←(⊃'cover_out'in Conf),(⊃'cover_file'in Conf)
:Trap 22
tie←filename ⎕NTIE 0
filename ⎕NERASE tie
filename ⎕NCREATE tie
:Else
tie←filename ⎕NCREATE 0
:EndTrap
Simple_array←⍕⊃,/Page
(⎕UCS'UTF-8'⎕UCS Simple_array)⎕NAPPEND tie
∇
∇ Z←is_function Argument
Z←'_TEST'≡¯5↑Argument
∇
∇ Z←is_list_of_functions Argument
Z←2=≡Argument
∇
∇ Z←is_file Argument
Z←'.dyalog'≡¯7↑Argument
∇
∇ Z←is_dir Argument;attr
:If 'Mac' 'Linux'∨.≡3 5↑¨⊂⊃'.'⎕WG'APLVersion'
Z←'yes'≡⊃⎕CMD'test -d ',Argument,' && echo yes || echo no'
:Else
'gfa'⎕NA'I kernel32|GetFileAttributes* <0t'
:If Z←¯1≠attr←gfa⊂Argument ⍝ If file exists
Z←⊃2 16⊤attr           ⍝ Return bit 4
:EndIf
:EndIf
∇
∇ Z←test_files_in_dir Argument
:If 'Mac' 'Linux'∨.≡3 5↑¨⊂⊃'.'⎕WG'APLVersion'
Z←⎕SH'find ',Argument,' -name \*_tests.dyalog'
:Else
Z←#.Files.Dir Argument,'\*_tests.dyalog'
Z←(Argument,'\')∘,¨Z
:EndIf
∇
∇ Z←run_ut ut_data;returned;crashed;pass;crash;fail;message
(returned crashed time)←execute_function ut_data
(pass crash fail)←determine_pass_crash_or_fail returned crashed
message←determine_message pass fail crashed(2⊃ut_data)returned time
(pass∧~crashed)print_message_to_screen message
Z←(pass crash fail)
∇
∇ Z←execute_function ut_data;function;t
reset_UT_globals
function←(⍕(⊃ut_data[1])),'.',⊃ut_data[2]
:Trap sac
:If 3.2 3.3∨.=⎕NC⊂function
t←⎕TS
Z←(⍎function,' ⍬')0
t←⎕TS-t
:Else
t←⎕TS
Z←(⍎function)0
t←⎕TS-t
:EndIf
:Else
Z←(↑⎕DM)1
:If exception≢⍬
expect←exception
Z[2]←0
t←⎕TS-t
:EndIf
:EndTrap
Z,←⊂t
∇
∇ reset_UT_globals
expect_orig ← expect← ⎕NS⍬
exception←⍬
nexpect_orig ← nexpect← ⎕NS⍬
∇
∇ Z←is_test FunctionName;wsIndex
wsIndex←FunctionName⍳' '
FunctionName←(wsIndex-1)↑FunctionName
Z←'_TEST'≡¯5↑FunctionName
∇
∇ Z←format_time ts;m;s;ms
(m s ms)←¯3↑0 24 60 60 1000{⍺⊤⍺⊥⍵}¯5↑ts
Z←(⍕m),' m ',(⍕s),' s ',(⍕ms),' ms'
∇
∇ Heading print_passed_crashed_failed(ArrayRes time)
⎕←'-----------------------------------------'
⎕←Heading
⎕←'    ⍋  Passed: ',⍕+/{1⊃⍵}¨ArrayRes
⎕←'    ⍟ Crashed: ',⍕+/{2⊃⍵}¨ArrayRes
⎕←'    ⍒  Failed: ',⍕+/{3⊃⍵}¨ArrayRes
⎕←'    ○ Runtime: ',format_time time
∇
determine_pass_crash_or_fail←{
r c←⍵ ⋄ 0≠c:0 1 0 ⋄ z←(0 0 1)(1 0 0)
expect_orig≢expect:(⎕IO+expect≡r)⊃z ⋄ (⎕IO+nexpect≢r)⊃z
}
∇ Z←determine_message(pass fail crashed name returned time)
:If crashed
Z←'CRASHED: 'failure_message name returned
:ElseIf pass
Z←name,' Passed ',format_time time
:Else
Z←'FAILED: 'failure_message name returned
:EndIf
∇
∇ passed print_message_to_screen message
:If (~passed)∨passed∧print_passed
⎕←message
:EndIf
∇
∇ Z←term_to_text Term;Text;Rows
Text←#.DISPLAY Term
Rows←1⊃⍴Text
Z←(Rows 4⍴''),Text
∇
∇ Z←Cause failure_message(name returned);hdr;exp;expterm;got;gotterm
hdr←Cause,name
exp←'Expected'
expterm←term_to_text #.UT.expect
got←'Got'
gotterm←term_to_text returned
Z←align_and_join_message_parts hdr exp expterm got gotterm
∇
∇ Z←align_and_join_message_parts Parts;hdr;exp;expterm;got;gotterm;R1;C1;R2;C2;W
(hdr exp expterm got gotterm)←Parts
(R1 C1)←⍴expterm
(R2 C2)←⍴gotterm
W←⊃⊃⌈/C1 C2(⍴hdr)(⍴exp)(⍴got)
Z←(W↑hdr),[0.5](W↑exp)
Z←Z⍪(R1 W↑expterm)
Z←Z⍪(W↑got)
Z←Z⍪(R2 W↑gotterm)
∇
∇ Z←confparam in config
Z←1↓⊃({confparam≡⊃⍵}¨config)/config
∇
∇ Z←config has confparam
Z←∨/{confparam≡⊃⍵}¨config
∇
:EndNameSpace
﻿:Namespace util
⍝ Boxed display of array.
display←{⎕IO ⎕ML←0 1
⍝ box with type and axes
box←{
vrt hrz←(¯1+⍴⍵)⍴¨'│─'	⍝ vert. and horiz. lines
top←'─⊖→'[¯1↑⍺],hrz	⍝ upper border with axis
bot←(⊃⍺),hrz	⍝ lower border with type
rgt←'┐│',vrt,'┘'	⍝ right side with corners
lax←'│⌽↓'[¯1↓1↓⍺],¨⊂vrt	⍝ left side(s) with axes,
lft←⍉'┌',(↑lax),'└'	⍝ ... and corners
lft,(top⍪⍵⍪bot),rgt	⍝ fully boxed array
}
deco←{⍺←type open ⍵ ⋄ ⍺,axes ⍵}	⍝ type and axes vector
axes←{(-2⌈⍴⍴⍵)↑1+×⍴⍵}	⍝ array axis types
open←{16::(1⌈⍴⍵)⍴⊂'[ref]' ⋄ (1⌈⍴⍵)⍴⍵}	⍝ exposure of null axes
trim←{(~1 1⍷∧⌿⍵=' ')/⍵}	⍝ removal of extra blank cols
type←{{(1=⍴⍵)⊃'+'⍵}∪,char¨⍵}	⍝ simple array type
char←{⍬≡⍴⍵:'─' ⋄ (⊃⍵∊'¯',⎕D)⊃'#~'}∘⍕	⍝ simple scalar type
line←{(6≠10|⎕DR' '⍵)⊃' -'}	⍝ underline for atom
⍝ recursive boxing of arrays:
{
0=≡⍵:' '⍪(open ⎕FMT ⍵)⍪line ⍵	⍝ simple scalar
1 ⍬≡(≡⍵)(⍴⍵):'∇' 0 0 box ⎕FMT ⍵	⍝ object rep: ⎕OR
1=≡⍵:(deco ⍵)box open ⎕FMT open ⍵	⍝ simple array
('∊'deco ⍵)box trim ⎕FMT ∇¨open ⍵	⍝ nested array
}⍵
}
pp←{⍵⊣⎕←display ⍵⊣⍞←⍴⍵⊣⍞←'Shape: '}
px←{⍺←'' ⋄ ⎕←⍺ ⋄ ⎕←##.codfns.Xml ⍵ ⋄ ⍵}
⍝ Char vector from UTF-8 file ⍵.
utf8get←{
0::⎕SIGNAL ⎕EN	⍝ signal error to caller.
tie←⍵ ⎕NTIE 0	⍝ file handle.
ints←⎕NREAD tie 83,⎕NSIZE tie	⍝ all UTF-8 file bytes.
('UTF-8'⎕UCS 256|ints)⊣⎕NUNTIE tie	⍝ ⎕AV chars.
}
split←{lf cr←⎕UCS 10 13 ⋄ {⍵~cr lf}¨(1,¯1↓⍵=lf)⊂⍵}
∇TEST
∇
test←{##.UT.run './tests/',⍵,'_tests.dyalog'}
MK∆T1←{id ns fn←⍺⍺ ⋄ r←⍵⍵ ⋄ CS←id ##.codfns.Fix ns ⋄ NS←⎕FIX ns
MK∆T2←{id ns fn←⍺⍺ ⋄ l r←⍵⍵ ⋄ CS←id ##.codfns.Fix ns ⋄ NS←⎕FIX ns
MK∆T3←{id ns fn tl←⍺⍺ ⋄ l r←⍵⍵ ⋄ CS←id ##.codfns.Fix ns ⋄ NS←⎕FIX ns
nv←l(⍎'NS.',fn)r ⋄ cv←l(⍎'CS.',fn)r
∇	Z←ID(NCF GEN∆T1 THIS)IN;NS;FN;TC;TMP
NS TC FN←NCF ⋄ TMP←(NS,ID) TC FN MK∆T1 IN
⍎'THIS.',NS,'∆',ID,'_TEST←TMP'
Z←0 0⍴⍬
∇
∇	Z←ID(NCF GEN∆T2 THIS)IN;NS;FN;TC;TMP
NS TC FN←NCF ⋄ TMP←(NS,ID) TC FN MK∆T2 IN
⍎'THIS.',NS,'∆',ID,'_TEST←TMP'
Z←0 0⍴⍬
∇
∇Z←ID(NCFT GEN∆T3 THIS)IN;NS;FN;TC;TMP;TL
NS TC FN TL←NCFT ⋄ TMP←(NS,ID) TC FN TL MK∆T3 IN
⍎'THIS.',NS,'∆',ID,'_TEST←TMP'
Z←0 0⍴⍬
∇
:EndNamespace﻿ sign←GetSign date;dates;signs
⍝ Compute sign of the Zodiac from a 2-element integer vector containing [Month,Day]
signs←13⍴'Capricorn' 'Aquarius' 'Pisces' 'Aries' 'Taurus' 'Gemini' 'Cancer' 'Leo' 'Virgo' 'Libra' 'Scorpio' 'Sagittarius'
dates←119 218 320 419 520 620 722 822 922 1022 1121 1221
sign←signs⊃⍨1+dates⍸100⊥2↑date
﻿ ns←GetSignObject ns
⍝ Return a sign object contain month, day (provided as input) and sign
ns.sign←GetSign ns.(month day)
﻿ r←req GetSignWithRequest date;dates;signs
⍝ Compute sign of the Zodiac from a 2-element integer vector containing [Month,Day]
r←⎕NS''
signs←13⍴'Capricorn' 'Aquarius' 'Pisces' 'Aries' 'Taurus' 'Gemini' 'Cancer' 'Leo' 'Virgo' 'Libra' 'Scorpio' 'Sagittarius'
dates←119 218 320 419 520 620 722 822 922 1022 1121 1221
r.sign←signs⊃⍨1+dates⍸100⊥2↑date
r.ipAddr←req.PeerAddr
:If ~0∊⍴req.PeerCert
r.certSubj←req.PeerCert.Formatted.Subject
:EndIf
﻿ r←Reverse data
r←⌽data
﻿:namespace test
∇ sign←GetSign date;dates;signs
⍝ Compute sign of the Zodiac from a 2-element integer vector containing [Month,Day]
signs←13⍴'Capricorn' 'Aquarius' 'Pisces' 'Aries' 'Taurus' 'Gemini' 'Cancer' 'Leo' 'Virgo' 'Libra' 'Scorpio' 'Sagittarius'
dates←119 218 320 419 520 620 722 822 922 1022 1121 1221
sign←signs⊃⍨1+dates⍸100⊥2↑date
∇
:endnamespace
r←Authenticate req;ind
⍝ simple authentication
→r←0
→0⍴⍨r←(≢Database.Users)<ind←Database.Users[;1]⍳⊆req.UserID ⍝ look up user ID
→0⍴⍨r←Database.Users[ind;2]≢⊆req.Password
req.Role←⊃Database.Users[ind;3]
r←Delete ns
∘∘∘
r←Get req;parts
parts←'/'(≠⊆⊢)req.Endpoint ⍝ split the endpoint
r←''
:Select ⊃parts
:Case '' ⍝ dump the entire database
⍝ of course this wouldn't normally be in a real system
(r←⎕NS''){⍺(⍵{⍺⍎⍺⍺,'←⍵'})TableToNS Database⍎⍵}¨Database.⎕NL ¯2
:Case 'Customers'
r←req GetCustomers 1↓parts
:Case 'Orders'
r←req GetOrders 1↓parts
:Case 'Products'
r←req GetProducts 1↓parts
:Else
req.Fail 404
:EndSelect
r←req GetCustomers parts;cind;oind;dind;pind;ExitIf
⍝ /customers[/custid[/orders[/orderid[/items[/itemid]]]]]
ExitIf←→⍴∘0
r←''
:Select ≢parts
:Case 0 ⍝ GET customers - retrieve list of customers
ExitIf req.Fail 404×1=≢Database.Customers
r←TableToNS Database.Customers
r.customerUri←req.MakeURI¨1↓Database.Customers[;1]
:Case 1 ⍝ GET customers/custid - retrieve information for a customer
ExitIf req.Fail 404×0=cind←Database.Customers[;1]lookup parts[1]
r←⊃TableToNS Database.Customers[1,cind;]
r.ordersUri←req.MakeURI'Orders'
:Case 2 ⍝ GET customers/custid/orders
ExitIf req.Fail 404×0∊oind←Database.Orders[;2]lookup parts[1]
r←TableToNS Database.Orders[1,oind;]
r.orderUri←req.MakeURI¨Database.Orders[oind;1]
:Case 3 ⍝ GET customers/custid/orders/orderid
ExitIf req.Fail 404×0∊oind←Database.Orders[;1 2]lookup parts[3 1]
r←⊃TableToNS Database.Orders[1,oind;]
r.itemsUri←req.MakeURI'Items'
:Case 4 ⍝ GET customers/custid/orders/orderid/items
ExitIf req.Fail 404×0∊Database.Orders[;1 2]lookup parts[3 1]
ExitIf req.Fail 404×0∊dind←Database.Details[;1]lookup parts[3]
r←TableToNS Database.Details[1,dind;]
r.itemUri←req.MakeURI¨Database.Details[dind;2]
:Case 5 ⍝ GET customers/custid/orders/orderid/items/itemid
ExitIf req.Fail 404×0∊Database.Orders[;1 2]lookup parts[3 1]
ExitIf req.Fail 404×0∊Database.Details[;1 2]lookup parts[3 5]
ExitIf req.Fail 404×0∊pind←Database.Products[;1]lookup parts[5]
r←TableToNS Database.Products[1,pind;]
:Else
req.Fail 404
:EndSelect
r←req GetOrders parts;oind;dind;pind;ExitIf
⍝ /orders[/orderid[/items[/itemid]]]
ExitIf←→⍴∘0
r←''
:Select ≢parts
:Case 0 ⍝ GET orders - retrieve list of orders
ExitIf req.Fail 404×1=≢Database.Orders
r←TableToNS Database.Orders
r.orderUri←req.MakeURI¨1↓Database.Orders[;1]
:Case 1 ⍝ GET orders/orderid - retrieve information for an order
ExitIf req.Fail 404×0=oind←Database.Orders[;1]lookup parts[1]
r←⊃TableToNS Database.Orders[1,oind;]
r.customerUri←'Customers'req.MakeURI Database.Orders[oind;2]
:Case 2 ⍝ GET orders/orderid/items
ExitIf req.Fail 404×0∊dind←Database.Details[;1]lookup parts[1]
r←TableToNS Database.Details[1,dind;]
r.itemUri←req.MakeURI¨Database.Details[oind;2]
:Case 3 ⍝ GET orders/orderid/items/itemid
ExitIf req.Fail 404×0∊Database.Details[;1 2]lookup parts[1 3]
ExitIf req.Fail 404×0∊pind←Database.Products[;1]lookup parts[3]
r←TableToNS Database.Products[1,pind;]
:Else
req.Fail 404
:EndSelect
r←req GetProducts parts;oind;dind;pind;ExitIf
⍝ /Products[/productid[/orders]]
ExitIf←→⍴∘0
r←''
:Select ≢parts
:Case 0 ⍝ GET products - retrieve list of products
ExitIf req.Fail 404×1=≢Database.Products
r←TableToNS Database.Products
r.itemUri←req.MakeURI¨1↓Database.Products[;1]
:Case 1 ⍝ GET products/productid - retrieve information for a product
ExitIf req.Fail 404×0=pind←Database.Products[;1]lookup parts[1]
r←⊃TableToNS Database.Products[1,pind;]
:Case 2 ⍝ GET products/productid/orders - retrieve orders for a product
ExitIf req.Fail 404×0∊dind←Database.Details[;2]lookup parts[1]
r←TableToNS Database.Details[1,dind;]
r.itemUri←req.MakeURI¨Database.Details[oind;2]
:Case 3 ⍝ GET orders/orderid/items/itemid
ExitIf req.Fail 404×0∊Database.Details[;1 2]lookup parts[1 3]
ExitIf req.Fail 404×0∊pind←Database.Products[;1]lookup parts[3]
r←TableToNS Database.Products[1,pind;]
:Else
req.Fail 404
:EndSelect
InitSession req
⍝ Initialize the user's session
req.Session.Role←req.Role ⍝ set the role for the user
rc←Initialize;tn
⍝ Initialize the application by reading the "database" into the workspace
tn←0 ⎕FSTIE⍨'Database',⍨⊃⎕NPARTS 4⊃5179⌶⊃⎕XSI
Database←⎕NS ''
Database.(Users Customers Orders Details Products)←⎕FREAD¨tn,¨2 3 4 5 6
⎕FUNTIE tn
rc←0r←Post ns
∘∘∘
r←Put req
∘∘∘
﻿ r←{names}TableToNS table
⍝ transform a table into a vector of namespaces, one per row
⍝ names are the column names, if not supplied, the first row of the table is assumed to be the column names
:Access public shared
:If 0∊⍴table ⋄ →0⊣r←0⍴⎕NS'' ⋄ :EndIf
:If 0=⎕NC'names' ⋄ names←table[1;] ⋄ table←1↓table ⋄ :EndIf
:If 0∊⍴table ⋄ →0⊣r←0⍴⎕NS'' ⋄ :EndIf
names←0∘(7162⌶)¨names
r←⎕NS¨(≢table)⍴⊂''
r(names{⍺.⍎'(',(⍕⍺⍺),')←⍵'})¨↓table
Test
⎕SE.SALT.Load'HttpCommand'
HttpCommand.Upgrade
c1←⎕NEW HttpCommand('get' 'admin:admin@localhost:8080/Login')
(c2←⎕NEW HttpCommand('get' 'localhost:8080/Customers')).WaitTime←600
r1←c1.Run
c2.Headers⍪←r1.Headers[,2;]
r2←c2.Run
lookup←{
{⍵↑⍨1⌈≢⍵}1+⍸,(⍕¨1↓[1]⍪⍺)(≡⍤(1⌊¯1+≢⍵))⍵
}
﻿:Namespace Config
Port←443
Secure←1
ServerCertSKI←'b4a60e4dccdcc16a25f8babc6184fa0258d963b5'
Priority←'SECURE128:+SECURE192:-VERS-ALL:+VERS-TLS1.2:+VERS-TLS1.1'
:EndNamespace
﻿:Class JarvisService :Jarvis
⍝    JarvisService is based on the Jarvis class and require that:
⍝       Config is in a namespace #.Config
⍝       Code is in a namespace #.Code
⍝
⍝     Workspace ID will be used as both name of the service to install and the event viewer source
⍝
⍝     Running the configured JarvisService.StartService from an non service environment will suggest commandlines on how to initalize eventviewer and install the service
⍝
⍝     TO start Service call JarvisService.StartService '#.MyService.MainFunctio&0'
⍝
⍝    :field public Shared ServiceState
⍝    :field public Shared ServiceControl
:field public log←⍬
:field public ServiceName←''
∇ r←DefaultServiceName servicename
:If 0∊⍴servicename
r←2⊃⎕NPARTS ⎕WSID
:Else
r←servicename
:EndIf
∇
∇ CreateSyslog servicename
:Access shared public
∇
∇ make
:Access public
:Implements constructor :base
Init
∇
∇ make1 arg
:Access public
:Implements constructor :base  arg
Init
∇
∇ Init
:Access public
ServiceName←DefaultServiceName ServiceName
∇
∇ {r}←{level}Log msg
:Access public override
:If 0=⎕NC'level'
level←'I'
:EndIf
:If log≡⍬
log←⎕NEW #.SysLog ServiceName
:EndIf
:If Logging>0∊⍴msg
level log.Write msg      ⍝ Add severity ??
:EndIf
r←'(',('EWI'[1+3|¯1+(1 2 3 'EWIewi')⍳⊃level]),') ',msg
∇
∇ HashDefine
:Access public shared
⍝ Service states are as follows:
SERVICE_STOPPED←1
SERVICE_START_PENDING←2
SERVICE_STOP_PENDING←3
SERVICE_RUNNING←4
SERVICE_CONTINUE_PENDING←5
SERVICE_PAUSE_PENDING←6
SERVICE_PAUSED←7
⍝ Service Control Codes (actions) are as follows:
SERVICE_CONTROL_STOP←1
SERVICE_CONTROL_PAUSE←2
SERVICE_CONTROL_CONTINUE←3
SERVICE_CONTROL_INTERROGATE←4
SERVICE_CONTROL_SHUTDOWN←5
SERVICE_CONTROL_PARAMCHANGE←6
SERVICE_CONTROL_NETBINDADD←7
SERVICE_CONTROL_NETBINDREMOVE←8
SERVICE_CONTROL_NETBINDENABLE←9
SERVICE_CONTROL_NETBINDDISABLE←10
SERVICE_CONTROL_DEVICEEVENT←11
SERVICE_CONTROL_HARDWAREPROFILECHANGE←12
SERVICE_CONTROL_POWEREVENT←13
SERVICE_CONTROL_SESSIONCHANGE←14
SERVICE_CONTROL_PRESHUTDOWN←15
∇
∇ r←ServiceHandler(obj event action state);sink
:Access public shared
⍝ Callback to handle notifications from the SCM
⍝ Note that the interpreter has already responded
⍝ automatically to the SCM with the corresponding
⍝ "_PENDING" message prior to this callback being reached
⍝ This callback uses the SetServiceState Method to confirm
⍝ to the SCM that the requested state has been reached
r←0  ⍝  so returns a 0 result (the event has been handled,
⍝ no further action required)
⍝ It stores the desired state in global ServiceState to
⍝ notify the application code which must take appropriate
⍝ action. In particular, it must respond to a "STOP or
⍝ "SHUTDOWN" by terminating the APL session
:Select #.ServiceControl←action
:CaseList SERVICE_CONTROL_STOP SERVICE_CONTROL_SHUTDOWN
state[4 5 6 7]←0
⎕←'ServiceHandler Stop :',⍕#.ServiceControl
:Case SERVICE_CONTROL_PAUSE
⎕←'ServiceHandler Pause :',⍕#.ServiceControl
:Case SERVICE_CONTROL_CONTINUE
⎕←'ServiceHandler Continue :',⍕#.ServiceControl
:Case SERVICE_CONTROL_INTERROGATE
⍝ do nothing sometimes it interrogates every 10 secs
:Else
⎕←'ServiceHandler:',⍕#.ServiceControl
:If state[2]=SERVICE_START_PENDING
:EndIf
:EndSelect
state[2]←#.ServiceState
sink←2 ⎕NQ'.' 'SetServiceState'state
∇
∇ ServiceMain arg
:Access public
'I'Log'ServiceMain Starting'
'I'Log'ServiceMain: ',,⍕Start ⍝ Start Jarvis serice
:While #.ServiceState≠SERVICE_STOPPED
:If ~#.ServiceControl∊0 SERVICE_CONTROL_INTERROGATE ⋄ 'I'Log'ServiceControl=',⍕#.ServiceControl ⋄ :EndIf
:Select #.ServiceControl
:Case SERVICE_CONTROL_STOP
'I'Log'ServiceMain: ',,⍕Stop
:Case SERVICE_CONTROL_PAUSE
'I'Log'ServiceMain: ',,⍕Pause
:Case SERVICE_CONTROL_CONTINUE
'I'Log'ServiceMain: ',,⍕Start
:Case SERVICE_CONTROL_INTERROGATE
:Case SERVICE_CONTROL_SHUTDOWN
'I'Log'ServiceMain: ',,⍕Stop
:Case SERVICE_CONTROL_PARAMCHANGE
:Case SERVICE_CONTROL_NETBINDADD
:Case SERVICE_CONTROL_NETBINDREMOVE
:Case SERVICE_CONTROL_NETBINDENABLE
:Case SERVICE_CONTROL_NETBINDDISABLE
:Case SERVICE_CONTROL_DEVICEEVENT
:Case SERVICE_CONTROL_HARDWAREPROFILECHANGE
:Case SERVICE_CONTROL_POWEREVENT
:Case SERVICE_CONTROL_SESSIONCHANGE
:Case SERVICE_CONTROL_PRESHUTDOWN
'I'Log'ServiceMain: ',,⍕Stop
:Case 0
:EndSelect
:Select #.ServiceState
:Case SERVICE_STOPPED
:Case SERVICE_START_PENDING
:Case SERVICE_STOP_PENDING
:Case SERVICE_RUNNING
:Case SERVICE_CONTINUE_PENDING
:Case SERVICE_PAUSE_PENDING
:Case SERVICE_PAUSED
:EndSelect
⎕DL 10 ⍝ Just to prevent busy loop
:EndWhile
⎕OFF 0
∇
∇ r←ClassName
:Access public shared
r←⍕⊃⊃⎕CLASS ⎕THIS
∇
∇ Describe;wsid;cmdlineargs;apl;service;a;s
:Access public shared
⎕←'This is intended to run as a service'
wsid←⎕WSID
cmdlineargs←2 ⎕NQ'.' 'GetCommandLineArgs'
apl←⊃cmdlineargs
service←2⊃⎕NPARTS wsid
:For a :In cmdlineargs
:If 0<≢s←'APL_ServiceEvtInit='{⍺≡(≢⍺)↑⍵:(≢⍺)↓⍵ ⋄ ''}a
⎕←'Event src created'
⎕OFF 0
:EndIf
:EndFor
⎕←wsid
⎕←cmdlineargs
⎕←'To install/uninstall/initalize run as Administrator'
⎕←'CommandLines:'
⎕←apl,' ',wsid,' APL_ServiceInstall=',service,' ',2↓cmdlineargs
⎕←apl,' ',wsid,' APL_ServiceUninstall=',service,' ',2↓cmdlineargs
⎕←apl,' ',wsid,' APL_ServiceEvtInit=',service
∇
∇ StartService MyServiceFunction
⍝ This is the ⎕lx entry point to run Jarvis as a service
:Access public shared
⍝ ∘∘∘ ⍝ Remove comment to make service start wait for Ride Connection
:If 'W'≠3⊃#.⎕WG'APLVersion'
⎕←'This workspace only works using Dyalog APL for Windows version 14.0 or later'
:Return
:EndIf
:If 0∊⍴2 ⎕NQ'.' 'GetEnvironment' 'RunAsService'
Describe
:Return
:EndIf
⍝ Define SCM constants
HashDefine
⍝ Set up callback to handle SCM notifications
'.'⎕WS'Event' 'ServiceNotification'(ClassName,'.ServiceHandler')
⍝ Global variable defines current state of the service
⍝ Global variable defines last SCM notification to the service
⍝ Application code runs in a separate thread
⎕DL 1
⍎MyServiceFunction
⎕DQ'.'
⎕OFF
∇
:EndClass
﻿:Class SysLog
⍝ Implements simple interface to write events to system log files
⍝ Windows capability is implemented
⍝ *NIX will be added in the future
⎕IO←⎕ML←1
:field Source←''    ⍝ Source is the name of the application
:field Log←''       ⍝ Log is the name of the log (under Windows, it defaults to "Application")
:field Machine←,'.' ⍝ means this local machine, could be another machine on the network
:field eventlog
isWin←'W'=1↑3⊃'.'⎕WG 'APLVersion'
∇ r←isAdmin
⍝ check is user if running as an administrator
:Access public shared
r←{0::0 ⋄ isWin:⍎⎕NA'I shell32|IsUserAnAdmin' ⋄ 0}''
∇
∇ SetUsing
⎕USING←'System' 'System.Diagnostics,system.dll'
∇
∇ Make source
:Implements constructor
:Access public
'This utility runs only under Windows at this time'⎕SIGNAL 11/⍨~isWin
('Event source "',source,'" does not exist')⎕SIGNAL 6/⍨~EventSourceExists source
Source←source
eventlog←⎕NEW EventLog
eventlog.Source←⊂,source
∇
∇ {level}Write message;type
:Access public
⍝ message is message to write
⍝ level is one of: 1 'E' 'e' for error message
⍝                  2 'W' 'w' for warning message
⍝                  3 'I' 'i' for informational message (the default)
level←{6::⍵ ⋄ level}3
:If isWin
type←(EventLogEntryType.(Error Warning Information))[1+3|¯1+(1 2 3, 'EWIewi')⍳⊃level]
eventlog.WriteEntry(message type)
:Else
∘∘∘
:EndIf
∇
∇ {level}WriteLog(source message);type
:Access public shared
⍝ message is message to write
⍝ level is one of: 1 'E' 'e' for error message
⍝                  2 'W' 'w' for warning message
⍝                  3 'I' 'i' for informational message (the default)
level←{6::⍵ ⋄ level}3
:If isWin
SetUsing
type←(EventLogEntryType.(Error Warning Information))[1+3|¯1+(1 2 3, 'EWIewi')⍳⊃level]
EventLog.WriteEntry(source message type)
:Else
∘∘∘
:EndIf
∇
∇ r←EventSourceExists source
:Access public shared
:If isWin
:Trap 90
SetUsing
r←EventLog.SourceExists⊂,source
:Else
r←0
:EndTrap
:Else
∘∘∘
:EndIf
∇
∇ CreateEventSource args;log;source
:Access public shared
:If isWin
'You must be running as an administrator to use this'⎕SIGNAL 11/⍨~isAdmin
:If 1<|≡args
source log←args
:Else
source←,args ⋄ log←''
:EndIf
('Event source "',source,'" already exists')⎕SIGNAL 11/⍨EventSourceExists source
EventLog.CreateEventSource(source log)
:Else
∘∘∘
:EndIf
∇
∇ DeleteLog log
:Access public shared
:If isWin
'You must be running as an administrator to use this'⎕SIGNAL 11/⍨~isAdmin
SetUsing
EventLog.Delete⊂,log
:Else
∘∘∘
:EndIf
∇
∇ DeleteEventSource source
:Access public shared
:If isWin
'You must be running as an administrator to use this'⎕SIGNAL 11/⍨~isAdmin
('Event source "',source,'" does not exist')⎕SIGNAL 6/⍨~EventSourceExists source
EventLog.DeleteEventSource⊂source
:Else
∘∘∘
:EndIf
∇
∇ r←LogExists log
:Access public shared
:If isWin
:Trap 0
SetUsing
EventLog.Exists⊂,log
:Else
r←0
:EndTrap
:Else
∘∘∘
:EndIf
∇
∇ r←LogNameFromSourceName source
:Access public shared
:If isWin
('Event source "',source,'" does not exist')⎕SIGNAL 6/⍨~EventSourceExists source
r←EventLog.LogNameFromSourceName(source(,'.'))
:Else
∘∘∘
:EndIf
∇
:EndClass
{ref}←AutoStart;empty;validParams;mask;values;params;param;value;rc;msg;getEnv;NoSession;ts;t;commits;n;debug;tonum;NoExit
⍝ Jarvis automatic startup
⍝ General logic:
⍝   Command line parameters take priority over configuration file which takes priority over default
empty←0∊⍴
tonum←{0∊⍴⍵:⍵ ⋄ ∧/⊃t←⎕VFI ⍵:⊃(⎕IO+1)⊃t ⋄ ⍵}
getEnv←{tonum 2 ⎕NQ'.' 'GetEnvironment'⍵}
⍝↓↓↓ JarvisConfig MUST be first in validParams
validParams←∪(⊂'JarvisConfig'),((⎕NEW #.Jarvis).Config)[;1]
mask←~empty¨values←getEnv¨validParams
params←mask⌿validParams,⍪values
NoSession←~empty getEnv'NoSession'
ref←'No server running'
NoExit←NoSession∨'R'=3⊃#.⎕WG'APLVersion' ⍝ no session or runtime → don't exit
:If ~empty params
ref←⎕NEW #.Jarvis
:For (param value) :In ↓params  ⍝ need to load one at a time because params can override what's in the configuration file
param(ref{⍺⍺⍎⍺,'←⍵'})value
:If 'JarvisConfig'≡param
:If 0≠⊃(rc msg)←ref.LoadConfiguration value
→∆END⊣⎕←ref←'Error loading configuration file "',value,'": ',msg
:EndIf
:EndIf
:EndFor
:If 0≠⊃(rc msg)←ref.Start
→∆END⊣⎕←ref←∊⍕'Unable to start server - ',msg
:EndIf
:If NoExit
:Trap 0
:While ref.Running
{}⎕DL 10
:EndWhile
:EndTrap
:EndIf
:EndIf
∆END:
:If NoExit
⎕OFF
:EndIf
﻿:Class Jarvis
⍝ Dyalog Web Service Server
⍝ See https://dyalog.github.io/Jarvis for documentation
(⎕ML ⎕IO)←1 1
∇ r←Version
:Access public shared
r←'Jarvis' '1.18.4' '2024-09-11'
∇
∇ Documentation
:Access public shared
⎕←'See https://dyalog.github.io/Jarvis'
∇
⍝ User hooks settings
:Field Public AppCloseFn←''                                ⍝ name of the function to run on application (server) shutdown
:Field Public AppInitFn←''                                 ⍝ name of the application "bootstrap" function
:Field Public AuthenticateFn←''                            ⍝ name of function to perform authentication,if empty, no authentication is necessary
:Field Public SessionInitFn←''                             ⍝ Function name to call when initializing a session
:Field Public ValidateRequestFn←''                         ⍝ name of the request validation function
⍝ Operational settings
:Field Public CodeLocation←'#'                             ⍝ reference to application code location, if the user specifies a folder or file, that value is saved in CodeSource
:Field Public ConnectionTimeout←30                         ⍝ HTTP/1.1 connection timeout in seconds
:Field Public Debug←0                                      ⍝ 0 = all errors are trapped, 1 = stop on an error, 2 = stop on intentional error before processing request, 4 = Jarvis framework debugging, 8 = Conga event logging
:Field Public DefaultContentType←'application/json; charset=utf-8'
:Field Public ErrorInfoLevel←1                             ⍝ level of information to provide if an APL error occurs, 0=none, 1=⎕EM, 2=⎕SI
:Field Public Hostname←''                                  ⍝ external-facing host name
:Field Public HTTPAuthentication←'basic'                   ⍝ valid settings are currently 'basic' or ''
:Field Public JarvisConfig←''                              ⍝ configuration file path (if any). This parameter was formerly named ConfigFile
:Field Public LoadableFiles←'*.apl?,*.dyalog'              ⍝ file patterns that can be loaded if loading from folder
:Field Public Logging←1                                    ⍝ turn logging on/off
:Field Public Paradigm←'JSON'                              ⍝ either 'JSON' or 'REST'
:Field Public Report404InHTML←1                            ⍝ Report HTTP 404 status (not found) in HTML (only valid if HTML interface is enabled)
:Field Public UseZip←0                                     ⍝ Use compression if client allows it, 0- don't compress, 0<- compress if UseZip≤≢payload
:Field Public ZipLevel←3                                   ⍝ default compression level (0-9)
:Field APLVersion                                          ⍝ Dyalog APL major.minor version number
:Field TokenBase←0                                         ⍝ base for tokens (possibly updated in Start if ⎕TALLOC is available)
⍝ Container-related settings
:Field Public DYALOG_JARVIS_THREAD←''                      ⍝ 0 = Run in thread 0, 1 = Use separate thread and ⎕TSYNC, 'DEBUG' = Use separate thread and return to immediate execution, "AUTO" = if InTerm use "DEBUG" otherwise 1
:Field Public DYALOG_JARVIS_CODELOCATION←''                ⍝ If supplied, overrides CodeLocation in config file
:Field Public DYALOG_JARVIS_PORT←''                        ⍝ If supplied, overrides Port both default port and config file
⍝ Session settings
:Field Public SessionIdHeader←'Jarvis-SessionID'           ⍝ Name of the header field for the session token
:Field Public SessionUseCookie←0                           ⍝ 0 - just use the header; 1 - use an HTTP cookie
:Field Public SessionPollingTime←1                         ⍝ how frequently (in minutes) we should poll for timed out sessions
:Field Public SessionTimeout←0                             ⍝ 0 = do not use sessions, ¯1 = no timeout , 0< session timeout time (in minutes)
:Field Public SessionCleanupTime←60                        ⍝ how frequently (in minutes) do we clean up timed out session info from _sessionsInfo
⍝ JSON mode settings
:Field Public AllowFormData←0                              ⍝ do we allow POST form data in JSON paradigm?
:Field Public AllowGETs←0                                  ⍝ do we allow calling endpoints with HTTP GETs?
:Field Public HTMLInterface←¯1                             ⍝ ¯1=unassigned, 0/1=dis/allow the HTML interface, 'Path to HTML[/home-page]', or '' 'fn'
:Field Public JSONInputFormat←'D'                          ⍝ set this to 'M' to have Jarvis convert JSON request payloads to the ⎕JSON matrix format
⍝ REST mode settings
:Field Public ParsePayload←1                               ⍝ 1=parse request payload based on content-type header (REST only)
:Field Public RESTMethods←'Get,Post,Put,Delete,Patch,Options'
⍝ CORS settings
:Field Public EnableCORS←1                                 ⍝ set to 0 to disable CORS
:Field Public CORS_Origin←'*'                              ⍝ default value for Access-Control-Allow-Origin header (set to 1 to reflect request Origin)
:Field Public CORS_Methods←¯1                              ⍝ ¯1 = set based on paradigm, 1 = reflect the request's requested method
:Field Public CORS_Headers←'*'                             ⍝ default value for Access-Control-Allow-Headers header (set to 1 to reflect request Headers)
:Field Public CORS_MaxAge←60                               ⍝ default value (in seconds) for Access-Control-Max-Age header
⍝ Conga-related settings
:Field Public AcceptFrom←⍬                                 ⍝ Conga: IP addresses to accept requests from - empty means accept from any IP address
:Field Public BufferSize←10000                             ⍝ Conga: buffer size
:Field Public DenyFrom←⍬                                   ⍝ Conga: IP addresses to refuse requests from - empty means deny none
:Field Public DOSLimit←¯1                                  ⍝ Conga: DOSLimit, ¯1 means use default
:Field Public FIFO←1                                       ⍝ Conga: Use FIFO mode?
:Field Public Port←8080                                    ⍝ Conga: Default port to listen on
:Field Public RootCertDir←''                               ⍝ Conga: Root CA certificate folder
:field Public Priority←'NORMAL:!CTYPE-OPENPGP'             ⍝ Conga: Priorities for GnuTLS when negotiation connection
:Field Public Secure←0                                     ⍝ 0 = use HTTP, 1 = use HTTPS
:field Public ServerCertSKI←''                             ⍝ Conga: Server cert's Subject Key Identifier from store
:Field Public ServerCertFile←''                            ⍝ Conga: public certificate file
:Field Public ServerKeyFile←''                             ⍝ Conga: private key file
:Field Public ServerName←''                                ⍝ Server name, '' means Conga assigns it
:Field Public SSLValidation←64                             ⍝ Conga: request, but do not require a client certificate
:Field Public WaitTimeout←15000                            ⍝ ms to wait in LDRC.Wait
:Field Public Shared LDRC←''                               ⍝ Jarvis-set reference to Conga after CongaRef has been resolved
:Field Public Shared CongaPath←''                          ⍝ user-supplied path to Conga workspace and/or shared libraries
:Field Public Shared CongaRef←''                           ⍝ user-supplied reference to Conga library instance
:Field CongaVersion←''                                     ⍝ Conga version
:Property CodeSource
:Access Public
∇ r←get
r←_codeSource
∇
:EndProperty
⍝ IncludeFns/ExcludeFns Properties
:Property IncludeFns, ExcludeFns
⍝ IncludeFns and ExcludeFns are vectors the defined endpoint (function) names to expose or hide respectively
⍝ They can be function names, simple wildcarded patterns (e.g. 'Foo*'), or regex
:Access Public
∇ r←get ipa
r←⍎'_',ipa.Name
∇
∇ set ipa
:Select ipa.Name
:Case 'IncludeFns'
_includeRegex←makeRegEx¨(⊂'')~⍨∪,⊆_IncludeFns←ipa.NewValue
:Case 'ExcludeFns'
_excludeRegex←makeRegEx¨(⊂'')~⍨∪,⊆_ExcludeFns←ipa.NewValue
:EndSelect
∇
:EndProperty
⍝↓↓↓ some of these private fields are also set in ∇init so that a server can be stopped, updated, and restarted
:Field _rootFolder←''                ⍝ root folder for relative file paths
:Field _codeSource←''                ⍝ file or folder that code was loaded from, if applicable
:Field _configLoaded←0               ⍝ indicates whether config was already loaded by Autostart
:Field _htmlFolder←''                ⍝ folder containing HTML interface files, if any
:Field _htmlDefaultPage←'index.html' ⍝ default page name if HTMLInterface is set to serve from a folder
:Field _htmlEnabled←0                ⍝ is the HTML interface enabled?
:Field _htmlRootFn←''                ⍝ function name if serving HTML root from a function rather than file
:Field _stop←0                       ⍝ set to 1 to stop server
:Field _started←0                    ⍝ is the server started
:Field _stopped←1                    ⍝ is the server stopped
:field _paused←0                     ⍝ is the server paused
:Field _sessionThread←¯1             ⍝ thread for the session cleanup process
:Field _serverThread←¯1              ⍝ thread for the HTTP server
:Field _taskThreads←⍬                ⍝ vector of thread handling requests
:Field _sessions←⍬                   ⍝ vector of session namespaces
:Field _sessionsInfo←0 5⍴'' '' 0 0 0 ⍝ [;1] id [;2] ip addr [;3] creation time [;4] last active time [;5] ref to session
:Field _IncludeFns←''                ⍝ private IncludeFns
:Field _ExcludeFns←''                ⍝ private ExcludeFns
:Field _includeRegex←''              ⍝ private compiled regex from _IncludeFns
:Field _excludeRegex←''              ⍝ private compiled regex from _ExcludeFns
:Field _connections                  ⍝ namespace containing open connections
∇ r←Config
⍝ returns current configuration
:Access public
r←↑{⍵(⍎⍵)}¨⎕THIS⍎'⎕NL ¯2.2 ¯2.1 ¯2.3'
∇
∇ r←{value}DebugLevel level
⍝  monadic: return 1 if level is within Debug (powers of 2)
⍝    example: stopIf DebugLevel 2  ⍝ sets a stop if Debug contains 2
⍝  dyadic:  return value unless level is within Debug (powers of 2)
⍝    example: :Trap 0 DebugLevel 5 ⍝ set Trap 0 unless Debug contains 1 or 4 in its
r←∨/(2 2 2 2⊤⊃Debug)∨.∧2 2 2 2⊤level
:If 0≠⎕NC'value'
r←value/⍨~r
:EndIf
∇
∇ r←Thread
⍝ return the thread that the server is running in
:Access public
r←_serverThread
∇
∇ {msg}←{level}Log msg;ts;fmsg
:Access public overridable
:If Logging>0∊⍴msg
ts←((ErrorInfoLevel=2)/(2⊃⎕SI),'[',(⍕2⊃⎕LC),'] '),fmtTS ⎕TS
:If 1=≢⍴fmsg←⍕msg
:OrIf 1=⊃⍴fmsg
fmsg←ts,' - ',fmsg
:Else
fmsg←ts,∊(⎕UCS 13),fmsg
:EndIf
⎕←fmsg
:EndIf
∇
∇ r←New arg
⍝ create a new instance of Jarvis
:Access public shared
:If 0∊⍴arg
r←##.⎕NEW ⎕THIS
:Else
r←##.⎕NEW ⎕THIS arg
:EndIf
∇
∇ make
:Access public
:Implements constructor
MakeCommon
∇
∇ make1 args;rc;msg;char;t
:Access public
:Implements constructor
⍝ args is one of
⍝ - a simple character vector which is the name of a configuration file
⍝ - a reference to a namespace containing named configuration settings
⍝ - a depth 1 or 2 vector of
⍝   [1] integer port to listen on
⍝   [2] charvec function folder or ref to code location
⍝   [3] paradigm to use ('JSON' or 'REST')
MakeCommon
:If char←isChar args ⍝ character argument?  it's either config filename or CodeLocation folder
:If ~⎕NEXISTS args
→0⊣Log'Unable to find "',args,'"'
:ElseIf 2=t←1 ⎕NINFO args ⍝ normal file
:If (lc⊢/⎕NPARTS args)∊'.json' '.json5' ⍝ json files are configuration
:If 0≠⊃(rc msg)←LoadConfiguration JarvisConfig←args
Log'Error loading configuration: ',msg
:EndIf
:Else
CodeLocation←args ⍝ might be a namespace script or class
:EndIf
:ElseIf 1=t ⍝ folder means it's CodeLocation
CodeLocation←args
:Else ⍝ not a file or folder
Log'Invalid constructor argument "',args,'"'
:EndIf
:ElseIf 9.1={⎕NC⊂,'⍵'}args ⍝ namespace?
:If 0≠⊃(rc msg)←LoadConfiguration args
Log'Error loading configuration: ',msg
:EndIf
:Else
:If 326=⎕DR args
:AndIf 0∧.=≡¨2↑args   ⍝ if 2↑args is (port ref) (both scalar)
args[1]←⊂,args[1] ⍝ nest port so ∇default works properly
:EndIf
(Port CodeLocation Paradigm JarvisConfig)←args default Port CodeLocation Paradigm JarvisConfig
:EndIf
∇
∇ MakeCommon
APLVersion←⊃⊃(//)⎕VFI{⍵/⍨2>+\'.'=⍵}2⊃#.⎕WG'APLVersion'
:Trap 11
JSONin←0 ##.##.⎕JSON⍠('Dialect' 'JSON5')('Format'JSONInputFormat)⊢ ⋄ {}JSONin'1'
JSONout←1 ##.##.⎕JSON⍠'HighRank' 'Split'⊢ ⋄ {}JSONout 1
JSONread←0 ##.##.⎕JSON⍠'Dialect' 'JSON5'⊢ ⍝ for reading configuration files
:Else
JSONin←0 ##.##.⎕JSON⍠('Format'JSONInputFormat)⊢
JSONout←1 ##.##.⎕JSON⊢
JSONread←0 ##.##.⎕JSON⊢
:EndTrap
∇
∇ r←args default defaults
args←,⊆args
r←(≢defaults)↑args,(≢args)↓defaults
∇
∇ Close
:Implements destructor
{0:: ⋄ {}LDRC.Close ServerName}⍬
∇
∇ r←Run args;msg;rc
⍝ args is one of
⍝ - a simple character vector which is the name of a configuration file
⍝ - a reference to a namespace containing named configuration settings
⍝ - a depth 1 or 2 vector of
⍝   [1] integer port to listen on
⍝   [2] charvec function folder or ref to code location
⍝   [3] paradigm to use ('JSON' or 'REST')
:Access shared public
:Trap 0
(rc msg)←(r←New args).Start
:Else
(r rc msg)←'' ¯1 ⎕DMX.EM
:EndTrap
r←(r(rc msg))
∇
∇ (rc msg)←Start;html;homePage;t
:Access public
:Trap 0 DebugLevel 1
Log'Starting ',⍕2↑Version
:If _started
:If 0(,2)≡LDRC.GetProp ServerName'Pause'
rc←1⊃LDRC.SetProp ServerName'Pause' 0
→0 If(rc'Failed to unpause server')
(rc msg)←0 'Server resuming operations'
→0
:EndIf
→0 If(rc msg)←¯1 'Server thinks it''s already started'
:EndIf
:If _stop
→0 If(rc msg)←¯1 'Server is in the process of stopping'
:EndIf
:If 'CLEAR WS'≡⎕WSID
:If ⎕NEXISTS JarvisConfig
:AndIf 2=⊃1 ⎕NINFO JarvisConfig
_rootFolder←⊃1 ⎕NPARTS JarvisConfig
:Else
_rootFolder←⊃1 ⎕NPARTS SourceFile
:EndIf
:Else
_rootFolder←⊃1 ⎕NPARTS ⎕WSID
:EndIf
→0 If(rc msg)←LoadConfiguration JarvisConfig
→0 If(rc msg)←CheckPort
→0 If(rc msg)←CheckCodeLocation
→0 If(rc msg)←Setup
→0 If(rc msg)←LoadConga
:If 19≤APLVersion ⍝ ⎕TALLOC appeared in v19.0
TokenBase←⎕TALLOC 1 'Jarvis'
:EndIf
homePage←1 ⍝ default is to use built-in home page
:Select ⊃HTMLInterface
:Case 0 ⍝ explicitly no HTML interface, carry on
_htmlEnabled←0
:Case 1 ⍝ explicitly turned on
:If Paradigm≢'JSON'
Log'HTML interface is only available using JSON paradigm'
:Else
_htmlEnabled←1
:EndIf
:Case ¯1 ⍝ turn on if JSON paradigm
_htmlEnabled←Paradigm≡'JSON' ⍝ if not specified, HTML interface is enabled for JSON paradigm
:Else
:If 1<|≡HTMLInterface ⍝ is it '' 'function'?
t←2⊃HTMLInterface
:If 1 1 0≡⊃CodeLocation.⎕AT t
_htmlRootFn←t
_htmlEnabled←1
:Else
→0 If(rc msg)←¯1('HTML root function "',(⍕CodeLocation),'.',t,'" is not a monadic, result-returning function.')
:EndIf
:Else ⍝  otherwise it's 'file/folder'
_htmlEnabled←1
html←1 ⎕NPARTS((isRelPath HTMLInterface)/_rootFolder),HTMLInterface
:If isDir∊html
_htmlFolder←{⍵,('/'=⊢/⍵)↓'/'}∊html
:Else
_htmlFolder←1⊃html
_htmlDefaultPage←∊1↓html
:EndIf
homePage←⎕NEXISTS html←_htmlFolder,_htmlDefaultPage
Log(~homePage)/'HTML home page file "',(∊html),'" not found.'
:EndIf
:EndSelect
:If EnableCORS ⍝ if we've enabled CORS
:AndIf ¯1∊CORS_Methods ⍝ but not set any pre-flighted methods
:If Paradigm≡'JSON'
CORS_Methods←'GET,POST,OPTIONS' ⍝ allowed JSON methods are GET, POST, and OPTIONS
:Else
CORS_Methods←1↓∊',',¨RESTMethods[;1] ⍝ allowed REST methods are what the service supports
:EndIf
:EndIf
CORS_Methods←uc CORS_Methods
→0 If(rc msg)←StartServer
Log'Jarvis starting in "',Paradigm,'" mode on port ',⍕Port
Log'Serving code in ',(⍕CodeLocation),(CodeSource≢'')/' (populated with code from "',CodeSource,'")'
Log(_htmlEnabled∧homePage)/'Click http',(~Secure)↓'s://',MyAddr,':',(⍕Port),' to access web interface'
:Else ⍝ :Trap
(rc msg)←¯1 ⎕DMX.EM
:EndTrap
∇
∇ (rc msg)←Stop;ts;tokens
:Access public
:If _stop
→0⊣(rc msg)←¯1 'Server is already stopping'
:EndIf
:If ~_started
→0⊣(rc msg)←¯1 'Server is not running'
:EndIf
ts←⎕AI[3]
_stop←1
Log'Stopping server...'
{0:: ⋄ {}LDRC.Close 2⊃LDRC.Clt'' ''Port'http'}''
:While ~_stopped
:If WaitTimeout<⎕AI[3]-ts
→0⊣(rc msg)←¯1 'Server seems stuck'
:EndIf
:EndWhile
:If 0≠TokenBase
:If ~0∊⍴tokens←TokenBase ⎕TALLOC 2 ⍝ any lingering tokens?
{}⎕TGET tokens ⍝ remove them
:EndIf
TokenBase ⎕TALLOC ¯1 ⍝ remove token pool
:Else
{}⎕TGET{⍵/⍨1=1 100000000⍸⍵}⎕TPOOL ⍝ remove tokens in the Conga connection number range
:EndIf
(rc msg)←0 'Server stopped'
∇
∇ (rc msg)←Pause
:Access public
→0 If~_started⊣(rc msg)←¯1 'Server is not running'
→0 If 2=⊃2⊃LDRC.GetProp ServerName'Pause'⊣(rc msg)←¯2 Error'Server is already paused'
→0 If 0≠rc←⊃LDRC.SetProp ServerName'Pause' 2⊣msg←'Error attempting to pause server'
Log'Pausing server...'
(rc msg)←0 'Server paused'
∇
∇ (rc msg)←Reset
:Access Public
⎕TKILL _serverThread,_sessionThread,_taskThreads
_sessions←⍬
_sessionsInfo←0 5⍴0
_stopped←~_stop←_started←0
(rc msg)←0 'Server reset (previously set options are still in effect)'
∇
∇ r←Running
:Access public
r←~_stopped
∇
∇ (rc msg)←CheckPort;p
⍝ check for valid port number
:If DYALOG_JARVIS_PORT≢''  ⍝ environment variable takes precedence
Port←DYALOG_JARVIS_PORT
:EndIf
(rc msg)←3('Invalid port: ',∊⍕Port)
→0 If 0=p←⊃⊃(//)⎕VFI⍕Port
→0 If{(⍵>32767)∨(⍵<1)∨⍵≠⌊⍵}p
(rc msg)←0 ''
∇
∇ (rc msg)←{force}LoadConfiguration value;config;public;set;file
:Access public
:If 0=⎕NC'force' ⋄ force←0 ⋄ :EndIf
(rc msg)←0 ''
→(_configLoaded>force)⍴0 ⍝ did we already load from AutoStart?
:Trap 0 DebugLevel 1
:If isChar value
:If '#.'≡2↑value ⍝ check if a namespace reference
:AndIf 9.1=⎕NC⊂value
config←⍎value
→Load
:EndIf
file←JarvisConfig
:If ~0∊⍴value
file←value
:EndIf
→0 If 0∊⍴file
:If ⎕NEXISTS file
config←JSONread⊃⎕NGET file
:Else
→0⊣(rc msg)←6('Configuation file "',file,'" not found')
:EndIf
:ElseIf 9.1={⎕NC⊂,'⍵'}value ⍝ namespace?
config←value
:EndIf
Load:
public←⎕THIS⍎'⎕NL ¯2.2 ¯2.1 ¯2.3' ⍝ find all the public fields in this class
:If ~0∊⍴set←public∩config.⎕NL ¯2 ¯9
config{⍎⍵,'←⍺⍎⍵'}¨set
:EndIf
_configLoaded←1
:Else
→0⊣(rc msg)←⎕DMX.EN ⎕DMX.('Error loading configuration: ',EM,(~0∊⍴Message)/' (',Message,')')
:EndTrap
∇
∇ (rc msg)←LoadConga;ref;root;nc;n;ns;congaCopied;class;path
⍝↓↓↓ Check if LDRC exists (VALUE ERROR (6) if not), and is LDRC initialized? (NONCE ERROR (16) if not)
(rc msg)←1 ''
:Hold 'JarvisInitConga'
:If {6 16 999::1 ⋄ ''≡LDRC:1 ⋄ 0⊣LDRC.Describe'.'}''
LDRC←''
:If ~0∊⍴CongaRef  ⍝ did the user supply a reference to Conga?
LDRC←ResolveCongaRef CongaRef
→∆END↓⍨0∊⍴msg←(''≡LDRC)/'CongaRef (',(⍕CongaRef),') does not point to a valid instance of Conga'
:Else
:For root :In ##.## #
ref nc←root{1↑¨⍵{(×⍵)∘/¨⍺ ⍵}⍺.⎕NC ⍵}ns←'Conga' 'DRC'
:If 9=⊃⌊nc ⋄ :Leave ⋄ :EndIf
:EndFor
:If 9=⊃⌊nc
LDRC←ResolveCongaRef root⍎∊ref
→∆END↓⍨0∊⍴msg←(''≡LDRC)/(⍕root),'.',(∊ref),' does not point to a valid instance of Conga'
→∆COPY↓⍨{999::0 ⋄ 1⊣LDRC.Describe'.'}'' ⍝ it's possible that Conga was saved in a semi-initialized state
Log'Conga library found at ',(⍕root),'.',∊ref
:Else
∆COPY:
class←⊃⊃⎕CLASS ⎕THIS
congaCopied←0
:For n :In ns
:For path :In (1+0∊⍴CongaPath)⊃(⊂CongaPath)((DyalogRoot,'ws/')'') ⍝ if CongaPath specified, use it exclusively
:Trap Debug↓0
n class.⎕CY path,'conga'
LDRC←ResolveCongaRef(class⍎n)
→∆END↓⍨0∊⍴msg←(''≡LDRC)/n,' was copied from ',path,'conga but is not valid'
Log n,' copied from ',path,'conga'
→∆COPIED⊣congaCopied←1
:EndTrap
:EndFor
:EndFor
→∆END↓⍨0∊⍴msg←(~congaCopied)/'Neither Conga nor DRC were successfully copied from [DYALOG]/ws/conga'
∆COPIED:
:EndIf
:EndIf
:EndIf
CongaVersion←1 0.1+.×2↑LDRC.Version
LDRC.X509Cert.LDRC←LDRC ⍝ reset X509Cert.LDRC reference
Log'Local Conga v',(⍕CongaVersion),' reference is ',⍕LDRC
rc←0
∆END:
:EndHold
∇
∇ LDRC←ResolveCongaRef CongaRef;z;failed
⍝ Attempt to resolve what CongaRef refers to
⍝ CongaRef can be a charvec, reference to the Conga or DRC namespaces, or reference to an iConga instance
⍝ LDRC is '' if Conga could not be initialized, otherwise it's a reference to the the Conga.LIB instance or the DRC namespace
LDRC←'' ⋄ failed←0
:Select nameClass CongaRef ⍝ what is it?
:Case 9.1 ⍝ namespace?  e.g. CongaRef←DRC or Conga
∆TRY:
:Trap 0 DebugLevel 1
:If ∨/'.Conga'⍷⍕CongaRef ⋄ LDRC←CongaPath CongaRef.Init'Jarvis' ⍝ is it Conga?
:ElseIf 0≡⊃CongaRef.Init CongaPath ⋄ LDRC←CongaRef ⍝ DRC?
:Else ⋄ →∆EXIT⊣LDRC←''
:End
:Else ⍝ if Jarvis is reloaded and re-executed in rapid succession, Conga initialization may fail, so we try twice
:If failed ⋄ →∆EXIT⊣LDRC←''
:Else ⋄ →∆TRY⊣failed←1
:EndIf
:EndTrap
:Case 9.2 ⍝ instance?  e.g. CongaRef←Conga.Init ''
LDRC←CongaRef ⍝ an instance is already initialized
:Case 2.1 ⍝ variable?  e.g. CongaRef←'#.Conga'
:Trap 0 DebugLevel 1
LDRC←ResolveCongaRef(⍎∊⍕CongaRef)
:EndTrap
:EndSelect
∆EXIT:
∇
∇ (rc msg secureParams)←CreateSecureParams;cert;certs;msg;inds
⍝ return Conga parameters for running HTTPS, if Secure is set to 1
LDRC.X509Cert.LDRC←LDRC ⍝ make sure the X509 instance points to the right LDRC
(rc secureParams msg)←0 ⍬''
:If Secure
:If ~0∊⍴RootCertDir ⍝ on Windows not specifying RootCertDir will use MS certificate store
→∆EXIT If(rc msg)←'RootCertDir'Exists RootCertDir
→∆EXIT If(rc msg)←{(⊃⍵)'Error setting RootCertDir'}LDRC.SetProp'.' 'RootCertDir'RootCertDir
⍝ The following is commented out because it seems the GnuTLS knows to use the operating system's certificate collection even on non-Windows platforms
⍝          :ElseIf ~isWin
⍝              →∆EXIT⊣(rc msg)←¯1 'No RootCertDir spcified'
:EndIf
:If 0∊⍴ServerCertSKI ⍝ no certificate ID specified, check for Cert and Key files
→∆EXIT If(rc msg)←'ServerCertFile'Exists ServerCertFile
→∆EXIT If(rc msg)←'ServerKeyFile'Exists ServerKeyFile
:Trap 0 DebugLevel 1
cert←⊃LDRC.X509Cert.ReadCertFromFile ServerCertFile
:Else
(rc msg)←⎕DMX.EN('Unable to decode ServerCertFile "',(∊⍕ServerCertFile),'" as a certificate')
→∆EXIT
:EndTrap
cert.KeyOrigin←'DER'ServerKeyFile
:ElseIf isWin ⍝ ServerCertSKI only on Windows
certs←LDRC.X509Cert.ReadCertUrls
:If 0∊⍴certs
→∆EXIT⊣(rc msg)←8 'No certificates found in Microsoft Certificate Store'
:Else
inds←1+('id=',ServerCertSKI,';')⎕S{⍵.BlockNum}⍠'Greedy' 0⊢2⊃¨certs.CertOrigin
:If 1≠≢inds
rc←9
msg←(0 2⍸≢inds)⊃('Certificate with id "',ServerCertSKI,'" was not found in the Microsoft Certificate Store')('There is more than one certificate with Subject Key Identifier "',ServerCertSKI,'" in the Microsoft Certificate Store')
→∆EXIT
:EndIf
cert←certs[⊃inds]
:EndIf
:Else ⍝ ServerCertSKI is defined, but we're not running Windows
→∆EXIT⊣(rc msg)←10 'ServerCertSKI is currently valid only under Windows'
:EndIf
secureParams←('X509'cert)('SSLValidation'SSLValidation)('Priority'Priority)
:EndIf
∆EXIT:
∇
∇ (rc msg)←CheckCodeLocation;root;m;res;tmp;fn;path
(rc msg)←0 ''
:If DYALOG_JARVIS_CODELOCATION≢'' ⍝ environment variable take precedence
CodeLocation←DYALOG_JARVIS_CODELOCATION
:EndIf
:If 0∊⍴CodeLocation
:If 0∊⍴JarvisConfig ⍝ if there's a configuration file, use its folder for CodeLocation
→0⊣(rc msg)←4 'CodeLocation is empty!'
:Else
CodeLocation←⊃1 ⎕NPARTS JarvisConfig
:EndIf
:EndIf
:Select ⊃{⎕NC'⍵'}CodeLocation ⍝ need dfn because CodeLocation is a field and will always be nameclass 2
:Case 9 ⍝ reference, just use it
:Case 2 ⍝ variable, could be file path or ⍕ of reference from JarvisConfig
:If 326=⎕DR tmp←{0::⍵ ⋄ '#'≠⊃⍵:⍵ ⋄ ⍎⍵}CodeLocation
:AndIf 9={⎕NC'⍵'}tmp ⋄ CodeLocation←tmp
:Else
root←(isRelPath CodeLocation)/_rootFolder
path←∊1 ⎕NPARTS root,CodeLocation
:Trap 0 DebugLevel 1
:If 1=t←1 ⎕NINFO path ⍝ folder?
CodeLocation←⍎'CodeLocation'#.⎕NS''
_codeSource←path
→0 If(rc msg)←CodeLocation LoadFromFolder path
:ElseIf 2=t ⍝ file?
CodeLocation←#.⎕FIX'file://',path
_codeSource←path
:Else
→0⊣(rc msg)←5('CodeLocation "',(∊⍕CodeLocation),'" is not a folder or script file.')
:EndIf
:Case 22 ⍝ file name error
→0⊣(rc msg)←6('CodeLocation "',(∊⍕CodeLocation),'" was not found.')
:Else    ⍝ anything else
→0⊣(rc msg)←7((⎕DMX.(EM,' (',Message,') ')),'occured when validating CodeLocation "',(∊⍕CodeLocation),'"')
:EndTrap
:EndIf
:Else
→0⊣(rc msg)←5 'CodeLocation is not valid, it should be either a namespace/class reference or a file path'
:EndSelect
:For fn :In AppInitFn AppCloseFn ValidateRequestFn AuthenticateFn SessionInitFn _htmlRootFn~⊂''
:If 3≠CodeLocation.⎕NC fn
msg,←(0∊⍴msg)↓',"CodeLocation.',fn,'" was not found '
:EndIf
:EndFor
→0 If rc←8×~0∊⍴msg
:If ~0∊⍴AppInitFn  ⍝ initialization function specified?
:Select ⊃CodeLocation.⎕AT AppInitFn
:Case 1 0 0 ⍝ result-returning niladic?
stopIf DebugLevel 2
res←CodeLocation⍎AppInitFn        ⍝ run it
:Case 1 1 0 ⍝ result-returning monadic?
stopIf DebugLevel 2
res←(CodeLocation⍎AppInitFn)⎕THIS ⍝ run it
:Else
→0⊣(rc msg)←8('"',(⍕CodeLocation),'.',AppInitFn,'" is not a niladic or monadic result-returning function')
:EndSelect
:If 0≠⊃res
→0⊣(rc msg)←2↑res,(≢res)↓¯1('"',(⍕CodeLocation),'.',AppInitFn,'" did not return a 0 return code')
:EndIf
:EndIf
:If ~0∊⍴AppCloseFn ⍝ application close function specified?
:If 1 0 0≢⊃CodeLocation.⎕AT AppCloseFn ⍝ result-returning niladic?
→0⊣(rc msg)←8('"',(⍕CodeLocation),'.',AppCloseFn,'" is not a niladic result-returning function')
:EndIf
:EndIf
Validate←{0} ⍝ dummy validation function
:If ~0∊⍴ValidateRequestFn  ⍝ Request validation function specified?
:If ∧/(⊃CodeLocation.⎕AT ValidateRequestFn)∊¨1(1 ¯2)0 ⍝ result-returning monadic or ambivalent?
Validate←CodeLocation⍎ValidateRequestFn
:Else
→0⊣(rc msg)←8('"',(⍕CodeLocation),'.',ValidateRequestFn,'" is not a monadic result-returning function')
:EndIf
:EndIf
Authenticate←{0} ⍝ dummy authentication function
:If ~0∊⍴AuthenticateFn  ⍝ authentication function specified?
:If ∧/(⊃CodeLocation.⎕AT AuthenticateFn)∊¨1(1 ¯2)0 ⍝ result-returning monadic or ambivalent?
Authenticate←CodeLocation⍎AuthenticateFn
:Else
→0⊣(rc msg)←8('"',(⍕CodeLocation),'.',AuthenticateFn,'" is not a monadic result-returning function')
:EndIf
:EndIf
∇
∇ (rc msg)←Setup
⍝ perform final setup before starting server
(rc msg)←0 ''
Paradigm←uc Paradigm
:Select Paradigm
:Case 'JSON'
RequestHandler←HandleJSONRequest
:Case 'REST'
RequestHandler←HandleRESTRequest
:If 2>≢⍴RESTMethods
RESTMethods←↑2⍴¨'/'(≠⊆⊢)¨','(≠⊆⊢),RESTMethods
:EndIf
:Else
(rc msg)←¯1 'Invalid paradigm'
:EndSelect
∇
Exists←{0:: ¯1 (⍺,' "',⍵,'" is not a valid folder name.') ⋄ ⎕NEXISTS ⍵:0 '' ⋄ ¯1 (⍺,' "',⍵,'" was not found.')}
∇ (rc msg)←StartServer;r;cert;secureParams;accept;deny;mask;certs;options
msg←'Unable to start server'
accept←'Accept'ipRanges AcceptFrom
deny←'Deny'ipRanges DenyFrom
→∆EXIT If⊃(rc msg secureParams)←CreateSecureParams
{}LDRC.SetProp'.' 'EventMode' 1 ⍝ report Close/Timeout as events
options←''
:If 3.3≤CongaVersion ⍝ can we set DecodeBuffers at server creation?
options←⊂'Options'(5+32×FIFO) ⍝ WSAutoAccept (1) + DecodeBuffers (4) + EnableFifo (32)
:EndIf
:If 3.4≤CongaVersion ⍝ DOSLimit support started with v3.4
:AndIf DOSLimit≠¯1  ⍝ not using Conga's default value
:If 0≠⊃LDRC.SetProp'.' 'DOSLimit'DOSLimit
→∆EXIT⊣(rc msg)←¯1 'Invalid DOSLimit setting: ',∊⍕DOSLimit
:EndIf
:EndIf
_connections←⎕NS''
_connections.index←2 0⍴'' 0  ⍝ row-oriented for faster lookup
_connections.lastCheck←0
:If 0=rc←1⊃r←LDRC.Srv ServerName''Port'http'BufferSize,secureParams,accept,deny,options
ServerName←2⊃r
:If 3.3>CongaVersion
{}LDRC.SetProp ServerName'FIFOMode'FIFO ⍝ deprecated in Conga v3.2
{}LDRC.SetProp ServerName'DecodeBuffers' 15 ⍝ 15 ⍝ decode all buffers
{}LDRC.SetProp ServerName'WSFeatures' 1 ⍝ auto accept WS requests
:EndIf
:If 0∊⍴Hostname ⍝ if Host hasn't been set, set it to the default
Hostname←'http',(~Secure)↓'s://',(2 ⎕NQ'.' 'TCPGetHostID'),((~Port∊80 443)/':',⍕Port),'/'
:EndIf
InitSessions
(rc msg)←RunServer
:Else
Log msg←'Error ',(⍕rc),' creating server',(rc∊98 10048)/': port ',(⍕Port),' is already in use' ⍝ 98=Linux, 10048=Windows
:EndIf
∆EXIT:
∇
∇ (rc msg)←RunServer;thread
thread←lc,⍕DYALOG_JARVIS_THREAD
:If (⊂thread)∊'' 'auto'
:If InTerm ⍝ do we have an interactive terminal?
thread←'debug'
:Else
thread←,'1'
:EndIf
:EndIf
:Select thread
:Case ,'0' ⍝ Run in thread 0
_serverThread←0
(rc msg)←Server''
QuadOFF
:Case ,'1' ⍝ Run in non-0 thread, use ⎕TSYNC
(rc msg)←⎕TSYNC _serverThread←Server&⍬
QuadOFF
:Case 'debug'
_serverThread←Server&⍬
(rc msg)←0 'Server started'
:Else
(rc msg)←¯1 'Invalid setting for DYALOG_JARVIS_THREAD'
:EndSelect
∇
∇ {r}←Server arg;wres;rc;obj;evt;data;ref;ip;msg;tmp;conx;conn
(_started _stopped)←1 0
:While ~_stop
:Trap 0 DebugLevel 1
wres←LDRC.Wait ServerName WaitTimeout ⍝ Wait for WaitTimeout before timing out
⍝ wres: (return code) (object name) (command) (data)
(rc obj evt data)←4↑wres
:If DebugLevel 8
:AndIf evt≢'Timeout'
Log'Server: ',∊⍕rc obj evt
:EndIf
conx←obj(⍳↓⊣)'.'
conn←TokenForConnection⍣(~0∊⍴conx)⊢conx ⍝ connection (token) number - need to add 1 because connections start at 0
:Select rc
:Case 0
:Select evt
:Case 'Error'
_stop←ServerName≡obj ⍝ if we got an error on the server itself, signal to stop
:If 0≠4⊃wres
Log'Server: DRC.Wait reported error ',(⍕4⊃wres),' on ',(2⊃wres),GetIP obj
:EndIf
RemoveConnection conx ⍝ Conga closes object on an Error event
:Case 'Connect'
obj AddConnection conx
:CaseList 'HTTPHeader' 'HTTPTrailer' 'HTTPChunk' 'HTTPBody'
:If (DebugLevel 8)∧evt≡'HTTPHeader'
Log'Server: HTTPHeader Method/URL: ',∊⍕2↑4⊃wres
:EndIf
:If 0≠_connections.⎕NC conx
ref←_connections⍎conx
wres ⎕TPUT conn
_taskThreads←⎕TNUMS∩_taskThreads,ref{⍺ HandleRequest ⍵}&(obj conn)
ref.Time←⎕AI[3]
:Else
Log'Server: Object ''_connections.',conx,''' was not found.'
{0:: ⋄ {}LDRC.Close ⍵}obj
:EndIf
:Case 'Closed'
RemoveConnection conx
:Case 'Timeout'
:Else ⍝ unhandled event
Log'Server: Unhandled Conga event:'
Log⍕wres
:EndSelect ⍝ evt
:Case 1010 ⍝ Object Not found
:If ~_stop
Log'Server: Object ''',ServerName,''' has been closed - Jarvis shutting down'
_stop←1
:EndIf
:Else
Log'Server: Conga wait failed:'
Log wres
:EndSelect ⍝ rc
CleanupConnections
:Else ⍝ :Trap
Log'*** Server error ',msg←1 ⎕JSON⍠'Compact' 0⊢⎕DMX
r←¯1 msg
→Exit
:EndTrap
:EndWhile
r←0 'Server stopped'
Exit:
:If ~0∊⍴AppCloseFn
r←CodeLocation⍎AppCloseFn
:EndIf
Close
⎕TKILL _sessionThread
(_stop _started _stopped)←0 0 1
∇
∇ r←TokenForConnection conx
⍝ return token for connection name (CONnnnnnnnn)
r←1+⊃⊃(//)⎕VFI conx∩⎕D
:If 0≠TokenBase ⍝ if ⎕TALLOC is available...
r←⍎,('<',(⍕TokenBase),'.>,ZI8')⎕FMT r
:EndIf
∇
∇ obj AddConnection conx;IP;res
:Hold '_connections'
conx _connections.⎕NS''
_connections.index,←conx(⎕AI[3])
IP←''
:Trap 0 DebugLevel 1
:If 0=⊃res←LDRC.GetProp obj'PeerAddr'
IP←2⊃2⊃res
:EndIf
:EndTrap
(_connections⍎conx).IP←IP
:EndHold
∇
∇ RemoveConnection conx;ref
:Hold '_connections'
:If 0=_connections.⎕NC conx
Log'Attempt to remove non-existent connection ',⍕conx
:Else
ref←_connections⍎conx
:If 9=|⌊ref.⎕NC⊂'Req'
:AndIf ref.Req.KillOnDisconnect
⎕TKILL ref.Req.Thread
:EndIf
:EndIf
_connections.⎕EX conx
_connections.index/⍨←_connections.index[1;]≢¨⊂conx
:EndHold
CleanupTokens conx
∇
∇ CleanupConnections;conxNames;timedOut;dead;kids;connecting;connected;killed
:If _connections.lastCheck<⎕AI[3]-ConnectionTimeout×1000
killed←⍬
:Hold '_connections'
connecting←connected←⍬
:If ~0∊⍴kids←2 2⊃LDRC.Tree ServerName ⍝ retrieve children of server
⍝ LDRC.Tree
⍝ connecting → status 3 1 - incoming connection
⍝ connected  → status 3 4 - connected connection
(connecting connected)←2↑{((2 2⍴3 1 3 4)⍪⍵[;2 3]){⊂1↓⍵}⌸'' '',⍵[;1]}↑⊃¨kids
:EndIf
conxNames←_connections.index[1;]~connecting
timedOut←_connections.index[1;]/⍨ConnectionTimeout<0.001×⎕AI[3]-_connections.index[2;]
:If ∨/{~0∊⍴⍵}¨connected conxNames
:If ~0∊⍴timedOut
timedOut/⍨←{6::1 ⋄ 0=(_connections⍎⍵).⎕NC⊂'Req'}¨timedOut
:EndIf
:If ~0∊⍴dead←(connected~conxNames),timedOut ⍝ (connections not in the index), timed out
{0∊⍴⍵: ⋄ {}LDRC.Close ServerName,'.',⍵}¨dead ⍝ attempt to close them
:EndIf
⍝ remove timed out, or connections that are
_connections.⎕EX killed←(conxNames~connected~dead),timedOut
_connections.index/⍨←_connections.index[1;]∊_connections.⎕NL ¯9
:EndIf
_connections.lastCheck←⎕AI[3]
:EndHold
CleanupTokens killed
:EndIf
∇
∇ CleanupTokens conx
⍝ remove any lingering tokens from dead/removed connections
:If ~0∊⍴conx
conx←,⊆conx
{}⎕TGET ⎕TPOOL∩TokenForConnection¨{⊃¯1↑⍵(≠⊆⊣)'.'}¨conx
:EndIf
∇
:Section RequestHandling
∇ r←ErrorInfo
:Trap 0
r←⍕ErrorInfoLevel↑⎕DMX.(EM({⍵↑⍨⍵⍳']'}2⊃DM))
:Else
r←''
:EndTrap
∇
∇ req←MakeRequest args
⍝ create a request, use MakeRequest '' for interactive debugging
⍝ :Access public ⍝ uncomment for debugging
:If 0∊⍴args
req←⎕NEW Request
:Else
req←⎕NEW Request args
:EndIf
req.(Server ErrorInfoLevel)←⎕THIS ErrorInfoLevel
∇
∇ ns HandleRequest(obj conn);data;evt;obj;rc;cert;fn
:Hold obj
(rc obj evt data)←⊃⎕TGET conn ⍝ from Conga.Wait
:Select evt
:Case 'HTTPHeader'
ns.Req←MakeRequest data
ns.Req.Thread←⎕TID
ns.Req.PeerCert←''
ns.Req.PeerAddr←2⊃2⊃LDRC.GetProp obj'PeerAddr'
ns.Req.Server←⎕THIS
:If Secure
(rc cert)←2↑LDRC.GetProp obj'PeerCert'
:If rc=0
ns.Req.PeerCert←cert
:Else
ns.Req.PeerCert←'Could not obtain certificate'
:EndIf
:EndIf
:Case 'HTTPBody'
⍝↓↓↓ if Req doesn't exist, it's because it was marked complete previously and removed, and we just ignore this event
⍝    this can happen in the case where:
⍝       - the request is a POST request
⍝       - and no content-length header was provided
⍝       - and transfer-encoding is not "chunked"
⍝ Conga 3.5 addresses this by issuing and HTTPError event, but earlier Conga's
→0⍴⍨0=ns.⎕NC'Req'
ns.Req.Thread←⎕TID
ns.Req.ProcessBody data
:Case 'HTTPChunk'
ns.Req.Thread←⎕TID
ns.Req.ProcessChunk data
:Case 'HTTPTrailer'
ns.Req.Thread←⎕TID
ns.Req.ProcessTrailer data
:EndSelect
ns.Req.Thread←⎕TID
:If ns.Req.Complete
:Select lc ns.Req.GetHeader'content-encoding' ⍝ zipped request?
:Case '' ⍝ no encoding
:If ns.Req.Charset≡'utf-8'
ns.Req.Body←'UTF-8'⎕UCS ⎕UCS ns.Req.Body
:EndIf
:Case 'gzip'
ns.Req.Body←⎕UCS 256|¯3 Zipper 83 ⎕DR ns.Req.Body
:Case 'deflate'
ns.Req.Body←⎕UCS 256|¯2 Zipper 83 ⎕DR ns.Req.Body
:Else
→resp⊣'Unsupported content-encoding'ns.Req.Fail 400
:EndSelect
:If _htmlEnabled∧ns.Req.Response.Status≠200
ns.Req.Response.Headers←1 2⍴'Content-Type' 'text/html; charset=utf-8'
ns.Req.Response.Payload←'<h3>',(⍕ns.Req.Response.((⍕Status),' ',StatusText)),'</h3>'
→resp
:EndIf
⍝ Application-specified validation
stopIf DebugLevel 4+2×~0∊⍴ValidateRequestFn
rc←Validate ns.Req
ns.Req.Fail 400×(ns.Req.Response.Status=200)∧0≠rc ⍝ default status 400 if not set by application
→resp If rc≠0
fn←1↓'.'@('/'∘=)ns.Req.Endpoint
fn RequestHandler ns ⍝ RequestHandler is either HandleJSONRequest or HandleRESTRequest
resp:    obj Respond ns
:EndIf
:EndHold
∇
∇ fn HandleJSONRequest ns;payload;resp;valence;nc;debug;file;isGET
→handle If~isGET←'get'≡ns.Req.Method
:If AllowGETs ⍝ if we allow GETs
:AndIf ~'.'∊ns.Req.Endpoint ⍝ and the endpoint doesn't have a '.' (file extension)
→handle If 3=⌊|{0::0 ⋄ CodeLocation.⎕NC⊂⍵}fn ⍝ handle it if there's a matching function for the endpoint
:EndIf
→End If'Request method should be POST'ns.Req.Fail 405×~_htmlEnabled
→handleHtml If~0∊⍴_htmlFolder
ns.Req.Response.Headers←1 2⍴'Content-Type' 'text/html; charset=utf-8'
ns.Req.Response.Payload←'<!DOCTYPE html><html><head><meta content="text/html; charset=utf-8" http-equiv="Content-Type"><link rel="icon" href="data:,"></head><body><h2>400 Bad Request</h2></body></html>'
→End If'Bad URI'ns.Req.Fail 400×~0∊⍴fn ⍝ either fail with a bad URI or exit if favicon.ico (no-op)
:If 0∊⍴_htmlRootFn
ns.Req.Response.Payload←HtmlPage
:Else
ns.Req.Response.Payload←{1 CodeLocation.(85⌶)_htmlRootFn,' ⍵'}ns.Req
:EndIf
→End
handleHtml:
:If (,'/')≡ns.Req.Endpoint
file←_htmlFolder,_htmlDefaultPage
:Else
file←_htmlFolder,('/'=⊣/ns.Req.Endpoint)↓ns.Req.Endpoint
:EndIf
file←∊1 ⎕NPARTS file
file,←(isDir file)/'/',_htmlDefaultPage
→End If ns.Req.Fail 400×~_htmlFolder begins file
:If 0≠ns.Req.Fail 404×~⎕NEXISTS file
→End If 0=Report404InHTML
ns.Req.Response.Headers←1 2⍴'Content-Type' 'text/html; charset=utf-8'
ns.Req.Response.Payload←'<h3>Not found: ',(file↓⍨≢_htmlFolder),'</h3>'
→End
:EndIf
ns.Req.Response.Payload←''file
'Content-Type'ns.Req.DefaultHeader ns.Req.ContentTypeForFile file
→End
handle:
→End If HandleCORSRequest ns.Req
→End If'No function specified'ns.Req.Fail 400×0∊⍴fn
→End If'Unsupported request method'ns.Req.Fail 405×(⊂ns.Req.Method)(~∊)(~AllowGETs)↓'get' 'post'
→End If'Cannot accept query parameters'ns.Req.Fail 400×AllowGETs⍱0∊⍴ns.Req.QueryParams
:Select ns.Req.ContentType
:Case 'application/json'
:Trap 0 DebugLevel 1
ns.Req.Payload←{0∊⍴⍵:⍵ ⋄ JSONin ⍵}ns.Req.Body
:Else
→End⊣'Could not parse payload as JSON'ns.Req.Fail 400
:EndTrap
:Case 'multipart/form-data'
→End If'Content-Type should be "application/json"'ns.Req.Fail 400×~AllowFormData
:Trap 0 DebugLevel 1
ns.Req.Payload←ParseMultipartForm ns.Req
→End If 200≠ns.Req.Response.Status ⍝ bail if parsing fails
:Else
→End⊣'Could not parse payload as "multipart/form-data"'ns.Req.Fail 400
:EndTrap
:Case ''
→End If'No Content-Type specified'ns.Req.Fail 400×~isGET∧AllowGETs
:Trap 0 DebugLevel 1
:If 0∊⍴ns.Req.QueryParams
ns.Req.Payload←''
:ElseIf 1=≢⍴ns.Req.QueryParams ⍝ name/value pairs
ns.Req.Payload←JSONin ns.Req.QueryParams
:Else
ns.Req.Payload←{JSONin{1⌽'}{',¯1↓∊'"',¨⍵[;,1],¨'":'∘,¨⍵[;,2],¨','}⍵}ns.Req.QueryParams
:EndIf
:Else
→End⊣'Could not parse query string as JSON'ns.Req.Fail 400
:EndTrap
:Else
→End⊣('Content-Type should be "application/json"',AllowFormData/' or "multipart/form-data"')ns.Req.Fail 400
:EndSelect
→End If CheckAuthentication ns.Req
→End If('Invalid function "',fn,'"')ns.Req.Fail CheckFunctionName fn
→End If('Invalid function "',fn,'"')ns.Req.Fail 404×3≠⌊|{0::0 ⋄ CodeLocation.⎕NC⊂⍵}fn  ⍝ is it a function?
valence←|⊃CodeLocation.⎕AT fn
nc←CodeLocation.⎕NC⊂fn
→End If('"',fn,'" is not a monadic result-returning function')ns.Req.Fail 400×(1 1 0≢×valence)>(0∧.=valence)∧3.3=nc
resp←''
:Trap 0 DebugLevel 1
:Trap 85
:If (2=valence[2])>3.3=nc ⍝ dyadic and not tacit
stopIf DebugLevel 2
resp←ns.Req{0 CodeLocation.(85⌶)'⍺ ',fn,' ⍵'}ns.Req.Payload ⍝ intentional stop for application-level debugging
:Else
stopIf DebugLevel 2
resp←{0 CodeLocation.(85⌶)fn,' ⍵'}ns.Req.Payload ⍝ intentional stop for application-level debugging
:EndIf
:Else ⍝ no result from the endpoint
:If 0∊⍴ns.Req.Response.Payload ⍝ no payload?
:AndIf 200=ns.Req.Response.Status  ⍝ endpoint did not change the status
→End⊣ns.Req.Fail 204 ⍝ no content
:EndIf
:EndTrap
:Else
→End⊣ErrorInfo ns.Req.Fail 500
:EndTrap
→End If 204=ns.Req.Response.Status
⍝ Exit if
⍝        ↓↓↓↓↓↓↓ no response from endpoint,
⍝ and              ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ endpoint did not set payload
⍝ and                                          ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ endpoint failed the request
→End If(0∊⍴resp)∧(0∊⍴ns.Req.Response.Payload)∧200≠ns.Req.Response.Status
'Content-Type'ns.Req.DefaultHeader DefaultContentType ⍝ set the header if not set
:If ∨/'application/json'⍷ns.Req.(Response.Headers GetHeader'content-type') ⍝ if the response is JSON
ns.Req ToJSON resp ⍝ convert it
:Else
ns.Req.Response.Payload←resp
:EndIf
:If 0∊⍴ns.Req.Response.Payload
'Content-Length'ns.Req.DefaultHeader 0
:EndIf
End:
∇
∇ formData←ParseMultipartForm req;boundary;body;part;headers;payload;disposition;type;name;filename;tmp
boundary←crlf,'--',req.Boundary ⍝ the HTTP standard prepends '--' to the boundary
body←req.Body
formData←⎕NS''
body←⊃body splitOnFirst boundary,'--'  ⍝ drop off trailing boundary ('--' is appended to the trailing boundary)
:For part :In (crlf,body)splitOn boundary ⍝ split into parts
(headers payload)←part splitOnFirst crlf,crlf
(disposition type)←deb¨2↑headers splitOn crlf
(name filename)←deb¨2↑1↓disposition splitOn';'
name←'"'~⍨2⊃name splitOn'='
name↓⍨←¯2×'[]'≡¯2↑name ⍝ drop any trailing [] (we handle arrays automatically)
:If {¯1=⎕NC ⍵}name
→0⊣'Invalid form field name for Jarvis'req.Fail 400
:EndIf
tmp←⎕NS''
filename←'"'~⍨2⊃2↑filename splitOn'='
tmp.(Name Filename)←name filename
tmp.Content←payload
tmp.Content_Type←deb 2⊃2↑type splitOn':'
:If 0=formData.⎕NC name ⋄ formData{⍺⍎⍵,'←⍬'}name ⋄ :EndIf
formData(name{⍺⍎⍺⍺,',←⍵'})tmp
:EndFor
∇
∇ fn HandleRESTRequest ns;ind;exec;valence;ct;resp
→0 If HandleCORSRequest ns.Req
→0 If CheckAuthentication ns.Req
:If ParsePayload
:Trap 0 DebugLevel 1
:Select ns.Req.ContentType
:Case 'application/json'
ns.Req.Payload←JSONin ns.Req.Body
:Case 'application/xml'
ns.Req.(Payload←⎕XML Body)
:EndSelect
:Else
→0⊣('Unable to parse request body as ',ct)ns.Req.Fail 400
:EndTrap
:EndIf
ind←RESTMethods[;1](⍳nocase)⊂ns.Req.Method
→0 If ns.Req.Fail 405×(≢RESTMethods)<ind
exec←⊃RESTMethods[ind;2]
→0 If ns.Req.Fail 501×0∊⍴exec
resp←''
:Trap 0 DebugLevel 1
:Trap 85
stopIf DebugLevel 2
resp←{1 CodeLocation.(85⌶)exec,' ⍵'}ns.Req  ⍝ intentional stop for application-level debugging
:EndTrap
:Else
→0⊣ns.Req.Fail 500
:EndTrap
→0 If 2≠⌊0.01×ns.Req.Response.Status
:If (ns.Req.(Response.Headers GetHeader'content-type')≡'')∧~0∊⍴DefaultContentType
'content-type'ns.Req.SetHeader DefaultContentType
:EndIf
:If 'application/json'match⊃';'(≠⊆⊢)ns.Req.(Response.Headers GetHeader'content-type')
ns.Req ToJSON resp
:EndIf
∇
∇ r←HandleCORSRequest req;origin;reflect
r←0
→0 If~EnableCORS
→0 If 0∊⍴origin←req.GetHeader'Origin'  ⍝ CORS requests have an Origin header
reflect←{(1+(,⍺)≡,1)⊃⍺ ⍵} ⍝ if CORS_xxx setting is 1, reflect the request's value
'Access-Control-Allow-Origin'req.DefaultHeader CORS_Origin reflect origin
→0 If~req.Method≡'options' ⍝ OPTIONS (with an Origin header) indicates a "pre-flighted" CORS request
→0 If 0∊⍴req.GetHeader'Access-Control-Request-Method' ⍝
'Access-Control-Allow-Methods'req.DefaultHeader CORS_Methods reflect req.GetHeader'Access-Control-Request-Method'
'Access-Control-Allow-Headers'req.DefaultHeader CORS_Headers reflect req.GetHeader'Access-Control-Request-Headers'
'Access-Control-Max-Age'req.DefaultHeader(⍕CORS_MaxAge)
req.SetStatus 204 ⍝ No Content
r←1
∇
∇ req ToJSON data
⍝ convert APL response payload to JSON
:Trap 0 DebugLevel 1
req.Response.Payload←⎕UCS SafeJSON JSONout data
:Else
'Could not format result payload as JSON'req.Fail 500
:EndTrap
∇
∇ w←SafeJSON w;i;c;⎕IO
⍝ Convert Unicode chars to \uXXXX
⎕IO←0
→0⍴⍨0∊⍴i←⍸127<c←⎕UCS w
w[i]←{⊂'\u','0123456789ABCDEF'[16 16 16 16⊤⍵]}¨c[i]
w←∊w
∇
∇ r←CheckAuthentication req
⍝ Check request authentication
⍝ r is 0 if request processing can continue
r←1
:If 0=DoAuthentication req ⍝ might still want to do some authentication
:If 0≠SessionTimeout ⍝ using sessions?
:If 0≠CheckSession req ⍝ session is still valid?
CreateSession req
:EndIf
:EndIf
r←0
:EndIf
∇
∇ rc←DoAuthentication req;debug;old
⍝ rc is 0 if either no authentication is required or authentication succeeds
⍝
rc←0
:Trap 0 DebugLevel 1
stopIf DebugLevel 2×~0∊⍴AuthenticateFn
rc←Authenticate req ⍝ intentional stop for application-level debugging
:If rc≠0
req.Fail 401
:If HTTPAuthentication match'basic'
'WWW-Authenticate'req.SetHeader'Basic realm="Jarvis", charset="UTF-8"'
:EndIf
:EndIf
:Else ⍝ Authenticate errored
(⎕DMX.EM,' occured during authentication')req.Fail 500
rc←1
:EndTrap
∇
∇ obj Respond ns;status;z;res;close;conx
res←ns.Req.Response
status←(⊂ns.Req.HTTPVersion),res.((⍕Status)StatusText)
res.Headers⍪←'Server'(deb⍕2↑Version)
res.Headers⍪←'Date'(2⊃LDRC.GetProp'.' 'HttpDate')
conx←lc ns.Req.GetHeader'connection'
close←(('HTTP/1.0'≡ns.Req.HTTPVersion)>'keep-alive'≡conx)∨'close'≡conx
close∨←2≠⌊0.01×res.Status ⍝ close the connection on non-2XX status
UseZip ContentEncode ns.Req
:Select 1⊃z←LDRC.Send obj(status,res.Headers res.Payload)close
:Case 0 ⍝ everything okay, nothing to do
:Case 1008 ⍝ Wrong object class likely caused by socket being closed during the request
⍝ do nothing for now
:Else
Log'Respond: Conga error when sending response',GetIP obj
Log⍕z
:EndSelect
ns.⎕EX'Req'
∇
∇ UseZip ContentEncode req;enc
→End If 0=UseZip ⍝ is zipping enabled?
→End If 0∊⍴enc←req.AcceptEncodings ⍝ does the client accept zipped responses?
:If UseZip≤≢req.Response.Payload ⍝ payload exceeds size threshhold?
:Select ⊃enc
:Case 'gzip'
:Trap 0
req.Response.Payload←2⊃3 ZipLevel Zipper sint req.Response.Payload
:Else
Log'ContentEncode: gzip content-encoding failed'
→End
:EndTrap
'Content-Encoding'req.SetHeader'gzip'
:Case 'deflate'
:Trap 0
req.Response.Payload←2⊃2 ZipLevel Zipper sint req.Response.Payload
:Else
Log'ContentEncode: deflate content-encoding failed'
→End
:EndTrap
'Content-Encoding'req.SetHeader'deflate'
:Else
Log'ContentEncode: unsupported content-encoding - ',⊃enc ⍝ this should NEVER happen
:EndSelect
:EndIf
End:
∇
:EndSection ⍝ Request Handling
∇ ip←GetIP objname
ip←{6::'' ⋄ ' (IP Address ',(⍕(_connections⍎⍵).IP),')'}objname
∇
∇ r←CheckFunctionName fn
⍝ checks the requested function name and returns
⍝    0 if the function is allowed
⍝  404 (not found) either the function name does not exist, is not in IncludeFns (if defined), is in ExcludeFns (if defined)
:Access public
r←0
:If 1<|≡fn
r←CheckFunctionName¨fn
:Else
fn←⊆,fn
→0 If r←404×fn∊AppInitFn AppCloseFn ValidateRequestFn AuthenticateFn SessionInitFn _htmlRootFn
:If ~0∊⍴_includeRegex
→0 If r←404×0∊⍴(_includeRegex ⎕S'%')fn
:EndIf
:If ~0∊⍴_excludeRegex
r←404×~0∊⍴(_excludeRegex ⎕S'%')fn
:EndIf
:EndIf
∇
:class Request
:Field Public Instance AcceptEncodings←''⍝ content-encodings that the client will accept
:Field Public Instance Boundary←''       ⍝ boundary for content-type 'multipart/form-data'
:Field Public Instance Charset←''        ⍝ content charset (defaults to 'utf-8' if content-type is application/json)
:Field Public Instance Complete←0        ⍝ do we have a complete request?
:Field Public Instance ContentType←''    ⍝ content-type header value
:Field Public Instance Cookies←0 2⍴⊂''   ⍝ cookie name/value pairs
:Field Public Instance Input←''
:Field Public Instance Headers←0 2⍴⊂''   ⍝ HTTPRequest header fields (plus any supplied from HTTPTrailer event)
:Field Public Instance Method←''         ⍝ HTTP method (GET, POST, PUT, etc)
:Field Public Instance Endpoint←''       ⍝ Requested URI
:Field Public Instance KillOnDisconnect←0⍝ Kill request thread on disconnect
:Field Public Instance Thread←¯1         ⍝ Thread number handling this request
:Field Public Instance Body←''           ⍝ body of the request
:Field Public Instance Payload←''        ⍝ parsed (if JSON or XML) payload
:Field Public Instance PeerAddr←'unknown'⍝ client IP address
:Field Public Instance PeerCert←0 0⍴⊂''  ⍝ client certificate
:Field Public Instance HTTPVersion←''
:Field Public Instance ErrorInfoLevel←1
:Field Public Instance Response
:Field Public Instance Server
:Field Public Instance Session←⍬
:Field Public Instance QueryParams←0 2⍴0
:Field Public Instance UserID←''
:Field Public Instance Password←''
:Field Public Shared HttpStatus←↑(200 'OK')(201 'Created')(204 'No Content')(301 'Moved Permanently')(302 'Found')(303 'See Other')(304 'Not Modified')(305 'Use Proxy')(307 'Temporary Redirect')(400 'Bad Request')(401 'Unauthorized')(403 'Forbidden')(404 'Not Found')(405 'Method Not Allowed')(406 'Not Acceptable')(408 'Request Timeout')(409 'Conflict')(410 'Gone')(411 'Length Required')(412 'Precondition Failed')(413 'Request Entity Too Large')(414 'Request-URI Too Long')(415 'Unsupported Media Type')(500 'Internal Server Error')(501 'Not Implemented')(503 'Service Unavailable')
⍝ Content types for common file extensions
:Field Public Shared ContentTypes←18 2⍴'txt' 'text/plain' 'htm' 'text/html' 'html' 'text/html' 'css' 'text/css' 'xml' 'text/xml' 'svg' 'image/svg+xml' 'json' 'application/json' 'zip' 'application/x-zip-compressed' 'csv' 'text/csv' 'pdf' 'application/pdf' 'mp3' 'audio/mpeg' 'pptx' 'application/vnd.openxmlformats-officedocument.presentationml.presentation' 'js' 'application/javascript' 'png' 'image/png' 'jpg' 'image/jpeg' 'bmp' 'image/bmp' 'jpeg' 'image/jpeg' 'woff' 'application/font-woff'
GetFromTable←{(⍵[;1]⍳⊂,⍺)⊃⍵[;2],⊂''}
split←{p←(⍺⍷⍵)⍳1 ⋄ ((p-1)↑⍵)(p↓⍵)} ⍝ Split ⍵ on first occurrence of ⍺
lc←{2::0(819⌶)⍵ ⋄ ¯3 ⎕C ⍵}
deb←{{1↓¯1↓⍵/⍨~'  '⍷⍵}' ',⍵,' '}
∇ {r}←{message}Fail status
⍝ Set HTTP response status code and message if status≠0
:Access public
:If r←0≠1↑status
:If 0=⎕NC'message'
:If 500=status
message←ErrorInfo
:Else
message←'' ⋄ :EndIf
:EndIf
message SetStatus status
:EndIf
∇
∇ make
⍝ barebones constructor for interactive debugging (use Jarvis.MakeRequest '')
:Access public
:Implements constructor
makeResponse
∇
∇ make1 args;query;origin;length;param;value;type;noLength;len
⍝ args is the result of Conga HTTPHeader event
:Access public
:Implements constructor
(Method Input HTTPVersion Headers)←args
Headers[;1]←lc Headers[;1]  ⍝ header names are case insensitive
Method←lc Method
(ContentType param)←deb¨2↑(';'(≠⊆⊢)GetHeader'content-type'),⊂''
ContentType←lc ContentType
(type value)←2↑⊆deb¨'='(≠⊆⊢)param
:Select lc type
:Case '' ⍝ no parameter set
Charset←(ContentType≡'application/json')/'utf-8'
:Case 'charset'
Charset←lc value
:Case 'boundary'
Boundary←value
:EndSelect
Cookies←ParseCookies Headers
AcceptEncodings←ParseEncodings GetHeader'accept-encoding'
makeResponse
(Endpoint query)←'?'split Input
:Trap 11 ⍝ trap domain error on possible bad UTF-8 sequence
Endpoint←URLDecode Endpoint
QueryParams←ParseQueryString query
:If 'basic '≡lc 6↑auth←GetHeader'authorization'
(UserID Password)←':'split Base64Decode 6↓auth
:EndIf
:Else
Complete←1 ⍝ mark as complete
Fail 400   ⍝ 400 = bad request
→0
:EndTrap
noLength←0∊⍴length←GetHeader'content-length'
len←⊃⊃(//)⎕VFI length
Complete←('get'≡Method)∧noLength∨0=len ⍝ we're a GET and there's no content-length or content-length=0
Complete∨←noLength>∨/'chunked'⍷GetHeader'transfer-encoding' ⍝ or no length supplied and we're not chunked
Complete∨←noLength<0=len ⍝ or if content-length=0
∇
∇ makeResponse
⍝ create the response namespace
Response←⎕NS''
Response.(Status StatusText Payload)←200 'OK' ''
Response.Headers←0 2⍴'' ''
∇
∇ ProcessBody args
:Access public
Body←args
Complete←1
∇
∇ ProcessChunk args
:Access public
⍝ args is [1] chunk content [2] chunk-extension name/value pairs (which we don't expect and won't process)
Body,←1⊃args
∇
∇ ProcessTrailer args;inds;mask
:Access public
args[;1]←lc args[;1]
mask←(≢Headers)≥inds←Headers[;1]⍳args[;1]
Headers[mask/inds;2]←mask/args[;2]
Headers⍪←(~mask)⌿args
Complete←1
∇
∇ r←Hostname;h
:Access public
:If ~0∊⍴h←GetHeader'host'
r←'http',(~Server.Secure)↓'s://',h
:Else
r←Server.Hostname
:EndIf
∇
∇ params←ParseQueryString query
params←0 2⍴⊂''
→0⍴⍨0∊⍴query
:If '='∊query ⍝ contains name=value?
params←URLDecode¨2↑[2]↑'='(≠⊆⊢)¨'&'(≠⊆⊢)query
:Else
params←URLDecode query
:EndIf
∇
∇ r←ParseEncodings encodings
r←(⎕C(⊃¨';'(≠⊆⊢)¨','(≠⊆⊢)encodings~' '))∩'gzip' 'deflate'
∇
∇ cookies←ParseCookies headers;cookieHeader;cookie
:Access public shared
cookies←0 2⍴⊂''
:For cookieHeader :In (headers[;1]≡¨⊂'cookie')/headers[;2]
:For cookie :In (({⍵↓⍨+/∧\' '=⍵}⌽)⍣2)¨';'(≠⊆⊢)cookieHeader
cookies⍪←2↑('='(≠⊆⊢)cookie),⊂''
:EndFor
:EndFor
cookies←(⌽≠⌽cookies[;1])⌿cookies
∇
∇ r←URLDecode r;rgx;rgxu;i;j;z;t;m;⎕IO;lens;fill
:Access public shared
⍝ Decode a Percent Encoded string https://en.wikipedia.org/wiki/Percent-encoding
⎕IO←0
((r='+')/r)←' '
rgx←'[0-9a-fA-F]'
rgxu←'%[uU]',(4×⍴rgx)⍴rgx ⍝ 4 characters
r←(rgxu ⎕R{{⎕UCS 16⊥⍉16|'0123456789ABCDEF0123456789abcdef'⍳⍵}2↓⍵.Match})r
:If 0≠⍴i←(r='%')/⍳⍴r
:AndIf 0≠⍴i←(i≤¯2+⍴r)/i
z←r[j←i∘.+1 2]
t←'UTF-8'⎕UCS 16⊥⍉16|'0123456789ABCDEF0123456789abcdef'⍳z
lens←⊃∘⍴¨'UTF-8'∘⎕UCS¨t  ⍝ UTF-8 is variable length encoding
fill←i[¯1↓+\0,lens]
r[fill]←t
m←(⍴r)⍴1 ⋄ m[(,j),i~fill]←0
r←m/r
:EndIf
∇
base64←{⎕IO ⎕ML←0 1              ⍝ from dfns workspace - Base64 encoding and decoding as used in MIME.
chars←'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
bits←{,⍉(⍺⍴2)⊤⍵}             ⍝ encode each element of ⍵ in ⍺ bits, and catenate them all together
part←{((⍴⍵)⍴⍺↑1)⊂⍵}          ⍝ partition ⍵ into chunks of length ⍺
0=2|⎕DR ⍵:2∘⊥∘(8∘↑)¨8 part{(-8|⍴⍵)↓⍵}6 bits{(⍵≠64)/⍵}chars⍳⍵  ⍝ decode a string into octets
four←{                       ⍝ use 4 characters to encode either
8=⍴⍵:'=='∇ ⍵,0 0 0 0     ⍝   1,
16=⍴⍵:'='∇ ⍵,0 0         ⍝   2
chars[2∘⊥¨6 part ⍵],⍺    ⍝   or 3 octets of input
}
cats←⊃∘(,/)∘((⊂'')∘,)        ⍝ catenate zero or more strings
cats''∘four¨24 part 8 bits ⍵
}
∇ r←{cpo}Base64Encode w
⍝ Base64 Encode
⍝ Optional cpo (code points only) suppresses UTF-8 translation
⍝ if w is numeric (single byte integer), skip any conversion
:Access public shared
:If 83=⎕DR w ⋄ r←base64 w
:ElseIf 0=⎕NC'cpo' ⋄ r←base64'UTF-8'⎕UCS w
:Else ⋄ r←base64 ⎕UCS w
:EndIf
∇
∇ r←{cpo}Base64Decode w
⍝ Base64 Decode
⍝ Optional cpo (code points only) suppresses UTF-8 translation
:Access public shared
:If 0=⎕NC'cpo' ⋄ r←'UTF-8'⎕UCS base64 w
:Else ⋄ r←⎕UCS base64 w
:EndIf
∇
∇ r←{table}GetHeader name
:Access Public Instance
:If 0=⎕NC'table' ⋄ table←Headers ⋄ :EndIf
table[;1]←lc table[;1]
r←(lc name)GetFromTable table
∇
∇ name DefaultHeader value
:Access public instance
:If 0∊⍴Response.Headers GetHeader name
name SetHeader value
:EndIf
∇
∇ r←{endpoint}MakeURI resource
:Access public instance
⍝ make a URI for a RESTful resource relative to the request endpoint
:If 0≠⎕NC'endpoint'
r←Hostname,endpoint,∊'/',¨⍕¨⊆resource
:Else
r←Hostname,Endpoint,∊'/',¨⍕¨⊆resource
:EndIf
∇
∇ r←ErrorInfo
:Trap 0
r←⍕ErrorInfoLevel↑⎕DMX.(EM({⍵↑⍨⍵⍳']'}2⊃DM))
:Else
r←''
:EndTrap
∇
∇ {(name value)}←name SetHeader value
:Access Public Instance
Response.Headers⍪←name(∊⍕value)
∇
∇ {(name cookie)}←name SetCookie cookie
:Access public instance
⍝ create a response "set-cookie" header
⍝ cookie is the cookie value followed by any ;-delimited attributes
'set-cookie'SetHeader name,'=',cookie
∇
∇ {(name value)}←SetContentType contentType
:Access public instance
⍝ shortcut function to set the response content-type header
(name value)←'Content-Type'SetHeader contentType
∇
∇ value←GetCookie name
:Access public instance
⍝ retrieve a request cookie
value←(Cookies[;1]⍳⊆,name)⊃Cookies[;2],⊂''
∇
∇ {status}←{statusText}SetStatus status
:Access public instance
:If status≠0
:If 0=⎕NC'statusText' ⋄ statusText←'' ⋄ :EndIf
statusText←{0∊⍴⍵:⍵ ⋄ '('=⊣/⍵:⍵ ⋄ '(',⍵,')'}statusText
statusText←deb((HttpStatus[;1]⍳status)⊃HttpStatus[;2],⊂''),' ',statusText
Response.(Status StatusText)←status statusText
:EndIf
∇
∇ r←ContentTypeForFile filename;ext
:Access public instance
ext←⊂1↓3⊃⎕NPARTS filename
r←(ContentTypes[;1]⍳ext)⊃ContentTypes[;2],⊂'text/html'
r,←('text/html'≡r)/'; charset=utf-8'
∇
:EndClass
:Section SessionHandler
∇ InitSessions
⍝ initialize session handling
:If 0≠SessionTimeout ⍝ are we using sessions?
_sessions←⍬
_sessionsInfo←0 5⍴0 ⍝ [;1] id, [;2] IP address, [;3] creation time, [;4] last active time, [;5] ref to session
⎕RL←⍬
:If 0<SessionTimeout ⍝ is there a timeout set?  0> means no timeout and sessions are managed by the application
_sessionThread←SessionMonitor&SessionTimeout
:EndIf
:EndIf
∇
∇ SessionMonitor timeout;expired;dead
:Repeat
:If 0<≢_sessionsInfo
:Hold 'Sessions'
:If ∨/expired←SessionTimeout IsExpired _sessionsInfo[;4] ⍝ any expired?
⍝ ↓↓↓ if a session expires, remove the namespace from _sessions
⍝     but leave the entry in _sessionsInfo (removing the namespace reference)
⍝     so that we can report to the user that his session timed out
⍝     if he returns before SessionCleanupTime passes
_sessions~←expired/_sessionsInfo[;5] ⍝ remove from sessions list
(expired/_sessionsInfo[;5])←0        ⍝ remove reference from _sessionsInfo
:EndIf
⍝ ↓↓↓ SessionCleanupTime is used to clean up _sessionsInfo after a session has expired
⍝     In general SessionCleanupTime should be set to a value ≥ SessionTimeout
:If ∨/dead←(0=_sessionsInfo[;5])∧SessionCleanupTime IsExpired _sessionsInfo[;4] ⍝ any expired sessions need their info removed?
_sessionsInfo⌿⍨←~dead ⍝ remove from _sessionsInfo
:EndIf
:EndHold
:EndIf
{}⎕DL timeout×60
:EndRepeat
∇
MakeSessionId←{⎕IO←0 ⋄'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'[(?20⍴62),5↑1↓⎕TS]}
IsExpired←{⍺≤0: 0 ⋄ (Now-⍵)>(⍺×60000)÷86400000}
∇ r←DateToIDNX ts
⍝ Date to IDN eXtended (will be replaced by ⎕DT when ⎕DT is in the latest 3 versions of Dyalog APL)
r←(2 ⎕NQ'.' 'DateToIDN'(3↑ts))+(0 60 60 1000⊥¯4↑7↑ts)÷86400000
∇
∇ CreateSession req;ref;now;id;ts;rc
id←MakeSessionId''
now←Now
:Hold 'Sessions'
_sessions,←ref←⎕NS''
_sessionsInfo⍪←id req.PeerAddr now now ref
req.Session←ref
:EndHold
:If ~0∊⍴SessionInitFn
:If 3=CodeLocation.⎕NC SessionInitFn
:Trap 0 DebugLevel 1
:Trap 85
stopIf DebugLevel 2
rc←SessionInitFn CodeLocation.{1(85⌶)⍺,' ⍵'}req
:Else ⋄ rc←0
:EndTrap
:If 0≠rc
(_sessions _sessionsInfo)←¯1↓¨_sessions _sessionsInfo
→0⊣('Session intialization returned ',⍕rc)req.Fail 500
:EndIf
:Else
→0⊣(⎕DMX.EM,' occurred during session initialization failed')req.Fail 500
:EndTrap
:Else
→0⊣('Session initialization function "',SessionInitFn,'" not found')req.Fail 500
:EndIf
:EndIf
:If SessionUseCookie
SessionIdHeader req.SetCookie id,(SessionTimeout>0)/'; Max-Age=',⍕⌈60×SessionTimeout
:Else
SessionIdHeader req.SetHeader id
:EndIf
∇
∇ r←KillSession id;ind
⍝ forcibly kill a session
⍝ r is 1 if session was killed, 0 if not found
:Hold 'Sessions'
:If r←(≢_sessionsInfo)≥ind←_sessionsInfo[;1]⍳⊆id
_sessions~←_sessionsInfo[ind;5]
_sessionsInfo⌿⍨←ind≠⍳≢_sessionsInfo
:EndIf
:EndHold
∇
∇ req TimeoutSession ind
⍝ assumes :Hold 'Sessions' is set in calling environment
⍝ removes session from _sessions and marks it as time out in _sessionsInfo
_sessions~←_sessionsInfo[ind;5]
_sessionsInfo⌿←ind≠⍳≢_sessionsInfo
∇
∇ ref←GetSession req;id
:Access public
ref←''
→0⍴⍨0∊⍴id←GetSessionId req
ref←(_sessionsInfo[;1]⍳⊂id)⊃(_sessionsInfo[;5],⊂'')
∇
∇ id←GetSessionId req
:If SessionUseCookie
id←req.GetCookie SessionIdHeader
:Else
id←req.GetHeader SessionIdHeader
:EndIf
∇
∇ r←CheckSession req;ind;session;timedOut;id
⍝ check for valid session (only called if SessionTimeout≠0)
r←1
:Hold 'Sessions'
id←GetSessionId req
ind←_sessionsInfo[;1]⍳⊂id
→0⍴⍨ind>≢_sessionsInfo
:If 0∊⍴session←⊃_sessionsInfo[ind;5] ⍝ already timed out (session was already removed from _sessions)
:OrIf SessionTimeout IsExpired _sessionsInfo[ind;4] ⍝ newly expired
req TimeoutSession ind
→0
:EndIf
⍝ we have a valid session, refresh the cookie or set the header
:If SessionUseCookie
SessionIdHeader req.SetCookie id,(SessionTimeout>0)/'; Max-Age=',⍕⌈60×SessionTimeout
:ElseIf
SessionIdHeader req.SetHeader id
:EndIf
_sessionsInfo[ind;4]←Now
req.Session←session
r←0
:EndHold
∇
:EndSection
:Section Utilities
If←((0≠⊃)⊢)⍴⊣ ⍝ test for 0 return
isChar←{0 2∊⍨10|⎕DR ⍵}
toChar←{(⎕DR'')⎕DR ⍵}
stripQuotes←{'""'≡2↑¯1⌽⍵:¯1↓1↓⍵ ⋄ ⍵} ⍝ strip leading and ending "
deb←{{1↓¯1↓⍵/⍨~'  '⍷⍵}' ',⍵,' '} ⍝ delete extraneous blanks
dlb←{⍵↓⍨+/∧\' '=⍵} ⍝ delete leading blanks
lc←{2::0(819⌶)⍵ ⋄ ¯3 ⎕C ⍵} ⍝ lower case
uc←{2::1(819⌶)⍵ ⋄ 1 ⎕C ⍵} ⍝ upper case
nameClass←{⎕NC⊂,'⍵'} ⍝ name class of argument
nocase←{(lc ⍺)⍺⍺ lc ⍵} ⍝ case insensitive operator
begins←{⍺≡(⍴⍺)↑⍵} ⍝ does ⍺ begin with ⍵?
ends←{⍺≡(-≢⍺)↑⍵} ⍝ does ⍺ end with ⍵?
match←{⍺ (≡nocase) ⍵} ⍝ case insensitive ≡
sins←{0∊⍴⍺:⍵ ⋄ ⍺} ⍝ set if not set
stopIf←{1∊⍵:-⎕TRAP←0 'C' '⎕←''Stopped for debugging... (Press Ctrl-Enter)''' ⋄ shy←0} ⍝ faster alternative to setting ⎕STOP
show←{(2⊃⎕SI),'[',(⍕2⊃⎕LC),'] ',⍵} ⍝ debugging utility
utf8←{3=10|⎕DR ⍵: 256|⍵ ⋄ 'UTF-8' ⎕UCS ⍵}
fromutf8←{0::(⎕AV,'?')[⎕AVU⍳⍵] ⋄ 'UTF-8'⎕UCS ⍵} ⍝ Turn raw UTF-8 input into text
sint←{⎕IO←0 ⋄ 83=⎕DR ⍵:⍵ ⋄ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 ¯128 ¯127 ¯126 ¯125 ¯124 ¯123 ¯122 ¯121 ¯120 ¯119 ¯118 ¯117 ¯116 ¯115 ¯114 ¯113 ¯112 ¯111 ¯110 ¯109 ¯108 ¯107 ¯106 ¯105 ¯104 ¯103 ¯102 ¯101 ¯100 ¯99 ¯98 ¯97 ¯96 ¯95 ¯94 ¯93 ¯92 ¯91 ¯90 ¯89 ¯88 ¯87 ¯86 ¯85 ¯84 ¯83 ¯82 ¯81 ¯80 ¯79 ¯78 ¯77 ¯76 ¯75 ¯74 ¯73 ¯72 ¯71 ¯70 ¯69 ¯68 ¯67 ¯66 ¯65 ¯64 ¯63 ¯62 ¯61 ¯60 ¯59 ¯58 ¯57 ¯56 ¯55 ¯54 ¯53 ¯52 ¯51 ¯50 ¯49 ¯48 ¯47 ¯46 ¯45 ¯44 ¯43 ¯42 ¯41 ¯40 ¯39 ¯38 ¯37 ¯36 ¯35 ¯34 ¯33 ¯32 ¯31 ¯30 ¯29 ¯28 ¯27 ¯26 ¯25 ¯24 ¯23 ¯22 ¯21 ¯20 ¯19 ¯18 ¯17 ¯16 ¯15 ¯14 ¯13 ¯12 ¯11 ¯10 ¯9 ¯8 ¯7 ¯6 ¯5 ¯4 ¯3 ¯2 ¯1[utf8 ⍵]}
Zipper←219⌶
∇ r←DyalogRoot
r←{⍵,('/\'∊⍨⊢/⍵)↓'/'}{0∊⍴t←2 ⎕NQ'.' 'GetEnvironment' 'DYALOG':⊃1 ⎕NPARTS⊃2 ⎕NQ'.' 'GetCommandLineArgs' ⋄ t}''
∇
∇ r←MyAddr
:Access public shared
:Trap 0
r←2 ⎕NQ #'TCPGetHostID'
:Else
r←'localhost'
:EndTrap
∇
∇ r←crlf
r←⎕UCS 13 10
∇
∇ QuadOFF
⍝ cover for ⎕OFF in case we want to add debugging
⎕OFF
∇
∇ r←Now
r←DateToIDNX ⎕TS
∇
∇ r←InTerm;system
:Access Public Shared
⍝ determine if interactive terminal is available
→0⍴⍨r←~0∊⍴2 ⎕NQ'.' 'GetEnvironment' 'RIDE_INIT'
→0⍴⍨r←'Win' 'Dev'≡system←3↑¨(⊂1 4)⌷'.'⎕WG'APLVersion'
r←('Lin' 'Dev'≡system)∧{0::0 ⋄ 1⊣⎕SH'test -t 0'}''
∇
∇ r←fmtTS ts
r←∊'YYYY-MM-DD @ hh.mm.ss.fff'(1200⌶)1 ⎕DT⊂⎕TS
∇
∇ r←a splitOn w
⍝ split a where w occurs (removing w from the result)
r←a{⍺{(¯1+⊃¨⊆⍨⍵)↓¨⍵⊆⍺}(1+≢⍵)*⍵⍷⍺}w
∇
∇ r←a splitOnFirst w
⍝ split a on first occurence of w (removing w from the result)
r←a{⍺{(¯1+⊃¨⊆⍨⍵)↓¨⍵⊆⍺}(1+≢⍵)*<\⍵⍷⍺}w
∇
∇ r←type ipRanges string;ranges
r←''
:Select ≢ranges←{('.'∊¨⍵){⊂1↓∊',',¨⍵}⌸⍵}string splitOn','
:Case 0
→0
:Case 1
r←,⊂((1+'.'∊⊃ranges)⊃'IPV6' 'IPV4')(⊃ranges)
:Case 2
r←↓'IPV4' 'IPV6',⍪ranges
:EndSelect
r←⊂(('Accept' 'Deny'⍳⊂type)⊃'AllowEndPoints' 'DenyEndPoints')r
∇
∇ r←isWin
⍝ are we running under Windows?
r←'Win'≡3↑⊃#.⎕WG'APLVersion'
∇
∇ r←isRelPath w
⍝ is path w a relative path?
r←{{~'/\'∊⍨(⎕IO+2×isWin∧':'∊⍵)⊃⍵}3↑⍵}w
∇
∇ r←isDir path
⍝ is path a directory?
r←{22::0 ⋄ 1=1 ⎕NINFO ⍵}path
∇
∇ r←SourceFile;class
:If 0∊⍴r←4⊃5179⌶class←⊃∊⎕CLASS ⎕THIS
r←{6::'' ⋄ ∊1 ⎕NPARTS ⍵⍎'SALT_Data.SourceFile'}class
:EndIf
∇
∇ r←makeRegEx w
:Access public shared
⍝ convert a simple search using ? and * to regex
r←{0∊⍴⍵:⍵
{'^',(⍵~'^$'),'$'}{¯1=⎕NC('A'@(∊∘'?*'))r←⍵:('/'=⊣/⍵)↓(¯1×'/'=⊢/⍵)↓⍵   ⍝ already regex? (remove leading/trailing '/'
r←∊(⊂'\.')@('.'=⊢)r  ⍝ escape any periods
r←'.'@('?'=⊢)r       ⍝ ? → .
r←∊(⊂'\/')@('/'=⊢)r  ⍝ / → \/
∊(⊂'.*')@('*'=⊢)r    ⍝ * → .*
}⍵            ⍝ add start and end of string markers
}w
∇
∇ (rc msg)←{root}LoadFromFolder path;type;name;nsName;parts;ns;files;folders;file;folder;ref;r;m;findFiles;pattern
:Access public
⍝ Loads an APL "project" folder
(rc msg)←0 ''
root←{6::⍵ ⋄ root}#
findFiles←{
(names type hidden)←0 1 6(⎕NINFO⍠1)∊1 ⎕NPARTS path,'/',⍵
names/⍨(~hidden)∧type=2
}
files←''
:For pattern :In ','(≠⊆⊢)LoadableFiles
files,←findFiles pattern
:EndFor
folders←{
(names type hidden)←0 1 6(⎕NINFO⍠1)∊1 ⎕NPARTS path,'/*'
names/⍨(~hidden)∧type=1
}⍬
:For file :In files
:Trap 11
2(root ⍙FIX)'file://',file
:Else
msg,←'Unable to load file: ',file,⎕UCS 13
:EndTrap
:EndFor
:For folder :In folders
nsName←2⊃1 ⎕NPARTS folder
ref←0
:Select root.⎕NC⊂nsName
:Case 9.1 ⍝ namespace
ref←root⍎nsName
:Case 0   ⍝ not defined
ref←⍎nsName root.⎕NS''
:Else     ⍝ oops
msg,←'"',folder,'" cannot be mapped to a valid namespace name',⎕UCS 13
:EndSelect
:If ref≢0
(r m)←ref LoadFromFolder folder
r←rc⌈r
msg,←m
:EndIf
:EndFor
msg←¯1↓msg
rc←4××≢msg
∇
∇ {r}←{larg}(ref ⍙FIX)rarg;isArrayNotation;t;f;p
⍝ ⎕FIX cover that accommodates Array Notation and .apla files
⍝ revert to using ⎕FIX when it supports them
larg←{6::⍵ ⋄ larg}1
isArrayNotation←{~0 2∊⍨10|⎕DR ⍵:0 ⋄ {(⊃⍵)∊d←'[''¯.⊂⎕⍬',⎕D:1 ⋄ (2⊃2↑⍵)∊d,'( '}(∊⍵)~⎕UCS 9 32}
:Trap 0
:If 1=≡rarg
:AndIf 'file://'≡7↑rarg
:AndIf '.apla'≡lc⊃⌽p←⎕NPARTS f←7↓rarg
:If larg=2
r←ref⍎(2⊃p),'←',0 Deserialise⊃⎕NGET f
:Else
r←ref⍎0 Deserialise⊃⎕NGET f
:EndIf
:ElseIf isArrayNotation 1↓∊(⎕UCS 13),¨⊆rarg
r←ref⍎0 Deserialise rarg
:Else
r←larg ref.⎕FIX rarg
:EndIf
:Else
⎕SIGNAL⊂t,⍪⎕DMX⍎1⌽')(',∊⍕t←'EN' 'EM' 'Message'
:EndTrap
∇
∇ r←a Deserialise w;DEBUG;sysVars;Num;FirstNum;FirstNs
:Access public shared
⍝ attempt to use the installed Deserialise
:If 3=⎕SE.⎕NC'Dyalog.Array.Deserialise'
r←a ⎕SE.Dyalog.Array.Deserialise w
→0
:EndIf
⍝ If Deserialise is not available in ⎕SE, the code below was lifted from the qSE repository commit 67a9ca1
⍝ Rather than embed the entirety of the Array namespace, just use Deserialise and the bits it depends on
DEBUG←0
sysVars←'⎕CT' '⎕DIV' '⎕IO' '⎕ML' '⎕PP' '⎕RL' '⎕RTL' '⎕WX' '⎕USING' '⎕AVU' '⎕DCT' '⎕FR'
Num←2|⎕DR
FirstNum←Num¨⊃⍤/⊢
FirstNs←{9∊⎕NC'⍵'}¨⊃⍤/⊢
⍝ Deserialise code follows
r←a{ ⍝ Convert text to array
⍺←⍬ ⍝ 1=safe exec expr; 0=return expr; ¯1=unsafe exec expr; ¯2=force APL model
(model beSafe execute)←(¯2∘=,0∘⌈,1⌊|)FirstNum ⍺,1
caller←FirstNs ⍺,⊃⎕RSI
⍝ Make normalised simple vector:
w←↓⍣(2=≢⍴⍵)⊢⍵                  ⍝ if mat, make nested
w←{¯1↓∊⍵,¨⎕UCS 13}⍣(2=|≡w)⊢w   ⍝ if nested, make simple
beSafe>Safe w:⎕SIGNAL⊂('EN' 11)('Message' 'Unsafe array notation')
⍝ fall back to APL model on error
⍝ model<execute∧'AIX'≢3↑⊃# ⎕WG'APLVersion':caller ∇{2::⍵ ⍺⍺⍨¯2,⍺ ⋄ ⍺ ∆APLAN,⍵}w
q←''''
⎕IO←0
SEP←'⋄',⎕UCS 10 13
Unquot←{(⍺⍺ ⍵)×~≠\q=⍵}
SepMask←∊∘SEP Unquot
ParenLev←+\(×¯3+7|¯3+'([{)]}'∘⍳)Unquot
Paren←1⌽')(',⊢
Split←{1↓¨⍺⍺⊂Over(1∘,)⍵}
Over←{(⍵⍵ ⍺)⍺⍺(⍵⍵ ⍵)}
EachIfAny←{0=≢⍵:⍵ ⋄ ⍺ ⍺⍺¨⍵}
EachNonempty←{⍺ ⍺⍺ EachIfAny Over((×≢¨⍵~¨' ')/⊢)⍵}
Parse←{
0=≢⍵:''
bot←0=⍺
(2≤≢⍵)>∨/¯1↓bot:⍺ SubParse ⍵
p←bot×SepMask ⍵
∨/p:∊{1=≢⍵:',⊂',⍵ ⋄ ⍵}⍺(Paren ∇)EachNonempty Over(p Split)⍵
p←2(1,>/∨¯1↓0,</)bot
∨/1↓p:∊(p⊂⍺)∇¨p⊂⍵
⍵
}
ErrIfEmpty←{⍵⊣'Array doesn''t have a prototype'⎕SIGNAL 11/⍨(0=≢⍵)}
SubParse←{
('})]'⍳⊃⌽⍵)≠('{(['⍳⊃⍵):'Bad bracketing'⎕SIGNAL 2
(a w)←(1↓¯1∘↓)¨(⍺-1)⍵
'['=⊃⍵:Paren'{⎕ML←1⋄↑⍵}1/¨',Paren ErrIfEmpty a Parse w ⍝ high-rank
':'∊⍵/⍨(1=⍺)×~≠\q=⍵:a Namespace w ⍝ ns
'('=⊃⍵:Paren{⍵,'⎕NS⍬'/⍨0=≢⍵}a Parse w ⍝ vector/empty ns
⍵ ⍝ dfn
}
SysVar←(⎕C sysVars)∊⍨' '~¨⍨⎕C∘⊆
ParseLine←{
c←⍵⍳':'
1≥≢(c↓⍵)~' ':'Missing value'⎕SIGNAL 6
name←c↑⍵
(SysVar⍱¯1≠⎕NC)name:'Invalid name'⎕SIGNAL 2
name(name,'←',⍺ Parse Over((c+1)↓⊢)⍵)
}
Namespace←{
p←(0=⍺)×SepMask ⍵
(names assns)←↓⍉↑⍺ ParseLine EachNonempty Over(p Split)⍵
quadMask←SysVar names
quadAssns←'{⍵.(⍵',(∊'⊣',¨quadMask/assns),')}'
names/⍨←~quadMask
assns/⍨←~quadMask
names,←(0=≢names)/⊂''
∊'({'(assns,¨'⋄')quadAssns'⎕NS'('(, '∘,¨q,¨names,¨⊂q')')'}⍬)'
}
Execute←{   ⍝ overcome LIMIT ERROR on more than 4096 parenthesised expressions
ExecuteEach←{         ⍝ split at level-1 parentheses and execute each
l←(t=¯1)++\t←{1 ¯1 0['()'⍳⍵]}Unquot ⍵ ⍝ parenthesis type and level
(h x t l)←(1 0 0 0=⊂∧\l=0)/¨⍵ ⍵ t l   ⍝ extract header before first opening parenthesis
⍺{0::0 ⋄ r←⍺⍎⍵ ⋄ ~(⊃⎕NC'r')∊3 4}h:⍺⍎⍵ ⍝ header must be an functional expression
H←⍺{⍺⍺⍎⍵⍵,'⍵'}h                       ⍝ function to apply header to array
' '∨.≠(l=0)/x:⍺⍎⍵                     ⍝ something outside level-1 parentheses - must fall back to ⍎
x←(((l>0)∧(l≠1)∨(t=0))×+\(t=1)∧(l=1))⊆x   ⍝ cut expression within level-1 parentheses
1=≢x:H ⍺ ∇⊃x                          ⍝ single expression : don't enclose with ¨
DEBUG∧1<⌈/l:H ⍺ ∇¨x                    ⍝ force going through the hard code
10::H ⍺ ∇¨x ⋄ H ⍺⍎¨x                  ⍝ attempt to ⍎¨ with a single guard - otherwise dig each
}
DEBUG:⍺ ExecuteEach ⍵           ⍝ force going through the hard code
10::⍺ ExecuteEach ⍵ ⋄ ⍺⍎⍵       ⍝ attempt simple ⍎ and catch LIMIT ERROR
}
w←'''[^'']*''' '⍝.*'⎕R'&' ''⊢w ⍝ strip comments
w/⍨←{(∨\⍵)∧⌽∨\⌽⍵}33≤⎕UCS w     ⍝ strip leading/trailing non-printables
pl←ParenLev w
(0≠⊢/pl)∨(∨/0>pl):'Unmatched brackets'⎕SIGNAL 2
∨/(pl=0)×SepMask w:'Multi-line input'⎕SIGNAL 11
caller Execute⍣execute⊢pl Parse w ⍝ materialise namespace as child of calling namespace
}w
∇
:EndSection
:Section HTML
∇ r←ScriptFollows
⍝ return the subsequent block of comments as a text script
r←{⍵/⍨'⍝'≠⊃¨⍵}{1↓¨⍵/⍨∧\'⍝'=⊃¨⍵}{⍵{((∨\⍵)∧⌽∨\⌽⍵)/⍺}' '≠⍵}¨(1+2⊃⎕LC)↓↓(180⌶)2⊃⎕XSI
r←2↓∊(⎕UCS 13 10)∘,¨r
∇
∇ r←{path}EndPoints ref;ns
:Access public
:If 0=⎕NC'path' ⋄ path←''
:Else ⋄ path,←'.'
:EndIf
r←path∘,¨{(⊂'')~⍨⍵.{⍵/⍨1 1 0≡×|⎕IO⊃⎕AT ⍵}¨⍵.⎕NL ¯3}ref ⍝ limit to result-returning monadic/dyadic/ambivalent functions
:For ns :In ref.⎕NL ¯9.1
r,←(path,ns)EndPoints ref⍎ns
:EndFor
∇
∇ r←HtmlPage;endpoints
:Access public
r←ScriptFollows
⍝<!DOCTYPE html>
⍝<html>
⍝<head>
⍝<meta content="text/html; charset=utf-8" http-equiv="Content-Type">
⍝<link rel="icon" href="data:,">
⍝<title>Jarvis</title>
⍝ <style>
⍝   body {color:#000000;background-color:white;font-family:Verdana;margin-left:0px;margin-top:0px;}
⍝   button {display:inline-block;font-size:1.1em;}
⍝   legend {font-size:1.1em;}
⍝   select {font-size:1.1em;}
⍝   label  {display:inline-block;margin-bottom:7px;}
⍝   div {padding:5px;}
⍝   label input textarea button #result {display:flex;}
⍝   textarea {width:100%;font-size:18px;}
⍝   #result {font-size:18px;}
⍝   #result code {white-space:pre-line;word-wrap:break-word;}
⍝ </style>
⍝</head>
⍝<body>
⍝<div id="content">
⍝<fieldset>
⍝  <legend>Request</legend>
⍝  <form id="myform">
⍝    <div>
⍝      <label for="function">Endpoint:</label>
⍝      ⍠
⍝    </div>
⍝    <div>
⍝      <label for="payload">JSON Payload:</label>
⍝      <textarea id="payload" name="payload"></textarea>
⍝    </div>
⍝    <div>
⍝      <button onclick="doit()" type="button">Send</button>
⍝    </div>
⍝  </form>
⍝</fieldset>
⍝<fieldset>
⍝  <legend>Response</legend>
⍝  <div id="result">
⍝  </div>
⍝</fieldset>
⍝<script>
⍝function doit() {
⍝  document.getElementById("result").innerHTML = "";
⍝  var payload = document.getElementById("payload").value;
⍝  if (0 == payload.length) {
⍝    document.getElementById("result").innerHTML = "<span style='color:red;'>Please enter a valid JSON payload</span>";
⍝    } else {
⍝    var xhttp = new XMLHttpRequest();
⍝    var fn = document.getElementById("function").value;
⍝    fn = (0 == fn.indexOf('/')) ? fn : '/' + fn;
⍝
⍝    xhttp.open("POST", fn, true);
⍝    xhttp.setRequestHeader("content-type", "application/json; charset=utf-8");
⍝
⍝    xhttp.onreadystatechange = function() {
⍝      if (this.readyState == 4){
⍝        if (this.status == 200) {
⍝          try {
⍝            var resp = "<pre><code>" + JSON.stringify(JSON.parse(this.responseText)) + "</code></pre>";;
⍝          }
⍝          catch(err) {
⍝            var resp = "<pre><code>" + this.responseText + "</code></pre>";
⍝          }
⍝        } else {
⍝          var resp = "<span style='color:red;'>" + this.statusText + "</span> <pre><code>" + this.responseText + "</code></pre>";
⍝        }
⍝        document.getElementById("result").innerHTML = resp;
⍝      }
⍝    }
⍝    xhttp.send(document.getElementById("payload").value);
⍝  }
⍝}
⍝</script>
⍝</div>
⍝</body>
⍝</html>
endpoints←{⍵/⍨0=CheckFunctionName ⍵}EndPoints CodeLocation
:If 0∊⍴endpoints
endpoints←'<b>No Endpoints Found</b>'
:Else
endpoints←∊{'<option value="',⍵,'">',⍵,'</option>'}¨'/'@('.'=⊢)¨endpoints
endpoints←'<select id="function" name="function">',endpoints,'</select>'
:EndIf
r←endpoints{i←⍵⍳'⍠' ⋄ ((i-1)↑⍵),⍺,i↓⍵}r
r←⎕UCS'UTF-8'⎕UCS r
∇
:EndSection
:EndClass
﻿ Run;getEnv;JARVIS
⍝ Run function suitable for use with LOAD=$JARVIS/Source
getEnv←{2 ⎕NQ '.' 'GetEnvironment' ⍵}
:If 0∊⍴getEnv 'AttachDebugger'
Server←AutoStart
:Else
⎕←'Autostart not run because AttachDebugger was set'
:EndIf
﻿ Updates;t;n;commits
⍝ check up to last 5 updates to repository
:Trap 0
t←HttpCommand.Get'http://api.github.com/repos/Dyalog/Jarvis/commits'
n←5⌊≢commits←⎕JSON t.Data ⍝ last commit should be for this workspace
⎕←'The last ',(⍕n),' commits to repository http://github.com/Dyalog/DServer are:'
⎕←'Date' 'Description'⍪↑(n↑commits).commit.(author.date(↑message((~∊)⊆⊣)⎕UCS 13 10))
:Else
⎕←'!! unable to check updates - ',⍕2↑⎕DM
:EndTrap
﻿ r←PickCert store;certs
r←⍬
:If 0∊⍴store ⋄ store←'My' ⋄ :EndIf
:If 'W'=⊃3⊃#.⎕WG'APLVersion'
:If ~0∊⍴certs←#.DRC.X509Cert.ReadCertFromStore'My'
⎕←'Select a certificate:'
⎕←(⍳≢certs),⍪certs.Formatted.Subject
:Trap 0
r←⎕⊃certs
:Else
⎕←'No certificate selected'
:EndTrap
:Else
⎕←'No certificates in your Windows certificate store'
:EndIf
:Else
⎕←'This can run on Windows only.'
:EndIf
﻿ TestSecure pathToJSONServer
:If 0=⎕NC'JSONServer'
⎕SE.SALT.Load pathToJSONServer,'/Source/JSONServer.dyalog'
:EndIf
⎕SE.SALT.Load pathToJSONServer,'/Sample/GetSign*.dyalog'
js←⎕NEW JSONServer
dyalog←2 ⎕NQ'.' 'GetEnvironment' 'Dyalog'
js.Secure←1
js.SSLValidation←64 ⍝ request, but do not require a certificate
js.RootCertDir←dyalog,'\TestCertificates\Ca\'
js.ServerCertFile←dyalog,'\TestCertificates\Server\localhost-cert.pem'
js.ServerKeyFile←dyalog,'\TestCertificates\Server\localhost-key.pem'
⎕FX↑'r←ValidateRequest req' 'r←0' ':if ~0∊⍴req.PeerCert ⋄ ''Subject'' ''Valid From'' ''Valid To'',⍪⊃req.PeerCert.Formatted.(Subject ValidFrom ValidTo) ⋄ :EndIf '
js.Start
⎕←(⎕UCS 13),'⍝ To test using HttpCommand:'
⎕←'⍝ Make sure you have HttpCommand.Version 2.1.17 or later.'
⎕←'      d←2 ⎕NQ ''.'' ''GetEnvironment'' ''dyalog'''
⎕←'      key←d,''/TestCertificates/client/John Doe-key.pem'''
⎕←'      cert←d,''/TestCertificates/client/John Doe-cert.pem'''
⎕←'      r←HttpCommand.GetJSON''post'' ''localhost:8080/GetSign''(2,23)''''(cert key)'
r←Authenticate req
:If ∨/'nologinneeded'⍷req.Endpoint
→r←0
:EndIf
:If ∨/'payloadcreds'⍷req.Endpoint
→0⊣r←~('uid'≡req.Payload.UserID)∧'pwd'≡req.Payload.Password
:EndIf
r←~('uid'≡req.UserID)∧'pwd'≡req.Password
r←loginneeded arg
r←(⊃⎕SI)arg
﻿ r←nologinneeded arg
r←(⊃⎕SI)arg
r←payloadcreds arg
r←(⊃⎕SI)arg
﻿ r←Excluded data
⍝ this demo function should not be able to be called with ExcludeFns set to '[A-Z].*'
r←'This function would be excluded if ExcludeFns had [A-Z].*'
﻿:Namespace loans
∇ r←payment npr
⍝ npr - [1] principal, [2] rate %, [3] term in years
r←{0::'Error' ⋄ p r n←⍵÷1 1200(÷12) ⋄ 0.01×⌈100×p×r÷1-(1+r)*-n}npr
∇
∇ r←afford_ns ns
⍝ returns array of what you can afford based on rates using a namespace
⍝ ns.rates - vector of rates (%)
⍝ ns.terms - vector of terms in years
⍝ ns.payments - desired payment
r←{0::'Error' ⋄ r n m←⍵÷1200(÷12)1 ⋄ 0.01×⌈100×m∘.÷r(÷⍤¯1)1-(1+r)∘.*-n}ns.(rates terms payments)
∇
∇ r←afford(rates terms payments)
⍝ returns array of what you can afford based on rates
⍝ rates - vector of rates (%)
⍝ terms - vector of terms in years
⍝ payments - desired payment
r←{0::'Error' ⋄ r n m←⍵÷1200(÷12)1 ⋄ 0.01×⌈100×m∘.÷r(÷⍤¯1)1-(1+r)∘.*-n}rates terms payments
∇
⍝ the functions below exist solely as test cases for different function syntaxes to be called by _Run
∇ niladic
⎕←(⊃⎕XSI),' called'
∇
∇ r←niladic_result
⎕←(⊃⎕XSI),' called'
r←'niladic_result result'
∇
∇ monadic rarg
⎕←(⊃⎕XSI),' called'
∇
∇ r←monadic_result rarg
⎕←(⊃⎕XSI),' called'
r←'monadic_result result'
∇
∇ larg dyadic rarg
⎕←(⊃⎕XSI),' called'
∇
∇ r←larg dyadic_result rarg
⎕←(⊃⎕XSI),' called'
r←'dyadic_result result'
∇
:EndNamespace
﻿:Class loansclass
:field public rates←5 6
:field public terms←10 15 20 30
:field public principals←100000 150000 200000
∇ make
:Access public
:Implements constructor
∇
∇ make1 ns;name
:Access public
:Implements constructor
:For name :In ns.⎕NL ¯2
:Select name
:Case 'rates'
rates←ns.rates
:Case 'terms'
terms←ns.rates
:Case 'principals'
principals←ns.rates
:EndSelect
:EndFor
∇
∇ r←payments
:Access public
⍝ return array of payments for principals ∘. rates ∘. terms
r←{0::'Error' ⋄ p r n←⍵÷1 1200(÷12) ⋄ 0.01×⌈100×p∘.×r(÷⍤¯1)1-(1+r)∘.*-n}principals rates terms
∇
⍝ the methods below exist to be able to test the ability to execute methods of any syntax using _Run
∇ niladic
:Access public
⎕←(⊃⎕XSI),' called'
∇
∇ r←niladic_result
:Access public
⎕←(⊃⎕XSI),' called'
r←'niladic_result result'
∇
∇ monadic rarg
:Access public
⎕←(⊃⎕XSI),' called'
∇
∇ r←monadic_result rarg
:Access public
⎕←(⊃⎕XSI),' called'
r←'monadic_result result'
∇
∇ larg dyadic rarg
:Access public
⎕←(⊃⎕XSI),' called'
∇
∇ r←larg dyadic_result rarg
:Access public
⎕←(⊃⎕XSI),' called'
r←'dyadic_result result'
∇
:EndClass
﻿ r←reverse data
r←⌽data
﻿:Class testClass
:Field public field1
:Field _prop1←'prop1 value'
:Property prop1
:Access public
∇ r←Get
r←_prop1
∇
∇ Set arg
_prop1←arg.NewValue
∇
:EndProperty
∇ make
:Access public
:Implements constructor
field1←'default'
∇
∇ make1 arg
:Access public
:Implements constructor
field1←arg
∇
∇ niladic
:Access public
∇
∇ r←niladic_result
:Access public
(r←⎕NS'').result←'Result from niladic_result'
∇
∇ monadic rarg
:Access public
∇
∇ r←monadic_result rarg
:Access public
(r←⎕NS'').(result rarg)←'Result from monadic_result'rarg
∇
∇ larg dyadic rarg
:Access public
∇
∇ r←larg dyadic_result rarg
:Access public
(r←⎕NS'').(result larg rarg)←'Result from dyadic_result'larg rarg
∇
:EndClass
﻿ r←req Add arg
⍝ arg is an integer array
req.Session.Sum+←+/arg
r←req.Session.Sum
InitializeSession req
⍝ initializes the session
req.Session.Sum←0
∇ r←req Subtract arg
⍝ arg is an integer array
req.Session.Sum-←+/arg
r←req.Session.Sum
∇
﻿ r←setup dummy;home
⍝ Setup test
⎕IO←⎕ML←1
r←''
:Trap (~##.halt)/0
home←##.TESTSOURCE  ⍝ hopefully good enough...
{}#.⎕FIX 'file://',home,'../Source/JSONServer.dyalog'
{}⎕SE.SALT.Load 'HttpCommand'
:Else
r←,⍕⎕DM
:EndTrap
﻿ r←teardown dummy
r←''
{}#.⎕EX'JSONServer' 'HttpCommand'
﻿ r←test_KillOnDisconnect;threads;j;h
j←Jarvis.New''
⎕FX'∇r←req killMe payload' 'req.KillOnDisconnect←1' 'r←⎕DL 30' '∇'
⎕FX'∇r←req doNotKillMe payload' 'r←⎕DL 30' '∇'
j.Start
h←HttpCommand.New'post'
h.Params←''
h.BaseURL←'localhost:',⍕j.Port
h.ContentType←'application/json'
h.Timeout←5
h.URL←'killMe'
h.Run
⎕DL 5
threads←≢⎕TNUMS
h.URL←'doNotKillMe'
h.Run
⎕DL 5
threads,←≢⎕TNUMS
j.Stop
⎕EX'killMe' 'doNotKillMe'
r←(>/threads)/
﻿ (rc msg)←test_sessions;l;path
:If '⍝∇⍣§'≡4↑l←⊃⊢/⎕NR'test_sessions'
path←⊃1 ⎕NPARTS 2⊃'§'(≠⊆⊢)l
⎕SE.SALT.Load path,'../Source/DServer.dyalog'
⎕SE.SALT.Load'HttpCommand'
HttpCommand.Upgrade
ds←⎕NEW DServer
ds.CodeLocation←path,'sessions/'
ds.SessionInitFn←'InitializeSession'
ds.AuthenticateFn←'Login'
ds.Paradigm←'REST'
ds.Debug←2
ds.(SessionTimeout SessionPollingTime SessionCleanupTime)←30 0.5 5
:If 0=⊃(rc msg)←ds.Start
c←⎕NEW HttpCommand
c.URL←'localhost:8080/Login'
'content-type'c.SetHeader'application/json'
c.Params←{t←⎕NS'' ⋄ t⊣t.(UserID Password)←⍵}'user' 'password'
c.WaitTime←600
c.Command←'post'
r←c.Run
∘∘∘
:EndIf
:Else
(rc msg)←¯1 'No SALT source file information found!'
:EndIf﻿:Class APLProcess
⍝ Start (and eventually dispose of) a Process
(⎕IO ⎕ML)←1 1
:Field Public Args←''
:Field Public Ws←''
:Field Public Exe←''
:Field Public Proc←⎕NS ''
:Field Public onExit←''
:Field Public RunTime←0    ⍝ Boolean or name of runtime executable
:Field Public IsWin←0
:Field Public IsSsh←0
:Field Public RIDE_INIT←'' ⍝ RIDE parameters if remote debugging is to be allowed
endswith←{w←,⍵ ⋄ a←,⍺ ⋄ w≡(-(⍴a)⌊⍴w)↑a}
tonum←{⊃⊃(//)⎕VFI ⍵}
eis←{2>|≡⍵:,⊂⍵ ⋄ ⍵} ⍝ enclose if simple
∇ path←SourcePath;source
⍝ Determine the source path of the class
:Trap 6
source←⍎'(⊃⊃⎕CLASS ⎕THIS).SALT_Data.SourceFile' ⍝ ⍎ works around a bug
:Else
:If 0=⍴source←{((⊃¨⍵)⍳⊃⊃⎕CLASS ⎕THIS)⊃⍵,⊂''}5177⌶⍬
source←⎕WSID
:Else ⋄ source←4⊃source
:EndIf
:EndTrap
path←{(-⌊/(⌽⍵)⍳'\/')↓⍵}source
∇
∇ make1 args;rt;cmd;ws
:Access Public Instance
:Implements Constructor
⍝ args is:
⍝  [1]  the workspace to load
⍝  [2]  any command line arguments
⍝ {[3]} if present, a Boolean indicating whether to use the runtime version, OR a character vector of the executable name to run
args←{2>|≡⍵:,⊂⍵ ⋄ ⍵}args
args←3↑args,(⍴args)↓'' '' 0
(ws cmd rt)←args
PATH←SourcePath
Start(ws cmd rt)
∇
∇ Run
:Access Public Instance
Start(Ws Args RunTime)
∇
∇ Start(ws args rt);psi;pid;cmd;host;port;keyfile;exe
(Ws Args)←ws args
:If 0≠⍴RIDE_INIT
args←args,' RIDE_SPAWNED=1 RIDE_INIT=',RIDE_INIT
:EndIf
:If ~0 2 6∊⍨10|⎕DR rt ⍝ if rt is character or nested, it defines what to start
Exe←(RunTimeName⍣rt) GetCurrentExecutable ⍝ else, deduce it
:Else
Exe←rt
rt←0
:EndIf
:If IsWin←IsWindows∧~IsSsh←326=⎕DR Exe
⎕USING←'System,System.dll'
psi←⎕NEW Diagnostics.ProcessStartInfo,⊂Exe(ws,' ',args)
psi.WindowStyle←Diagnostics.ProcessWindowStyle.Minimized
Proc←Diagnostics.Process.Start psi
:Else ⍝ Unix
:If IsSsh
(host port keyfile exe)←Exe
cmd←args,' ',exe,' -q +s ',ws
Proc←SshProc host port keyfile cmd
:Else
pid←_SH'{ ',args,' ',Exe,' +s ',ws,' -c APLppid=',(⍕GetCurrentProcessId),' </dev/null >/dev/null 2>&1 & } ; echo $!'
Proc.Id←pid
Proc.HasExited←HasExited
:EndIf
Proc.StartTime←⎕NEW Time ⎕TS
:EndIf
∇
∇ Close;count;limit
:Implements Destructor
WaitForKill&200 0.1 ⍝ Start a new thread to do the dirty work
∇
∇ WaitForKill(limit interval);count
:If (0≠⍴onExit)∧~HasExited ⍝ If the process is still alive
:Trap 0 ⋄ ⍎onExit ⋄ :EndTrap ⍝ Try this
count←0
:While ~HasExited
{}⎕DL interval
count←count+1
:Until count>limit
:EndIf ⍝ OK, have it your own way
{}Kill Proc
∇
∇ r←IsWindows
:Access Public Shared
r←'Win'≡3↑⎕IO⊃#.⎕WG'APLVersion'
∇
∇ r←GetCurrentProcessId;t
:Access Public Shared
:If IsWin
r←⍎'t'⎕NA'U4 kernel32|GetCurrentProcessId'
:ElseIf IsSsh
r←Proc.Pid
:Else
r←tonum⊃_SH'echo $PPID'
:EndIf
∇
∇ r←GetCurrentExecutable;⎕USING;t;gmfn
:Access Public Shared
:If IsWindows
r←''
:Trap 0
'gmfn'⎕NA'U4 kernel32|GetModuleFileName* P =T[] U4'
r←⊃⍴/gmfn 0(1024⍴' ')1024
:EndTrap
:If 0∊⍴r
⎕USING←'System,system.dll'
r←2 ⎕NQ'.' 'GetEnvironment' 'DYALOG'
r←r,(~(¯1↑r)∊'\/')/'/' ⍝ Add separator if necessary
r←r,(Diagnostics.Process.GetCurrentProcess.ProcessName),'.exe'
:EndIf
:ElseIf IsSsh
∘∘∘ ⍝ Not supported
:Else
t←⊃_PS'-o args -p ',⍕GetCurrentProcessId ⍝ AWS
:If '"'''∊⍨⊃t  ⍝ if command begins with ' or "
r←{⍵/⍨{∧\⍵∨≠\⍵}⍵=⊃⍵}t
:Else
r←{⍵↑⍨¯1+1⍳⍨(¯1↓0,⍵='\')<⍵=' '}t ⍝ otherwise find first non-escaped space (this will fail on files that end with '\\')
:EndIf
:EndIf
∇
∇ r←RunTimeName exe
⍝ Assumes that:
⍝ Windows runtime ends in "rt.exe"
⍝ *NIX runtime ends in ".rt"
r←exe
:If IsWin
:If 'rt.exe'≢¯6↑{('rt.ex',⍵)[⍵⍳⍨'RT.EX',⍵]}exe ⍝ deal with case insensitivity
r←'rt.exe',⍨{(~∨\⌽<\⌽'.'=⍵)/⍵}exe
:EndIf
:Else
r←exe,('.rt'≢¯3↑exe)/'.rt'
:EndIf
∇
∇ r←KillChildren Exe;kids;⎕USING;p;m;i;mask
:Access Public Shared
⍝ returns [;1] pid [;2] process name of any processes that were not killed
r←0 2⍴0 ''
:If ~0∊⍴kids←ListProcesses Exe ⍝ All child processes using the exe
:If IsWin
⎕USING←'System,system.dll'
p←Diagnostics.Process.GetProcessById¨kids[;1]
p.Kill
⎕DL 1
:If 0≠⍴p←(~p.HasExited)/p
⎕DL 1
p.Kill
⎕DL 1
:If ∨/m←~p.HasExited
r←(kids[;1]∊m/p.Id)⌿kids
:EndIf
:EndIf
:ElseIf IsSsh
∘∘∘
:Else
mask←(⍬⍴⍴kids)⍴0
:For i :In ⍳⍴mask
mask[i]←Shoot kids[i;1]
:EndFor
r←(~mask)⌿kids
:EndIf
:EndIf
∇
∇ r←{all}ListProcesses procName;me;⎕USING;procs;unames;names;name;i;pn;kid;parent;mask;n
:Access public shared
⍝ returns either my child processes or all processes
⍝ procName is either '' for all children, or the name of a process
⍝ r[;1] - child process number (Id)
⍝ r[;2] - child process name
me←GetCurrentProcessId
r←0 2⍴0 ''
procName←,procName
all←{6::⍵ ⋄ all}0 ⍝ default to just my childen
:If IsWin
⎕USING←'System,system.dll'
:If 0∊⍴procName ⋄ procs←Diagnostics.Process.GetProcesses''
:Else ⋄ procs←Diagnostics.Process.GetProcessesByName⊂procName ⋄ :EndIf
:If all
r←↑procs.(Id ProcessName)
r⌿⍨←r[;1]≠me
:Else
:If 0<⍴procs
unames←∪names←procs.ProcessName
:For name :In unames
:For i :In ⍳n←1+.=(,⊂name)⍳names
pn←name,(n≠1)/'#',⍕i
:Trap 0 ⍝ trap here just in case a process disappeared before we get to it
parent←⎕NEW Diagnostics.PerformanceCounter('Process' 'Creating Process Id'pn)
:If me=parent.NextValue
kid←⎕NEW Diagnostics.PerformanceCounter('Process' 'Id Process'pn)
r⍪←(kid.NextValue)name
:EndIf
:EndTrap
:EndFor
:EndFor
:EndIf
:EndIf
:ElseIf IsSsh
∘∘∘
:Else ⍝ Linux
⍝ unfortunately, Ubuntu (and perhaps others) report the PPID of tasks started via ⎕SH as 1
⍝ so, the best we can do at this point is identify processes that we tagged with ppid=
mask←' '∧.=procs←' ',↑_PS'-eo pid,cmd',((~all)/' | grep APLppid=',(⍕GetCurrentProcessId)),(0<⍴procName)/' | grep ',procName,' | grep -v grep' ⍝ AWS
mask∧←2≥+\mask
procs←↓¨mask⊂procs
mask←me≠tonum¨1⊃procs ⍝ remove my task
procs←mask∘/¨procs[1 2]
mask←1
:If 0<⍴procName
mask←∨/¨(procName,' ')∘⍷¨(2⊃procs),¨' '
:EndIf
mask>←∨/¨'grep '∘⍷¨2⊃procs ⍝ remove procs that are for the searches
procs←mask∘/¨procs
r←↑[0.1]procs
:EndIf
∇
∇ r←Kill;delay
:Access Public Instance
r←0 ⋄ delay←0.1
:Trap 0
:If IsWin
Proc.Kill
:Repeat
⎕DL delay
delay+←delay
:Until (delay>10)∨Proc.HasExited
:ElseIf IsSsh
∘∘∘
:Else ⍝ Local UNIX
{}UNIXIssueKill 3 Proc.Id ⍝ issue strong interrupt
{}⎕DL 2 ⍝ wait a couple seconds for it to react
:If ~Proc.HasExited←~UNIXIsRunning Proc.Id
{}UNIXIssueKill 9 Proc.Id ⍝ issue strong interrupt
{}⎕DL 2 ⍝ wait a couple seconds for it to react
:AndIf ~Proc.HasExited←~UNIXIsRunning Proc.Id
:Repeat
⎕DL delay
delay+←delay
:Until (delay>10)∨Proc.HasExited~UNIXIsRunning Proc.Id
:EndIf
:EndIf
r←Proc.HasExited
:EndTrap
∇
∇ r←Shoot Proc;MAX;res
MAX←100
r←0
:If 0≠⎕NC⊂'Proc.HasExited'
:Repeat
:If ~Proc.HasExited
:If IsWin
Proc.Kill
⎕DL 0.2
:ElseIf IsSsh
∘∘∘
:Else
{}UNIXIssueKill 3 Proc.Id ⍝ issue strong interrupt AWS
{}⎕DL 2 ⍝ wait a couple seconds for it to react
:If ~Proc.HasExited←0∊⍴res←UNIXGetShortCmd Proc.Id       ⍝ AWS
Proc.HasExited∨←∨/'<defunct>'⍷⊃,/res
:EndIf
:EndIf
:EndIf
MAX-←1
:Until Proc.HasExited∨MAX≤0
r←Proc.HasExited
:ElseIf 2=⎕NC'Proc' ⍝ just a process id?
{}UNIXIssueKill 9 Proc.Id
{}⎕DL 2
r←~UNIXIsRunning Proc.Id  ⍝ AWS
:EndIf
∇
∇ r←HasExited
:Access public instance
:If IsWin∨IsSsh
r←{0::⍵ ⋄ Proc.HasExited}1
:Else
r←~UNIXIsRunning Proc.Id ⍝ AWS
:EndIf
∇
∇ r←IsRunning args;⎕USING;start;exe;pid;proc;diff;res
:Access public shared
⍝ args - pid {exe} {startTS}
r←0
args←eis args
(pid exe start)←3↑args,(⍴args)↓0 ''⍬
:If IsWin
⎕USING←'System,system.dll'
:Trap 0
proc←Diagnostics.Process.GetProcessById pid
r←1
:Else
:Return
:EndTrap
:If ''≢exe
r∧←exe≡proc.ProcessName
:EndIf
:If ⍬≢start
:Trap 90
diff←|-/#.DFSUtils.DateToIDN¨start(proc.StartTime.(Year Month Day Hour Minute Second Millisecond))
r∧←diff≤24 60 60 1000⊥0 1 0 0÷×/24 60 60 1000 ⍝ consider it a match within a 1 minute window
:Else
r←0
:EndTrap
:EndIf
:ElseIf IsSsh
∘∘∘
:Else
r←UNIXIsRunning pid
:EndIf
∇
∇ r←Stop pid;proc
:Access public shared
⍝ attempts to stop the process with processID pid
:If IsWin
⎕USING←'System,system.dll'
:Trap 0
proc←Diagnostics.Process.GetProcessById pid
:Else
r←1
:Return
:EndTrap
proc.Kill
{}⎕DL 0.5
r←~##.APLProcess.IsRunning pid
:ElseIf IsSsh
∘∘∘
:ElseIf
{}UNIXIssueKill 3 pid ⍝ issue strong interrupt
:EndIf
∇
∇ r←UNIXIsRunning pid;txt
⍝ Return 1 if the process is in the process table and is not a defunct
r←0
→(r←' '∨.≠txt←UNIXGetShortCmd pid)↓0
r←~∨/'<defunct>'⍷txt
∇
∇ {r}←UNIXIssueKill(signal pid)
signal pid←⍕¨signal pid
cmd←'kill -',signal,' ',pid,' >/dev/null 2>&1 ; echo $?'
:If IsSsh
∘∘∘
:Else
r←⎕SH cmd
:EndIf
∇
∇ r←UNIXGetShortCmd pid;cmd
⍝ Retrieve sort form of cmd used to start process <pid>
cmd←'ps -o cmd -p ',(⍕pid),' 2>/dev/null ; exit 0'
:If IsSsh
∘∘∘
:Else
r←⊃1↓⎕SH cmd
:EndIf
∇
∇ r←_PS cmd;ps
ps←'ps ',⍨('AIX'≡3↑⊃'.'⎕WG'APLVersion')/'/usr/sysv/bin/'    ⍝ Must use this ps on AIX
r←1↓⎕SH ps,cmd,' 2>/dev/null; exit 0'                  ⍝ Remove header line
∇
∇ r←{quietly}_SH cmd
:Access public shared
quietly←{6::⍵ ⋄ quietly}0
:If quietly
cmd←cmd,' </dev/null 2>&1'
:EndIf
r←{0::'' ⋄ ⎕SH ⍵}cmd
∇
:Class Time
:Field Public Year
:Field Public Month
:Field Public Day
:Field Public Hour
:Field Public Minute
:Field Public Second
:Field Public Millisecond
∇ make ts
:Implements Constructor
:Access Public
(Year Month Day Hour Minute Second Millisecond)←7↑ts
⎕DF(⍕¯2↑'00',⍕Day),'-',((12 3⍴'JanFebMarAprMayJunJulAugSepOctNovDec')[⍬⍴Month;]),'-',(⍕100|Year),' ',1↓⊃,/{':',¯2↑'00',⍕⍵}¨Hour Minute Second
∇
:EndClass
∇ r←ProcessUsingPort port;t
⍝ return the process ID of the process (if any) using a port
:Access public shared
r←⍬
:If IsWin
:If ~0∊⍴t←_SH'netstat -a -n -o'
:AndIf ~0∊⍴t/⍨←∨/¨'LISTENING'∘⍷¨t
:AndIf ~0∊⍴t/⍨←∨/¨((':',⍕port),' ')∘⍷¨t
r←∪∊¯1↑¨(//)∘⎕VFI¨t
:EndIf
:Else
:If ~0∊⍴t←_SH'netstat -l -n -p 2>/dev/null | grep '':',(⍕port),' '''
r←∪∊{⊃(//)⎕VFI{(∧\⍵∊⎕D)/⍵}⊃¯1↑{⎕ML←3 ⋄ (' '≠⍵)⊂⍵}⍵}¨t
:EndIf
:EndIf
∇
∇ r←MyDNSName;GCN
:Access Public Shared
:If IsWin
'GCN'⎕NA'I4 Kernel32|GetComputerNameEx* U4 >0T =U4'
r←2⊃GCN 7 255 255
:Return
⍝ ComputerNameNetBIOS = 0
⍝ ComputerNameDnsHostname = 1
⍝ ComputerNameDnsDomain = 2
⍝ ComputerNameDnsFullyQualified = 3
⍝ ComputerNamePhysicalNetBIOS = 4
⍝ ComputerNamePhysicalDnsHostname = 5
⍝ ComputerNamePhysicalDnsDomain = 6
⍝ ComputerNamePhysicalDnsFullyQualified = 7 <<<
⍝ ComputerNameMax = 8
:ElseIf IsSsh
∘∘∘ ⍝ Not supported
:ElseIf
r←⊃_SH'hostname'
:EndIf
∇
∇ Proc←SshProc(host user keyfile cmd);conn;z;kf;allpids;guid;listpids;pids;⎕USING;pid;tid
⎕USING←'Renci.SshNet,',PATH,'/Renci.SshNet.dll'
kf←⎕NEW PrivateKeyFile (,⊂keyfile)
conn←⎕NEW SshClient (host 22 user (,kf))
:Trap 0
conn.Connect    ⍝ This is defined to be a void()
:Case 90 ⋄ ('Error creating ssh client instance: ',⎕EXCEPTION.Message) ⎕SIGNAL 11
:Else ⋄ 'Unexpected error creating ssh client instance' ⎕SIGNAL 11
:EndTrap
listpids←{0~⍨2⊃(⎕UCS 10)⎕VFI (conn.RunCommand ⊂'ps -u ',user,' | grep dyalog | grep -v grep | awk ''{print $2}''').Result}
guid←'dyalog-ssh-',(⍕⎕TS)~' '
pids←listpids ⍬
Proc←⎕NS ''
Proc.SshConn←conn
Proc.HasExited←0
tid←{SshRun conn ⍵ Proc}&⊂cmd
Proc.tid←tid
⎕DL 1
:If 1=⍴pid←(listpids ⍬)~pids ⋄ pid←⊃pid
:Else ⋄ ∘∘∘ ⋄ :EndIf ⍝ failed to start
Proc.Pid←pid
∇
∇SshRun (conn cmd proc)
⍝ Wait until APL exits, then set HasExited←1
conn.RunCommand cmd
proc.HasExited←1
∇
:EndClass
﻿ BootServers dummy;port;getenv;getnum;path
⍝ Start a vecdb server process if VECDBSRV="config.json" PORT=nnnn
⍝         vecdb slave process if  VECDBSLAVE="file" SHARDS="n" PORT=nnnn
⎕←'Command Line:'
⎕←2 ⎕NQ'.' 'GetCommandLine'
getenv←{0=≢r←2 ⎕NQ'.' 'GetEnvironment'⍵:⍺ ⋄ r}
getnum←{⊃2⊃⎕VFI ⍵}
path←'file://',⊃⎕NPARTS ⎕WSID
VECDBSRV←0≠≢SRVDB←''getenv'VECDBSRV'
VECDBSLAVE←0≠≢VECDB←''getenv'VECDBSLAVE'
SHARDS←2⊃⎕VFI''getenv'SHARDS'
TOKEN←2⊃⎕VFI''getenv'TOKEN'
port←getnum''getenv'PORT'
2 ⎕FIX path,'APLProcess.dyalog'
2 ⎕FIX path,'vecdb.dyalog'
2 ⎕FIX path,'vecdbclt.dyalog'
2 ⎕FIX path,'vecdbsrv.dyalog'
2 ⎕FIX path,'vecdbslave.dyalog'
:If 0=⎕NC'DRC' ⍝ Get conga if necessary
'DRC'⎕CY'conga'getenv'CONGAWS'
:EndIf
:If 0=port
⎕←'See:'
'      ',2 ⎕FIX path,'TestVecdb.dyalog'
'      ',2 ⎕FIX path,'TestVecdbSrv.dyalog'
:Else
AUTOSHUT←1
{}1 ##.DRC.Init''
:If VECDBSRV ⋄ vecdbsrv.Start SRVDB port
:ElseIf VECDBSLAVE ⋄ vecdbslave.Start VECDB SHARDS port
:Else
⎕←'Invalid configuration...'
:EndIf
:EndIf
﻿ MakeBoot;Path
⍝ Built the "vecdbboot" workspace
Path←{(1-⌊/'/\'⍳⍨⌽⍵)↓⍵}4↓,¯1↑⎕CR⊃⎕SI
⎕SE.SALT.Load Path,'BootServers.dyalog'
⎕LX←'BootServers '''''
⎕←'Now please:'
⎕←'      ⎕EX ''MakeBoot'''
⎕←'      )WSID ',Path,'vecdbboot.dws'
⎕←'      )SAVE'
﻿:Namespace TestVecdb
⍝ Updated to version 0.2.6 with mapped columns
⍝ Call TestVecdb.Run '' to run all tests
⍝   assumes vecdb is loaded in #.vecdb
⍝   returns memory usage statistics (result of "memstats 0")
(⎕IO ⎕ML)←1 1
∇ z←Run selection;path;source;tests;i;TIMELOG;LOG;m
LOG←1
⎕FUNTIE ⎕FNUMS ⋄ ⎕NUNTIE ⎕NNUMS
:Trap 6 ⋄ source←SALT_Data.SourceFile
:Else ⋄ source←⎕WSID
:EndTrap
path←{(-⌊/(⌽⍵)⍳'\/')↓⍵}source
⎕←'Testing vecdb version ',#.vecdb.Version
:If selection≡'required' ⋄ selection←'' ⋄ :EndIf ⍝ Nothing like that yet
tests←{⍵/⍨(⊂'test_')∊⍨5↑¨⍵}⎕NL-3
:If 0≠≢selection
:If 1=≡selection ⋄ selection←,⊂selection ⋄ :EndIf
:If ∧/m←selection∊5↓¨tests ⋄ tests←'test_'∘,¨selection
:Else ⋄ ('tests not found: ',(~m)/selection) ⎕SIGNAL 11
:EndIf
:EndIf
:For i :In ⍳≢tests
TIMELOG←0 2⍴0
⍎i⊃tests
:If LOG∧0≠≢TIMELOG
⎕←(i⊃tests) TIMELOG
:EndIf
:EndFor
∇
∇ (name folder)←preTest dummy
name←⊃1↓⎕SI
folder←'./',name,'/'
⎕←'Clearing: ',folder
:Trap 22 ⋄ #.vecdb.Delete folder ⋄ :EndTrap
∇
∇ (db data columns types)←makeBasicDB numrecs;folder;name;range;types;tnms;recs;options;params;charvalues
memstats 1       ⍝ Clear memory statistics
(numrecs recs)←2↑numrecs,numrecs
:If (100×numrecs)>2000⌶16
⎕←'*** Warning: workspace size should be at least: ',(⍕⌈(100×numrecs)÷1000000)',Mb ***'
:EndIf
folder←path,'/',(name←⊃1↓⎕SI),'/'
⍝⎕←'Clearing: ',folder
:Trap 22 ⋄ #.vecdb.Delete folder ⋄ :EndTrap
⍝⎕←'Creating: ',folder←path,'/',name,'/'
columns←'col_'∘,¨types←#.vecdb.TypeNames
assert #.vecdb.TypeNames≡tnms←'I1' 'I2' 'I4',,¨'FBC' ⍝ Types have been added?
range←2*¯1+8×1 2 4 6 0.25
data←numrecs⍴¨¯1+⍳¨numrecs⌊range
data←data×0.1*'F'=⊃¨(≢data)↑types ⍝ Make float values where necessary
data←data,⊂numrecs⍴charvalues←{1↓¨(⍵=⊃⍵)⊂⍵}'/zero/one/two/three/four/five/six/seven/eight/nine/ten/eleven/one dozen/thirteen/fourteen/fifteen'
:If LOG ⋄ ⎕←'Size of input data: ',fmtnum ⎕SIZE'data' ⋄ :EndIf
(options←⎕NS'').BlockSize←numrecs(⌊×)0.6 ⍝ Provoke block overflow
params←name folder columns types options(recs↑¨data)
TEST←'Creating db & inserting ',(fmtnum recs),' records'
db←⎕NEW time #.vecdb params
assert db.isOpen
assert db.Count=recs
assert 0=db.Close
assert 0=db.isOpen
TEST←'Reopen database'
db←(⎕NEW time)#.vecdb(,⊂folder) ⍝ Open it again
assert db.isOpen
assert db.Count=recs
∇
:Section Tests
∇ test_sharding;columns;data;options;params;folder;types;name;db;ix;rotate;newcols;colsnow;m;db1;db2;ix2;ix1;t;i;z
⍝ Test database with 2 shards
⍝ Also acts as test for add/remove columns
folder←path,'/',(name←'shardtest'),'/'
:For rotate :In 0 1 2 ⍝ Test with shard key in all positions
⎕←'Clearing: ',folder
:Trap 22 ⋄ #.vecdb.Delete folder ⋄ :EndTrap
columns←rotate⌽'Name' 'BlockSize' 'Flag'
types←rotate⌽,¨'C' 'F' 'C'
data←rotate⌽('IBM' 'AAPL' 'MSFT' 'GOOG' 'DYALOG')(160.97 112.6 47.21 531.23 999.99)(5⍴'Buy' 'Sell')
options←⎕NS''
options.BlockSize←10000
options.ShardFolders←(folder,'Shard')∘,¨'12'
options.(ShardFn ShardCols)←'{2-2|⎕UCS ⊃¨⊃⍵}'(⊃rotate⌽1 3 2)
params←name folder columns types options(3↑¨data)
TEST←'Create sharded database (rotate=',(⍕rotate),')'
db←⎕NEW time #.vecdb params
assert 3=db.Count
assert(3↑¨data)≡db.Read(1 2⍴1(1 2 3))columns ⍝ All went into shard #1
TEST←'Append last 2 records'
z←db.Append time columns(3↓¨data)
assert 5=db.Count
ix←db.Query('Name'((columns⍳⊂'Name')⊃data))⍬ ⍝ Should find everything
assert(1 2,⍪⍳¨4 1)≡ix
TEST←'Read it all back'
assert data≡db.Read time ix columns
newcols←columns,¨'2'
TEST←'Add columns'
z←db.AddColumns time newcols types
z←db.Update ix newcols data ⍝ Populate new columns
assert(db.Read ix columns)≡(db.Read ix newcols)
TEST←'Remove columns'
m←(⍳≢columns)≠db.ShardCols ⍝ not the shard col
z←db.RemoveColumns time(m/columns),(~m)/newcols
colsnow←((~m)/columns),m/newcols
types←((~m)/types),m/types
data←((~m)/data),m/data
assert(db.(Columns Types))≡(colsnow types) ⍝ should now only have the new columns
assert data≡db.Read ix colsnow        ⍝ Check database is "undamaged"
z←db.Close
⍝ Now open shards individually
db1←⎕NEW #.vecdb(folder 1)
db2←⎕NEW #.vecdb(folder 2)
ix1←db1.Query('Name'((colsnow⍳⊂'Name')⊃data))⍬ ⍝ Find all records
ix2←db2.Query('Name'((colsnow⍳⊂'Name')⊃data))⍬ ⍝ ditto
assert(1 2,⍪⍳¨4 1)≡ix1⍪ix2
assert data≡⊃,¨/(db1 db2).Read(ix1 colsnow)(ix2 colsnow)
t←4↓¨data
'data may only be appended to opened shards'db1.Append expecterror colsnow t
t[i]←⌽¨¨t[i←colsnow⍳⊂'Flag2']
'new strings not allowed unless all shards are open'db2.Append expecterror colsnow t
z←(db1 db2).Close
TEST←'Erase database'
db←⎕NEW #.vecdb(,⊂folder)
assert 0={db.Erase}time ⍬
:EndFor ⍝ rotate
z←'Sharding Tests Completed'
∇
∇ z←test_basic;db;data;columns;numrecs;recs;TEST;select;where;expect;vals;indices;rcols;rcoli;types;ix;newvals;i;t
⍝ Create and delete some tables
(db data columns types)←makeBasicDB (numrecs recs)←1 0.5×10000000 ⍝ 10 million records
TEST←'Reading them back:'
assert(recs↑¨data)≡db.Read time(⍳recs)columns
⍝ test vecdb.Append and vecdb.Read
TEST←'Appending ',(fmtnum numrecs-recs),' more'
assert 0=db.Append time columns(recs↓¨data)  ⍝ Append the rest of the data
assert db.Count=numrecs
assert data≡db.Read(⍳numrecs)columns    ⍝ Read and verify ALL the data
⍝ Test vecdb.Query
select←⌽columns ⍝ columns to select (all, but in reverse order)
where←((1⊃columns)(1 2 3))
expect←⌽((1⊃data)∊1 2 3)∘/¨data         ⍝ The expected result
TEST←'Single expression query'
assert expect≡db.Query time where select
where←where((6⊃columns)(vals←'one' 'two' 'three' 'seventy')) ⍝ Add filter on char type
expect←⌽(⊃∧/data[1 6]∊¨(1 2 3)vals)∘/¨data                   ⍝ Reduced expectations
TEST←'Two expression query'
assert expect≡db.Query time where select
TEST←'Single key, single data group by'
expect←(1⊃data){⍺,+/⍵}⌸2⊃data
assert expect≡db.Query time ⍬'sum col_I2' 'col_I1' ⍝ select sum(col_I2) group by col_I1'
TEST←'Single CHAR key, single data group by'
expect←(6⊃data){⍺,+/⍵}⌸2⊃data
assert expect≡db.Query time ⍬'sum col_I2' 'col_C' ⍝ select sum(col_I2) group by col_C'
TEST←'Single key, multiple data group by'
expect←(1⊃data){⍺,(+/⍵[;1]),⌈/⍵[;2]}⌸↑[0.5]data[2 3]
assert expect≡db.Query time ⍬('sum col_I2' 'max col_I4')'col_I1' ⍝ select sum(col_I2),max(col_I4) group by col_I1'
TEST←'Two key, single data group by'
expect←(↑[0.5]data[1 5]){⍺,+/⍵}⌸2⊃data
assert expect≡db.Query time ⍬'sum col_I2'('col_I1' 'col_B') ⍝ select sum(col_I2) group by col_I1, col_B'
TEST←'Two key, multiple data group by'
expect←(↑[0.5]data[1 5]){⍺,(+/⍵[;1]),⌈/⍵[;2]}⌸↑[0.5]data[2 3]
assert expect≡db.Query time ⍬('sum col_I2' 'max col_I4')('col_I1' 'col_B') ⍝ select sum(col_I2),max(col_I4) group by col_I1,col_B'
⍝ Test vecdb.Replace
indices←db.Query where ⍬
rcols←columns[rcoli←types⍳,¨'I2' 'B' 'C']
TEST←'Updating ',(fmtnum≢ix←2⊃,indices),' records'
newvals←0 1-(⊂ix)∘⌷¨data[2↑rcoli] ⍝ Update with 0-data or ~data
newvals,←⊂(≢ix)⍴⊂'changed'        ⍝ And new char values
assert 0=db.Update time indices rcols newvals
expect←data[rcoli]
:For i :In ⍳⍴rcoli
t←i⊃expect ⋄ t[ix]←i⊃newvals ⋄ (i⊃expect)←t
:EndFor
TEST←'Reading two columns for all ',(⍕numrecs),' records'
assert expect≡db.Read time(1,⍪⊂⍳numrecs)rcols
:If LOG
⎕←'Basic tests: memstats before db.Erase:'
⎕←memstats 0 ⍝ Report
:EndIf
TEST←'Deleting the db' ⋄  assert 0={db.Erase}time ⍬
∇
∇test_calcmap;db;data;columns;numrecs;I1;Odd;OddC;charvalues;charsmapped;expect;allodd;square;sel;types;chardata
⍝ Test calculated / mapped columns
numrecs←10000
(db data columns types)←makeBasicDB numrecs
charvalues←∪chardata← (types⍳⊂,'C')⊃data
(I1 Odd)←{⍵(2|⍵)}∪1⊃data              ⍝ Mappings of I1 column (with values in range 0…127)
OddC←('Even' 'Odd')[1+Odd]            ⍝ Odd in Char form
db.AddCalc'OddI1' 'col_I1' 'B' 'map'(I1 Odd) ⍝ name source type calculation data
db.AddCalc'OddI1C' 'col_I1' 'C' 'map'(I1 OddC) ⍝ Map I1 => string 'Odd' or 'Even'
db.AddCalc'SquareI1' 'col_I1' 'I2' '{⍵*2}'⍬'{⍵*0.5}' ⍝ Function with inverse for faster searches
db.AddCalc'ThreeResC' 'col_C' 'C' 'map'(charvalues(charsmapped←16⍴'zero' 'one' 'two')) ⍝ Map on char=>char
assert Odd≡db.Calc'OddI1'I1           ⍝ Check that we perform a calculation
assert OddC≡db.Calc'OddI1C'I1
assert charsmapped≡db.Calc'ThreeResC'charvalues
TEST←'Select calculated column'
expect←({↓⍉(⍵∘.*1 2),2|⍵}1⊃data),(('Even' 'Odd')[1+2|1⊃data])(('zero' 'one' 'two')[1+3|¯1+charvalues⍳chardata])
assert expect≡db.Query time ⍬('col_I1' 'SquareI1' 'OddI1' 'OddI1C' 'ThreeResC') ⍝ select col_I1, SquareI1, OddI1 ThreeResC
TEST←'Test query on calculated column with inverse'
expect←1 2 3
assert expect≡∪⊃db.Query('SquareI1'(1 4 9))'col_I1' ⍝ select col_I1 where SquareI1 in 1 4 9
expect←((≢charvalues)⍴0 1 0)/charvalues
assert expect≡∪⊃db.Query('ThreeResC'(⊂'one'))'col_C' ⍝ Where clause on char=>char mapping
TEST←'Group by calculation'
expect←(allodd←2|1⊃data){⍺,+/⍵}⌸2⊃data
assert expect≡db.Query time ⍬'sum col_I2' 'OddI1'      ⍝ select sum(col_i2) group by OddI1
TEST←'Group by 1 calc, filter on another'
sel←(square←×⍨1⊃data)∊1 4 9 ⍝ where (I2*2)∊1 4 9
expect←(sel/square){⍺,+/⍵}⌸sel/2⊃data
assert expect≡db.Query time('SquareI1'(1 4 9))'sum col_I2' 'SquareI1' ⍝ select sum(col_i2) group by SquareI1 where SquareI1∊1 4 9
db.RemoveCalc'OddI1'
⍝ /// More calc column QA required
⍝ /// Do not allow calcs on character columns
TEST←'Deleting the db' ⋄  assert 0={db.Erase}time ⍬
∇
∇ test_add_columns_in_sequence;name;folder;options;numrecs;columns;types;params;db;data
name folder←preTest ⍬
numrecs←10
columns←'first' 'second' 'third'
types←'I1' 'F' 'C'
data←(numrecs(?⍴)127)(0.1×numrecs(?⍴)1000)(numrecs⍴'abc' 'def' 'xyz')
(options←⎕NS'').BlockSize←8 ⍝ Provoke block overflow
params←name folder(,1⌷columns)(,1⌷types)options(,1⌷data)
TEST←'Creating db & inserting columns in sequence'
db←⎕NEW time #.vecdb params
assert(,1⌷data)≡db.Read(1,⍪⎕NULL)(1⊃columns)
db.AddColumns,¨2⌷¨columns types
db.Update(1,⍪⍳10)(2⊃columns)(2⊃data)
assert(,2⌷data)≡db.Read(1,⍪⎕NULL)(2⊃columns)
db.AddColumns 3⌷¨columns types
db.Update(⊂1,⍪⍳10),3⊃¨columns data
assert(3⊃data)≡⊃db.Read(1,⍪⎕NULL)(3⊃columns)
assert 0=db.Erase
∇
∇ test_define_block_size;name;folder;options;params;db;em
name folder←preTest ⍬
(options←⎕NS'').BlockSize←10
params←name folder(,⊂'field')(,⊂'I1')options
em←'Block size must be a multiple of 8'
em ⎕NEW expecterror #.vecdb params
options.BlockSize←64
db←⎕NEW #.vecdb params
assert db.isOpen
assert 0=db.Erase
∇
∇ no_test_summary_fns;name;folder;options;columns;types;params;db;data;sort;comp
name folder←preTest ⍬
columns←'id' 'name' 'price' 'quantity'
types←'I1' 'C' 'F' 'I1'
data←,⊂9⍴1 2
data,←⊂3/'ett' 'due' 'three'
data,←⊂0.25×⍳9
data,←⊂⌽⍳9
options←⎕NS''
options.ShardFolders←(folder,'Shard')∘,¨'12'
options.(ShardFn ShardCols)←'{2-2|⊃⍵}' 1
params←name folder columns types options data
db←⎕NEW #.vecdb params
sort←{(⊂⍋↑⊃↓⍉⍵)⌷⍵}
comp←sort⍨≡sort
assert(+⌿⍉↑data[3 4])comp db.Query ⍬('sum price' 'sum quantity')⍬
assert((1⊃data){⍺,+⌿⍵}⌸⍉↑data[3 4])comp db.Query ⍬('sum price' 'sum quantity')'id'
assert((2⊃data){⍺,+⌿⍵}⌸⍉↑data[3 4])comp db.Query ⍬('sum price' 'sum quantity')'name'
assert((⍉↑2↑data){⍺,+⌿⍵}⌸⍉↑data[3 4])comp db.Query ⍬('sum price' 'sum quantity')('id' 'name')
assert(⌈⌿⍉↑data[3 4])comp db.Query ⍬('max price' 'max quantity')⍬
assert((1⊃data){⍺,⌈⌿⍵}⌸⍉↑data[3 4])comp db.Query ⍬('max price' 'max quantity')'id'
assert((2⊃data){⍺,⌈⌿⍵}⌸⍉↑data[3 4])comp db.Query ⍬('max price' 'max quantity')'name'
assert((⍉↑2↑data){⍺,⌈⌿⍵}⌸⍉↑data[3 4])comp db.Query ⍬('max price' 'max quantity')('id' 'name')
assert(⌊⌿⍉↑data[3 4])comp db.Query ⍬('min price' 'min quantity')⍬
assert((1⊃data){⍺,⌊⌿⍵}⌸⍉↑data[3 4])comp db.Query ⍬('min price' 'min quantity')'id'
assert((2⊃data){⍺,⌊⌿⍵}⌸⍉↑data[3 4])comp db.Query ⍬('min price' 'min quantity')'name'
assert((⍉↑2↑data){⍺,⌊⌿⍵}⌸⍉↑data[3 4])comp db.Query ⍬('min price' 'min quantity')('id' 'name')
assert(2/≢⊃data)comp db.Query ⍬('count price' 'count quantity')⍬
assert((1⊃data){⍺,2/≢⍵}⌸⍉↑data[3 4])comp db.Query ⍬('count price' 'count quantity')'id'
assert((2⊃data){⍺,2/≢⍵}⌸⍉↑data[3 4])comp db.Query ⍬('count price' 'count quantity')'name'
assert((⍉↑2↑data){⍺,2/≢⍵}⌸⍉↑data[3 4])comp db.Query ⍬('count price' 'count quantity')('id' 'name')
assert 0=db.Erase
∇
:EndSection
∇ x←output x
:If LOG ⋄ ⍞←x ⋄ :EndIf
∇
∇ r←fmtnum x
⍝ Nice formatting of large integers
r←(↓((⍴x),20)⍴'CI20'⎕FMT⍪,x)~¨' '
∇
∇ r←memstats reset;maxws;z
:If reset=1
z←0(2000⌶)14 ⍝ Reset high water mark
:Else
maxws←⊂⍕2 ⎕NQ'.' 'GetEnvironment' 'MAXWS'
r←⎕WA
r←'MAXWS' '⎕WA' 'WS Used' 'Allocated' 'High Water Mark',⍪¯20↑¨maxws,fmtnum r,(2000⌶)1 13 14
:EndIf
∇
assert←{'Assertion failed'⎕SIGNAL(⍵=0)/11}
time←{⍺←⊣ ⋄ t←⎕AI[3]
z←⍺ ⍺⍺ ⍵
z⊣timelog TEST (⎕AI[3]-t)
}
∇{info}←timelog info
:If 2=⎕NC 'TIMELOG'
TIMELOG⍪←info
:EndIf
∇
expecterror←{
0::⎕SIGNAL(⍺≡⊃⎕DMX.DM)↓11
z←⍺⍺ ⍵
⎕SIGNAL 11
}
:EndNamespace
﻿:Namespace TestVecdbSrv
⍝ Call TestVecdbSrv.RunAll to run Server Tests
⍝   assumes existence of #.vecdbclt and #.vecdb
(⎕IO ⎕ML)←1 1
LOG←1
toJson←(0 1)∘(7160⌶)
∇ z←Benchmark;columns;data;options;params;folder;types;name;ix;users;srvproc;clt;TEST;config;db;path;tn;folders;run;sym;date;price;lix;expect;⎕RL;m
⍝ Test database with 2 shards
⍝ Also acts as test for add/remove columns
⍝ --- Create configuration file ---
:For run :In 1↓'serial' 'parallel' ⍝ /// While debugging parallel
⎕←'*** ',run,' run begins...'
columns←'Day' 'Sym' 'Price'
types←,¨'I2' 'C' 'F'
data←⍬ ⍬ ⍬
:Select run
:Case 'serial' ⋄ path←Init
:Case 'parallel' ⋄ path←Init ⍝ '//Mortens-Macbook-Air/vecdb'
:EndSelect
folder←path,'/',(name←'srvtest'),'/'
⎕←'Clearing: ',folder
:Trap 22 ⋄ {}#.vecdb.Delete folder ⋄ :EndTrap
1 ⎕MKDIR folder
config←CreateBenchConfig folder,'config.json'
options←⎕NS''
options.BlockSize←10000 ⍝ 10,000 records
date←10000/⍳2×365       ⍝ 10,000 records × 2 × 365 days = ~36M records
sym←(≢date)⍴'MSFT' 'IBM' 'AAPL' 'GOOG' 'DYLG'
price←100+0.1×⍳⍴date  ⍝ It's a good market!
:Select run
:Case 'serial'
options.ShardFolders←⍬
params←name folder columns types options (5↑¨date sym price)
TEST←'Create empty database'
db←{⎕NEW #.vecdb params} time ⍬
assert 5=db.Count
:Case 'parallel'
⍝   options.ShardFolders←'c:\devt\vecdb\srvtest\shard1' '//Mortens-Macbook-Air/vecdb/srvtest/shard2'
⍝   options.LocalFolders←'c:\devt\vecdb\srvtest\shard1' '//Users/mkrom/vecdb/srvtest/shard2'
options.ShardFolders←'c:\devt\vecdb\srvtest\shard1' 'c:\devt\vecdb\srvtest\shard2'
options.LocalFolders←'c:\devt\vecdb\srvtest\shard1' 'c:\devt\vecdb\srvtest\shard2'
options.(ShardFn ShardCols)←'{1+2|⊃⍵}' 1 ⍝ Odd/Even day number
params←name folder columns types options (5↑¨date sym price) ⍝ pre-populate symbols
TEST←'Create empty database'
db←{⎕NEW #.vecdb params} time ⍬
assert 5=db.Count
db.Close
⍝ ↓↓↓ rewrite this only require "folder" and read the rest from JSON config
∘∘∘
srvproc←#.vecdbsrv.Launch folder 8100 ⍬'c:\devt\vecdb\vecdbboot.dws'
db←#.vecdbclt.Open folder
:EndSelect
TEST←'Append Data'
z←db.Append time columns(5↓¨date sym price)
TEST←'Count records'
assert(≢date)={db.Count}time ⍬
TEST←'Search for two days of records'
ix←db.Query time('Day'(200 201))⍬ ⍝ Should find 2,000 records
assert (+/date∊200 201)=≢∊ix[;2]
TEST←'Read 2 days records (2,000)'
lix←{⍵/⍳⍴⍵}date∊200 201
expect←{⍵[lix]}¨date sym price
assert expect≡db.Query time ('Day'(200 201)) columns
TEST←'count Price, max Price, min Price group by Day (1st run)'
m←1
expect←(m/date){(⊂⍺),(≢⍵),(⌈/⍵),⌊/⍵}⌸m/price
assert expect≡{⍵[⍋⍵[;1];]}db.Query time ⍬ ('count Price' 'max Price' 'min Price')'Day'
TEST←'count Price, max Price, min Price group by Day (2nd run)'
assert expect≡{⍵[⍋⍵[;1];]}db.Query time ⍬ ('count Price' 'max Price' 'min Price')'Day'
:If run≡'parallel'
⎕←'Closing down server...'
z←db.Shutdown'Shutting down now!'
⎕DL 3
:If ~srvproc.HasExited ⋄ z←srvproc.Kill ⋄ :EndIf
⎕DL 3
:EndIf
TEST←'Erase database'
db←⎕NEW #.vecdb(,⊂folder)
assert 0={db.Erase}time ⍬
1 ⎕NDELETE folder
:EndFor
z←'Server Tests Completed'
∇
∇ path←Init;source
⎕FUNTIE ⎕FNUMS ⋄ ⎕NUNTIE ⎕NNUMS
:Trap 6 ⋄ source←SALT_Data.SourceFile
:Else ⋄ source←⎕WSID
:EndTrap
path←{(-⌊/(⌽⍵)⍳'\/')↓⍵}source
:If 0=⎕NC'#.DRC' ⋄ 'DRC'#.⎕CY'conga' ⋄ :EndIf
∇
∇ z←RunAll;path;source
⎕←ServerBasic
∇
∇ config←CreateBenchConfig filename;db;config;user;vecdbsrv;cmd;host;keyfile;userid;port
⍝
cmd←'RIDE_SPAWNED=1 RIDE_INIT=SERVE::5678 /Applications/Dyalog-15.0.app/Contents/Resources/Dyalog/mapl'
host←'Mortens-Macbook-Air'
userid←'mkrom'
keyfile←'c:\docs\personal\macbook-air'
port←8100
user←⎕NS''
user.(Name Id Admin)←'mkrom' 1001 1
vecdbsrv←⎕NS''
vecdbsrv.Name←'Test Server'
vecdbsrv.BootWs←'c:\devt\vecdb\bootvecdb.dws'
vecdbsrv.Port←port
vecdbsrv.Users←,user
db←⎕NS''
db.Folder←folder
db.Slaves←⎕NS¨2⍴⊂''
db.Slaves.Shards←,¨1 2 ⍝ Distribution of shards to slave processors
db.Slaves.Folder←⊂folder ⍝ Root folder
db.Slaves[1].(Launch←⎕NS'').Type←'local'
db.Slaves[2].(Launch←⎕NS'').Type←'local'
db.Slaves.Folder←⊂folder ⍝ Local test only right now
⍝  db.Slaves[1].Folder←'//Mortens-Macbook-Air/vecdb/srvtest/' ⍝ If different seen from this slave
⍝  db.Slaves[2].(Launch←⎕NS'').(Type Host User KeyFile Cmd)←'ssh'host userid keyfile cmd
⍝  db.Slaves[2].Folder←'/Users/mkrom/vecdb/srvtest/'
config←⎕NS''
config.Server←vecdbsrv
config.DBs←,db
(toJson config)⎕NPUT filename
∇
∇ config←CreateTestConfig filename;db;config;user;vecdbsrv
⍝
user←⎕NS''
user.(Name Id Admin)←'mkrom' 1001 1
vecdbsrv←⎕NS''
vecdbsrv.Name←'Test Server'
vecdbsrv.Users←,user
db←⎕NS''
db.Folder←folder
db.Slaves←⎕NS¨2⍴⊂''
db.Slaves.Shards←,¨1 2 ⍝ Distribution of shards to slave processors
db.Slaves.(Launch←⎕NS'').Type←⊂'local'
config←⎕NS''
config.Server←vecdbsrv
config.DBs←,db
(toJson config)⎕NPUT filename
∇
∇ (db params)←CreateTestDB;columns;types;data;options
columns←'Name' 'Price' 'Flag'
types←,¨'C' 'F' 'C'
data←('IBM' 'AAPL' 'MSFT' 'GOOG' 'DYALOG')(160.97 112.6 47.21 531.23 999.99)(5⍴'Buy' 'Sell')
options←⎕NS''
options.ShardFolders←(folder,'Shard')∘,¨'12'
options.BlockSize←10000
options.(ShardFn ShardCols)←'{2-2|⎕UCS ⊃¨⊃⍵}' 1
params←name folder columns types options data
db←⎕NEW #.vecdb params
assert(≢⊃data)=db.Count
∇
∇ z←ServerBasic;columns;data;options;params;folder;types;name;ix;users;srvproc;clt;TEST;config;db;path
⍝ Test database with 2 shards
⍝ Also acts as test for add/remove columns
path←Init
folder←path,'/',(name←'srvtest'),'/'
⎕←'Clearing: ',folder
:Trap 22 ⋄ {}#.vecdb.Delete folder ⋄ :EndTrap
⎕MKDIR folder
⍝ --- Create configuration file ---
config←CreateBenchConfig folder,'config.json'
(db(name folder columns types options data))←CreateTestDB
⍝ --- Launch and connect to server, open database ---
srvproc←#.vecdbsrv.Launch folder 8100
db←#.vecdbclt.Open folder
TEST←'Count records'
assert(≢⊃data)={db.Count}time ⍬
TEST←'Search for all records'
ix←db.Query time('Name'((columns⍳⊂'Name')⊃data))⍬ ⍝ Should find everything
assert(1 2,⍪⍳¨4 1)≡ix
TEST←'Read it all back'
assert data≡db.Read time ix columns
(2⊃data)×←1.1 ⍝ Add 10% to all prices
TEST←'Update prices'
z←db.Update time ix'Price'(2⊃data) ⍝ Update price
assert data≡db.Read ix columns
⍝ /// Tests to do:
⍝ Append data - to all and less that all shards
⍝ Update multiple columns
⍝ Read & update records with shards "out of order"
⍝ Read & update not from all shards
⎕←'Closing down server...'
z←db.Shutdown'Shutting down now!'
⎕DL 3
:If ~srvproc.HasExited ⋄ srvproc.Kill ⋄ :EndIf
⎕DL 3
TEST←'Erase database'
db←⎕NEW #.vecdb(,⊂folder)
assert 0={db.Erase}time ⍬
z←'Server Tests Completed'
∇
∇ x←output x
:If LOG ⋄ ⍞←x ⋄ :EndIf
∇
∇ r←fmtnum x
⍝ Nice formatting of large integers
r←(↓((⍴x),20)⍴'CI20'⎕FMT⍪,x)~¨' '
∇
assert←{'Assertion failed'⎕SIGNAL(⍵=0)/11}
time←{⍺←⊣ ⋄ t←⎕AI[3]
o←output TEST,' ... '
z←⍺ ⍺⍺ ⍵
o←output(⍕⎕AI[3]-t),'ms',⎕UCS 10
z
}
expecterror←{
0::⎕SIGNAL(⍺≡⊃⎕DMX.DM)↓11
z←⍺⍺ ⍵
⎕SIGNAL 11
}
:EndNamespace
﻿:Class vecdb
⍝ Dyalog APL vector database - see https://github.com/Dyalog/vecdb
(⎕IO ⎕ML)←1 1
:Section Constants
:Field Public Shared Version←'0.2.6' ⍝ Parallel DB
:Field Public Shared TypeNames←,¨'I1' 'I2' 'I4' 'F' 'B' 'C'
⍝ To come: C4=323 indexed chars
⍝          Tn=Fixed with text (no index table)
:Field Public Shared TypeNums←83 163 323 645 11 163
:Field Public Shared SummaryFns←'sum' 'max' 'min' 'count'
:Field Public Shared CalcFns←,⊂'map'
:Field Public Shared SummaryAPLFns←'+/' '⌈/' '⌊/' '≢'
:Field Public Shared ReSummaryAPLFns←'+/' '⌈/' '⌊/' '+/'
:EndSection ⍝ Constants
:Section Instance Fields            ⍝ The fact that these are public does not mean it is safe to change them
:Field Public Name←''
:Field Public Folder←''             ⍝ Where is it
:Field Public BlockSize←100000      ⍝ Small while we test (must be multiple of 8)
:Field Public NumBlocks←1           ⍝ We start with one block
:Field Public noFiles←0             ⍝ in-memory database (not supported)
:Field Public isOpen←0              ⍝ Not yet open
:Field Public ShardFolders←⍬        ⍝ List of Shard Folders
:Field Public LocalFolders←⍬        ⍝ Shard Folders as seen by slave task
:Field Public ShardFn←⍬             ⍝ Shard Calculation Function
:Field Public ShardCols←⍬           ⍝ ShardFn input column indices
:Field Public ShardSelected←⍬       ⍝ Shards selected
:Field Private AllShards←0          ⍝ Are all Shards in use?
:Field _Columns←⍬
:Field _Types←⍬
:Field _Count←⍬
:EndSection ⍝ Instance Fields
fileprops←'Name' 'BlockSize' ⍝ To go in comp 4 of meta.vecdb
eis←{(≡⍵)∊0 1:⊂,⍵ ⋄ ⍵}       ⍝ enclose if simple
sizeOf←{(size dr)←⍵ ⋄⌈size×8÷⍨⌊dr÷10} ⍝ size in bytes of ⍵[1] elements of type ⍵[2]
:Section Properties
:Property Columns
:Access Public
∇ r←get
r←_Columns,_CalcCols
∇
:EndProperty
:Property Types
:Access public
∇ r←get
r←_Types,_CalcTypes
∇
:EndProperty
:Property Count
:Access public
∇ r←get
r←⊃⊃+/_Counts[ShardSelected].counter
∇
:EndProperty
:EndSection ⍝ Properties
∇ Open(folder)
:Implements Constructor
:Access Public
OpenFull(folder ⍬) ⍝ Open all shards
∇
∇ InitCalcs tn;i;calc;spec;space;inv
⍝ Extract calculation data from meta file
:If 8=2⊃⎕FSIZE tn ⍝ If File format pre-dates calculated columns
'unused'∆FAPPEND tn ⍝ 8
'unused'∆FAPPEND tn ⍝ 9
(⍬ ⍬ ⍬)∆FAPPEND tn  ⍝ 10 Calc Col Names, Source Columns, Data Type
:EndIf
(_CalcCols _CalcSources _CalcTypes)←⎕FREAD tn,10 ⍝ Calculated column definitions
mappings,←⎕NS¨(≢_CalcCols)⍴⊂'' ⍝ Add mappings
:For i :In ⍳≢_CalcCols  ⍝ Run setup for each calculated coumn
space←(i+≢_Columns)⊃mappings
(calc spec inv)←⎕FREAD tn,10+i
:If '{'=⊃calc             ⍝ User-defined
space.Type←2          ⍝ Calculation
space.Spec←spec       ⍝ Store data
space⍎'Calc←',calc    ⍝ Define function
:If 0≠⍴inv ⋄ space⍎'CalcInv←',inv ⋄ :EndIf ⍝ Define inverse
:Else
⍎'(i⊃_CalcCols) ',calc,'_Setup spec'
:EndIf
:EndFor
∇
∇ name map_Setup(from to);cix;six;i;n;src;m;col;symbol;char;calcix
⍝ Setup for a "mapped" column
(cix six)←Columns⍳(⊂name),_CalcSources[calcix←_CalcCols⍳⊂name]
(col src)←mappings[cix six]
:If (,'C')≡cix⊃Types                     ⍝ Special case char
:AndIf (from≡⍳≢from)∨char←(,'C')≡six⊃Types   ⍝ char-char or "direct" map
:If char
symbol←src.symbol           ⍝ source symbols
m←(≢from)≥i←from⍳symbol     ⍝ mappable symbols
(m/symbol)←to[m/i]          ⍝ remap
:Else
symbol←to
:EndIf
col.file←0                      ⍝ there is no symbol file
col.Type←1                      ⍝ Symbol
col.symbol←symbol               ⍝ Store symbol list
col.(SymbolIndex←symbol∘⍳)      ⍝ Create lookup function
col.Source←six                  ⍝ Store the source column
:Else
col.Type←2                      ⍝ Calc/CalcInv
col.(to from)←to from
col.(SymbolIndex←from∘⍳)
col.(TargetIndex←to∘⍳)
col.(Calc←to∘{⍺⌷⍨⊂SymbolIndex ⍵})
col.(CalcInv←from∘{⍺⌷⍨⊂TargetIndex ⍵})
:EndIf
∇
∇ r←AddCalc spec;name;source;type;calc;file;tn;i;inv
:Access Public
'not allowed unless all shards are open'⎕SIGNAL AllShards↓11
(name source type calc spec inv)←6↑,¨spec,⍬ ⍬ ⍬
'unknown source column'⎕SIGNAL((⊂source)∊_Columns)↓11
'unknown data type'⎕SIGNAL((⊂type)∊TypeNames)↓11
:If '{'≠1⊃calc
:Select calc
:Case 'map'
:If 2≠⍴spec
:OrIf ≢/≢¨spec
'map source and target must have the same length'⎕SIGNAL 11
:EndIf
:Else
('Unknown standard calculation: ',calc)⎕SIGNAL 11
:EndSelect
:EndIf
file←Folder,'meta.vecdb'
⎕FHOLD tn←file ⎕FSTIE 0
(_CalcCols _CalcSources _CalcTypes)←⎕FREAD tn,10 ⍝ Calculated column definitions
:If (≢_CalcCols)≥i←_CalcCols⍳⊂name ⍝ Existing source?
(i⊃_CalcSources)←source
(i⊃_CalcTypes)←type
(_CalcCols _CalcSources _CalcTypes)⎕FREPLACE tn,10
(calc spec inv)⎕FREPLACE tn,10+i
:Else                              ⍝ New source
((_CalcCols _CalcSources _CalcTypes),∘⊂¨name source type)⎕FREPLACE tn,10
:If (10+i)=2⊃⎕FSIZE tn         ⍝ Append or replace?
(calc spec inv)⎕FAPPEND tn
:Else ⋄ (calc spec inv)⎕FREPLACE tn,10+i
:EndIf
:EndIf
InitCalcs tn ⍝ re-read all from file (optimise later if necessary)
⎕FUNTIE tn ⍝ Also unholds it
∇
∇ r←RemoveCalc name;file;tn;m;i;cn
:Access Public
'not allowed unless all shards are open'⎕SIGNAL AllShards↓11
'calc not found'⎕SIGNAL((⊂name)∊_CalcCols)↓11
file←Folder,'meta.vecdb'
⎕FHOLD tn←file ⎕FSTIE 0
(_CalcCols _CalcSources _CalcTypes)←⎕FREAD tn,10 ⍝ Calculated column definitions
i←(m←~_CalcCols∊⊂name)⍳0
(m∘/¨_CalcCols _CalcSources _CalcTypes)⎕FREPLACE tn,10
:For cn :In ⌽i↓10+⍳≢_CalcCols
(⎕FREAD tn,cn)⎕FREPLACE tn,cn-1 ⍝ Copy following specs down
:EndFor
:If (11+≢_CalcCols)=2⊃⎕FSIZE tn      ⍝ Did we stop using the last component?
⎕FDROP tn,¯1
:EndIf
InitCalcs tn ⍝ re-read all from file (optimise later if necessary)
⎕FUNTIE tn ⍝ Also unholds it
∇
∇ r←Calc(name data);i;ns;cix;src;col
:Access Public
'calculation not found'⎕SIGNAL((≢_CalcCols)<i←_CalcCols⍳⊂name)⍴11
col←(cix←i+≢_Columns)⊃mappings
:Select col.Type
:Case 1 ⍝ Symbol
src←mappings[col.Source]
r←col.symbol[src.SymbolIndex data]
:Case 2 ⍝ Calc
:Trap 999
r←col.Calc data
:Else
(⊃⎕DMX.DM)⎕SIGNAL ⎕DMX.EN
:EndTrap
:Else
∘∘∘ ⍝ Internal error - unknown mapping type
:EndSelect
∇
∇ OpenFull(folder shards);tn;file;props;shards;n;s;i
⍝ Open an existing database
:Implements Constructor
:Access Public
folder←AddSlash folder
shards←,shards
:Trap 0 ⋄ tn←(file←folder,'meta.vecdb')⎕FSTIE 0
:Else ⋄ ('Unable to open ',file)⎕SIGNAL 11
:EndTrap
(props(_Columns _Types)ShardFolders(ShardFn ShardCols))←⎕FREAD tn(4 5 6 7)
:If 1=⍴⍴ShardFolders ⋄ LocalFolders←ShardFolders         ⍝ Old format: no local folders
:Else ⋄ ShardFolders LocalFolders←↓ShardFolders ⋄ :EndIf ⍝ New format allows spec of both
n←≢_Columns
mappings←⎕NS¨n⍴⊂''
mappings.Type←0 ⍝ Not cal'd or mapped (yet)
InitCalcs tn
⎕FUNTIE tn
⍎'(',(⍕1⊃props),')←2⊃props'
s←≢ShardFolders
:If 0=⍴shards     ⍝ No explicit selection of shards
ShardSelected←⍳s
shardfolders←ShardFolders
:Else
'Invalid Shard Selection'⎕SIGNAL(∧/shards∊⍳s)↓11
ShardSelected←shards
shardfolders←LocalFolders
:EndIf
AllShards←s=≢ShardSelected
Shards←⎕NS¨¨s⍴⊂n⍴⊂''
Shards.name←s⍴⊂_Columns                ⍝ Column Names
Shards.type←s⍴⊂_Types                  ⍝ Types
Shards.file←(n/¨⊂¨shardfolders),¨¨(,∘'.vector')¨¨s⍴⊂(⍕¨⍳n) ⍝ Vector file names
:If 0≠⍴ShardFn ⋄ findshard←⍎ShardFn ⋄ :EndIf ⍝ Define shard calculation function
:For i :In {⍵/⍳⍴⍵}'C'=⊃¨_Types         ⍝ Read symbol files for CHAR fields
col←i⊃mappings
col.Type←1                         ⍝ symbol map
col.file←folder,(⍕i),'.symbol'     ⍝ symbol file name in main folder
col.symbol←GetSymbols col.file     ⍝ Read symbols
col.(SymbolIndex←symbol∘⍳)         ⍝ Create lookup function
:EndFor
(isOpen Folder)←1 folder
MakeMaps
∇
∇ MakeMaps;s;i;types;T;ns;dr;col;sizes
⍝ [Re]make all maps
types←TypeNums[TypeNames⍳Types]
_Counts←⎕NS¨(≢Shards)⍴⊂⍬
:For i :In ShardSelected
s←i⊃Shards
_Counts[i].counter←645 1 ⎕MAP((i⊃shardfolders),'counters.vecdb')'W' ⍝ Map record counter
:For col :In ⍳≢s
(col⊃s).vector←(types[col],¯1)⎕MAP(col⊃s).file'W'
:EndFor
:If 1≠⍴sizes←∪s.(≢vector) ⍝ mapped vectors have different lengths
:OrIf sizes∨.<⊃(i⊃_Counts).counter ⍝ or shorter than record count
∘ ⍝ File damaged
:EndIf
:EndFor
∇
∇ make4(name folder columns types)
:Implements Constructor
:Access Public
0 CreateOrExtend name folder columns types'' '' ⍝ No data or option
Open,⊂folder      ⍝ now open it properly
∇
∇ make5(name folder columns types options)
:Implements Constructor
:Access Public
0 CreateOrExtend name folder columns types options'' ⍝ No data or option
Open,⊂folder      ⍝ now open it properly
∇
∇ make6(name folder columns types options data)
:Implements Constructor
:Access Public
0 CreateOrExtend name folder columns types options data
Open,⊂folder      ⍝ now open it properly
∇
∇ extend CreateOrExtend(name folder columns types options data);i;s;offset;tn;type;length;col;size;n;dr;f;shards;sf;create;newcols;metafile;dix;d;newchars;filename;temp;ai3
⍝ Create (extend=0) a new database or extend an existing one
⍝ Called from constructors and public method AddColumns
create←extend=0   ⍝ for readability
⍝ Validate column parameters
types←,¨types
'At least one column must be added'⎕SIGNAL(1>≢columns)⍴11
'Column types and names do not have same length'⎕SIGNAL((≢columns)≠≢types)⍴11
'Invalid column types - see vecdb.TypeNames'⎕SIGNAL(∧/types∊TypeNames)↓11
'Column(s) already exist'⎕SIGNAL(∨/columns∊_Columns)⍴11
:If 0=≢data ⋄ data←(≢columns)⍴⊂⍬ ⋄ :EndIf ⍝ Default data is all zeros
'Data lengths not all the same'⎕SIGNAL(1≠≢length←∪≢¨data)/11
folder,←((¯1↑folder)∊'/\')↓'/' ⍝ make sure we have trailing separator
metafile←folder,'meta.vecdb'
:If create ⍝ We are CREATEing a database
:If Exists ¯1↓folder ⍝ Folder already exists
('"',metafile,'" already exists')⎕SIGNAL(Exists metafile)/11
:Else ⍝ Folder does not exist
:Trap 0 ⋄ MkDir ¯1↓folder
:Else ⋄ ⎕DMX.EM ⎕SIGNAL ⎕DMX.EN
:EndTrap
:EndIf
ProcessOptions options ⍝ Sets global fields
'Block size must be a multiple of 8'⎕SIGNAL(0≠8|BlockSize)/11
⍝ Set defaults for sharding (1 shard)
ShardFolders,←(0=⍴ShardFolders)/⊂folder
ShardFolders←AddSlash¨ShardFolders
:If 0=⎕NC 'LocalFolders' ⋄ LocalFolders←ShardFolders ⋄ :EndIf
LocalFolders←AddSlash¨LocalFolders
shardfolders←ShardFolders ⍝ When creating we have the full view
ShardCols←,ShardCols
:If 0≠⍴ShardFn ⋄ findshard←⍎ShardFn ⋄ :EndIf  ⍝ Define shard calculation function
(Name _Columns _Types)←name columns types     ⍝ Set Class fields
mappings←⎕NS¨(≢_Columns)⍴⊂''
:Else ⍝ We are adding columns to an open database
(_Columns _Types)←(_Columns _Types),¨columns types ⍝ Extend Class fields
mappings,←⎕NS¨(≢columns)⍴⊂''
:EndIf
newcols←(-≢columns)↑⍳≢_Columns         ⍝ Indices of new coulumns
newchars←'C'=⊃¨_Types[newcols]         ⍝ /// Should really be driven off mappings.Type=1 in the future
:For i :In newchars/newcols ⍝ Create symbol files for CHAR fields
col←i⊃mappings
dix←newcols⍳i                       ⍝ data index
col.symbol←{⍵[∪⍳⍨↑⍵]}dix⊃data       ⍝ Unique symbols in input data
col.file←folder,(⍕i),'.symbol'      ⍝ Symbol file name in main folder
col.symbol PutSymbols col.file      ⍝ Read symbols
col.(SymbolIndex←symbol∘⍳)          ⍝ Create lookup function
(dix⊃data)←col.SymbolIndex dix⊃data ⍝ Convert indices
:EndFor
:If create
(shards data)←newcols ShardData data ⍝ NB data has one COLUMN per shard
data←data,⊂⍬
:Else ⍝ adding columns
shards←⍳≢Shards
data←((≢newcols),≢shards)⍴⊂⍬ ⍝ No data provided when adding cols
:EndIf
:For f :In ⍳≢ShardFolders
3 ⎕MKDIR sf←f⊃ShardFolders
d←data[;shards⍳f]             ⍝ extract records for one shard
:If create
n←≢⊃d
:Else
n←f⊃_Counts.counter
:EndIf
size←BlockSize×1⌈⌈n÷BlockSize ⍝ At least one block
:If create                    ⍝ # of records in the shard
tn←(sf,'counters.vecdb')⎕NCREATE 0
n ⎕NAPPEND tn 645         ⍝ Record the number of records as a FLOAT
⎕NUNTIE tn
:EndIf
:For i :In newcols            ⍝ For each column being added
ai3←⎕AI[3]
dr←(TypeNames⍳_Types[i])⊃TypeNums
tn←(filename←sf,(⍕i),'.vector')⎕NCREATE 0
(sizeOf size dr)⎕NRESIZE tn
⎕NUNTIE tn
:If 0≠≢⊃d ⍝ if there is some data to write
temp←dr ¯1 ⎕MAP filename'W'
temp[]←size↑(newcols⍳i)⊃d
⎕EX'temp'
:EndIf
⍝ 'col ',(⍕i),': ',⍕⎕ai[3]-ai3
:EndFor
:EndFor
:If create
tn←metafile (⎕FCREATE⍠3) 0
('vecdb ',Version)∆FAPPEND tn    ⍝ 1
'See github.com/Dyalog/vecdb/doc/Implementation.md'∆FAPPEND tn ⍝ 2
'unused'∆FAPPEND tn              ⍝ 3
(fileprops(⍎¨fileprops))∆FAPPEND tn ⍝ 4 (Name BlockSize)
(_Columns _Types)∆FAPPEND tn     ⍝ 5
((2,≢ShardFolders)⍴ShardFolders,LocalFolders) ∆FAPPEND tn ⍝ 6
(ShardFn ShardCols)∆FAPPEND tn   ⍝ 7
'unused'∆FAPPEND tn              ⍝ 8
'unused'∆FAPPEND tn              ⍝ 9
(⍬ ⍬ ⍬)∆FAPPEND tn    ⍝ 10 Calc Col Names, Source Columns, Data Type
:Else ⍝ Extending
tn←metafile ⎕FTIE 0
(_Columns _Types)⎕FREPLACE tn 5
:EndIf
⎕FUNTIE tn
∇
∇X ∆FAPPEND Y
⍝ Work-around for Samba on Mac
X ⎕FAPPEND Y
⎕FUNTIE ⍬
∇
∇ (shards data)←cix ShardData data;six;s;char;rawdata;sym;c;counts;m
⍝ Shards is a vector of shards to be updated
⍝ data has one column per shard, and one row per column
:If 0=≢⊃rawdata←data
shards←⍬ ⋄ data←0/⍪data
→0
:EndIf
:If 1=≢shardfolders ⍝ Data will necessarily all be in the 1st shard then!
shards←,1 ⋄ data←⍪data
:Else ⍝ Database *is* sharded
:If (≢cix)∨.<six←cix⍳ShardCols ⍝ Shard columns not present - we must be adding columns?
⍝ ∘∘∘ does not work ∘∘∘
'Record count is incorrect'⎕SIGNAL((≢⊃data)≠+/counts←⊃¨_Counts.counter)⍴11
shards←⍳⍴Shards
m←(+/counts)⍴0 ⋄ m[+\1,¯1↓counts]←1
data←↑m∘⊂¨data
:Else
char←{⍵/⍳⍵}'C'=⊃¨_Types[ShardCols] ⍝ Which of the sharding cols are of type char?
⍝ /// ↑ should be driven off 1=mapping.Type in the future
:If (1=≢char)∧1=≢six ⍝ There is exactly one char shard column...
⍝ See whether it is worth running shard function on unique values rather than all data:
:AndIf (≢⊃sym←mappings[ShardCols].symbol)<≢⊃data ⍝ ... and fewer unique symbols than records
s←{⍺ ⍵}⌸(findshard sym)[six⊃data]           ⍝ ... then compute shards on symbols
:Else                ⍝ General case
:If 0≠≢char ⍝ Are *any* char (then we must turn indices into text)
c←six[char] ⍝ index of character shard cols in provided data
data[c]←mappings[ShardCols[char]].{symbol[⍵]}data[c]
⍝ Is that faster than: data[c]←mappings[ShardCols[char]].symbol[data[c]]
:EndIf
s←{⍺ ⍵}⌸findshard data[six]
:EndIf
shards←s[;1]
data←↑[0.5](⊂∘⊂¨s[;2])⌷¨¨⊂rawdata
:EndIf
:EndIf
∇
∇ ExtendShard(folder cols count data);i;file;tn;Type;char;tns;sym;m;ix;fp;dr;col;offset;n
⍝ Extend a Shard by count items
:For i :In ⍳≢cols ⍝ For each column
col←i⊃cols
dr←(TypeNames⍳⊂col.type)⊃TypeNums
col.⎕EX'vector'                      ⍝ Remove memory map
offset←⎕NSIZE tn←col.file ⎕NTIE 0
(offset+sizeOf count dr)⎕NRESIZE tn  ⍝ Extend the file
⎕NUNTIE tn
n←≢col.vector←dr ¯1 ⎕MAP col.file'W' ⍝ Re-establish map
col.vector[(n-count)+⍳count]←count↑i⊃data ⍝ update with new data
:EndFor
∇
∇ r←Close
:Access Public
⎕EX'Shards' 'mappings' '_Counts'
r←isOpen←0       ⍝ record the fact
∇
∇ unmake
:Implements Destructor
{}Close
∇
∇ ProcessOptions options;name
⍝ Extract optional fields from options
:If 9=⎕NC'options'
:For name :In options.⎕NL-2
:If (⊂name)∊'BlockSize' 'InitBlocks' 'Folders' 'ShardCols' 'ShardFolders' 'LocalFolders' 'ShardFn'
⍎name,'←options.',name
:Else
('Invalid option name: ',name)⎕SIGNAL 11
:EndIf
:EndFor
:EndIf
∇
∇ (summary colnames)←ParseSummary cols;p
⍝ Split column specifications into summaryfn colname
:If 0=⍴cols ⋄ summary←colnames←⍬
:Else
:If 2>≡cols ⋄ cols←,⊂,cols ⋄ :EndIf ⍝ Enclose if simple
p←p×(≢¨cols)≥p←cols⍳¨' ' ⍝ position of separator
summary←(0⌈p-1)↑¨cols
colnames←p↓¨cols
:EndIf
∇
∇ {r}←AddColumns(columns types);z
:Access Public
'not allowed unless all shards are open'⎕SIGNAL AllShards↓11
1 CreateOrExtend Name Folder columns types''⍬
z←Close ⋄ Open,⊂Folder ⍝ Reopen - might want to optimise this later?
r←⍬
∇
∇ {r}←RemoveColumns columns;tn;keep;metafile;f;c;colix;file;sf;m;sym
:Access Public
'not allowed unless all shards are open'⎕SIGNAL AllShards↓11
:If ∨/m←~columns∊_Columns
('Columns not found:',⍕m/columns)⎕SIGNAL 11
:EndIf
'Cannot remove sharding columns'⎕SIGNAL(∨/columns∊_Columns[ShardCols])⍴11
'Cannot remove all columns'⎕SIGNAL(∧/_Columns∊columns)⍴11
keep←~_Columns∊columns
⎕EX'Shards' ⍝ We will reopen the file at the end, need to remove maps
:For f :In ⍳≢shardfolders
colix←1
sf←f⊃shardfolders
:For c :In ⍳≢_Columns
tn←(file←sf,(⍕c),'.vector')⎕NTIE 0
sym←{22::0 ⋄ (Folder,(⍕c),'.symbol')⎕NTIE ⍵}0
:If c⊃keep ⍝ keeping this column
:If c≠colix ⍝ needs renaming
(sf,(⍕colix),'.vector')⎕NRENAME tn
:If (f=1)∧sym≠0
(Folder,(⍕colix),'.symbol')⎕NRENAME sym
:EndIf
:EndIf
colix+←1
:Else      ⍝ erasing this column
file ⎕NERASE tn
:If (f=1)∧sym≠0
(Folder,(⍕c),'.symbol')⎕NERASE sym
:EndIf
:EndIf
⎕NUNTIE ⎕NNUMS∩tn,sym
:EndFor
:EndFor
(_Columns _Types)←keep∘/¨_Columns _Types
metafile←Folder,'meta.vecdb'
tn←metafile ⎕FTIE 0
(_Columns _Types)⎕FREPLACE tn 5
⎕FUNTIE tn
{}Close ⋄ Open,⊂Folder ⍝ Reopen
r←⍬
∇
∇ r←Query args;where;cols;groupby;col;value;ix;j;s;count;Data;Cols;summary;m;i;f;cix;calc;mapped;c;columns;map
:Access Public
(where cols groupby)←3↑args,(≢args)↓⍬ ⍬ ⍬
cols←(0≠≢cols)/,,¨eis cols
columns←Columns
:If 2=≢where ⋄ :AndIf where[1]∊columns ⍝ just a single constraint?
where←,⊂where
:EndIf
(summary cols)←ParseSummary cols
'UNKNOWN SUMMARY FUNCTION'⎕SIGNAL(∧/summary∊SummaryFns,⊂'')↓11
:If 0≠≢groupby ⍝ We are grouping
:If 1=≡groupby ⋄ groupby←,⊂groupby ⋄ :EndIf ⍝ Enclose if simple
m←(0≠≢¨summary)∨cols∊groupby ⍝ summary or one of the grouping cols?
'ONLY SUMMARIZED COLUMNS MAY BE SELECTED WHEN GROUPING'⎕SIGNAL(∧/m)↓11
:EndIf
r←0 2⍴0 ⍝ (shard indices)
:For s :In ShardSelected
Cols←s⊃Shards
count←⊃(s⊃_Counts).counter
ix←⎕NULL
:For (col value) :In where ⍝ AND them all together
:If (≢columns)<j←columns⍳⊂col
('Invalid column name in where clause: ',⍕col)⎕SIGNAL 11
:EndIf
map←mappings[j]
mapped←1=map.Type  ⍝ Mapped or Calculated
f←⊢
:If calc←(≢_CalcCols)≥cix←_CalcCols⍳⊂col
:If mapped
value←(map.symbol∊value)/mappings[_Columns⍳_CalcSources[cix]].symbol
calc←0 ⍝ Do not calculate, we did the map already
:ElseIf 3=⎕NC'map.CalcInv' ⍝ Are we able to calculate the inverse?
value←map.CalcInv value
calc←0 ⍝ Do not calculate: Just search for result of inverse
:Else ⍝ We will need to apply the function to data
f←map.Calc
:EndIf
j←_Columns⍳_CalcSources[cix]
:EndIf
:If mapped ⍝ Char field, or 'map' calculation
value←mappings[j].SymbolIndex value    ⍝ v15.0: (j⊃mappings)⍳value
:EndIf
:If calc ⍝ need to compare with f(x) rather than x
:If ⎕NULL≡ix ⍝ First time round the loop: Compare all values
ix←{⍵/⍳⍴⍵}(f count↑Cols[j].vector)∊value
:Else ⋄ ix/⍨←(f Cols[j].vector[ix])∊value
:EndIf
:Else    ⍝ /// block repeated without f in case f←⊢ would materialise data in ws
:If ⎕NULL≡ix ⋄ ix←{⍵/⍳⍴⍵}(count↑Cols[j].vector)∊value
:Else ⋄ ix/⍨←(Cols[j].vector[ix])∊value
:EndIf
:EndIf
:If 0=⍴ix ⋄ :Leave ⋄ :EndIf
:EndFor ⍝ Clause
r⍪←s ix
:EndFor ⍝ Shard
:If 0=≢cols ⋄ :GoTo 0 ⍝ Not asked to return anything: Just return indices
:ElseIf 0=≢groupby    ⍝ no group by statement
r←Read r cols
:For i :In (0≠≢¨summary)/⍳≢cols
(i⊃r)←⍎((SummaryFns⍳summary[i])⊃SummaryAPLFns),'i⊃r'
:EndFor
:Else
r←Summarize r summary cols groupby
:EndIf
∇
getGroupFn←{
cols fns groupix colix←⍵
⍝ Only one summarized column
1=≢cols:,⊂⍺,'←{(↑[0.5]⍺){⍺,',(1⊃fns),'⍵}⌸⊃⍵}'
⍝ More than one summarized column
z←⊂'r←keys ',⍺,' data'
z,←(1+1=≢groupix)⌷'keys←↑[0.5]keys' 'keys←⊃keys'
z,←⊂'r←',(⍕≢groupix,colix),'↑⍤1⊢keys{⍺,',(1⊃fns),'⍵}⌸⊃data'
z,←(1↓⍳≢colix){
'r[;',(⍕⍺+≢groupix),']←keys{',⍵,'⍵}⌸',(⍕⍺),'⊃data'
}¨1↓fns
z
}
∇ r←Summarize(ix summary cols groupby);char;m;num;s;indices;fns;cix;allix;allcols;numrecs;blksize;offset;groupfn;t;multi;split;data;recs;groupix;colix;z;sourceix;sourcecols;mapix;calccols;calcix;c;refns;regroupfn
⍝ Read and Summarize specified indices of named columns
⍝ Very similar to Read, but not public - called by Query
allix←_Columns⍳allcols←groupby∪cols
:If 0≠⍴calccols←((≢_CalcCols)≥calcix←_CalcCols⍳allcols)/⍳⍴allix
allix[calccols]←_Columns⍳_CalcSources[calcix[calccols]] ⍝ source columns for calculated cols
:EndIf
groupix←allcols⍳groupby
colix←allcols⍳cols
fns←(SummaryAPLFns,⊂'')[SummaryFns⍳summary]
refns←(ReSummaryAPLFns,⊂'')[SummaryFns⍳summary]
:If 'groupfn'≢⎕FX'groupfn'getGroupFn cols fns groupix colix ⋄ ∘∘∘ ⋄ :EndIf
:If 'regroupfn'≢⎕FX'regroupfn'getGroupFn cols refns groupix colix ⋄ ∘∘∘ ⋄ :EndIf
r←(0,≢allix)⍴0
:For (s indices) :In ↓ix
offset←0
:If indices≡⎕NULL ⍝ All records selected
blksize←numrecs←⊃(s⊃_Counts).counter
:Else ⍝ <indices> records selected
blksize←numrecs←≢indices
:EndIf
split←0     ⍝ We did it all at once
:Repeat
:Trap 1 ⍝ WS FULL
recs←blksize⌊numrecs-offset
:If indices≡⎕NULL ⍝ All records still selected
data←offset((s⊃Shards)[allix].{⍵↑⍺↓vector})recs
:Else
data←(s⊃Shards)[allix].{vector[⍵]}⊂recs↑offset↓indices
:EndIf
:For c :In calccols ⍝ /// equivalent code exists in Read: refactor someday?
(c⊃data)←mappings[(≢_Columns)+calcix[c]].Calc c⊃data
:EndFor
r⍪←data[groupix]groupfn data[colix]
offset+←blksize
⎕EX'data'
:Else ⍝ Got a WS FULL
split←1 ⍝ We had to go around again
blksize←blksize(⌈÷)2
⎕←(⍕⎕AI[3]),': block size reduced: ',⍕blksize
:If blksize<100000
∘∘∘
:EndIf
:EndTrap
:Until offset≥numrecs
:If split ⍝ re-summarize partial results
r←(↓⍉r[;groupix])regroupfn↓⍉r[;colix]
:EndIf
:EndFor
:If 1<≢ix ⍝ re-summarize partial results
r←(↓⍉r[;groupix])regroupfn↓⍉r[;colix]
:EndIf
:For char :In {⍵/⍳⍴⍵}'C'=⊃¨Types[(≢groupby)↑allix] ⍝ Symbol Group By cols
r[;char]←mappings[allix[char]].{symbol[⍵]}r[;char]
:EndFor
∇
∇ r←Read(ix cols);char;m;num;cix;s;indices;t;calcix;calccols;c;nss;six;tix
⍝ Read specified indices of named columns
:Access Public
:If 1=⍴⍴ix ⋄ ix←1,⍪⊂ix ⋄ :EndIf    ⍝ Single Shard?
:If 1=≡cols ⋄ cols←,⊂cols ⋄ :EndIf ⍝ Single simple column name
⎕SIGNAL/ValidateColumns cols
tix←six←cix←Columns⍳cols
:If 0≠⍴calccols←((≢_CalcCols)≥calcix←_CalcCols⍳cols)/⍳⍴cols
six[calccols]←_Columns⍳_CalcSources[calcix[calccols]] ⍝ source columns for calculated cols
:EndIf
r←(⍴cix)⍴⊂⍬
'Data found in unopened shard!'⎕SIGNAL(∧/ix[;1]∊ShardSelected)↓11
:For (s indices) :In ↓ix
:If indices≡⎕NULL ⋄ r←r,¨(s⊃_Counts).counter↑¨(s⊃Shards)[six].vector
:Else ⋄ r←r,¨(s⊃Shards)[six].{vector[⍵]}⊂indices ⋄ :EndIf
:EndFor
:If 0≠⍴char←{⍵/⍳≢⍵}'C'=⊃¨Types[cix] ⍝ Symbol transation
:AndIf 0≠⍴char←(m←2=⊃¨(nss←mappings[cix[char]]).⎕NC⊂'symbol')/char
r[char]←(m/nss).{symbol[⍵]}r[char]
:EndIf
:For c :In calccols~char            ⍝ Exclude char-char maps handled above
(c⊃r)←mappings[cix[c]].Calc c⊃r
:EndFor
∇
∇ r←ValidateColumns cols;bad
⍝ Return result suitable for ⎕SIGNAL/
r←''⍬
:If ~0∊⍴bad←cols~Columns
r←('Unknown Column Names:',,⍕bad)11
:EndIf
∇
∇ r←Append(cols data);length;canupdate;shards;s;growth;tn;cix;count;i;append;Cols;size;d;n
:Access Public
'Data lengths not all the same'⎕SIGNAL(1≠≢length←∪≢¨data)/11
'Col and Data counts not the same'⎕SIGNAL((≢cols)≠≢data)/11
⎕SIGNAL/ValidateColumns cols
cix←_Columns⍳cols
data←cix IndexSymbols data ⍝ Char to Symbol indices
(shards data)←(⍳≢_Columns)ShardData data
'data may only be appended to opened shards'⎕SIGNAL(∧/shards∊ShardSelected)↓11
:For s :In shards
d←data[;shards⍳s]
length←≢⊃d              ⍝ # records to be written to *this* Shard
Cols←s⊃Shards           ⍝ Mapped columns in this Shard
count←⊃(s⊃_Counts).counter ⍝ Active records in this Shard
size←≢Cols[⊃cix].vector ⍝ Current Shard allocation
:If 0≠canupdate←length⌊size-count  ⍝ Updates to existing maps
i←⊂count+⍳canupdate
i(Cols[cix]).{vector[⍺]←⍵}canupdate↑¨d
:EndIf
:If length>canupdate               ⍝ We need to extend the file
append←(≢_Columns)⍴⊂⍬
append[cix]←canupdate↓¨d       ⍝ Data which was not updated
growth←BlockSize×(length-canupdate)(⌈÷)BlockSize ⍝ How many records to add to the Shard
ExtendShard(s⊃shardfolders)Cols growth append
:EndIf
_Counts[s].counter[1]←count+length ⍝ Update (mapped) counter
:EndFor
r←0
∇
∇ {r}←Update(ix cols data);cix;indices;s;p;i
:Access Public
:If 1=≡cols ⋄ (cols data)←,∘⊂¨cols data ⋄ :EndIf ⍝ Simple col name
⎕SIGNAL/ValidateColumns cols
cix←Columns⍳cols
'Cannot update Sharding Cols'⎕SIGNAL(cix∊ShardCols)/11
data←cix IndexSymbols data
:If 1=≢ix ⋄ data←⍪data ⍝ One shard
:Else                  ⍝ Partition data by Shard
p←(≢⊃data)⍴0 ⋄ p[+\1,≢¨¯1↓ix[;2]]←1
data←↑p∘⊂¨data
:EndIf
'data must be in opened shards!'⎕SIGNAL(∧/ix[;1]∊ShardSelected)↓11
:For i :In ⍳≢ix        ⍝ Each shard
(s indices)←ix[i;]
(⊂indices)((s⊃Shards)[cix]).{vector[⍺]←⍵}data[;i]
:EndFor
r←0
∇
∇ r←Delete folder;file;tn;folders;files;f;shards
:Access Public Shared
⍝ Erase a vecdb file without opening it first (it might be too damaged to open)
⍝   Does check whether there is a meta file in the folder
⍝   Also deletes
folder←AddSlash folder
'Folder not found'⎕SIGNAL(DirExists folder)↓22           ⍝ Not there
'Not a vecdb'⎕SIGNAL(Exists file←folder,'meta.vecdb')↓22 ⍝ Paranoia
tn←file ⎕FTIE 0
folders←(⎕FREAD tn 6),⊂folder ⍝ shards first
file ⎕FERASE tn
:For folder :In folders
:If isWindows
⎕CMD'rmdir "',folder,'" /s /q'
:Else
1 _SH'rm -r ',folder
:EndIf
:EndFor
r←~DirExists folder
∇
∇ r←Erase
:Access Public
⍝ /// needs error trapping
'all shards must be open'⎕SIGNAL AllShards↓11
'vecdb is not open'⎕SIGNAL isOpen↓11
{}Close
{}Delete Folder
r←0
∇
∇ ix←ns SymbolUpdate values;m
⍝ Convert values to symbol indices, and update the file if necessary
:If ∨/m←(≢ns.symbol)<ix←ns.SymbolIndex values   ⍝ new strings found
'new strings not allowed unless all shards are open'⎕SIGNAL AllShards↓11
ns.symbol,←∪m/values             ⍝ Update in-memory symbol table
ns.symbol PutSymbols ns.file     ⍝ ... update the symbol file
ns.(SymbolIndex←symbol∘⍳)        ⍝ ... define new hashed lookup function
ix←ns.SymbolIndex values         ⍝ ... and use it
:EndIf
∇
∇ data←cix IndexSymbols data;char
⍝ Convert all char columns to indices
:If 0≠⍴char←{⍵/⍳⍴⍵}'C'=⊃¨_Types[cix]
data[char]←mappings[cix[char]]SymbolUpdate¨data[char]
:EndIf
∇
∇ r←GetSymbols file;tn;s
⍝ Read and deserialise symbol table from native file
tn←file ⎕NTIE 0 ⋄ s←⎕NREAD tn 83,⎕NSIZE tn ⋄ ⎕NUNTIE tn
:Trap 0 ⋄ r←0(220⌶)s ⍝ Deserialise
:Else ⋄ ∘ ⋄ :EndTrap ⍝ Symbol table damaged :-(
∇
∇ r←symbols PutSymbols file;tn
⍝ Serialise and write symbol table to native file
'SYMBOL TABLE FULL'⎕SIGNAL(32767<≢symbols)/11
:Trap 22
tn←file ⎕NTIE 0 ⋄ 0 ⎕NRESIZE tn
:Else ⋄ tn←file ⎕NCREATE 0 ⋄ :EndTrap
(1(220⌶)symbols)⎕NAPPEND tn 83 ⍝ Serialise and append
⎕NUNTIE tn
∇
:Section Files
⍝ Much of this can be lost in Dyalog 15.0 when new Cross-platform File System Functions Arrive :-)
∇ r←isWindows
r←'W'=3 1⊃'.'⎕WG'APLVersion'
∇
∇ f←unixfix f
⍝ replaces Windows file separator \ with Unix file separator /
⍝ this approach is mindnumbingly simple and probably dangerous
⍝ which is why we call unixfix very cautiously
:If (⊂APLVersion)∊'*nix' 'Mac' ⋄ ((f='\')/f)←'/' ⋄ :EndIf
∇
∇ r←AddSlash path;slash
⍝ Ensure folder name has trailing slash
slash←⊃('/\'∩path),'/' ⍝ use / unless path ONLY contains \
r←path,((¯1↑path)∊'/\')↓slash
∇
∇ r←Exists path;GFA
⍝ Is the argument the name of an existing file or folder?
:Select APLVersion
:Case 'Win'
'GFA'⎕NA'U4 kernel32.C32|GetFileAttributes* <0T '
r←(¯1+2*32)≢GFA⊂path
:Else
r←1
:Trap 22
:Trap 19 ⍝ file access error means file exists
⎕NUNTIE(unixfix path)⎕NTIE 0
:EndTrap
:Else
r←0
:EndTrap
:EndSelect
∇
∇ r←DirExists path;GFA
r←0
:Select APLVersion
:CaseList '*nix' 'Mac'
:Trap 11
r←0<⍴_SH'ls -adl ',unixfix path
:EndTrap
:Case 'Win'
'GFA'⎕NA'U4 kernel32.C32|GetFileAttributes* <0T '
r←⊃2 16⊤GFA⊂path
:EndSelect
∇
∇ MkDir path;CreateDirectory;GetLastError;err
⍝ Create a folder
:Select APLVersion
:CaseList '*nix' 'Mac'
:If ~DirExists path
1 _SH'mkdir ',unixfix path
('mkdir error on ',path)⎕SIGNAL 11/⍨~DirExists path
:EndIf
:Case 'Win'
⎕NA'I kernel32.C32∣CreateDirectory* <0T I4' ⍝ Try for best function
→(0≠CreateDirectory path 0)⍴0 ⍝ 0 means "default security attributes"
⎕NA'I4 kernel32.C32|GetLastError'
err ⎕SIGNAL⍨'CreateDirectory error:',⍕err←GetLastError
:EndSelect
∇
∇ {r}←{suppress}_SH cmd
⍝ SH cover to suppress any error messages
⍝ suppress will suppress error from being signaled
:If 0=⎕NC'suppress' ⋄ suppress←0 ⋄ :EndIf
r←''
:Trap 0
r←⎕SH cmd,' 2>/dev/null'
:Else
('shell command failed: ',cmd)⎕SIGNAL 11/⍨~suppress
:EndTrap
∇
∇ r←APLVersion
:Select 3↑⊃'.'⎕WG'APLVersion'
:CaseList 'Lin' 'AIX' 'Sol'
r←'*nix'
:Case 'Win'
r←'Win'
:Case 'Mac'
r←'Mac'
:Else
... ⍝ unknown version
:EndSelect
∇
:EndSection ⍝ Files
:EndClass
⍝)(!Delete!!0 0 0 0 0 0 0!0
﻿:Namespace vecdbclt
(⎕IO ⎕ML)←1 1
SERVER←''
∇ r←Clt(connection address port)
:If 1111=⊃r←##.DRC.Clt connection address port
{}⎕DL 0.5
:AndIf 1111=⊃r←##.DRC.Clt connection address port
{}⎕DL 1
:AndIf 1111=⊃r←##.DRC.Clt connection address port
{}⎕DL 3
:AndIf 1111=⊃r←##.DRC.Clt connection address port
{}⎕DL 5
:AndIf 1111=⊃r←##.DRC.Clt connection address port
(⍕r)⎕SIGNAL 11
:EndIf
∇
∇ {r}←{connection}Connect(address port user)
⍝ Connect to vecdb server process
:If 0=⎕NC'connection' ⋄ connection←'VECDB' ⋄ :EndIf
:If 0=⊃r←##.DRC.Init''
:If 0≠⍴connection ⋄ {}##.DRC.Close connection ⋄ :EndIf
:AndIf 0=⊃r←Clt connection address port
CONNECTION←2⊃r
:Else
('Error: ',,⍕r)⎕SIGNAL 11
:EndIf
∇
∇ r←SrvDo(client cmd)
⍝ Send a command to vecdb and await the result
r←SrvRcv SrvSend client cmd
∇
∇ cmd←SrvSend(client cmd);r
⍝ Return command name to wait on
:If 0=⊃r←##.DRC.Send client cmd
cmd←2⊃r
:Else
(⍕r)⎕SIGNAL 11
:EndIf
∇
∇ r←SrvRcv c;done;wr;z
⍝ Wait for result from vecdb, signal DOMAIN ERROR if it fails
:Repeat
:If ~done←∧/100 0≠1⊃r←##.DRC.Wait c 10000 ⍝ Only wait 10 seconds
:Select 3⊃r
:Case 'Error'
done←1
:Case 'Progress'
⎕←'Progress: ',4⊃r
:Case 'Receive'
:If 0=⊃r
r←4⊃r
:AndIf 0=⊃r
r←2⊃r
done←1
:Else
('Error: ',,⍕r)⎕SIGNAL 11
:EndIf
:EndSelect
:EndIf
:Until done
∇
∇ r←Open folder
⍝ Cover-function for call to Lock from a Client
r←⎕NEW vecdbproxy(folder CONNECTION)
∇
:Class vecdbproxy
⍝ Produce a vecdb proxy object for a served vecdb
∇ Open(folder connection)
:Access Public
:Implements Constructor
(FOLDER CONNECTION)←folder connection
:If 0=⊃r←##.SrvDo CONNECTION('Open'folder)
⎕DF'[vecdbclt: ',folder,']'
:Else
(⍕r)⎕SIGNAL 11
:EndIf
∇
∇ {r}←Shutdown msg
:Access Public
:If 0=⊃r←##.SrvDo CONNECTION('Shutdown'msg)
{}#.DRC.Close CONNECTION
CONNECTION←''
:EndIf
∇
∇ Close
:Access Public
:If 0=⊃r←##.SrvDo CONNECTION('Close'⍬)
{}#.DRC.Close CONNECTION
CONNECTION←''
:EndIf
∇
∇ r←Count
:Access Public
:If 0≠⍴CONNECTION
r←##.SrvDo CONNECTION('Count'(FOLDER ⍬))
r←+/r
:Else
'CONNECTION CLOSED'⎕SIGNAL 11
:EndIf
∇
∇ r←Append args
:Access Public
:If 0≠⍴CONNECTION
r←##.SrvDo CONNECTION('Append'(FOLDER args))
:Else
'CONNECTION CLOSED'⎕SIGNAL 11
:EndIf
∇
∇ r←Query args
:Access Public
:If 0≠⍴CONNECTION
r←##.SrvDo CONNECTION('Query'(FOLDER args))
:If 2=⍴⍴⊃r
r←⊃⍪/r
:Else
r←⊃,¨/r
:EndIf
:Else
'CONNECTION CLOSED'⎕SIGNAL 11
:EndIf
∇
∇ r←Read args
:Access Public
:If 0≠⍴CONNECTION
r←##.SrvDo CONNECTION('Read'(FOLDER args))
r←⊃,¨/r
:Else
'CONNECTION CLOSED'⎕SIGNAL 11
:EndIf
∇
∇ r←Update args
:Access Public
:If 0≠⍴CONNECTION
r←##.SrvDo CONNECTION('Update'(FOLDER args))
:Else
'CONNECTION CLOSED'⎕SIGNAL 11
:EndIf
∇
:EndClass
:EndNamespace
﻿:Namespace vecdbslave
(⎕IO ⎕ML)←1 1
LOGLEVEL←0
fmtts←{,'ZI4,<->,ZI2,<->,ZI2,< >,ZI2,<:>,ZI2,<:>,ZI2' ⎕FMT 1 6⍴⍵}
∇ {r}←Shutdown dummy
⍝ Shut down slave
DB.Close        ⍝ Close the vecdb
⎕EX 'DB'
done←1          ⍝ Global flag to shut down
r←⍬             ⍝ Need a result
∇
∇ Init(folder shards)
STATE←1 ⍝ Starting, 0=Running, 2=Startup Failed, 3=Shut Down
1 Log STATUS←'Startup initiated at ',fmtts ⎕TS
CONNS←TASKS←USERS←TOKENS←⍬
NEXTTASK←1000
:Trap 0
DB←⎕NEW ##.vecdb(folder shards)
STATE←0
1 Log'Slave startup completed, ',STATUS←'Folder= ',folder,', shards= ',⍕shards
:Else
STATE←2 ⍝ Startup Failed
3 Log STATUS←'Startup failed: ',∊⎕DM
∘∘∘
:EndTrap
∇
∇ {r}←Start(folder shards port);sink;data;event;obj;rc;wait;z;cmd;name
⍝ Run a vecdb Slave - based on CONGA RPCServer sample
{}##.DRC.Init''
{}##.DRC.Close name←'VECSRV'
Init folder shards
:If 0=1⊃r←##.DRC.Srv name''port'Command'
1 Log'Server ''',name,''', listening on port ',⍕port
2 Log'Handler thread started: ',⍕Run&name port
:Else
3 Log'Server failed to start: ',,⍕r
:EndIf
∇
∇ Connect cmd;task;conn
⍝ Connection Created
conn←1↓⊃(cmd='.')⊂cmd
CONNS,←⊂conn
TASKS,←task←NEXTTASK
NEXTTASK←10000|NEXTTASK+1
USERS←USERS,0
TOKENS←TOKENS,⊂''
0 Log'New connection ',conn,' assigned task id ',⍕task
∇
∇ Disconnect obj;m;i;held;task;conn
⍝ Connection Lost
conn←1↓⊃(obj='.')⊂obj
0 Log'Connection ',conn,' disconnected'
:If (⍴m)≥i←(m←~CONNS∊⊂conn)⍳0
CONNS←m/CONNS
TASKS←m/TASKS
USERS←m/USERS
TOKENS←m/TOKENS
:EndIf
∇
∇ level Log message
→(level<LOGLEVEL)⍴0
⎕←(,'ZI2,<:>,ZI2,<:>,ZI2,<.>,ZI3'⎕FMT 1 4⍴3↓⎕TS),' ',message
∇
∇ Process(obj data);r;CONNECTION;cmd;arg;close;txt
⍝ Process a call. data[1] contains function name, data[2] an argument
⍝ {}##.DRC.Progress obj('    Thread ',(⍕⎕TID),' started to run: ',,⍕data) ⍝ Send progress report
CONNECTION←obj
Conn←1↓⊃(obj='.')⊂obj
(cmd arg)←2↑data
close←0
:If (⊂cmd)∊'SetToken' 'SetUser' 'Shutdown'
r←0 (⍎cmd,' obj arg')
:ElseIf (⊂cmd)∊'Append' 'Count' 'Query' 'Update' 'Read'
:If 0≠≢(CONNS⍳⊂Conn)⊃TOKENS,⊂''
:Trap 9999
∘∘∘
:If cmd≡'Count' ⋄ r←0 DB.Count
:Else ⋄ r←0 ((DB⍎cmd) arg)
:EndIf
:Else ⋄ r←⎕EN ⎕DM
:EndTrap
:Else
close←1
r←999 ('No valid token provided for command ',⍕cmd arg)
:EndIf
:Else
r←999 ('Unsupported command: ',cmd)
:EndIf
{}##.DRC.Respond obj r
:If close
⍝ /// {{}##.DRC.Close ⍵⊣⎕DL 1}&Conn ⍝ Start thread which waits 1s then closes
:EndIf
∇
∇ r←Run(name port);sink;data;event;obj;rc;wait;z;cmd
⍝ Run the Lock Server - based on CONGA RPCServer sample
:If 0=⎕NC'start' ⋄ start←1 ⋄ :EndIf
{}##.DRC.Init''
0 Log'Thread ',(⍕⎕TID),' is now handing server ''',name,'''.'
done←0 ⍝ done←1 in function "End"
:While ~done
rc obj event data←4↑wait←##.DRC.Wait name 3000 ⍝ Time out now and again
:Select rc
:Case 0
:Select event
:Case 'Error'
:If 1119≢data ⋄ 3 Log'Error ',(⍕data),' on ',obj ⋄ :EndIf
:If ~done∨←name≡obj ⍝ Error on the listener itself?
{}##.DRC.Close obj ⍝ Close connection in error
Disconnect obj ⍝ Let logic know
:EndIf
:Case 'Receive'
:If 2≠⍴data ⍝ Command is expected to be (function name)(argument)
{}##.DRC.Respond obj(99999 'Bad command format') ⋄ :Leave
:EndIf
Process obj data ⍝ NB Single-threaded
:Case 'Connect'
Connect obj
:Else ⍝ Unexpected result?
∘
:EndSelect
:Case 100  ⍝ Time out - Insert code for housekeeping tasks here (deadlocks?)
:Case 1010 ⍝ Object Not Found
3 Log'Object ''',name,''' has been closed - RPC Server shutting down' ⋄ done←1
:Else
3 Log'Error in RPC.Wait: ',⍕wait
:EndSelect
:EndWhile
⎕DL 1 ⍝ Give responses time to complete
{}##.DRC.Close name
0 Log'Server ',name,' terminated.'
:If 2=⎕NC '#.AUTOSHUT'
:AndIf 0≠#.AUTOSHUT
⎕OFF
:EndIf
∇
∇ task←SetUser(cmd User);i;Conn
⍝ Return task ID
Conn←1↓⊃(cmd='.')⊂cmd
:If (⍴CONNS)<i←CONNS⍳⊂Conn
3 Log'SetUser ',(⍕User),' for unknown connection ',Conn
:Else
0 Log'User set to ',(⍕User),' on connection ',Conn
(i⊃USERS)←User
:EndIf
task←i⊃TASKS
∇
∇ task←SetToken(cmd Token);i;Conn
⍝ Return task ID
Conn←1↓⊃(cmd='.')⊂cmd
:If (⍴CONNS)<i←CONNS⍳⊂Conn
3 Log'SetToken ',(⍕Token),' for unknown connection ',Conn
:Else
0 Log'Token set to ',(⍕Token),' on connection ',Conn
(i⊃TOKENS)←Token
:EndIf
task←i⊃TASKS
∇
:EndNamespace
﻿:Namespace vecdbsrv
⍝ Uses #.vecdbclt
(⎕IO ⎕ML)←1 1
RUNTIME←0 ⍝ Use runtimes?
NEXTPORT←8000
fromJSON←7159⌶
∇ {r}←Start(folder port);sink;data;event;obj;rc;wait;z;cmd;name
⍝ Run a vecdb Server - based on CONGA RPCServer sample
NEXTPORT←port+1
{}##.DRC.Init''
CONFIG←fromJSON⊃⎕NGET folder,'config.json'
Init CONFIG
{}##.DRC.Close name←'VECSRV'
:If 0=1⊃r←##.DRC.Srv name''port'Command'
1 Log'Server ''',name,''', listening on port ',⍕port
2 Log'Handler thread started: ',⍕Run&name port
:Else
3 Log'Server failed to start: ',,⍕r
:EndIf
∇
∇ {r}←Shutdown msg;db;i;j;slave
⍝ Shutdown
⍝ /// Should validate user authorisation
⍝ /// Should broadcast msg to all users
:For i :In ⍳≢DBs ⍝ Close all slaves
db←i⊃DBs
:For j :In ⍳≢db.Slaves
slave←j⊃db.Slaves
{}#.DRC.Close slave.Connection
:EndFor
:EndFor
done←1          ⍝ Global flag to shut down
r←⍬             ⍝ Need a result
∇
∇ {r}←Init config;db;i;j;slave;path;ws;tn
⍝ Intialise the vecdb server
∘∘∘
:Trap 6 ⋄ source←SALT_Data.SourceFile
:Else ⋄ source←⎕WSID
:EndTrap
path←{(-⌊/(⌽⍵)⍳'\/')↓⍵}source
CONNS←TASKS←USERS←TOKENS←⍬
NEXTTASK←1000
LOGLEVEL←0
(DBs Server)←config.(DBs Server)
TOKEN←{⎕RL←0 ⋄ ⎕PP←10 ⋄ 2↓⍕?0}0
DBFolders←DBs.Folder
:For i :In ⍳≢DBs ⍝ Launch all the processes
db←i⊃DBs
tn←(db.Folder,'meta.vecdb') ⎕FSTIE 0
db.((_Columns _Types) (ShardFn ShardCols))←⎕FREAD tn (5 7)
⎕funtie tn
:For j :In ⍳≢db.Slaves
slave←j⊃db.Slaves
slave.Port←NEXTPORT
:Select slave.Launch.Type
:Case 'local'
slave.Address←'127.0.0.1' ⍝ /// for now
slave.UserId←¯1           ⍝ /// ditto
ws←path,'/vecdbboot.dws'
slave.Proc←slave.Shards Launch slave.Folder slave.Port RUNTIME ws
:Case 'ssh'
slave.Address←slave.Launch.Host
slave.UserId←¯1
ws←({(-⌊/(⌽⍵)⍳'\/')↓⍵}¯1↓slave.Folder),'/vecdbboot.dws'
slave.Proc←slave.Shards Launch slave.Folder slave.Port slave.Launch.(Host User KeyFile Cmd) ws
:Else
∘∘∘ ⍝ Unknown launch type
:EndSelect
NEXTPORT←NEXTPORT+1
:EndFor
:EndFor
:For i :In ⍳≢DBs ⍝ Now try to connect to them all
⍝ /// in future perhaps launch a thread for each one and just check status?
db←i⊃DBs
:For j :In ⍳≢db.Slaves
slave←j⊃db.Slaves
:If 0=⊃r←''#.vecdbclt.Connect slave.(Address Port UserId)
slave.Connection←2⊃r
:Else
∘∘∘ ⍝ start up failed
:EndIf
:EndFor
:EndFor
r←⍬             ⍝ Need a result
∇
∇ (sdata is)←SlavePartition(cmd slaves data);ixs;cols;new;slave;slave_recs;cix
⍝ Return sdata: command to send to each slave
⍝           is: indices into slaves
Shards←∊slaves.Shards
ShardSlaves←(≢¨slaves.Shards)/⍳≢slaves.Shards
:Select cmd
:Case 'Read'
(ixs cols)←data
slave←ShardSlaves[Shards⍳ixs[;1]]
sdata←↓(⍪slave{⊂⍵}⌸ixs),⊂cols
is←⍳≢sdata
:Case 'Update'
(ixs cols new)←data
slave←ShardSlaves[Shards⍳ixs[;1]]
slave_recs←(≢¨ixs[;2])/slave
:If 1=≡,cols ⍝ Simple column name
sdata←↓(slave{⊂⍵}⌸ixs),(⊂cols),⍪slave_recs{⊂⍵}⌸new
:Else ⍝ Multiple columns
sdata←↓(slave{⊂⍵}⌸ixs),(⊂cols),⍪{slave_recs{⊂⍵}⌸⍵}¨new
∘∘∘
:EndIf
is←⍳≢sdata
:Case 'Append'
(cols new)←data
:If ∧/db.ShardCols∊cix←db._Columns⍳cols
slave←ShardSlaves⍳(⍎db.ShardFn) new[cix⍳db.ShardCols]
sdata←{slave{⍺,⊂⍵}⌸⍵}¨new
is←(⊃sdata)[;1]        ⍝ slave indices
sdata←↓(⊂cols),⍪↓⊃,/0 1∘↓¨sdata ⍝ data pertaining to each slave
:Else
∘∘∘ ⍝ Unable to shard the data
:EndIf
:Else
sdata←,⊂data ⋄ is←(≢slaves)/1
:EndSelect
∇
∇ Process(obj data);r;CONNECTION;cmd;arg;close;txt;db;i;slave;rs;sdata;ixs;s;slaves;cmds
⍝ Process a call. data[1] contains function name, data[2] an argument
⍝ {}##.DRC.Progress obj('    Thread ',(⍕⎕TID),' started to run: ',,⍕data) ⍝ Send progress report
CONNECTION←obj
Conn←1↓⊃(obj='.')⊂obj
(cmd arg)←2↑data
close←0
:If (⊂cmd)∊'Open' 'SetUser' 'Shutdown' ⍝ Non-DB commands
:Trap 9999
r←0(⍎cmd,' obj arg')
:Else ⋄ r←⎕EN ⎕DM
:EndTrap
:ElseIf (⊂cmd)∊'Append' 'Count' 'Query' 'Update' 'Read'
:If (≢DBs)<i←DBFolders⍳arg[1]
r←999('Database not found: ',⊃arg)
:Else
slaves←(db←i⊃DBs).Slaves
(sdata ixs)←SlavePartition cmd slaves(2⊃arg)
cmds←(≢slaves)⍴⊂''
:For s :In ⍳≢slaves ⍝ Send all the commands
slave←s⊃slaves
(s⊃cmds)←#.vecdbclt.SrvSend slave.Connection(cmd((s⊃ixs)⊃sdata))
:EndFor
rs←⍬
:For s :In cmds ⍝ Receive all the results
rs,←⊂#.vecdbclt.SrvRcv s
:EndFor
r←0 rs
:EndIf
:Else
r←999('Unsupported command: ',cmd)
:EndIf
{}##.DRC.Respond obj r
:If close
⍝ /// {{}##.DRC.Close ⍵⊣⎕DL 1}&Conn ⍝ Start thread which waits 1s then closes
:EndIf
∇
∇ proc←{shards}Launch(target port runtime ws);path;runtime;args;slave;source
⍝ Launch a full vecdbsrv or, if shards is defined, a slave
:If 0=≢runtime ⋄ runtime←RUNTIME ⋄ :EndIf
:If slave←2=⎕NC'shards'
args←'VECDBSLAVE="',target,'" SHARDS="',(⍕shards),'" PORT=',(⍕port),' TOKEN="',TOKEN,'"'
:Else
args←'VECDBSRV="',target,'" PORT=',(⍕port)
:EndIf
proc←⎕NEW ##.APLProcess(ws args runtime)
∇
∇ Connect cmd;task;conn
⍝ Connection Arrived
conn←1↓⊃(cmd='.')⊂cmd
CONNS,←⊂conn
TASKS,←task←NEXTTASK
NEXTTASK←10000|NEXTTASK+1
USERS←USERS,0
0 Log'New connection ',conn,' assigned task id ',⍕task
∇
∇ Disconnect obj;m;i;held;task;conn
⍝ Connection Lost
conn←1↓⊃(obj='.')⊂obj
0 Log'Connection ',conn,' disconnected'
:If (⍴m)≥i←(m←~CONNS∊⊂conn)⍳0
task←i⊃TASKS
:If 0≠⍴held←(HELDBY=task)/RESOURCES
Release¨↓(⊂obj),[1.5]held ⍝ Release all held resources
:EndIf
QUEUES←{(⍵[;1]∊task)⌿⍵}¨QUEUES ⍝ Remove task from queues
CONNS←m/CONNS
TASKS←m/TASKS
USERS←m/USERS
:EndIf
∇
∇ level Log message
→(level<LOGLEVEL)⍴0
⎕←(,'ZI2,<:>,ZI2,<:>,ZI2,<.>,ZI3'⎕FMT 1 4⍴3↓⎕TS),' ',message
∇
∇ MockTest;assert;START;resources;nprocesses;nresources;nevents;i;conns;conn;z;s
assert←{'Assertion failed'⎕SIGNAL(⍵=0)/11}
InitLocks 0
LOGLEVEL←3 ⍝ Log everything
MOCK←1
Connect'C1'
assert(1 0)≡TASKS,USERS
SetUser'C1' 1234
assert(1 1234)≡TASKS,USERS
Connect'C2'
SetUser'C2' 4321
assert 0=Lock'C1' '/ALLOC10' ⍝ Granted
assert HELDBY≡,1             ⍝ Held by Task 1
Release'C1' '/ALLOC10'       ⍝ Release
assert HELDBY≡,0             ⍝ Should now be free
assert 0=Lock'C1' '/ALLOC10' ⍝ Granted
assert HELDBY≡,1             ⍝ Held by Task 1
assert 1=Lock'C2' '/ALLOC10' ⍝ Queued
assert(2 'C2')≡2⍴⊃QUEUES     ⍝ Task 2 is in the queue
Release'C1' '/ALLOC10'
assert HELDBY≡,2             ⍝ Should now be held by Task 2
assert 0=⊃⍴⊃QUEUES
Disconnect'C2'
assert 1=⍴TASKS
assert HELDBY≡,0             ⍝ Should now be free
Disconnect'C1'
assert 0=⍴TASKS
⍝ --- performance test ---
LOGLEVEL←3 ⍝ Erors only
nprocesses←10
nevents←1000×2×nprocesses
⎕←'Testing performance...'
Connect¨conns←'C'∘,¨⍕¨⍳nprocesses
SetUser¨↓conns,[1.5]⍳nprocesses
resources←nevents⍴('/BLAH/BLAH/ALLOC'∘,¨⍕¨⍳nprocesses),nprocesses⍴⊂'/BLAH/BLAH/ALLOC0'
START←3⊃⎕AI
:For i :In ⍳nprocesses+nevents
conn←(1+nprocesses|i-1)⊃conns
:If i≤nevents ⋄ z←Lock conn(i⊃resources) ⋄ :EndIf
:If i>nprocesses ⋄ z←Release conn((i-nprocesses)⊃resources) ⋄ :EndIf
:EndFor
s←0.001×(3⊃⎕AI)-START
⎕←(⍕nevents),' released & locked in',(1⍕s),'s (',(,' '~⍨,'CI12'⎕FMT nevents÷s),' locks/s)'
∇
∇ Notify(cmd Resource info);Conn;task
⍝ Notify connection that resource has been granted
LOCKSGRANTED+←1
:If LOGLEVEL=0
Conn←1↓⊃(cmd='.')⊂cmd
task←(CONNS⍳⊂Conn)⊃TASKS
0 Log'Lock for ',Resource,' granted to task ',task
:EndIf
:If ~MOCK
:If 0≠⊃r←#.DRC.Respond cmd(0(Resource info))
1 Log'Respond to ',cmd,' failed'
:EndIf
:EndIf
∇
∇ r←Run(name port);sink;data;event;obj;rc;wait;z;cmd
⍝ Run the Lock Server - based on CONGA RPCServer sample
:If 0=⎕NC'start' ⋄ start←1 ⋄ :EndIf
{}##.DRC.Init''
0 Log'Thread ',(⍕⎕TID),' is now handing server ''',name,'''.'
done←0 ⍝ done←1 in function "End"
:While ~done
rc obj event data←4↑wait←##.DRC.Wait name 3000 ⍝ Time out now and again
:Select rc
:Case 0
:Select event
:Case 'Error'
:If 1119≢data ⋄ 3 Log'Error ',(⍕data),' on ',obj ⋄ :EndIf
:If ~done∨←name≡obj ⍝ Error on the listener itself?
{}##.DRC.Close obj ⍝ Close connection in error
Disconnect obj ⍝ Let logic know
:EndIf
:Case 'Receive'
:If 2≠⍴data ⍝ Command is expected to be (function name)(argument)
{}##.DRC.Respond obj(99999 'Bad command format') ⋄ :Leave
:EndIf
Process obj data ⍝ NB Single-threaded
:Case 'Connect' ⍝ Ignored
Connect obj
:Else ⍝ Unexpected result?
∘
:EndSelect
:Case 100  ⍝ Time out - Insert code for housekeeping tasks here (deadlocks?)
:Case 1010 ⍝ Object Not Found
3 Log'Object ''',name,''' has been closed - RPC Server shutting down' ⋄ done←1
:Else
3 Log'Error in RPC.Wait: ',⍕wait
:EndSelect
:EndWhile
⎕DL 1 ⍝ Give responses time to complete
{}##.DRC.Close name
0 Log'Server ',name,' terminated.'
:If 2=⎕NC'#.AUTOSHUT'
:AndIf 0≠#.AUTOSHUT
⎕OFF
:EndIf
∇
∇ r←Open(cmd folder);i;Conn
⍝ Check whether a folder is serve-able
Conn←1↓⊃(cmd='.')⊂cmd
:If (⊂folder)∊DBFolders
r←0 'OK'
:Else
r←999('Database folder not found: ',folder)
:EndIf
∇
∇ task←SetUser(cmd User);i;Conn
⍝ Return task ID
Conn←1↓⊃(cmd='.')⊂cmd
:If (⍴CONNS)<i←CONNS⍳⊂Conn
3 Log'SetUser ',(⍕User),' for unknown connection ',Conn
:Else
0 Log'User set to ',(⍕User),' on connection ',Conn
(i⊃USERS)←User
:EndIf
task←i⊃TASKS
∇
∇ Test;assert;START;resources;nprocesses;nresources;nevents;i;conns;conn;z;s
⍝ This should be a stand-alone test of vecdbsrv
⍝ Assumes existence of #.TestVecdbSrv
assert←{'Assertion failed'⎕SIGNAL(⍵=0)/11}
InitLocks 0
LOGLEVEL←3 ⍝ Log everything
MOCK←1     ⍝ Do not send CONGA messages
Connect'.C1'
assert(1 0)≡TASKS,USERS
{}SetUser'.C1' 1234
assert(1 1234)≡TASKS,USERS
Connect'.C2'
{}SetUser'.C2' 4321
assert 0=Lock'.C1' '/ALLOC10' ⍝ Granted
assert HELDBY≡,1             ⍝ Held by Task 1
Release'.C1' '/ALLOC10'       ⍝ Release
assert HELDBY≡,0             ⍝ Should now be free
assert 0=Lock'.C1' '/ALLOC10' ⍝ Granted
assert HELDBY≡,1             ⍝ Held by Task 1
assert 1=Lock'.C2' '/ALLOC10' ⍝ Queued
assert(2 '.C2')≡2⍴⊃QUEUES     ⍝ Task 2 is in the queue
Release'.C1' '/ALLOC10'
assert HELDBY≡,2             ⍝ Should now be held by Task 2
assert 0=⊃⍴⊃QUEUES
Disconnect'.C2'
assert 1=⍴TASKS
assert HELDBY≡,0             ⍝ Should now be free
Disconnect'.C1'
assert 0=⍴TASKS
⍝ --- performance test ---
LOGLEVEL←3 ⍝ Erors only
nprocesses←10
nevents←1000×2×nprocesses
⎕←'Testing performance...'
Connect¨conns←'.C'∘,¨⍕¨⍳nprocesses
{}SetUser¨↓conns,[1.5]⍳nprocesses
resources←nevents⍴('/BLAH/BLAH/ALLOC'∘,¨⍕¨⍳nprocesses),nprocesses⍴⊂'/BLAH/BLAH/ALLOC0'
START←3⊃⎕AI
:For i :In ⍳nprocesses+nevents
conn←(1+nprocesses|i-1)⊃conns
:If i≤nevents ⋄ z←Lock conn(i⊃resources) ⋄ :EndIf
:If i>nprocesses ⋄ z←Release conn((i-nprocesses)⊃resources) ⋄ :EndIf
:EndFor
s←0.001×(3⊃⎕AI)-START
⎕←(⍕nevents),' released & locked in',(1⍕s),'s (',(,' '~⍨,'CI12'⎕FMT nevents÷s),' locks/s)'
∇
assert←{'Assertion failed'⎕SIGNAL(⍵=0)/11}
:EndNamespace﻿
⍝ some operator can't work in NARS2000 like ⍣
⍝ use online APL, run line by line:
⍝ https://plj541.github.io/APL.js/
⍝ http://tryapl.org/
l0 ← 4 3 ⍴ 0 0 1  0 1 1  1 0 1  1 1 1
y ← 4 1 ⍴ 0 0 1 1
syn0 ← 3 1 ⍴ 0.5069797399 0.5703818579 0.9265880619
e ← 2.718281828459045
output ← { d ← l0 +.× ⍵ ⋄ 1 ÷ 1 + e * 0 - d }
train ← { l1 ← output ⍵ ⋄ l1_err ← y - l1 ⋄ l1_delta ← l1_err × l1 × 1 - l1 ⋄ ⍵ + (⍉ l0) +.× l1_delta }
⍝ in lisp (repeat 1000 #(train 1))
⍝ (1000⍴1) ∘.train 1
⍝ in lisp (last (train each 1..1000))
⍝ 0⊥train¨ ⍳1000
⍝ in lisp (apply (repeat 1000 train) syn0)
syn0 ← (train⍣1000) syn0
l1 ← output syn0⍝ Copy from paper: U-Net CNN in APL: Exploring Zero-Framework, Zero-Library Machine Learning (https://dl.acm.org/doi/10.1145/3589246.3595371)
W←⍬ ⋄ V←⍬ ⋄ Z←⍬ ⋄ LR←1e ̄9 ⋄ MO←0.99
FWD←{
Z⊢←(≢W)⍴⊂⍬
CV←{
Z[⍺]←⊂⍵
z←(,[2+⍳3]3 3⌺⍺⊃Z)+.×,[⍳3]⍺⊃W
0⌈z⊣Z[⍺]←⊂Z[⍺],⊂z
}
CC←{
p←2÷⍨(⍴⍺⊃Z)-⍴⍵
⍵,⍨(⌊p)↓(-⌈p)↓(⍺⊃Z)
}
MX←{
⌈⌿[2],[2 3](2 2⍴2)⌺⊃Z[⍺]←⊂⍵
}
UP←{
Z[⍺]←⊂⍵
s←(2× ̄1↓⍴⍵), ̄1↑⍴⍺⊃W
s⍴0 2 1 3 4⍉⍵+.×⍺⊃W
}
C1←{
Z[⍺]←⊂⍵
1E ̄8+z÷[⍳2]+/z←*z-[⍳2]⌈/z←⍵+.×⍺⊃W
}
LA←{
⍺≥≢Z:⍵
down←(⍺+6)∇(⍺+2)MX(⍺+1)CV(⍺+0)CV ⍵
(⍺+2)CC(⍺+5)UP(⍺+4)CV(⍺+3)CV down
}
2 C1 1 CV 0 CV 3 LA ⍵⍴⍨3↑1,⍨⍴⍵
}
BCK←{
Y←⍺ ⋄ Y∆←⍵
∆←{
V[⍺]←⊂⍵+MO×(⍴⍵)⍴⍺⊃V
W[⍺]←⊂(⍺⊃W)-LR×⍺⊃V
}
∆CV←{
w←,[⍳3]⊖⌽[1]0 1 3 2⍉⍺⊃W ⋄ x←⊃⍺⊃Z
∆z←⍵×0<1⊃⍺⊃Z
∆Z← ̄2⊖ ̄2⌽[1](4+2↑⍴∆z)↑∆z
_←⍺ ∆ 3 0 1 2⍉(⍉,[⍳2]∆z)+.×,[⍳2]3 3⌺x
w+.×⍨,[2+⍳3]3 3⌺∆Z
}
∆CC←{
x←⍺⊃Z ⋄ ∆z←⍵ ⋄ d←-⌊2÷⍨2↑(⍴x)-⍴∆z
(⊃d)⊖(1⊃d)⌽[1](⍴x)↑∆z
}
∆MX←{
x←⍺⊃Z ⋄ ∆z←⍵
y×x=y←(⍴x)↑2⌿2/[1]∆z
}
∆UP←{
w←⍺⊃W ⋄ x←⍺⊃Z ⋄ ∆z←⍵
_←⍺ ∆(⍉,[⍳2]x)+.×,[⍳2]cz←(2 2⍴2)⌺∆z
(,[2+⍳3]cz)+.×⍉⍪w
}
∆C1←{
w←⍺⊃W ⋄ x←⍺⊃Z ⋄ ∆z←⍵
_←⍺ ∆(⍉,[⍳2]x)+.×,[⍳2]∆z
∆z+.×⍉w
}
∆LA←{
⍺≥≢Z:⍵ ⋄ in←⍵↑[2]⍨-2÷⍨⊃⌽⍴⍵
d←(⍺+6)∇(⍺+3)∆CV(⍺+4)∆CV(⍺+5)∆UP in
(⍺+0)∆CV(⍺+1)∆CV(⍵ ∆CC⍨⍺+2)+(⍺+2)∆MX d
}
3 ∆LA 0 ∆CV 1 ∆CV 2 ∆C1 Y∆-(~Y),[1.5]Y
}
E←{
-+⌿,⍟(⍺×⍵[;;1])+(~⍺)×⍵[;;0]
}
RUN←{
Y←⌊0.5+nm↑⍵↓⍨2÷⍨(⍴⍵)-nm←2↑⍴Y∆←FWD ⍺
Y Y∆(Y E Y∆)⊣Y BCK Y∆
}kbd←{
⍝ takes optional number of keys (default: both) as left argument and .klc file or filename as right argument
⍝ returns dfns style keyboard map with dead keys' tables below
⍝ limitations: max one character per keystroke, ignores separate CapsLock state
klc←⊃⎕NGET⍣(1=≡,⍵)⊢⍵ 1 ⍝ load file if not given as argument
⍺←⍬                    ⍝ default left arg is none
n←101 102⍳⊂⍺           ⍝ key count type
3=n:⊃⍪⌿101 102 ∇¨⊂klc  ⍝ no left arg shows both
kbd←0 76⍴''
kbd⍪←n⊃'┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬─────────┐' '┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬─────────┐'
kbd⍪←n⊃'│1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │Backspace│' '│1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │Backspace│'
kbd⍪←n⊃'│0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │         │' '│0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │         │'
kbd⍪←n⊃'├────┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬──────┤' '├────┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬──────┤'
kbd⍪←n⊃'│Tab    │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7   │' '│Tab    │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │Enter │'
kbd⍪←n⊃'│       │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6   │' '│       │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │      │'
kbd⍪←n⊃'├───────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴──────┤' '├───────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┐     │'
kbd⍪←n⊃'│Caps    │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │Enter     │' '│Caps    │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │     │'
kbd⍪←n⊃'│Lock    │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │          │' '│Lock    │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │     │'
kbd⍪←n⊃'├────────┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──────────┤' '├──────┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴────┴─────┤'
kbd⍪←n⊃'│Shift      │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │Shift       │' '│Shift │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │1 7 │Shift       │'
kbd⍪←n⊃'│           │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │            │' '│      │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │0 6 │            │'
kbd⍪←n⊃'├───────┬───┴─┬──┴───┬┴────┴────┴────┴────┴────┴┬───┴──┬─┴────┼─────┬──────┤' '├──────┴┬───┴─┬──┴───┬┴────┴────┴────┴────┴────┴┬───┴──┬─┴────┼─────┬──────┤'
kbd⍪←n⊃'│Ctrl   │Win  │Alt   │            1 7           │Alt Gr│Win   │Menu │Ctrl  │' '│Ctrl   │Win  │Alt   │            1 7           │Alt Gr│Win   │Menu │Ctrl  │'
kbd⍪←n⊃'│       │     │      │            0 6           │      │      │     │      │' '│       │     │      │            0 6           │      │      │     │      │'
kbd⍪←n⊃'└───────┴─────┴──────┴──────────────────────────┴──────┴──────┴─────┴──────┘' '└───────┴─────┴──────┴──────────────────────────┴──────┴──────┴─────┴──────┘'
kTopLeft kSpace kDecimal k102←⍕¨29 39 53 56 ⍝ scan codes
sNormal sShift sAltGr sAltGrShift←⍕¨0 1 6 7 ⍝ shift states
digits←⎕D,819⌶⎕A                            ⍝ base-36 digits
Hex4s←'[\da-f]{4}'⎕S'&'⍠1  ⍝ find four-digit hex numbers
Hex←⊃∘digits¨1+16 16⊤⊢     ⍝ decimal to hex
Char←⎕UCS 16⊥¯1+digits⍳4↑⊢ ⍝ hex to character
Symbol←(3⌊≢)⊃⊃,' ',Char    ⍝ appropriate display symbol
In←{1⍳⍨⍺∘(⊃⍷)¨⍵}¨∘⊂ ⍝ first beginning occurence of each ⍺ in ⍵
Is←∊∘⊆              ⍝ ⍺ is one of ⍵
whitesp←,∘Char¨'0009' '00a0' '007f' '2003' ⍝ tab nbsp esc emsp
visible←,∘Char¨'2409' '2419' '241B' '2422' ⍝ HT  /b   ESC EM
Visual←whitesp ⎕R visible           ⍝ show invisible symbols
Table←⍉'│'(⍪⍪⊣)(3 2⍴' @ ││',⍨2⊃,)⍪71↑2∘↓⍴⍨2,⍨(⌊¯1+2÷⍨≢) ⍝ dead key table
shiftstate layout keyname deadkey keyname←'SHIFTSTATE' 'LAYOUT' 'KEYNAME' 'DEADKEY' 'KEYNAME'In klc ⍝ section cut-off points
data←('DEADKEY'∘(⊃⍷)¨⊂⊢)deadkey↓' ',keyname↑klc ⍝ dead key sections are before key names
deadkeys←⊃⍪/(Table∘Visual Char¨∘Hex4s)¨data     ⍝ dead keys' tables
data←layout↓klc↑⍨deadkey⌊keyname                    ⍝ key data section ends at whichever section follows
data⌿⍨←⎕D∊⍨⊃¨data                                   ⍝ remove comments and blank lines
matrix←⎕CSV⍠'Separator'(⎕UCS 9)⊂'(\t)\t'⎕R'\1'⊢data ⍝ remove duplicate tabs and parse
matrix←⊃⍪⌿(⌿∘matrix)¨1 0=⊂matrix[;1]Is kTopLeft ⍝ move top left key to front
matrix←⊃⍪⌿(⌿∘matrix)¨0 1=⊂matrix[;1]Is kSpace   ⍝ move space to back
matrix⌿⍨←~matrix[;1]Is kDecimal(n⊃k102'[N/A]') ⍝ remove keys which are not shown
row←⍸matrix[;1]Is Hex¨n⊃(43,⍨29+⍳11)(86,⍨43+⍳10) ⍝ the keys to rotate
matrix←¯1⊖@row⊢matrix                            ⍝ rotate bottom to top and
matrix,←' ' ⍝ provide space as fallback
states←⎕D∩⊃¨shiftstate↓layout↑klc ⍝ extract the states' section
columns←3+⍳≢states                ⍝ the normal column is column 4
columns,←≢⍉matrix                 ⍝ fallback column if state is omitted
indicesX←⍸kbd∊'17' ⍝ indices of placeholders for Shift+ and Shift+AltGr+
indicesY←⍸kbd∊'06' ⍝ indices of placeholders for normal and AltGr+
indices←indicesX/⍨,'@'∊¨matrix[;columns[states⍳sShift,sAltGrShift]] ⍝ dead shifted keys
indices,←indicesY/⍨,'@'∊¨matrix[;columns[states⍳sNormal,sAltGr]]    ⍝ dead unshifted keys
indices+←⊂0 1                                                       ⍝ move one column right
symbols←'@'⊣¨indices                                         ⍝ one @ for each dead key
symbols,←Symbol¨,matrix[;columns[states⍳sShift,sAltGrShift]] ⍝ all the symbols for shifted keys
symbols,←Symbol¨,matrix[;columns[states⍳sNormal,sAltGr]]     ⍝ all the symbols for unshifted keys
symbols←Visual symbols                                       ⍝ substitute with control pictures
indices,←indicesX,indicesY ⍝ append the remaining indices
deadkeys⍪⍨symbols@indices⊢kbd ⍝ make all the substitutions and append dead keys' tables
}
﻿ name←make15;header
⍝ make the kbd function version 15.0 compatible
header←⊂'kbd←{'
header,←⊂'     ⍝ drop-ins for new features in 16.0'
header,←⊂'     at←{⍺←⊢                                     ⍝ Substitution: (⍺ ⍺⍺ ⍵) at ⍵⍵ in ⍵.'
header,←⊂'         0::⎕SIGNAL ⎕EN                          ⍝ signal any error to caller'
header,←⊂'         3=⎕NC''⍵⍵'':⍺ ⍺⍺ ∇∇((,⍵⊢¨~~⍵⍵ ⍵)/,⍳⍴⍵)⊢⍵  ⍝ selector is function: bool mask'
header,←⊂'         3∧.≠⎕NC 2 2⍴''⍺ ⍺⍺'':⎕SIGNAL 2            ⍝ both ⍺ and ⍺⍺ arrays: syntax err'
header,←⊂'         3≠⎕NC''⍺⍺'':⍺⍺⊣∇∇ ⍵⍵⊢⍵                    ⍝ modifier is array: substitution'
header,←⊂'         1<|≡⍵⍵:A⊣A[⍵⍵]←⍺ ⍺⍺(A←⍵)[⍵⍵]            ⍝ nested: reach/choose indexing'
header,←⊂'         I←(⊂⍵⍵)⌷[⎕IO]⍳⍴⍵                        ⍝ simple: major cell selection'
header,←⊂'         A⊣A[I]←⍺ ⍺⍺(A←⍵)[I]                     ⍝ nb: duplicate indices ignored'
header,←⊂'     }'
header,←⊂'     where←{(,⍵)/,⍳⍴⍵}           ⍝ ⍸⍵'
header,←⊂'     nest←{⊂⍣(1=≡⍵)⊢⍵}           ⍝ ⊆⍵'
header,←⊂'     ∆CSV←↑(⎕UCS 9)(1↓¨,⊂⍨⊣=,)¨⊃ ⍝ ⎕CSV (limited functionality)'
header,←⊂''
name←⎕FX header,1↓'@([^'' ])' '⍸' '⊆' '⎕CSV⍠''Separator'' ''Tab'''⎕R' at \1' ' where ' ' nest ' ' ∆CSV'⎕NR'kbd'BackSlash←{ ⍝ \ which allows expansion along multiple trailing axes with short ⍺s and (⍉⍺)∘.
0::⎕SIGNAL ⎕EN
ncs←⎕NC↑'⍺' '⍺⍺'
2 3∧.≤ncs:⍺∘.⍺⍺ ⍵ ⍝ A f\ B
0 3∧.≤ncs:⍺⍺\⍵    ⍝ f\ B
w←1/⍵
shape←⊃⌽⍴w
2=⊃ncs:⍵\⍺⍺
1=≡⍺⍺:(,⊂⍺⍺)∇∇ ⍵ ⍝ A\B
rank←≢⍴w
⍬≡⍴⍺⍺:(rank⍴⍺⍺)∇∇ w     ⍝ (⊂A1)\B
aaLen←-≢⍺⍺
aa←⍺⍺,¨1⍴¨⍨aaLen↑0.1,⍴w ⍝ A1 A2 A3\B
aa↑¨⍨←(+\¨×aa)⍳¨⍴w
pairs←aa{⍺ ⍵}¨aaLen↑aaLen↑⍳rank
⊃{⍵\[⊃⌽⍺]⍨⊃⍺}/pairs,⊂w
}
BackSlashBar←{ ⍝ ⍀ which allows expansion along multiple leading axes with short ⍺s and ∘.
0::⎕SIGNAL ⎕EN
ncs←⎕NC↑'⍺' '⍺⍺'
2 3∧.≤ncs:⍺⍺ ⍵        ⍝ ignore left
0 3∧.≤ncs:⍺⍺⍀⍵           ⍝ f⍀ B
w←1⌿⍵
shape←⊃⍴w
2=⊃ncs:⍵⍀⍺⍺
1=≡⍺⍺:(,⊂⍺⍺)∇∇ ⍵ ⍝ A⍀B
rank←≢⍴w
⍬≡⍴⍺⍺:(rank⍴⍺⍺)∇∇ w      ⍝ (⊂A1)\B
aaLen←≢⍺⍺
aa←⍺⍺,¨1⍴¨⍨aaLen↑0.1,⍨⍴w ⍝ A1 A2 A3⍀B
aa↑¨⍨←(+\¨×aa)⍳¨aaLen↑⍴w
pairs←aa{⍺ ⍵}¨aaLen↑⍳rank
⊃{⍵⍀[⊃⌽⍺]⍨⊃⍺}⌿pairs,⊂w
}
Bullet←{ ⍝ ∙ inner product/alternant
3≤⎕NC'⍺':⍺ ⍺⍺.⍵⍵ ⍵
r c←⍴⍵      ⍝ matrix ⍵
0=r:⍵⍵⌿,⍵   ⍝ zero-row case
1≥c:⍺⍺⌿,⍵   ⍝ zero/one-column case
M←~⍤1 0⍨⍳r  ⍝ minors
⍵[;⎕IO]⍺⍺.⍵⍵(∇⍤2)⍵[M;1↓⍳c]
}
CircleDiaeresis←{ ⍝ ⍥ over/depth
⍺←{⍵ ⋄ ⍺⍺}                 ⍝ monadic: pass-thorugh
3=⎕NC'⍵⍵':(⍵⍵ ⍺)⍺⍺(⍵⍵ ⍵)   ⍝ f⍥g: over
2=⎕NC'⍺⍺':⊢⍺((⍺⍺⊣⊢)∇∇ ⍵⍵)⍵  ⍝ A⍥B → (A⊣⊢)⍥B
k←⌽3⍴⌽⍵⍵                    ⍝ r → r r r    q r → r q r    p q r → p q r
n←k<0
d←|≡¨3⍴⍵ ⍺ ⍵ ⍵
(n/k)+←n/d
3 4∊⍨⎕NC'⍺':⍺⍺{⍵⍵<|≡⍵:∇¨⍵ ⋄ ⍺⍺ ⍵}(⊃k)⊢⍵ ⍝ called monadically
b←1↓k<d
⍱/b:⊢⍺ ⍺⍺ ⍵
</b:⊢⍺∘∇¨⍵
>/b:∇∘⍵¨⊢⍺
∧/b:⊢⍺ ∇¨⍵
}
﻿ CircleJot←{ ⍝ ⌾ Complex/Imaginary
⍺←0
⍺+0J1×⍵
}
DelDiaeresis←{ ⍝ ⍢ Under a.k.a. Dual
ns←⎕NULL⍴⍨15⍴0
0::⎕SIGNAL ⎕EN
2 2≡⎕NC↑'⍺' '⍺⍺':⎕SIGNAL⊂('EN' 2)('Message' 'Array left argument conflicts with array left operand')
⍺←{⍵ ⋄ ⍺⍺}      ⍝ no ⍺: pass through
⍵⍵{
aa←⍺⍺
3::0
(⎕CR'DelTilde')≡2⊃⎕CR'aa'
}⍬:ww.InvFn(ww.NrmFn ⍺)⍺⍺(ww←⍵⍵ ns).NrmFn ⍵
⍵ ⍵⍵{           ⍝ pass in original ⍵
A←⍺             ⍝ modifiable array
11::A⊣((⍺⍺)A)←⍵ ⍝ structural inversion on error...
NoOp←{0::0 ⋄ ⍵≡⍺⍺ ⍵} ⍝ Is ⍺⍺ a no-op? (or fails)
~(⍺⍺⍣¯1 ⍺⍺)NoOp ⍺:!# ⍝ ... or if imperfect inverse
⍺⍺⍣¯1⊢⍵         ⍝ try computational inverse
}(⍵⍵ ⍺)⍺⍺{          ⍝ ⍺⍺, but:
⍺←⊢                    ⍝ no ⍺: pass through
2=⎕NC'⍺⍺':⍺(⍺⍺⊣⊢)⍤0⊢⍵ ⍝ if array: treat as scalar fn
⍺ ⍺⍺ ⍵                 ⍝ else: just apply
}⍵⍵ ⍵           ⍝ ⍺ ⍺⍺ over ⍵⍵ ⍵
}
DelTilde←{ ⍝ ⍫ ⍺⍺ but with inverse ⍵⍵ represented as ns
0::⎕SIGNAL⊂⎕DMX.(('EN'EN)('Message'Message))
ns←⎕NULL⍴⍨15⍴0
⍺←⊢
⍵≢ns:⍺ ⍺⍺ ⍵
Fn←⎕NS ⍬
Fn.NrmFn←⍺⍺
Fn.InvFn←⍵⍵
Fn.Obv←1
Fn
}
Diaeresis←{ ⍝ ¨ which allows constant operand
⍺←⊢
3=⎕NC'⍺⍺':⍺ ⍺⍺¨⍵
⍺(⍺⍺⊣⊢)¨⍵
}
Divide←{ ⍝ ÷ which tries to make title case
0≠⎕NC'⍺':⍺÷⍵ ⍝ dyadic case
2|⎕DR∊⍵:÷⍵   ⍝ shortcut if all numeric
dnup←0 1∘.(819⌶)title←⎕UCS 453 456 459 498
w⊣(∊w)←dnup{
2|⎕DR ⍵:÷⍵ ⍝ numeric
11::⍵      ⍝ fallback to no-op
⍵∊⍺⍺:⊃⍵⍵/⍨∨⌿⍵=⍺⍺
⍵
}title¨∊w←⍵
}
r←{vals}DollarSign str;pats;Sub;SubFn;strings;nulls;marker ⍝ $ string enhancement ${1} for indexing into left arg, ${expr}, and \JSON escapes
:If 900⌶⍬
vals←⊢
:EndIf
str←'\\u....|\\.'⎕R{⎕JSON'"',⍵.Match,'"'}str
pats←'\$\{[\d ]+\}' '\$\{([^}'']*(''[^'']*''))*[^}'']*\}'⍝ \w ${12} ${expr}
nulls←1+⌈/0,'\x{0}+'⎕S 1⊢str
marker←nulls⍴⎕UCS 0
strings←⊃⍣(1≥|≡str)(nulls↓¨⊢⊂⍨marker∘⍷)¨⊆pats ⎕R marker⊢str
Sub←{
⍵.i←{×⍵.⎕NC'i':1+⍵.i ⋄ ⎕IO}⍵
3=≢⍵.Match:⍵.i⊃⍵⍵
Content←2(86⌶)1↓⍵.Match ⍝ in calling env
i←~⍵.PatternNum
i∧3=⎕NC'⍺⍺':⎕SIGNAL⊂('EN' 2)('Message' 'Indexing requires a left argument')
⍕((1/⍺⍺)⊃⍨⊂)⍣(~⍵.PatternNum)⊢⍺⍺ Content ⍵⍵
}
SubFn←vals Sub strings
:Trap 0
r←pats ⎕R SubFn str
:Else
⎕SIGNAL⊂⎕DMX.(('EN'EN)('Message'(OSError{⍵,2⌽(×≢⊃⍬⍴2⌽⍺,⊂'')/'") ("',o←⊃⍬⍴2⌽⍺}Message)))
:EndTrap
DownArrow←{ ⍝ ↓ which allows long ⍺ even for non-scalars
0=⎕NC'⍺':↓⍵
s←⍴⍵
l←≢¨⍺ s
≤/l:⍺↓⍵
t←-⊃l
⍺↓⍵⍴⍨t↑s,⍨1⊣¨⍺
}
DownShoe←{ ⍝ ∪ for any rank
0=⎕NC'⍺':∪⍵ ⍝ monadic case
r←⌈/1,≢∘⍴¨⍺ ⍵
(a w)←(⊢⍴⍨(-r)↑(r⍴1),⍴)¨⍺ ⍵
r=1:a∪w
(a w)←⊂⍤¯1¨a w
↑a∪w
}
DownTack←{ ⍝ ⊤ with 2s as default left argument
⍺←2
⍺⊥⍣¯1⊢⍵
}
Downstile←{ ⍝ ⌊ which allows lowercasing letters
0≠⎕NC'⍺':⍺⌊⍵ ⍝ dyadic case
2|⎕DR∊⍵:⌊⍵   ⍝ shortcut if all numeric
w⊣(∊w)←{
2|⎕DR ⍵:⌊⍵ ⍝ numeric
11::⍵      ⍝ fallback to no-op
819⌶⍵      ⍝ lowercase
}¨∊w←⍵
}
Ellipsis←{ ⍝ … Fill sequence gap (http://dfns.dyalog.com/n_to.htm)
⍺←⊢
⍺{⎕IO←0
Char←0 2∊⍨10|⎕DR                                  ⍝ character?
end←⊃⍵                                            ⍝ of sub-sequence
tail←1↓⍵                                          ⍝ to be appended
charend←Char end                                  ⍝ character ⍵?
default←⎕UCS⍣charend⊢0                            ⍝ default begin from 0
⍺←default                                         ⍝ default if monadic
charbegins←Char¨¯2↑⍺                              ⍝ character ⍺?
lead←-(2-charend)⌊(≢⍺)⌊+/charend=charbegins       ⍝ to be considered
head←lead↓⍺                                       ⍝ to be prepended
begin←(¯1⌊lead)↑¯2↑default,lead↑⍺                 ⍝ first one/two items
charend:head,tail,⍨⎕UCS(⎕UCS begin)∇ ⎕UCS end     ⍝ char sequences
from step←-⍨\2↑begin,begin+×end-begin             ⍝ step default is +/- 1
head,tail,⍨from+step×⍳0⌈1+⌊(end-from)÷step+step=0 ⍝ ⍺ thru ⍵ inclusive
}⍤1⊢⍵}
EpsilonUnderbar←{ ⍝ ⍷ but Type when monadic
0=⎕NC'⍺':⊃0⍴⊂⍵
⍺⍷⍵
}
Equals←{ ⍝ = according to TAO and with type as default left arg
⍺←⊃0⍴⊂⍵
1=≡⍺ ⍵:0 1 0[⊃1↓⍋⍺ ⍵ ⍺]
⍺ ∇¨⍵
}
:Namespace Extended
⎕IO←1 ⋄ ⎕ML←1
Err←{⍞←⍵,⎕UCS 13}
∇ {ns}←Repl target;input;n;v
2022⌶⍣('W'=⊃⊃# ⎕WG'APLVersion')⊤⍨⍬
⎕EX'⎕SE.VariantOptions'
:If ×≢target
ns←⍎(⍕target)##.⎕NS ##.⎕NL-3 4
:Else
ns←##.(⎕NS ⎕NL-3 4)
:EndIf
⍞←'Dyalog APL/',⊃⊃v←# ⎕WG'APLVersion'
⍞←(⊃v)∩'-',⎕D
⍞←' Version ',¯2↓2⊃v
⍞←n←⎕UCS 13
⍞←'Serial No : 123456',n
⍞←'Extended Edition',n
⍞←'Sun' 'Mon' 'Tue' 'Wed' 'Thu' 'Fri' 'Sat'⊃⍨1+7|2 ⎕NQ #'DateToIDN'⎕TS
⍞←' ','-- ::.'@5 8 11 14 17 20∊⍕¨0 100 100 100 100 100 1000+⎕TS
⍞←n
:While '→'≢⊃⌽' '~⍨input←⍞⊣⍞←6⍴''
:Trap 0
:Select ⊃input~' '
:Case ']'
⎕←⎕SE.UCMD input
:Case ')'
⎕←ns Execute'⎕'@(input⍳')')⊢input
:Else
⎕←ns Execute input
:EndSelect
:Else
⍞←((⊢↓⍨'⍎'=⊃)(⊃⎕DM),(×≢⎕DMX.Message)/': ',⎕DMX.Message),⎕UCS 13
⍞←('     ',10↓⊃1↓⎕DM),⎕UCS 13
⍞←('     ',10↓⊃2↓⎕DM),⎕UCS 13
:EndTrap
:EndWhile
ns.⎕EX ##.⎕NL-3 4
∇
∇ {ref}←{mode}FIX srcFile;files;file;src;code;glyph;glyphs;names;from;to;loaded;pattern
src←⍬
loaded←5177⌶⍬
pattern←'*.dyalog',⍨⊃⎕NPARTS loaded⊃⍨4,⍨⎕THIS⍳⍨⊃¨loaded
files←(⍒⊃¨⊂)⊃⎕NINFO⍠1⊢pattern
glyphs←names←0⍴⊂''
:For file :In files
code←⊃⎕NGET file 1
glyph←'⍝ (\W\S*)'⎕S'\1'⊃code
:If ≢glyph
glyphs,←glyph
names,←2⌷⎕NPARTS file
:If '}'=⊃⌽' '~⍨∊code
src,←code
:Else
src,←'∇'∘,¨@1⊢code,⊂,'∇'
:EndIf
:EndIf
:EndFor
code←⊃⎕NGET(srcFile↓⍨7×'file://'≡7↑srcFile)1
:If 900⌶⍬
mode←⊢
:EndIf
ref←mode ⎕FIX(1↑code),src,glyphs To names⊢1↓code
∇
To←{
mask←×⊃∘⍴¨⍺⍺
fromIgnore←'''[^'']*''' '⍝.*' '`(.)'
fromSlashes←'⍤/' '⍤⌿' '⍤\\' '⍤⍀' '/∘' '⌿∘' '\\∘' '⍀∘' '/⍨' '⌿⍨' '\\⍨' '⍀⍨'
fromAxes←'⊂\[([^][]+)\]' '⊇\[([^][]+)\]'
fromGlyphs←(⊂'|⌂'),'⍣' '\W' '\w\b'⎕R' *⍣ *' '\\&' '&\\b'⊢mask/⍺⍺
from←fromIgnore,fromSlashes,fromAxes,fromGlyphs
toIgnore←'&' '&' '\1'
toSlashes←'{⍺⍺⍺Slash⍵}' '{⍺⍺⍺SlashBar⍵}' '{⍺⍺⍺BackSlash⍵}' '{⍺⍺⍺BackSlashBar⍵}' '{⍺Slash⍵}∘' '{⍺SlashBar⍵}∘' '{⍺BackSlash⍵}∘' '{⍺BackSlashBar⍵}∘'  '{⍺Slash⍵}⍨' '{⍺SlashBar⍵}⍨' '{⍺BackSlash⍵}⍨' '{⍺BackSlashBar⍵}⍨'
toAxes←'((\1)LeftShoeWithAxis)' '((\1)RightShoeUnderbarWithAxis)'
toGlyphs←(⊂'({⍺←⎕NS⍬⋄⍺⊣⍺.⎕CY⍵}''dfns'').'),'^|$'⎕R' '⊢mask/⍵⍵
to←toIgnore,toSlashes,toAxes,toGlyphs
code←⍵
⍝code←'(''[^'']+'' *|"[^"]*" *)+'⎕R{
⍝    ~'"'∊'''[^'']'''⎕R''⊢⍵.Match:⍵.Match
⍝    1⌽')(⊆','''\)⌋⌉\(,''' '⌉|⌋'⎕R'"' ''⊢'''' '"([^"]+)"'⎕R('''' '⌉(,''\1'')⌋')⊢⍵.Match
⍝}code
code←'¯(?=[^0-9.])(\w+|.)'⎕R'(\1⍣¯1)'⊢code ⍝ support ¯f as f⍣¯1
from ⎕R to⊢code
}
Execute←{
names←##.⎕NL-3 4
glyphs←⊃¨'⍝ (\W\S*)'⎕S'\1'¨⊃∘##.⎕NR¨names
⍺←##.⎕NS names
85::⍬⊤⍬
1 ⍺.(85⌶)glyphs To names⊢⍵
}
:EndNamespace
GreaterThan←{ ⍝ > according to TAO and with type as default left arg
⍺←⊃0⍴⊂⍵
1=≡⍺ ⍵:1 0 0[⊃1↓⍋⍺ ⍵ ⍺]
⍺ ∇¨⍵
}
GreaterThanOrEqualTo←{ ⍝ ≥ according to TAO and with type as default left arg
⍺←⊃0⍴⊂⍵
1=≡⍺ ⍵:1 1 0[⊃1↓⍋⍺ ⍵ ⍺]
⍺ ∇¨⍵
}
Iota←{ ⍝ ⍳ generalized (Unicode version of http://dfns.dyalog.com/n_iotag.htm)
AlphaInterval←{⍵=' ':''         ⍝ ⍳' ' is empty vector.
a←⎕UCS'0AaΑαАа⁰₀Ⓐ'          ⍝ Starting points
k←⎕IO+a+.<i←1+⎕UCS ⍵        ⍝ Find starting point.
⍺←⎕UCS a[k-1]               ⍝ Default left argument.
≤/i,j←⎕UCS ⍺:⌽⍵ ∇ ⍺         ⍝ If ⍵ before ⍺, reverse.
j↓i↑⎕UCS 0,1-⎕IO-⍳⎕UCS ⍵    ⍝ Truncate character set.
}
⍝Interval←{⍺+0,+\(|d)⍴×d←⍵-⍺}    ⍝ Interval Function.
Interval←{s←×/1↓⍵,(⍺>↑⍵)/¯1     ⍝ Calculate step size
⍺-s×⎕IO-⍳⌊1-(⍺-↑⍵)÷s}       ⍝ Generate Interval
IndexOf←{i←1↓⍳⍴⍴⍺               ⍝ Enclose left arg axis.
j←(1-⍴⍴⍺)↑⍳⍴⍴⍵              ⍝ Enclose right arg axis.
m←(⍴⍺)[i]⌈(⍴⍵)[j]           ⍝ Pad both arguments.
(⊂[i]m↑[i]⍺)⍳⊂[j]m↑[j]⍵     ⍝ Get index.
}
ischar←{0 2∊⍨10|⎕DR ⍵}          ⍝ type ∊ 82 80 160 ...
m←0=⎕NC'⍺'                      ⍝ Monadic?
m∧1=⍴⍴⍵:⊃∘.,/∇¨⍵                ⍝ Vector right argument
m∧ischar ⍵:AlphaInterval ⍵      ⍝ Alpha Monadic.
m:(×⍵)×⍳|⍵                      ⍝ Integer Monadic.
s←0=⍴⍴⍺                         ⍝ Scalar Left Argument?
s∧ischar ⍵:⍺ AlphaInterval ⍵    ⍝ Alpha Interval.
s:⍺ Interval ⍵                  ⍝ Numeric Interval.
⍺ IndexOf ⍵                     ⍝ Dyadic.
}
IotaUnderbar←{ ⍝ ⍸ which allows duplicates/non-Booleans
0=⎕NC'⍺':(,⍵)/,⍳⍴⍵
i←⍵⍸⍨∪⍺
i+i(+/↑)¨⊂¯1+{≢⍵}⌸⍺
}
IotaUnderbarInverse←{ ⍝ ⍸⍣¯1 (monadic only)
shape←(~⎕IO)+⊃⌈/⍵
shape⍴¯1+{≢⍵}⌸(,⍳shape),,⍵
}
JotDiaeresis←{ ⍝ ⍤ rank/atop
⍺←⊢
2=⎕NC'⍵⍵':⍺((⍺⍺⊣⊢)⍤⍵⍵)⍵ ⍝ f⍤B and A⍤B: rank
⍺⍺ ⍺ ⍵⍵ ⍵               ⍝ f⍤g: atop
}
JotUnderbar←{ ⍝ ⍛ reverse composition X f⍛g Y ←→ (f x) g Y
⍺←{⍵ ⋄ ⍺⍺}
(⍺⍺ ⍺)⍵⍵ ⍵
}
LeftShoe←{ ⍝ ⊂ with partitioning along multiple trailing axes, with short ⍺s, and inserting/appending empty partitions
0=⎕NC'⍺':⊂⍵
0=≡⍺:⍺⊂⍵               ⍝ A⊂B
aLen←-≢⍺
1=≡⍺:⍵⊂⍨⍺↑⍨-aLen⌊-⊃⌽⍴⍵ ⍝ A1⊂B
rank←≢⍴⍵
⍬≡⍴⍺:(rank⍴⍺)∇ ⍵       ⍝ (⊂A1)⊂B
a←⍺{⍵↑⍣(1=≡⍺)⊢⍺}¨aLen↑0.1,⍴⍵ ⍝ A1 A2 A3⊂B
pairs←a{⍺ ⍵}¨aLen↑⍳rank
C←{ ⍝ ⊂[k] as k⊂
0=⎕NC'⍺':⊂[⍺⍺]⍵ ⍝ monadic case
len←⍺⍺⊃⍴1/⍵
old←len↑⍺
oldParts←⍵⊂[⍺⍺]⍨×old
empty←⊂0/[⍺⍺]⍵
PreEmpty←empty,⊂
needed←-old~0
head←⊃,/needed↑¨PreEmpty¨oldParts
tail←empty⍴⍨+/len↓⍺
head,tail
}
⊃(↑{⍵((⊃⌽⍺)C)⍨⊃⍺}¨)/⊂¨pairs,⊂⍵
}
LeftShoeStile←{ ⍝ ⍧ nub sieve;count in
0=⎕NC'⍺':(⍳≢⍵)=⍳⍨⍵⍳⍨∪⍵ ⍝ nub sieve
r←⌈/1,≢∘⍴¨⍺ ⍵
(a w)←(⊢⍴⍨(-r)↑(r⍴1),⍴)¨⍺ ⍵
+/(⊂⍤¯1⊢a)∘.≡⊂⍤(¯1+≢⍴⍺)⊢w
}
LeftShoeWithAxis←{ ⍝ ⊂[k] (as k⊂) with partitioning along multiple axes, with short ⍺s, and inserting/appending empty partitions
0=⎕NC'⍺':⊂[⍺⍺]⍵ ⍝ monadic case
0=≡⍺:⍺⊂[⍺⍺]⍵
C←{ ⍝ ⊂[k] as k⊂
0=⎕NC'⍺':⊂[⍺⍺]⍵ ⍝ monadic case
len←⍺⍺⊃⍴1/⍵
old←len↑⍺
oldParts←⍵⊂[⍺⍺]⍨×old
empty←⊂0/[⍺⍺]⍵
PreEmpty←empty,⊂
needed←-old~0
head←⊃,/needed↑¨PreEmpty¨oldParts
tail←empty⍴⍨+/len↓⍺
head,tail
}
1=≡⍺:⍺(⍺⍺ C)⍵
rank←≢⍴⍵
~⍺⍺∊⎕IO rank:⎕SIGNAL 11
⍬≡⍴⍺:(rank⍴⍺)∇ ⍵ ⍝ (⊂A1)⊂[k]B
aLen←-⍣(rank=⍺⍺)≢⍺
a←⍺{⍵↑⍣(1=≡⍺)⊢⍺}¨aLen↑(0.1⍴⍨rank=⍺⍺),(⍴⍵),(0.1⍴⍨⎕IO=⍺⍺) ⍝ A1 A2 A3⊂[k]B
pairs←a{⍺ ⍵}¨aLen↑⍳rank
⊃(↑{⍵((⊃⌽⍺)C)⍨⊃⍺}¨)/⊂¨pairs,⊂⍵
}
LessThan←{ ⍝ < according to TAO and with type as default left arg
⍺←⊃0⍴⊂⍵
1=≡⍺ ⍵:0 0 1[⊃1↓⍋⍺ ⍵ ⍺]
⍺ ∇¨⍵
}
LessThanOrEqualTo←{ ⍝ ≤ according to TAO and with type as default left arg
⍺←⊃0⍴⊂⍵
1=≡⍺ ⍵:0 1 1[⊃1↓⍋⍺ ⍵ ⍺]
⍺ ∇¨⍵
}
Minus←{ ⍝ - which allows flipping character case
0≠⎕NC'⍺':⍺-⍵ ⍝ dyadic case
2|⎕DR∊⍵:-⍵   ⍝ shortcut if all numeric
w⊣(∊w)←{
2|⎕DR ⍵:-⍵ ⍝ numeric
11::⍵      ⍝ fallback to no-op
1=⍵+.=a←0 1(819⌶)¨⍵:⊃a~⍵
⍵      ⍝ flip case
}¨∊w←⍵
}
﻿ Nand←{ ⍝ ⍲ where monadic asks for all
0=⎕NC'⍺':∨/(⊢=∘⊃0⍴⊂)∊⍵
⍺⍲⍵
}
﻿ Nor←{ ⍝ ⍱ where monadic asks for all
0=⎕NC'⍺':(⊢≡∘⊃0⍴⊂)∊⍵
⍺⍱⍵
}
NotEqualTo←{ ⍝ ≠ according to TAO and with type as default left arg
⍺←⊃0⍴⊂⍵
1=≡⍺ ⍵:1 0 1[⊃1↓⍋⍺ ⍵ ⍺]
⍺ ∇¨⍵
}
Percent←{ ⍝ % probabilistic function
t←,(1-⍺)⍺∘.×(1-⍵)⍵
3=⎕NC'⍺⍺':⊃+/t×,∘.⍺⍺⍨0 1
+⌿(⍺⍺⊤⍨4⍴2)×⍤¯1↑t
}
Run←{ ⍝ ⍵=0:return 0 on error; ⍵=1:stop on error
⍵∧.{(⍎⍵)⍺}(⎕NL ¯3)~⊣/⎕SI
}
r←∆XTN error;Assert;gmt;t11;d11;Ö;M;y11;∆XTN
∆XTN←##.∆XTN
t11←1969 7 20 20 17 40 500
d11←25403.84561
y11←25203 25404
gmt←123⌶0
Assert←{⍺←'assertion failure' ⋄ 0∊⍵:⍺ ⎕SIGNAL 8 ⋄ shy←0}
Ö←{(⍵⍵ ⍺)⍺⍺(⍵⍵ ⍵)}
M←{ ⍝ Fuzzy match
⍺≡⍵:1
(∊a)←0⊣a←⍺ ⋄ (∊w)←0⊣w←⍵ ⋄ a≢w:0
11::0
∧/⍺=Ö∊⍵:1
∧/1≥|⍺-Ö∊⍵:1
∧/1=0.7 1.5⍸⍺÷Ö∊⍵:1
0
}
:Trap 0~~error
Assert gmt M ∆XTN ⎕NULL          ⍝ scalar null
Assert t11 M ∆XTN d11            ⍝ scalar
Assert gmt M ∆XTN ⎕NULL          ⍝ empty vector
Assert t11 gmt M ∆XTN d11 ⎕NULL  ⍝ vector
Assert(0⍴⊂7⍴0)M ∆XTN ⍬           ⍝ empty vector
Assert(↑t11 gmt)M ∆XTN⍪d11 ⎕NULL ⍝ short matrix with 0
Assert(,'t')M't'∆XTN d11       ⍝ scalar-scalar null
Assert'tst'M'tst'∆XTN d11      ⍝ vector-scalar null
Assert(,'t')M't'∆XTN d11       ⍝ scalar-scalar
Assert'tst'M'tst'∆XTN d11      ⍝ vector-scalar
Assert(0⍴⊂,' ')M't'∆XTN ⍬      ⍝ scalar-empty vector
Assert(0⍴⊂'   ')M'tst'∆XTN ⍬   ⍝ vector-empty vector
Assert(,¨'tt')M't'∆XTN d11 d11 ⍝ scalar-vector
Assert'tst' 'tst'M'tst'∆XTN d11 d11       ⍝ vector-vector
Assert'tst' 'tst'M'tst' 'tst'∆XTN d11     ⍝ vectors-scalar
Assert'tst' 'tst'M'tst' 'tst'∆XTN d11 d11 ⍝ vectors-vectors
Assert'tst' 'tst'M'tst'∆XTN d11 d11            ⍝ vector-vector
r←1
:Else
r←0
:EndTrap
r←∆XTS error;Assert;gmt;t60;d60;Ö;M;y60;∆XTS
∆XTS←##.∆XTS
t60←1972 6 30 23 59 59 999
d60←26479.999999988428
y60←26298 26480
gmt←123⌶0
Assert←{⍺←'assertion failure' ⋄ 0∊⍵:⍺ ⎕SIGNAL 8 ⋄ shy←0}
Ö←{(⍵⍵ ⍺)⍺⍺(⍵⍵ ⍵)}
M←{
⍺≡⍵:1
(∊a)←0⊣a←⍺ ⋄ (∊w)←0⊣w←⍵ ⋄ a≢w:0
11::0
∧/⍺=Ö∊⍵:1
∧/1≥|⍺-Ö∊⍵:1
∧/1=0.7 1.5⍸⍺÷Ö∊⍵:1
0
}
:Trap 0~~error
Assert gmt M Ö ∆XTS 0                 ⍝ scalar null
Assert d60 M ∆XTS t60                 ⍝ scalar
Assert gmt M Ö ∆XTS ⍬                 ⍝ empty vector
Assert d60 M ∆XTS t60                 ⍝ vector
Assert 1=y60⍸∆XTS,¨,\t60              ⍝ nested; all lengths
Assert gmt gmt M Ö ∆XTS Ö↑⍬ ⍬         ⍝ empty matrix
Assert(⍪d60,∆XTS gmt)M ∆XTS 2 6↑↑t60 ⍬ ⍝ short matrix with 0
Assert(,'t')M't'∆XTS 0            ⍝ scalar-scalar null
Assert'tst'M'tst'∆XTS 0           ⍝ vector-scalar null
Assert(,'t')M't'∆XTS⊃t60          ⍝ scalar-scalar
Assert'tst'M'tst'∆XTS⊃t60         ⍝ vector-scalar
Assert(,'t')M't'∆XTS ⍬            ⍝ scalar-empty vector
Assert'tst'M'tst'∆XTS ⍬           ⍝ vector-empty vector
Assert(,'t')'t'∆XTS t60           ⍝ scalar-vector
Assert'tst'M'tst'∆XTS t60         ⍝ vector-vector
Assert(7⍴⊂'tst')M'tst'∆XTS,¨,\t60 ⍝ vector-vectors
Assert'tst' 'tst'M'tst' 'tst'∆XTS t60     ⍝ vectors-vector
Assert'tst' 'tst'M'tst'∆XTS t60 t60       ⍝ vector-vectors
Assert'tst' 'tst'M'tst' 'tst'∆XTS t60 t60 ⍝ vectors-vectors
Assert'tst' 'tst'M'tst'∆XTS(↑t60 t60)         ⍝ vector-matrix
Assert'tst' 'tst'M('tst' 'tst')∆XTS(↑t60 t60) ⍝ vectors-matrix
r←1
:Else
r←0
:EndTrap
r←{x}(f QuadColon opts)y;prev ⍝ ⍠ even for user code
:If 900⌶⍬ ⍝ monadic?
x←⊢
:EndIf
:Trap 0
r←x(f⍠opts)y
:Else
:If ⎕DMX.Message≡'Invalid use of variant'
:OrIf 1∊(⍪'⍠∧')⍷↑⎕DM
:If ×⎕SE.⎕NC'VariantOptions'
prev←⎕NS ⎕SE.VariantOptions
:Else
prev←⍬
:EndIf
'VariantOptions'⎕SE.⎕NS ⍬
{⎕SE.VariantOptions.⍎⍺,'←⍵'}/¨⊂⍣(3>|≡opts)⊢opts
:Trap 0
r←x f y
:Else
→RESIGNAL
:EndTrap
⎕SE.⎕EX'VariantOptions'
:If ≢prev
'VariantOptions'⎕SE.⎕NS prev
:EndIf
:Else
RESIGNAL:
⎕SE.⎕EX'VariantOptions'
:If ≢prev
'VariantOptions'⎕SE.⎕NS prev
:EndIf
⎕SIGNAL⊂⎕DMX.(('EN'EN)('Message'Message))
:EndIf
:EndTrap
QuadDiamond←{ ⍝ ⌺ with auto-extended ⍵⍵, allowing small ⍵, optional edge specs (0:Zero; 1:Repl; 2:Rev; 3:Mirror; 4:Wrap; -:Twist) with masks as operand's ⍺
⍺←⊢
⍬≡⍴⍺⊣⍬:(wRank⍴⍺⍴⍨≢⍴⍵)⍺⍺ ∇∇ ⍵⍵⊢⍵
extra←¯1+⌈2÷⍨⊃↓⍵⍵ ⍝ needed padding
w←⊃(⊃0⍴⍵){                           ⍝┌┌─2─┐       monadic; use ↓
(e a)←|⍺                         ⍝├ 0 0 1 1 1  dyadic; use /
T←⌽⍣(0>⊃⌽⍺)                      ⍝└──→⍺⍺←─────┐
Pad←⍵⍵⍉(T⊣)⍪⍵⍪(T⊢)               ⍝ ┌⍺┐  ⌺     │
need←(1+e),1↓⍴⍵                  ⍝ ┌─────⍵⍵──┐┘
a=0:(1↓need⍴0↑⍵)Pad(1↓need⍴0↑⊢⍵) ⍝  0 0│1 2 3 4 5│0 0  Zero
a=1:(1↓need⍴1↑⍵)Pad(1↓need⍴1↑⊖⍵) ⍝  1 1│1 2 3 4 5│5 5  Replicate
a=2:(⊖¯1↓need⍴⊢⍵)Pad(¯1↓need⍴⊖⍵) ⍝  2 1│1 2 3 4 5│5 4  Reverse
a=3:(⊖⊢1↓need⍴⊢⍵)Pad(⊢1↓need⍴⊖⍵) ⍝  3 2│1 2 3 4 5│4 3  Mirror
a=4:(⊖¯1↓need⍴⊖⍵)Pad(¯1↓need⍴⊢⍵) ⍝  4 5│1 2 3 4 5│1 2  Wrap
}(¯1⌽⍳≢⍴⍵)/(⌽extra,¨⍺⊣0),⊂⍵          ⍝     └────⍵────┘
hoods←(-extra)↓extra↓{⊂⍵}⌺⍵⍵⊢w
monad←3∊⎕NC'⍺'
monad∧⍵∨.>∘⍴⍨¯1+⊃↓⍵⍵:⎕SIGNAL 11   ⍝ monadic would be lossy
masks←{⊂⍵∘{∨/[⍵]⍺}¨⌽⍳≢⍴⍵}⌺⍵⍵⊢∘1¨w
masks(↓⍨∧↓⍨∘-)←2×extra
masks←(+/∧\∘~)¨¨⍣monad⊢masks
↑masks ⍺⍺¨hoods
}
QuestionMark←{ ⍝ ? with ⍺?¯⍵ as normal distribution with stddev ⍵ and optional mean ⍺
⍺←⊢
1<|≡⍺ ⍵ ⍵:⍺ ∇¨⍵
0≤⍵:⍺?⍵
⍺+⍵×(0.5*⍨¯2×⍟?0×⍵)×1○○2×?0×⍵
}
Rho←{ ⍝ ⍴ but allowing omitted axis with ¯1 (strict) ¯0.5 (shorten) ¯1.5 (recycle)
0::⎕SIGNAL ⎕EN
0=⎕NC'⍺':⍴⍵
i←¯1 0⍸⍺
i×←¯1*⍺=¯1
n←×/⍴⍵
s←n÷×/⍺/⍨0<⍺
⍵⍴⍨⌈@{0=i}⌊@{1=i}s@{0>⍵}⍺
}
RightShoeUnderbar←{ ⍝ ⊇ disclose if scalar / (⊂⍺)⌷⍵
×⎕NC'⍺':⍺⌷⍤0 99⊢⍵
⊃⍣(⍬≡⍴⍵)⊢⍵
}
RightShoeUnderbarWithAxis←{ ⍝ ⊇[k] as k⊇ for (⊂⍺)⌷[k]⍵
⎕SIGNAL 2~⎕NC'⍺'
⍺⌷[⍺⍺]⍤0 99⊢⍵
}
Root←{ ⍝ √ (square) root
⍺←2
⍵*÷⍺
}
SemicolonUnderbar←{⍝ ⍮ (half) pair
⍺←{⍵ ⋄ ⍺⍺}
(⊂⍺),(⊂⍵)
}
Slash←{ ⍝ / which allows replication along multiple trailing axes
0::⎕SIGNAL ⎕EN
ncs←⎕NC↑'⍺' '⍺⍺'
⍺←⊢
3≤⎕NC'⍺⍺':⍺(⍺⍺/)⍵         ⍝ {A} f/ B
aaLen←-≢⍺⍺
2=⊃ncs:⍵/⍺⍺
1=≡,⍺⍺:⍺⍺/⍵                ⍝ A/B
rank←≢⍴⍵
⍬≡⍴⍺⍺:(rank⍴⍺⍺)∇∇ ⍵       ⍝ (⊂A1)/B
aa←⍺⍺{⍵↑⍣(1=≡⍺)⊢⍺}¨aaLen↑0.1,⍴⍵      ⍝ A1 A2 A3/B
pairs←aa{⍺ ⍵}¨aaLen↑⍳rank
⊃{⍵/[⊃⌽⍺]⍨⊃⍺}/pairs,⊂⍵
}
SlashBar←{ ⍝ ⌿ which allows replication along multiple leading axes
0::⎕SIGNAL ⎕EN
ncs←⎕NC↑'⍺' '⍺⍺'
⍺←⊢
3≤⎕NC'⍺⍺':⍺(⍺⍺⌿)⍵      ⍝ A f⌿ B
aaLen←≢⍺⍺
2=⊃ncs:⍵⌿⍺⍺
1=≡,⍺⍺:⍺⍺⌿⍵            ⍝ A⌿B
rank←≢⍴⍵
⍬≡⍴⍺⍺:(rank⍴⍺⍺)∇∇ ⍵    ⍝ (⊂A1)⌿B
aa←⍺⍺{⍵↑⍣(1=≡⍺)⊢⍺}¨aaLen↑0.1,⍨⍴⍵  ⍝ A1 A2 A3⌿B
pairs←aa{⍺ ⍵}¨aaLen↑⍳rank
⊃{⍵⌿[⊃⌽⍺]⍨⊃⍺}⌿pairs,⊂⍵
}
StarDiaeresis←{ ⍝ ⍣ which allows non-scalar right operand and infinities
ns←⎕NULL⍴⍨15⍴0
⍺←⊢
val←{2=⎕NC'⍺⍺':⍺⍺ ⋄ 0}
(2=⎕NC'⍺⍺')∧(0≠≡⍵⍵ val ⍬):⍺⍺(⍺{⍺⍺(⍺ StarDiaeresis ⍵)⍵⍵}⍵)¨⍵⍵
2=⎕NC'⍺⍺':⍺(⍺⍺⊣⊢)∇∇ ⍵⍵⊢⍵
obv←⍺⍺{
aa←⍺⍺ ns
3 4::0
9=⎕nc'aa':aa.Obv
0
}⍬
obv∧3=⎕NC'⍵⍵':⍺(⍺⍺ ns).NrmFn⍣⍵⍵ ⍵
3=⎕NC'⍵⍵':⍺ ⍺⍺⍣⍵⍵ ⍵
0≠≡⍵⍵:⍺∘(⍺⍺{⍺←⊢ ⋄ ⍺ ⍺⍺ StarDiaeresis ⍵⊢⍵⍵}⍵)¨⍵⍵
0=⍵⍵:⍵
obv∧infinity≡⍵⍵:⍺(⍺⍺ ns).NrmFn⍣≡⍵
infinity≡⍵⍵:⍺ ⍺⍺⍣≡⍵
obv∧negativeInfinity≡⍵⍵:⍺(⍺⍺ ns).InvFn⍣≡⍵
negativeInfinity≡⍵⍵:⍺ ⍺⍺⍣¯1⍣≡⍵
obv∧0<⍵⍵:⍺((⍺⍺ ns).NrmFn⍣⍵⍵)DelTilde((⍺⍺ ns).InvFn⍣⍵⍵)⊢⍵
obv∧0>⍵⍵:⍺((⍺⍺ ns).InvFn⍣(|⍵⍵))DelTilde((⍺⍺ ns).NrmFn⍣(|⍵⍵))⊢⍵
⍺((⍺⍺⍣⍵⍵)DelTilde(⍺⍺⍣¯1⍣⍵⍵))⍵
}
Stile←{ ⍝ | which allows normalising letters to lowercase
0≠⎕NC'⍺':⍺|⍵ ⍝ dyadic case
2|⎕DR∊⍵:|⍵   ⍝ shortcut if all numeric
w⊣(∊w)←{
2|⎕DR ⍵:|⍵   ⍝ numeric
11::⍵        ⍝ fallback to no-op
⎕C ⍵ ⍝ normalise
}¨∊w←⍵
}
r←{x}StileTilde y;pco;perv ⍝ ⍭ prime functions
:Section dfns
pco←{⎕IO ⎕ML IO←0 1 ⎕IO             ⍝ Prime numbers.
assert←{⍺←'assertion failure' ⋄ 0∊⍵:⍺ ⎕SIGNAL 11 ⋄ 0}
sieve←{        ⍝ ⍵: m,n; compute b such that m+b/⍳n-m are all the primes between m and n
assert(0≤⍵)∧≤/⍵:
m n←⍵
0=r←n-m:⍬                   ⍝ length of boolean vector result; quick exit if 0
s←⌊n*0.5                    ⍝ largest trial divisor we need to consider
pn←×/p←2 3 5                ⍝ starter set of primes
q←∧⌿0≠p∘.|⍳pn               ⍝ starter pattern (multiples of element of p are 0)
d←⍸q                        ⍝ trial divisors; if p←2 3 5, d←1 7 11 13 17 19 23 29
b←r⍴(pn|m)⌽q                ⍝ initialize b with repetitions of the starter pattern
b[((m≤p)∧p<n)/p-m]←1        ⍝ fix up b entries for elements of p, if necessary
b[((m≤1)∧1<n)/1-m]←0        ⍝ fix up b entry for 1, if necessary
f←{                         ⍝ ⍵ is (pn×i)+j where j∊d
c←(m≤⍵)∧b[0⌈⍵-m]        ⍝ record entry for ⍵ if necessary
j2←⍵×2
k←(j2×⍵<t)+⍵-t←j2|m     ⍝ first odd multiple of ⍵
b[k+j2×⍳⌈(r-k)÷j2]←0    ⍝ cross out odd multiples of ⍵
c:b[⍵-m]←1              ⍝ restore entry for ⍵ itself if necessary
0                       ⍝ dummy result
}
b⊣{{0=⍵:0 ⋄ f ⍵}¨{(s≥⍵)/⍵}⍵+(0=⍵)↓d}¨pn×⍳⌈s÷pn
}
pi←{           ⍝ the ⍵-th prime (0-origin)
assert(0=⍴⍴⍵)∧(⍵=⌊⍵)∧0≤⍵:
'nonce error'assert ⍵≤105097564:       ⍝ use a different algorithm for large ⍵
s←100000                               ⍝ step size in PITAB
j k←(0,s)⊤⍵                            ⍝ j: # multiples of s; k: remainder mod s
m←pitab[j]                             ⍝ pitab[j] = pi j×s
0=k:m                                  ⍝ quick exit if ⍵ is a multiple of s
(⍴pitab)=j+1:m+k⌷⍸sieve m,2*31         ⍝ for the last interval
n←pitab[j+1]                           ⍝ the answer is in [m,n)
b←k>s×0.66                             ⍝ is k is in the right "half" of the interval?
f←n-m                                  ⍝ for linear interpolation between m and n
r←1⌊(÷⍣b⊢1.3)×k÷s                      ⍝ the 1.3 is a fudge factor
0=b:m+k⌷⍸sieve m,m+⌈f×r                    ⍝ look  forward from m
1=b:d+(k-s){(⍺+⍴⍵)⌷⍵}⍸sieve n,⍨d←n-⌊f×1-r  ⍝ look backward from n
}
plt←{          ⍝ the number of primes < ⍵; inverse of pi
assert 0=⍴⍴⍵:
'nonce error'assert ⍵<2*31:             ⍝ use a different algorithm for large ⍵
⍵≤2:0
(j×100000)++/sieve pitab[j←¯1+(pitab≤⍵)⍳0],⌈⍵
}
ppfx←{p4792↑⍨⌈1.25×s÷1⌈⍟s←⍵*0.5}           ⍝ slight superset of primes ≤ sqrt ⍵
ptest←{        ⍝ 1 iff ⍵ is prime
assert 0=⍴⍴⍵:
(⍵≠⌊⍵)∨2>⍵:0
'nonce error'assert ⍵<2*31:
⍵∊p4792:1
∧/0≠(ppfx ⍵)|⍵
}
factor←{       ⍝ factor integer ⍵
assert(0=⍴⍴⍵)∧(⍵=⌊⍵)∧0<⍵:
'nonce error'assert ⍵<2*31:
z←⍬{⍬≡⍵:⍺ ⋄ (⍺,t)∇ t←(0=⍵|⌊n÷×/⍺)/⍵}ppfx⊢n←⍵
{⍵[⍋⍵]}z,1~⍨⌊⍵÷×/z
}
fac2←{(b/p),[¯0.5]-2-/¯1,⍸b←2≠/0,⍨p←factor ⍵}
⍝ prime factors and exponents
p1←{⍬≡⍵:⍬ ⋄ ptest ⍬⍴⍵:⍬⍴⍵ ⋄ ∇ 1↓⍵}         ⍝ 1st prime in ⍵ (⍬ if ⍵ has no primes)
pnext←{        ⍝ the next prime larger than ⍵; pco (¯1 pco ⍵)+1 pco ⍵
assert 0=⍴⍴n←⍵:
'nonce error'assert n<2*31:
n←1⌈⌊n
5>n:2 2 3 5 5[n]
d←⍸∧⌿0≠p∘.|⍳pn←×/p←2 3 5
{×pn|⍵:⍵ ⋄ ⍬⍴(p1{(n<⍵)/⍵}⍵+d),⍵+pn}⍣=pn×⌊n÷pn
}
pprev←{        ⍝ the next prime smaller than ⍵; pco ¯1+¯1 pco ⍵
assert(0=⍴⍴n)∧2<n←⍵:
'nonce error'assert n<2*31:
n←⌈n
7≥n:0 0 0 2 3 3 5 5[n]
d←-⍸∧⌿0≠p∘.|⍳pn←×/p←2 3 5
{×pn|⍵:⍵ ⋄ ⍬⍴(p1{(n>⍵)/⍵}⍵+d),⍵-pn}⍣=pn×⌈n÷pn
}
pitab←
p4792←
0=⎕NC'⍺':pi¨⍵-IO    ⍝ (origin-dependent) ⍵-th prime
¯4=⍺:pprev¨⍵        ⍝ next prime smaller than ⍵
¯1=⍺:plt¨⍵          ⍝ number of primes less than ⍵
0=⍺:~ptest¨⍵        ⍝ 1 iff ⍵ is not prime
1=⍺:ptest¨⍵         ⍝ 1 iff ⍵ is prime
2=⍺:fac2 ⍵          ⍝ prime factors and exponents
3=⍺:factor ⍵        ⍝ prime factorization of ⍵
4=⍺:pnext¨⍵         ⍝ next prime larger than ⍵
10=⍺:sieve ⍵        ⍝ m+b/⍳⍴b are all the primes between m and n where ⍵≡m,n
assert 0
}
perv←{⍺←⊢               ⍝ Scalar pervasion
1=≡⍺ ⍵ ⍵:⍺ ⍺⍺ ⍵     ⍝ (⍺ and) ⍵ depth 0: operand fn application
⍺ ∇¨⍵      ⍝ (⍺ or) ⍵ deeper: recursive traversal.
}
:EndSection
:Trap 0
:If ×⎕NC'x'
:Select x
:Case ¯2
r←pco perv y
:Else
r←x pco perv y
:EndSelect
:Else
r←3 pco perv y
:EndIf
:Else
⎕SIGNAL⊂⎕DMX.(('EN'EN)('Message'Message))
:EndTrap
Tilde←{ ⍝ ~ generalised to 1-⍵ and major cells
0=⎕NC'⍺':1-⍵ ⍝ monadic case
r←⌈/1,≢∘⍴¨⍺ ⍵
(a w)←(⊢⍴⍨(-r)↑(r⍴1),⍴)¨⍺ ⍵
r=1:a~w
(a w)←⊂⍤¯1¨a w
↑a~w
}
TildeDiaeresis←{ ⍝ ⍨ which allows constant operand
⍺←⊢
3=⎕NC'⍺⍺':⍺ ⍺⍺⍨⍵
⍺⍺
}
Times←{ ⍝ × which allows querying/setting letter case
⍺←⊣
2|⎕DR∊⍺ ⍵:⍺×⍵   ⍝ shortcut if all numeric
1≠≡⍺ ⍵ ⍵:⍺ ∇¨⍵  ⍝ perv
2|⎕DR ⍺ ⍵:⍺×⍵   ⍝ both numeric: sign/multiply
3=⎕NC'⍺':(-⌿0 1∘.(⊢≠819⌶)⊢)⍵ ⍝ monadic: query case
326≠⎕DR ⍺ ⍵:⎕SIGNAL 11 ⍝ both char
(d l)←⍺ ⍵⌽⍨2|⎕DR ⍵ ⍝ d←case ⋄ l←character
1=d:1(819⌶)l    ⍝ upper
l←819⌶l
¯1=d:l          ⍝ lower
l(,⍨⊃⍨⍳⍨∘(819⌶))⎕UCS 453 456 459 498
}
﻿ UpArrow←{ ⍝ ↑ which allows long ⍺ even for non-scalars
0=⎕NC'⍺':↑⍵
s←⍴⍵
l←≢¨⍺ s
≤/l:⍺↑⍵
t←-⊃l
⍺↑⍵⍴⍨t↑s,⍨1⊣¨⍺
}
UpShoe←{ ⍝ ∩ for any rank, monad is self-classify
0=⎕NC'⍺':(∪∘.=⊢)⍳⍨⍵
r←⌈/1,≢∘⍴¨⍺ ⍵
(a w)←(⊢⍴⍨(-r)↑(r⍴1),⍴)¨⍺ ⍵
r=1:a∩w
(a w)←⊂⍤¯1¨a w
↑a∩w
}
UpTack←{ ⍝ ⊥ with 2 as default left argument
⍺←2
⍺⊥⍵
}
Upstile←{ ⍝ ⌈ which allows uppercasing letters
0≠⎕NC'⍺':⍺⌈⍵ ⍝ dyadic case
2|⎕DR∊⍵:⌈⍵   ⍝ shortcut if all numeric
w⊣(∊w)←{
2|⎕DR ⍵:⌈⍵ ⍝ numeric
11::⍵      ⍝ fallback to no-op
1(819⌶)⍵   ⍝ uppercase
}¨∊w←⍵
}
Vel←{ ⍝ ∨ with sort
0=⎕NC'⍺':(⊂⍒⍵)⌷⍵ ⍝ descending sort
⍺∨⍵
}
Wedge←{ ⍝ ∧ with sort
0=⎕NC'⍺':(⊂⍋⍵)⌷⍵ ⍝ ascending sort
⍺∧⍵
}
i←infinity ⍝ ∞ as largest int
i←¯1+2*31
_i←negativeInfinity ⍝ ¯∞ as smallest int
_i←-2*31
∆C←{ ⍝ ⎕C Case-insensitive/case-fold
F←{⍺←0 ⋄ 1=≡⍺ ⍵ ⍵:⍺(819⌶)⍵ ⋄ ⍺ ∇¨⍵} ⍝ Fold
N←F 1∘F ⍝ Normalise
s←⎕NC↑'⍺' '⍺⍺' ⍝ syntax
0 3≡s:⍺⍺ N ⍵ ⍝ apply to normalised argument
2 3≡s:(N ⍺)⍺⍺(N ⍵) ⍝ apply to normalised arguments
0 2≡s:⍺⍺ F ⍵ ⍝ fold to argument
2 2≡s:⍺ F N⍣⍺⍺⊢⍵ ⍝ fold optionally normalised argument
}
∆EM←{
⎕IO←0
⍺←⎕EM⍳32768
dr←⎕DR ⍵
dr=326:⍺∘∇¨⍵
11::⎕SIGNAL 11
2|dr:⎕EM ⍵
⍺∊⍨⊂⍵:⍺⍳⊂⍵
⎕SIGNAL 11
}
∆NS←{ ⍝ ⎕NS which allows names values
⍺←⊢ ⍝ default to unnamed namespace
11::⎕SIGNAL 11
(0=≢⍵)∨2≥|≡⍵:{_←⍵}⍣(2∊⎕NC'⍺')⊢⍺(⊃⎕RSI).⎕NS ⍵ ⍝ default behaviour
{_←⍵}⍣(2∊⎕NC'⍺')⊃⊃(⍺⊣⍣(2∊⎕NC'⍺')⊢⍺(⊃⎕RSI).⎕NS ⍬){ ⍝ new behaviour
(,1)≢(⍴,≡)⍵:⍺⍺(⊃⎕RSI).⍎⍺,'←⍵ ⋄ ⍺⍺' ⍝ non-⎕OR: use value
4 11::⍺⍺(⊃⎕RSI).⍎⍺,'←⎕NS ⍵ ⋄ ⍺⍺' ⍝ object?
⍺⍺(⊃⎕RSI).⍎⍺,'←⍎⎕FX ⍵ ⋄ ⍺⍺⊣⍺{⍺≡⍵:⍬ ⋄ ⎕EX ⍵}⎕FX ⍵' ⍝ function?
}¨/⍵
}
∆NSinverse←{ ⍝ ⎕NS⍣¯1
⍵∘⍎¨'⎕NL-⍳9' '⎕OR¨⎕NL-⍳9' ⍝ names values
}
∆UCS←{ ⍝ ⎕UCS which is scalar when monadic
0≠⎕NC'⍺':⍺ ⎕UCS ⍵ ⍝ dyadic case
326≠⎕DR ⍵:⎕UCS ⍵  ⍝ shortcut if homogenous
w⊣(∊w)←⎕UCS¨∊w←⍵
}:Class APLProcess
⍝ Start (and optionally dispose of) an APL Process.\\
⍝ By default the version of Dyalog APL a new process is going to be created from defines, which version
⍝ of APL will be started, be it development or runtime.\\
⍝ You can change that by first creating a parameter space by calling `CreateParms`, then making the necessary
⍝ adjustments, and finally passing that namespace as parameter to `⎕NEW` when instantiating `APLProcess`.\\
⍝ Instead of passing a parameter space to the constructor you can also pass a simple text vector, specifying a
⍝ workspace and possibly other command line parameters like, say, `MAXWS=32GB` and the like.\\
⍝ Whether it is a parameter space or a character vector, when passed as argument to `⎕NEW` is must be a nested
⍝ vecor, for example:\\
⍝ ```
⍝ ⎕NEW APLProcess (,⊂parmspace) ⍝ parameter space
⍝ ⎕NEW APLProcess (,⊂'')        ⍝ Character vector
⍝ ```
⍝
⍝ Notes:
⍝ * This class is designed for test cases that require one or more additional instances of APL for some reason.
⍝   That's why it does not offer encryption for a RIDE.\\
⍝   This restriction might be lifted at a later stage depending on demand.
⍝ * The destructor of this class will attempt to kill the process that was started (only relevant with `ait←0`).\\
⎕IO←1 ⋄ ⎕ML←1
∇ r←Version
⍝ See also `History`
:Access Public Shared
r←'APLProcess' '0.7.0' '2023-09-26'    ⍝ Without Ride all fine, with Ride the Mac is still posing problems
∇
∇ r←History
:Access Public Shared
⍝ * 0.7.0 from 2023-09-26
⍝   * Now APLProcess can use .NET or .NET Framework (former version only worked with .NET Framework)
⍝ * 0.6.0 from 2021-05-27
⍝   * BREAKING CHANGE: the property `LogFilename` has been renamed: `OutputFilename`
⍝   * With  `Wait←1` a return code is returned now
⍝   * A parameter space is now copied rather than modified
⍝   * Problems on Linux fixed
⍝   * Problems on Mac-OS fixed accept when you need a Ride
⍝ * 0.5.1 from 2021-05-08
⍝   * Bug fix: addressing APLTreeUtils2 did not always work
⍝ * 0.5.0 from 2021-05-02
⍝   * The method `Kill` has been renamed into `KillItself` and does not required a right argument anymore
⍝   * `RideInit` removed as a parameter, `RidePort` introduced instead
⍝   * `History` does return a result now
⍝   * `APLProcess` depends on `OS` now
⍝   * `KillAfter` removed - does not make much sense
⍝ * 0.4.1 from 2021-01-29
⍝   * Package config file corrected
⍝ * 0.4.0 from 2021-01-29
⍝   * Fully transformed into a Tatin package
r←↑{⍵↓⍨+/∧\∧⌿(↑⍵)=' '}{⍵↓⍨⍵⍳'⍝'}¨{⍵/⍨'⍝'=⊃¨⍵}{⍵↓⍨+/∧\(↑⍵)=' '}¨1↓⎕NR⊃⎕SI Proc
∇
:Field Public Instance Args←''              ⍝ Command line parameter (but not session_file!).
:Field Public Instance WorkspaceName←''     ⍝ Name of the workpsace to be loaded.
:Field Public Instance Exe←''               ⍝ The Dyalog EXE started by `APLProcess``.
:Field Public Instance Proc←⎕NS ''          ⍝ Instance of the .NET class `Diagnostics.Process`.
:Field Public Instance Runtime←0            ⍝ Boolean or name of runtime executable.
:Field Private Shared _Wait←1               ⍝ The default
:Field Public Shared WindowsStyleDefault←'Minimized'  ⍝ Only test cases should change this. As a consumer of this class use the Property `WindowsStyle`
:Property Wait
:Access Public Instance
⍝ Defines whether a process is started independently (Wait←0) or not (Wait←1)
∇ r←get
r←_Wait
∇
∇ set arg
'Invalid argument'Assert arg.NewValue∊0 1
_Wait←arg.NewValue
∇
:EndProperty
:Property WindowsStyle
:Access Public Instance
∇ r←get
r←_WindowsStyle
∇
:EndProperty
:Property LogFilename
:Access Public Instance
∇ r←get
r←Proc.LogFilename
∇
:EndProperty
:Property ExitCode
⍝ The exit code of the process. ¯1 means undefined.
:Access Public Instance
∇ r←get;flag
:If 0≠Proc.⎕NC⊂'ExitCode'
flag←0
:Repeat
:Trap 0
r←Proc.ExitCode
flag←1
:Else
⎕DL 0.2
:EndTrap
:Until flag
:Else
r←_ExitCode
:EndIf
∇
:EndProperty
∇ make1(y);commandline;parmSpace;rt;cmd;ws;windowStyle;buff
:Access Public Instance
:Implements Constructor
⍝ `y` becomes either `parmspace` (if it is a namespace) or `commandline` (if it is a text vector).
⍝ `parmSpace` is a parameter namespace, usually created by calling `CreateParms`; see there.
⍝ `commandline` is a text vector that will be passed on the command line, like workspace name, `maxws=` etc.
make_common
:If 2=⎕NC'y'
:AndIf (≡y)∊0 1
'Invalid right argument'Assert{16::0 ⋄ 1⊢' '=1↑0⍴⍵}y
:AndIf ' '=1↑0⍴y
commandline←y
parmSpace←⍬
:ElseIf 0≡≡y
:AndIf 9=⎕NC'y'
parmSpace←⎕NS y
commandline←⍬
:Else
'Invalid right argument: must be either a parameter space or a text vector (command line)'Assert 0
:EndIf
:If (⊂parmSpace)∊''⍬
parmSpace←CreateParms
:EndIf
:If ⍬≢commandline
buff←' '(≠⊆⊢)commandline
:If '-'≠1↑⊃buff
:AndIf ~'='∊⊃buff
parmSpace.WorkspaceName←⊃buff
buff←1↓buff
:EndIf
parmSpace.CommandLineArgs←1↓⊃,/' ',¨buff
:EndIf
'Invalid window style'Assert(⊂parmSpace.WindowsStyle)∊'Hidden' 'Maximized' 'Minimized' 'Normal'
(RidePort OUT_FILE WorkspaceName Args _Wait)←parmSpace.(RidePort OutputFilename WorkspaceName CommandLineArgs Wait)
PATH←SourcePath
Start parmSpace
∇
∇ make_common;Platform
_WindowsStyle←WindowsStyleDefault
_ExitCode←¯1
OS←(⊃⊃⎕CLASS ⎕THIS).##.OS
APLTreeUtils2←(⊃⊃⎕CLASS ⎕THIS).##.APLTreeUtils2
∇
∇ Start ps;Z;args;cmd;exe;host;keyfile;output;pid;port;psi;qdmx;ride;z
:If 0=≢ps.Exe
ps.Exe←(GetRuntimeName⍣ps.Runtime)GetCurrentExecutable ⍝ else, deduce it
:EndIf
Exe←ps.Exe
ride←''
:If 0≠ps.RidePort
ride←'RIDE_INIT="SERVE:*:',(⍕ps.RidePort),'" RIDE_SPAWNED=1 '
:Else
ride←'RIDE_INIT= '
:EndIf
args←ps.CommandLineArgs
args,←(0<≢ps.OutputFilename)/' LOG_FILE="',ps.OutputFilename,'" '
output←(1+×≢OUT_FILE)⊃'/dev/null'OUT_FILE
Proc.LogFilename←(739⌶0),'/APLProcess-Logfile-',{⎕RL←+/⎕TS ⋄ ⍕?⍵}100000
:Select APLTreeUtils2.GetOperatingSystem ⍬
:Case 'Win'
:If ~ps.Runtime
:If (,0)≡,ps.SessionFile
args,←' session_file="" '
:ElseIf (,1)≡,ps.SessionFile
ps.SessionFile←GetDefaultDseFilename ps.Exe
args,←' session_file="',ps.SessionFile,'" '
:ElseIf ' '=1↑0⍴ps.SessionFile
args,←' session_file="',ps.SessionFile,'" '
:Else
'Invalid parameter: "SessionFile"'Assert 0
:EndIf
:EndIf
cmd←ps.Exe
⎕USING←UsingSystemDiagnostics
psi←⎕NEW Diagnostics.ProcessStartInfo,⊂ps.Exe(({0=≢⍵:⍵ ⋄ '"',(⍵~'"'),'" '}ps.WorkspaceName),args)
psi.WindowStyle←Diagnostics.ProcessWindowStyle.⍎ps.WindowsStyle
Proc←Diagnostics.Process.Start psi
:If ps.Wait
Proc.WaitForExit ⍬
:EndIf
:Case 'Lin'
cmd←ride,' '
:If ps.Wait
cmd←'"',ps.Exe,'"'
:If 0≠≢ride
cmd,←' +s -q'
:EndIf
cmd,←' "',(ps.WorkspaceName~'"'),'"'
cmd,←' ',args
:If ps.RidePort=0
cmd,←' 0<&-'
:EndIf
cmd,←' 1>',output
cmd,←,' 2>',Proc.LogFilename
:Trap 0
Z←⎕SH cmd
_ExitCode←0
:Else
qdmx←⎕DMX
_ExitCode←{{⊃⊃(//)⎕VFI⌽⍵↑⍨¯1+⍵⍳' '}⌽⍵}qdmx.Message
:EndTrap
Proc.HasExited←1
:Else
cmd←'{ ',ride
cmd,←{0=≢⍵:⍵ ⋄ ⍵,' '}args
cmd,←' "',ps.Exe,'"'
:If 0≠≢ride
cmd,←' +s -q'
:EndIf
cmd,←' "',(ps.WorkspaceName~'"'),'"'
:If ps.RidePort=0
cmd,←' 0<&-'
:EndIf
cmd,←' 1>',output
cmd,←,' 2>',Proc.LogFilename
cmd,←' & }'
cmd,←'; echo $!'
pid←⎕SH cmd
Proc.Id←⊃⊃(//)⎕VFI∊pid
Proc.HasExited←0
:EndIf
Proc.StartTime←⎕TS
:Case 'Mac'
cmd←ride,' '
:If ps.Wait
cmd,←'"',ps.Exe,'" '
:If 0≠≢ride
cmd,←' +s -q'
:EndIf
cmd,←' "',(ps.WorkspaceName~' '),'"'
cmd,←{0=≢⍵:⍵ ⋄ ' ',⍵}args
:If ps.RidePort=0
cmd,←' 0<&-'
cmd,←' 1>',output
cmd,←,' 2>',Proc.LogFilename
:Else
'Riding into a runtime is not implemented yet'⎕SIGNAL 11
:EndIf
:Trap 0
Z←⎕SH cmd
_ExitCode←0
:Else
qdmx←⎕DMX
_ExitCode←{{⊃⊃(//)⎕VFI⌽⍵↑⍨¯1+⍵⍳' '}⌽⍵}qdmx.Message
:EndTrap
Proc.HasExited←1
Proc.Id←0
:Else
cmd←'{ ',cmd,' "',(ps.Exe~' '),'" "',(ps.WorkspaceName~' '),'" -c APLPPID=$PPID'
:If ps.RidePort=0
cmd,←' 0<&-'
cmd,←' 1>',output
cmd,←,' 2>',Proc.LogFilename
cmd,←'} ; echo $!'
:Else
'Riding into a runtime is not implemented yet'⎕SIGNAL 11/⍨ps.Runtime
:EndIf
pid←⎕SH cmd
Proc.Id←⊃⊃(//)⎕VFI∊pid
Proc.HasExited←0
:EndIf
Proc.StartTime←⎕TS
:EndSelect
∇
∇ Close;count;limit
:Access Public Instance
Close_
∇
∇ Close_;count;limit
:Implements Destructor
WaitForKill&(5×Wait)0.2 ⍝ Start a new thread to do the dirty work
∇
∇ r←CreateParms
:Access Public Shared
⍝ Creates a parameter namespace that will be accepted by the constructor.
⍝ | Name             | Description |
⍝ |------------------|-------------|
⍝ | `CommandLineArg` | By default empty. Optional command line parameters passed to `Exe`. (Don't specify a session file here!)|
⍝ | `Exe`            | Defaults to `''` which means that the same EXE is executed the instance was created from. Can also be a fully qualified name of the exe to be run.|
⍝ | `OutputFilename` | By default empty, meaning that any output is thrown away. If this is specified it is expected to be the name of a file.|
⍝ | `RidePort`       | By default 0 (no effect). When a positive integer > 0 this is used as port number for `RIDE_INIT`.|
⍝ | `Runtime`        | Boolean that defaults to 0. Is ignored in case `Exe` is not empty.|
⍝ | `SessionFile`    | Defaults to 0 which means no session file is loaded. A 1 will load the default DSE file. May also be the fully qualified path to a DSE file.|
⍝ | `Wait`           | Boolean that defaults to 1, meaning that APLProcess waits for the process to quit; 0 means it runs independently.|
⍝ | `WindowStyle`    | Defaults to "Minimized". May be "Hidden" or "Maximized" or "Normal" instead. Is case sensitive!|
⍝ | `WorkspaceName`  | By default empty; the fully qualified name of the workspace to be loaded.|
r←⎕NS''
r.CommandLineArgs←''
r.Exe←''
r.OutputFilename←''
r.RidePort←0
r.Runtime←0
r.SessionFile←0
r.WindowsStyle←WindowsStyleDefault
r.WorkspaceName←''
r.Wait←1
r.⎕FX'r←∆List;⎕IO' '⎕IO←⎕ML←1' 'r←{(⍵,[1.5]⎕nc¨⊂¨⍵),⍎¨⍵}(⊂''∆List'')~⍨⎕NL-2 9 3' ⍝ Vars, refs and niladic functions
∇
∇ r←GetLog
:Access Public Instance
r←''
:If ⎕NEXISTS Proc.LogFilename
r←⊃⎕NGET Proc.LogFilename
:EndIf
∇
∇ WaitForKill(limit interval);count
:If 0<≢Proc.⎕NL-2
:If ~{0::1 ⋄ ⍵.HasExited}Proc
count←0
:While ~Proc.HasExited
{}⎕DL interval
count←count+1
:Until (~Proc.HasExited)∧count>limit
:AndIf ~Proc.HasExited
⍝ OK, force has to be used
:Trap 11
{}OS.KillPID Proc.Id
:EndTrap
:EndIf
:EndIf
∇
∇ r←GetCurrentExecutable;⎕USING;t;gmfn
:If 'Win'≡APLTreeUtils2.GetOperatingSystem ⍬
r←''
'gmfn'⎕NA'U4 kernel32|GetModuleFileName* P =T[] U4'
r←⊃⍴/gmfn 0(1024⍴' ')1024
:If 0=≢r
⎕USING←UsingSystemDiagnostics
r←2 ⎕NQ'.' 'GetEnvironment' 'DYALOG'
r←r,(~(¯1↑r)∊'\/')/'/' ⍝ Add separator if necessary
r←r,(Diagnostics.Process.GetCurrentProcess.ProcessName),'.exe'
:EndIf
:Else
t←⊃1↓⎕SH'ps -o args -p $PPID'
:If '"'''∊⍨⊃t  ⍝ if command begins with ' or "
r←{⍵/⍨{∧\⍵∨≠\⍵}⍵=⊃⍵}t
:Else
r←{⍵↑⍨¯1+1⍳⍨(¯1↓0,⍵='\')<⍵=' '}t ⍝ otherwise find first non-escaped space (this will fail on files that end with '\\')
:EndIf
:EndIf
∇
∇ r←GetRuntimeName exe
⍝ Assumes that:
⍝ Windows runtime ends in "rt.exe"
⍝ *NIX runtime ends in ".rt"
r←exe
:If 'Win'≡APLTreeUtils2.GetOperatingSystem ⍬
:If 'rt.exe'≢¯6↑{('rt.ex',⍵)[⍵⍳⍨'RT.EX',⍵]}exe ⍝ deal with case insensitivity
r←'rt.exe',⍨{(~∨\⌽<\⌽'.'=⍵)/⍵}exe
:EndIf
:Else
r←exe,('.rt'≢¯3↑exe)/'.rt'
:EndIf
∇
∇ r←HasExited
:Access Public Instance
⍝ Boolean that is 1 if and only if the process started by `APLProcess` has stopped running.
⍝ Under Windows .NET tells us. On non-Windows platforms we need to check
r←0=≢Proc.Id OS.GetTaskList 0 0 0
∇
∇ r←GetPID
:Access Public Instance
⍝ Get ID of the current process
r←Proc.Id
∇
∇ {success}←KillItself;proc;qdmx;pid
:Access Public Instance
⍝ Attempts to stop the process.\\
⍝ `success` is 1 in case the process could be stopped, otherwise 0.
success←0
pid←Proc.Id
success←~OS.KillPID pid
∇
∇ path←SourcePath;source
⍝ Determine the source path of the class
:Trap 6
source←⍎'(⊃⊃⎕CLASS ⎕THIS).SALT_Data.SourceFile' ⍝ ⍎ works around a bug
:Else
:If 0=≢source←{((⊃¨⍵)⍳⊃⊃⎕CLASS ⎕THIS)⊃⍵,⊂''}5177⌶⍬
source←⎕WSID
:Else
source←4⊃source
:EndIf
:EndTrap
path←{(-⌊/(⌽⍵)⍳'\/')↓⍵}source
∇
∇ r←GetDefaultDseFilename exe;name;path
name←{⍵↑⍨1+-⌊/(⌽⍵)⍳'/\'}2 ⎕NQ #'GetEnvironment' 'Session_file'
path←{⍵↓⍨1+-⌊/(⌽⍵)⍳'/\'}exe
r←path,name
∇
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}
∇ r←IsNetCore
:Access public shared
r←(,'1')≡,2 ⎕NQ'.' 'GetEnvironment' 'DYALOG_NETCORE'
∇
∇ r←UsingSystemDiagnostics
:Access public shared
r←(1+IsNetCore)⊃'System,System.dll' 'System,System.Diagnostics.Process'
∇
:EndClass
:Class APLTreeUtils2
⍝ This is the predecessor of the namespace `APLTreeUtils`.\\
⍝ While `APLTreeUtils` was a namespace scipt designed to be included into pretty much every member of the
⍝ APLTree library, `APLTreeUtils2` is a class with shared methods. You are supposed to call those methods.
⍝ This has some major advantageous over the old approach:
⍝ * It's possible to add new functions to `APLTreeUtils2`. With the old approach there was always the possibility
⍝   of a name clash, so adding new function was practically impossible.
⍝ * The sequence of fixing does not matter (though with lazy fixing that should not be an issue anymore anyway,
⍝    but at the time of writing it still is).
⍝ * Over the years we have seen rare `⎕IO` and `⎕ML` issues with `:Include`. We just avoid the possibility now.\\
⍝ For a list with the precise differences between `APLTreeUtils` and `APLTreeUtils2` see the project ReadMe on
⍝ GitHub. Note that there are many. Most importantly, `APLTreeUtils2` requires at least Dyalog 18.0.
⍝ Kai Jaeger\\
⍝ Homepage: <https://github.com/aplteam/APLTreeUtils2/>
⎕ML←⎕IO←1
∇ r←Version
:Access Public Shared
r←'APLTreeUtils2' '1.4.0+62' '2024-03-21'
∇
∇ History
⍝ * 1.4.0 from 2024-04-21
⍝   * Left argument of `GoToWebPage` can now be 0 rather than the path to a browser EXE.
⍝ * 1.3.1 from 2023-12-01
⍝   * `CreateUUID` required to set `⎕RL` due to the fact that the seed is the same in every new namespace.
⍝ * 1.3.0 from 2023-11-05
⍝   * `ToNum` now accepts a left argument which is returned in case the right argument is an empty vector.
⍝   * New methods: `BitsToInt` and `IntToBits`
⍝ * 1.2.2 from 2023-10-09
⍝   * Minor fix in CreateUUID
⍝   * License corrected
⍝ * 1.2.1 from 2023-10-05
⍝   * Bug fix in `Create_UUID`
⍝ * 1.2.0 from 2023-05-08
⍝   * Bug fix: version number corrected
⍝ * 1.1.4 from 2023-04-09
⍝   * New function `LazyMatch` added
⍝   * Admin.Make introduced; uses the MakeHelper package which is expected in ⎕SE
⍝   * Development dependencies updated
⍝   * README polished
⍝   * Bug fix: GoToWebPage did not work on a Mac
⍝   * Internal changes
⍝     * Test cases added for perfect coverage
⍝     * acre replaced by Cider
⍝ * 1.1.3 from 2021-04-07
⍝   * `AtLeastVersion` was NOT buggy, its test case was
⍝ * 1.1.2 from 2021-04-06
⍝   * `AtLeastVersion` was buggy
⍝ * 1.1.1 from 2021-03-01
⍝   * Package config file corrected (new format)
⍝ * 1.1.0 from 2020-09-26
⍝   * Method `IsRunningAsAdmin` added
⍝ * 1.0.0 from 2020-09-06
⍝   * This is the predecessor of `APLTreeUtils`
∇
∇ r←{x}Lowercase txt
⍝ `txt` is transformed into lowercase.\\
⍝ This function is kept for compatability reasons.
:Access Public Shared
x←{0<⎕NC ⍵:⍎⍵ ⋄ ¯3}'x'
r←x ⎕C txt
∇
∇ r←Uppercase txt
⍝ `txt` is transformed into uppercase.\\
⍝ This function is kept for compatability reasons.
:Access Public Shared
r←1 ⎕C txt
∇
∇ r←IsChar y
⍝ Checks `y` for being text
:Access Public Shared
r←0 2∊⍨10|⎕DR y
∇
∇ r←{default}ToNum y
⍝ Transforms `y` into number(s).\\
⍝ In case `y` is empty `default` is returned which defaults to ⍬ (empty numeric vector).
:Access Public Shared
:If 0=≢y
:AndIf 0<⎕NC'default'
r←default
:Else
r←⊃(//)⎕VFI y
:EndIf
∇
∇ r←IsScripted y
⍝ Returns a 1 for classes, interfaces and scripted namespaces and 0 otherwise.
:Access Public Shared
r←{11 16::0 ⋄ 1⊣⎕SRC ⍵}y
∇
∇ r←x LazyMatch y
:Access Public Shared
r←(∧/x∊y)∧(∧/y∊x)
∇
∇ {r}←{msg}Assert y;EN;success
⍝ Use this to ensure certain conditions. If the condition is not met an error is signalled, otherwise a 1 is returned.\\
⍝ The optional left argument would become the message that is signalled.\\
⍝ `y` might be a scalar or a vector of length one: that must be a Boolean. 1 means "success".\\
⍝ `y` can also be a two-item vector:
⍝ 1. A Boolean as before
⍝ 2. An error number to be signalle; defaults to 11.
:Access Public Shared
r←1
msg←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'msg'
(success EN)←2↑y,11
:If (,1)≢,success
msg ⎕SIGNAL EN
:EndIf
∇
∇ r←IsDevelopment
:Access Public Shared
⍝ Returns 1 in case the function is running under a Dyalog development (EXE or DLL).
r←'Development'≡4⊃'#'⎕WG'APLVersion'
r∨←'DLL'≡4⊃'#'⎕WG'APLVersion'   ⍝ May be DLLRT instead!
∇
∇ r←{sep}SplitPath y;l
⍝ Separates the path from the filename and returns both.\\
⍝ Default for the optional left argument (the separator) are `\/`.\\
⍝ `'C:\Buffer\' 'my.txt' ←→ SplitPath 'C:\Buffer\my.txt'`
⍝ `(,¨'1.2.3.4.') (,'5') ←→ '.' SplitPath '1.2.3.4.5'`
:Access Public Shared
sep←,{0<⎕NC ⍵:⍎⍵ ⋄ '/\'}'sep'
:If 0=≢y
r←2⍴⊂y
:Else
l←1+-⌊/sep⍳⍨⌽y
r←(l↓y)(l↑y)
:EndIf
∇
∇ r←{sep}Split y;b
:Access Public Shared
⍝  `'First' 'Second' ←→ Split 'First',(⎕UCS 13 10),'Second'`\\
⍝ `(,¨'1' '2' '3' '' '4') ←→ '.' Split '1.2.3..4'`\\
⍝ That's _different_ from what `(≠⊆⊢)` is doing:\\
⍝ `(,¨'1' '2' '3' '4') ←→ '.' (≠⊆⊢) '1.2.3..4'`\\
⍝ Default for the optional left argument (the separator) is CR+LF.
sep←{0<⎕NC ⍵:⍎⍵ ⋄ ⎕UCS 13 10}'sep'
b←(1↑⍨≢sep),sep⍷y     ⍝ This is more efficient in terms of memory then doing it one one line
r←(≢sep)↓¨b⊂sep,y
∇
∇ r←{sep}Last y;where
:Access Public Shared
⍝ Returns the last part in `y`.\\
⍝ Default separator is the dot (`.`), so for a filename it would return the extension:\\
⍝ `BAT ←→ Last '/path/to/file.BAT'`\\
⍝ You can also use this to get the filename from a path:\\
⍝ `file.BAT ←→ '/\' Last '/path/to/file.BAT'`\\
⍝ Returns always a vector:\\
⍝ `(,¨'3') ←→ Last '1.2.3'`
sep←{0<⎕NC ⍵:⍎⍵ ⋄ '.'}'sep'
:If (≢y)=where←¯1+⌊/sep⍳⍨⌽,y
r←0⍴y
:ElseIf ~0 1∊⍨≡r←(-where)↑y
r←⍬⍴r
:EndIf
∇
∇ r←{x}DMB y;w
:Access Public Shared
⍝ Delete leading, trailing and multiple blanks by default. Accepts scalar, vector and matrix as argument.
x←{0<⎕NC ⍵:⍎⍵ ⋄ ' '}'x'
r←x{~0 1∊⍨≡⍵:⍺ ∇¨⍵
2=⍴⍴⍵:↑⍺ ∇¨↓⍵
(,⍺)≡,⍵:''
w←1↓¯1↓⍺{⍵/⍨~(2⍴⍺)⍷⍵}⍺,⍵,⍺
(0=⍴⍴⍵)∧1=≢w:⍬⍴⍵
w
}y
∇
∇ r←DLB y
:Access Public Shared
⍝ Delete leading blanks. Accepts scalar, vector and matrix as argument.
:If 2=|≡y
r←DLB¨y
:ElseIf 1=⍴⍴y
r←(+/∧\' '=y)↓y                 ⍝ Vectors (main application)
:ElseIf 2=⍴⍴y
r←(+/∧\' '=y)⌽y                 ⍝ Matrix
:ElseIf 0=⍴⍴y
r←(1+' '≡y)⊃y''                 ⍝ Scalar
:EndIf
∇
∇ r←DTB y
:Access Public Shared
⍝ Delete trailing blanks. Accepts scalar, vector and matrix as argument.
:If 2=|≡y
r←DTB¨y
:ElseIf 1=⍴⍴y
r←⌽{(+/∧\' '=⍵)↓⍵}⌽y            ⍝ Vectors (main application)
:ElseIf 2=⍴⍴y
r←(-+/∧⌿∧\' '=⌽y)↓[2]y          ⍝ Matrix
:ElseIf 0=⍴⍴y
r←(1+' '≡y)⊃y''                 ⍝ Scalar
:EndIf
∇
∇ {success}←{x}GoToWebPage Url;wsh;url;html;title;EncodeBlanksForNix;⎕WX;browser;rideFlag
:Access Public Shared
⍝ Fires up the default browser and displays "Url". Exception is when the current
⍝ session is connected to Ride: then "Url" is displayed in the Ride browser.\\
⍝ Instead of using the default browser you can specify an EXE (Windows) or command
⍝ as the left argument. That will then be used to show "Url". Instead the left argument
⍝ can be a `0`: thi is useful to **not** use the Ride browser when connected to Ride.
⍝ If not connected to Ride the left argument is ignored in case it is numeric.
⍝ For displaying a local file rather then a url add "file://".\\
⍝ However, note that "file://" does not work on some systems / with some browsers.\\
⍝ Returns 1 for success and 0 for failure. That can happen for example when the
⍝ Windows Scripting Host throws a DOMAIN ERROR.\\
⍝ Examples:
⍝ ~~~
⍝ GoToWebPage 'file:///c:/my.html'
⍝ GoToWebPage 'file://localhost/c:/my.html'
⍝ GoToWebPage 'http://aplwiki.com'
⍝ GoToWebPage 'https://en.wikipedia.org/wiki/Main_Page'
⍝ ~~~
⎕WX←1
success←1
url←Lowercase Url
x←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'x'
:If ' '=1↑0⍴x
browser←{'"',(⍵~'"'),'" '}⍣(0<≢x)⊢x
rideFlag←1
:Else
rideFlag←⊃x
browser←''
:EndIf
:If ∨/'file:'{⍺≡(≢⍺)↑⍵}url
:If 'Win'≡GetOperatingSystem ⍬
Url←'"',('"'~⍨'file://'{⍺,(≢⍺)↓⍵}Url),'"'
:EndIf
:ElseIf ∨/'https:'{⍺≡(≢⍺)↑⍵}url
Url←'https://'{⍺,(≢⍺)↓⍵}Url
:ElseIf ∨/'http:'{⍺≡(≢⍺)↑⍵}url
Url←'http://'{⍺,(≢⍺)↓⍵}Url
:Else
:If ∨/'//:'∊Url  ⍝ Any protocol at all?!
⍝ ? No idea what that protocol is, so we just allow it going through.
:Else
Url←'https://',Url    ⍝ That's the default
:EndIf
:EndIf
(('\'=Url)/Url)←'/'
Url←{l←3+1⍳⍨'://'⍷⍵ ⋄ (l↑⍵),{(~'//'⍷⍵)/⍵}l↓Url}Url
:If 3501⌶⍬ ⍝ Connected to Ride?
:AndIf rideFlag
:If 'file://'{⍺≡(≢⍺)↑⍵}Url
⍝Url←∊(⊂'\ ')@(⍸' '=Url)⊣Url
Url←(≢'file://')↓Url
html←⊃⎕NGET Url 1
:If 0=≢title←'<title'{{⍵↑⍨¯1+⍵⍳'<'}⍵↓⍨(≢⍺)+1⍳⍨⍺⍷⍵}∊html
title←Url
:EndIf
success←0=title(3500⌶)∊html
:Else
html←'<html>' '<head>'
html,←⊂'<meta http-equiv="refresh" content="0;url=',Url,'" />'
html,←'</head>' '</html>'
success←0=Url(3500⌶)∊html
:EndIf
:Else
:Select GetOperatingSystem ⍬
:Case 'Win'
'wsh'⎕WC'OLEClient' 'WScript.Shell'
:Trap 11
:If 0=≢browser
{}wsh.Run Url
:Else
{}wsh.Run browser,Url
:EndIf
:Else
success←0
:EndTrap
:Case 'Lin'
:Trap 11
:If 0=≢browser
{}⎕SH'xdg-open ',Url,'</dev/null > /dev/null 2>&1 &'
:Else
{}⎕SH browser,' ',Url,'</dev/null > /dev/null 2>&1 &'
:EndIf
:Else
success←0
:EndTrap
:Case 'Mac'
:Trap 11
{}⎕SH'open -a Safari ',Url
:Else
success←0
:EndTrap
:EndSelect
:EndIf
∇
∇ r←IsRunningAsAdmin;IsUserAnAdmin
⍝ Tells whether this process is being "Run as Administrator" (Windows) or has sudo rights (others)
:Access Public Shared
:If 'Win'≡APLTreeUtils2.GetOperatingSystem''
:Trap r←0
r←⍎⎕NA'I Shell32|IsUserAnAdmin'
:EndTrap
:Else
r←{∨/' sudo '⍷' ',⍵,' '}⊃⎕SH'groups ',⎕AN
:EndIf
∇
∇ r←GetOperatingSystem dummy
:Access Public Shared
⍝ Returns one of: "Win", "Mac", "AIX", "Lin".\\
⍝ Note that under Linux you might need more information.
r←3↑⊃'.'⎕WG'APLVersion'
∇
∇ r←Create_UUID
⍝ Produces a UUID
:Access Public Shared
⎕RL[1]←⊂⍬
r←'-'@(4+5×⍳4)⊢(⎕D,⎕C ⎕A)[4(9+|)@20⊢5@15?36⍴16]
∇
∇ r←{type}Base64 txt;charset
:Access Public Shared
⍝ Base64 encoding and decoding. `txt` must be a simple character vector.
⍝ The function works out what to do.\\
⍝ Note that this function is **_not_** designed to convert large amounts of data.
⍝ `type` defaults to 1 which specifies the default alphabet: `[a-zA-z0-9+/=]`.\\
⍝ If you want a file and URL-save alphabet specify `type` as 2. Then `- is used instead of `+`, and `_` instead of `/`.\\
⍝ See [RFC 4648](http://www.rfc-editor.org/rfc/rfc4648.txt) for details.\\
⍝ Whitespace in `txt` is ignored on decode.
type←{0<⎕NC ⍵:⍎⍵ ⋄ 1}'type'
:If (,1)≡,type
charset←'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
:ElseIf (,2)≡,type
charset←'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'
:Else
'Invalid left argument: "type" must be either 1 or 2'⎕SIGNAL 11
:EndIf
:If ∧/('='~⍨∪txt)∊charset
r←charset base64 txt
:Else
r←charset base64'UTF-8'⎕UCS txt
:EndIf
∇
∇ r←{currentVersion}AtLeastVersion min
:Access Public Shared
⍝ Returns 1 if the currently running version is at least `min`.\\
⍝ If the current version is 17.1 then:\\
⍝ `1 1 1 0 ←→ AtLeastVersion¨16 17 17.1 18`\\
⍝ You may specify a version different from the currently running one via `⍺`:\\
⍝ `1 1 0 0 ←→ 17 AtLeastVersion¨16 17 17.1 18`
currentVersion←{0<⎕NC ⍵:⍎⍵ ⋄ {⊃⊃(//)⎕VFI ⍵/⍨2>+\⍵='.'}2⊃'#'⎕WG'APLVersion'}'currentVersion'
'Right argument must be length 1'⎕SIGNAL 11/⍨1≠≢min
r←⊃min≤currentVersion
∇
∇ r←{length}FormatDateTime ts;ts2;formatstring;bool;buffer
:Access Public Shared
⍝ Formats the right argument (defaults to `⎕TS` if empty) as a string with 'YYYY-MM-DD hh:mm:ss by default\\
⍝ The right argument can be one of:
⍝ * A single float (like 20120102030405) representing date and time.
⍝ * A simple vector of length 6 or 7 representing a timestamp (`⎕TS`).
⍝ * A matrix of either floats or vectors (length 6 or 7) representing a DateTime.
⍝ Note that you cannot mix floats and time stamps.\\
⍝ If the right argument has not 7 but 6 or 3 elements, formatting is done accordingly.\\
⍝ Via the left argument the length can be set to
⍝ ⍬, 3, 6 or 7; default is 6; ⍬ Accepts any length of the right argument which is 3, 6 or 7.\\
⍝ If the right argument is a...
⍝ * simple vector, a string is returned.
⍝ * matrix, a matrix is returned.
:If 645≡⎕DR ts
:If (⍴⍴ts)∊0 1
:If 1=≢ts
ts←{0=≢,⍵:⍬ ⋄ ⎕ML←3 ⋄ ⍎¨(4 2 2 2 2 2/⍳6)⊂14 0⍕⍵}ts
:EndIf
:Else
ts←↑,{0=⍵:6⍴0 ⋄ v←14 0⍕⍵ ⋄ ⎕ML←3 ⋄ ⍎¨(4 2 2 2 2 2/⍳6)⊂v}¨ts
:EndIf
:EndIf
:If ⍬≡length←{2=⎕NC ⍵:⍎⍵ ⋄ 6}'length'
length←''⍴¯1↑⍴ts
:EndIf
:If ~0=≢ts
:If 2=⍴⍴ts
buffer←{⍵/⍨0<≢¨⍵~¨⊂' ' 0}↓ts
'Invalid right argument: must be integer'⎕SIGNAL 11/⍨~326 163∊⍨∪⎕DR¨buffer
'Invalid right argument: must not be negative'⎕SIGNAL 11/⍨∨/¯1∊¨×¨buffer
'Invalid right argument: must be simple'⎕SIGNAL 11/⍨1≠∪≡¨buffer
:Else
'Invalid right argument: must be integer'⎕SIGNAL 11/⍨~326 163∊⍨⎕DR ts
'Invalid right argument: must not be negative'⎕SIGNAL 11/⍨¯1∊×,ts
'Invalid right argument: must be simple'⎕SIGNAL 11/⍨1≠≡ts
:EndIf
:EndIf
:If 2=⍴⍴ts
ts2←length↑[2]ts
:Else
ts2←,[0.5]length↑{0=≢⍵:⎕TS ⋄ ts}ts
:EndIf
:Select ⊃length
:Case 3
formatstring←'ZI4,<->,ZI2,<->,ZI2'
:CaseList 6 7
formatstring←'ZI4,<->,ZI2,<->,ZI2,< >,ZI2,<:>,ZI2,<:>,ZI2'
:Else
'Invalid left argument'⎕SIGNAL 11
:EndSelect
bool←(ts2∨.≠' ')∧ts2∨.≠0
r←bool⍀formatstring ⎕FMT(6⌊length)↑[2]bool⌿ts2
:If 7=2⊃⍴ts2
r←⊃(↓r),¨{0=⍵:'' ⋄ 0=≢⍵~' ':'' ⋄ '.',⍕⍵}¨ts2[;7]
:EndIf
:If 2≠⍴⍴ts
r←,r
:EndIf
∇
base64←{
⎕IO←0
⍺←''
chars←⍺
bits←{,⍉(⍺⍴2)⊤⍵}                   ⍝ encode each element of ⍵ in ⍺ bits,
⍝ and catenate them all together
part←{((⍴⍵)⍴⍺↑1)⊂⍵}                ⍝ partition ⍵ into chunks of length ⍺
0=2|⎕DR ⍵:'UTF-8'⎕UCS 2∘⊥∘(8∘↑)¨8 part{(-8|≢⍵)↓⍵}6 bits{(⍵≠64)/⍵}chars⍳⍵
⍝ decode a string into octets
four←{                             ⍝ use 4 characters to encode either
8=≢⍵:'=='∇ ⍵,0 0 0 0           ⍝   1,
16=≢⍵:'='∇ ⍵,0 0               ⍝   2
chars[2∘⊥¨6 part ⍵],⍺          ⍝   or 3 octets of input
}
cats←⊃∘(,/)∘((⊂'')∘,)              ⍝ catenate zero or more strings
cats''∘four¨24 part 8 bits ⍵
}
∇ r←BitsToInt y
⍝ Unsigned
:Access Public Shared
r←(32⍴2)⊥⌽32↑y
∇
∇ r←IntToBits y
⍝ Unsigned
:Access Public Shared
r←⌽(32⍴2)⊤y
∇
:EndClass
request←AddStopToQueryParms request
⍝ Use this to make the server stop while developing.
⍝ On the server G.TestFlag must be set and 1 for this to work
⍝ If that's the case the server will stop on OnRequest (read: very early!)
request.RequestTarget,←((1+'?'∊request.RequestTarget)⊃'?&'),'&stop=1'
⍝Done
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ##.APLTreeUtils2.IsDevelopment:⍺ ⎕SIGNAL 11 ⋄ errCode←123 ⋄ ⎕OFF errCode}
CheckExecuteTime y;⎕IO;start;end;⎕TRAP
⍝ Executes ]latest in order to check whether the response time is okay.
⍝ Can be useful to detect a performance problem while executing the test suite.
⎕IO←1
start←3⊃⎕AI
{}⎕SE.Latest.Run'' 1 0 0 ¯1 0
end←3⊃⎕AI
:If 4<-/⌊end start÷1000 ⍝ Should certainly not last more than four seconds
⎕TRAP←0 'S'
∘∘∘
:EndIf
r←CheckPackages flag;pkgs;latest;data;header;parms;allOnTatin;bool
⍝ Checks whether there is a better version of the packages available in the packages/ folder.
⍝ When `tatinServerOnly` is 0, all Registries with a priority greater than 0 are questioned.
⍝ When `tatinServerOnly` is 1 only the Tatin registry is questioned
⍝ `flag` is an insurance against accidental calls.
r←⍬
:If flag
:If 0<≢pkgs←##.FilesAndDirs.ListDirs ##.CiderConfig.HOME,'/packages'
pkgs←{⊃,/1↓⎕NPARTS ⍵}¨pkgs
parms←⎕NS''
parms.latest←1
allOnTatin←,parms ⎕SE.Tatin.ListPackages'[tatin]'
bool←(##.Registry.RemoveMinorAndPatch¨allOnTatin)∊##.Registry.RemoveMinorAndPatch¨pkgs
allOnTatin←bool/allOnTatin
r←⍪(~allOnTatin∊pkgs)/allOnTatin
r,←(~pkgs∊allOnTatin)/pkgs
:If 0<≢r
header←'Current' 'Latest'
r←(header,[0.5]' ')⍪r
r[2;]←(⌈/⍉≢¨r[;1 2])⍴¨'='
:Else
r←'All up-to-date'
:EndIf
:EndIf
:EndIf
⍝Done
Check_PermanentConnection_After(name parms);⎕TRAP
⎕TRAP←0 'S'
{⍵:.}0≠#.Tatin.Client.⎕nc '∆PermanentConnections'
⍝Done
Check_PermanentConnection_Before(name parms);⎕TRAP
⎕TRAP←0 'S'
{⍵:.}0≠#.Tatin.Client.⎕NC'∆PermanentConnections'
⍝Done
{r}←CompileDocumentation dummy;targetFolder;htmlFiles;markdownFiles;markdownFile;parms;html;ns;zipFilename;myZip;rc;M
⍝ Convert all markdown files in the docs/ folder to HTML and then zip the HTML files into TatinDocumentation.zip
M←##.MarkAPL
M.⎕FX'r←A' 'r←##.APLTreeUtils2'
M.⎕FX'r←FilesAndDirs' 'r←##.FilesAndDirs'
targetFolder←'./Dist/'
htmlFiles←⊃F.Dir'./html/*.html'
rc←F.DeleteFile¨htmlFiles   ⍝ Cleaning up any left-overs
Assert rc∧.=1
markdownFiles←⊃F.Dir'./docs/*.md'
'TatinVars'##.⎕NS''
:For markdownFile :In markdownFiles
parms←M.CreateParms
parms.inputFilename←markdownFile
parms.outputFilename←'html/',(2⊃⎕NPARTS markdownFile),'.html'
parms.homeFolder←'Assets/MarkAPL'
parms.verbose←0
(html ns)←parms M.Markdown2HTML''
('Converting markdown-to-HTML failed for ',markdownFile)Assert 0=≢ns.report
:EndFor
htmlFiles←{⊃{⍺,⍵}/1↓⎕NPARTS ⍵}¨⊃F.Dir'html/*.html'
zipFilename←targetFolder,'Tatin-Documentation-',({⍵↑⍨¯1+⍵⍳'+'}{⍵/⍨3>+\'.'=⍵}2⊃##.Registry.Version),'.zip'
F.DeleteFile zipFilename
myZip←⎕NEW ##.ZipArchive(,⊂zipFilename)
(F.PWD,'/html')∘{⍺ myZip.Add ⍵}¨htmlFiles
⍝Done
CopyDependencies
:If 0<##.⎕NC'CiderConfig'
'RumbaLean'##.⎕CY ##.CiderConfig.HOME,'/Assets/Runtime/Plodder/Plodder.dws'
:Else
'RumbaLean'##.⎕CY 'Assets/Runtime/Plodder/Plodder.dws'
:EndIf
{r}←CreateAllRefs_Client
r←⍬
⍝Done
CreateLinksInProgramFiles flag;sourceFolder;targetFolder;cmd;res;sourceForRun
⍝ This function assumes that the "correct" version of Tatin is installed in 18.2-64 in the Program Files folder.
⍝ It attempts to create links from this folder to 18.0-32, 18.2-32, 18.0-64, 19.0-32 and 19.0-64
⍝ for the Tatin Client folder and the "Run" function for both versions of 19.0
:If flag
'This function requires Admin rights'⎕SIGNAL 11/⍨~##.APLTreeUtils2.IsRunningAsAdmin
sourceFolder←##.Client.GetUserDocumentsFolder,'Dyalog APL-64 18.2 Unicode Files\CiderTatin\Tatin'
sourceForRun←##.CiderConfig.HOME,'/Run.aplf'
:If ##.Registry.IsWindows
targetFolder←4{⍵/⍨⍺>+\'\'=⍵}sourceFolder
:If ⎕NEXISTS targetFolder,'/Dyalog APL-64 18.0 Unicode Files'
3 ⎕MKDIR targetFolder,'/Dyalog APL-64 18.0 Unicode Files\CiderTatin'
cmd←'mklink /d /h "',targetFolder,'/Dyalog APL-64 18.0 Unicode Files\CiderTatin\Tatin" "',sourceFolder,'"'
res←⎕CMD cmd
:EndIf
:If ⎕NEXISTS targetFolder,'/Dyalog APL 18.0 Unicode Files'
3 ⎕MKDIR targetFolder,'/Dyalog APL 18.0 Unicode Files\CiderTatin'
cmd←'mklink /d /h "',targetFolder,'/Dyalog APL 18.0 Unicode Files\CiderTatin\Tatin" "',sourceFolder,'"'
res←⎕CMD cmd
:EndIf
:If ⎕NEXISTS targetFolder,'/Dyalog APL 18.2 Unicode Files'
3 ⎕MKDIR targetFolder,'/Dyalog APL 18.2 Unicode Files\CiderTatin'
cmd←'mklink /d /h "',targetFolder,'/Dyalog APL 18.2 Unicode Files\CiderTatin\Tatin" "',sourceFolder,'"'
res←⎕CMD cmd
:EndIf
:If ⎕NEXISTS targetFolder,'/Dyalog APL 19.0 Unicode Files'
3 ⎕MKDIR targetFolder,'/Dyalog APL 19.0 Unicode Files\StartupSession\CiderTatin'
cmd←'mklink /d /h "',targetFolder,'/Dyalog APL 19.0 Unicode Files\StartupSession\CiderTatin\Tatin" "',sourceFolder,'"'
res←⎕CMD cmd
cmd←'mklink "',targetFolder,'/Dyalog APL 19.0 Unicode Files\StartupSession\CiderTatin\Run.aplf" "',sourceForRun,'"'
res←⎕CMD cmd
:EndIf
:If ⎕NEXISTS targetFolder,'/Dyalog APL-64 19.0 Unicode Files'
3 ⎕MKDIR targetFolder,'/Dyalog APL-64 19.0 Unicode Files\StartupSession\CiderTatin'
cmd←'mklink /d /g "',targetFolder,'/Dyalog APL-64 19.0 Unicode Files\StartupSession\CiderTatin\Tatin" "',sourceFolder,'"'
res←⎕CMD cmd
cmd←'mklink "',targetFolder,'/Dyalog APL-64 19.0 Unicode Files\StartupSession\CiderTatin\Run.aplf" "',sourceForRun,'"'
res←⎕CMD cmd
:EndIf
:Else
∘∘∘ ⍝ Not implemented yet
:EndIf
:EndIf
r←{type}CreateProofReadDocument flag;M;parms;F;list;file;md;html;ns;buff;first;names;ind;name;i;hrefs;captions
⍝ This creates an HTML document from all the Markdown files in the docs/ folder for proof-reading the documentation in a single document.
⍝ The file will be created in the temp folder. The filename is returned as result.
⍝ `type` can be used to get very different documents:
⍝  1 (the default) compiles all documents into a single one for the sole purpose of proof-reading the lot
⍝  2 Leads to a document that gives on overview of what Tatin can do. A significant number of documents that do not fit are left out
r←''
type←{0<⎕NC ⍵:⍎⍵ ⋄ 1}'type'
'"type" must be either 1 or 2'⎕SIGNAL 11/⍨~type∊1 2
:If flag
M←##.MarkAPL ⋄ F←##.FilesAndDirs
parms←M.CreateParms
parms.leanpubExtensions←1
parms.outputFilename←'html'F.GetTempFilename2'tatin-proofread'
parms.cssURL←##.CiderConfig.HOME,'/Assets/CSS/'
parms.createFullHtmlPage←0
parms.numberHeaders←1 2 3 4 5 6
parms.bookmarkLink←1
parms.verbose←0
html←''
first←1
:If 0<≢list←F.ListFiles ##.CiderConfig.HOME,'/docs/*.md'
:If type=2
names←{2⊃⎕NPARTS ⍵}¨list
(names list)←(~names∊'ReleaseNotes' 'RunDyalogBehindApache' 'GitHub' 'SyntaxReference' 'TatinForContributors' 'UsageData' '_ReadMe')∘/¨names list
ind←names⍳'Introduction' 'InstallingAndUpdatingTheTatinClient' 'FirstStepsWithTatin' 'SemanticVersioning' 'PackageConfiguration' 'PublishingPackages' 'TatinsLoadAndUpdateStrategy' 'Caching' 'TatinUserSettings' 'InstallingTheTatinServer' 'Server-TipsAndTricks'
(names list)←ind∘{(⊂⍺)⌷⍵}¨names list
captions←{md←⊃F.NGET ⍵ 1 ⋄ ##.APLTreeUtils2.(DLB DTB)2↓(1⍳⍨'# '∘≡¨2↑¨md)⊃md}¨list
hrefs←{'-'@(⍸' '=⍵)⊢⎕C ⍵}¨captions
hrefs←{⍵/⍨⍵∊(⎕C ⎕A),⎕D,'-'}¨hrefs
html,←⊂'<p style="font-size: 200%;"><strong>Table of Contents</strong></p>'
html,←⊂'<hr>'
html,←⊂'<ol style="font-size: 125%;">'
html,←hrefs{href←⍺ ⋄ '<li><a href="#',(href),'">',⍵,'</a></li>'}¨captions
html,←⊂'</ol>'
html,←⊂'<p style="page-break-before:always;"></p>'
:EndIf
:For i :In ⍳≢list
file←i⊃list
:If type=2
name←i⊃names
:EndIf
:If first
first←0
:Else
html,←⊂'<p style="page-break-after:always;"></p>'
html,←(type=2)/⊂'<p style="page-break-before:always;"></p>'
:EndIf
:If type=2
parms.startHeaderNoWith←i
:EndIf
md←⊃F.NGET file 1
md←(~∧\'[parm]:'∘{⍺∘≡¨(≢⍺)↑¨⍵}md)/md
(buff ns)←parms M.Markdown2HTML md
:If 0<≢ns.report
⎕←file,' has problem(s):'
⎕←⍪ns.report
:EndIf
html,←buff
:EndFor
html←parms M.MakeHTML_Doc html
(⊂html)F.NPUT parms.outputFilename 1
r←parms.outputFilename
:EndIf
:Else
⎕←'*** No action taken'
:EndIf
⍝Done
filename←CreateUserCommandsReference path;ns;function;was;md;buff;paras;parms;level2Flag;F;A
⍝ Collects all help pages (all levels available) and compiles them into a single HTML document.
F←##.FilesAndDirs ⋄ A←##.APLTreeUtils2
ns←⎕NS''
:If 0<##.⎕NC'CiderConfig'
Assert'Tatin'≡∊ns.{2 ⎕FIX ⍵}'file://',##.CiderConfig.HOME,'/APLSource/Tatin.dyalog'
:Else
Assert'Tatin'≡∊ns.{2 ⎕FIX ⍵}'file://',F.PWD,'/APLSource/Tatin.dyalog'
:EndIf
was←⎕SE.UCMD'udebug ON'
⎕SE.UCMD'ns.list←TatIN -? -'
ns.list←⊃¨' 'A.Split¨A.DMB ¯2↓2↓(⎕UCS 13)A.Split ns.list
md←''
md,←⊂'# Tatin User Command Syntax'
:For function :In ns.list
⍝     Assert(⎕C function)≢⎕C'ListPackages'
md,←⊂'## ',function
md,←⊂'### Syntax'
buff←⎕SE.UCMD'TATIN.',function,' -?'
buff←(⎕UCS 13)A.Split buff
:If 0<≢buff←¯1↓(4+{∨/'Accepts modifier'⍷∊⍵}buff)↓buff
:If level2Flag←5<≢buff
buff←buff[4 1 2 6]
:Else
buff←buff[4 1 2]
:EndIf
(3⊃buff)←¯1↓⊃{⍺,' ',⍵}/{(2↑⍵),{'`',⍵,'`,'}¨2↓⍵}' 'A.Split 3⊃buff
:If level2Flag
(4⊃buff)←A.DLB 4⊃buff
md,←(1⊃buff)''(2⊃buff)''(3⊃buff)'' '```'(4⊃buff)'```' ''
:Else
md,←(1⊃buff)''(2⊃buff)''(3⊃buff)''
:EndIf
:If level2Flag
md,←⊂'### Details'
buff←⎕SE.UCMD'TATIN.',function,' -??'
buff←(6+{{(∨/'Version:'⍷⍵)+∨/'Accepts modifier'⍷⍵}∊⍵}buff)↓(⎕UCS 13)A.Split buff
paras←⍸0,⍨¯1↓(0<≢¨1↓buff)∧'.'=⊃¨¯1↑¨¯1↓buff
buff[paras]←buff[paras],¨⎕UCS 13
buff←(⎕UCS 13)A.Split∊buff,¨⎕UCS 13
⍝             buff←⊃¨buff{a←⍺ ⋄ a[⍵]←⊂a[⍵] ⋄ a}(⍳≢buff)~paras
:If ∨/' -??? '⍷⊃¯2↑buff
md,←(¯2↓buff),⊂''
md,←⊂'### Examples'
buff←⎕SE.UCMD function,' -???'
buff←10↓(⎕UCS 13)A.Split buff
md,←(⊂'```'),buff,(⊂'```')
:EndIf
md,←buff
:EndIf
:EndIf
:EndFor
{}⎕SE.UCMD'udebug ',(≢'Was ')↓was
:If 0=≢path
path←F.GetTempPath
:EndIf
filename←path,'/Tatin-User-Command-Syntax.html'
parms←##.MarkAPL.CreateParms
parms.createFullHtmlPage←1
parms.homeFolder←'./Assets/MarkAPL'
parms.cssURL←parms.homeFolder,'/Files'
parms.outputFilename←filename
parms.title←'Tatin UC Syntax'
parms.toc←2 2
parms.head←'<style>' 'body {font-family:"APL385 Unicode";}' '</style>'
parms.verbose←0
parms ##.MarkAPL.Markdown2HTML md
⍝Done
{r}←{pathToUserSettings}EstablishClientInQuadSE dummy;C;ref;reg;dyalog
⍝ This function is called in order to establish the Tatin Client in ⎕SE._Tatin and
⍝ to establish the API within ⎕SE.Tatin.
⍝ By default the UserSettings class is instantiated with the default path as argument.
⍝ Instead ⍺ might be provided: that must be the folder that hosts the user settings.
r←⍬
pathToUserSettings←{0<⎕NC ⍵:⍎⍵ ⋄ ##.Client.GetUserHomeFolder ⍬}'pathToUserSettings'
CreateAllRefs_Client
⎕SE.⎕EX'Tatin'
ref←⍎'Tatin'⎕SE.⎕NS''
EstablishFunctionInAPI'BuildPackage'
EstablishFunctionInAPI'CopyRegistry'
EstablishFunctionInAPI'CreateCopyRegistryParms'
EstablishFunctionInAPI'CreateBuildParms'
EstablishFunctionInAPI'CheckForLaterVersion'
EstablishFunctionInAPI'DeletePackages'
EstablishFunctionInAPI'DeprecatePackage'
EstablishFunctionInAPI'ClearCache'
EstablishFunctionInAPI'CreateAPIfromCFG'
EstablishFunctionInAPI'FindDependencies'
EstablishFunctionInAPI'GetDeletePolicy'
EstablishFunctionInAPI'GetDependencyTree'
EstablishFunctionInAPI'GetNoCachingFlag'
EstablishFunctionInAPI'GetPathToPackageCache'
EstablishFunctionInAPI'GetUserHomeFolder'
EstablishFunctionInAPI'GetMyUCMDsFolder'
EstablishFunctionInAPI'InitPackageConfig'
EstablishFunctionInAPI'InitialisePackage'
EstablishFunctionInAPI'InstallPackages'
EstablishFunctionInAPI'ListCache'
EstablishFunctionInAPI'ListDeprecated'
EstablishFunctionInAPI'ListLicenses'
EstablishFunctionInAPI'ListPackages'
EstablishFunctionInAPI'ListRegistries'
EstablishFunctionInAPI'ListTags'
EstablishFunctionInAPI'ListVersions'
EstablishFunctionInAPI'LoadDependencies'
EstablishFunctionInAPI'LoadPackages'
EstablishFunctionInAPI'Ping'
EstablishFunctionInAPI'PublishPackage'
EstablishFunctionInAPI'ReadPackageConfigFile'
EstablishFunctionInAPI'ReInstallDependencies'
EstablishFunctionInAPI'UnInstallPackages'
⎕SE.Tatin.⎕FX↑'r←CreateReInstallParms' '⍝ Returns NS with parameters for ReInstall' 'r←⎕SE._Tatin.Client.CreateReInstallParms' ⍝ Niladic!
⎕SE.Tatin.⎕FX↑'r←GetPathToPackageCache' 'r←⎕SE._Tatin.Client.GetPathToPackageCache'                                            ⍝ Niladic!
⎕SE.Tatin.⎕FX↑'r←Version' '⍝ Returns "name", "version" and "date"' 'r←⎕SE._Tatin.Registry.Version'                             ⍝ Niladic!
ref.DefineRegistry←##.Client.DefineRegistry
ref.UserSettings←##.Client.UserSettings
C←##.Client
C.InitUserSettings pathToUserSettings
⎕SE.Tatin.⎕FX'r←MyUserSettings' 'r←⎕SE._Tatin.Client.MyUserSettings' ⍝ Don't create a ref here because the user might assign ⎕NEW UserSettings to it, and that would NOT work!
'Conga'##.RumbaLean.⎕CY(2 ⎕NQ'.' 'GetEnvironment' 'DYALOG'),'/ws/conga' ⍝ Copy Conga of the current APL version; MUST be lowercase because otherwise the WS won't be found on Linux/Mac-OS
InitConga ⍬
⍝Done
{r}←EstablishFunctionInAPI name;type
⍝ Establish cover functions serving as API functions for what are the public functions.
r←0
type←##.Client.⎕NC⊂name
:If 0=type
⎕←'Tatin error; "',name,'" is not defined'
:ElseIf 3≠⌊type
⎕←'Tatin error; "',name,'" is not a function (NC=',(⍕⌊type),')'
:Else
:If 2=|1 2⊃##.Client.⎕AT name
{⎕SE.Tatin.⍎⍵,'←{⍺←⊢ ⋄ ⍺ ⎕SE._Tatin.Client.',⍵,' ⍵}'}name
:Else
{⎕SE.Tatin.⍎⍵,'←{⎕SE._Tatin.Client.',⍵,' ⍵}'}name
:EndIf
:EndIf
⍝Done
r←GetAPLVersion version
⍝ Used to create both Client & Server.
⍝ If `version` is empty it defaults to the current version
⍝ A non-empty right argument works under Windows only.
:If 0=≢version
:If ##.Registry.IsWindows
r←(2 ⎕NQ'#' 'GetEnvironment' 'Dyalog'),'\Dyalog.exe'
:Else
r←(2 ⎕NQ'#' 'GetEnvironment' 'Dyalog'),'/mapl'
:EndIf
:Else
Assert'win'≡⎕C ##.APLTreeUtils2.GetOperatingSystem ⍬
r←'C:\Program Files\Dyalog\Dyalog APL-64 ',version,' Unicode\Dyalog.exe'
:EndIf
r←GetCoverageFilename;load
:If 0<⎕NC'##.CiderConfig.HOME'
r←##.CiderConfig.HOME,'/'
:ElseIf 0<≢load←2 ⎕NQ #'GetEnvironment' 'load'
r←⊃1 ⎕NPARTS(1⊃1 ⎕NPARTS load),'../../'
:Else
r←##.FilesAndDirs.PWD,'/'
:EndIf
r,←'TestResults/TatinTestCoverage'
⍝Done
{r}←HandleRunFunction dummy;myZip;zipFilename
⍝ Copies the "Run.aplf" function and also creates a ZIP file for it
r←0
'./Dist/'⎕NCOPY⍠('IfExists' 'Replace')⊣'Run.aplf'
zipFilename←'./Dist/Run.zip'
myZip←⎕NEW ##.ZipArchive(,⊂zipFilename)
F.PWD myZip.Add'Run.aplf'
myZip.Dispose
⍝Done
ns←ReplaceDepthByPrincipal filename;file;list;json
⍝ Renames "depth" to "principal" in buid lists and make sure that a 1 stays and eveything else becomes a 0.
⍝ `fileList` must be a list with files apl-dependencies.txt
list←⊃⎕NGET filename 1
:For file :In list
:If 0<≢json←⊃⎕NGET file
ns←#.Tatin.Registry.JSON json
:If 0<ns.⎕NC'depth'
ns.principal←1=ns.depth
ns.⎕EX'depth'
:EndIf
json←#.Tatin.Registry.JSON ns
(⊂json)⎕NPUT file 1
:EndIf
:EndFor
⍝Done
ns←filename ReplaceProjectUrlByInfoUrl ns
⍝ Renames "project_url" to "project_url" but also checks whether "date" is what we expect it to be
:If 0<ns.⎕NC'project_url'
ns.project_url←ns.project_url
ns.⎕EX'project_url'
:EndIf
:If 0<ns.⎕NC'date'
:If 80=⎕DR ns.date
ns.date←##.A.ToNum ns.date
:EndIf
:Else
⎕←'Has no "date": ',filename
:EndIf
⍝Done
Info
⎕←'This is Tatin version ',(2⊃##.Registry.Version),' from ',(3⊃##.Registry.Version)
⎕←'------------------------------------------------------------------------------------------------'
⎕←'A) You may initialize the WS for acting either as a Tatin server or a Tatin client but NOT both.'
⎕←''
⎕←'   In order to act as a client execute:'
⎕←'         #.Tatin.Admin.Initialize_Client'
⎕←'   In order to act as a server execute:'
⎕←'         #.Tatin.Admin.Initialize_Server'
⎕←''
⎕←'B) Compiling a new version is not only required before publishing but also before executing'
⎕←'   the client''s test suite because it executes Tatin''s API functions within ⎕SE as well as'
⎕←'   user commands, so they should be up to date.'
{r}←InitConga path;flag;counter;drc;qdmx;max
⍝ The loop is required because every now and then this error is thrown:
⍝ 1043  ERR_ALREADY_INITIALIZED  DLL probably loaded more than once.
⍝ It seems that executing it again is enough to get over the hurdle.
r←⍬
flag←counter←0
max←5
:Repeat
:Trap 999
:If '#'≡⊃⊃1↓⎕XSI
drc←path ##.RumbaLean.Conga.Init'tatin'
:Else
drc←path ⎕SE._Tatin.RumbaLean.Conga.Init'tatin'
:EndIf
flag←1
:Else
qdmx←⎕DMX
:If ∨/'Unable to find DLL'⍷qdmx.EM
6 ⎕SIGNAL⍨'Tatin: could not find required Conga DLLs within ',{'/'@(⍸'\'=⍵)⊣⍵}path
:Else
:If max=counter←counter+1
11 ⎕SIGNAL⍨'Tatin: unable to initialze Conga; rc=',(⍕qdmx.EN)
:Else
⎕DL 0.1
:EndIf
:EndIf
:EndTrap
:Until flag
Initialize_Client
⍝ Copies dependencies, sets the working dir, initializes Conga and establishes references for the Tatin Client.\\
⍝ This function is intended to be called in development only.\\
⍝ It does not prepare for tests; for that call `#.Tatin.TestCases.Prepare`, which will call this function along the way.\\
:If 'CLEAR WS'≡⎕WSID
:If 0<##.⎕NC'CiderConfig'                                 ⍝ Managed by ...
:AndIf 2=##.CiderConfig.⎕NC'HOME'                         ⍝ ...LINK/Cider?!
{}##.FilesAndDirs.Cd ##.CiderConfig.HOME
:EndIf
:Else
:EndIf
CopyDependencies
'Conga'##.RumbaLean.⎕CY(2 ⎕NQ #'GetEnvironment' 'DYALOG'),'/ws/conga.dws'
InitConga''
⍝Done
Initialize_Server;this
⍝ Copies dependencies, sets the working dir and establishes references for the Tatin Server.\\
⍝ This function is intended to be called in development only.\\
⍝ It does not prepare for tests; for that call `#.Tatin.TestCasesServer.Prepare`, which will call this function along the way.\\
:If 'CLEAR WS'≡⎕WSID
:If 2=##.⎕NC'CiderConfig.HOME'                 ⍝ Managed by LINK/Cider?!
{}##.FilesAndDirs.Cd ##.CiderConfig.HOME,'/TestServer/Server'
:Else
{}##.FilesAndDirs.Cd'APLSource'{⍵↑⍨¯2+1⍳⍨⍺⍷⍵}2 ⎕NQ #'GetEnvironment' 'load'
:EndIf
:Else
:EndIf
:If 0=##.⎕NC'Plodder.Run'  ⍝ Will exist in production but not otherwise
:If 0=##.⎕NC'CiderConfig'
'RumbaLean' 'Plodder'##.⎕CY'Assets/Runtime/Plodder/Plodder.dws'
:Else
'RumbaLean' 'Plodder'##.⎕CY ##.CiderConfig.HOME,'/Assets/Runtime/Plodder/Plodder.dws'
:EndIf
:EndIf
⍝Done
r←{batch}InstallTatin flag;ind;installFolder;aplVersion;q;selectFlag;os;if1;if2
⍝ Installs Tatin into the appropriate folder, depending on the current OS.
⍝ The function first checks whether Tatin has been installed into either the version agnostic or
⍝ the version specific folder of the running version of Dylog, and installs into the same folder
⍝ if either is found, otherwise the user is asked which one to install into.\\
⍝ `flag` is insurance against accidental call.
⍝ `batch` defaults to 0. If it is 1 then no questions are asked.
r←''
:If flag
batch←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'batch'
aplVersion←# ⎕WG'APLVersion'
selectFlag←0
:Select os←##.APLTreeUtils2.GetOperatingSystem ⍬
:Case 'Win'
:If ~⎕NEXISTS installFolder←if1←##.Client.GetCurrentAPLsFolderInDocuments,'SessionExtensions\CiderTatin\Tatin'
:AndIf ~⎕NEXISTS installFolder←if2←##.Client.GetUserDocumentsFolder,'Dyalog APL Files\SessionExtensions\CiderTatin\Tatin'
selectFlag←1
:EndIf
:Case 'Lin'
:If ~⎕NEXISTS installFolder←if1←(2 ⎕NQ'.' 'GetEnvironment' 'HOME'),'/dyalog.files/SessionExtensions/CiderTatin/Tatin'
:AndIf ~⎕NEXISTS installFolder←if2←(2 ⎕NQ'.' 'GetEnvironment' 'HOME'),'/','dyalog.',('.'~⍨{⍵/⍨2>+\⍵='.'}2⊃aplVersion),'U',(¯2↑1⊃aplVersion),'.files/SessionExtensions/CiderTatin/Tatin'
selectFlag←1
:EndIf
:Case 'Mac'
:If ~⎕NEXISTS installFolder←if1←(2 ⎕NQ'.' 'GetEnvironment' 'HOME'),'/dyalog.files/SessionExtensions/CiderTatin/Tatin'
:AndIf ~⎕NEXISTS installFolder←if2←(2 ⎕NQ'.' 'GetEnvironment' 'HOME'),'/','dyalog.',('.'~⍨{⍵/⍨2>+\⍵='.'}2⊃aplVersion),'U',(¯2↑1⊃aplVersion),'.files/SessionExtensions/CiderTatin/Tatin'
selectFlag←1
:EndIf
:Else
0 Assert⍨'OS <',os,'> is not supported'
:EndSelect
installFolder←⊃1 ⎕NPARTS installFolder
:If selectFlag
ind←'Into which folder?'##.CommTools.Select'Version specific' 'Version agnostic'
:If 0=≢ind
⎕←'Cancelled by user' ⋄ →0
:ElseIf ind=1
installFolder←if1
:ElseIf ind=2
installFolder←if2
:Else
∘∘∘  ⍝ Huh?!
:EndIf
:EndIf
:If batch
q←'Sure you want to install Tatin into:',(⎕UCS 13),'  ',installFolder,'/Tatin ?'
:OrIf ##.CommTools.YesOrNo q
:If 0=##.FilesAndDirs.⎕NC'APLTreeUtils2'
Initialize_Client
:EndIf
{}##.FilesAndDirs.RmDir installFolder,'Tatin'
installFolder ⎕NCOPY ##.CiderConfig.HOME,'/Dist/Client/Tatin'
r←'*** Tatin installed in ',installFolder
⎕DL 2
⎕SE.SALTUtils.ResetUCMDcache ¯1
:EndIf
:EndIf
LoadTatinAndRunTests;debugFlag
⍝ This function is called when the test suite needs to be executed in batch mode.
⍝ Honors -debug from the command line if specified.
{}({⍵.fastLoad←1 ⋄ ⍵}⎕NS'')⎕SE.Link.Import'#.Tatin' './APLSource'
debugFlag←'-debug'≡'-debug '{0=+/b←⍺∘≡¨(≢⍺)↑¨' ',⍨¨⎕C¨⍵:'' ⋄ (b⍳1)⊃⍵}⊣2 ⎕NQ #'GetCommandLineArgs'
debugFlag #.Tatin.TestCases.RunBatchTests 1
⍝Done
{debugFlag}LoadTatinAndStartServer flag;path
⍝ This function is called when the (batch) tests require an instance of Dyalog running a Tatin Server.
⍝ `flag` is just insurance against an accidental call.
⍝ `debugFlag` is optional and defaults to 0. 1 basically switches off error trapping.
:If flag
debugFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'debugFlag'
path←2 ⎕NQ #'GetEnvironment' 'load'
path←'APLSource'{⍵↑⍨(¯1+≢⍺)+1⍳⍨⍺⍷⍵}path
{}({⍵.fastLoad←1 ⋄ ⍵}⎕NS'')⎕SE.Link.Import'#.Tatin'path
debugFlag #.Tatin.TestCasesServer.RunBatchTests 1
:EndIf
⍝Done
r←{registryPath}(fns LoopThrough)pkgFolderList;filename;F;i;pattern;offset;length;buff;Z;myZip;folder;pkgFolder;json;Reg;data;zipFilename
⍝ Takes a list with all or some package folders and then executes the following steps for all of them:
⍝  1. Read the package config filename
⍝  2. Feed it to `fns`
⍝  3. Write the result back to the filename
⍝  4. Add the changed filename to the package's ZIP filename
⍝ Can be useful to enforce certain changes, introduce a new property or polish tags.
⍝ In that case depretaed packages are included.
F←##.FilesAndDirs
Z←##.ZipArchive
Reg←##.Registry
:For i :In ⍳≢pkgFolderList
⍝⎕←(⍕i),'. of ',⍕≢pkgFolderList
pkgFolder←i⊃pkgFolderList
folder←registryPath,'/',pkgFolder
filename←folder,'/apl-package.json'
json←⊃F.NGET filename
data←⎕JSON⍠('Dialect' 'JSON5')⊢json
data←pkgFolder fns data registryPath
json←Reg.JSON data
json Reg.SaveJSON filename 1
zipFilename←folder,'/',pkgFolder,'.zip'
myZip←⎕NEW Z(,⊂zipFilename)
folder myZip.Add'/apl-package.json'
:EndFor
⍝Done
r←{recursive}(fns LoopThroughRegistry_AplPackageJson)path;list;F;i;pattern;offset;length;buff;Z;myZip;folder;packages;package;filename;ns;zipFilename;A;paths;path_
⍝ Takes a path to a local Registry. Processes all directories found in that folder and ...
⍝ * Reads the file apl-package.json, convert the JSON5 to APL data and feeds it to `fns`
⍝ * Replaces the file apl-package.json in that folder with the result of `fns`
⍝ * Replaces apl-package.json inside the package zip file in that folder\\
⍝ In other words, it's designed to polish all apl-package.json files in a Registry, zipped and unzipped
⍝ If it's not a Registry but a folder that keeps packages, and on several levels, pass a 1 as ⍺:
⍝ that makes sure that all folders are scanned recursively for pakage config files.
F←##.FilesAndDirs ⋄ Z←##.ZipArchive ⋄ A←##.APLTreeUtils2
r←0 0⍴⍬
recursive←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'recursive'
packages←F.ListDirs path
:For i :In ⍳≢packages
package←i⊃packages
⎕←(⍕i),'. of ',⍕≢packages
filename←package,'/apl-package.json'
:If ~⎕NEXISTS filename
:Continue
:EndIf
ns←##.Registry.JSON⊃F.NGET filename
ns←filename fns ns
(⊂##.Registry.JSON ns)F.NPUT filename 1
zipFilename←{⍵,'/',(2⊃A.SplitPath ⍵),'.zip'}package
:If F.IsFile zipFilename
myZip←⎕NEW Z(,⊂zipFilename)
folder←⊃⎕NPARTS filename
folder myZip.Add'/apl-package.json'
myZip.Dispose
:EndIf
⎕←'Solved: ',⊃,/1↓⎕NPARTS filename
:EndFor
:If recursive
paths←F.ListDirs path,'/'
:For path_ :In paths
1(fns LoopThroughRegistry_AplPackageJson)path_
:EndFor
:EndIf
⍝Done
{r}←{noQLX}Make batchFlag;P;parms;P_;list;F;C;CFG;path;file1;file2;ts1;ts2;versionOfAPL;q
⍝ This function will start two APL sessions in succession in order to open the Tatin
⍝ project and then execute first `MakeClient` (which bumps the build number) and then,
⍝ in the second session, `MakeServer`, which does not bump the version number.
⍝ It also re-compiles the documentation (=creates HTML files from Markdown)
⍝ It cannot be done in one go, and it cannot be done in batch mode from the current session.
⍝ The right argument is expected to be a Boolean that tells whether this functions runs in batch
⍝ mode or not. In batch mode no messages are printed, and no interaction with a user is
⍝ attempted.
⍝ Also, Tatin is not updated in "C:\Users\<⎕AN>\Documents\Dyalog APL-64 19.0 Unicode Files\" then.
⍝ `noQLX` defaults to 0. By passing a 1 no function is called after instantiating Dyalog
⍝ for the Client and the Server; useful for debugging.
r←⍬
Assert(⊂batchFlag)∊0 1
'Currently we build on Windows only, sorry'Assert ##.Registry.IsWindows
versionOfAPL←'18.0'
:If ~batchFlag
:AndIf 0=##.Client.CommTools.YesOrNo'Create Tatin with version ',versionOfAPL,' ?'
⎕←'Cancelled by user' ⋄ →0
:EndIf
F←##.FilesAndDirs ⋄ C←##.Client ⋄ CFG←##.CiderConfig ⋄ F.APLTreeUtils2←##.APLTreeUtils2
{}F.Cd CFG.HOME
0 0⍴{⎕←⍵}⍣(~batchFlag)⊣'   Current dir is now: ',CFG.HOME
'Check current directory'Assert{'Tatin'≡⊃¯1↑(~⍵∊'/\')⊆⍵}1⊃1 ⎕NPARTS''
noQLX←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'noQLX'
0 0⍴{⎕←⍵}⍣(~batchFlag)⊣'   Compiling HTML from the markdown files (documentation)...'
CompileDocumentation ⍬
path←##.Client.GetUserDocumentsFolder,'Dyalog APL-64 19.0 Unicode Files\SessionExtensions\CiderTatin\Tatin'
:If F.IsDir path                                           ⍝ Does a folder Tatin/  live in the version-agnostic folder?
:AndIf F.IsFile path,'/Tatin.dyalog'                       ⍝ Does the Tatin user command script live there?
file1←path,'/Tatin.dyalog'
file2←##.CiderConfig.HOME,'/APLSource/Tatin.dyalog'
:AndIf ≢/{⊃⎕NGET ⍵ 0}¨file1 file2                          ⍝ Are the two not identical ?
(ts1 ts2)←{¯1 1 ⎕DT⊂⊃⊃('type' 3)F.Dir ⍵}¨file1 file2
:If ts2<ts1
q←'The Tatin user command script in',⎕UCS 13
q,←path,⎕UCS 13
q,←' appears to be newer than the one in the project - copy?'
:If 1 C.YesOrNo q
file2 ⎕NCOPY⍠('IfExists' 'Replace')⊣file1
:EndIf
:Else
⍝ We don't need to do anything because it will be copied over later on, if the user wishes so.
:EndIf
:EndIf
'Create!'F.CheckPath'./Dist'
list←⊃F.Dir'./Dist/*.zip'
list←('.zip'∘≡¨3⊃¨⎕NPARTS¨list)/list
list←(∨/¨{∨/¨'Tatin-Client' 'Tatin-Server' 'Tatin-Documentation'⍷¨⊂⍵}¨list)/list
F.DeleteFile list
P←##.APLProcess
parms←P.CreateParms
parms.Exe←GetAPLVersion versionOfAPL
parms.CommandLineArgs,←'load="',F.PWD,'\APLSource\Admin\Make_.aplc" '
parms.CommandLineArgs,←{0=≢v←2 ⎕NQ #'GetEnvironment'⍵:v ⋄ ⍵,'="',v,'"'}'DYALOGSTARTUPSE'
parms.CommandLineArgs,←' lx="1 #.Make_.Run 1"'
:If 0  ⍝ Only for analyzing problems:
parms.CommandLineArgs,←' -exec_setup=0 '
parms.CommandLineArgs,←' -stop_in_setup=1 '
:EndIf
:If noQLX
parms.CommandLineArgs,←' -x'
:EndIf
parms.SessionFile←1
parms.WindowsStyle←'Normal'
0 0⍴{⎕←⍵}⍣(~batchFlag)⊣'   Process started for "making" the Tatin Client...'
P_←⎕NEW P(,⊂parms)
{⍵.HasExited:shy←0 ⋄ _←⎕DL 0.2 ⋄ ∇ ⍵}P_
'The process exited with an error code'Assert 0=P_.Proc.ExitCode
UpdateDocumentation ⍬
parms←P.CreateParms
parms.CommandLineArgs←'load="APLSource/Admin/Make_.aplc" '
parms.CommandLineArgs,←{0=≢v←2 ⎕NQ #'GetEnvironment'⍵:v ⋄ ⍵,'="',v,'"'}'DYALOGSTARTUPSE'
parms.CommandLineArgs,←' lx="0 #.Make_.Run 2"'
parms.Exe←GetAPLVersion versionOfAPL
:If 0          ⍝ Only for analyzing problems:
parms.CommandLineArgs,←' -exec_setup=0'
parms.CommandLineArgs,←' -stop_in_setup=1 '
:EndIf
:If noQLX      ⍝ Only for analyzing problems:
parms.CommandLineArgs,←' -x'
:EndIf
parms.SessionFile←1
parms.WindowsStyle←'Normal'
0 0⍴{⎕←⍵}⍣(~batchFlag)⊣'   Process started for "making" the Tatin Server...'
P_←⎕NEW P(,⊃parms)
{⍵.HasExited:shy←0 ⋄ _←⎕DL 0.2 ⋄ ∇ ⍵}P_
'The process exited with an error code'Assert 0=P_.Proc.ExitCode
0 0⍴{⎕←⍵}⍣(~batchFlag)⊣'   The final steps, putting it all together...'
HandleRunFunction ⍬
UpdateTestServerAssets ⍬
{}⎕SE.Link.Refresh'#.Tatin'
:If ~batchFlag
:AndIf 1 ##.Client.CommTools.YesOrNo'Would you like to install the freshly created new version?'
⎕←1 #.Tatin.Admin.InstallTatin 1
:EndIf
:If #.Tatin.Registry.Version≢⎕SE.Tatin.Version
⎕SE.⎕EX¨'Tatin' '_Tatin'
⎕←'*** New version ',({(2⊃⍵),' from ',(3⊃⍵)}##.Registry.Version),' created, but version in ⎕SE is not up-to-date anymore, please restart Dyalog'
:Else
0 0⍴{⎕←⍵}⍣(~batchFlag)⊣'*** Done'
:EndIf
⍝Done
{r}←{bumpBuild}MakeClient batchFlag;msg;F;targetPath;targetFolder;ts1;ts2;path;reg;_userSettings;list;zipFilename;zipContent;fileList;b;rc;more;en;myZip;parms;dirList;success;log;APL
⍝ This functions creates a new Tatin Client. It can be called from a developer's session (⍵←0) or
⍝ as part of an automated "Make" process with ⍵←1.\\
⍝ In case of a problem an error is thrown in case ⍵ is 0, and ⎕OFF 123 is executed in case ⍵ is 1.\\
⍝ You may call this function independently from `MakeServer`.\\
⍝ `bumpBuild` must be a Boolean; 1 means that the build number will be bumped; that's the default.
r←⍬
F←##.FilesAndDirs
F.(APLTreeUtils2 OS)←##.(APLTreeUtils2 OS)
bumpBuild←{0<⎕NC ⍵:⍎⍵ ⋄ 1}'bumpBuild'
:If ~batchFlag
⎕←(⎕PW-1)⍴'-'
msg←''
msg,←⊂'This function will close all Cider projects, delete everything that is not needed in order to'
msg,←⊂'use the Tatin client, re-arrange stuff and finally save the workspace together with'
msg,←⊂'everything that is needed by the client in Dist/Client/Client.dws'
msg,←⊂'The Tatin client will be copied from that WS into ⎕SE either once a Tatin user command is'
msg,←⊂'invoked or by other means, like using a "Run" fn in 19.0 or setup.dyalog in earlier versions.'
msg,←⊂''
msg,←⊂'It also checks whether the user command script should be copied from the 19.0-64-specific program'
msg,←⊂'folder to the project or vice versa, depending on where the last change was made.'
msg,←⊂''
msg,←⊂'In the last step all that''s required is zipped into <Tatin-Client-{major}.{Minor}.{Patch}.zip'
msg,←⊂'That file is created within the Dist/ folder which is not managed by Git.'
⎕←⍪msg
⎕←''
:EndIf
:If batchFlag
:OrIf 1 ##.Client.YesOrNo'Would you like to continue?'
UpdateVersionNumber bumpBuild
{}⎕SE.Cider.CloseProject''
parms←⎕SE.Cider.CreateOpenParms ⍬
parms.folder←#.Tatin.CiderConfig.HOME
parms.projectSpace←'_Tatin'
parms.batch←1
parms.verbose←0
(success log)←⎕SE.Cider.OpenProject parms
Assert success
{}⎕SE.Cider.CloseProject''
⎕LX←''
F.MkDir'Dist'
targetPath←'Dist/Client'
{}F.RmDirByForce targetPath
⎕DL 0.1
F.MkDir targetPath
⎕DL 0.1
⎕WSID←targetPath,'/Tatin/Client'
Assert F.MkDir targetPath,'/Tatin'
Assert F.MkDir targetPath,'/Tatin/Maintenance'
⎕DL 0.1
Assert F.IsDir targetPath,'/Tatin/Maintenance'
0 ⎕SAVE ⎕WSID   ⍝ If this crashes, in particular with "Reference in ⎕SE points to #" or vise versa) execute ⎕OFF 123 and try again
targetFolder←#._Tatin.Client.GetProgramFilesFolder'CiderTatin/Tatin'
targetFolder←'Dyalog[^U]*'⎕R'Dyalog APL-64 19.0 '⊢targetFolder
:If ~batchFlag
:AndIf F.IsFile targetFolder,'/Tatin/Tatin.dyalog'
:AndIf (targetFolder,'/Tatin/Tatin.dyalog')F.YoungerThan'./APLSource/Tatin.dyalog'
:AndIf ≢/{⊃⎕NGET ⍵}¨'./APLSource/Tatin.dyalog'(targetFolder,'/Tatin/Tatin.dyalog')
:AndIf 1 ##.Client.YesOrNo'It appears that "Tatin.dyalog" in ',targetFolder,' is younger than the one in the project; copy over?'
'./APLSource/Tatin.dyalog'(⎕NCOPY⍠('IfExists' 'Replace')F.ExecNfunction)targetFolder,'/Tatin/Tatin.dyalog'
:EndIf
(targetPath,'/Tatin/Maintenance/')(⎕NCOPY⍠('Wildcard' 1)('IfExists' 'Replace')F.ExecNfunction)'./Maintenance/Client/*'
(targetPath,'/Tatin')(⎕NCOPY⍠('IfExists' 'Replace')F.ExecNfunction)'./APLSource/Tatin.dyalog'
'Create!'F.CheckPath targetPath,'/Tatin/Assets/Runtime'
(targetPath,'/Tatin/Assets/Runtime/')(⎕NCOPY⍠('IfExists' 'Replace')F.ExecNfunction)'./Assets/Runtime/Rumba'
'Create!'F.CheckPath targetPath,'/Tatin/Assets/docs'
(targetPath,'/Tatin/Assets/docs/')(⎕NCOPY⍠('IfExists' 'Replace')F.ExecNfunction)'./html/ReleaseNotes.html'
F.DeleteFile¨F.Dir'Dist/Tatin-Client-*.zip'
zipFilename←'Dist/Tatin-Client-',({{⍵/⍨∧\⍵∊'.',⎕D}⍵/⍨3>+\'.'=⍵}(2⊃##.Client.Version)),'.zip'
⎕DL 0.1
fileList←'recursive'F.ListFiles targetPath,'/'
fileList←F.EnforceSlash¨(1+≢targetPath)↓¨fileList
⎕DL 0.1
myZip←⎕NEW ##.ZipArchive(,⊂zipFilename)
targetPath myZip.Add fileList
⍝targetPath ##.ZipArchive.ZipFolder zipFilename   ⍝ This causes potentially trouble on Linux and Mac OS because of the "\"
myZip.Dispose
⎕DL 1
zipContent←##.ZipArchive.ListZipContents zipFilename
'Something went wrong with the ZIP file'Assert fileList{(∧/⍺∊⍵)∧(∧/⍵∊⍺)}zipContent
3 ⎕NDELETE targetFolder,'/Tatin.dyalog'  ⍝ Because until 0.61.0 the user command script was a sibling of the Tatin/ folder
:If batchFlag
⎕OFF
:Else
⎕←'*** Done;  note that the Tatin project has been closed'
:EndIf
:EndIf
{r}←{bumpBuild}MakeServer batchFlag;F;targetPath;zipFilename;list;msg;success
⍝ Creates a new server.\\
⍝ Call this after `MakeClient` has been called; see there for details.
⍝ It can be called from a developer's session (⍵←0) or as part of an automated "Make" process with ⍵←1.\\
⍝ In case of a problem an error is thrown if ⍵=0 and ⎕OFF 123 if ⍵=1.\\
⍝ You may call this independently from `MakeClient`.
⍝ `bumpBuild` must be a Boolean; 1 (the default) means that the build number will be bumped.
⍝ Other values result in an error or ⎕OFF 123 respectively.
r←⍬
bumpBuild←{0<⎕NC ⍵:⍎⍵ ⋄ 1}'bumpBuild'
:If batchFlag
⎕SHADOW'Assert'
Assert←{(,1)≡,⍵:r←1 ⋄ ⎕OFF 123}
:Else
⎕←(⎕PW-1)⍴'-'
msg←''
msg,←⊂'This function will close all Cider projects, delete everything that is not needed in order to'
msg,←⊂'run a Tatin server, re-arrange stuff, set ⎕LX and finally save the workspace together'
msg,←⊂'with everything that is required by the server in Dist/Server.dws'
msg,←⊂''
msg,←⊂'Finally all that''s required is zipped into a file <Tatin-Server-{major}.{Minor}.{Patch}.zip'
msg,←⊂'That file is created within the Dist/ folder which is not managed by Git'
⎕←⍪msg
⎕←''
:EndIf
F←##.FilesAndDirs
F.(APLTreeUtils2 OS)←##.(APLTreeUtils2 OS)
:If batchFlag
:OrIf 1 ##.Client.YesOrNo'Would you like to continue?'
UpdateVersionNumber bumpBuild
{}⎕SE.Cider.CloseProject''
⎕EX¨'Initialize_Client' 'RunTestServer' 'CreateAllRefs_Client'
⎕LX←'#.Tatin.Server.Run 1'
F.MkDir'Dist'
targetPath←'Dist/Server'
F.RmDir targetPath
⎕DL 0.1
Assert F.MkDir targetPath
F.MkDir targetPath,'/Server/'
⎕DL 0.1
Assert F.IsDir targetPath,'/Server'
F.MkDir targetPath,'/Server/Assets'
⎕DL 0.1
Assert F.IsDir targetPath,'/Server/Assets'
F.MkDir targetPath,'/Server/Maintenance'
⎕DL 0.1
Assert F.IsDir targetPath,'/Server/Maintenance'
F.MkDir targetPath,'/Registry/'
⎕DL 0.1
Assert F.IsDir targetPath,'/Registry'
F.MkDir targetPath,'/Docker'
⎕DL 0.1
Assert F.IsDir targetPath,'/Docker'
⎕WSID←targetPath,'/Server/Server'
'Plodder' 'RumbaLean'#.Tatin.⎕CY ##.CiderConfig.HOME,'/Assets/Runtime/Plodder/Plodder'
0 ⎕SAVE ⎕WSID
(targetPath,'/Docker')(⎕NCOPY⍠('IfExists' 'Replace')F.ExecNfunction)'./Docker/'
(targetPath,'/Server')(⎕NCOPY⍠('IfExists' 'Replace')F.ExecNfunction)'./Assets/'
(targetPath,'/Server/')(⎕NCOPY⍠('IfExists' 'Replace')F.ExecNfunction)'./InstallAsWindowsService.dws'
(targetPath,'/Server/Maintenance/')(⎕NCOPY⍠('Wildcard' 1)('IfExists' 'Replace')F.ExecNfunction)'Maintenance/Server/*'
(targetPath,'/Server/server.ini')(⎕NCOPY⍠('IfExists' 'Replace')F.ExecNfunction)'./server.ini.RemoveMe'
(targetPath,'/Server/')(⎕NCOPY⍠('IfExists' 'Replace')F.ExecNfunction)'./tatin.sh'
{}F.RmDirByForce'Dist/Server/Assets/Runtime/Plodder'
F.DeleteFile¨F.Dir'Dist/Tatin-Server-*.zip'
zipFilename←'Dist/Tatin-Server-',({{⍵/⍨∧\⍵∊'.',⎕D}⍵/⍨3>+\'.'=⍵}(2⊃##.Server.Version)),'.zip'
targetPath ##.ZipArchive.ZipFolder zipFilename
:If batchFlag
⎕OFF
:Else
⎕←'*** Done;  note that the Tatin project has been closed'
:EndIf
:EndIf
:Class Make_
⍝ This class is only ever used when Tatin's `Admin.Make` function is called.\\
⍝ It's purpose is to call either `#.Tatin.Admin.MakeClient` or `#.Tatin.Admin.MakeSever`
⍝ (depending on the right argument of the `Run` function) after a new instance of Dyalog
⍝ was fired up by the `Admin.Make` function.
⍝ ⍵ = 1 = Client
⍝ ⍵ = 2 = Server
∇ {r}←bumpBuild Run type;home;targetFolder;parms;success;log
⍝ Calls either the `#.Tatin.Admin.MakeClient` or the `#.Tatin.Admin.MakeSever` function depending
⍝ on the right argument `type`.
⍝ * 1 = call `#.Tatin.Admin.MakeClient`
⍝ * 2 = call `#.Tatin.Admin.MakeServer`
⍝ Otherwise throw an error or ⎕OFF 123 .\\
⍝ `bumpBuild` defines whether the build ID is bumped (1) or not (0).\\
:Access Public Shared
r←⍬
home←1⊃1 ⎕NPARTS''
⎕SE._Tatin.DEVELOPMENT←0
:If type≡1
targetFolder←home,'/Dist/Client'
3(⎕NDELETE Attempt)targetFolder
3(⎕MKDIR Attempt)targetFolder
parms←⎕SE.Cider.CreateOpenParms ⍬
parms.folder←'./'
parms.batch←1
parms.verbose←0
(success log)←⎕SE.Cider.OpenProject parms
'Opening the Tatin project with Cider was not successful'Assert success
bumpBuild #.Tatin.Admin.MakeClient 1          ⍝ Must be addressed with absolute path!
:ElseIf type≡2
targetFolder←home,'/Dist/Server'
3(⎕NDELETE Attempt)targetFolder
3(⎕MKDIR Attempt)targetFolder
parms←⎕SE.Cider.CreateOpenParms ⍬
parms.folder←'./'
parms.batch←1
parms.verbose←0
(success log)←⎕SE.Cider.OpenProject parms
'Opening the Tatin project with Cider was not successful'Assert success
bumpBuild #.Tatin.Admin.MakeServer 1          ⍝ Must be addressed with absolute path!
:Else
∘∘∘ ⍝ Huuh?!
:EndIf
⎕SE._Tatin.⎕EX'DEVELOPMENT'
∇
⍝ In case an assert is not fulfilled we ⎕OFF with an error code in runtime and crash otherwise:
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ 'Development'≡4⊃'#'⎕WG'APLVersion':⍺ ⎕SIGNAL 11 ⋄ errCode←123 ⋄ ⎕OFF errCode}
∇ {r}←{x}(f Attempt)y;success;counter
⍝ Uses this in case a function might fail on the first attempt. `⎕NDELETE` and `⎕MKDIR` are candidates.\\
⍝ We try up to 10 times with an increasingly longer delay between 0.01 and 0.55 seconds.
r←⍬
counter←success←0
:Repeat
:Trap 19
:If 0<⎕NC'x'
x f y
:Else
f y
:EndIf
success←1
:Else
⎕DL 0.05×counter
counter+←1
:EndTrap
:Until success∨10<counter
∇
:EndClass
r←PrepareTestServer G;targetPath;sourcePath;list
targetPath←⊃G.INI.Get'Logging:Folder'
:If 0<##.⎕NC'CiderConfig'
sourcePath←##.CiderConfig.HOME,'/TestData/App-Log/'
:Else
:If G.TestFlag
sourcePath←##.FilesAndDirs.PWD,'/TestData/App-Log/'
:Else
sourcePath←##.FilesAndDirs.PWD,'/'
:EndIf
:EndIf
⍝ Copy over some pre-prepared log files so that we have some test data
:If 0<≢list←##.FilesAndDirs.ListFiles sourcePath,'*'
⎕NUNTIE G.AppLogTie        ⍝ Because by now it is already tied as part of the bootstrapping
{}targetPath∘{⍺ ⎕NCOPY⍠('IfExists' 'Replace')⊣⍵}¨list
G←(⊃⎕RSI).OpenAppLog G     ⍝ Again
:EndIf
r←##.Server.TatinAmendments G
⍝Done
{r}←RunTestServer y;trapFlag;testFlag;iniFile;args;bool
⍝ This function is used to run a test server started by the Tatin test cases.
⍝ `testFlag`, if 1, allows additional commands to be executed useful only for tests.
⍝ `trapFlag`, if specified and 1, overwites any INI settings and activates error trapping.
⎕TRAP←0 'S'
r←⍬
⎕IO←1 ⋄ ⎕ML←1
(testFlag trapFlag)←2↑y,(≢y)↓¯1 ¯1
args←2 ⎕NQ #'GetCommandLineArgs'
:If ∨/bool←'SERVERPATH='∘{⍺≡1 ⎕C(≢⍺)↑⍵}¨args   ⍝ On Windows, there is (must be) a command line arg SERVERPATH
iniFile←((1+≢'serverPath')↓args⊃⍨⍸bool),'/Server/server.ini'
:ElseIf 2=##.TestCasesServer.⎕NC'∆TEMP_SERVER_FOLDER'
iniFile←##.TestCasesServer.∆TEMP_SERVER_FOLDER,'/Server/server.ini'
:Else
iniFile←##.FilesAndDirs.PWD,'/server.ini'      ⍝ Elsewere the current dir rules
:EndIf
r←iniFile(PrepareTestServer ##.Plodder.Run)testFlag trapFlag
⍝Done
r←CheckBuildLists pathToRegistry;folder;folders;buildList;packageID;buildList2;groupAndName;filename;F;qdmx
⍝ Takes the path to a local Registries and checks whether the packages published have a build list that
⍝ contains the package itself, either with the precise ID or a different version.
r←''
F←##.##.FilesAndDirs
:Trap 6
folders←F.ListDirs pathToRegistry
:Else
qdmx←⎕DMX
:If 'Undefined name: APLTreeUtils2'≡qdmx.Message
⎕←'Initialize Tatin (#.Tatin.Admin.Initialize_Client) and then try again' ⋄ →0
:Else
qdmx.Message ⎕SIGNAL qdmx.EN
:EndIf
:EndTrap
:For folder :In folders
packageID←⊃,/1↓⎕NPARTS folder
filename←folder,'/apl-dependencies.txt'
:If ⎕NEXISTS filename
buildList←⊃F.NGET filename 1
buildList2←##.##.Client.RemoveAlias¨buildList
:If (⊂packageID)∊buildList2
r,←⊂packageID,' (points to itself)'
:Else
groupAndName←'-',⍨{⍵/⍨2>+\⍵='-'}packageID
:If ∨/∨/¨groupAndName∘⍷¨buildList2
r,←⊂packageID,' (points to itself with a different version)'
:EndIf
:EndIf
:EndIf
:EndFor
:If 0=≢r
⎕←'>>> All fine'
:Else
r←⍪r
:EndIf
{parms}SetDevelopment ini
⍝ This sets the global DEVELOPMENT which allows the user to execute user commands in # rather than ⎕SE,
⍝ so changes will be recorded by Link.
⍝ The function must only be called by Cider when opening the Tatin project. The function performs some checks
⍝ in order to ensure this.
parms←{0<⎕NC ⍵:⍎⍵ ⋄ ⍬}'parms'
:If 0=⎕SE._Tatin.⎕NC'DEVELOPMENT'
:If parms≡⍬
:OrIf 0=parms.batch
⎕SE._Tatin.DEVELOPMENT←1 ##.Client.CommTools.YesOrNo'Set DEVELOPMENT←1 in ⎕SE._Tatin? (Allows executing user command code in # rather than ⎕SE)'
:EndIf
:EndIf
:If 0<⎕SE._Tatin.⎕NC'DEVELOPMENT'
:AndIf 1=⎕SE._Tatin.DEVELOPMENT
Info
:EndIf
{r}←UpdateDocumentation dummy;list;targetPath;sourcePath;targetPaths
⍝ Update the Documentation in Assets/docs/ as well as the Server with what we've got in Dist/
r←⍬
targetPaths←'./Assets/docs/' './Dist/Server/Assets/docs/'
sourcePath←'./html/'
:For targetPath :In targetPaths
F.RmDir targetPath
⎕DL 0.2
F.MkDir targetPath
list←F.Dir sourcePath,'*.html'
targetPath∘⎕NCOPY¨list
:EndFor
⍝Done
{r}←UpdateTestServerAssets dummy;path;success;msg;list
⍝ Update the Assets of the Test Server with what we've got in Dist/
r←⍬
path←'./TestServer/Server'
{}F.RmDirByForce path,'/Assets'
⎕DL 0.2
path ⎕NCOPY'./Dist/Server/Server/Assets/' ⍝ Crashes on Conga files? There is probably a server running, using the DLLs.
⍝Done
{r}←UpdateVersionNumber bumpBuild;name;version;date;build;body;newVersion;wsPath
⍝ `bumpBuild` must be a Boolean, otherwise an error is thrown.
⍝ This is what the function is doing if `bumpBuild` is 1:
⍝ 1. It updates the "date" part of the function ##.Registry.Version
⍝ 2. It bumps the build ID, or catenates "+1" as the (new) build ID if there wasn't one yet.
r←⍬
'Invalid right argument; must be a Boolean)'⎕SIGNAL 11/⍨1≠+/(⊂bumpBuild)∊0 1
:If bumpBuild
(name version)←2↑##.Registry.Version
date←10↑##.APLTreeUtils2.FormatDateTime ⎕TS
:If 3=version+.='.'
(version build)←{⍵{((¯1+⍵)↑⍺)(⍵↓⍺)}3⍳⍨+\'.'=⍵}version
build←⍕1+⊃(//)⎕VFI build
:ElseIf 2=version+.='.'
:AndIf '+'∊version
(version build)←{⍵{((⍵-1)↑⍺)(⍵↓⍺)}⍵⍳'+'}version
build←⍕1+⊃(//)⎕VFI build
:Else
build←'1'
:EndIf
version,←'+',⍕build
'Missing dots in version number'Assert 2=version+.='.'
'Some bits in the version number are empty when they must not'Assert 0∧.<≢¨'.'(≠⊆⊢)version
body←##.Registry.⎕NR'Version'
newVersion←'r←''',name,''' ''',version,''' ''',date,''''
body←'r←''[^$]+'⎕R newVersion⊣body
Assert' '=1↑0⍴##.Registry.⎕FX body
wsPath←(⍕⎕THIS.##),'.Registry.Version'
Assert 0<≢⎕SE.Link.Add wsPath
:EndIf
{(rc msg)}←path Add2Config(name value);cfg;qdmx
⍝ Returns (rc msg) when in case of success rc is 0 and msg is ''
rc←0 ⋄ msg←''
cfg←ReadPackageConfigFile path
⍎'cfg.',name,'←value'
:Trap ((⊂,##.Client.DEBUG)∊,¨'on' 1)↓Reg.ErrorNo
0 WritePackageConfigFile path cfg
:Else
qdmx←⎕DMX
msg←qdmx.EM
rc←1
:EndTrap
⍝Done
AddCommentToPackageConfig←{
body←A.DLB ⎕CR'InitPackageConfig'
b←'comments,←'{((≢⍺)↑[2]⍵)∧.=⍺}body
body←↓b⌿body
body←(≢'comments,←')↓¨body
mat←↑⍎¨body
r←CR(≠⊆⊢)⍵
names←{~':'∊⍵:'' ⋄ {⍵↑⍨¯1+⍵⍳':'}A.DLB ⍵}¨r
bool←mat[;1]∊names,⊂''
mat←bool⌿mat
ind←names⍳mat[;1]
r←(2+⌈/≢¨r)↑¨r
r[ind]←r[ind]{⍺,'// ',⍵}¨mat[;2]
r←1↓⊃,/CR,¨r
r
}
pkgCfg←AddTatinVersionNumber pkgCfg
⍝ Inject or update the tatin version number the package configuration was created / changed by.
⍝ `pkgCfg` is a namespace with values
pkgCfg.tatin_version←{⍵↑⍨¯1+⍵⍳'+'}2⊃Reg.Version
⍝Done
request←AddTestFlag request
⍝ We check whether there is a global ∆TEST and it is 1. The and only then do we add the
⍝ HTTP header "test-request" with the value "yes".
⍝ This allows us to ignore those entries when we do usage data (=statistics).
:If 9=##.⎕NC'TestCases'
:AndIf 0<##.TestCases.⎕NC'∆TEST'
:AndIf 1≡##.TestCases.∆TEST
request.Headers,←⊂'test-request' 'yes'
:EndIf
r←add AddToVersion txt;version;build;add_;version_;trailer;buff
⍝ `txt` is something like "1.2.3" or "1.2.3-beta-1" or "1.2.3-beta-1+121"
⍝ `add` is something like "0.0.1" or "0.1.0"
⍝ Examples:
⍝ '1.2.4' ← '0.0.1' AddToVersion '1.2.3'
⍝ '1.3.0' ← '0.1.0' AddToVersion '1.2.3'
⍝ '2.0.0' ← '1.0.0' AddToVersion '1.2.3'
⍝ '2.0.0' ← '1.0.0' AddToVersion '1.2.3-beta-1'  (!)
:If '+'∊txt
(version build)←'+'(≠⊆⊢)txt
build←'+',build
:Else
version←txt
build←''
:EndIf
version_←3↑('.'(≠⊆⊢)version),'.0'
:If ⊃⎕VFI 3⊃version_
trailer←''
:Else
(buff trailer)←{⍵{(⍵↑⍺)(⍵↓⍺)}¯1+⍵⍳'-'}3⊃version_
(3⊃version_)←buff
:EndIf
version_←⊃∘A.ToNum¨version_
add_←3↑('.'(≠⊆⊢)add~'+'),'.0'
add_←⊃∘A.ToNum¨add_
:If 1⊃add_
version_[2 3]←0
:ElseIf 2⊃add_
version_[3]←0
:EndIf
r←⊃{⍺,'.',⍵}/⍕¨version_+add_
r,←build
⍝Done
Assert←{⍺←⊢ ⋄ 0∊⍵:⍺ ⎕SIGNAL Reg.ErrorNo ⋄ shy←0}
r←BindProtocolWithPort(uri port)
:If IsHTTP r←uri
:If ~port∊80 443 0
r←(-'/'=¯1↑uri)↓uri
r,←':',(⍕port),'/'
:EndIf
:EndIf
zipFilename←BuildPackage parms;cfg;fileList;zipObj;tempFilename;deps;errMsg;cfg_;dependencies;hasBuildNo;ciderCfg;buff
⍝ Build a new version of a Tatin package.\\
⍝ The right argument must be a namespace with the required parameters, typically created by calling  `CreateBuildParms`.
⍝ These are the parameters:\\
⍝ * `projectPath` → folder to create the package from; mandatory. Must be specified as right argument of `CreateBuildParms`.
⍝ * `targetPath` (optional); defines the folder where the resulting ZIP is saved.
⍝    If this is not provided or empty it defaults to `projectPath`
⍝ * `dependencyFolder` (optional); if not empty all packages in this folder are going to become dependencies.
⍝   If this is empty `BuildPackage` will check the root of the project for a folder packages/ and take that by convention.
⍝ * `version` can be one of:
⍝    * An empty character vector\\
⍝      The version info from the package config file rules, and the build number (if any) is bumped
⍝    * A pattern starting with a plus (+) like +0.0.1 or +0.1.0 or +1.0.0\\
⍝      This leads to a bumped patch number or a bumbed minor number or a bumped major number and a bumped build number
⍝    * A string representing a version number like "1.2.3" or "10.2.43+123"\\
⍝      If no build number is specified the original build number is taken and bumped.
⍝      Otherwise the given version and build number rule (the build number is not bumped).\\
⍝    The package config file as well as CONFIG in the package's `TatinVars` namespace are updated as a side effect.
parms.projectPath←RemoveFileProtocol parms.projectPath
parms.projectPath←⊃1 ⎕NPARTS ##.FilesAndDirs.AddTrailingSep parms.projectPath
cfg_←ReadPackageConfigFile parms.projectPath
cfg←InitPackageConfig cfg_
ValidateConfig cfg parms.projectPath
:If 0=≢parms.targetPath
parms.targetPath←Reg.AddSlash parms.projectPath
:Else
parms.targetPath←Reg.AddSlash RemoveFileProtocol parms.targetPath
:EndIf
:If ~':'∊parms.targetPath
:AndIf '/'≠1⍴parms.targetPath
parms.targetPath←(Reg.AddSlash parms.projectPath),parms.targetPath
:EndIf
hasBuildNo←0
:If 0<≢parms.version
:If '+'=1↑parms.version
cfg.version←parms.version AddToVersion cfg.version
:Else
hasBuildNo←'+'∊parms.version
cfg.version←parms.version{'+'∊⍺:⍺ ⋄ ⍺,{⍵↓⍨¯1+⍵⍳'+'}⍵}cfg.version ⍝ Assign `version` but preserves build number if not specified
:EndIf
:EndIf
cfg.version←IncreaseBuildNumber⍣(⊃~hasBuildNo)⊣cfg.version
:If 0<≢cfg.assets
cfg.assets←{1=≢⍵:⊃⍵ ⋄ 1↓⊃,/',',¨⍵}ProcessAssetsProp parms.projectPath cfg.assets
:EndIf
:If ≢/{⎕JSON⍠('Dialect' 'JSON5')⊣⍵}¨cfg cfg_
WritePackageConfigFile parms.projectPath cfg
:If ~(⊂parms.tatinVars)∊''⍬
:AndIf 0<parms.tatinVars.⎕NC'CONFIG'
buff←⊃⎕NGET parms.projectPath,CFG_Name
(('\'=buff)/buff)←'/'
'Odd number of " ?!'Assert 0=2|'"'+.=buff
((buff=⎕UCS 10)/buff)←CR
parms.tatinVars.⎕FX'r←CONFIG'('r←''',buff,'''')
:EndIf
:EndIf
dependencies←parms.dependencyFolder EstablishPackageDependencies parms.projectPath
zipFilename←F.ExpandPath parms.targetPath,(GetPackageFilenameFromCfg cfg),'.zip'
:If 0=F.Exists parms.targetPath
F.MkDir parms.targetPath
:Else
F.DeleteFile zipFilename
:EndIf
zipObj←⎕NEW ZipArchive(,⊂zipFilename)
fileList←parms.projectPath GetAllFiles cfg
fileList←DropExcludedFiles fileList cfg parms.projectPath
:If 0=≢fileList
⎕←'No files found in ',parms.projectPath,cfg.source,'...'
:Else
parms.projectPath zipObj.Add fileList
:EndIf
parms.projectPath zipObj.Add CFG_Name
:If 0<≢cfg.assets
parms.projectPath∘{⍺ zipObj.Add ⍵}¨','(≠⊆⊢)cfg.assets
:EndIf
:If 0<cfg.⎕NC'userCommandScript'
:AndIf 0<≢cfg.userCommandScript
:If F.IsFile parms.projectPath,cfg.userCommandScript
(parms.projectPath,⊃⎕NPARTS cfg.userCommandScript)zipObj.Add⊃,/1↓⎕NPARTS cfg.userCommandScript
zipObj.Delete cfg.userCommandScript
:Else
zipObj.Dispose
⎕DL 0.2
3 ⎕NDELETE zipFilename
('Not found: ',cfg.userCommandScript)Assert 0
:EndIf
:EndIf
:If F.IsFile parms.projectPath,'LICENSE'    ⍝ By convention...
parms.projectPath zipObj.Add'LICENSE'   ⍝ ... we add a file "LICENSE" if there is one
:EndIf
:If 0<cfg.⎕NC'files'
:AndIf 0<≢cfg.files
parms.projectPath∘{(p f e)←⎕NPARTS ⍵ ⋄ 0=≢p:⍺ zipObj.Add ⍵ ⋄ (⍺,p,'/')zipObj.Add f,e}¨','(≠⊆⊢)cfg.files
:EndIf
:If 0<≢dependencies
:AndIf F.IsFile(parms.projectPath,{⍵↑⍨¯1+⍵⍳'='}dependencies),'/apl-dependencies.txt'
(parms.projectPath,{⍵↑⍨¯1+⍵⍳'='}dependencies)zipObj.Add'/apl-dependencies.txt'
:ElseIf F.IsFile parms.projectPath,'apl-dependencies.txt'
parms.projectPath zipObj.Add'apl-dependencies.txt'
:EndIf
zipObj.Dispose
r←CFG_Name
r←Reg.CFG_Name
r←CR
r←⎕UCS 13
{r}←CheckAlias(packageID targetSpace);msg;ref;this;alias;old;packageID_;packageID_old;packageID_old_
⍝ Check `alias` for already being in use in the target namespace.
⍝ Must check whether the alias is used for the same package again because that's okay.
r←⍬
:If 9=⎕NC⍕targetSpace  ⍝ Because the target space might not yet exist
ref←⍎targetSpace
alias←¯1↓1⊃SplitAtAlias packageID
:AndIf 0<ref.⎕NC alias
:If 9=ref.⎕NC alias
packageID_←GetPackageIDFrom packageID
old←⍕targetSpace⍎alias
packageID_old←{⍵↑⍨1+-'.'⍳⍨⌽⍵}{¯1↓⍵/⍨⌽1≤+\'.'=⌽⍵}old
packageID_old_←GetPackageIDFrom packageID_old
packageID_old_[{2↓⍸'_'=⍵}packageID_old_]←'.'
((packageID_old_='_')/packageID_old_)←'-'
:If ≢/Reg.RemovePatch¨packageID_ packageID_old_
('Name "',alias,'" already in use and therefore not suitable as alias (⎕NC=9)')Assert 0
:EndIf
:Else
('Name "',alias,'" already in use and therefore not suitable as alias (⎕NC=',(⍕ref.⎕NC alias),')')Assert 0
:EndIf
:EndIf
⍝Done
{r}←CheckAliasOnInstall(path alias packageID);ns;filename;aliasse;list
⍝ Of course the same alias must not be used for more than one package, so we need to check this.
r←⍬
:If 0<≢alias
filename←path,Reg.BuildListFilename{('/',⍺)/⍨⍺≢(-≢⍺)↑⍵}path
:AndIf F.IsFile filename
ns←Reg.APLfromJSON⊃F.NGET filename
list←Reg.RemoveMinorAndPatch¨ns.packageID
list~←⊂Reg.RemoveMinorAndPatch alias,packageID
:AndIf 0<≢aliasse←{⍵/⍨'@'∊¨⍵}list
('Package alias "',alias,'" already in use')Assert~(⊂alias)∊1⊃∘SplitAtAlias¨aliasse
:EndIf
⍝Done
CheckAssetsExist←{
path←⍺∘{(':'∊⍵)∨('./'≡2⍴⍵)∨((1⍴⍵)∊'/\'):⍵ ⋄ ⍺,⍵}⍵
F.Exists path:shy←⍬
('The asset folder does not exist: ',⍵)Assert 0
}
{r}←{force}CheckBuildList folder;ts_build;ts_deps;filenameBuild;filenameDeps;deps;tree;b;newTree;deps2;ind;deps_;msg
⍝ Checks the modification dates of both the build list and the dependency file and also the consistancy
⍝ of these files, and re-compiles the build list if this seems appropriate.\\
⍝ We distinguish here between level-1 packages and other packages (=dependencies).
⍝ The level-1 packages are called top-level packages.
⍝ If the dependency file was modified after the build list was saved:
⍝ * If a top-level package was removed from the dependency file the build list is re-created
⍝ * If a dependency package is missing, re-installation is required and therefore an error thrown\\
⍝ In a second step we check whether the two files are consistent. If not we try to recompile and
⍝ check again. If that does not help an error is thrown.\\
force←{0<⎕NC ⍵:⍎⍵ ⋄ 0}' force'
folder←Reg.AddSlash folder
filenameBuild←folder,Reg.BuildListFilename
filenameDeps←folder,Reg.DependenciesFilename
:If ~force
⍝ Tatin always writes first the dependency file and only then the build list to the disk,
⍝ yet the timestamps in the milliseconds sometimes pretend it to be the other way round (Windows).
⍝ Therefore we add one second for the build list to make sure that we only re-build the build list
⍝ when the dependency file has really been modified by a user with an editor; the user won't be able
⍝ to manage that within a single second.
ts_build←1 GetFileTime filenameBuild
ts_deps←GetFileTime filenameDeps
:EndIf
tree←ReadBuildList filenameBuild
deps←ReadDependencyList filenameDeps
deps_←RemoveAlias¨deps
:If r←force
:OrIf r←ts_deps>ts_build
tree←1 CompileBuildList folder deps
:EndIf
:If ⍬≡tree ⍝ No build list
:OrIf 0∊deps∊tree[;2]
tree←0 CompileBuildList folder deps
deps←ReadDependencyList filenameDeps
deps_←RemoveAlias¨deps
('Build list and dependency list are incompatible in ',folder)Assert~0∊(Reg.RemoveMinorAndPatch¨deps_)∊Reg.RemoveMinorAndPatch¨tree[;2]
:EndIf
:If ∨/b←~F.IsDir¨folder∘,¨RemoveAlias¨tree[;2]
msg←'The build list in ',LF,'  ',folder,LF,'  refers to'
:If 1=+/b
msg,←' a package that is not installed:',LF,'  ',(⍸b)⊃tree[;2]
:Else
msg,←' packages that are not installed:',LF,'  ',⊃{⍺,', ',⍵}/b/tree[;2]
:EndIf
msg Assert 0
:EndIf
⍝Done
CheckDependencies←{
⍝ Checks wether ⍵ is one of:
⍝ * Starts with http[s]://
⍝ * Starts with file://
⍝ * Is a full and valid package ID
⍝ ⍵ may be a simple text vector or a vector of simple text vectors.
⍝ Returns either '' or an error message
txts←⊆⍵
isFullPkgID←Reg.IsValidPackageID_Complete∘RemoveAlias¨txts
isHTTP←IsHTTP¨txts
isFile←{1=≢'^file://'⎕S 0⊣⎕C ⍵}¨txts
buff←isFullPkgID+isHTTP+isFile
buff∧.=1:''
'Number of dependencies being neither a full package ID nor a url following either the http or file scheme: ',⍕+/~buff
}
flag←CheckDeprecatedFlag folder;filename;EndIf;cfg
⍝ Checks the `deprecated` flag of the package config file in "folder".
⍝ If "deprecated" does not exist or is 0 or the user confirms that she really wants a deprecated package
⍝ then a 1 is returned, otherwise a 0.
flag←0
filename←folder,'/',CFG_Name
:If ~⎕NEXISTS filename
cfg←Reg.JSON⊃F.NGET filename
:OrIf 0=cfg.⎕NC'deprecated'
:OrIf 0=cfg.deprecated
:OrIf YesOrNo'The package is deprecated - continue anyway?'
flag←1
:EndIf
r←{flags}CheckForLaterVersion path;buildFilename;topLevel;buildList;dependencies;majorVersions;ind;success
⍝ `path` must point to a folder with installed packages, meaning that there
⍝ must be a file apl-buildlist.json available. This is mandatory.
⍝ The optional left argument can carry flags as a single integer:
⍝  1. Major: should later major version be listed as well? Defaults to 0
⍝  2. Dependencies: should dependencies be checked as well? Defaults to 0
⍝ You may specify both flags as true by passing a 3, or only the second one as 2.\\
⍝ Checks whether there are later versions available for what's specified by the build list.\\
⍝ By default only minor and patch are part of the check. By specifying 1 as `major`
⍝ you may change this default behaviour and list any later major versions instead.\\
⍝ This function scans all known registries **with a priority greater than zero**!\\
⍝ It does **not** check whether a particular version is now available from a different Tatin
⍝ Registry then it was originally installed from.
⍝ Returns a matrix with these columns:
⍝ [;1] Original package ID
⍝ [;2] "Latest" package ID
⍝ [;3] Original URL
⍝ [;4] Flag; 1 means Server did respond
⍝ [;5] URL the latest version was found at but empty in case it's identical with [;3]
r←0 5⍴⍬
flags←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'flags'
'Invalid left argument'Assert 83=⎕DR flags
'Invalid right argument'Assert(' '=1↑0⍴⊂path)∧(1=≡path)
(majorVersions dependencies)←2↑Reg.IntToBits flags
path←Reg.AddSlash path
'Folder does not exist'Assert F.IsDir path
buildFilename←path,Reg.BuildListFilename
('File not found: ',buildFilename)Assert F.IsFile buildFilename
buildList←Reg.JSON⊃F.NGET buildFilename
EstablishEmptyPermanentConnections 0
:If 0<≢buildList.packageID
r←↑majorVersions CheckForLaterVersion_¨(dependencies⌈buildList.principal)/buildList.packageID
r,←r[;3]
r[;3]←(dependencies∨buildList.principal)⌿buildList.url
r[;3 5]←{IsHTTP ⍵:⍵ ⋄ 0=≢⍵~' ':'' ⋄ 'expand'F.NormalizePath ⍵}¨r[;3 5]
:If 0<≢ind←⍸~r[;4]
r[ind;5]←⊂''
:EndIf
CloseConnections 0
:EndIf
r←{majorVersions}CheckForLaterVersion_ packageID;fullPath;url;fullPath2;packageID2;errMsg;statusCode;packageID_
⍝ Takes a packageID and checks whether it finds a later version.
⍝ All Registries with a priority greater than 0 are scanned.\\
⍝ If `majorVersions` is 0 only minor and patch number are considered.\\
⍝ If `majorVersions` is 1 later "major" versions are considered as well.\\
⍝ For every package found these pieces of information are returned:
⍝ 1. Original package ID
⍝ 2. Package ID of the latest version found  (or "<<< No response >>>" or "<<< Not found >>>")
⍝ 3. URL
⍝ 4. Boolean that is 1 in case of success and 0 ("Not found" or "No response") otherwise
majorVersions←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'majorVersions'
'Invalid left argument'Assert 1=≢majorVersions
'Invalid left argument'Assert majorVersions∊0 1
packageID_←RemoveAlias packageID
:If majorVersions
url←('⎕'=⊃⊃⎕XSI)EstablishRegistry Reg.RemoveVersionNumber packageID_
:Else
url←('⎕'=⊃⊃⎕XSI)EstablishRegistry Reg.RemoveMinorAndPatch packageID_
:EndIf
:If 0=≢url
r←packageID_'<<< Not found anywhere >>>' '' 0
:Else
fullPath←url,packageID_
PrintToSession'Checking <',fullPath,'>...'
:Trap 345
:If majorVersions
(statusCode errMsg fullPath2)←GetBestVersionNumber(Reg.RemoveVersionNumber packageID_)url
:Else
(statusCode errMsg fullPath2)←GetBestVersionNumber(Reg.RemoveMinorAndPatch packageID_)url
:EndIf
:Else
r←packageID_'<<< No response >>>'url 0
:EndTrap
:If 404=statusCode
r←packageID_'<<< Not found >>>'url 0
:Else
errMsg Assert 200=statusCode
:If 0<≢fullPath2
packageID2←GetPackageIDFrom fullPath2
r←packageID_ packageID2 url(packageID_≢packageID2)
:EndIf
:EndIf
:EndIf
⍝Done
{r}←{forceFlag}CheckInstallFolder path
⍝ Checks `path`.
⍝ * If the parent does not exist an error is thrown
⍝ * If just the last part does not exist the user is prompted for creating it
⍝ If ⍺ is specified and 1 then the user is NOT prompted but the folder created.
⍝ Returns 1 in case part of `path` was created and 0 otherwise.
forceFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'forceFlag'
path←{(¯1×(¯1↑⍵)∊'/\')↓⍵}⍕path
:If ∨/'/\'∊path
'"targetFolder" is invalid'Assert ⎕NEXISTS 1⊃⎕NPARTS path
:EndIf
:If F.IsDir path
r←0
:Else
'"targetFolder" already exists but is not a folder'Assert~⎕NEXISTS path
:If forceFlag
:OrIf 1 YesOrNo{'Create folder "',(2⊃⍵),'" within ',(1⊃⍵),'?'}⎕NPARTS path
3 ⎕MKDIR path
:EndIf
:EndIf
(deps installFolder registry)←CheckReInstallDependencies y
y←⊆y
(installFolder registry)←2↑y,(≢y)↓'' ''
'Mandatory argument (install directory) must not be empty'Assert 0<≢installFolder
:If '[myucmds]'{⍺≡⎕C(≢⍺)↑⍵}installFolder
installFolder←GetMyUCMDsFolder'/',{⍵↓⍨⍵⍳']'}installFolder
:EndIf
'Not a directory'Assert F.IsDir installFolder
deps←Dependencies.Get installFolder
'Dependency file is empty or does not exist'Assert 0<≢deps
⍝Done
identifier←{noBetas}CheckVersion identifier;packageID;path;CR;msg;statusCode;errMsg
noBetas←{0<⎕NC ⍵:⍎⍵ ⋄ Reg.GetNoBetasDefault}'noBetas'
packageID←GetPackageIDFrom identifier
:If ~Reg.IsValidPackageID_Complete packageID
:AndIf '.zip'≢⎕C ¯4↑identifier
EstablishRumbaClients ⍬    ⍝ Now we know for certain that we need to access the web
:If 0=≢path←(-≢packageID)↓identifier
path←EstablishRegistry packageID
:If 0=≢path
identifier←''      ⍝ Means: not found
:Return
:EndIf
:EndIf
(statusCode errMsg identifier)←noBetas GetBestVersionNumber packageID path
:If 404=statusCode
identifier←''          ⍝ Means: not found
:Else
errMsg Assert 200=statusCode
:EndIf
:EndIf
⍝Done
{r}←CheckWouldBePackage path;cfg;extension;sourceCodeFiles;isDir;isFnOrOpr;fullPath
⍝ Checks whether there is a config file in path ⍵, and whether the API, if specified at all, points to a namespace or class.
r←0
'Could not find a package config file'Assert F.Exists path,'/',CFG_Name
cfg←ReadPackageConfigFile path
path←Reg.AddSlash path
:If 0<≢cfg.api
extension←3⊃⎕NPARTS cfg.source
'"api" must not point to a function or an operator'Assert~(⊂extension)∊'.aplf' '.aplo'
fullPath←path,cfg.source
:If ≢/,¨cfg.api(2⊃⎕NPARTS cfg.source)
isDir←F.IsDir fullPath
isFnOrOpr←(⊂3⊃⎕NPARTS cfg.source)∊'.apln' '.aplc'
:If 0=isDir+isFnOrOpr
('Is not a directory: ',fullPath)Assert isDir
'API is neither a class nor a namespace'Assert isFnOrOpr
:EndIf
:If isFnOrOpr
('Is not a source file: ',fullPath)Assert F.IsFile fullPath
:Else
sourceCodeFiles←⊃F.Dir Reg.AddSlash fullPath
('Directory is empty: ',fullPath)Assert 0<≢sourceCodeFiles
:EndIf
:EndIf
:EndIf
⍝Done
CheckWsPaths←{
⍝ Makes sure that the version is tranformed when it turns out that the WS has "only" a better
⍝ version to offer. We don't have that information at hand anymore, the building file might
⍝ be confused by dependencies that are also top-level packages, and other obstacles.
path←⍕⍵
0<⎕NC path:⍵
(parent packageID)←{⍵{(⍵↓⍺)(1↓⍵↑⍺)}-(⌽⍵)⍳'.'}path
(alias packageID)←SplitAtAlias packageID
list←' '~⍨¨↓(⍎parent).⎕NL 9
removeVersionNo←{⍵/⍨2>+\'_'=⍵}
ind←((removeVersionNo¨list),¨' ')⍳⊂(removeVersionNo packageID),' '
('Not found: ',packageID)Assert~ind>≢list:
instead←ind⊃list
⍕parent⍎instead
}
(rc report)←ClearCache url;path;domains;domains;rc_;more;en;domains2;this2;rc2;en2;more2;domain
⍝ Clears the Tatin package cache of `url`. If `url` is an empty vector everything is deleted.
⍝ Returns a two-element vector:
⍝ [1] A 0 in case of success and 1 otherwise
⍝ [2] A simple char vector, possibly with injected LFs (⎕UCS 10), reporting failures. Is empty in case `rc` is 0.
⍝ Because somebody/something else might just be in the process of saving a package in the cache the operation might well fail.
⍝ For that reason it attempts to remove one package after the other. The function `FilesAndDirs.RmDir` tries
⍝ multiple times before giving up.
⍝ Any errors during RmDir are suppressed but reflected by the result.
rc←0 ⋄ report←''
path←GetPathToPackageCache
:If 0<≢domains←F.ListDirs path,'/*'
domains←((⊂'temp')≢¨{2⊃⎕NPARTS ⍵}¨domains)/domains
:If 0<≢url
domains←(url∘≡¨{⊃,/1↓⎕NPARTS ⍵}¨domains)/domains
:EndIf
:AndIf 0<≢domains
:For domain :In domains
(rc_ en more)←F.RmDir domain
:If 0≠rc_
rc←1
report,←(domain,': ',more),⎕UCS 10
:If 0<≢domains2←F.ListDirs domain,'/*'
:For this2 :In domains2
(rc2 en2 more2)←F.RmDir this2
:If 0≠rc2
report,←(this2,': ',more2),⎕UCS 10
:EndIf
:EndFor
:EndIf
:EndIf
:EndFor
:EndIf
⍝Done
{r}←CloseConnections force;list;flag;qdmx
⍝ Close all permanent connections defined within ∆PermanentConnections, and delete that namespace.
⍝ That can be prevented by injecting `keepOpen←1` into ∆PermanentConnections which in turn
⍝ can be overwritten with ⍵←1.
r←⍬
:If 9=⎕NC'∆PermanentConnections'
:If 0<≢∆PermanentConnections.⎕NL 9
flag←1
:If ~force
:If 0<∆PermanentConnections.⎕NC'keepOpen'
:AndIf ∆PermanentConnections.keepOpen
flag←0
:EndIf
:EndIf
:If flag
list←∆PermanentConnections.{⍎¨↓⎕NL 9}⍬
:Trap 0
{}{⍵ R.Close 0}¨list
:Case 1006
'Conga DLL reports an error 1006 and won''t work anymore - restart APL'⎕SIGNAL 11
:Else
⍝ This happens, but very rarely.
⍝ We need to find out why
qdmx←⎕DMX
⎕TRAP←0 'S'
∘∘∘
:EndTrap
⎕EX'∆PermanentConnections'
:EndIf
:Else
⎕EX'∆PermanentConnections'
:EndIf
:EndIf
(
''
'## Overview'
''
'This package comes with functions and operators that allow you to interrogate the user, and make her...'
''
'* answer simple questions like "Are you sure?" or "Do you really want to delete this file?" (`YesOrNo`)'
'* select an item (or several items) from a list of items, or quit (`Select`)'
'* pause and read a message before continuing (`Pause`)'
'* enter a character vector in response to something like "Enter your name:" (`AskForText`)'
'* enter a number in response to something like "How many copies? " (`AskForNumber`)'
'                                                                 '
'This is useful for interacting with the user in the session, something that user commands do'
'quite often.'
''
'Note that although `AskForNumber` and `AskForText` are operators rather than functions, this document'
'will refer to them as functions except when they themselves are discussed.'
''
'## Interrupting the functions'
''
'When a user is prompted for input, due to a long-standing bug in Dyalog you cannot interrupt with a weak '
'or a strong interrupt. Answering the question or selecting an item and then trying to interrupt the '
'code does not work well on modern machines because they are just too fast.'
''
'That''s why all functions allow you to enter `∘∘∘`, which makes the functions run on a stop vector that '
'is dynamically set for just this purpose.                                                                 '
''
'## Automated responses'
''
'Test cases quite often require certain decisions and choices to be made. In such cases the presence '
'of a human in front of the screen is required. The automation feature is designed to allow such tests '
'to run without a human.'
''
'All functions can be integrated into tests so that no user is required to answer any questions or'
'select items. This is achieved by providing data on global variables that do not normally exist.'
''
'#### Dynamically generated questions and captions'
'    '
'Sometimes you need to create a question (`YesOrNo`) or a caption (`Select`) dynamically such as '
'"Select action for file /foo/boo/this-will-change.txt"'
''
'In such cases, for automation, just specify only the leading part of the question or caption which won''t be '
'generated dynamically. In the example just specify "Select action for file". If a complete match cannot '
'be found, `Select` or `YesAndNo` will check if the _beginning_ of the caption/question matches '
'the given text, so it would still find a match.'
''
'However, you may find it more convenient to use aliases.'
''
'### Using aliases'
''
'Aliases were introduced in version 1.2. By default, an alias is represented by the `@` character.'
'As of version 1.3.0 you can choose a different one by assigning it to the global variable `AliasChar`.'
'The only reason for doing this is when you need to have the `@` glyph in a question or caption. Even then'
'more often than not you don''t need to worry about this because aliases can only be defined until the first'
'space character of the first Line Feed character.'
''
'Anything up to and including the `@` will be taken as alias as long as it does not contain LC, CR or a '
'space, meaning that this part will not be displayed as a question or message, but can be used as a matching '
'string, again including the (trailing) `AliasChar` character. '
''
'For example:'
''
'```'
'''MyAlias@My Question'''
'```'
''
'This defines an alias. This on the other hand doesn''t:'
''
'```'
'''The @ character is used...'''
'```'
''
'Note that while aliases may seem like a perfect solution, they can also reduce readability. If you create a '
'number of responses in advance at the start of your application/user command this can become a bit confusing.'
''
'There are two ways to avoid this:'
''
'1. Use a meaningful expression as an alias rather than, for example, just `1@`'
''
'2. You can add something _after_ the `@` glyph: This will be ignored and can therefore be used as a comment'
''
'   It could be a hint or the name of the function that asks the question, define context etc.'
'   '
'### Cleaning up'
''
'Of course there is nothing wrong with deleting the global variables yourself like this:'
''
'```'
'⎕EX ''CommTools.Select_Choices'''
'    ⍝ ... etc'''
'```'
''
'However, you can also just call the `Cleanup` function which will do the job for you.'
''
'This has some advantages:'
''
'* If `CommTools` is extended in the future, `Cleanup` may do more than that, so calling it is safer than trying '
'  to do the job yourself. '
'* You don''t need to know the names of the global variables, and therefore you can''t get them wrong either  '
''
'The downside of `Cleanup` is that it deletes _all_ global variables used for automation, and there '
'may be scenarios where you do not want this. Then you have to delete what you don''t need anymore.'
'   '
'## The functions and operators'
''
''
'### The function "YesOrNo"'
''
'Imagine asking this question:'
'                       '
'```'
'CommTools.YesOrNo ''Are you sure you want to delete this file?'''
'```'
''
'To answer this question automatically create a global variable `YesOrNo_Answers` as a matrix'
'with two columns:'
''
'| `[;1]` | Contains the question to be answered automatically.'
'| `[;2]` | The answer to be given, usually either "y" or "n".'
''
'So in our case we specify:'
''
'```'
'CommTools.YesOrNo_Answers←1 2⍴''Are you sure you want to delete this file?'' ''y'''
'```         '
''
'When the question is asked:'
'                             '
'```'
'CommTools.YesOrNo ''Are you sure you want to delete this file?'''
'```'
''
'`YesOrNo` would do the following:'
''
'1. Check if there is a global variable `YesOrNo_Answers` around.'
'2. If there is, it would try to match the question to any row in the first column of `YesOrNo_Answers` '
'3. If there is a match, it would return the value in the second column of the identified row'
''
'Notes:'
''
'* Leading spaces in the question are removed'
'* If multiple entries in `YesOrNo_Answers` match the question an error is thrown'
'* If the second column is empty `YesOrNo` would return the default answer given by the'
'  left argument: 1="Y", 0="N"'
'  '
'  If there is no left argument provided in such a case `YesOrNo` would throw an error'
'* If no row in `YesOrNo_Answers` matches the question it would ask the question as usual'
''
'#### Dynamic questions'
'    '
'Sometimes you need to ask dynamically created questions like "Are you sure you want to delete the file /foo/boo/this-will-change.txt?"'
''
'In this case just specify "Are you sure you want to delete the file" as the text to match: if there is no complete match, `YesOrNo` '
'will start searching for questions that _begin_ with the given text, so it will still find a match. '
''
'#### Multiple line questions                    '
''
'`YesNorNo` accepts nested vectors as questions as well as a character vector with `⎕UCS 10` in it. (Note that a nested vector'
'is internally converted to a simple character vector with `⎕UCS 10` (Line Feed) in it)'
''
'If the two searches outlined above do not produce a match `YesNorNo` would isolate the last bit of the question '
'and check it for a complete match.'
''
'This is best explained with an example:'
''
'```'
'     q←⊂''file1'''
'     q,←⊂''file1'''
'     q,←⊂''Sure you wanna delete these?'''
'     CommTools.YesOrNo_Answers←1 2⍴ (3⊃q) ''y'''
'     ⎕←CommTools.YesOrNo q'
('y'⋄)
'```'
''
'### The "Select" function '
''
'Imagine you want to present a list with three items, and you want the second one to be selected.'
''
'This can be achieved by creating a global variable `Select_Choices` as a matrix with two'
'columns:'
''
'| `[;1]` | Contains the caption of the list.'
'| `[;2]` | The answer to be given, so usually either an integer pointing to the item selected,<<br>>or a vector of integers (in case "a" was entered) or `⍬` (in case "q" was entered).'
''
'`Select` would do the following:'
''
'1. Check whether there is a global variable `Select_Choices` around'
'2. If so it would try to match the caption to any row in the first column of `Select_Choices` '
'3. If there is a match it would return the value in the second column of the identified row'
''
'Notes:'
''
'* Leading spaces in choices are removed'
'* If multiple entries in `Select_Choices` match the caption an error is thrown'
'* If no row in `Select_Choices` matches the caption it would present the list for selection  '
''
'So in our case we specify:'
''
'```'
'   l←⊂''First'''
'   l,←⊂''Second'''
'   l,←⊂''Third'''
'   caption←''Please select hot item:'''
'   CommTools.Select_Choices←1 2⍴caption 2'
'   ⎕←caption CommTools.Select l  '
('2'⋄)
'``` '
''
'For all items:'
''
'```   '
'   CommTools.Select_Choices←1 2⍴caption ''a'''
'   ⎕←caption CommTools.Select l  '
'1 2 3'
'``` '
''
'For no items ("quit"):'
''
'```   '
'   CommTools.Select_Choices←1 2⍴caption ''q'''
'   ⎕←⍬≡caption CommTools.Select l  '
('1'⋄)
'``` '
''
'In case the list items are not only created dynamically but they are also complex and a table it might be difficult or even '
'impossible to construct a matching line, for example because you don''t know upfront the number of spaces between columns.'
''
'In such a case use the `*` glyph as a wildcard character: it tells `Select` to match only the beginning of a line.'
''
'#### Specifying a selection'
'                       '
'If you need a specific selection to be returned but you don''t know the item number in advance because the list is created '
'dynamically, you can specify the selection itself instead of an integer.'
''
'For example:'
''
'```'
'   CommTools.Select_Choices←1 2⍴caption ''Second'''
'   ⎕←caption CommTools.Select l'
'2     '
'```'
''
'### The "Pause" function '
''
'The purpose of this function is to print a message to `⎕SE`, possibly with line feed characters (`⎕UCS 10`) in them, '
'and tell the user to press <enter> to continue.'
''
'As with the other functions you can interrupt `Pause` by typing `∘∘∘`.'
''
'If you don''t want the function to pause at all, create a global variable `NoPause` and assign a 1 to it.'
''
'If you want to pause in some but not all instances you can assign one or more `msg` to `NoPause`. '
'The function will try to match the string(s) on `NoPause` with the message, and if it''s a full or partial match it won''t pause, otherwise it will.'
''
'### Ask for a number'
''
'Imagine you ask this question:'
'                       '
'```'
'({1}CommTools.AskForNumber) ''Number of copies to print'''
'```'
''
'Note that the operator `AskForNumber` requires a check function to be passed as left operand. In the example '
'the check function simply returns a 1. Instead you could perform a real check like this:'
''
'```'
'CheckFn←{'
'   ⍵∊1 2 3 4 5:1 '
'   ⎕←''Please enter a number between 1 and 5'' '
'   0'
('}'⋄)
'(CheckFn CommTools.AskForNumber) ''Number of copies to print:'''
'```     '
''
'If the user does not enter a number but just presses <enter>, an empty vector is returned. You can force the user to enter'
'a number by passing a 1 as left argument (`enforce`).'
''
'To answer this question automatically create a global variable `AskForNumber_Answers` as a matrix'
'with two columns:'
''
'| `[;1]` | Contains the question.'
'| `[;2]` | The answer to be given, either as a character vector or as a number.'
''
'So in our case we specify:'
''
'```'
'CommTools.AskForNumber_Answers←1 2⍴''Number of copies to print'' 1'
'```         '
''
'When the question is asked:'
'                             '
'```'
'({1}CommTools.AskForNumber) ''Number of copies to print'''
'```'
''
'`AskForNumber` would do the following:'
''
'1. Check whether there is a global variable `AskForNumber_Answers` around'
'2. If there is it would try to match the question to any row in the first column of `AskForNumber_Answers` '
'3. If there is a match it would return the value in the second column of the identified row and convert it to a number'
'   if it is text'
''
'Notes:'
''
'* Leading spaces in the question are removed, ": " is appended'
'* If multiple entries in `AskForNumber_Answers` match the question, an error will be thrown'
'* If no row in `AskForNumber_Answers` matches the question, the question is asked as usual'
''
'### Asking for a character vector'
''
'Imagine you are asking this question:'
'                       '
'```'
'({1}CommTools.AskForText) ''Enter a month (three characters)'''
'```'
''
'Note that the operator `AskForText` requires a check function to be passed as left operand. In the example '
'the check function simply returns a 1. Instead you could perform a real check like this:'
''
'```'
'CheckFn←{'
'   (⊂⍵)∊↓12 3⍴''janfebmaraprmaijunjulaugsepoctnovdec'':1 '
'   ⎕←''Please enter just three lowercase characters'' '
'   0'
('}'⋄)
'(CheckFn CommTools.AskForText) ''Enter a month (just three character)'''
'```     '
''
'If the user does not enter anything but just hits <enter> an empty vector will be returned. '
'You can force the user to enter a number by passing a 1 as left argument (`enforce`).'
''
'Instead of a Boolean you can also specify a character vector as `⍺`. In that case, when the user just presses `<enter>`'
'without entering anything, the default (`⍺`) is returned.'
''
'To answer this question automatically create a global variable `AskForText_Answers` as a matrix'
'with two columns:'
''
'| `[;1]` | Contains the question.'
'| `[;2]` | The answer to be given.'
''
'So in our case we specify:'
''
'```'
'CommTools.AskForText_Answers←1 2⍴''Enter a month (three character)'' ''mar'''
'```         '
''
'When the question is asked:'
'                             '
'```'
'({1}CommTools.AskForText) ''Enter a month (three character)'''
'```'
''
'`AskForText` would do the following:'
''
'1. Check whether there is a global variable `AskForText_Answers`'
'2. If so it would try to match the question to any row in the first column of `AskForText_Answers` '
'3. If there is a match it would return the value in the second column of the identified row'
''
'Notes:'
''
'* Leading spaces in the question are removed, ": " is appended'
'* If multiple entries in `AskForText_Answers` match the question, an error will be thrown'
'* If no row in `AskForText_Answers` matches the question, the question will be asked as usual'
)
'@'
value←{enforce}(CheckFn AskForNumber)question;flag;input;valid;alias;bool;buff;success;firstPart;ind
⍝ Operator asking a question and allowing the user to enter a number.\\
⍝ By entering "`∘∘∘`" the user may interrupt `AskForNumber`: this activates a stop.\\
⍝ `CheckFn` is supposed to be a function that gets the input as `⍵` and must return a Boolean
⍝ with a 1 indicating that the input is okay and 0 that it is not. If you don't need/want
⍝ a check function pass `{1}` as left operand.\\
⍝ If the user refuses to enter a number an empty vector is returned.
⍝ However, you might prevent this from happening by specifying a 1 as `⍺` (`enforce`), meaning that
⍝ the user must enter a number in order to continue.
enforce←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'enforce'
value←⍬
success←flag←0
:If ~(≡question)∊0 1
question←1↓⊃,/LF,¨question
:EndIf
question←ReplaceCRbyLF question
question←{⍵↓⍨+/∧\' '=⍵}question
:Repeat
firstPart←{⍵↑⍨⍵⍳LF}question
:If 0<⎕NC'AskForNumber_Answers'
AskForNumber_Answers←(0<≢¨' '~⍨¨AskForNumber_Answers[;1])⌿AskForNumber_Answers
AskForNumber_Answers[;1]←{⍵↓⍨+/∧\' '=⍵}¨AskForNumber_Answers[;1]
:AndIf 0<≢AskForNumber_Answers
:If AliasChar∊firstPart
ind←firstPart⍳AliasChar
:AndIf ∧/~(LF,' ')∊ind↑question
(alias question)←ind{(⍺↑⍵)(⍺↓⍵)}firstPart
flag←0<+/bool←({⍵↑⍨⍵⍳AliasChar}¨AskForNumber_Answers[;1])≡¨⊂alias
:ElseIf ~flag←0<+/bool←AskForNumber_Answers[;1]≡¨⊂firstPart
flag←0<+/bool←firstPart∘{⍵≡(≢⍵)↑⍺}¨AskForNumber_Answers[;1]
:EndIf
:If flag
'Multiple pre-prepared answers qualify?!'Assert 1=+/bool
input←⍕2⊃AskForNumber_Answers[bool⍳1;]
:EndIf
:Else
:If (⌊/firstPart⍳' ',LF)>firstPart⍳AliasChar
question←{~AliasChar∊⍵:⍵ ⋄ ⍵↓⍨⍵⍳AliasChar}question
:EndIf
:EndIf
:If ~flag
input←⍞,0/⍞←question,': '
:If '∘∘∘'≡¯3↑input
(1+⊃⎕LC)⎕STOP⊃⎕SI
∘∘∘ ⍝ Deliberate stop caused by user input
:EndIf
input←{⍵↑⍨1+-(⌽⍵)⍳':'}input
:EndIf
:If 0=≢input~' '
:AndIf ~enforce
value←⍬
:Return
:Else
(valid value)←⎕VFI input
:If 1≠≢valid
⎕←'Please enter precisely one number'
:ElseIf valid
success←CheckFn value
value←⊃value
:Else
⎕←'You did not enter a valid number, please retry!'
:EndIf
:EndIf
:Until success
⍝Done
text←{x}(CheckFn AskForText)question;flag;alias;bool;buff;success;firstPart;enforce;default
⍝ Operator asking a question and allowing the user to enter text.\\
⍝ By entering "`∘∘∘`" the user may interrupt `AskForText`: this activates a stop.\\
⍝ `CheckFn` is supposed to be a function that gets the input as `⍵` and must return a Boolean
⍝ with a 1 indicating that the input is okay and 0 that it is not. If you don't need/want
⍝ a check function pass `{1}` as left operand.\\
⍝ If the user refuses to enter anything an empty vector is returned.
⍝ However, you might prevent this from happening by specifying a 1 as `⍺` (`enforce`), meaning that
⍝ the user must enter something in order to continue.
⍝ You can also specify a default as `⍺` by passing a character vector instead of a Boolean.
⍝ In case the user does not enter something that default is returned; that's why the Boolean would
⍝ not make a difference anyway.
x←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'x'
:If ' '=1↑0⍴x
default←x
enforce←0
:Else
enforce←x
default←''
:EndIf
text←''
success←flag←0
:If ~(≡question)∊0 1
question←1↓⊃,/LF,¨question
:EndIf
question←ReplaceCRbyLF question
question←{⍵↓⍨+/∧\' '=⍵}question
:Repeat
firstPart←{⍵↑⍨⍵⍳LF}question
:If 0<⎕NC'AskForText_Answers'
AskForText_Answers←(0<≢¨' '~⍨¨AskForText_Answers[;1])⌿AskForText_Answers
AskForText_Answers[;1]←{⍵↓⍨+/∧\' '=⍵}¨AskForText_Answers[;1]
:AndIf 0<≢AskForText_Answers
:If AliasChar∊question
(alias question)←{l←⍵⍳AliasChar ⋄ (l↑⍵)(l↓⍵)}question
flag←0<+/bool←({⍵↑⍨⍵⍳AliasChar}¨AskForText_Answers[;1])≡¨⊂alias
:ElseIf ~flag←0<+/bool←AskForText_Answers[;1]≡¨⊂question
flag←0<+/bool←question∘{⍵≡(≢⍵)↑⍺}¨AskForText_Answers[;1]
:EndIf
:If flag
'Multiple pre-prepared answers qualify?!'Assert 1=+/bool
text←2⊃AskForText_Answers[bool⍳1;]
:EndIf
:Else
:If (⌊/firstPart⍳' ',LF)>firstPart⍳AliasChar
question←{~AliasChar∊⍵:⍵ ⋄ ⍵↓⍨⍵⍳AliasChar}question
:EndIf
:EndIf
:If 0<≢default
question,←' [',default,']'
:EndIf
:If ~flag
text←⍞,0/⍞←question,': '
:If '∘∘∘'≡¯3↑text
(1+⊃⎕LC)⎕STOP⊃⎕SI
∘∘∘ ⍝ Deliberate stop caused by user input
:EndIf
text←(≢{⍵↑⍨-¯1+(⌽⍵)⍳LF}question,': ')↓text
:If 0=≢text
:AndIf 0<≢default
text←default
:EndIf
:EndIf
:If 0=≢text
:If enforce
⎕←'You must enter something!'
:Else
:Return
:EndIf
:Else
success←CheckFn text
:EndIf
:Until success
⍝Done
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}
r←CR
r←⎕UCS 13
Cleanup
⎕EX'Select_Choices'
⎕EX'YesOrNo_Answers'
⎕EX'NoPause'
⎕EX'AskForNumber_Answers'
⎕EX'AskForText_Answers'
r←Copyright
r←'Copyright by Kai Jaeger ⋄ https://kai-jaeger.de ⋄ kai@aplteam.com'
r←ErrNo
r←811
Help
⎕SE.UCMD'ADOC ',⍕⎕THIS
(
'* 1.7.0 from 2023-09-15'
'  * The `AskForText` function now allows to define a default via `⍺`'
'* 1.6.1 from 2023-08-09'
'  * In case a non-existent item in a list was specified on `Select_Choices` the `Select` function'
'    did not return an empty vector but an index one greater than the number of items in the list'
'* 1.6.0 from 2023-08-07'
'  * `Select` now support a wildcard character (`*`) for `Select_Choices`'
'* 1.5.0 from 2023-06-13'
'  * A question may now contain LF in `AskForNumber`, `AskForText`, `YesOrNo` and `Pause`'
'  * Documentation improved'
'  * Bug fixes'
'    * Not all main functions used `AliasChar` rather than "@"'
'* 1.4.1 from 2023-04-10'
'  * Bug fix in `YesOrNo`, `AskForNumber` and `AskForText`: an alias was not removed from the question'
'* 1.4.0 from 2023-04-03'
'  * AskForText added'
'  * AskForNumber added '
'  * Documentation polished'
'* 1.3.0 from 2023-03-15'
'  * `Pause` added'
'  * The result of the `Version` function has changed'
'* 1.2.3 from 2023-02-19'
'  * The package wrongly believed to depend on `Tester2` and `CodeCoverage`'
'* 1.2.2 from 2023-01-15'
'  * An alias in a caption was only ignored when `Select_Choices` was defined'
'* 1.2.1 from 2021-12-13'
'  * `Select` had a problem when Select_Choices did exist but had zero rows '
'  * `YesOrNo` had a problem when YesOrNo_Answers did exist but had zero rows'
'* 1.2.0 from 2021-12-12'
'  * `Select` and `YesOrNow` now support aliases.'
'* 1.1.0 from 2021-10-10'
'  * `YesAndNo` now checks the global `YesOrNo_Answers`: if it is not empty it is used to answer the question'
'    automatically'
'  * `Select` now checks the global `Select_Choices`: if it is not empty it is used to select an item'
'    automatically      '
'  * `Cleanup` added as a means to get rid of all global variables used for automation'
'  * `Public` added in order to identify the public interface'
'  * `Help` added with extensive documentation including details regarding automation'
'  * Both `YesOrNo` and `Select` can now be interrupted by entering "∘∘∘"'
'  * Bug fixes'
'    * `Select` produced an error message when an item of ⍵ was a scalar'
'* 1.0.1 from 2021-10-12'
'  * Bug fix: API decleration was wrong'
'* 1.0.0 from 2021-10-11'
'  * First release'
)
r←LF
r←⎕UCS 10
{flag}←{lineFlag}Pause msg;input;alias;ind
⍝ Prints `msg` to he session and tells the user that she must press <enter> if she wants to continue.
⍝ By entering "`∘∘∘`" the user may interrupt `Pause`: this activates a stop.\\
⍝ The optional left argument `lineFlag` defaults to 0. If it's 1 then a line is printed. The length
⍝ is defined by `⎕PW-1`.\\
⍝ You can prevent `Pause` from displaying the message and requiring the user to press <enter>,
⍝ refer to the documentation with ]ADoc CommTools\\
⍝ The function will return 1 in case it did present the message and stopped, and 0 otherwise.
lineFlag←{0=⎕NC ⍵:0 ⋄ ⍎⍵}'lineFlag'
msg←⊃LF{⍺,⍺⍺,⍵}/⊆msg
msg←ReplaceCRbyLF msg
flag←1
:If AliasChar∊msg
:If 0<⎕NC'NoPause'
(alias msg)←{l←⍵⍳AliasChar ⋄ (l↑⍵)(l↓⍵)}msg
flag←~∨/({⍵↑⍨⍵⍳AliasChar}¨⊆NoPause)≡¨⊂alias
:EndIf
:Else
:If 0<⎕NC'NoPause'
:If NoPause≡1
:OrIf ∨/(⊆NoPause)∊⊆msg
:OrIf ∨/(NoPause/⍨~AliasChar∊¨NoPause){⍺≡¨(≢¨⍺)↑¨(≢⍺)⍴⊂⍵}{⍵↑⍨¯1+⍵⍳LF}msg
flag←0
:EndIf
:EndIf
:EndIf
:If flag
:If lineFlag
⍞←((⎕PW-1)⍴'─'),LF
:EndIf
:If AliasChar∊msg
ind←msg⍳AliasChar
:AndIf ∧/~(ind↑msg)∊' ',LF
msg←ind↓msg
:EndIf
input←⍞,0/⍞←({0=≢⍵:⍵ ⋄ ⍵,LF}msg),'In order to continue press <enter> '
:If '∘∘∘'≡¯3↑input
(1+⊃⎕LC)⎕STOP⊃⎕SI
∘∘∘ ⍝ Deliberate stop caused by user input
:EndIf
:EndIf
⍝Done
r←Public
r←''
r,←⊂'AskForString'
r,←⊂'AskForNumber'
r,←⊂'Select'
r,←⊂'YesOrNo'
r,←⊂'Pause'
r,←⊂'Cleanup'
r,←⊂'Help'
ReplaceCRbyLF←{LF@(⍸⍵=CR)⊣⍵}
index←{x}Select choices;flag;answer;question;value;bool;⎕ML;⎕IO;manyFlag;mustFlag;caption;buff;flag2;alias;blankFlag;firstPart
⍝ Presents `choices` as a numbered list and allows the user to select either exactly one or multiple ones.
⍝ Selecting just one is the default.\\
⍝ The optional left argument allows you to specify multiple (positional) choices:
⍝  * `caption` is shown above the choices; must be a simple character vector
⍝  * `manyFlag` defaults to 0 (meaning just one item might be selected) or 1, in which case multiple items can be selected
⍝  * `mustFlag` forces the user to select at least one option\\
⍝ Notes:
⍝  * `choices` must not have more than 999 items\\
⍝  * By entering "`∘∘∘`" the user may interrupt `Select` by running onto a stop vector, overcoming the bug that ⍞ cannot be interrupted
⍝  * If the user aborts by entering "q" (for "quit") `⍬` will be returned
⍝ You can make `Select` select none, one or several choices automatically, refer to the documentation
⍝ with ]ADoc CommTools\\
x←{0<⎕NC ⍵:⊆⍎⍵ ⋄ ''}'x'
(caption manyFlag mustFlag)←x,(⍴,x)↓'' 0 0
'"caption" must be a simple character vector'Assert 1=≡caption←,caption
'"caption" must not contain line feeds (⎕UCS 10)'Assert~LF∊caption
'"caption" must not contain carriage returns (⎕UCS 13)'Assert~CR∊caption
⎕IO←1 ⋄ ⎕ML←1
'Invalid right argument; must be a vector of text vectors.'⎕SIGNAL ErrNo/⍨2≠|≡choices
'Right argument has more than 999 items'⎕SIGNAL ErrNo/⍨999<≢choices
flag←0
firstPart←{⍵↑⍨⍵⍳LF}caption
:If 0<⎕NC'Select_Choices'
Select_Choices←(0<≢¨Select_Choices[;1])⌿Select_Choices
:AndIf 0<≢Select_Choices
:If AliasChar∊caption
(alias caption)←{l←⍵⍳AliasChar ⋄ (l↑⍵)(l↓⍵)}caption
flag←0<+/bool←({⍵↑⍨(,⍵)⍳AliasChar}¨Select_Choices[;1])≡¨⊂alias
:Else
:If 0=+/bool←Select_Choices[;1]≡¨⊂caption
bool←caption∘{⍵≡⍺↑⍨≢⍵}¨Select_Choices[;1]
:EndIf
flag←0<+/bool
:EndIf
:If flag
'Multiple choices qualify?!'Assert 1=+/bool
index←2⊃Select_Choices[bool⍳1;]
:If (⊂index)∊0 ⍬
index←⍬
:ElseIf ' '=1↑0⍴∊index ⍝ Text?!
:If '*'=¯1↑index
index←((¯1+≢index)↑¨{⍵↓⍨+/∧\' '=⍵}¨choices)⍳⊂(¯1↓index)
'Invalid selection'Assert index∊⍳≢choices
:ElseIf (,'a')≡,index
index←⍳≢choices
:ElseIf (,'q')≡,index
index←⍬
:ElseIf 0<≢buff←⍸index∘≡¨choices
index←buff
'Invalid selection'Assert index∊⍳≢choices
:ElseIf 1=≢index←⍸index∘≡¨(≢index)↑¨{⍵↓⍨+/∧\' '=⍵}¨choices
index←⊃index
'Invalid selection'Assert index∊⍳≢choices
:Else
'Invalid selection'Assert 0
:EndIf
:Else
'Invalid selection'Assert∧/index∊⍳≢choices
:EndIf
:EndIf
:EndIf
:If ~flag
flag2←0
:Repeat
blankFlag←0≠≢caption
:If AliasChar∊caption
:If (firstPart⍳' ')>firstPart⍳AliasChar
caption←{~AliasChar∊⍵:⍵ ⋄ ⍵↓⍨⍵⍳AliasChar}caption
:EndIf
:EndIf
⎕←{⍵↑'---',(blankFlag/' '),caption,(blankFlag/' '),⍵⍴'-'}⎕PW-1
⎕←⍪{((⊂'. '),¨⍨(⊂3 0)⍕¨⍳≢⍵),¨⍵}choices
⎕←''
question←'Select one ',(manyFlag/'or more '),'item',((manyFlag)/'s'),' '
question,←((manyFlag∨~mustFlag)/'('),((~mustFlag)/'q=quit'),((manyFlag∧~mustFlag)/', '),(manyFlag/'a=all'),((manyFlag∨~mustFlag)/')'),' :'
:If 0<≢answer←⍞,0/⍞←question
answer←(⍴question)↓answer
:If '∘∘∘'≡¯3↑answer
(1+⊃⎕LC)⎕STOP⊃⎕SI
∘∘∘ ⍝ Deliberate stop caused by user input
:EndIf
:If 1=≢answer
:AndIf answer∊'Qq',manyFlag/'Aa'
:If answer∊'Qq'
:If 0=mustFlag
index←⍬
flag2←1
:EndIf
:Else
index←⍳≢choices
flag2←1
:EndIf
:Else
(bool value)←⎕VFI answer
:If ∧/bool
:AndIf manyFlag∨1=+/bool
value←bool/value
:AndIf ∧/value∊⍳⍴choices
index←value
flag2←0≠≢index
:EndIf
:EndIf
:EndIf
:Until flag2
index←{1<≢⍵:⍵ ⋄ ⊃⍵}⍣(⍬≢index)⊣index
:EndIf
⍝Done
r←Version
⍝ See also `History`
r←'CommTools' '1.7.0' '2023-09-15'
yesOrNo←{default}YesOrNo question;isOkay;answer;add;dtb;answer2;bool;flag;buff;alias;firstPart;ind
⍝ Asks a simple question and allows just "Y" (or "y") or "N" (or "n") as answers.\\
⍝ The question may be a simple character vector, possibly with `⎕UCS 10` in between,
⍝ or a vector of simple character vectors.\\
⍝ You may specify a default via the optional left argument which when specified
⍝ rules what happens when the user just presses <enter>.
⍝ `default` must be either 1 (yes) or 0 (no).\\
⍝ By entering "`∘∘∘`" the user may interrupt `YesOrNo`: this activates a stop.\\
⍝ You can make `YesOrNo` answer the question automatically, refer to the documentation
⍝ with ]ADoc CommTools\\
⍝ Note that this function does **not** work as intended when traced!
isOkay←0
default←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'default'
isOkay←0
:If ~(≡question)∊0 1
question←1↓⊃,/LF,¨question
:EndIf
question←ReplaceCRbyLF question
question←{⍵↓⍨+/∧\' '=⍵}question
:If 0≠≢default
'Left argument must be a scalar'⎕SIGNAL 11/⍨1≠≢default
:AndIf ~default∊0 1
'The left argument. if specified, must be a Boolean or empty'⎕SIGNAL 11
:EndIf
flag←1
firstPart←{⍵↑⍨⍵⍳LF}question
:If 0<⎕NC'YesOrNo_Answers'
YesOrNo_Answers←(0<≢¨' '~⍨¨YesOrNo_Answers[;1])⌿YesOrNo_Answers
:AndIf 0<≢YesOrNo_Answers
:If AliasChar∊firstPart
ind←firstPart⍳AliasChar
(alias question)←ind{(⍺↑⍵)(⍺↓⍵)}firstPart
flag←0<+/bool←({⍵↑⍨⍵⍳AliasChar}¨YesOrNo_Answers[;1])≡¨⊂alias
:ElseIf ~flag←0<+/bool←YesOrNo_Answers[;1]≡¨⊂question
:AndIf ~flag←0<+/bool←question∘{⍵≡(≢⍵)↑⍺}¨YesOrNo_Answers[;1]
:AndIf LF∊question
buff←{⍵↓⍨+/∧\' '=⍵}⊃¯1↑LF(≠⊆⊢)question
flag←0<+/bool←YesOrNo_Answers[;1]≡¨⊂buff
:EndIf
:If flag
'Multiple pre-prepared answers qualify?!'Assert 1=+/bool
answer←2⊃YesOrNo_Answers[bool⍳1;]
:If 0=≢answer
yesOrNo←default
:Else
('Invalid answer: ',answer)Assert answer∊'YyNn'
yesOrNo←answer∊'Yy'
:EndIf
:EndIf
:Else
flag←0
:EndIf
:If ~flag
:If 0=≢default
add←' (y/n) '
:Else
:If default
add←' (Y/n) '
:Else
add←' (y/N) '
:EndIf
:EndIf
:If 1<≡question
question←1↓⊃,/LF,¨question
:EndIf
:If (⌊/firstPart⍳' ',LF)>firstPart⍳AliasChar
question←{~AliasChar∊⍵:⍵ ⋄ ⍵↓⍨⍵⍳AliasChar}question,add
:Else
question,←add
:EndIf
:Repeat
⎕←''
⍞←question
answer←⍞
:If answer≡question ⍝ Did ...  (since version 18.0 trailing blanks are not removed anymore)
:OrIf (≢answer)=¯1+≢question ⍝ ... the ...
:OrIf 0=≢answer                                                          ⍝ ... user ...
:OrIf question≡(-≢question)↑answer                                       ⍝ ... just ...
dtb←{⍵↓⍨-+/∧\' '=⌽⍵}
answer2←dtb answer
:OrIf answer2≡((-≢answer2)↑LF{~⍺∊⍵:⍵ ⋄ ' ',dtb ⍺{⌽⍵↑⍨1+⍵⍳⍺}⌽⍵}question)  ⍝ ... press ...
:OrIf answer≡{1↓⊃¯1↑(⍵=LF)⊂⍵}LF,question                                 ⍝ ... <enter>?
:If 0≠≢default
yesOrNo←default
isOkay←1
:EndIf
:Else
:If '∘∘∘'≡¯3↑answer
(1+⊃⎕LC)⎕STOP⊃⎕SI
∘∘∘ ⍝ Deliberate stop caused by user input
:EndIf
answer←¯1↑{⍵↓⍨-+/∧\' '=⌽⍵}answer
:If answer∊'YyNn'
isOkay←1
yesOrNo←answer∊'Yy'
:EndIf
:EndIf
:Until isOkay
:EndIf
⍝Done
{buildList}←{replace}CompileBuildList(folder deps);oldTree;newTree;deps2;deps;oldToc;newToc;bool;ind
⍝ We distinguish here between principal packages and other packages (=dependencies).
⍝ If the dependency file was modified after the build list was saved:
⍝ * If a top-level package was removed from the dependency file the build list is re-created
⍝ * If a dependency package is missing, re-installation is required and therefore an error is thrown\\
replace←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'replace'
folder←Reg.AddSlash folder
oldTree←LoadBuildList folder
(Reg.DependenciesFilename,' is empty')Assert 0<≢deps
newTree←{0(GetDependencyTree NoPrintToSession)⍵}¨folder∘,¨deps
newTree←(0<≢¨newTree)⌿newTree
newTree←⊃⍪/newTree
newTree←newTree[⍒newTree[;1];]
newTree←({(⍳≢⍵)=⍵⍳⍵}↓newTree)⌿newTree
:If 0=≢⊃newTree[1;2]                                       ⍝ Is it not a package folder but just an install folder?
newTree←1↓newTree
newTree[;1]-←1
:EndIf
:If 0<≢newTree                                             ⍝ There might be no dependencies
:AndIf 0<≢deps2←(1<newTree[;1])⌿newTree
deps2←1 Reg.GetBestVersionNumber∘Reg.RemoveVersionNumber¨deps2[;3]
Assert 0∧.<≢¨deps2
ind←⍸newTree[;1]>1
newTree[ind;2]←GetPackageIDFrom¨deps2
newTree[ind;3]←deps2
:EndIf
oldToc←RemoveAlias¨Reg.RemoveMinorAndPatch¨oldTree[;2]
newToc←RemoveAlias¨Reg.RemoveMinorAndPatch¨newTree[;2]
bool←newToc∊oldToc
ind←⍸bool
newTree[ind;3]←oldTree[oldToc⍳bool/newToc;3]     ⍝ Preserve original URLs
buildList←(~replace)SaveBuildList newTree folder
⍝Done
url←{replaceDots}CompileNameFromUrl url
⍝ Constructs a variable name reprsesenting the given url.
⍝ By default any dots within `url` are left alone (fine for filename).
⍝ Change this by passing a 1 as ⍺: then any dots are replaced by `⍙` (fine for variable names).
⍝ The function does not touch filenames.
⍝ Examples:
⍝ 'tatin.dev' ←→ CompileNameFromUrl 'https://tatin.dev'
⍝ 'tatin.dev' ←→ CompileNameFromUrl 'https://tatin.dev/'
⍝ 'tatin.dev∆9901' ←→ CompileNameFromUrl 'https://tatin.dev:9901/'
⍝ 'tatin.dev' ←→ CompileNameFromUrl 'https://tatin.dev/foo-goo-1.2.1'
⍝ 'tatin⍙dev' ←→ 1 CompileNameFromUrl 'https://tatin.dev'
replaceDots←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'replaceDots'
:If IsHTTP url
url←ReplaceRegistryAlias url
url←RemoveHttpProtocol url
url←{⍵↑⍨¯1+⍵⍳'/'}url
url←{':'∊⍵:'∆'@(⍸':'=⍵)⊣⍵ ⋄ ⍵}url  ⍝ If the url carries a port number we replace ":" by "∆"
:If replaceDots
(('.'=url)/url)←'⍙'
:EndIf
:EndIf
⍝Done
path←{force}CompilePath2PackageInCache(url packageID)
⍝ Takes something like 'https://tatin.dev' 'aplteam-EventCodes-3.0.1'
⍝ and returns a full path to that package in the Tatin package cache or '' if not found.
⍝ You can enforce the delivery of a path even when the package does not exist by passing 1 as ⍺.
force←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'force'
:If MyUserSettings.caching
:If url{⍵≡(≢⍵)↑⍺}GetPathToPackageCache
path←url ⍝ Is already pointing to the cache
:Else
url←url←ReplaceRegistryAlias url
url←RemoveHttpProtocol url
url←(-'/'=¯1↑url)↓url
((':'=url)/url)←'∆'    ⍝ Port number!
path←GetPathToPackageCache,'/',url,'/',packageID
:If ~force
path{⍺/⍨F.IsDir ⍺}←⍬
:EndIf
:EndIf
:Else
path←''
:EndIf
⍝Done
url←url CompileUrlPlusPort port
⍝ * If port is one of (0 80 443) then url survives untouched.
⍝ * Otherwise url and port are glued together with a ":" in between.
⍝ Examples:
⍝ 'https:/tatin.dev/' ←→ 'https:/tatin.dev' CompileUrlPlusPort 0
⍝ 'https:/tatin.dev/' ←→ 'https:/tatin.dev/' CompileUrlPlusPort 80
⍝ 'https:/tatin.dev:9001/' ←→ 'https:/tatin.dev' CompileUrlPlusPort 9001
:If port∊0 80 443
url←(url↓⍨-'/'=¯1↑url),'/'
:Else
url←((-'/'=¯1↑url)↓url),':',(⍕port),'/'
:EndIf
{r}←Connect2Client url;ref
⍝ Use this for creating a global namespace "∆PermanentConnections" and populate it with variables constructed
⍝ from their URLs, holding a client that can be used for multiple requests without closing the connection in between.
⍝ When the job is done call:   CloseConnections [0|1]
⍝ Returns 0 when the client was already established and 1 otherwise.
r←0
:If 0=∆PermanentConnections.⎕NC 1 CompileNameFromUrl url
ref←⎕THIS ∆PermanentConnections.{⍎(1 ⍺.CompileNameFromUrl ⍵),'←⍺.NewClient ⍵'}url
{}ref R.Connect 0
r←1
:EndIf
⍝Done
list←CopyRegistry p;buff;filename;print
⍝ Copies from a Registry and saves data in a given path.\\
⍝ `p` must be a namespace with the required parameters, possibly created by calling `CreateCopyRegistryParms`.\\
⍝ Returns a list with the names of all packages that were copied.
⍝ In case `p.verbose` is 1 a matrix is returned rather then a list, with messages in the second columnd.
⍝ "Fetched" indicates success.
p←CreateCopyRegistryParms p
print←p.verbose∘{⍺≠2: ⋄ ⎕←⍪⊆⍵ ⋄ 1:shy←0}
:If '#.'≡2↑p.list
:OrIf '⎕se.'≡⎕C 4↑p.list
:If 0<≢buff←⍎p.list
:AndIf 1=≡buff
:If ','∊buff
p.list←','(≠⊆⊢)buff
:Else
p.list←,⊂buff
:EndIf
:EndIf
:EndIf
:If 'file://'{⍺≡(≢⍺)↑⍵}p.list
filename←'file://'{(≢⍺)↓⍵}p.list
('File not found: ',filename)Assert F.IsFile filename
p.list←⊃⎕NGET filename 1
:EndIf
p.list←p.list~¨' '
:If 0<≢p.list
:If Reg.IsValidPackageID_WithoutVersionNo 1⊃p.list
'"list" must specify just group and package name but no version number'Assert∧/Reg.IsValidPackageID_WithoutVersionNo¨p.list
:ElseIf Reg.IsValidPackageID_WithMajorNo 1⊃p.list
'"list" must specify just group and package name but no version number'Assert∧/Reg.IsValidPackageID_WithMajorNo¨p.list
:Else
'"list" is not consistanty/correctly defined'Assert 0
:EndIf
:EndIf
:If ~p.dry
'Missing: "url"'Assert 0<≢p.url
'"url" does not use the HTTP protocol'Assert IsHTTP p.url
'Missing: "path"'Assert 0<≢p.path
:EndIf
EstablishEmptyPermanentConnections 1
{}Connect2Client p.url
print'Fetch list of packages...'
list←FetchPkgListForCopyRegistry p
list←(~('/'∊¨list))/list   ⍝ In case there are dependencies stemming from a different Registry we ignore them
:If 0<≢list
:AndIf ~p.dry
list←p(print FetchPackagesForCopyRegistry)list
:EndIf
CloseConnections 1
:If 0=p.verbose
:AndIf 2=⍴⍴list
list←(list[;2]≡¨⊂'Fetched')/list[;1]
:EndIf
list←⍪⍣(⊃2≠⍴⍴list)⊢list
⍝Done
{noOf}←{names}CreateAPIfromCFG(refTosourceNS cfg);ref;public;api;targetNamespace;Tref;b;name;flag;type;backRef;at;header;fullName;res;Tref2;backRef2
⍝ Deletes and then re-creates a namespace `cfg.api` within `refTosourceNS` and then establishes functions
⍝ returning references to variables, namespaces, classes, interfaces, functions and operators in this namespace
⍝ as the public interface.\\
⍝ Note that the API namespace must be a child of `refTosourceNS`.\\
⍝ `⍵` must be a vector of length 2:\\
⍝ [1] `refTosourceNS` (mandatory)  = name of the source namespace\\
⍝ [2] `names`         (mandatory)  = list of all public names, typically returned by a niladic tfn named `Public`\\
⍝ By default ALL APL objects in `refTosourceNS` will become public except when...
⍝ * there is a function `Public` returning the names of APL objects. These are then goin to become the API
⍝ * a list of names is passed as left argument\\
⍝ Returns the number of fns/opr established.\\
⍝ Handles all kinds of objects: niladic, monadic, dyadic and ambivalent fns as well as
⍝ monadic and dyadic operators, namespaces, classes, interfaces and variables.\\
⍝ Supports one level of sub-namespaces.\\
⍝ It also honors shy results.\\
⍝ Uses Link.Fix for establishing the functions.\\
noOf←0
:If 0<≢cfg.api
'"api" must not be dotted'Assert 0='.'+.=cfg.api
'Source namespace (1⊃⍵) is not a reference'Assert 0 1≡{(≡⍵)(≢⍵)}refTosourceNS
'Source namespace (1⊃⍵) is not a namespace'Assert 0=+/'[]'∊refTosourceNS
'Source namespace (1⊃⍵) is not a namespace'Assert 9.1≡⎕NC⊂⍕refTosourceNS
:If 0=⎕NC'names'
:OrIf 0=≢names
:If 3=refTosourceNS.⎕NC'Public'
names←refTosourceNS.Public                     ⍝ The result of the function `Public` rules the day
:Else
names←(' '~⍨¨↓refTosourceNS.⎕NL⍳16)~⊂cfg.api   ⍝ By default, everything but the API namespace is public
:EndIf
:EndIf
b←~0 1∊⍨{'.'+.=⍵}¨names
('Dotted syntax not supported for more than one level: ',{0=≢⍵:'' ⋄ ⊃{⍺,', ',⍵}/⍵}b/names)Assert 0∧.=b
'No API names specified?!'Assert 0<≢names
names←,⊆names
targetNamespace←(⍕refTosourceNS),'.',cfg.api
:If 9=⎕NC targetNamespace
:AndIf 0<≢(⍎targetNamespace).⎕NL⍳16
res←⎕SE.Link.Expunge targetNamespace
⎕DL 1
:EndIf
Tref←⍎targetNamespace ⎕NS''
b←{1='.'+.=⍵}¨names
:If ∨/b    ⍝ Any sub namespaces?
Tref.{⍵ ⎕NS''}¨∪{⍵↑⍨¯1+⍵⍳'.'}¨b/names
:EndIf
:If ∨/b←0=refTosourceNS.⎕NC↑names
0 Assert'Not found in ',(⍕refTosourceNS),': ',⊃{⍺,', ',⍵}/b/names
:EndIf
:For name :In names
name~←' '
flag←1
type←refTosourceNS.⎕NC⊂name
backRef←'##.'
:If '.'∊name
Tref2←Tref{⍺⍎⍵↑⍨¯1+⍵⍳'.'}name
backRef2←backRef,backRef,({⍵↑⍨¯1+⍵⍳'.'}name),'.'
:EndIf
:If 3=⌊type        ⍝ Function?
noOf+←1
at←refTosourceNS.⎕AT name
header←1⊃refTosourceNS.⎕NR name
:If 0=1 2⊃at   ⍝ Niladic functions need special treatment
header←{⍵↑⍨¯1+⌊/⍵⍳'⍝;'}header
:If '←'∊header  ⍝ With result
:If '.'∊name
Assert' '=1↑0⍴Tref2.{⎕SE.Link.Fix ⍵}header({('{}'~⍨1⊃⍵),'←',backRef2,(2⊃⍵)}'←'A.Split{⍵↑⍨¯1+⍵⍳'⍝'}header)
:Else
Assert' '=1↑0⍴Tref.{⎕SE.Link.Fix ⍵}header({('{}'~⍨1⊃⍵),'←',backRef,(2⊃⍵)}'←'A.Split{⍵↑⍨¯1+⍵⍳'⍝'}header)
:EndIf
:Else           ⍝ Without result
:If '.'∊name
Assert' '=1↑0⍴Tref2.{⎕SE.Link.Fix ⍵}header({backRef2,⍵}{⍵↓⍨⍵⍳'.'}name)
:Else
Assert' '=1↑0⍴Tref.{⎕SE.Link.Fix ⍵}header({backRef,⍵}{⍵↑⍨¯1+⍵⍳'⍝'}header)
:EndIf
:EndIf
:Else
:If 2=|1 2⊃at   ⍝ Dyadic or ambivalent functions
:If (({'.'∊⍵:⍵↓⍨⍵⍳'.' ⋄ ⍵}name),'←{')≡A.DLB header   ⍝ dfn?
:If '.'∊name
Assert({⍵↓⍨⍵⍳'.'}name)≡∊backRef2 Tref2.{⎕SE.Link.Fix,⊂⍵,'←{⍺←⊢ ⋄ 1:shy←⍺ ',⍺,⍵,' ⍵}'}{⍵↓⍨⍵⍳'.'}name
:Else
Assert name≡∊backRef Tref.{⎕SE.Link.Fix,⊂⍵,'←{⍺←⊢ ⋄ 1:shy←⍺ ',⍺,⍵,' ⍵}'}name
:EndIf
:Else
:If '.'∊name
:If '←'∊header
:AndIf '{'=⊃A.DLB header
Assert({⍵↓⍨⍵⍳'.'}name)≡∊backRef2 Tref2.{⎕SE.Link.Fix,⊂⍵,'←{⍺←⊢ ⋄ 1:shy←⍺ ',⍺,⍵,' ⍵}'}{⍵↓⍨⍵⍳'.'}name
:Else
Assert({⍵↓⍨⍵⍳'.'}name)≡∊backRef2 Tref2.{⎕SE.Link.Fix,⊂⍵,'←{⍺←⊢ ⋄ ⍺ ',⍺,⍵,' ⍵}'}{⍵↓⍨⍵⍳'.'}name
:EndIf
:Else
:If '←'∊header
:AndIf '{'=⊃A.DLB header
Assert name≡∊backRef Tref.{⎕SE.Link.Fix,⊂⍵,'←{⍺←⊢ ⋄ 1:shy←⍺ ',⍺,⍵,' ⍵}'}name
:Else
Assert name≡∊backRef Tref.{⎕SE.Link.Fix,⊂⍵,'←{⍺←⊢ ⋄ ⍺ ',⍺,⍵,' ⍵}'}name
:EndIf
:EndIf
:EndIf
:Else           ⍝ Monadic functions (must be a tfn)
:If '.'∊name
Assert({⍵↓⍨⍵⍳'.'}name)≡∊backRef2 Tref2.{⎕SE.Link.Fix,⊂⍵,'←{',⍺,⍵,' ⍵}'}{⍵↓⍨⍵⍳'.'}name
:Else
Assert name≡∊backRef Tref.{⎕SE.Link.Fix,⊂⍵,'←{',⍺,⍵,' ⍵}'}name
:EndIf
:EndIf
:EndIf
:ElseIf 4=⌊type     ⍝ Operator
:Select 1 3⊃refTosourceNS.⎕AT name  ⍝ Syntax
:Case 1 ⍝ monadic operator
:If '.'∊name
Assert({⍵↓⍨⍵⍳'.'}name)≡∊backRef2 Tref2.{⎕SE.Link.Fix,⊂⍵,'←{⍺←⊢ ⋄ 1:shy←⍺ (⍺⍺ ',⍺,⍵,') ⍵}'}{⍵↓⍨⍵⍳'.'}name
:Else
Assert name≡∊backRef Tref.{⎕SE.Link.Fix,⊂⍵,'←{⍺←⊢ ⋄ 1:shy←⍺ (⍺⍺ ',⍺,⍵,') ⍵}'}name
:EndIf
:Case 2 ⍝ dyadic operator
:If '.'∊name
Assert({⍵↓⍨⍵⍳'.'}name)≡∊backRef2 Tref2.{⎕SE.Link.Fix,⊂⍵,'←{⍺←⊢ ⋄ 1:shy←⍺ (⍺⍺ ',⍺,⍵,' ⍵⍵) ⍵}'}{⍵↓⍨⍵⍳'.'}name
:Else
Assert name≡∊backRef Tref.{⎕SE.Link.Fix,⊂⍵,'←{⍺←⊢ ⋄ 1:shy←⍺ (⍺⍺ ',⍺,⍵,' ⍵⍵) ⍵}'}name
:EndIf
:Else
'An operator that is neither monadic nor dyadic?!'⎕SIGNAL 11
:EndSelect
noOf+←1
:ElseIf type∊2.1 9.1 9.4 9.5   ⍝ Variable, Namespace, Class or Interface?
:If '.'∊name
Assert' '=1↑0⍴backRef2 Tref2.{⎕SE.Link.Fix('r←',⍵)('r←',⍺,⍵)}{⍵↓⍨⍵⍳'.'}name
:Else
Assert' '=1↑0⍴backRef Tref.{⎕SE.Link.Fix('r←',⍵)('r←',⍺,⍵)}name
:EndIf
noOf+←1
:Else
⎕←'*** Ignored: ',name,' (name class=',(⍕type),')'
flag←0
:EndIf
:EndFor
:EndIf
⍝Done
CreateAllRefs_Client
Reg←##.Registry
A←##.APLTreeUtils2
F←##.FilesAndDirs
OS←##.OS
R←##.RumbaLean.Core
ZipArchive←##.ZipArchive
C←CommTools
Reg.A←A
Reg.F←F
Reg.OS←OS
Reg.ZipArchive←ZipArchive
⍝Done
ns←CreateBuildParms path
⍝ Returns a namespace with the required parameters for the function `BuildPackage`.\\
⍝ `path` must be a folder holding a project that can be converted into a package.
ns←⎕NS''
ns.dependencyFolder←''
('Is not a folder: ',path)Assert ##.FilesAndDirs.IsDir path
ns.projectPath←path
ns.targetPath←''
ns.version←''
ns.tatinVars←⍬
⍝Done
p←CreateCopyRegistryParms p_;buff
⍝ Returns a namespace with parameters required by the `CopyRegistry` function.
⍝ If `p_` is not empty it must be a namespace. The content is copied over then, overwriting the default.
'p'⎕NS''
p.path←''
p.url←''
p.full←0
p.force←0
p.latest←0
p.group←''
p.list←''
p.dry←0
p.verbose←0
p.dependencies←1
:If 9=⎕NC'p_'
p←⍎'p'⎕NS p_
:EndIf
⍝Done
r←CreateReInstallParms
⍝ Creates a namespace with default parameters, it can be passed as optional argument to `ReInstallDependencies`.
r←⎕NS''
r.noBetas←Reg.GetNoBetasDefault
r.update←0
r.dry←0
r.quiet←0
CreateTree←{
⍝ Creates a namespace that carries the dependency tree which eventually will become the build list.
⍝ "Data" carries the tree, all other variables are column indices into "Data".
⍝ Right argument is usually `⎕NS ''`
r←⍵
r.Data←0 3⍴⍬       ⍝ Useful for ...
r.∆principal←1     ⍝ ...indexing ...
r.∆packageID←2     ⍝ ... Data
r.∆url←3
r.ignore←''        ⍝ Registries that do not respond
_←r.⎕FX'r←View;h;u' 'h←''Level'' ''Package ID'' ''URL''' 'u←(≢¨h)⍴¨''-''' 'r←↑h u,↓Data'
r
}
:Class DefineRegistry
⍝ By instantiating this class you get a representation of a Registry that can be added to the user settings.\\
⍝ The main purpose of this class is to check the data provided for describing a Registry like "uri", "alias" etc.\\
⍝ A list of all variables is available as a shared field: `varsList`.
⍝ An instance can be transformed into an ordinay namespace by calling the `Get` method with an empty right argument.
⍝ Usually a new instance is created by providing a URI. However, a new instance can also be created from the
⍝ ordinary namespace that is returned by the `Get` function.
:Field public Shared ReadOnly varsList←'uri' 'alias' 'port' 'api_key' 'priority' 'noCaching' 'id' 'proxy'  ⍝ List of all variables in an instance
⍝ --------------- Constructors
∇ make1(y);ns
⍝ `y` must be one of:
⍝ * A text vector representing a uri
⍝ * A text vector representing an alias and a uri (syntax: [alias]domain.com)
⍝ * A namespace holding at least `uri`. This is typically created by a call to the `Get` function, but
⍝   it could have been created "manually".
:Implements Constructor
:Access Public
⍝ define defaults
ns←⎕NS''
ns.port←0
ns.priority←⎕NULL
ns.api_key←''
ns.alias←''
ns.noCaching←0
ns.id←(⊃⊃⎕CLASS ⎕THIS).##.A.Create_UUID    ⍝ Set this to identify a registry in case you cannot use either uri and alias
ns.proxy←''
:If 326=⎕DR y
:AndIf 0=≡y
'ns'⎕NS y          ⍝ overwrite with provided properties
:ElseIf ∧/'[]'∊y
ns.(alias uri)←y{('[]'~⍨⍵↑⍺)(⍵↓⍺)}y⍳']'
:Else
ns.uri←y
:EndIf
'"uri": invalid data type'Assert' '=1↑0⍴∊ns.uri
:If {1=≢'^http[s]?://'⎕S 0⊣⎕C ⍵}ns.uri
:AndIf 1<+/∊ns.uri=':'
ns.(uri port)←{((1⊃⍵),':',(2⊃⍵))(3⊃⍵)}':'(≠⊆⊢)ns.uri
ns.port←⊃⊃(//)⎕VFI ns.port
:EndIf
'Invalid variables'Assert∧/(' '~¨⍨↓ns.⎕NL 2)∊varsList
⍎¨ns.{'_',⍵,'←','ns.',⍵}¨'id' 'uri' 'priority'      ⍝ use private fields for reserved properties
⍎¨ns.{⍵,'←','ns.',⍵}¨varsList~'id' 'uri' 'priority' ⍝ use property setters for validation on rest
'"uri": invalid depth'Assert 1=≡_uri
'"uri": invalid data type'Assert' '=1↑0⍴_uri
'"uri" must not carry []'Assert∧/~'[]'∊_uri
((_uri='\')/_uri)←'/'
_uri,←('/'≠¯1↑_uri)/'/'
∇
⍝ ---------- Properties
:Property uri
⍝ The URI of the given Tatin Registry. May be "localhost" for the current machine.
⍝ Note that there might be a good reason to have several instances with the same uri: in case you need
⍝ several different API keys.
:Access Public Instance
∇ r←get
r←_uri
∇
:EndProperty
:Property alias
⍝ The alias one may use to specify the given Registry. Alternatively you may use "id" for this, see there.
:Access Public Instance
∇ r←get
r←_alias
∇
∇ set value;buff
buff←,value.NewValue
'"alias": invalid depth'Assert 1=≡buff
'"alias": invalid data type'Assert' '=1↑0⍴buff
_alias←⎕C buff~' '
∇
:EndProperty
:Property port
⍝ Defaults to 0 which means that the protocol rules: 443 in case of https, 80 for http.
⍝ This can by any integer between 1 and 65535 althoug it is wise to not use anything between 1 and 999 because
⍝ many of those are reserved for partiuclar applications.
:Access Public Instance
∇ r←get
r←_port
∇
∇ set value;buff
buff←value.NewValue
'"port": invalid depth'Assert 0=≡buff
'"port": invalid data type'Assert 0=1↑0⍴buff
'"port": invalid value'Assert(buff≥0)∧(buff<65535)
_port←buff
∇
:EndProperty
:Property api_key
⍝ A Registry might require authentication generally and certainly for publishing. This can be achieved by
⍝ providing an API key. Note that an API key needs the same care and security measures as a password.
:Access Public Instance
∇ r←get
r←_api_key
∇
∇ set value;buff
buff←value.NewValue
'"api_key": invalid depth'Assert 1=≡buff
'"api_key": invalid value'Assert' '=1↑0⍴buff
_api_key←buff
∇
:EndProperty
:Property priority
⍝ The `priority` is used to determine the order of the registries when scanning for a particular package.\\
⍝ It must be an integer greater then 0. If it is 0 than it is replaced by the lowest number of any
⍝ defined Registry minus 10 when the registry is added to the user settings class by calling the `AddRegistry`
⍝ method. The highest number is scanned first and so on.
:Access Public Instance
∇ r←get
r←_priority
∇
∇ set value;buff
buff←value.NewValue
'"priority": invalid depth'Assert 0=≡buff
'"priority": invalid length'Assert 1=≢buff
'"priority": invalid data type (not integer)'Assert 0=1↑0⍴buff
'"priority": invalid value'Assert buff≥0
'"priority": invalid value'Assert 163≥⎕DR buff    ⍝ 16 bit signed integer is max
_priority←buff
∇
:EndProperty
:Property noCaching
⍝ Boolean that defaults to 0.
⍝ Setting this to 1 excludes this registry from caching.
:Access Public Instance
∇ r←get
r←_noCaching
∇
∇ set value;buff
buff←value.NewValue
'Invalid: "noCaching"'Assert(⊂buff)∊0 1
_noCaching←buff
∇
:EndProperty
:Property id
⍝ A UUID that can be used to identify a registry instead of using uri and alias.
⍝ This is eesential when you have multiple instances for the same uri (with different API keys and aliases)
⍝ and you want so change the alias, say. There might be other applications.
:Access Public Instance
∇ r←get
r←_id
∇
∇ set value
'"id": invalid depth'Assert 1=≡value.NewValue
'"id": invalid data type'Assert' '=1↑0⍴value.NewValue
_id←value.NewValue
∇
:EndProperty
:Property proxy
⍝ An optional proxy uri. If defined should ba a complete uri (http[s]://example.com[:port]/)
:Access Public Instance
∇ r←get
r←_proxy
∇
∇ set value;buff
buff←,value.NewValue~' '
'"proxy": invalid depth'Assert 1=≡buff
'"proxy": invalid data type'Assert' '=1↑0⍴buff
_proxy←buff
∇
:EndProperty
∇ r←Get key;list;bool
⍝ Returns the data as a namespace. "data" is defined as the variables listed by the `varsList` field in case `key`
⍝ is empty. Otherwise `key` must be a valid variable name.
:Access Public Instance
:If '#'=1⍴⍕##
r←#.⎕NS''
:Else
r←⎕SE.⎕NS''
:EndIf
:If (⊂key)∊''⍬
r.(uri alias port api_key noCaching priority id proxy)←_uri _alias _port _api_key _noCaching _priority _id _proxy
:Else
'Invalid right argument (depth)'Assert 1=≡key
'Invalid right argument (data type)'Assert' '=1↑0⍴key
'Unknown'Assert(⊂key)∊varsList
r←⍎'_',varsList{⍺⊃⍨⍺⍳⊂⍵}key
:EndIf
∇
∇ r←GetURL
⍝ Returns the URL with port number though only if the port number is not zero
:Access Public Instance
r←uri
:If 0≠port
r←(¯1↓r),':',(⍕port),'/'
:EndIf
∇
⍝ ------------ Private stuff
Assert←{⍺←⊢ ⋄ 0∊⍵:⍺ ⎕SIGNAL 998 ⋄ shy←0}
:EndClass
{yesNo}←DeletePackageFromCache(url packageID);targetFolder;url_;targetFolder2;more;rc;en;packageIDs;packageID_
⍝ Attempts to remove the package from the cache, no questions asked.
⍝ Returns a 1 in case of success and 0 otherwise.
⍝ No error is thrown in case the package is not found in the cache.
targetFolder←GetPathToPackageCache
url_←CompileNameFromUrl url
:If F.IsDir targetFolder,'/',url_  ⍝ Does not exist if caching is off, for example because the server allows deleting packages
packageIDs←⊆packageID
:For packageID_ :In packageIDs
targetFolder2←targetFolder,'/',url_,'/',packageID_
:If yesNo←F.IsDir targetFolder2
(rc en more)←F.RmDir targetFolder2
yesNo←0=rc
:EndIf
:EndFor
:EndIf
(statusCode errMsg)←DeletePackage_(regID packageID);statusCode;errMsg;request;response;en;msg;rc;url;packageID_;b
⍝ Deletes a package.\\
⍝ Whether deleting a package is possible depends on the "delete" policy operated by the server in question.\\
⍝ On the server side the delete policy is defined by the INI setting [CONFIG]DeletePackages ("None", "JustBetas", "Any").
statusCode←200 ⋄ errMsg←''
url←ReplaceRegistryAlias regID
:If 'file://'{⍺≢(≢⍺)↑⍵}url
('Unknown Registry: "',url,'"')Assert(⊂EnforceTrailingSlash url)∊⊃¨{0≡⍵:⍺ ⋄ (¯1↓⍺),':',(⍕⍵),'/'}/¨MyUserSettings.registries.(uri port)
:EndIf
:If Reg.IsHTTP url
{}Connect2Client url
request←R.NewRequest 0
request.RequestTarget←'/',{(≡⍵)∊0 1:⍵ ⋄ 1↓⊃,/',',¨⍵}packageID
request.Method←'DELETE'
request.Headers,←⊂'api-key'((MyUserSettings.GetRegistry regID).api_key)
response←SendAndReceive url request
:If response.StatusCode≢200
statusCode←response.StatusCode
:If 405≡statusCode
:If 0<≢response.Content
errMsg←'Server: ',response.Content
:ElseIf ∨/'http://'⍷url
errMsg←'http:// is not supported'
:Else
errMsg←'https:// is not supported'
:EndIf
:Else
:If 0<≢response.Content
errMsg←'Server: ',response.Content
:Else
errMsg←'Failed with status code ',⍕response.StatusCode
:EndIf
:EndIf
:EndIf
:Else
url←'file://'{⍵↓⍨(≢⍺)×⍺≡(≢⍺)↑⍵}url
b←F.IsDir¨url∘,¨packageID
:If 0∊b
statusCode←400
errMsg←'Not found in ',url,': ',⊃{⍺,', ',⍵}/(~b)/packageID
:Else
b←F.IsFile¨url∘,¨packageID,¨⊂'/apl-package.json'
:If 0∊b
statusCode←400
errMsg←'Is not a package: ',⊃{⍺,', ',⍵}/(~b)/packageID
:Else
(rc en msg)←F.RmDir url∘,¨packageID
:If rc∨.≠0
statusCode←400
b←rc≠0
errMsg←'Remove operation failed partly:'
errMsg,←⊃,/CR,¨(b/packageID){'  ',⍺,': ',(1⊃⍵),' (rc=',(⍕2⊃⍵),')'}¨↓⍉↑b∘/¨msg en
:EndIf
:EndIf
:EndIf
:EndIf
:If 200=statusCode
DeletePackageFromCache url packageID
:EndIf
⍝Done
(statusCode errMsg)←DeletePackages(regID packageIDs);url;list;flag;b
⍝ Deletes one or more packages.\\
⍝ Because multiple packages means in this contect multiple versions of the same package only one Registry ID
⍝ (URL or alias) is required.\\
⍝ Every package must be defined fully: group, name and full version number.\\
⍝ Whether deleting a package is possible depends on the "delete" policy operated by the server in question.\\
⍝ On the server side the delete policy is defined by the INI setting [CONFIG]DeletePackages ("None", "JustBetas", "Any").
packageIDs←⊆packageIDs
:If 0∊b←Reg.IsValidPackageID_Complete¨packageIDs
('Incomplete package IDs: ',⊃{⍺,', ',⍵}/(~b)/packageIDs)Assert∧/b
:EndIf
url←ReplaceRegistryAlias regID
url←F.EnforceSlash url
flag←Reg.IsHTTP url
{}EstablishEmptyPermanentConnections⍣flag⊢0
(statusCode errMsg)←DeletePackage_ regID packageIDs
{}CloseConnections⍣flag⊢1
⍝Done
{r}←path Add deps;filename;b;sofar;tempFile
⍝ Add ⍵ (one or more dependencies) to dependency file in ⍺ (path).
⍝ ⍵ might be simple (=single dependency) or nested.\\
⍝ Comments start with a ";".\\
⍝ If there is no such file yet it is created.\\
⍝ Note that although ⍵ might contain an alias (like `[tatin]`), this will be replaced by what the alias stands for.
r←0
deps←⊆deps
:If ∨/b←'@'∊¨deps
{'Invalid dependency'##.Assert 1='@'+.=⍵:}¨b/deps
:EndIf
:If ∨/b←'['∊¨deps
{'Invalid dependency'##.Assert 1='['+.=⍵:}¨b/deps
:EndIf
'Invalid dependency'##.Assert{∧/'@['∊⍵:</⍵⍳'[@' ⋄ ⍵}¨deps
deps←##.ReplaceRegistryAlias¨deps
filename←path,'/',DEP_NAME
3 ⎕MKDIR path
{}Create⍣(0=##.F.Exists filename)⊣path
b←##.Reg.IsValidPackageID_Complete¨{⍵↑⍨1+-⌊/(⌽⍵)⍳'/\]'}¨2⊃∘##.SplitAtAlias¨deps
{}b{('Not valid package IDs: ',⊃,/{⍺,',',⍵}/(~⍺)/deps)##.Assert 0}⍣(0∊b)⊣0
sofar←Get path
tempFile←(⊃,/2↑⎕NPARTS filename),'.tmp'
sofar←∪sofar
sofar←(~(##.Reg.RemoveMinorAndPatch¨sofar)∊##.Reg.RemoveMinorAndPatch¨deps)/sofar
((∪sofar,deps)'ASCII')##.F.NPUT tempFile
filename(⎕NMOVE ##.Reg.F.ExecNfunction)tempFile
⍝Done
Create←{
⍝ Create a depedency file in ⍵ (path).
path←⍵
filename←path,'/',DEP_NAME
1:shy←'' 'ASCII'##.F.NPUT filename
}
r←DEP_NAME
r←##.Reg.DependenciesFilename
Delete←{
⍝ Delete any dependency file in ⍵ (path)
path←⍵
filename←path,'/',DEP_NAME
_←##.F.DeleteFile filename
1:shy←0
}
Get←{
⍝ Returns all dependencies without any comment lines.
⍝ By default Registry aliasses are not replaced (⍺ defaults to 0).
⍝ If you want any Registry alias to be replaced specify 1 as left argument.
⍝ Note that in case there is no dependency file then '' is returned.
⍺←0
replaceAliasFlag←⍺
path←⍵
filename←path,'/',DEP_NAME
0=##.F.Exists filename:''
deps←⊃##.F.NGET filename 1
deps←deps~¨⊂⎕UCS 0 3 10        ⍝ Yes, we've seen "empty" files containing those characters!
deps←(0<≢¨deps)/deps
0=≢deps:deps
bool←';'≠⊃¨deps
deps←bool/deps                 ⍝ Get rid of comments
deps←##.ReplaceRegistryAlias⍣replaceAliasFlag⊢deps
deps
}
(rc msg)←DeprecatePackage(uri comment packageID);request;res
⍝ Declare a packages as deprecated.\\
⍝ * `uri` must be a Registry URL or a Registry alias
⍝ * `packageID` must be one of the following:
⍝   * GroupName-PkgName-1
⍝   * GroupName-PkgName     ⍝ Acts on all major version numbers
rc←0 ⋄ msg←''
uri←F.EnforceSlash ReplaceRegistryAlias uri
'You must specify a Registry, a group name, a package ID and optionally a major version number'Assert 0<≢packageID
'You must specify a managed Registry'Assert 0<≢uri
'Invalid packageID'Assert('-'+.=packageID)∊1 2
'The package ID must have group name, package name and optionally a major version number'Assert(≢'-'(≠⊆⊢)packageID)∊2 3
packageID←Reg.RemoveMinorAndPatch packageID
'You must specify a Registry, a group name, a package ID and optionally a major version number'Assert 0<≢packageID
request←R.NewRequest 0
request.RequestTarget←Reg.VersionOf_REST,'/deprecate',{'/'=1⍴⍵:⍵ ⋄ '/',⍵}packageID
request.Content←comment
request.Method←'PUT'
request.Headers,←⊂'api-key'((MyUserSettings.GetRegistry uri).api_key)
res←SendAndReceive uri request
:If res.StatusCode≢200
rc←1
:If 404≡res.StatusCode
:If 0<≢res.Content
msg←res.Content
:Else
msg←'Package not found'
:EndIf
:ElseIf 401≡res.StatusCode
msg←'Server: Unauthorized request (401)'
:ElseIf ∨/'<html'⍷res.Content
msg←'Server ',uri,' reported an error: ',⍕res.StatusCode
:Else
msg←'Server error: ',res.Content
:EndIf
:EndIf
⍝Done
r←DetermineURI packageID
⍝ Takes a packagesID which may or may not carry http[s]://
⍝ Returns a matrix:
⍝ [;1] URL
⍝ [;2] Package ID
⍝ The URL is determined by file:// or http[s]://
⍝ Otherwise it is empty
:If Reg.IsHTTP packageID
:OrIf Reg.IsFILE packageID
r←⌽SplitUrlAndPackageID packageID
:Else
r←packageID''
:EndIf
ns←{projectPath}DiscussNewConfigFile ns;C;ind;multiples;single;Enforce
⍝ `ns` is a namespace that contains all package config properties.
⍝ It is typically created by calling InitPackageConfig
⍝ This function asks the user the mandatory questions in a sensible order
⍝ before allowing the user to edit the JSON eventually.
⍝ `success` is 1 in case the user entered all the mandatory data but 0 if she cancelled.
projectPath←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'projectPath'
projectPath←'expand'F.NormalizePath projectPath
C←CommTools
multiples←1
single←0
Enforce←{⍺←1 ⋄ 0=≢⍵:⍺ ⋄ ⍵}
ns.group←(Enforce ns.group)({1}C.AskForText)'pkg-owner@Enter the group name (mandatory)'
:If 0=≢ns.name
:AndIf 0<≢projectPath
ns.name←2⊃⎕NPARTS{⍵↓⍨-'/\'∊⍨¯1↑⍵}projectPath,'/'
:EndIf
ns.name←(Enforce ns.name)({1}C.AskForText)'pkg-name@Enter the package name (mandatory)'
ns.description←(Enforce'')({1}C.AskForText)'pkg-description@Enter a description of what the package is doing (mandatory)'
ns.maintainer←(Enforce ns.maintainer)({1}C.AskForText)'pkg-maintainer@Enter the email address of the maintainer'
ns.tags←(Enforce ns.tags)({1}C.AskForText)'pkg-tags@Enter a comma-separated list of tags'
ns.license←NegotiateLicense ns
:If 1 C.YesOrNo'Is the project (going to be) hosted on GitHub? (a URL will then be compiled for the "project_url" property)'
ns.project_url←'https://github.com/',ns.group,'/',ns.name
:Else
ns.project_url←({1}C.AskForText)'pkg-projectUrl@Enter the URL of the project'
:EndIf
ns.userCommandScript←NegotiateUserCommandScript ns
⍝Done
r←DropDublicates r;bool;with;without
bool←0=≢¨r[;3]     ⍝ Those without a URL (yet)
with←(~bool)⌿r
without←bool⌿r
without←({(⍳≢⍵)=⍵⍳⍵}without[;2])⌿without
r←with⍪without
⍝Done
files←DropExcludedFiles(files cfg path);exclude;dirFlag
⍝ `files` is a list with all source files to be added to the package ZIP file.
⍝ `cfg` is the config parameter of the package
⍝ This function honours the "exclude" parameter (if defined and not empty) by excluding all specified files from `files`.
⍝ Because exclude may carry directories and the ususal /\ trouble it's a bit more complicated than one might think as first glance.
:If 2=cfg.⎕NC'exclude'
:AndIf 0<≢cfg.exclude
exclude←F.EnforceSlash¨(⊂F.AddTrailingSep cfg.source),¨⊆A.(DLB DTB)','(≠⊆⊢)cfg.exclude
dirFlag←F.IsDir(⊂F.AddTrailingSep path),¨exclude
:If ∨/dirFlag
exclude←((~dirFlag)/exclude),(≢F.AddTrailingSep path)↓¨⊃,/{'recursive'F.ListFiles ⍵}¨(⊂F.AddTrailingSep path),¨dirFlag/exclude
:EndIf
files←(~(F.EnforceSlash¨WinLowercase fileList)∊F.EnforceSlash¨WinLowercase exclude)/files
:EndIf
EnforceTrailingSlash←{⍵,('/'≠¯1↑⍵)/'/'}
{r}←EstablishEmptyPermanentConnections keepOpen
⍝ Establish PermanentConnections but without any connections yet:
⍝ We don't know whether we will need any.
⍝ Returns 0 in case there were no connections yet but 1 otherwise
r←0
:If 0=⎕NC'∆PermanentConnections'
∆PermanentConnections←⎕NS''
∆PermanentConnections.keepOpen←keepOpen
:ElseIf 0<≢∆PermanentConnections.⎕NL 9
r←1
:EndIf
r←folder EstablishPackageDependencies path;cfg;json;pkgFolder
⍝ Tries to establish whether the package saved in `path` depends on any Tatin packages.
⍝ 1. First it checks whether the left argument points to a folder that contains a file
⍝    `apl-dependencies.txt` - if so it is returned.
⍝ 2. Next it checks whether the package is managed by Cider because Cider would know.
⍝ 3. Then it checks a convention: is there a subfolder packages/, and if so, does it
⍝    contain a file `apl-dependencies.txt` - if so it is returned.
⍝ At a later stage the `BuildPackage` function will also check whether there is a file
⍝ apl-dependencies.txt in the root.
⍝ If no dependency file can be detected `r` is an empty vector, meaning that the
⍝ project has no dependencies.
r←''
path←Reg.AddSlash path
:If 0<≢folder
('Is not a folder: ',folder)Assert F.IsDir path,folder
('Does not contain a file apl-dependencies.txt: ',folder)Assert F.IsFile path,folder,'/apl-dependencies.txt'
r←folder
:ElseIf F.IsFile path,'cider.config'
json←⊃F.NGET path,'cider.config'
cfg←Reg.APLfromJSON json
pkgFolder←cfg.CIDER.dependencies.tatin
:If 0<≢pkgFolder
r←pkgFolder
:EndIf
:ElseIf F.IsDir path,'packages'
:AndIf F.IsFile path,'packages/apl-dependencies.txt'
r←'packages'
:EndIf
reg←{askUserFlag}EstablishRegistry packageID;registries;uri;alias;list;msg;i;options;stopFlag;skipped;opCode;port
⍝ The purpose of this function is to establish the registry a package can be found in.
⍝ Useful in case the user specified just a package ID but no Registry but also for
⍝ dependencies: ReInstallDependencies for example **always** scans all Registries for
⍝ any dependencies.\\
⍝ Note that `packageID` might be a full one ({group}-{name}-{version}) or a partial one
⍝ ({group}-{name} or {group}-{name}-{major}) or even just {name}.\\
⍝ The function scans all registries according to the user settings and stops as soon
⍝ as it finds a Registry that hosts the package in question.\\
⍝ If the package os not hosted by any Registry `reg` is empty.
⍝ In case a server does not respond then `askUserFlag` decides what will happen:
⍝ If it's called from any Tatin user command `askUserFlag` will default to 1, otherwise 0.
⍝ A 0 means that an error will be thrown: we don't know what to do then.
⍝ If `askUserFlag` is 1 the user will be given three options:
⍝ * Try again
⍝ * Skip
⍝ * Cancel the scan (= throw an error)\\
⍝ `askUserFlag` (`⍺`) should only be specified in a test case for simulating a user command call.
reg←registries←''
:If '.zip'≢⎕C ¯4↑packageID
:AndIf ~∨/'/\:'∊packageID
packageID←RemoveAlias packageID
askUserFlag←{0<⎕NC ⍵:⍎⍵ ⋄ '⎕SE.'≡1 ⎕C 4⍴⊃⎕XSI}'askUserFlag'  ⍝ defaults to 1 only when called via a user command
registries←MyUserSettings.registries
'No Registries defined in the Client config file'Assert 1≤≢registries
registries←(0<registries.priority)/registries
'No Registries defined in the Client config file that can be scanned'Assert 1≤≢registries
registries←({(⍵⍳⍵)=⍳≢⍵}registries.uri)/registries  ⍝ Because we might find the same registry multiple times with different credentials
:If 1=≢registries
reg←registries[1].uri
:Else
PrintToSession'Scanning ',(⍕≢registries),' registr',((1+1=≢registries)⊃'ies' 'y'),' for ',packageID,'...'
i←0
skipped←⍬
:Repeat
i+←1
(uri alias port)←i⊃registries.(uri alias port)
:If ~port∊0 80 443
uri←(¯1↓uri),':',(⍕port),'/'
:EndIf
:If Reg.IsHTTP uri
(opCode reg)←EstablishRegistry_ uri packageID askUserFlag
:If opCode≡'skip'
skipped,←⊂uri
:Continue
:EndIf
:ElseIf Reg.IsValidPackageID_Complete packageID
:If F.IsDir(RemoveFileProtocol uri),'/',packageID
reg←uri
:EndIf
:ElseIf Reg.IsValidPackageName packageID
:If 0<≢list←F.ListDirs(RemoveFileProtocol uri),'/*-',packageID,'*'
list←∪Reg.GetGroupName¨list
('Package name found in ',(⍕≢list),' groups')Assert 1=≢list
reg←uri
:EndIf
:Else
:If 0<≢list←F.ListDirs(RemoveFileProtocol uri),'/',packageID,'*'
reg←uri
:EndIf
:EndIf
{}{PrintToSession ⍵}⍣(0=≢reg)⊣'   not found in ',uri
:Until (i=≢registries)∨0<≢reg
:If 0=≢reg
1 PrintToSession'   >>> ',packageID,' not found anywhere!'
:Else
PrintToSession'   found in ',uri
:EndIf
:EndIf
:EndIf
⍝Done
(opCode reg)←EstablishRegistry_(uri packageID askUserFlag);stopFlag;list;options;msg;qdmx
⍝ Attempts to interrogate a Tatin Server. In case the server is down (or anything else goes awry)
⍝ then `askUserFlag` determines what to do:
⍝ * If it is 0 an error is thrown
⍝ * If it is 1 the user is asked what to do: try again, skip, or cancel
⍝ The decision is reflected by `opCode`, which is "process" or "skip"
stopFlag←0
opCode←'done'
reg←⍬
:Repeat
:Trap 345 347
:If 0=≢list←ListPackages_ uri,packageID
stopFlag←1
:Continue
:Else
reg←uri
stopFlag←1
opCode←'process'
:EndIf
:Else
:If askUserFlag
msg←(uri,' did not respond when interrogated for ',packageID)
options←'Try again'('Skip ',uri)
:Select msg Select options
:Case 1
stopFlag←0
:Case 2
stopFlag←1
opCode←'skip'
:Else
(uri,' did not respond, cancelled by user',uri)⎕SIGNAL qdmx.EN
:EndSelect
:Else
qdmx←⎕DMX
:If 'ERROR 345'≡qdmx.EM
('Did not respond: ',uri)⎕SIGNAL 347
:Else
qdmx.EM ⎕SIGNAL qdmx.EN
:EndIf
:EndIf
:EndTrap
:Until stopFlag
⍝Done
{r}←{keepOpen}EstablishRumbaClients dummy;regs;errCounter;qdmx
⍝ Establishes connections to all registries as Rumba clients for pipelined access,
⍝ usually by InstallPackages (which is called by LoadPackages).
⍝ We keep a record of all pre-pepared Rumba-Client on the global variable ∆PermanentConnections.
⍝ This improves performance dramatically in case we have to communicate with a server several times.
⍝ `r` is 0 if it did not do anything (typically because there are already connections established), and 1 otherwise.
⍝ Use `keepOpen` in order to prevent and call to `CloseConnections` down the stack to close connections
⍝ when you know that connections are still required later on.
r←0
keepOpen←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'keepOpen'
errCounter←0
:If 0=⎕NC'∆PermanentConnections'
∆Try_Again:
:OrIf 0=≢∆PermanentConnections.⎕NL 9
:If 0=⎕NC'∆PermanentConnections'
∆PermanentConnections←⎕NS''
:EndIf
regs←ListRegistries''
regs←(0<regs[;RegistryIndices.priority])⌿regs
regs←(IsHTTP¨regs[;RegistryIndices.url])⌿regs
'No registries found'Assert 0<≢regs
:Trap 345
Connect2Client¨⊃¨CompileUrlPlusPort/¨↓regs[;RegistryIndices.(url port)]
:Else
qdmx←⎕DMX
⎕DL 0.2
errCounter+←1
→(2>errCounter)/∆Try_Again
'Unable to establish HTTP connections'⎕SIGNAL Reg.ErrorNo
:EndTrap
:If 0=∆PermanentConnections.⎕NC'keepOpen'
⍝ If it already exists it will be 1 for sure because we did establish the namespace as empty but with keepOpen←1
∆PermanentConnections.keepOpen←keepOpen
:EndIf
r←1
:EndIf
⍝Done
{r}←{makeHomeRelative}EstablishStuffInTatinVars(ref cfg folder);deps;ref2;res;msg;make;check;f;body
⍝ We establish some fns (Niladic for impersonating "constants") in TatinVars for convinience
r←⍬
makeHomeRelative←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'makeHomeRelative'
ref2←⍎'TatinVars'ref.⎕NS''
make←{
' '=1↑0⍴⍵:'' 1
msg←'Fixing Tatin''s "',⍺,'" function failed; check line(s): ',' '~⍨⍕⊃{⍺,',',⍵}/⍵-1
msg 0}
check←{
ref←⍺
name←⍵
msg←'Invalid definition in package config: ',name
0::msg Assert 0
msg Assert' '=1↑0⍴ref.⍎name
}
:If makeHomeRelative
f←{⍵/⍨⌽2>+\(⌽⍵)∊'/\'}folder
:Else
f←folder
:EndIf
body←''
body,←⊂'r←HOME;⎕IO;⎕ML;dir;name;extension'
body,←⊂'⍝ Returns folder package was loaded from or current directory or an empty vector if both are not valid'
body,←⊂'⎕IO←1 ⋄ ⎕ML←1'
body,←⊂('r←''',f,'''   ⍝ Original source')
body,←⊂':If ~⎕nexists r'
body,←⊂'(dir name extension)←⎕NPARTS r'
body,←⊂'r←(⊃1 ⎕NPARTS''''),(2⊃⎕NPARTS ¯1↓dir),''/'',name,extension ⍝ Try current dir'
body,←⊂':AndIf ~⎕nexists r'
body,←⊂'r←(⊃1 ⎕NPARTS''''),name,extension'
body,←⊂':AndIf ~⎕nexists r'
body,←⊂'r←'''''
body,←⊂':EndIf'
res←ref2.⎕FX body
Assert/'HOME'make res
ref2 check'HOME'
res←ref2.⎕FX'r←ASSETS'('r←''',cfg.assets,'''')
Assert/'ASSETS'make res
ref2 check'ASSETS'
res←ref2.⎕FX'r←CONFIG'('r←''',(Reg.JSON cfg),'''')
Assert/'CONFIG'make res
ref2 check'CONFIG'
res←ref2.⎕FX'r←ID'('r←''',(⊃{⍺,'-',⍵}/cfg.(group name version)),'''')
Assert/'ID'make res
ref2 check'ID'
res←ref2.⎕FX'r←URI'('r←''',({0<⍵.⎕NC'uri':⍵⍎'uri' ⋄ ''}cfg),'''') ⍝ "uri" is set by server but not for local installations
Assert/'URI'make res
ref2 check'URI'
:If 0<≢deps←Dependencies.Get folder
res←ref2.⎕FX'r←DEPENDENCIES'('r←,⊆',(⊃{⍺,' ',⍵}/'''',¨deps,¨''''),'')
Assert/'DEPENDENCIES'make res
ref2 check'DEPENDENCIES'
:Else
res←ref2.⎕FX'r←DEPENDENCIES' 'r←⍬'
Assert/'DEPENDENCIES'make res
:EndIf
:If makeHomeRelative
ref2.⎕FX'r←GetFullPath2AssetsFolder;p' 'p←⊃1 ⎕NPARTS''''' ':If 0<≢r←ASSETS' ':AndIf 0<≢HOME' ':AndIf ⎕NEXISTS p,HOME' 'r←p,HOME,''/'',ASSETS' ':EndIf'
:Else
ref2.⎕FX'r←GetFullPath2AssetsFolder' ':If 0<≢r←ASSETS' ':AndIf 0<≢HOME' ':AndIf ⎕NEXISTS HOME' 'r←HOME,''/'',ASSETS' ':EndIf'
:EndIf
⍝Done
{r}←EstablishSystemVars(path cfg);ref
r←⍬
ref←⍎path Reg.CreateNamespace ⎕THIS
:If 2=cfg.⎕NC'io'
:AndIf ¯1≠cfg.io
ref.⎕IO←cfg.io
:EndIf
:If 2=cfg.⎕NC'ml'
:AndIf ¯1≠cfg.ml
ref.⎕ML←cfg.ml
:EndIf
⍝Done
{r}←ExecutePackageLX(installFolder targetSpace tree);packageID;url;alias;path;saveIn;cfg
⍝ Checks for all packages in `tree` whether "lx" exists as a config parameter and is not empty.
⍝ If that's the case it is supposed to be the name of a function that will be executed.
r←⍬
:For packageID url :In ↓tree[;2 3]
(alias packageID)←{~'@'∊⍵:''⍵ ⋄ '@'(≠⊆⊢)⍵}packageID
path←installFolder,'/',packageID
cfg←ReadPackageConfigFile path
saveIn←GetTatinRootSpace targetSpace
saveIn,←'.',1 GetPackageIDFrom path
ExecutePackageLX_ saveIn cfg installFolder
:EndFor
⍝Done
{r}←ExecutePackageLX_(name cfg homePath);ref;valence;qdmx
⍝ Checks whether "lx" exists as a config parameter and is not empty.
⍝ If that's the case it is supposed to be the name of a function that will be executed.
r←⍬
:If 2=cfg.⎕NC'lx'
:AndIf 0<≢cfg.lx
ref←⍎name
'Package LX is set but it is not a function'Assert 3=ref.⎕NC cfg.lx
valence←1 2⊃ref.⎕AT cfg.lx
:Trap ((⊂,##.Client.DEBUG)∊,¨'on' 1)↓0
:If 0=valence      ⍝ Niladic fn
ref.TatinVars.LX←ref.{6::⍬ ⋄ ⍎⍵}cfg.lx
:ElseIf 1=valence  ⍝ Monadic fn
ref.TatinVars.LX←homePath ref.{6::⍬ ⋄ ⍎⍵}cfg.lx,' ''',homePath,''''
:Else
'lx is neither a niladic nor a monadic function'Assert 0
:EndIf
:Else
qdmx←⎕DMX
⎕←'Executing the package initialising function (',cfg.lx,') for ',name,' has crashed with a ',qdmx.EM,'; RC=',⍕qdmx.EN
:EndTrap
:EndIf
⍝Done
r←FetchHTMLpage url;request;response
request←R.NewRequest 0
:If '/'∊RemoveHttpProtocol url
request.RequestTarget←'/',{⍵↓⍨⍵⍳'/'}RemoveHttpProtocol url
url←(-≢request.RequestTarget)↓url
:EndIf
:Trap 347
response←SendAndReceive url request
r←response.StatusCode≡200
:Else
r←0
:EndTrap
⍝Done
r←parms(fns FetchPackagesForCopyRegistry)pkgs;pkg;i;res;data;zipFilename;qdmx;path;path2;doesExist;msg;rc
⍝ Takes a list of complete package IDs ("pkgs", typically created by calling `FetchPkgListForCopyRegistry`) and
⍝ and a parameter space "parms" (typically created by calling `CreateCopyRegistryParms` and then amended)
⍝ and uses this to fetch all the packages one by one from the source Registry
r←pkgs,[1.5]⊂''
:For i :In ⍳≢pkgs
pkg←i⊃pkgs
path←F.EnforceSlash(F.AddTrailingSep parms.path),pkg
:If 0=doesExist←F.IsDir path
:OrIf parms.force
fns'Fetching ',pkg,' (',((⍕i),' of ',⍕≢pkgs),')...'
:If doesExist
(rc msg)←F.RmDirByForce path
:If 0≠rc
r[i;2]←⊂'ERROR: could not delete already existing folder; RC=',⍕rc
fns'  Fetching ',pkg,' failed due to an error:',(≢'ERROR: ')↓2⊃r[i;]
:Continue
:EndIf
:EndIf
:Trap 0
zipFilename←F.EnforceSlash GetPackageViaHTTP parms.url,pkg
path2←path,'/data'
'Create!'F.CheckPath path
zipFilename ZipArchive.UnzipTo path2
path ⎕NMOVE path2,'/apl-package.json'
:If ⎕NEXISTS path2,'/apl-dependencies.txt'
path ⎕NMOVE path2,'/apl-dependencies.txt'
:EndIf
(path,'/',pkg,'.zip')⎕NMOVE zipFilename
r[i;2]←⊂'Fetched'
fns'  Success!'
:Else
qdmx←⎕DMX
:If 90=qdmx.EN
r[i;2]←⊂'ERROR: ',⎕EXCEPTION.Message,'; RC=',⍕qdmx.EN
:ElseIf ∨/'Internal Server Error (500)'⍷qdmx.EM
r[i;2]←⊂'ERROR: Server returned 500 Internal Error'
:Else
:If (⎕UCS 13)∊qdmx.EM
r[i;2]←{⍺,' ',A.DLB ⍵}/(⎕UCS 13)(≠⊆⊢)qdmx.EM
:Else
r[i;2]←⊂'ERROR: ',qdmx.EM,'; RC=',⍕qdmx.EN
:EndIf
:EndIf
r[i;2]←⊂'ERROR: Fetching ',pkg,' failed due to an error:',(≢'ERROR: ')↓2⊃r[i;]
fns'  Fetching ',pkg,' failed due to an error:',(≢'ERROR: ')↓2⊃r[i;]
:EndTrap
:Else
r[i;2]←⊂'Not fetching ',pkg,', already in Registry'
fns'Not fetching ',pkg,', already in Registry'
:EndIf
:EndFor
⍝Done
r←FetchPkgListForCopyRegistry p;request;firstFlag;res
request←R.NewRequest 0
request.RequestTarget←Reg.VersionOf_REST,'/copy-registry/'
firstFlag←1
:If p.full
request.RequestTarget,←'?full'
firstFlag←0
:EndIf
:If p.latest
request.RequestTarget,←((firstFlag+1)⊃'&?'),'latest'
firstFlag←0
:EndIf
:If 0<≢p.group
request.RequestTarget,←((firstFlag+1)⊃'&?'),'group=',p.group
firstFlag←0
:EndIf
:If 0<≢p.list
request.RequestTarget,←((firstFlag+1)⊃'&?'),'list=',⊃{⍺,',',⍵}/p.list
firstFlag←0
:EndIf
:If ~p.dependencies
request.RequestTarget,←((firstFlag+1)⊃'&?'),'dependencies=0'
firstFlag←0
:EndIf
:If 0                                                                          ⍝ Only for development
request.RequestTarget,←((firstFlag+1)⊃'&?'),'stop'
:EndIf
request.Headers,←⊂'Accept' 'application/json'
res←SendAndReceive p.url request
res.Content Assert 200=res.StatusCode
r←{(,0)≡⍴⍵:'' ⋄ ⎕JSON⍠('Dialect' 'JSON5')⊣⍵}⊣res.Content
⍝Done
r←{depth}FindDependencies y;pkgList;target;level;folders;folder;registries;targets;buff
⍝ `target` can be a Registry alias, [*] for all defined Regiestries, a URL pointing to a URL or a folder.
⍝ If it is a folder:\\
⍝ Starting in `folder`, all sub folders are scanned for a file "apl-dependencies.txt".\\
⍝ Folders with such a file will be scanned for packages in `pkgList`.\\
⍝ `pkgList` must be a simple char vector with a list of comma-separated packages.\\
⍝ The packages can be specified fully or partly. "Group" and "Version" can all be left out,
⍝ but "Name" is mandatory. You may specify a major version but minor and patch are ignored
⍝ if specified.\\
⍝ If it is one or more Registries those are approached and the result collected
⍝ Note that the search is *not* case sensitive.\\
⍝ Returns a fully qualified list with all hits.\\
⍝ By default just the folder(s) are returned that contain a file "apl-dependencies.txt"
⍝ that carry at least one of the given packages.\\
⍝ In case "level" is 1 (default is 0, other values led to an error) the
⍝ package folders are also returned, revealing the precise version(s) installed.
⍝ "depth" should only be used when a folder is scanned that contains packages. It prevents the search
⍝ for all sub folders. In particular useful on a server managing a Registry because it **knows**
⍝ that there cannot be any dependencies in any sub folder. Leave it alone in normal cases but
⍝ specify a 2 for a Registry folder. "depth" has an effect only for folders, not for URLs pointing
⍝ to a managed server. That's because the server manages that itself.
depth←{0<⎕NC ⍵:⍎⍵ ⋄ ¯1}'depth'
'⍵ must have a length of 2 or 3'Assert(≢y)∊2 3
(pkgList target level)←3↑y,(≢y)↓'' '' 0
:If 0=≢target
target←'./'
:EndIf
:If '[]'≡¯2↑⌽¯1⌽target
:If '[*]'≡target
registries←1 ListRegistries''
target←(registries[;RegistryIndices.priority]>0)⌿registries
target←target[;RegistryIndices.url]
:ElseIf '[]'≡¯2↑⌽¯1⌽target
target←ReplaceRegistryAlias target
:EndIf
'No (valid) Registry specified?!'Assert 0<≢target
:EndIf
targets←⊆target
r←''
:For target :In targets
:If IsHTTP target
r,←⊂target(FindDependencies_ pkgList target level)
:Else
folder←F.AddTrailingSep target
'The folder must be a simple char vector'Assert 80=⎕DR folder
('Not found: ',folder)Assert ⎕NEXISTS folder
pkgList←⎕C','(≠⊆⊢)' '~⍨,pkgList
'A package name must not contain more than a maximum of two hyphens'Assert{2≥'-'+.=⍵}¨pkgList
pkgList←Reg.RemoveMinorAndPatch¨pkgList
buff←depth Reg.FindDependenciesLocally folder folder pkgList level
buff←buff[⍋⎕C buff]
r,←⊂target buff
:EndIf
:EndFor
⍝Done
r←FindDependencies_(pkgList url level);request;res;buff
request←R.NewRequest 0
request.RequestTarget←'/v1/dependencies'
request.RequestTarget,←'?level=',⍕level
request.RequestTarget,←'&packages=',⊃{⍺,',',⍵}/⊆pkgList
request.Headers,←⊂'Accept' 'application/json'
res←SendAndReceive url request
:If 200≠res.StatusCode
('Server: ',res.Content)Assert 0=≢res.Content
('Failed with status code ',⍕res.StatusCode)Assert 0
:ElseIf 0<≢res.Content
buff←(⎕JSON⍠('Dialect' 'JSON5')⊣res.Content)
r←buff
:Else
r←''
:EndIf
⍝Done
r←FindUserSettings name;filename;path;F;buff
⍝ Returns the folder where the user settings live.\\
⍝ First it checks whether there is a file Tatin/.tatin in the user's home folder (platform dependant). If it exists
⍝ and it is not empty then by definition it musts hold the path pointing to a user settings file. If the contents
⍝ does not point to such a file then an error is thrown.\\
⍝ If no such file exists the user settings file is expected to live in a folder Tatin/ in the the user's home folder.
⍝ If that is not the case then an error is thrown.
F←##.FilesAndDirs
path←GetUserHomeFolder''
:If F.IsFile path,'/.tatin'
buff←⊃F.NGET path,'/.tatin'
:AndIf 0<≢buff~⎕TC
filename←(buff~⎕TC),'/',UserSettings.cfg_name
('.tatin points to ',(buff~⎕TC),' but there is no file ',UserSettings.cfg_name,'?!')Assert F.IsFile filename
:If 0=≢⊃F.NGET filename
('File "',filename,'" does not point to a folder')Assert F.IsDir filename
:EndIf
:Else
filename←path,'/',UserSettings.cfg_name
:EndIf
r←F.ExpandPath filename
⍝Done
{r}←ref FixMaintenanceFunctions list;body;filename
r←⍬
:For filename :In list
body←⊃F.NGET filename 1
('Could not fix ',filename)Assert' '=1↑0⍴ref.⎕FX body
:EndFor
list←home GetAllFiles cfg;list;subList;default;extension
⍝ ⍵ Is an object presenting a package's config file.\\
⍝ ⍺ Is the folder that hosts the package.\\
⍝ ← Is a list of all files within cfg.source.\\
⍝ This function has a side effect: if "source" is not found on disk at all, it is created as a folder.
⍝ This might happen when "source" will be exclusively used for dependencies.
extension←'.aplf' '.aplo' '.aplc' '.apln' '.dyalog' '.apla'
:If F.IsFile home,cfg.source
list←home∘,¨⊆cfg.source
:Else
home,←(~(¯1↑home)∊'\/')/'/'
:If 0=F.IsDir home,cfg.source
('"',cfg.source,'" is neither file nor folder')Assert~(⊂3⊃⎕NPARTS cfg.source)∊extension
'Create!'F.CheckPath home,cfg.source
list←''
:Return
:Else
list←⊃('recursive' 1)F.Dir home,cfg.source,'/'
:EndIf
:EndIf
list/⍨←F.IsFile list
list←(≢home)↓¨list
list~←Reg.DependenciesFilename CFG_Name
list/⍨←(3⊃∘⎕NPARTS¨list)∊extension
⍝Done
r←GetAllUserCommandFolder
⍝ Returns a list with all folders scanned by Dyalog for user commands.\\
⍝ Removes trailing (back-)slashes if any.
r←⎕SE.SALT.Settings'cmddir'
:If Reg.IsWindows
((':'=r)/r)←';' ⍝ Linux & Mac OS!
:EndIf
r←';'(≠⊆⊢)r
r←(-(⊃¨¯1↑¨r)∊¨⊂'/\')↓¨r
(statusCode errMsg r)←{noBetas}GetBestVersionNumber(packageID url);request;res;f
statusCode←200 ⋄ errMsg←'' ⋄ r←''
noBetas←{0<⎕NC ⍵:⍎⍵ ⋄ Reg.GetNoBetasDefault}'noBetas'
:If f←Reg.IsValidPackageID_Complete packageID
:OrIf f←Reg.IsValidPackageID_WithMajorNo packageID
:OrIf f←Reg.IsValidPackageID_WithoutPatchNo packageID
:OrIf f←Reg.IsValidPackageID_WithoutVersionNo packageID
:OrIf f←Reg.IsValidPackageName packageID
:EndIf
'Invalid package ID'Assert f
:If Reg.IsHTTP url
request←R.NewRequest 0
request.RequestTarget←Reg.VersionOf_REST,'/packages/best_version/',packageID
request.Headers,←⊂'Accept' 'application/json'
request.Headers,←⊂'include-betas'('NY'[1+~noBetas])
res←SendAndReceive url request
:If 200≠res.StatusCode
statusCode←res.StatusCode
errMsg←res.Content
:Else
r←(Reg.AddSlash url),(Reg.APLfromJSON res.Content).BestVersion
:EndIf
:Else
'Invalid URL'Assert 0=+/'[]'∊url ⍝ In case of an ill-formed attempt to specify an alias like, say, "]tatin[" or "tatin]" etc
:If 0=≢r←noBetas Reg.GetBestVersionNumber(Reg.AddSlash url),packageID
statusCode←404
:EndIf
:EndIf
data←{group}GetContentFromGitHub url;request;client;data;redirect;data2
⍝ Returns the content of a given url from GitHub.
⍝ `url` is typically something like:
⍝ `/<group>/<name>/releases/download/<version-tag/<zip-name>-<tag>.zip`
⍝ `group` is optional and defaults to "aplteam".
⍝ Handles 302 ("page redirected") automatically.
:If 0=⎕NC'group'
group←'aplteam'
:EndIf
request←R.NewRequest 0
request.RequestTarget←url
client←R.NewClient 0
client.Host←'github.com'
request.Headers,←⊂'User-Agent'group
data←client R.SendAndReceive request
:If data.StatusCode=302
redirect←2⊃'location'{⍵⊃⍨(⊃¨⍵)⍳⊂⍺}data.Headers
redirect←'https://'{l←≢⍺ ⋄ ⍵↓⍨l×⍺≡l↑⍵}redirect
client←R.NewClient 0
(client.Host request.RequestTarget)←{l←+/1>+\'/'=⍵ ⋄ (l↑⍵)(l↓⍵)}redirect
data←client R.SendAndReceive request
('Accessing ',request.RequestTarget,' failed!',CR,'HTTP status code is ',(⍕data.StatusCode),' rather than the expected 200')Assert data.StatusCode≡200
:Else
('Accessing ',request.RequestTarget,' failed!',CR,'HTTP status code is ',(⍕data.StatusCode),' rather than the expected 302')Assert data.StatusCode≡200
:EndIf
r←GetCurrentAPLsFolderInDocuments
⍝ Returns the version specific folder in the Documents\ folder no matter whether OneDrive is used or not
r←(2⊃4070⌶0),'\'
r←{check}GetDeletePolicy url;request;res;client;buff;row;url_
⍝ Takes the URL of a server (like https://tatin.dev) and returns the delete policy operated by the given server.
⍝ Note that for a folder (rather than a URL) "Any" is returned, otherwise we could not delete a folder from a non-managed Registry.
⍝ If there is a global ∆DeletePolicies' around (which will be created by this function after the first call
⍝ for better performance) then this will be used to determine the delete policy.
check←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'check'
:If check
⎕EX'∆DeletePolicies'
:EndIf
url_←ReplaceRegistryAlias url
'No URI provided'Assert 0<≢url_
:If Reg.IsHTTP url_
:If 0=⎕NC'∆DeletePolicies'
∆DeletePolicies←0 2⍴''
:EndIf
row←∆DeletePolicies[;1]⍳⊂url_
:If row>≢∆DeletePolicies
request←R.NewRequest 0
request.RequestTarget←'/v1/delete-policy'
request.Headers,←⊂'Accept' 'text/html'
res←SendAndReceive url_ request
:If 200≠res.StatusCode
'Server not found'Assert 404≠res.StatusCode
'Bad request'Assert 400≠res.StatusCode
:If 0<≢res.Content
('Server: ',res.Content)Assert 0
:Else
('Failed with status code ',⍕res.StatusCode)Assert 0
:EndIf
:EndIf
r←res.Content
∆DeletePolicies⍪←url_ r
:Else
r←2⊃∆DeletePolicies[row;]
:EndIf
:Else
('<',url_,'> is not a folder')Assert F.IsDir url_
r←'Any'
:EndIf
⍝Done
tree←{append}GetDependencyTree x;initialCall;identifier;principal;requiredBy;buildList;path;tempPath;filename;flag1;flag2;packageID;alias;uri;path2
⍝ Takes `identifier` (`x`) and returns the dependencies as a matrix.
⍝ `identifier` must be one of:
⍝ * an HTTP request
⍝ * a folder holding a package (like file://C:\Temp\{group-name-major.minor.patch})
⍝ * a path to a package in a registry (like C:\MyReg\{packageID})
⍝ * a package ID; Tatin will then attempt to find that package in the Registries defined in the Client's config file.\\
⍝ Returns a dependency tree as a matrix:
⍝ * [;1] Flag that indicates whether it is a principal package (1) or a dependency (0)
⍝ * [;2] PackageID of what required that dependency
⍝ * [;3] Full package ID
⍝ * [;4] The full URL (either a local path (without protocol) or http(s)://...)\\
⍝ NOTE: This function requires the version number to be fully specified.\\
append←{0<⎕NC ⍵:⍎⍵ ⋄ 1}'append'
:If initialCall←80=⎕DR x
principal←1
identifier←x
⎕SHADOW'∆TREE' ⍝ Semiglobal: ∆TREE is visible by GetDependencyTree when called recursively but not outside
∆TREE←CreateTree ⎕NS''
:Else
(principal identifier)←x
:EndIf
identifier←ReplaceRegistryAlias identifier
:If Reg.IsHTTP identifier
(alias identifier)←SplitAtAlias identifier
path←{⍵↓⍨⍵⍳'/'}RemoveHttpProtocol identifier
uri←RemovePackageID identifier
∆TREE.Data⍪←principal(alias,path)uri
path2←CompilePath2PackageInCache uri path ⍝ Already available in the cache?
:If 0<≢path2
:AndIf F.IsDir path2
:If F.IsFile path2,'/',Reg.DependenciesFilename
0 GetDependencyTreeFromRegistry path2
:Else
⍝ Is available in the cache, and has no dependencies
:EndIf
:Else
principal GetDependencyTreeViaHTTP identifier
:EndIf
:Else
(alias identifier)←SplitAtAlias identifier
:If F.IsDir identifier
packageID←'/\'{⊃¯1↑⍵⊆⍨~⍵∊⍺}identifier
:If ~Reg.IsValidPackageID_Complete packageID
packageID←''
:EndIf
:Else
packageID←GetPackageIDFrom identifier
flag1←Reg.IsValidPackageID_Complete packageID
flag2←Reg.IsValidPackageID_WithoutVersionNo packageID
'Not a valid package ID'Assert flag1∨flag2
:EndIf
PrintToSession'  Dependency ',packageID,' identified...'
:If identifier{⍵≡(≢⍵)↑⍺}GetPathToPackageCache
∆TREE.Data⍪←principal(alias,packageID)identifier
0 GetDependencyTreeFromRegistry identifier
:Else
∆TREE.Data⍪←principal(alias,packageID)identifier
:If '.zip'≡⎕C ¯4↑identifier
filename←RemoveFileProtocol identifier
tempPath←Reg.GetTempDir,'/',packageID
F.RmDir tempPath
⎕DL 0.1
F.MkDir tempPath
⎕DL 0.1
('File not found: ',filename)Assert F.IsFile filename
filename ZipArchive.UnzipTo tempPath
0 GetDependencyTreeFromRegistry tempPath
F.RmDir tempPath
:Else
identifier←RemoveFileProtocol identifier
0 GetDependencyTreeFromRegistry alias,identifier
:EndIf
:EndIf
:EndIf
:If initialCall
:If append
:AndIf 0<≢buildList←LoadBuildList identifier
:AndIf 0<≢buildList←(0<≢¨buildList[;∆TREE.∆packageID])⌿buildList
∆TREE.Data⍪←(~buildList[;∆TREE.∆packageID]∊∆TREE.{Data[;∆packageID]}⍬)⌿buildList
:EndIf
tree←Prune ∆TREE
:Else
tree←0 4⍴⍬
:EndIf
⍝Done
{r}←principal GetDependencyTreeFromRegistry path;deps;dep;identifier;dep2;alias
⍝ Reads the dependency files of packages in `path` and processes them.\\
⍝ Requires semi-global ∆TREE
r←⍬
path←Reg.AddSlash path
deps←Dependencies.Get path
:For dep :In deps
(alias dep2)←SplitAtAlias dep
:If Reg.IsHTTP dep2
identifier←dep2
:ElseIf ∧/'[]'∊dep2
identifier←ReplaceRegistryAlias dep2
:ElseIf Reg.IsFILE dep2
identifier←RemoveFileProtocol dep2
:ElseIf F.IsDir path,dep2
identifier←path,dep2
:Else
identifier←(Reg.RemoveOneLevel path),'/',dep2
:EndIf
:If (⊂alias,GetPackageIDFrom identifier)∊GetPackageIDFrom¨∆TREE.{Data[;∆packageID]}⍬ ⍝ Avoid circular references
:Continue
:EndIf
:If ~Reg.IsHTTP identifier
:AndIf 0=⎕NEXISTS identifier
identifier←(EstablishRegistry dep2),dep2
:EndIf
{}GetDependencyTree principal(alias,RemoveFileProtocol identifier)
:EndFor
⍝Done
{r}←level GetDependencyTreeViaHTTP url;uri;packageID;request;res;port;isNotHttp;b;tree;requiredBy;alias;deps
⍝ Fetch the dependency tree via HTTP. Once a package is retrieved via the http protocol
⍝ we know that all dependecies must be fetched via the http protocol as well.\\
⍝ Requires semi-global ∆TREE
r←⍬
EstablishRumbaClients ⍬
(uri packageID)←Reg.SplitAtLast url
(alias uri)←SplitAtAlias uri
request←R.NewRequest 0
request.RequestTarget←Reg.VersionOf_REST,'/packages/dependencies/',packageID
request.Headers,←⊂'Accept' 'application/json'
res←SendAndReceive uri request
:If 200≠res.StatusCode
:If 0<≢res.Content
('Server: ',res.Content)Assert 0
:Else
('Failed with status code ',⍕res.StatusCode)Assert 0
:EndIf
:EndIf
:If 0<≢deps←Reg.JSON res.Content
:AndIf 0<≢deps.data
deps.data←((⊂⊂'null')≢¨2⊃¨deps.data)/deps.data
:AndIf 0<≢deps.data
ScanRegistries⊃,/2⊃¨deps.data
:EndIf
⍝Done
GetDomainNameFromURL←{
⍝ 'github.com' ← GetDomainNameFromURL 'https://github.com/tthis/that/my.zip'
r←RemoveHttpProtocol ⍵
r↑⍨¯1+r⍳'/'
}
dt←{addFlag}GetFileTime filename
⍝ Returns "Last modified" for "filename".\\
⍝ If `addFlag` is specified and 1 one second is added to the time stamp.
:If F.IsFile filename
dt←60 ⎕DT⊂6↑⊃⊃('type' 3)F.Dir filename
:If 0<⎕NC'addFlag'
'Invalid left argument'Assert addFlag∊0 1
:AndIf addFlag
dt←0.000001+dt
:EndIf
:Else
dt←0
:EndIf
md5←GetMD5 filename;os;buff
('File does not exist: ',filename)Assert F.Exists filename
os←⊃⊃'.'⎕WG'APLVersion'
:Select os
:Case 'M'
md5←⊃⎕SH'md5 -q ',filename
:Case 'L'
md5←{⍵↑⍨¯1+⍵⍳' '}⊃⎕SH'md5sum ',filename
:Case 'W'
buff←⎕SH'certutil.exe -hashfile "',(filename~'"'),'" MD5'   ⍝ Tolerates slash in path
('Cannot create MD5 for ',filename)Assert~∨/'-hashfile command completed successfully '⍷∊buff
md5←2⊃buff
:Else
'Something is very wrong here'⎕SIGNAL 11
:EndSelect
⍝Done
r←{OS}GetMyUCMDsFolder add
⍝ Returns standard path for Dyalog's MyUCMDs folder.\\
⍝ Works on all platforms but returns different results.\\
⍝ Under Windows typically:\\
⍝ `C:\Users\{⎕AN}\Documents\MyUCMDs\Foo'  ←→ GetMyUCMDsFolder 'Foo'
⍝ ⍺ is optional and only specified by test cases: simulating different versions of the operating system.
:If 0=⎕NC'OS'
OS←##.APLTreeUtils2.GetOperatingSystem''
:EndIf
add←{(((~'/\'∊⍨⊃⍵)∧0≠≢⍵)/'/'),⍵}add
:If Reg.IsWindows
r←##.FilesAndDirs.ExpandPath GetUserDocumentsFolder,'MyUCMDs',add
:Else
r←(2 ⎕NQ'.' 'GetEnvironment' 'Home'),'/MyUCMDs',add
:EndIf
⍝Done
flag←GetNoCachingFlag uri
⍝ Returns the "noCaching" flag for `uri` from MyUserSettings.registries
⍝ If `uri` is not known a 0 is returned.
uri←ReplaceRegistryAlias uri
:If flag←(⊂uri)∊MyUserSettings.registries.uri
flag←(MyUserSettings.GetRegistry uri).noCaching
:EndIf
GetPackageFilenameFromCfg←{
cfg←⍵
cfg.group,'-',cfg.name,'-',1⊃Reg.SplitVersionFromBuild cfg.version
}
tempDir←GetPackageFromCache(url packageID path2cache)
⍝ Copies a packages from the Tatin package cache into a newly created temp folder and returns the folder.
tempDir←Reg.GetTempDir,'/',packageID,'_',GetMD5 path2cache,'/',CFG_Name
F.RmDir tempDir ⍝ Might have happened earlier
⎕DL 0.01
('Does already exist: ',tempDir)Assert 0=F.IsDir tempDir
F.MkDir tempDir
tempDir ⎕NCOPY⍠('Wildcard' 1)⊣path2cache,'/*'
⍝Done
GetPackageIDFrom←{
⍝ ⍵ is a filename or a URI, possibly fully qualified.
⍝ ← is the package ID
⍝ By default ⍺ is 0, meaning the package ID is returned unchanged.
⍝ If ⍺ is 1 the package ID is massaged so that it is an APL compatible name, meaning that all
⍝ characters that are not ASCII or are not allowed in an APL name are replaced by an underscore character.
⍝ Example:
⍝ 'Example_Package-A.1.0.0' ←   GetPackageID 'file://C:/Temp/Example-Package_A-1.0.0.zip'
⍝ 'Example_Package_A_1_0_0' ← 1 GetPackageID 'file://C:/Temp/Example-Package_A-1.0.0.zip'
⍺←0
convert←⍺
fn←A.(DTB DTB)⍵
'.zip'≡⎕C ¯4↑fn:convert ∇{⍵↑⍨1+-⌊/(⌽⍵)⍳'/\]'}¯4↓fn
∨/'/\]'∊fn:convert ∇{⍵↑⍨1+-⌊/(⌽⍵)⍳'/\]'}fn
~convert:fn
'_'@(⍸~⍵∊⎕D,⎕A,'abcdefghijklmnopqrstuvwxyz_',⎕UCS 10)⊣fn
}
filename←{filename}GetPackageViaHTTP URL;uri;res;packageID;msg;alias;packageID2;flag
⍝ Requests a package via HTTP
flag←⊃0=⎕NC'filename'
filename←{0=⎕NC ⍵:'zip'F.GetTempFilename2'' ⋄ ⍎⍵}'filename'
(uri packageID)←Reg.SeparateUriAndPackageID URL
(alias packageID2)←SplitAtAlias packageID
res←uri GetPackageViaHTTP_ packageID2
:If 200≡res.StatusCode
res.Content Reg.WriteNativeFile filename
:Else
F.DeleteFile⍣flag⊢filename
:If 404≡res.StatusCode
msg←'Could not find package:',CR
msg,←'  ',packageID2,CR
msg,←'on ',uri
msg Assert 0
:Else
:If 0=≢res.Content
('Server error on ',URL,' RC=',⍕res.StatusCode)Assert 0
:Else
res.Content Assert 0
:EndIf
:EndIf
:EndIf
⍝Done
response←{host}GetPackageViaHTTP_ packageID;r;request
⍝ Requests a package via HTTP(S)
⍝ `host` defaults to "https://tatin.dev"
⍝ Port number is defined by the client settings
⍝ * a package ID
host←{0<⎕NC ⍵:⍎⍵ ⋄ 'https://tatin.dev/'}'host'
host←ReplaceRegistryAlias host
request←R.NewRequest 0
request.RequestTarget←'/',packageID
response←SendAndReceive host request   ⍝ Errors handled by caller
⍝Done
r←GetPathToPackageCache;folder
⍝ The user settings rule:
⍝ 1. If MyUserSettings.path2cache is not empty then that path is returned, otherwise:
⍝ 2. The function returns the standard path for caching which depends on the operating system\\
r←MyUserSettings.path2cache           ⍝ Then this rules the day...
:If 0=≢r                              ⍝ ...except when it is empty: then we take OS-specific defaults
folder←'tatin-package-cache'
:Select ⎕C 3↑1⊃#.⎕WG'APLVersion'
:Case 'win'
r←(2 ⎕NQ #'GetEnvironment' 'AllUsersProfile'),'\Dyalog\',folder
:Case 'lin'
r←(2 ⎕NQ'.' 'GetEnvironment' 'HOME'),'/.dyalog/',folder
:Case 'mac'
r←'/Applications/Dyalog/',folder
:EndSelect
:If ~F.IsDir r
3 ⎕MKDIR r
:EndIf
:EndIf
r←{current}GetProgramFilesFolder subFolder;version;aplVersion;OS
⍝ Returns path to Dyalog's program files folder.\\
⍝ Comes always with a trailing separator.\\
⍝ * By default it returns the version agnostic folder
⍝ * If ⍺=1 then it returns the folder for the currently running APL
⍝ Works on all platforms but returns different results.\\
⍝ Under Windows typically:\\
⍝ `C:\Users\<⎕AN>\Documents\Dyalog APL Files' ←→ GetProgramFilesFolder ''
⍝ without OneDrive or, with OneDrive:
⍝ `C:\Users\<⎕AN>\OneDrive\Documents\Dyalog APL Files' ←→ GetProgramFilesFolder ''
⍝ When a 1 is passed as ⍺ and it's running on 19.0-64 bit Unicode:
⍝ `C:\Users\<⎕AN>\Documents\Dyalog APL-64 19.0 Unicode Files' ←→ 1 GetProgramFilesFolder ''
⍝ or, with OneDrive:
⍝ `C:\Users\<⎕AN>\OneDrive\Documents\Dyalog APL-64 19.0 Unicode Files' ←→ 1 GetProgramFilesFolder ''
current←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'current'
OS←3↑1⊃# ⎕WG'APLVersion'
subFolder,←{(~(¯1↑⍵)∊'/\')/'/'}subFolder
aplVersion←# ⎕WG'APLVersion'
:If current
:If OS≡'Win'
r←GetCurrentAPLsFolderInDocuments,{⍵↓⍨-(,'/')≡⍵}subFolder
:Else
version←({'.'~⍨⍵/⍨2>+\⍵='.'}2⊃aplVersion),((80=⎕DR' ')/'U'),((1+∨/'-64'⍷1⊃aplVersion)⊃'32' '64')
r←(⊃⎕SH'echo $HOME'),'/dyalog.',version,'.files',subFolder
:EndIf
:Else
:If OS≡'Win'
r←GetUserDocumentsFolder,'Dyalog APL Files',{0<≢⍵~'/\':'/',⍵ ⋄ ⍵}subFolder
:Else
r←(⊃⎕SH'echo $HOME'),'/dyalog.files',subFolder
:EndIf
:EndIf
r←GetRegistriesForBuildList;buff;bool
⍝ Returns the URLs for all registries with a priority of greater than 0 (because we do not scan priority=0), ordered by priority.
⍝ The Registries are then pinged in order to find out whether they are up and running. Those which are not are remembered on ∆TREE.ignore
buff←ListRegistries''
buff←(buff[;RegistryIndices.priority]>0)⌿buff
r←⊃¨{⍵∊0 80 443:⍺ ⋄ ({⍵↓⍨-'/'=¯1↑⍵}⍺),':',(⍕⍵),'/'}/¨↓buff[;RegistryIndices.(url port)]
r~←∆TREE.ignore
r←∪r
⍝Done
r←{cfg}GetRegistryID y;b;url;port
⍝ `y` might by a URL (http[s]://...) or an alias ([...]) or a Registry ID.
⍝ The function returns one of:
⍝  * A namespace with all the Registry-specific data if a single unique Registry could be identified by `y`
⍝  * ⍬ if none or multiple Registries match `y`
cfg←{0<⎕NC ⍵:⍎⍵ ⋄ MyUserSettings}'cfg'
r←⍬
:If IsHTTP y
url←{⍵,('/'≠¯1↑⍵)/'/'}{⍵/⍨3>+\⍵='/'}y
port←⍬
:If 2=url+.=':'
port←{⍵↑⍨¯1+⍵⍳'/'}{1↓⍵/⍨2=+\⍵=':'}y
url←((-2+≢port)↓url),'/'
port←A.ToNum port
:EndIf
:If 0<+/b←cfg.registries.uri≡¨⊂url
:If ⍬≡port
:If 1=+/b
r←(⍸b)⊃cfg.registries
:EndIf
:Else
b∧←cfg.registries.port≡¨port
:If 1=+/b
r←(⍸b)⊃cfg.registries
:EndIf
:EndIf
:EndIf
:ElseIf ∧/'[]'∊y
:If 1=+/b←cfg.registries.alias≡¨⊂1↓y↑⍨¯1+y⍳']'
r←(⍸b)⊃cfg.registries
:EndIf
:Else
:If 1=+/b←cfg.registries.id≡¨⊂{⍵↑⍨¯1+⍵⍳'/'}y
r←(⍸b)⊃cfg.registries
:EndIf
:EndIf
:If 1=≢r
r.⎕DF r.id
:EndIf
⍝Done
r←{mininumVersionFlag}GetServerVersion uri;client;request;res;∆PermanentConnections
⍝ Without mininumVersionFlag being 1 just the version number of the server is returned.
⍝ With mininumVersionFlag←1 a text is returned stating both the current version of the
⍝ principal server and the minimum version required.
mininumVersionFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'mininumVersionFlag'
:If mininumVersionFlag
uri←ReplaceRegistryAlias'[tatin]'
∆PermanentConnections←⎕NS''
request←R.NewRequest 0
request.RequestTarget←'/v1/version'
request.Headers,←⊂'Accept' 'application/json'
res←SendAndReceive uri request
:If 200≠res.StatusCode
CloseConnections 1
:If 0<≢res.Content
('Server: ',res.Content)Assert 0
:Else
('Failed with status code ',⍕res.StatusCode)Assert 0
:EndIf
:EndIf
r←'Current version is ',⊃{⍺,' from ',⍵}/1↓Reg.JSON res.Content
request←R.NewRequest 0
request.RequestTarget←'/v1/minimum-version'
request.Headers,←⊂'Accept' 'application/json'
res←SendAndReceive uri request
:If 200≠res.StatusCode
CloseConnections 1
:If 0<≢res.Content
('Server: ',res.Content)Assert 0
:Else
('Failed with status code ',⍕res.StatusCode)Assert 0
:EndIf
:EndIf
CloseConnections 1
r,←'; minimum version required is ',⍕res.Content
:Else
uri←ReplaceRegistryAlias uri
'No URI provided'Assert 0<≢uri
request←R.NewRequest 0
request.RequestTarget←'/v1/version'
request.Headers,←⊂'Accept' 'application/json'
res←SendAndReceive uri request
:If 200≠res.StatusCode
:If 0<≢res.Content
('Server: ',res.Content)Assert 0
:Else
('Failed with status code ',⍕res.StatusCode)Assert 0
:EndIf
:EndIf
r←Reg.JSON res.Content
:EndIf
⍝Done
path←GetTatinRootSpace targetSpace
⍝ `targetSpace` is where the link to a package it going to be created: `#` or `⎕SE`.\\
⍝ It may be just `#` or `⎕SE` but can also be '#.Nested.Hirarchy' or just `⎕THIS` depending on circumstances
⍝ That rules whether we return `#._tatin` or `⎕SE._tatin`.
path←'_tatin'Reg.CreateNamespace targetSpace
⍝Done
r←GetUserDocumentsFolder
⍝ Get user documents folder. Works okay when the Documents/ folder is on OneDrive.
⍝ Comes always with a trailing separator.
r←⊃⎕NPARTS ¯1↓GetCurrentAPLsFolderInDocuments
r←{OS}GetUserHomeFolder add;p;v;w;l;d;h;lad;as
⍝ Returns standard path for any user-specific data.\\
⍝ Works on all platforms but returns different results.\\
⍝ `⍵`, if not empty, is added to the resulting path.\\
⍝ Under Windows typically:\\
⍝ `%APPDATA%\Tatin'     ←→ GetUserHomeFolder ''
⍝ `%APPDATA%\Tatin\foo' ←→ GetUserHomeFolder 'foo'
⍝ On non-Windows platforms:\\
⍝ '/home/{⎕AN}/Tatin'     ←→ GetUserHomeFolder ''
⍝ '/home/{⎕AN}/Tatin/foo' ←→ GetUserHomeFolder 'foo'
⍝ ⍺ is optional and only specified by test cases: used to simulate different versions of the operating system.
OS←{0<⎕NC ⍵:⍎⍵ ⋄ '.'⎕WG'APLVersion'}'OS'
add←{(((~'/\'∊⍨⊃⍵)∧0≠≢⍵)/'/'),⍵}add
(p v)←2↑OS
(w l)←'WL'∊''⍴p
d←'/Tatin'
(h lad)←2 ⎕NQ'.' 'GetEnvironment'('HOME' 'APPDATA')
:If w
r←F.ExpandPath lad,d,add               ⍝ windows
:Else
as←'/Library/Application Support'      ⍝ special mac folder
:If l∧0≠≢h
r←F.ExpandPath h,d,add             ⍝ linux
:ElseIf 0≠≢h
r←F.ExpandPath h,as,d,add          ⍝ mac
:Else
'No user found?!'Assert 0<≢u
:If l
r←(2 ⎕NQ'.' 'GetEnvironment' 'HOME'),d,add       ⍝ linux
:Else
r←(2 ⎕NQ'.' 'GetEnvironment' 'HOME'),as,d,add    ⍝ mac
:EndIf
:EndIf
:EndIf
⍝Done
HasPortNumber←{1=≢'^http[s]?:[0-9]{1,6}//'⎕S 0⊣⎕C ⍵}
r←{raw}HelpOnSyntax name;body;header;b
⍝ Takes the name of an API function and returns its header and all "leading" comments.
⍝ In case the (optional) left argument is 1 no beautifying takes place. Useful for tests.
'Neither function nor operator'Assert(⎕NC name)∊3 4
raw←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'raw'
body←A.DLB A.DTB ⎕NR name
header←1⊃body
body←1↓body                            ⍝ Remover header
body←(~∧\';'=⊃¨body)/body              ⍝ Remove all local vars definition
b←∧\(⊃¨body)∊':⍝ '
body←2↓¨(b\';'≠⊃¨b/body)/body          ⍝ Remove empty and decleration lines within comment lines
header←(¯1+⌊/header⍳';⍝')↑header
r←''
:If 0=raw
r,←⊂name{⍵↑'--- Help on ',⍺,' ',⍵⍴'-'}⎕PW-1
:EndIf
body←'\\\\$'⎕R''⊣body
:If 3.1=⎕NC⊂name
r,←⊂'∇',header
:EndIf
:If 0<≢∊body
r,←'  '∘,¨body
:EndIf
r←↑r
⍝Done
ID←IdentifyInstalledPackageID(list ID_);noOf;list2;Case;bool
⍝ ID might be one of:
⍝ * Fully qualified package ID
⍝ * group-name
⍝ * Just "name"
⍝ Returns either empty (not found) or the full package ID including group, name and version number.
⍝ If `ID_` is ambiguous an error is thrown.\\
⍝ `ID` might be one of:
⍝ * a package name ('APLTreeUtils2')
⍝ * Group name and package name ('aplteam-APLTreeUtils2')
⍝ * A fully qualified package ID ('aplteam-APLTreeUtils2-1.2.3')
⍝ In case ID_ was not found an empty vector is returned.
:If '@'∊ID_        ⍝ Is it an alias?
'Invalid alias'Assert 0<≢ID_~'@'
bool←(⊂ID_~'@')≡¨{'@'∊⍵:⍵↑⍨¯1+⍵⍳'@' ⋄ ''}¨list
:Else
noOf←'-'+.=ID_
'Invalid package identifier'Assert noOf∊0 1 2
:Select noOf
:Case 0
list2←{2⊃'-'(≠⊆⊢)⍵}¨RemoveAlias¨list
bool←list2≡¨⊂ID_
:Case 1
list2←{⊃{⍺,'-',⍵}/2↑'-'(≠⊆⊢)⍵}¨RemoveAlias¨list
bool←list2≡¨⊂ID_
:Case 2
bool←(RemoveAlias¨list)≡¨⊂ID_
:Else
bool←(RemoveAlias¨list)≡¨⊂ID_
:EndSelect
:EndIf
'Ambiguous package name'Assert 1≥+/bool
:If 0=+/bool
ID←''
:Else
ID←(⍸bool)⊃list
:EndIf
⍝Done
IfAtLeastVersion←{
⍝ ⍵ is supposed to be a number like 15 or 17.1, representing a version of Dyalog APL.
⍝ Returns a Boolean that is 1 only if the current version is at least as good.
⍵≤{⊃(//)⎕VFI ⍵/⍨2>+\'.'=⍵}2⊃# ⎕WG'APLVersion'
}
IncreaseBuildNumber←{
⍝ Either increases the build number or adds one
version←⍵
(version_ buildNo)←'+'(≠⊆⊢)version,(~'+'∊version)/'+0'
buildNo_←1+⊃(//)⎕VFI buildNo
version_,'+',⍕buildNo_
}
{r}←{userName}Init pathToUserSettings;⎕TRAP
⍝ Use this to ...
⍝ * perform some tests regarding requirements
⍝ * re-establish the user settings via a user command
r←''
:If 0=⎕SE.⎕NC'Link.Version'
:OrIf 3>⊃(//)⎕VFI{⍵↑⍨¯1+⍵⍳'.'}⎕SE.Link.Version
'Tatin requires at least Link 3.0'⎕SIGNAL Reg.ErrorNo
:EndIf
'Tatin requires at least Dyalog version 18.0.44280 Unicode'Reg.Assert IfAtLeastVersion 18
:If 0=≢pathToUserSettings
userName←{0<⎕NC ⍵:⍎⍵ ⋄ ⎕AN}'userName'
pathToUserSettings←FindUserSettings userName
:EndIf
MyUserSettings←InitUserSettings pathToUserSettings
r,←'User settings established in ',(⍕⎕THIS),' from ','expand'F.NormalizePath pathToUserSettings
⍝Done
cfg←{projectPath}InitPackageConfig y;comments;msg;bool;list;varsList;projectConfig
⍝ Initialise a package config namespace
⍝ ⍵ might be empty; then it is ignored.
⍝ ⍵ might be a namespace; then the content is copied into the config namespace after
⍝ it got populated with defaults.
projectPath←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'projectPath'
comments←''                ⍝ These are extracted by "AddCommentToPackageConfig"
cfg←Reg.CreateNamespace ⎕THIS
cfg.api←''
comments,←'api' 'The public interface of the package'
cfg.assets←''
comments,←'assets' 'Empty or a single folder holding assets required by the package'
cfg.description←''
comments,←'description' 'Mandatory. Maximum length is 120 chars.'
⍝cfg.deprecated←0           ⍝ Injected only when a package...
⍝cfg.deprecateComment←''    ⍝ ... is deprecated!
cfg.documentation←''
comments,←'documentation' 'A URL or a local path or a function providing documentation'
⍝cfg.date←''                ⍝ Injected by the server (publishing date)
⍝cfg.exclude←''                ⍝ Optional, therefore not included (for best compatability)  ⍝TODO⍝ Change before 1.0.0 is released
⍝comments,←'exclude' 'Optional. Name of one or more files/folders relative to "source" excluded from the package'
cfg.files←''
comments,←'files' 'Optional. For files like "ReadMe.txt" to go to the root of the package'
cfg.group←MyUserSettings.group
comments,←'group' 'Mandatory. Maximum length is 120 chars.'
cfg.license←MyUserSettings.license
comments,←'license' 'Name of the license; see ]Tatin.ListLicenses'
cfg.maintainer←MyUserSettings.maintainer
comments,←'maintainer' 'The email address of the maintainer'
cfg.name←''
comments,←'name' 'Mandatory. The project''s name'
:If 0=≢cfg.source←MyUserSettings.source
:AndIf 0<≢projectPath
projectConfig←⎕SE.Cider.ReadProjectConfigFile projectPath
cfg.source←projectConfig.CIDER.source
:EndIf
comments,←'source' 'Mandatory. Either a code file (.aplc, .apln, etc.) or a folder'
cfg.os_win←1
comments,←'os_win' '1=the package runs under Windows'
cfg.os_mac←1
comments,←'os_mac' '1=the package runs under Mac OS'
cfg.os_lin←1
comments,←'os_lin' '1=the package runs under Linux'
cfg.project_url←''
comments,←'project_url' 'The project''s home for example'
cfg.tags←''
comments,←'tags' 'A comma-separated list of tags'
cfg.minimumAplVersion←'18.0' ⍝ That's the minimum version: Tatin does not run in earlier versions
comments,←'minimumAplVersion' 'Minimum version required to run the package'
cfg.userCommandScript←''
comments,←'userCommandScript' 'Path to the user command script within the project'
cfg.version←'0.1.0'
comments,←'version' 'Mandatory. The project''s version number'
cfg.io←{⊃⊃(//)⎕VFI ⍵}2 ⎕NQ #'GetEnvironment' 'default_io'
comments,←'io' 'Value for index origin'
cfg.ml←{⊃⊃(//)⎕VFI ⍵}2 ⎕NQ #'GetEnvironment' 'default_ml'
comments,←'ml' 'Value for migration level'
cfg.lx←''
comments,←'lx' 'Function to be called when the package is established in the WS'
:If 0<≢y
varsList←(' '~¨⍨↓cfg.⎕NL 2),'deprecateComment' 'deprecated' 'exclude' ⍝  ⍝TODO⍝ Remove "exclude" when it becomes a permanent property (1.0.0)
{}'cfg'⎕NS y
{}cfg.⎕EX'wx'              ⍝ Not anymore (since 0.61.0)
list←(' '~¨⍨↓cfg.⎕NL 2)~' '~¨⍨↓'_'cfg.⎕NL 2 ⍝ user properties start with "_" by convention
bool←list∊varsList,('uri' 'date') ⍝ These are injected by the server
bool∨←list∊'tatin_version' ''
:If ∨/~bool
⍝ --- In order to allow the addition (and renaming) of properties we don't perform this check for the time being
⍝msg←'Invalid propert',((1+1<+/~bool)⊃'y' 'ies'),' in config namespace: ',⊃{⍺,',',⍵}/((~bool)/list)
⍝msg Assert 0
⍝ ---
:EndIf
:EndIf
{ref}←{caching}InitUserSettings folder;ns;b;url;dp;i
⍝ Establishes `MyUserSettings` by instantiating the `UserSettings` class.\\
⍝ `folder` is where the config file lives or is going to be created. If this is empty the
⍝ Tatin config file `.tatin` is checked. If no definition is found (that file does not
⍝ need to exist) it falls back to the default defined by `GetUserHomeFolder`.\\
⍝ ← is a reference pointing to the instance.\\
⍝ Note that all functions that require user settings rely on `MyUserSettings` to exist;
⍝ if it doesn't a VALUE ERROR will be generated.\\
⍝ `caching` defaults to 1, but you may overwrite this via ⍺. Mainly for test cases.
caching←{0<⎕NC ⍵:⍎⍵ ⋄ 1}'caching'
:If 0=≢folder
folder←GetUserHomeFolder''
:EndIf
:If F.IsFile folder
folder←1⊃⎕NPARTS folder
:EndIf
:If ~F.IsDir folder
Assert F.MkDir folder
:EndIf
ref←MyUserSettings←⎕NEW UserSettings(,⊂folder)
ref.caching←caching
:If 0<+/b←0=⊃¨ref.registries.⎕NC⊂'noCaching'
(b/ref.registries).{⎕THIS.noCaching←⍵}0        ⍝ Was introduced in 0.63.0
:EndIf
⍝Done
InitialisePackage←{
⍝ Takes a folder (⍵) and initialises this folder so that it can be a package.
⍝ This means in particular to create the folder (although it might already exist) and to
⍝ create a package config file with default settings or what ⍺ specifies: one
⍝ can pass a config namespace as ⍺, typically created by a call to InitPackageConfig,
⍝ and then amended.
⍝ There must be no config file yet, otherwise an error is thrown.
⍺←''
cfg←⍺
folder←⍵
_←F.MkDir folder
('file "',CFG_Name,'" already exists')Assert 0=F.Exists folder,'/',CFG_Name:1
cfg←0 WritePackageConfigFile folder cfg
fn←folder,'/',cfg.source
_←{F.MkDir ⍵}⍣(0=F.Exists fn)⊣fn
1:cfg
}
r←targetFolder InstallPackage_(alias packageID);buildList;principal;packageID2;installFolder;msg;path2cache;url;bool;tempDir;cacheFlag;success;qdmx;cfg
⍝ Fetches a package and unzips it into a temp folder.
⍝ When caching is on, the temp folder is created within the top-level of the cache folder.
⍝ Otherwise a folder is created inside the temp directory of the given OS.
⍝ ← is a vector of names with the principle packages, including any alias(es).
r←''
:If 0<≢buildList←GetDependencyTree alias,packageID
PrintToSession'  ',(⍕≢buildList),' dependenc',((1+1=≢buildList)⊃'ies' 'y'),' identified'
CheckAliasOnInstall targetFolder alias(GetPackageIDFrom packageID)
:For principal packageID2 url :In ↓buildList
(alias packageID2)←SplitAtAlias packageID2
installFolder←(Reg.AddSlash targetFolder),packageID2
:If principal
('Installation folder "',installFolder,'" is a file')Assert 0=F.IsFile installFolder
:EndIf
:If F.IsDir installFolder
F.RmDir installFolder
:AndIf F.IsDir installFolder
⎕DL 0.01
msg←'Could not remove install folder (package was apparently already installed):',CR
msg,←installFolder
msg Assert 0
:EndIf
:If MyUserSettings.caching
:AndIf 0<≢path2cache←CompilePath2PackageInCache url packageID2
:AndIf 0=GetNoCachingFlag url
PrintToSession'  Fetching ',packageID2,' from Tatin package cache...'
tempDir←GetPackageFromCache url packageID2 path2cache
cacheFlag←0
:Else
:Trap ((⊂,##.Client.DEBUG)∊,¨'on' 1)↓Reg.ErrorNo
(success tempDir cacheFlag)←InstallPackage__ packageID2 url
:If 0=success
:Return
:EndIf
:Else
qdmx←⎕DMX
qdmx.EM Assert 0
:EndTrap
:EndIf
:If IsHTTP url
:AndIf cacheFlag
installFolder(⎕NCOPY Reg.F.ExecNfunction)tempDir
:Else
installFolder(⎕NMOVE Reg.F.ExecNfunction)tempDir
:EndIf
:If principal
PrintToSession'    Add ',packageID2,' to dependency file...'
targetFolder Dependencies.Add alias,packageID2
:Else
cfg←Reg.ReadPackageConfigFile installFolder
:If 0<cfg.⎕NC'userCommandScript'
:AndIf 0<≢cfg.userCommandScript
⎕NDELETE installFolder,'/',⊃,/1↓⎕NPARTS cfg.userCommandScript  ⍝  ⍝TODO⍝ Remove once User Command Framework stops scanning cmddirs for more than 1 level
:EndIf
:EndIf
:EndFor
buildList[;3]←ReplaceCachePathByURL¨buildList[;3]
PrintToSession'    Saving build list... '
r←buildList[1;2]
SaveBuildList buildList targetFolder
:EndIf
(success tempDir cacheFlag)←InstallPackage__(packageID url);zipFilename;isHTTP;path;msg;rc
⍝ Fetches a package and unzips it into a temp folder.
⍝ When caching is on, the temp folder is created within the top-level of the cache folder.
⍝ Otherwise a folder is created inside the temp directory of the given OS.
⍝ `success` is 0 in case the server does not exist or does not respond etc but otherwise 1.
success←1
:If isHTTP←Reg.IsHTTP url
PrintToSession'  Fetching <',packageID,'>from ',url,'...'
:Trap ((⊂,##.Client.DEBUG)∊,¨'on' 1)↓Reg.ErrorNo
zipFilename←GetPackageViaHTTP url,packageID
:Else
1 PrintToSession'    ',url,' does not host package <',packageID,'>'
tempDir←''
cacheFlag←success←0
:Return
:EndTrap
:Else
:If '.zip'≡¯4↑url
zipFilename←RemoveFileProtocol url
:Else
:If ~⎕NEXISTS zipFilename←RemoveFileProtocol(F.AddTrailingSep url),packageID,'/',packageID,'.zip'
zipFilename←RemoveFileProtocol(F.AddTrailingSep url),packageID,'.zip'
:EndIf
:EndIf
('File <',zipFilename,'> does not exist')Assert F.IsFile zipFilename
:EndIf
zipFilename←F.EnforceSlash zipFilename
:If MyUserSettings.caching                                                              ⍝ If caching is generally active...
:AndIf IsHTTP url                                                                       ⍝ ... and the package was originally from the web ...
:AndIf 0=GetNoCachingFlag url                                                           ⍝ ... and is not switched off for this particular registry...
:AndIf 'None'≡GetDeletePolicy url                                                       ⍝ ... and the registry operates a "None" delete policy ...
:AndIf ~Reg.IsBeta packageID                                                            ⍝ ... and the package is not a beta version...
cacheFlag←1
PrintToSession'    Save package in cache...'
tempDir←GetPathToPackageCache,'/temp/',packageID,'_',(GetMD5 zipFilename),'_',⎕AN   ⍝ ... then and only then do we write to the cache folder.
:Else
tempDir←Reg.GetTempDir,'/',packageID,'_',(GetMD5 zipFilename),'_',⎕AN               ⍝ Otherwise to the temp folder of the OS
cacheFlag←0
:EndIf
:If 0=F.IsDir tempDir
F.MkDir tempDir
⎕DL 0.1   ⍝ Changed to 0.1 from 0.2 - appears to be good enough
:EndIf
PrintToSession'    Unzipping ',zipFilename,'...'
zipFilename ZipArchive.UnzipTo tempDir
:If CheckDeprecatedFlag tempDir
(rc msg)←tempDir Add2Config'uri'(RemoveFileProtocol url)
:AndIf 0=rc
:If isHTTP
:If cacheFlag
tempDir←MovePackageToCache tempDir url packageID
:EndIf
F.DeleteFile zipFilename
:EndIf
:Else
F.RmDir tempDir
F.DeleteFile isHTTP/zipFilename
msg ⎕SIGNAL Reg.ErrorNo
:EndIf
⍝Done
r←{noBetas}InstallPackages(identifiers targetFolder);identifier_;cfg;qdmx;targetFolder_;isUCMD;ucScriptName;forceClose
;buildList;level;requestedBy;packageID2;installFolder;tempDir;zipFilename;id;identifier;packageID;alias
⍝ Install package(s) `identifiers` in `targetFolder`.\\
⍝ `identifiers` must be a simple char vector holding the package IDs (possibly incomplete) for one or more packages.
⍝ Multiple packages must be separated by commas.
⍝ `targetFolder` must be one of:
⍝ * Path to a folder
⍝ * [MyUCMDs] (case independent)\\
⍝   In this case you may or may not specify the name of a sub-folder after `[MyUCMDs`]`; if you don't then the name of the package rules.
⍝ `identifierd` must be one (or more) of:
⍝ * an HTTP request for a package
⍝ * a ZIP file holding a package
⍝ * a folder holding a package (like file://C:\Temp\group-name-version\\)
⍝ * a path to a package in a registry (like [RegistryAlias]{group}-{name}-{major.minor.patch} or C:\MyReg\{group}-{name}-{major.minor.patch})
⍝ * a package ID; Tatin will then attempt to find that package in the Registries defined in the Client's config file.\\
⍝ * The internal alias [MyUCMDs] (case independent). This installs the package(s) into a folder MyUCMDs/packages
⍝ You may omit minor+patch or even major+minor+patch in order to install the latest version.
⍝ By default beta versions are considered in case the package ID is incomplete, but you can suppress them by passing 0 as ⍺.\\
⍝ `←` Full name of principal packages finally installed, including an alias if specified.
r←''
noBetas←{0<⎕NC ⍵:⍎⍵ ⋄ Reg.GetNoBetasDefault}'noBetas'
identifiers←','(≠⊆⊢)identifiers
forceClose←~EstablishEmptyPermanentConnections 0
isUCMD←'[myucmds]'{⍺≡⎕C(≢⍺)↑⍵}targetFolder
:If ~isUCMD
'Invalid target folder: must not contain "[]" (except for [MyUCMDs])'Assert~∨/'[]'∊targetFolder
:EndIf
:If isUCMD∧1<≢identifiers
'You must not specify a name after [MyUCMDs] when installing more than one package'Assert 0=≢(≢'[myucmds]')↓targetFolder
:EndIf
:Trap ((⊂,##.Client.DEBUG)∊,¨'on' 1)↓Reg.ErrorNo
:For identifier_ :In identifiers
(alias identifier_)←SplitAtAlias identifier_
('Invalid alias: ',identifier_)Assert(,'@')≢alias
identifier←ReplaceRegistryAlias identifier_
('Unknown',(∧/'[]'∊identifier_)/' alias')Assert 0<≢identifier
identifier←noBetas CheckVersion identifier
:If 0=≢identifier    ⍝ Not found?
1 PrintToSession'Not found: ',identifier_
:Continue
:EndIf
:If isUCMD
:If 0=≢{⍵↓⍨⍵⍳']'}targetFolder
:If IsHTTP identifier
targetFolder_←GetMyUCMDsFolder{'-'∊⍵:⍵↓⍨⍵⍳'-' ⋄ ⍵}{'/'∊⍵:⍵↓⍨⍵⍳'/' ⋄ ⍵}RemoveHttpProtocol Reg.RemoveVersionNumber identifier
:Else
targetFolder_←GetMyUCMDsFolder{'-'∊⍵:⍵↓⍨⍵⍳'-' ⋄ ⍵}Reg.RemoveVersionNumber 2⊃⎕NPARTS identifier
:EndIf
:Else
targetFolder_←GetMyUCMDsFolder'/',{⍵↓⍨⍵⍳']'}targetFolder
:EndIf
:Else
targetFolder_←targetFolder
:EndIf
packageID←GetPackageIDFrom identifier
{}{'Unable to create target directory'Assert F.MkDir ⍵}⍣(~F.IsDir targetFolder_)⊢targetFolder_
:If 0=≢identifier    ⍝ Not found?
1 PrintToSession'Not found: ',identifier_
:Continue
:EndIf
PrintToSession'  Attempting to install ',identifier,'...'
:If ∧/~'\/'∊identifier
:AndIf '.zip'≢⎕C ¯4↑identifier
:If ~∨/'/\:'∊identifier
identifier←(EstablishRegistry packageID),packageID
:If 0=≢(-≢packageID)↓identifier
:Continue
:EndIf
PrintToSession⊃{'Installing <',⍵,'> from Registry ',⍺,'...'}/{⍵{(⍵↓⍺)(⍵↑⍺)}1+-'/'⍳⍨⌽⍵}identifier
:EndIf
:EndIf
:If '.zip'≡⎕C ¯4↑identifier
:AndIf Reg.IsHTTP identifier
CloseConnections forceClose
'ZIP files cannot be installed via HTTP'Assert 0
:EndIf
PrintToSession'  Establish dependencies...'
r,←targetFolder_ InstallPackage_ alias identifier
packageID←GetPackageIDFrom identifier
cfg←ReadPackageConfigFile targetFolder_,'/',packageID,'/',CFG_Name
:If 0<≢cfg.userCommandScript
ucScriptName←⊃,/1↓⎕NPARTS cfg.userCommandScript
:If Reg.F.IsFile targetFolder_,'/',ucScriptName
Reg.F.DeleteFile targetFolder_,'/',ucScriptName  ⍝ Probably a re-install
:EndIf
⍝ Move the user command script to the root of the install folder (usually something like [MyUCMDs])
(targetFolder_,'/')(⎕NMOVE Reg.F.ExecNfunction)targetFolder_,'/',packageID,'/',ucScriptName
:EndIf
:EndFor
CloseConnections forceClose
:Else
qdmx←⎕DMX
CloseConnections forceClose
:Trap 0 ⋄ F.RmDir tempDir ⋄ :EndTrap
(⊃{0=≢⍺:⍵ ⋄ ⍺}/qdmx.(Message EM))⎕SIGNAL{⍺=0:⍵ ⋄ ⍺}/qdmx.(ENX EN)
:EndTrap
⍝Done
r←{noBetas}InstallPackages_(identifiers targetFolder);bool;principal;msg;path2cache;cacheFlag;identifier_;success;question;sep;qdmx
;buildList;level;requestedBy;packageID2;url;installFolder;tempDir;zipFilename;id;identifier;packageID;alias
⍝ Install package `identifiers` in `targetFolder`.\\
⍝ `identifiers` must be a simple char vector holding the package IDs (possibly incomplete) for one or more packages.
⍝ Multiple packages must be separated by commas.
⍝ `identifierd` must be one (or more) of:
⍝ * an HTTP request for a package
⍝ * a ZIP file holding a package
⍝ * a folder holding a package (like file://C:\Temp\group-name-version\\)
⍝ * a path to a package in a registry (like [RegistryAlias]{group}-{name}-{major.minor.patch} or C:\MyReg\{group}-{name}-{major.minor.patch})
⍝ * a package ID; Tatin will then attempt to find that package in the Registries defined in the Client's config file.\\
⍝ You may omit minor+patch or even major+minor+patch in order to install the latest version.
⍝ By default beta versions are considered in case the package ID is incomplete, but you can suppress them by passing 0 as ⍺.\\
⍝ `←` Full name of packages finally loaded.
r←''
noBetas←{0<⎕NC ⍵:⍎⍵ ⋄ Reg.GetNoBetasDefault}'noBetas'
'Target folder does not eixst'Assert F.IsDir targetFolder
identifiers←','(≠⊆⊢)identifiers
:For identifier_ :In identifiers
(alias identifier_)←SplitAtAlias identifier_
identifier←ReplaceRegistryAlias identifier_
('Unknown',(∧/'[]'∊identifier_)/' alias')Assert 0<≢identifier
identifier←noBetas CheckVersion identifier
'Package not found'Assert 0<≢identifier
PrintToSession'  Attempting to install ',identifier,'...'
:If ∧/~'\/'∊identifier
:AndIf '.zip'≢⎕C ¯4↑identifier
packageID←GetPackageIDFrom identifier
:If ~∨/'/\:'∊identifier
identifier←(EstablishRegistry packageID),packageID
PrintToSession⊃{'Installing <',⍵,'> from Registry ',⍺,'...'}/{⍵{(⍵↓⍺)(⍵↑⍺)}1+-'/'⍳⍨⌽⍵}identifier
:EndIf
:EndIf
:If '.zip'≡⎕C ¯4↑identifier
:AndIf Reg.IsHTTP identifier
'ZIP files cannot be installed via HTTP'Assert 0
:EndIf
PrintToSession'  Establish dependencies...'
:If 0<≢buildList←GetDependencyTree alias,identifier
PrintToSession'  ',(⍕≢buildList),' dependenc',((1+1=≢buildList)⊃'ies' 'y'),' identified'
CheckAliasOnInstall targetFolder alias(GetPackageIDFrom identifier)
:For principal packageID2 url :In ↓buildList
(alias packageID2)←SplitAtAlias packageID2
installFolder←(Reg.AddSlash targetFolder),packageID2
:If principal
('Installation folder "',installFolder,'" is a file')Assert 0=F.IsFile installFolder
:EndIf
:If F.IsDir installFolder
F.RmDir installFolder
:AndIf F.IsDir installFolder
⎕DL 0.01
msg←'Could not remove install folder (package was apparently already installed):',CR
msg,←installFolder
msg Assert 0
:EndIf
:If MyUserSettings.caching
:AndIf 0<≢path2cache←CompilePath2PackageInCache url packageID2
:AndIf 0=GetNoCachingFlag url
:AndIf 0<≢path2cache
PrintToSession'  Fetching from Tatin package cache...'
tempDir←GetPackageFromCache url packageID2 path2cache
cacheFlag←0
:Else
:Trap ((⊂,##.Client.DEBUG)∊,¨'on' 1)↓998
(success tempDir cacheFlag)←InstallPackage__ packageID2 url
:If 0=success
sep←⎕UCS 10
question←'*** Server:',sep,'   ',url,sep,'does not host the package',sep
question,←'   ',packageID2,sep,'Skip? (No=quit whole operation) '
:If YesOrNo question
⎕TRAP←0 'S'
∘∘∘  ⍝ Intentional
:Continue
:Else
CloseConnections 0
:Return
:EndIf
:EndIf
:Else
qdmx←⎕DMX
(⊃{0=≢⍺:⍵ ⋄ ⍺}/qdmx.(Message EM))⎕SIGNAL{⍺=0:⍵ ⋄ ⍺}/qdmx.(ENX EN)
:EndTrap
:EndIf
:If IsHTTP url
:AndIf cacheFlag
installFolder(⎕NCOPY Reg.F.ExecNfunction)tempDir
:Else
installFolder(⎕NMOVE Reg.F.ExecNfunction)tempDir
:EndIf
:If principal
PrintToSession'  Add ',packageID2,' to dependency file...'
targetFolder Dependencies.Add alias,packageID2
:EndIf
:EndFor
buildList[;3]←ReplaceCachePathByURL¨buildList[;3]
PrintToSession'  Saving build list... '
buildList←SaveBuildList buildList targetFolder
:If ∨/bool←({'['∊⍵:⍵↓⍨⍵⍳']' ⋄ ∨/b←'://'⍷⍵:(2+b⍳1)↓⍵ ⋄ ⍵}alias,identifier_){⍺∘≡¨(≢⍺)↑¨⍵}buildList[;2]
r,←buildList[bool⍳1;2]
:Else
r,←buildList[1;2]
:EndIf
:EndIf
:EndFor
CloseConnections 0
⍝Done
IsHTTP←{1=≢'^http[s]?://'⎕S 0⊣⎕C ⍵}
r←IsInstallFolder path
r←⎕NEXISTS path,'/apl-buildlist.json' ⍝ An install folder must host this file.
r←IsRunningAsUserCommand;list
⍝ Used to establish whether we run as a user command.
⍝ Important because some functions then print stuff to the session.
⍝ In the API we don't want that.
list←(4=⊃∘⎕NC¨⎕XSI)/⎕SI                ⍝ We are looking for operator...
r←(⊂'__ExecAsTatinUserCommand')∊list   ⍝ ... by the name "__ExecAsTatinUserCommand"
⍝Done
r←LF
r←⎕UCS 10
{r}←LinkDependencies refs;ref;deps;root;destinations;bool;depName;destination;cfgs;cfg;list;dep;aliasOrName
⍝ Takes a list of refs, typically returned by `LoadDependencies`, and establishes any required references
⍝ to dependencies within those refs.
⍝ `api` rules, but if it's empty then `name` is taken instead.
r←⍬
root←{GetTatinRootSpace 1⊃⍵}⍣(0<≢refs)⊣refs
:If 0<≢refs
PrintToSession'  Establish references to dependencies...'
:For ref :In refs
ref←CheckWsPaths ref
:If 0<≢deps←ref.TatinVars.DEPENDENCIES
deps←ReplaceRegistryAlias¨deps
destinations←GetPackageIDFrom¨deps
destinations←2⊃¨SplitAtAlias¨destinations
destinations←(⊂root,'.'),¨Reg.EnforceAPL_Name¨destinations
destinations←CheckWsPaths¨destinations
cfgs←Reg.JSON¨destinations⍎¨⊂'TatinVars.CONFIG'
:For cfg destination dep :InEach cfgs destinations deps
depName←{⍵↑⍨¯1+⍵⍳'-'}{⍵↓⍨⍵⍳'-'}GetPackageIDFrom dep
aliasOrName←depName{'@'∊⍵:⍵↑⍨¯1+⍵⍳'@' ⋄ ⍺}dep
:If 0=≢cfg.api
:If 1=≢list←(' '~¨⍨↓⍎destination,'.⎕NL 9')~⊂'TatinVars'
:AndIf aliasOrName≡1⊃list
aliasOrName ref.{⍎'⎕THIS.',⍺,'←',⍵}destination,'.',1⊃list
:Else
aliasOrName ref.{⍎'⎕THIS.',⍺,'←',⍵}destination
:EndIf
:Else
aliasOrName ref.{⍎'⎕THIS.',⍺,'←',⍵}destination,'.',cfg.api
:EndIf
:EndFor
:EndIf
:EndFor
:EndIf
⍝Done
{r}←LinkTargetToPackage(cfg source target alias);ref;name
⍝ Establishes a reference in the target space pointing to the loaded package.\\
⍝ Returns the fully qualified names of what was established in the target space.
r←⍬
ref←⍎source
:If 0=≢alias
name←cfg.name
:Else
name←alias
:EndIf
:If 0<≢cfg.api
('Not found in ',source,': ',cfg.api)Assert 0<⍎source,'.⎕NC ''',cfg.api,''''
('Is neither class nor namespace: ',cfg.api)Assert 9=⍎source,'.⎕NC ''',cfg.api,''''
target⍎name,'←',source,'.',cfg.api
:Else
target⍎name,'←',source
:EndIf
r,←target,'.',name
⍝Done
r←{fullPath}ListCache y;path;list;list_;domains;domains_;packages;principalOnly;bool;url
⍝ Lists the contents of the Tatin package cache.
⍝ ⍵ must be one of:
⍝ * A character vector with a Registry domain name or empty
⍝ * A nested vector of length 2: first item see above, second must be a Boolean that defaults to 0.
⍝ This is interpreted as `url` and `principalFlag`.
⍝ If url is empty all packages for all urls are listed.
⍝ The result is a vector with as many items as there are domains represented in the cache with at least one package.
⍝ Each item is a two-element vector:
⍝  * The first item holds the url of the domain
⍝  * The second item holds a vector of char vectors with the package names
⍝ In case the cache is empty an empty vector is returned.
⍝ If a url is specified but does not exist in the cache, ditto.\\
⍝ If `principalOnly` is 0 (the default) all packages are listed. If it's 1 only principal
⍝ packages are listed: these have a build list saved and therefore can be loaded offline.
⍝ `fullPath` defaults to 0, meaning that just domain names and packages names are returned.
⍝ Specify a 1 as ⍺ and you get full path names instead.
⍝ ---
⍝ You might want to change the result in a readable format; for that execute:
⍝ ⎕←⍪{⍪('*** ',1⊃⍵)(⍪2⊃⍵)}¨ListCache ⍬
r←''
fullPath←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'fullPath'
:If 1=≡,y
url←y
principalOnly←0
:Else
(url principalOnly)←y
:EndIf
url←ReplaceRegistryAlias url
url←RemoveHttpProtocol url
path←GetPathToPackageCache
:If 0=≢url
:If 0<≢domains←{⍵/⍨(⊂'temp')≢¨2⊃¨⎕NPARTS¨⍵}F.ListDirs path,'/*'
domains_←{{⊃,/1↓⎕NPARTS ⍵}⍣(~fullPath)⊣⍵}¨domains
domains_←{':'@(⍸'∆'=⍵)⊣⍵}¨domains_  ⍝ Restore port number
packages←F.ListDirs¨domains
packages←{GetPackageIDFrom¨¨⍵}⍣(~fullPath)⊣packages
r←(⊂¨domains_),¨⊂¨packages
:If principalOnly
bool←⎕NEXISTS¨path∘{(⊂⍺,'/'),¨(⊂(1⊃⍵),'/'),¨(2⊃⍵),¨⊂'/apl-buildlist.json'}¨r
(2⊃¨r)←bool/¨2⊃¨r
:EndIf
r←(0<≢¨2⊃¨r)/r                      ⍝ Drop domains without packages
:If 0=≢r
r←''
:EndIf
:EndIf
:Else
((':'=url)/url)←'∆' ⍝ Port numbers!
:If F.IsDir path,'/',url
packages←F.ListDirs path,'/',url
domains_←path{⍺,'/',⍵}⍣fullPath⊣url
:If 0<≢packages
r←,⊂(domains_)({{⊃,/1↓⎕NPARTS ⍵}⍣(~fullPath)⊣⍵}¨packages)
:EndIf
:EndIf
:EndIf
⍝Done
list←{all}ListDeprecated uri;client;request;res;uri_;parms;registries;host;packageID;list
⍝ `uri` must a path to a Registry.
⍝ `r` is a matrix with one column: all deprecated packages on the given Registry (major version number only).\\
⍝ By specifying the optional `all` flag one can get a matrix with all versions of deprecated packages.\\
all←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'all'
uri_←ReplaceRegistryAlias uri
'No (valid) Registry specified?!'Assert 0<≢uri_
'⍵ is not an HTTP request'Assert Reg.IsHTTP uri_
(host packageID)←Reg.SeparateUriAndPackageID uri_
'Not a valid URI'Assert('/'+.=host)∊2 3
request←R.NewRequest 0
request.RequestTarget←Reg.VersionOf_REST,'/deprecated-pkgs',all/'?all'
request.Headers,←⊂'Accept' 'application/json'
res←SendAndReceive host request
:If 404≡res.StatusCode
list←''
:ElseIf 200≠res.StatusCode
:If 0<≢res.Content
('Server: ',res.Content)Assert 0
:Else
('Failed with status code ',⍕res.StatusCode)Assert 0
:EndIf
:Else
:Trap 11
list←⍪Reg.APLfromJSON res.Content
:Else
'Server failed to return (valid) JSON5'Assert 0
:EndTrap
:EndIf
⍝Done
r←{verbose}ListLicenses url;url_;request;res
⍝ Returns a list with all licenses tolerated by a managed Tatin Registry.
⍝ If `full` is a 1 a matrix rather than a list is returned:!
⍝ [;1] Name of a license
⍝ [;2] URL of a license
url_←ReplaceRegistryAlias url
'No (valid) Registry specified?!'Assert 0<≢url_
'"url" is not an HTTP request'Assert IsHTTP url_
verbose←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'verbose'
request←R.NewRequest 0
request.RequestTarget←Reg.VersionOf_REST,'/get-licenses'
request.RequestTarget,←'?verbose=',⍕verbose
request.Headers,←⊂'Accept' 'application/json'
res←SendAndReceive url_ request
:If 200≠res.StatusCode
:If 0<≢res.Content
('Server: ',res.Content)Assert 0
:Else
('Failed with status code ',⍕res.StatusCode)Assert 0
:EndIf
:Else
:Trap 11
r←Reg.APLfromJSON res.Content
:If 2=⍴⍴r
r←⍉↑r[;2]
:EndIf
:Else
'Server failed to return (valid) JSON5'Assert 0
:EndTrap
:EndIf
⍝Done
mat←{parms}ListPackages uri;client;request;res;uri_;parms;registries;registry;buff
⍝ `uri` must be one of:
⍝  * A path to a Registry and optionally a (possibly incomplete) package ID
⍝  * A path to an install folder (must host a file apl-buildlist.json)
⍝ For the latter all installed packages are listed together with a Boolean that marks principal packages with a 1.
⍝ By default all packages saved in that Registry are returned, aggregated by major versions, as a two-column matrix.\\
⍝ `r` is a matrix with two columns.\\
⍝ `[;2]` carries the number of major versions.\\
⍝ In case "[*]" instead of a certain registry `r` has three columns: the first column caries the registry name
⍝ Optionally `parms` can be specified. This must be a namespace that must contain the variables `group`, `tags`, `aggregate`, `userCommand`.\\
⍝ * `group` may specify the group
⍝ * `tags` may specify one or more tags (simple comma-separated text vector)
⍝ * `aggregate` is a Boolean that defaults to 1.
⍝ * `userCommand` is a Boolean that defaults to 0.\\
⍝ These options are available:\\
⍝ * `uri` is empty and `aggregate` is 0\\
⍝   All packages are returned; the second column carries `⍬`\\
⍝ * `uri` is empty and `aggregate` is 1 (the default):\\
⍝   All packages are returned with the number of major versions in `[;2]`\\
⍝ * `uri` specifies {group}-{name} and `aggregate` is 0\\
⍝   All versions of that package are returned\\
⍝ * `uri` specifies {group}-{name} and `aggregate` is 1\\
⍝   All major versions of that package are returned\\
⍝   `[;2]` caries the number of versions of each major version\\
⍝ * `uri` specifies {group}-{name}-{major}; in this case `aggregate` is ignored\\
⍝   All versions (minor and patch) of that package are returned\\
⍝ * `uri` specifies {group}-{name}-{major}-{minor}; in this case `aggregate` is ignored\\
⍝   All patch versions of that package are returned\\
parms←{0<⎕NC ⍵:⍎⍵ ⋄ ⎕NS''}'parms'
parms←Reg.CheckParmsForListPackages parms
:If '[*]'{⍺≡(≢⍺)↑⍵}uri
registries←ListRegistries''
registries←({(⍵⍳⍵)=⍳≢⍵}registries[;2])⌿registries
registries←(IsHTTP¨registries[;2])⌿registries
mat←(0,1++/parms.(date project_url aggregate))⍴''
:For registry :In registries[;1]
:If 0<≢buff←parms ListPackages'[',registry,']',{⍵↓⍨⍵⍳']'}uri
mat⍪←(2⊃⍴mat)↑('[',registry,']')' ' ' '
mat⍪←(2⊃⍴mat)↑[2]' ',¨buff
:EndIf
:EndFor
:Else
uri_←ReplaceRegistryAlias uri
'No (valid) Registry specified?!'Assert 0<≢uri_
:If Reg.IsHTTP uri_
mat←parms ListPackages_ uri
:ElseIf IsInstallFolder uri_
mat←ListPackagesInInstallFolder uri_
:Else
mat←Reg.ListPackages uri_ parms
:EndIf
:EndIf
⍝Done
r←ListPackagesInInstallFolder path;json;buff;list
⍝ Takes a path to a folder that must host a file "apl-buildlist.json" - that makes it an install folder.
⍝ Does not necessarly list only what's in the build list, it lists all installed packages.
⍝ Returns a matrix with zero or more rows and two columns:
⍝  * Full package name
⍝  * Boolean; 1 for principal packages
r←0 2⍴''
path←Reg.AddSlash path
:If 0<≢buff←⊃F.NGET path,'/apl-buildlist.json'
json←Reg.APLfromJSON buff
:AndIf 0<≢list←(≢path)↓¨⊃F.Dir path
list←list[⍋⎕C list]      ⍝ Not guaranteed to be ordered on non-Windows systems
:AndIf 0<≢list←(Reg.IsValidPackageID_Complete¨list)/list
r←list,[1.5]RemoveAlias¨list∊json.(principal/packageID)
r←r[⍒r[;2];]
:EndIf
⍝Done
list←{parms}ListPackages_ uri;client;request;res;host;packageID;uri_
⍝ Returns a matrix with two columns.
⍝ Empty in case of a 404 returned by the server
uri_←ReplaceRegistryAlias uri
:If 0=⎕NC'parms'
parms←⎕NS''
parms.(group tags)←⊂''
parms.aggregate←1
parms.date←0
parms.latest←0
parms.project_url←0
parms.since←0
parms.os_win←1
parms.os_mac←1
parms.os_lin←1
parms.dependencies←0
:EndIf
:If 0=parms.⎕NC'latest'
parms.latest←0
:EndIf
:If parms.latest
parms.dependencies←0
parms.aggregate←1
:EndIf
:If parms.dependencies
parms.aggregate←0
:EndIf
(host packageID)←Reg.SeparateUriAndPackageID uri_
'Not a valid URI'Assert('/'+.=host)∊2 3
packageID←{0=≢⍵:'*' ⋄ ⍵}packageID
request←R.NewRequest 0
request.RequestTarget←Reg.VersionOf_REST,'/packages/',{⍵↓⍨'/'=1⍴⍵}packageID
request.RequestTarget,←'?'
:If 0<≢⊃,/parms.group
request.RequestTarget,←'group=',parms.group,'&'
:EndIf
:If 0<≢⊃,/parms.tags
request.RequestTarget,←'tags=',parms.tags,'&'
:EndIf
:If parms.os_win
request.RequestTarget,←'os_win=1&'
:EndIf
:If parms.os_mac
request.RequestTarget,←'os_mac=1&'
:EndIf
:If parms.os_lin
request.RequestTarget,←'os_lin=1&'
:EndIf
:If parms.latest
request.RequestTarget,←'latest=1&'
:EndIf
:If 0<parms.⎕NC'userCommand'
:AndIf parms.userCommand
request.RequestTarget,←'userCommand=1&'
:EndIf
:If parms.date
request.RequestTarget,←'date=1&'
:Else
request.RequestTarget,←'aggregate=',(⍕parms.aggregate),'&'
:EndIf
:If parms.dependencies
request.RequestTarget,←'dependencies=1&'
:EndIf
:If parms.project_url
request.RequestTarget,←'project_url=1&'
:EndIf
:If 0<≢parms.since
:AndIf 0≢parms.since
request.RequestTarget,←'since=',(⍕parms.since),'&'
:EndIf
request.RequestTarget←(-'&'=¯1↑request.RequestTarget)↓request.RequestTarget
request.Headers,←⊂'Accept' 'application/json'
res←SendAndReceive host request
:If 404≡res.StatusCode
list←0 2⍴''⍬
:ElseIf 200≠res.StatusCode
:If 0<≢res.Content
('Server: ',res.Content)Assert 0
:Else
('Failed with status code ',⍕res.StatusCode)Assert 0
:EndIf
:Else
:Trap 11
list←Reg.APLfromJSON res.Content
:Else
'Server failed to return (valid) JSON5'Assert 0
:EndTrap
:EndIf
⍝Done
r←{appendPort}ListRegistries type;data;RI
⍝ List all registries defined in the Client's config file.\\
⍝ Returns a matrix with these columns:
⍝ * [;1] Alias
⍝ * [;2] URL
⍝ * [;3] ID
⍝ * [;4] Port
⍝ * [;5] Priority
⍝ * [;6] NoCaching
⍝ * [;7] Proxy
⍝ * [;8] API-key (optionally)\\
⍝ "type" must be either 0 or 1 or empty:\\
⍝ * 1 means all data is listed
⍝ * Everything else means the API key is not listed\\
⍝ If ⍺ is 1 (default is 0) then the second column carries the uri plus the port
⍝ in case the  port is neither 80 nor 443 nor 0.
appendPort←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'appendPort'
RI←RegistryIndices
r←(0,((-1≢type)+≢RI.AllIndices))⍴''
'"type" (⍵) must be a Boolean or empty'Assert(⊂type)∊0 1 ''⍬
:If 0<≢data←MyUserSettings.registries
r←(-1≢type)↓⍤1↑data.(alias uri id port priority noCaching proxy api_key)
r←r[⍒r[;RI.priority];]
:EndIf
:If appendPort∧0<≢r
r[;RI.url]←BindProtocolWithPort¨↓r[;RI.(url port)]
:EndIf
list←{parms}ListTags y;client;request;res;uri;parms
⍝ `y` might be the path to a Registry or a Registry alias (embraced by []).\\
⍝ By default all tags of all packages are returned as a two-column matrix with
⍝ the tag in [;1] and the number of occurances in [;2].\\
⍝ Optionally `⍺` can be specified. Must be a namespace that might contain `tags` and/or `os_lin`/`os_mac`/`os_win`.
⍝  * `tags` may specify one or more tags (simple comma-separated text vector).
⍝     If that is the case only the tags are returned shared by the packages that carry the specified tag(s)
⍝  * `os_lin`, `osos_mac`, `os_win`: each must be a Boolean when specified.
:If 0=⎕NC'parms'
parms←⎕NS''
parms.tags←''
parms.(os_lin os_mac os_win)←1
:Else
:If 0=parms.⎕NC'tags'
parms.tags←''
:EndIf
:If ∨/0<parms.⎕NC↑'os_lin' 'os_mac' 'os_win'
:If 0=parms.⎕NC'os_lin'
parms.os_lin←0
:EndIf
:If 0=parms.⎕NC'os_mac'
parms.os_mac←0
:EndIf
:If 0=parms.⎕NC'os_win'
parms.os_win←0
:EndIf
:Else
parms.(os_lin os_mac os_win)←1
:EndIf
:EndIf
'Invalid left argument: only "tags", "os_lin", "os_mac" and "os_win" are permitted'Assert∧/(' '~¨⍨↓parms.⎕NL 2)∊'tags' 'os_lin' 'os_mac' 'os_win'
parms.tags←⎕C parms.tags
uri←ReplaceRegistryAlias y
'No (valid) Registry specified?!'Assert 0<≢uri
:If Reg.IsHTTP uri
list←parms ListTags_ uri
:Else
list←Reg.ListTags uri parms
:EndIf
⍝Done
list←{parms}ListTags_ uri;request;res;host;packageID
:If 0=⎕NC'parms'
parms←⎕NS''
parms.tags←''
parms.(os_lin os_mac os_win)←1
:EndIf
(host packageID)←Reg.SeparateUriAndPackageID uri
request←R.NewRequest 0
request.RequestTarget←'/v1/tags/',{⍵↓⍨'/'=1⍴⍵}packageID
:If 0<≢parms.tags
:AndIf 0<≢⊃,/parms.tags
request.RequestTarget,←'?'
request.RequestTarget,←'tags=',parms.tags
:EndIf
:If 0∊parms.(os_lin os_mac os_win)
request.RequestTarget,←(1+'?'∊request.RequestTarget)⊃'?&'
request.RequestTarget,←'os=',⊃{⍺,',',⍵}/(⊂'')~⍨parms.(os_lin os_mac os_win)/¨'lin' 'mac' 'win'
:EndIf
request.Headers,←⊂'Accept' 'application/json'
res←SendAndReceive host request
:If 200≠res.StatusCode
:If 0<≢res.Content
('Server: ',res.Content)Assert 0
:Else
('Failed with status code ',⍕res.StatusCode)Assert 0
:EndIf
:EndIf
list←Reg.APLfromJSON res.Content
⍝Done
mat←{dateFlag}ListVersions url;client;request;res;url_;registries;registry;buff;flag;port;packageID;RI
⍝ Lists all versions of a package.
⍝ `url` is one of:
⍝  * An (optional) registry followed by "group" and "name" of a package
⍝  * A path to a Registry and "group" and "name" of a package
⍝  * [*] followed by either a name or group-name
⍝  1. In the first case all defined Registries with a priority greater than zero are scanned.
⍝  2. In the second case the specified Registry is scanned. A matrix with one column with full package IDs is returned.
⍝  3. In the third case all versions of the given package on all registries with a priority greater
⍝     then 0 will be listed.\\
⍝ You may omit the group name; that would not make a difference when the name is used only within one group,
⍝ but if it is used in more than one group, then all of them are listed.
⍝ The package ID must not specify a version number.\\
⍝ Returns a matrix with two columns (URL and full package ID) in case no specific domain/path was specified.\\
⍝ If a specific domain/path was specified only one column is returned with the full package ID.
⍝ By default the publishing date is not included, but you my change this by passing a 1 as ⍺.
⍝ In that case an additional column is added to the result.
dateFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'dateFlag'
RI←RegistryIndices
:If flag←'[*]'≡3⍴url           ⍝ Special syntax!
:OrIf (~IsHTTP url)∧('['≠1⍴url)∧({1≥+/⍵∊'/\'}url)∧(~':'∊url)∧('.'≠1⍴url)
packageID←(flag×3)↓url
mat←(0,(2+dateFlag))⍴⍬
registries←ListRegistries 0
:If 0<≢registries←(0<registries[;RI.priority])⌿registries ⍝ Ignore those with a priority of 0
:AndIf 0<≢registries←({(⍳≢⍵)=⍵⍳⍵}registries[;RI.url])⌿registries
:For registry port :In ↓registries[;RI.(url port)]
:If IsHTTP registry
url_←registry CompileUrlPlusPort port
:Else
url_←registry
:EndIf
:If 0<≢buff←dateFlag ListVersions url_,packageID
mat⍪←(⊂registry),buff
:EndIf
:EndFor
:EndIf
:Else
url_←ReplaceRegistryAlias url
:If ∧/'[]'∊url
'No valid alias provided'Assert 0<≢url_
:Else
'No valid URI provided'Assert 0<≢url_
:EndIf
'Invalid package ID'Assert 0 1 2∊⍨('\/'A.Last url_)+.='-'     ⍝ Must be either "name" or "group-name" or "group-name-major" or "name-major"
:If Reg.IsHTTP url_
mat←⍪dateFlag ListVersions_ url_
:Else
mat←⍪dateFlag Reg.ListVersions url_
:EndIf
:EndIf
list←{dateFlag}ListVersions_ url;request;res;host;packageID
dateFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'dateFlag'
(host packageID)←Reg.SeparateUriAndPackageID url
packageID←{0=≢⍵:'*' ⋄ ⍵}packageID
request←R.NewRequest 0
request.RequestTarget←Reg.VersionOf_REST,'/packages/versions/',packageID
:If dateFlag
request.RequestTarget,←'?publishingdate=1'
:EndIf
request.Headers,←⊂'Accept' 'application/json'
res←SendAndReceive host request
:If 200=res.StatusCode
list←⎕JSON⍠('Dialect' 'JSON5')⊣res.Content
list←↑⍣dateFlag⊣list
:ElseIf 404=res.StatusCode
list←''
:Else
:If 0<≢res.Content
('Server: ',res.Content)Assert 0
:Else
('Failed with status code ',⍕res.StatusCode)Assert 0
:EndIf
:EndIf
⍝Done
tree←{level}LoadBuildList path;filename;ns
⍝ Reads the build list from file
⍝ Default for `level` is 0 (all)
⍝ * If level is 1 then only entries with the level 1 are returned (principal packages)
⍝ * If level is 0 then all packages are returned
⍝ * If level is 2 then only dependencies are returned
level←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'level'
'Invalid left argument'Assert level∊0 1 2
filename←path,'/',Reg.BuildListFilename
:If F.IsFile filename
ns←Reg.GetJsonFromFile filename
tree←⍉↑ns.{⍎¨⍵}'principal' 'packageID' 'url'
:If level=1
tree←tree[;1]⌿tree
:ElseIf level=2
tree←(~tree[;1])⌿tree
:EndIf
:Else
tree←0 3⍴⍬
:EndIf
⍝Done
{r}←{flags}LoadDependencies y;path;tree;dep2;saveIn;cfg;msg;packageID;saveIn2;ref;url;principalFlag;refs;alias;installFolder;targetSpace;packageID2;qdmx;isUC;makeHomeRelative;overwrite
⍝ Requires at least one argument but accepts up to two:
⍝ * Folder with a build list (mandatory)
⍝ * Name of the target namespace\\
⍝ If no target namespace was specified then by default packages are loaded into `#` except when the folder
⍝ is `[MyUCMDs]` in which case they are loaded into `⎕SE.
⍝ Via the optional left argument you may specify 0, 1 or 2 flags which default to 0:
⍝ * `overwrite` (1) enforces a load even if the package already exists in (#|⎕SE)._tatin
⍝ * `makeHomeRelative` (2) enforces the HOME path of the package to be relative: only the package folder
⍝   and the parent of that folder survice.
⍝ Specify a 3 as `⍺` in order to switch both flags on.\\
⍝ Loads all packages and injects required references into `targetSpace`.\\
⍝ Returns a vector with references to the loaded packages (no dependencies: principal packages only).
:If 0=⎕NC'flags'
overwrite←makeHomeRelative←0
:Else
(overwrite makeHomeRelative)←2↑Reg.IntToBits flags
:EndIf
'Length error on right argument'Assert(≢y)∊1 2
(installFolder targetSpace)←2↑(⊆y),⊆''
:If isUC←'[myucmds]'{⍺≡⎕C(≢⍺)↑⍵}installFolder
installFolder←GetMyUCMDsFolder(≢'[myucmds]')↓installFolder
:EndIf
('Folder does not exist: ',⍕installFolder)Assert ⎕NEXISTS installFolder
:If 0=≢targetSpace
targetSpace←(1+isUC)⊃'#' '⎕SE'
:EndIf
r←refs←⍬
targetSpace←⍕targetSpace
:If 0=⎕NC targetSpace
targetSpace Reg.CreateNamespace ⎕THIS
:EndIf
:If 0=≢F.ListFiles installFolder
:Return
:EndIf
CheckBuildList installFolder
:If 0<≢tree←LoadBuildList installFolder
:For principalFlag packageID url :In ↓tree
(alias packageID)←{~'@'∊⍵:''⍵ ⋄ '@'(≠⊆⊢)⍵}packageID
path←installFolder,'/',packageID
('Cannot find package "',path,'"')Assert F.Exists path
saveIn←GetTatinRootSpace 3⍴targetSpace
cfg←ReadPackageConfigFile path
packageID2←1 GetPackageIDFrom path
saveIn,←'.',packageID2
:If 0=⎕NC saveIn                       ⍝ If it already exists we don't do anything...
:OrIf overwrite                        ⍝ ... unless we are are explicitly asked to
:If overwrite
{(⍎⍺).⎕EX ⍵}/¯1 0↓¨'.'A.SplitPath saveIn
:EndIf
EstablishSystemVars saveIn cfg
Reg.ImportWithQuadFIX(path,'/',cfg.source)(saveIn)
ref←⍎saveIn
:Else
ref←⍎saveIn
:EndIf
makeHomeRelative EstablishStuffInTatinVars ref cfg path
refs,←ref
:If 1=principalFlag
r,←ref
:EndIf
:If 1=principalFlag
:Trap ((⊂,##.Client.DEBUG)∊,¨'on' 1)↓Reg.ErrorNo
LinkTargetToPackage cfg saveIn targetSpace alias
:Else
qdmx←⎕DMX
⎕DL 0.01
qdmx.EM ⎕SIGNAL qdmx.EN
:EndTrap
:EndIf
:EndFor
LinkDependencies refs
ExecutePackageLX installFolder targetSpace tree
:EndIf
⍝Done
r←{noBetas}LoadPackages(identifiers targetSpace);paths;tempFolder;loaded;qdmx;list
⍝ Loads package `identifier` dynamically into the workspace,\\
⍝ `identifiers` must be a simple char vector identifying one or more packages.
⍝ Multiple packages (items) must be separated by commas.
⍝ Every item in `identifiers` must be one of:
⍝ * An HTTP request for a package
⍝ * A ZIP file holding a package
⍝ * A folder holding a package (like file://C:/Temp/group-name-version)
⍝ * A path to a package in a registry (like [RegistryAlias]{packageID} or C:\MyReg\{packageID}')
⍝ * A package ID; Tatin will then attempt to find that package in one of the Registries defined in the
⍝   Client's config file.
⍝   The first hit wins.\\
⍝ `targetSpace` must be a reference or a fully qualified name of an ordinary namespace, meaning the name must
⍝ start with either `#.` or `⎕SE.`.\\
⍝ `targetSpace` might already exist, but if it doesn't it will be created. If it exists but is not an ordinary
⍝ namespace an error is thrown.\\
⍝ Loads package(s) into `(#|⎕SE)._tatin.{packageName}` and establishes a reference pointing to it in `targetSpace`\\
⍝ Loads all dependencies, if any, as well into (#|⎕SE)._tatin but _not_ into `targetSpace`.\\
⍝ Leaves no trails in the file system unless a) caching is on (because then any package will be cached) or
⍝ b) a package (or one of its dependencies) relies on file assets in which case the temporary directory (which is
⍝ created in any case) will not be deleted.\\
⍝ By default beta versions are considered in case the package ID is incomplete; suppress them by passing 1 as ⍺.\\
⍝ Returns the total number of packages loaded, including dependencies.
r←0
noBetas←{0<⎕NC ⍵:⍎⍵ ⋄ Reg.GetNoBetasDefault}'noBetas'
targetSpace←,⍕targetSpace
'Target namespace must be fully qualified'Assert(⊂{1 ⎕C ⍵↑⍨¯1+⍵⍳'.'}targetSpace)∊,¨'#' '⎕SE'
:If ~(⊂1 ⎕C targetSpace)∊,¨'#' '⎕SE'
'Not a valid namespace name'Assert(⎕NC targetSpace)∊0 9
:EndIf
tempFolder←F.GetTempSubDir''
identifiers←','(≠⊆⊢)identifiers
:Trap ((⊂,##.Client.DEBUG)∊,¨'on' 1)↓Reg.ErrorNo
targetSpace∘{CheckAlias ⍵ ⍺}¨identifiers
:Else
qdmx←⎕DMX
⎕DL 0.01
F.RmDir tempFolder
(⊃{0=≢⍺:⍵ ⋄ ⍺}/qdmx.(Message EM))⎕SIGNAL{⍺=0:⍵ ⋄ ⍺}/qdmx.(ENX EN)
:EndTrap
:Trap ((⊂,##.Client.DEBUG)∊,¨'on' 1)↓Reg.ErrorNo
paths←noBetas InstallPackages(⊃{⍺,',',⍵}/identifiers)tempFolder
:Else
qdmx←⎕DMX
⎕DL 0.01
F.RmDir tempFolder
CloseConnections 1
(⊃{0=≢⍺:⍵ ⋄ ⍺}/qdmx.(Message EM))⎕SIGNAL{⍺=0:⍵ ⋄ ⍺}/qdmx.(ENX EN)
:EndTrap
:If 0=≢paths
F.RmDir tempFolder                                             ⍝ Nothing was loaded, so we can get rid of it
:Else
:Trap ((⊂,##.Client.DEBUG)∊,¨'on' 1)↓Reg.ErrorNo
r←≢loaded←LoadDependencies tempFolder targetSpace
:Else
qdmx←⎕DMX
⎕DL 0.01
F.RmDir tempFolder
CloseConnections 1
(⊃{0=≢⍺:⍵ ⋄ ⍺}/qdmx.(Message EM))⎕SIGNAL{⍺=0:⍵ ⋄ ⍺}/qdmx.(ENX EN)
:EndTrap
⎕DL 0.01
list←F.ListDirs tempFolder
:If 0=≢list                                                ⍝ Anything? At all?!
F.RmDir tempFolder                                     ⍝ No assets, so we can get rid of it
:Else
:If 0=+/≢¨{6::'' ⋄ (Reg.JSON⊃F.NGET ⍵,'/',CFG_Name).assets}¨list ⍝ If there are no assets...
F.RmDir tempFolder                                 ⍝ ... then we delete the temp folder...
:If 0<≢loaded
loaded.TatinVars.⎕FX¨⊂⊂'r←HOME' 'r←⍬'          ⍝ ... and undefine "HOME".
:EndIf
:ElseIf 0=+/≢¨loaded.TatinVars.HOME
F.RmDir tempFolder                                 ⍝ No assets, so we can get rid of it
:EndIf
:EndIf
:EndIf
⍝Done
r←Maintenance(path dry functions);folders;list;ref;fns;body
⍝ * path: Folder to be investigated
⍝ * dry:  Boolean that decides whether real actions needs to be taken (0) or not (1)
⍝ * home: Folder that holds the maintenance files (if any)
⍝ Returns vector of simple char vectors (protocol).
ref←⎕NS''
ref FixMaintenanceFunctions functions
fns←↓ref.⎕NL 3
body←⊂'pkgConfig←∆Exec pkgConfig'
body,←'pkgConfig←'∘,¨fns,¨⊂' pkgConfig'
ref.⎕FX body
r←(ref.∆Exec Maintenance_)path dry
⍝Done
r←(fn Maintenance_)(path dry);folders;filename;data;json;data2;pkgName;zipFilename;zip;tempFolder;zipData
r←''
:If '.git'≢2⊃⎕NPARTS path,'/'
filename←path,'/apl-package.json'
:If ⎕NEXISTS filename
data←⎕JSON⍠('Dialect' 'JSON5')⊢⊃F.NGET filename
data2←⎕NS data
data2←fn data2
json←Reg.JSON data2
:If ≢/Reg.JSON¨data2 data
:If dry
r,←'Would be changed: ',filename,CR
:Else
(⊂json)F.NPUT filename 1
r,←'Changed: ',filename,CR
:EndIf
:EndIf
pkgName←data2.(group,'-',name,'-',{⍵↑⍨¯1+⍵⍳'+'}version)
zipFilename←path,'/',pkgName,'.zip'
:If ⎕NEXISTS zipFilename
zip←⎕NEW ##.ZipArchive(,⊂zipFilename)
:If (⊂'apl-package.json')∊zip.List
tempFolder←F.GetTempSubDir''
Assert'apl-package.json'zip.ExtractTo tempFolder
zipData←Reg.JSON⊃F.NGET tempFolder,'/apl-package.json'
:If json≢Reg.JSON zipData
:If dry
r,←'Would be changed: ',zipFilename,CR
:Else
zip.Delete'apl-package.json'
path zip.Add'apl-package.json'
r,←'Changed: ',zipFilename,CR
:EndIf
:EndIf
{}F.RmDirByForce tempFolder
:EndIf
zip.Dispose
:EndIf
:EndIf
:EndIf
:If 0<≢folders←(F.ListDirs path,'/')~⊂'.git'
r,←∊fn{(⍺⍺ Maintenance_)⍵}¨(⊂¨folders),¨dry
:EndIf
⍝Done
{path2package}←MovePackageToCache(path2package url packageID);targetFolder;url_;targetFolder2
⍝ Move the package installed into path2package to the Tatin package cache.
⍝ Returns `path2package` which will point to the right place in the cache for the given package.
⍝ This function does not check anything regarding caching.
targetFolder←GetPathToPackageCache
:If '.zip'≢⎕C ¯4↑url
url_←CompileNameFromUrl url
targetFolder2←targetFolder,'/',url_,'/',packageID
:If ~F.IsDir targetFolder2
2 ⎕MKDIR targetFolder2
targetFolder2(⎕NMOVE⍠('Wildcard' 1)('RenameOnly' 1)Reg.F.ExecNfunction)path2package,'/*'
F.RmDir path2package
path2package←targetFolder2
:EndIf
:EndIf
license←NegotiateLicense ns;list;ind
⍝ If "license" is not empty at this stage it's the default according to the user settings.
⍝ In that case the user is asked for confirmation
⍝ plus the option to define the license manually.
license←ns.license
license←ns.license({1}C.AskForText)'pkg-license-ask@Enter name of the license (enter "?" for a list of options)'
:If (,'?')≡license
list←ListLicenses'[tatin]'
list,←⊂'<Ask for a license name>'
ind←'pkg-license-select@Select license'C.Select list
'Cancelled by user (no license defined)'Assert 0<≢ind
:If ind=≢list
license←({1}C.AskForText)'pkg-license-ask@Enter name of the license'
:Else
license←ind⊃list
:EndIf
:EndIf
⍝Done
userCommandScript←NegotiateUserCommandScript ns;list;ind
userCommandScript←''
:If 0 C.YesOrNo'Does the package come with a user command script?'
∆Again:
userCommandScript←({1}C.AskForText)'Enter the name of the user command script (including file extension) in "source"'
:If 0=≢userCommandScript
:AndIf 0=C.YesOrNo'You''ve entered no user command script - is that really okay?'
→∆Again
:EndIf
:EndIf
c←NewClient uri;reg;puri
⍝ Create a Rumba client tailored for Tatin
c←R.NewClient 0
:Trap 997
reg←MyUserSettings.GetRegistry uri
:Else
reg←⍬  ⍝ We allow accessing a server that's not defined in MyUserSettings
:EndTrap
:If ⍬≡reg
puri←R.ParseURI uri
c.Host←puri.Host
c.Secure←puri.Scheme≡'https'
:If 0=c.Port←⊃A.ToNum puri.Port
c.Port←80 443[c.Secure+⎕IO]
:EndIf
:Else
puri←R.ParseURI reg.uri
c.Secure←puri.Scheme≡'https'
c.Host←puri.Host
:If 0=c.Port←reg.port
:AndIf 0=c.Port←⊃A.ToNum puri.Port
c.Port←80 443[c.Secure+⎕IO]
:EndIf
:If ~0∊⍴reg.proxy
puri←R.ParseURI reg.proxy
c.ProxySecure←puri.Scheme≡'https'
c.ProxyHost←puri.Host
:If 0=c.ProxyPort←⊃A.ToNum puri.Port
c.ProxyPort←80 443[c.Secure+⎕IO]
:EndIf
:EndIf
:EndIf
⍝Done
r←{x}(fn NoPrintToSession)y;∆PrintToSession
⍝ Executes `fn` with (localyzed) ∆PrintToSession←0 in order to prevent output to ⎕SE.
∆PrintToSession←0
:If 0=⎕NC'x'
r←fn y
:Else
r←x fn y
:EndIf
PackIfFolder←{
⍝ If `⍵` is a file `⍵` is returned: it's probably a ZIP file that was typically created by `BuildPackage`.\\
⍝ If it's a folder it's packed into a temporay folder, and the name of that zipfile is returned.
⍺←''
dependencies←⍺
path←⍵
F.IsFile path:path         ⍝ Exit if it's not a folder: then it must be a ZIP file already
parms←CreateBuildParms path
parms.dependencyFolder←dependencies
CheckWouldBePackage parms.projectPath:
parms.targetPath←F.GetTempPath
BuildPackage parms
}
bool←{timeout}Ping url_;client;request;url_;buff;qdmx;b;last
⍝ Establish whether the host is up and running (with very little overhead) in case it is an http[s] request
bool←0
timeout←{0<⎕NC ⍵:⍎⍵ ⋄ 4}'timeout'
:If ∧/'[]'∊url_
url_←ReplaceRegistryAlias url_
:Else
url_←url_
:EndIf
:If 0<≢url_
:If 0=≢'^http[s]://'⎕S 0⊣⎕C url_
bool←F.IsDir url_
:Else
request←R.NewRequest 0
request.RequestTarget←'/ping'
:If 0=⎕NC'∆PermanentConnections'
:OrIf 9≠∆PermanentConnections.⎕NC 1 CompileNameFromUrl url_
client←NewClient url_
client.ClientTimeout←timeout
:Trap 345
buff←client R.SendAndReceive request
bool←1
:Else
⍝ Just for debugging
:EndTrap
:Else
client←∆PermanentConnections.⍎1 CompileNameFromUrl url_
:Trap 345
{}client R.Send request                ⍝ Pipeline requests
buff←client R.Receive request          ⍝ Wait for all
bool←1
:Else
⍝ Just for debugging
:EndTrap
:EndIf
:EndIf
:EndIf
⍝Done
PolishAssetsPaths←{
asset←⍵
0=≢asset:asset
pkgPath←F.EnforceSlash ⍺
pkgPath{⍵↓⍨(≢⍺)×⍺≡(≢⍺)↑⍵}F.EnforceSlash asset
}
{r}←{flag}PrintToSession msg
⍝ Prints `msg` to the session if `flag` is 1. `flag` defaults to `∆VERBOSE`
⍝ However, if a variable `∆PrintToSession` exists it overwrites `flag`.
⍝ `∆PrintToSession` should only be used in test cases to prevent blurring output.
r←⍬
:If 0<⎕NC'∆PrintToSession'
flag←(,1)≡,∆PrintToSession
:Else
flag←{0=⎕NC ⍵:∆VERBOSE ⋄ ⍎⍵}'flag'
:EndIf
:If flag
⎕←↑,⊆msg
:EndIf
⍝Done
r←ProcessAssetsProp(path assets)
r←''
:If 0<≢assets
:If {⍺≡(≢⍺)↑⍵}/F.EnforceSlash¨path assets
r,←⊂(≢path)↓assets
:Else
r,←⊂assets
:EndIf
:EndIf
Prune←{
⍝ Make sure that for every {packageName}-{majorNo} only the best version survives.
TREE←⍵
0=≢TREE.Data:TREE.Data
minorPatch←{⍵/⍨⌽2>+\'.'=⌽⍵}¨TREE.{Data[;∆packageID]}⍬
TREE.Data←TREE.Data[⍒minorPatch;]                                  ⍝ Firstly, sort by by minor-patch
major←{{⍵↑⍨¯1+⍵⍳'.'}⍵↓⍨⍵⍳'-'}¨TREE.{Data[;∆packageID]}⍬
ind←⍋major
TREE.Data←TREE.Data[ind;]                                          ⍝ Secondly, sort by major
major←major[ind]
TREE.Data←TREE.Data[{⊃⍵}⌸((TREE.Data[;1]{⍺:⍵ ⋄ ⊃SplitAtAlias ⍵}¨TREE.Data[;2]),¨major)⊣TREE.Data;]  ⍝ First one only, but honor alias though for non-principal packages only
TREE.Data[⍒TREE.{Data[;∆principal]}⍬;]                             ⍝ Final sort order by the principal flag
}
{(statusCode errMsg zipFilename)}←{dependencies}PublishPackage(source registry);uri;cfgFilename;cfg;packageID
⍝ Publishes a package.\\
⍝ 1. Checks for uniqueness of the given package/version combination.
⍝ 2. Creates a dependency file for the package if required
⍝ 3. Creates a zip file for the package in a temp folder if required
⍝ 4. Moves the zip file into the Registry, either via HTTP or locally.
⍝ 5. Updates the Registry index in case it's a local Registry
⍝ Note that if ⍵ points already to a ZIP file it is **moved** into the Registry.\\
⍝ `⍵` must be a two-item vector:
⍝ 1. `source` → folder to create package from
⍝ 2. `registry` → registry to publish package to (alias or uri)
⍝ ## The explicit result
⍝ * `statusCode` is an HTTP no matter whether it is an HTTP call or not.
⍝ * `errMsg` is empty if `statusCode` is 200, otherwise it is additional informartion.
⍝ * `zipFilename` is empty in case `source` is a ZIP file, but the name of the ZIP file created along the way otherwise.
statusCode←200 ⋄ errMsg←''
dependencies←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'dependencies'
uri←F.EnforceSlash ReplaceRegistryAlias registry
'No URI provided'Assert 0<≢uri
'Not just a Registry'Assert uri≡RemovePackageID uri
'Unknown Registry'Assert(⊂EnforceTrailingSlash uri)∊⊃¨{0≡⍵:⍺ ⋄ (¯1↓⍺),':',(⍕⍵),'/'}/¨MyUserSettings.registries.(uri port)
source←RemoveFileProtocol source  ⍝ Precaution
zipFilename←dependencies PackIfFolder source
'Invalid URI specified: not a zip file'Assert'.zip'≡⎕C ¯4↑zipFilename
:If Reg.IsHTTP uri
PublishPackageToRemoteRegistry_ zipFilename registry
⍝PublishPackageToRemoteRegistry_2 zipFilename registry
:Else
PrintToSession'  Read config file for ',source,'...'
cfgFilename←1 F.NormalizePath({F.IsDir ⍵:⍵ ⋄ 1⊃⎕NPARTS ⍵,CFG_Name}source),'/',CFG_Name
:If F.IsFile cfgFilename
cfg←ReadPackageConfigFile cfgFilename
PrintToSession'  Attempting to publish ',source,'...'
packageID←cfg.group,'-',cfg.name,'-',cfg.version
:Else
packageID←2⊃⎕NPARTS source
:EndIf
(statusCode errMsg)←Reg.PublishPackage zipFilename uri
:If 200≠statusCode
:AndIf '.zip'≢⎕C⊃¯1↑⎕NPARTS source
PrintToSession'  Cleaning up temp file...'
F.DeleteFile zipFilename
zipFilename←''
:EndIf
:EndIf
⍝Done
{filename}←PublishPackageToRemoteRegistry_(filename uri);request;res;packageID;uri_
⍝ This sends the file "manually". See also PublishPackageToRemoteRegistry_2.
(uri packageID)←Reg.SeparateUriAndPackageID uri
uri_←ReplaceRegistryAlias uri
:If 0=≢packageID
:OrIf (,'/')≡,packageID
packageID,←2⊃⎕NPARTS filename
:EndIf
request←R.NewRequest 0
request.RequestTarget←{'/'=1⍴⍵:⍵ ⋄ '/',⍵}packageID
request.Method←'PUT'
request.Content←Reg.ReadNativeFile filename
request.Headers,←⊂'api-key'((MyUserSettings.GetRegistry uri).api_key)
request.Headers,←⊂'Content-Type' 'application/octet-stream'
res←SendAndReceive uri_ request
:If res.StatusCode≢200
:If 400=res.StatusCode
:If ∧/~'<>'∊res.Content  ⍝ No HTML?!
('Server: ',res.Content)Assert 0
:Else
'Server: Bad request'Assert 0
:EndIf
:EndIf
'Server: Page not found'Assert 404≠res.StatusCode
'Server: Method is not allowed'Assert 405≠res.StatusCode
'Server: Unauthorized request (401)'Assert 401≠res.StatusCode
('Server ',uri,' reported an error ',⍕res.StatusCode)Assert~∨/'<html'⍷res.Content
('Server: ',res.Content)Assert 0
:EndIf
⍝Done
{rc}←PublishPackageToRemoteRegistry_2(filename uri);host;client;request;headers;buff;m
⍝ Send file using Conga 3.0 native send file utility.
⍝ Process uses C worker thread and should not be blocking.
⍝
⍝ --------------- ⍝TODO⍝ -----------------------------------------------------------------
⍝ This function is currently not used because I could not get this to work.
⍝ I believe that this is a Conga problem.
⍝ When this function works it can replace PublishPackageToRemoteRegistry_
⍝ Whether this function is going to be deleted or renamed, check the setting of Tester2's
⍝ `watchIgnore` property in the Client's `TestCases.Prepare` functions.
uri←'^https*://'⎕R''⊣uri
(host uri)←{⍵{(⍵↑⍺)(⍵↓⍺)}¯1+⍵⍳'/'}uri
client←NewClient host
request←R.NewRequest 0
request.RequestTarget←uri
request.Method←'PUT'
{}client R.Connect 0
m←R.NewMessage client
m.Request←request
m.RequestTime←R.QTSToSeconds R.QTS ⍝ Or after send?
client.Messages,←m
headers←0 2⍴''
headers⍪←'Connection' 'Close'
headers⍪←'Content-Length'(⍕2 ⎕NINFO filename)
headers⍪←'Accept-Encoding' 'identity'
headers⍪←'Accept' '*.*'
headers⍪←'Host'host
buff←R.DRC.Send client.Name ('POST'uri client.Version headers(''filename 'gzip'))
buff←R.DRC.Send client.Name ('POST'uri client.Version headers('sldclsdclskd'))
client.LastSendTime←R.QTS
Assert 0=1⊃buff    ⍝ This creates a LENGTH ERROR - why?!
∘∘∘
⍝Done
tree←ReadBuildList filename
:If F.IsFile filename
tree←Reg.GetJsonFromFile filename
tree←⍉↑tree.(principal packageID url)
:Else
tree←⍬
:EndIf
⍝Done
deps←ReadDependencyList filename
deps←(1⊃F.NGET filename 1)~⊂''
deps←('⍝'≠⊃¨deps)/deps
⍝Done
cfg←ReadPackageConfigFile path;cfg_file;cfg;buff;Reg
⍝ Takes path to a package and returns the config file for that package as a namespace populated with variables.\\
⍝ `path` may or may not carry the filename.\\
⍝ If the config file could not be found and empty vector is returned.
Reg←##.Registry
path←ReplaceRegistryAlias path
:If Reg.IsHTTP path
cfg←ReadPackageConfigFile_ path
:Else
cfg_file←path,((⎕C CFG_Name≢⎕C(-≢CFG_Name)↑path))/'/',CFG_Name
('Config file missing: ',cfg_file)Assert F.Exists cfg_file
buff←⊃F.NGET cfg_file
(('\'=buff)/buff)←'/'
'Odd number of " ?!'Assert 0=2|'"'+.=buff
:Trap 0
'cfg'⎕NS Reg.JSON buff
:Else
0 Assert⍨'Attempt to convert to JSON5 failed: ',cfg_file
:EndTrap
:EndIf
⍝Done
list←ReadPackageConfigFile_ uri;host;packageID;request;res
(host packageID)←Reg.SeparateUriAndPackageID uri
packageID←{0=≢⍵:'*' ⋄ ⍵}packageID
request←R.NewRequest 0
request.RequestTarget←Reg.VersionOf_REST,'/packages/details/',{⍵↓⍨'/'=1⍴⍵}packageID
request.Headers,←⊂'Accept' 'application/json'
res← SendAndReceive host request
:Select res.StatusCode
:Case 404
list←''
:Case 200
list←{(,0)≡⍴⍵:'' ⋄ ⎕JSON⍠('Dialect' 'JSON5')⊣⍵}⊣res.Content
list←1↓⊃,/CR,¨list
:Else
('Failed with status code ',⍕res.StatusCode)Assert 0
:EndSelect
⍝Done
:Class RegistryIndices
⍝ Holds indices useful to index the array returned by `ListRegistries`
:Field Public Shared ReadOnly alias←1
:Field Public Shared ReadOnly url←2
:Field Public Shared ReadOnly id←3
:Field Public Shared ReadOnly port←4
:Field Public Shared ReadOnly priority←5
:Field Public Shared ReadOnly noCaching←6
:Field Public Shared ReadOnly proxy←7
:Field Public Shared ReadOnly apiKey←8
∇ r←AllIndices
:Access Public Shared
r←alias,url,id,port,priority,noCaching,proxy,apiKey
∇
∇ r←AllNames
:Access Public Shared
r←'Alias' 'URL' 'ID' 'Port' 'Priority' 'No-Caching' 'Proxy' 'API-key'
∇
∇ r←IndicesAndNames
:Access Public Shared
r←⍉↑AllIndices AllNames
∇
:EndClass
{refs}←{parms}ReInstallDependencies y;installFolder;registry;deps;refs;msg
⍝ Re-installs all packages by honoring the file `apl-dependencies.txt`.
⍝ The right argument must be one of:
⍝ * A folder that hosts a file `apl-dependencies.txt` (install folder)
⍝ * Optionally a Registry, either as a URL or as an alias
⍝ The file `apl-buildlist.json` as well as all directories in that folder will be deleted.
⍝ Then all packages listed in the file `apl-dependencies.txt` are re-installed from scratch.\\
⍝ Note that packages with different major version numbers are considered to be different packages.\\
⍝ By default all known Registries with a priority greater than 0 are scanned (if no Registry was specified.\\
⍝ The left argument is optional and, if specified, typically created by calling `CreateReInstallParms`.\\
⍝ It may carry three parameters:
⍝ * `noBetas`\\
⍝   Defaults to 0, meaning that beta versions are considered. Set to 1 if you want betas to be ignored.
⍝ * `update`\\
⍝   Defaults to 0, meaning that the same version is installed again even if a later version is available.\\
⍝   Change to 1 to force an update.
⍝ * `dry`
⍝   Defaults to 0, meaning the function does business.\\
⍝   Set this to 1 in order to get a report of what the function would do without actually doing it.\\
:If 0=⎕NC'parms'
parms←CreateReInstallParms
:EndIf
(deps installFolder registry)←CheckReInstallDependencies y
msg←'Re-installing packages in ',installFolder,((1+parms.noBetas)⊃' including' ' without'),' beta versions'
(~parms.quiet)PrintToSession(⎕PW-1){⍺↑'--- ',⍵,' ',⍺⍴'-'}msg
1 EstablishRumbaClients ⍬
refs←parms.dry ReInstallDependencies_ deps installFolder registry parms.noBetas parms.update parms.quiet
⍝Done
refs←{dry}ReInstallDependencies_ y;deps;installFolder;registry;noBetas;update;quiet;tempDir;forceClose;p;i;pkg;msg;ref;qdmx
⍝ Re-installs all packages listed by `deps`, including any dependencies.\\
⍝ In case `dry` is 1 it reports to the session what it _would_ do.\\
⍝ All work is done in a temp folder. Without -dry that temp folder will eventually replace the install folder.
⍝ With -dry the temp folder will be deleted.
⍝ By default principal packages are not upgraded but re-installed in exactly the same way as before.
⍝ You can change this by setting `upgrade←1`.
⍝ Note that this has a side effect: the same principal packages but with different version numbers (not major)
⍝ will all be replaced by the latest version except those that have an alias assigned.
dry←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'dry'
'You must specify at least 5 parameters'Assert 5≤≢y
(deps installFolder registry noBetas update quiet)←y,(≢y)↓⍬ ⍬ ⍬ ⍬ ⍬ 0  ⍝ Default for "quiet" is 0
refs←⍬
tempDir←F.GetTempSubDir''
tempDir ⎕NCOPY installFolder,'/',Reg.DependenciesFilename                  ⍝ Copy the dependency file
tempDir{0=≢⍵:shy←⍬ ⋄ ⍺∘{⍺ ⎕NCOPY ⍵}¨⍵}F.ListFiles installFolder,'/*.zip'   ⍝ Copy any ZIP files (packages)
forceClose←1 EstablishRumbaClients ⍬
p←(~quiet)∘PrintToSession
:For i :In ⍳≢deps
pkg←i⊃deps
:If update
pkg←Reg.RemoveMinorAndPatch pkg
:EndIf
msg←'Fetching package ',(⍕i),' of ',(⍕≢deps),' (',pkg,')',((0<≢registry)/' from ',registry),' ',(dry/'(dry)'),'...'
p msg
:Trap ((⊂,##.Client.DEBUG)∊,¨'on' 1)↓Reg.ErrorNo
ref←noBetas InstallPackages(registry,pkg)tempDir
:Else
qdmx←⎕DMX
('Package ',pkg,' in ',registry,' caused a problem: ',qdmx.EM)Assert 1=≢'Package <[^>].*> not found in any of these Registries:'⎕S 0⊣qdmx.EM
:EndTrap
p(⊂'Installed',(dry/' (dry)'),': '),ref
refs,←⊆ref
:EndFor
:If dry
⎕DL 0.01
F.RmDir tempDir
1 PrintToSession'Dry run, no packages got installed'  ⍝ Ignore "quiet" here because otherwise "dry" makes no sense
:Else
'Establishing re-installed packages failed, therefore nothing was changed'Assert installFolder ReplaceFolderBy tempDir
:EndIf
CloseConnections forceClose
RemoveAlias←{'@'∊⍵:⍵↓⍨⍵⍳'@' ⋄ ⍵}
RemoveFileProtocol←{'file://'{⍵↓⍨(≢⍺)×⍺≡(≢⍺)↑⍵}⍵}
RemoveHttpProtocol←{'^http[s]?://'⎕R''⊣⍵}
RemovePackageID←{
⍝ ⍵ maybe a URL like http(s)://.../{group}-{name}-{version}
⍝ ← is ⍵ without the packageID
⍝ Examples:
⍝ 'https://tatin.dev/' ← RemovePackageID 'https://tatin.dev/aplteam-OS-1.0.0'
⍝ 'file:///tmp/foo/'     ← RemovePackageID 'file:///tmp/foo/aplteam-OS-1.0.0'
⍝ 'tmp/foo/'             ← RemovePackageID 'tmp/foo/aplteam-OS-1.0.0'
⍝ 'tmp/foo/'             ← RemovePackageID 'tmp/foo/'
⍝ 'tmp/'                 ← RemovePackageID 'tmp/foo'    !!
(¯1↑⍵)∊'/\':⍵
Reg.IsValidPackageID_Complete ⍵:''
Reg.IsValidPackageID_WithMajorNo ⍵:''
Reg.IsValidPackageID_WithoutPatchNo ⍵:''
last←'/\'A.Last ⍵
~Reg.IsValidPackageID_Complete last:⍵
(-≢last)↓⍵
}
RemovePort←{
⍝ 'http://tatin.dev/' ← RemovePort 'http://tatin.dev/'
⍝ 'http://tatin.dev/' ← RemovePort 'http://tatin.dev:5001/'
noOf←⍵+.=':'
flag←0<≢'^http[s]?:'⎕S 0⊣⍵
noOf≠1+flag:⍵
part1←(+/2>+\':'=⍵)↑⍵
part2←{⍵↓⍨¯1+⍵⍳'/'}(≢part1)↓⍵
part1,part2
}
url←ReplaceCachePathByURL url;json;ns
⍝ url might be something like https://tatin.dev/<package-id> of /path/to/cache/<domain:port>/<package-ID>
⍝ The former is left alone, but the latter is translated into the original url on the Net.
:If ~IsHTTP url
:AndIf {⍺≡(≢⍺)↑⍵}/F.EnforceSlash¨GetPathToPackageCache url
json←⊃F.NGET url,'/',Reg.CFG_Name
ns←Reg.APLfromJSON json
url←ns.uri
:EndIf
success←old ReplaceFolderBy new;temp;flag;qdmx;msg;rc
⍝ Performs the following actions:
⍝ * Establish a temp name dynamically
⍝ * Rename "old" to "temp"
⍝ * Re-create the folder "old"
⍝ * Copy the contents of "new" into "old"
⍝ * Delete "new"
⍝ * Delete "temp"
temp←'-'{~⎕NEXISTS n←⍺{(1⊃⍵),⍺,(2⊃⍵)}⎕NPARTS ⍵:n ⋄ (⍺,⍺)∇ ⍵}{⍵↓⍨-(¯1↑⍵)∊'/\'}old
flag←0
:Repeat
:Trap 19 22
temp(⎕NMOVE F.ExecNfunction)old
flag←1
:Else
qdmx←⎕DMX
:If ~YesOrNo'Attempt to replace ',old,' resulted in a ',qdmx.EM,' error; try again?'
'Cancelled by user after error'⎕SIGNAL 98
:EndIf
:EndTrap
:Until flag
F.MkDir old
:Trap 0
old(⎕NCOPY⍠('Wildcard' 1)F.ExecNfunction)new,'/*'
{}F.RmDirByForce new
success←1
:Else                      ⍝ Roll back
{}F.RmDirByForce old
F.MkDir old
old(⎕NMOVE⍠('Wildcard' 1)F.ExecNfunction)temp,'/*'
success←0
:EndTrap
(rc msg)←F.RmDirByForce temp
:If rc≠0
⎕←'*** Warning: removing ',temp,' failed but the re-install worked!'   ⍝Note: this has failed a number of times, and we don't know why
:EndIf
ReplaceRegistryAlias←{
⍝ Replaces any string `[foo]` by its definition from the Client's config file.
⍝ If ⍵ is an alias which cannot be found in the user settings then an empty vector is returned.
⍝ ⍵ might be nested (more than one string): the function calls itself then recursively.
⍝ The result may start with <http[s]://" but not with "file://".
⍝ Injects a port number if it's none of (0 80 443).
⍺←MyUserSettings
cfg←⍺
txt←⍵
2=≡txt:∇¨txt
(alias txt)←SplitAtAlias txt
'['≠1⍴txt:alias,txt
txt~←' '
(offset end)←txt⍳'[]'
txt←1↓(offset-1)⌽txt
regAlias←⎕C ¯1↓' '~⍨(end-offset)↑txt
txt←(end-offset)↓txt
0=≢cfg.registries:''
~(⊂regAlias)∊⎕C cfg.registries.alias:''
ind←1⍳⍨(⎕C cfg.registries.alias)≡¨⊂regAlias
replaceBy←ind⊃cfg.registries.uri
port←ind⊃cfg.registries.port
replaceBy{⍵∊0 80 443:⍺ ⋄ (⍺↓⍨¯1×'/'=¯1↑⍺),':',(⍕⍵),'/'}←port
txt↓⍨←(⊃txt)∊'/\'
f←~(¯1↑replaceBy)∊'/\'
sep←f/'/'
f:(-offset-1)⌽alias,replaceBy,sep,txt
(-offset-1)⌽replaceBy,alias,txt
}
{buildList}←{append}SaveBuildList(buildList path);filename;ns;bool;b;groupNameMajor;topLevel;mat;json
⍝ Takes a dependency tree (`buildlist`) and saves it into `path`.\\
⍝ The optional left argument `append` defaults to 1, meaning that `buildlist` is
⍝ appended to an already existing build list. If set to 0 an existing build list is replaced.
append←{0<⎕NC ⍵:⍎⍵ ⋄ 1}'append'
buildList[;3]←RemoveFileProtocol¨buildList[;3]
filename←path,Reg.BuildListFilename{('/',⍺)/⍨⍺≢(-≢⍺)↑⍵}path
:If F.IsFile filename
:AndIf append
ns←Reg.JSON⊃F.NGET filename
:Else
ns←⎕NS''
ns.(principal packageID url)←⊂''
:EndIf
ns.principal,←buildList[;1]
ns.packageID,←buildList[;2]
ns.url,←buildList[;3]
ns.url←{'/'@(⍸'\'=⍵)⊢⍵}¨ns.url
mat←TakeBestVersion2 ns
ns.(principal packageID url)←↓⍉mat
json←Reg.JSON ns
json Reg.SaveJSON filename 1
buildList←mat
⍝Done
{r}←SaveUserSettingsFolder folder;path;filename
⍝ Saves the location of the user settings in a file `.tatin` in the folder returned by the `GetUserHomeFolder` function
⍝ See also `FindUserSettings`
path←GetUserHomeFolder''
'Create!'F.CheckPath path
filename←path,'.tatin'
r←folder F.NPUT filename 1
⍝Done
{registries}ScanRegistries packageIDs;request;res;bool;packageIDs_;urls
⍝ Scans all registries provided via ⍺ for packageIDs; the first hit wins.
⍝ Adds data to semi-global ∆TREE.Data
registries←{0=⎕NC ⍵:GetRegistriesForBuildList ⋄ ⍎⍵}'registries'
request←R.NewRequest 0
request.Headers,←⊂'Accept' 'application/json'
packageIDs←⊆packageIDs
:If 0<+/bool←∨/¨'://'∘⍷¨packageIDs           ⍝ Does any package know where it lives?
(urls packageIDs_)←↓⍉↑SplitUrlAndPackageID¨bool/packageIDs
{request ScanRegistries_1_ ⍵ packageIDs_}¨urls
:EndIf
:If 0<+/~bool
:AndIf 0<≢registries←∪⊆registries
request ScanRegistries_1 registries((~bool)/packageIDs)
:EndIf
:If 1<≢∆TREE.Data
∆TREE.Data←DropDublicates ∆TREE.Data
request ScanRegistries_2 registries
:EndIf
⍝Done
request ScanRegistries_1(registries packageIDs);i;registry;res;ns;data;buff;deps
⍝ Part of creating a build list. Scans all registries for `packageIDs`
i←0
packageIDs←RemoveAlias¨packageIDs
:Repeat
:If (≢registries)≥i←i+1
registry←i⊃registries
request ScanRegistries_1_ registry packageIDs
packageIDs~←∆TREE.{Data[;∆packageID]}⍬
packageIDs~←⊂'null'
:EndIf
:Until (i=≢registries)∨0=≢packageIDs
{r}←request ScanRegistries_1_(registry packageIDs);res;ns;data;buff;deps
⍝ Part of creating a build list.
⍝ `registry` is usuall an http[s]:// address but may also be a (local) file.
r←0
:If Reg.IsHTTP registry
request.RequestTarget←Reg.VersionOf_REST,'/packages/dependencies/',1↓∊',',¨packageIDs
res←SendAndReceive registry request
:If 200=res.StatusCode
ns←Reg.JSON res.Content
:If 0<≢ns.data
∆TREE.Data⍪←(0,[1.5]1⊃¨ns.data),⊂registry      ⍝ Those are hosted by "registry"
data←(⊃,/2⊃¨ns.data)~⊂'null'                   ⍝ Those are dependencies. They might carry http[s]://, or live on "registry", or elsewhere
:AndIf 0<≢data                                     ⍝ There might well be no dependencies required
buff←↑DetermineURI¨data                        ⍝ In case a depency knows where it lives  that's fine, and we handle that here
∆TREE.Data⍪←0,buff
:EndIf
:EndIf
:Else
:If 0<≢packageIDs←(F.IsDir registry∘,¨packageIDs)/packageIDs
∆TREE.Data⍪←(0,[1.5]packageIDs),registry∘,¨packageIDs
deps←⊃,/Dependencies.Get¨registry∘,¨packageIDs
:AndIf 0<≢deps
∆TREE.Data⍪←(0,[1.5]deps),registry∘,¨deps          ⍝ Those are found in "registry"
:EndIf
:EndIf
request ScanRegistries_2 registries;bool;i;registry;res;ns;bool2;qdmx;dm
⍝ Part of creating a build list. Establish the Server the package is hosted on.
i←1
:While 0<+/bool←0=≢¨∆TREE.Data[;∆TREE.∆url]
registry←i⊃registries
:If Reg.IsHTTP registry
request.RequestTarget←Reg.VersionOf_REST,'/packages/exist/',1↓∊',',¨{'@'∊⍵:⍵↓⍨⍵⍳'@' ⋄ ⍵}¨bool/∆TREE.Data[;∆TREE.∆packageID]
:Trap 345
res← SendAndReceive registry request
:Else
qdmx←⎕DMX
dm←' '~⍨1⊃qdmx.DM
:If 'Handshakecertificateisfailing'≡dm
:OrIf 'Couldnotconnecttohostdataport'≡dm
:If IsRunningAsUserCommand
PrintToSession'*** Could not reach ',registry,', therefore it is ignored'
:Continue
:Else
345 ⎕SIGNAL⍨'Could not reach ',registry  ⍝ When called via the API we stop
:EndIf
:Else
qdmx.EM ⎕SIGNAL qdmx.EN
:EndIf
:EndTrap
:If 200=res.StatusCode
ns←Reg.JSON res.Content
:If ∨/ns.exist
∆TREE.Data[⍸bool\ns.exist;∆TREE.∆url]←⊂registry
:EndIf
:EndIf
:Else
bool2←F.IsDir registry∘,¨bool/∆TREE.Data[;∆TREE.∆packageID]
∆TREE.Data[⍸bool\bool2;∆TREE.∆url]←⊂registry
:EndIf
:Until (≢registries)<i←i+1
Select←{⍺←⊢ ⋄ ⍺ CommTools.Select ⍵}
r←SendAndReceive(uri request);client;uri_;port;⎕TRAP;msg;errorCounter;qdmx
⍝ Whether there is a (semi-)global ∆PermanentConnections or not makes a difference here:
⍝ * If it exists it's supposed to hold clients for all HTTP registries with a priority>0.
⍝   This can improve performance dramatically because the same connection can be used again.
⍝ * If ∆PermanentConnections does not exist, a new client is created & the connection is closed when done.
'Invalid request parameter: RequestTarget'Assert(≡request.RequestTarget)∊0 1
request.Headers,←⊂Reg.TatinVersionAsHttpHeader
request←AddTestFlag request
msg←uri,' did not respond'
⎕TRAP←(345 'C'('''',uri,''' SignalNoConnection ''',msg,''''))(347 'N')(348 'C' '→∆Go,errorCounter←errorCounter+1')(0 'S')
errorCounter←0
:If 9=⎕NC'∆PermanentConnections'
uri_←1 CompileNameFromUrl uri
EstablishRumbaClients ⍬
:AndIf 9=∆PermanentConnections.⎕NC uri_
client←∆PermanentConnections.⍎uri_
msg←uri,' did not respond'
{}client R.Send¨request      ⍝ Pipeline requests
:Trap 347
r←client R.Receive¨request   ⍝ Wait for all
:Else
qdmx←⎕DMX
CloseConnections 1
qdmx.EM ⎕SIGNAL qdmx.EN
:EndTrap
:Else
∆Go: ⍝ Also jumped to in case the server closed the connection.
⍝ Yes, this DOES happen for no apparent reason every now and then.
:If errorCounter>5
'No connection'⎕SIGNAL 347
:Else
⍝⎕←'Trying again for the ',(⍕errorCounter),' time...'
⎕DL 0.1×errorCounter
client←NewClient uri
:Trap 999
r←client R.SendAndReceive request
:Else
⍝ This is a workaround for the problem that a )LOAD or )XLOAD will unload
⍝ the Conga DLL, resulting in a DLL Error: 1006
qdmx←⎕DMX
:If ∨/'DLL Error: 1006 '⍷∊qdmx.DM
⎕EX'⎕se._Tatin.RumbaLean.DRC'
⎕SE._Tatin.Admin.InitConga ⍬           ⍝ Re-initalize
r←client R.SendAndReceive request
:Else
∘∘∘ ⍝ Error?!
:EndIf
:EndTrap
:EndIf
:EndIf
⍝Done
r←SendHEAD url;request;response
request←R.NewRequest 0
:If '/'∊RemoveHttpProtocol url
request.RequestTarget←'/',{⍵↓⍨⍵⍳'/'}RemoveHttpProtocol url
url←(-≢request.RequestTarget)↓url
:EndIf
request.Method←'HEAD'
:Trap 347
response←SendAndReceive url request
r←response.StatusCode≡200
:Else
r←0
:EndTrap
⍝Done
{r}←uri SignalNoConnection msg;qdmx;EM;⎕TRAP
⍝ Used to enable a Tatin-specific function to catch 347 & 348 and report `msg`.
⍝ 348 for errors when it's worthwhile to try a couple of times
⍝ 347 for errors that must be passed through
r←⍬
qdmx←⎕DMX
EM←⎕C qdmx.EM~' '  ⍝ The Rumba message might carry more spaces than it should, so we have to do some gymnastic
⎕TRAP←0 'S'
:If qdmx.ENX∊1111 11002 1201                               ⍝ 1111 is universal, 11002 is Conga 3.4, 1201 is Conga 3.3
msg ⎕SIGNAL 347
:ElseIf ~Reg.IsWindows
:AndIf ¯3≡qdmx.ENX
msg ⎕SIGNAL 347
:ElseIf (⎕C'ServerClosedConnection'){⍺≡(≢⍺)↑⍵}EM           ⍝ Should not happen but does anyway
:OrIf (⎕C'HandshakeCertificateIsFailing'){⍺≡(≢⍺)↑⍵}EM      ⍝ That's Conga 3.3 and earlier
:OrIf (⎕C'UnableToConnectToHostDataPort'){⍺≡(≢⍺)↑⍵}EM      ⍝ That's also Conga 3.4 and later
:OrIf (⎕C'ThisIsUsuallyATemporaryErrorDuringHostNameResolutionAndMeansThatTheLocalServerDidNotReceiveAResponseFromAnAuthoritativeServer'){⍺≡(≢⍺)↑⍵}EM  ⍝ Same
msg ⎕SIGNAL 348
:Else
⎕SIGNAL⊂('EN' 347)('ENX'qdmx.ENX)('Message'qdmx.Message)('EM'qdmx.EM)
:EndIf
(alias url)←SplitAtAlias id;pkgID;regAlias;buff
⍝ Splits "id" at the package (not Registry!) alias, if any'
⍝ ('M@' '[tatin]MarkAPL') ← SplitAtAlias 'M@[tatin]MarkAPL'
⍝ ('' '[tatin]MarkAPL') ← SplitAtAlias '[tatin]MarkAPL'
alias←''
:If '@'∊id
(alias pkgID)←id{(⍵↑⍺)(⍵↓⍺)}id⍳'@'
:If ∧/'[]'∊alias
(regAlias alias)←{⍵{(⍵↑⍺)(⍵↓⍺)}⍵⍳']'}alias
'Invalid package alias'Assert 1<≢alias
'Invalid package alias'Assert 0=(⎕NS'').⎕NC ¯1↓alias
url←regAlias,pkgID
:Else
:If ∨/'/\'∊alias
(alias buff)←{⍵{(⍵↑⍺)(⍵↓⍺)}1+-⌊/(⌽⍵)⍳'\/'}alias
url←buff,pkgID
:Else
url←pkgID
:EndIf
:EndIf
:Else
url←id
:EndIf
⍝Done
SplitUrlAndPackageID←{⍵{(⍵↓⍺)(⍵↑⍺)}1+-'/'⍳⍨⌽⍵}
mat←TakeBestVersion1 ns;topLevel;groupNameMajor;b
⍝ Takes the best available version but does not allow dependenies to be "better" than a principal package
⍝ Considered a bug.
⍝ For a version that does not differantiate between principal packages and pure dependencies see TakeBestVersion2
mat←⍉↑ns.(principal packageID url)
(topLevel mat)←{b←1=⍵[;1] ⋄ (b⌿⍵)((~b)⌿⍵)}mat       ⍝ Separate level-1 packages (topLevel) from the rest
mat←(~mat[;2]∊topLevel[;2])⌿mat                     ⍝ Those we have as top-level we can remove from mat
mat←⊖mat[Reg.SortIndexForPackageIDs mat[;2];]       ⍝ Make sure latest ones are at the top
groupNameMajor←Reg.RemoveMinorAndPatch¨mat[;2]      ⍝ Majors are consiered separate packages
b←(groupNameMajor⍳groupNameMajor)=⍳≢mat
mat←b⌿mat
mat←topLevel⍪mat
⍝Done
mat←TakeBestVersion2 ns;principal;groupNameMajor;b
⍝ Takes the best available version; does not differantiate between principal packages and pure dependenies.
⍝ See also `TakeBestVersion1` which is considered wrong.
mat←⍉↑ns.(principal packageID url)
principal←(1=mat[;1])⌿mat                              ⍝ Separate principal packages from the rest
mat←⊖mat[Reg.SortIndexForPackageIDs mat[;2];]          ⍝ In `mat`, latest ones are at the top
groupNameMajor←Reg.RemoveMinorAndPatch¨mat[;2]         ⍝ Majors are consiered separate packages
b←(⍳≢mat)=groupNameMajor⍳groupNameMajor
mat←b⌿mat
principal←Reg.RemoveMinorAndPatch¨principal[;2]
mat[;1]←(Reg.RemoveMinorAndPatch¨mat[;2])∊principal
mat←mat[⍒mat[;1];]
⍝Done
(list msg)←UnInstallPackages(packageID folder);pkgDepFilename;toBeRemoved;rc;bool;principalPkgs;buildList_old;packages;noOf;noOfComponents;buff;cleanup;cfg;writeDependencyFile
;packageID_2;buildList_old;b;buildList_new;installedPkgs;newPrincipalPkgs
⍝ If `folder` carries a dependency file then this function attempts to un-install the package
⍝ `packageID` and all its dependencies but only in case those are neither top-level packages nor
⍝ required by other packages.\\
⍝ A package that has an alias must be uninstalled with the alias.\\
⍝ If `packageID` is empty a clean-up attempt is made, meaning that all packages that are not required
⍝ anymore are removed from the folder.\\
⍝ To keep things simple Tatin performs the following steps:
⍝  1. Checks whether the package is mentioned in the dependency file. If not an error is thrown.
⍝  3. Removes `packagedID` from the dependency file.
⍝  4. Re-compiles the build list based on the new dependency file.
⍝  5. Removes all packages that are not mentioned in the build list anymore\\
⍝ `folder` can be one of:
⍝ * Any folder that carries a file apl-dependencies.txt
⍝ * The (case independent) string `[MyUCMDs]`\\
⍝   In this case Tatin attempts to un-install the given package from the MyUCMDs/ folder
⍝ Returns a two-item vector:
⍝ 1. List with the fully qualified names of all removed packages; might carry an alias
⍝ 2. Message, ideally empty.\\
⍝ Notes:
⍝ * Removing the directories hosting the packages might fail for all sorts of reasons even though the
⍝   package & dependencies were already successfully removed from both dependency file and build list
⍝ * The search for package names is case independent
list←msg←''
:If '[myucmds]'{⍺≡⎕C(≢⍺)↑⍵}folder
:If 0=≢buff←(≢']MyUCMDs]')↓folder
folder←GetMyUCMDsFolder{'-'∊⍵:⍵↓⍨⍵⍳'-' ⋄ ⍵}RemoveHttpProtocol Reg.RemoveVersionNumber packageID
:Else
folder←GetMyUCMDsFolder,'/',buff
:EndIf
:EndIf
('Not found: ',LF,folder)Assert F.IsDir folder
folder←Reg.AddSlash folder
pkgDepFilename←folder,Reg.DependenciesFilename
'The folder has no dependency file'Assert F.IsFile pkgDepFilename
principalPkgs←(1⊃F.NGET pkgDepFilename 1)~⊂''
(Reg.DependenciesFilename,' is empty')Assert 0<≢principalPkgs
:If 0<≢packageID
:AndIf '@'∨.=¯2↑⌽¯1⌽packageID
packageID_2←IdentifyInstalledPackageID principalPkgs packageID
:If 0=≢packageID_2
msg←'Package is not installed'
:Return
:EndIf
:Else
packageID_2←packageID
:EndIf
buildList_old←LoadBuildList folder
:If 0<≢packageID_2
noOfComponents←packageID_2+.='-'
:If noOfComponents∊0 1
:If noOfComponents=0
noOf←+/b←∨/¨('-',(⎕C packageID_2),'-')∘⍷¨⎕C buildList_old[;2]
:Else
noOf←+/b←(packageID_2,'-'){⎕C((≢⍺)↑[2]⍵)∧.=⍺}(↑buildList_old[;2])
:EndIf
:If 0=noOf
list←''
msg←'Package is not installed'
:Return
:EndIf
('Found ',(⍕noOf),' times: ',packageID_2,'; specify <group>')Assert 1=noOf
packageID_2←2⊃buildList_old[b⍳1;]
:EndIf
:EndIf
cleanup←1
writeDependencyFile←0
newPrincipalPkgs←principalPkgs
:If 0<≢packageID_2
:If (⊂packageID_2)∊buildList_old[;2]
:If ~(⊂packageID_2)∊principalPkgs
msg←'Cannot uninstall: is not a principal package'
:Return
:EndIf
newPrincipalPkgs~←⊂packageID_2
writeDependencyFile←1 ⍝ We write later in case of a connectivity problem
:Else
cleanup←0
:EndIf
:EndIf
:If 0=≢newPrincipalPkgs
cfg←ReadPackageConfigFile folder,RemoveAlias packageID_2
:If 0<cfg.⎕NC'userCommandScript'
:AndIf 0<≢cfg.userCommandScript ⍝ Is it a user command?!
F.DeleteFile folder,⊃,/1↓⎕NPARTS cfg.userCommandScript
:EndIf
F.RmDir folder,RemoveAlias packageID_2
F.DeleteFile folder∘,¨'apl-buildlist.json' 'apl-dependencies.txt'
⍝ ↓ This may happen when the last user command package was un-installed, for example:
:If 0=≢⊃F.Dir folder,'/*'
(rc msg)←F.RmDirByForce folder
:EndIf
list,←⊂packageID_2
:Else
:If 0<≢packageID_2
:If 0=⎕NEXISTS folder,RemoveAlias packageID_2
msg←'Package is not installed'
→cleanup←0
:EndIf
cfg←ReadPackageConfigFile folder,RemoveAlias packageID_2
:If 0<cfg.⎕NC'userCommandScript'
:AndIf 0<≢cfg.userCommandScript ⍝ Is it a user command?!
F.DeleteFile folder,⊃,/1↓⎕NPARTS cfg.userCommandScript
:EndIf
:EndIf
buildList_new←1 CompileBuildList folder newPrincipalPkgs
:If (⊂packageID_2)∊RemoveAlias¨buildList_new[;2]
:AndIf ~(⊂packageID_2)∊buildList_new[;2]
msg←'Cannot uninstall: package has an alias assigned'
cleanup←0
:Else
:If 0<≢packageID_2
:AndIf ~(⊂RemoveAlias packageID_2)∊RemoveAlias¨newPrincipalPkgs
:If F.IsDir folder,RemoveAlias packageID_2
F.RmDir folder,RemoveAlias packageID_2
list←,⊂packageID_2
:Else
msg←'Package is not installed'
cleanup←0
:EndIf
:EndIf
:EndIf
:If writeDependencyFile
(⊂newPrincipalPkgs)F.NPUT pkgDepFilename 1
:EndIf
:If cleanup
installedPkgs←(≢folder)↓¨F.ListDirs folder
:AndIf 0<≢toBeRemoved←installedPkgs~RemoveAlias¨buildList_new[;2],⊂packageID_2
F.RmDir folder∘,¨RemoveAlias¨toBeRemoved
list,←toBeRemoved~list
:EndIf
:EndIf
⍝Done
version←UpdateClient(tag targetFolder);data;folder;tempFile;tno;run;targetStUp;atLeast19
⍝ Updates the client to the version indicated by `tag`, and returns the version number of the new version.\\
'Updating Tatin requires at least 20 MB free memory'Assert 20<⌊⎕WA÷1024×1024
version←''
data←GetContentFromGitHub'/aplteam/Tatin/releases/download/',tag,'/Tatin-Client-',(1↓tag),'.zip'
folder←F.GetTempSubDir'Tatin-Upgrade'
tempFile←folder,'/',tag,'.zip'
tno←tempFile ⎕NCREATE 0
data.Content ⎕NAPPEND tno 80
⎕NUNTIE tno
tempFile ZipArchive.UnzipTo folder
⎕NDELETE tempFile
⍝ Catch the "Run" function for 19.0 or later
:If atLeast19←19≤⊃(//)⎕VFI{⍵/⍨2>+\⍵='.'}2⊃# ⎕WG'APLVersion'
data←GetContentFromGitHub'/aplteam/Tatin/releases/download/',tag,'/Run.aplf'
run←'UTF-8'⎕UCS ⎕UCS data.Content
(⊂run)⎕NPUT folder,'/Run.aplf'
:EndIf
⍝ Move the new version from temp to the target folder
3 ⎕MKDIR targetFolder
(targetFolder,'/..')⎕NCOPY⍠('IfExists' 'Replace')⊣folder,'/Tatin'
:If atLeast19
targetStUp←targetFolder,'/../../../StartupSession/CiderTatin/'
3 ⎕MKDIR targetStUp
targetStUp ⎕NCOPY⍠('IfExists' 'Replace')⊣folder,'/Run.aplf'
:EndIf
version←{⍵↓⍨'v'=1⍴⍵}tag
⍝Done
folder←{folder}UsageDataGetFiles(uri downloadList);uri_;request;res;client;file
⍝ Downloads usage data files into `folder` which defaults to a sub folder in the OS's temp folder.\\
⍝  * `uri` must be a URL or an alias ponting to a running Tatin server\\
⍝  * `downloadList` must be either a simple character vector representing a single file or a nested vector\\
⍝    of simple character vectors each representing such a file\\
⍝ The filenames are usually requested by calling `UsageDataGetList`.
uri_←ReplaceRegistryAlias uri
folder←{0<⎕NC ⍵:⍎⍵ ⋄ F.GetTempSubDir'Tatin-Usage-Data'}'folder'
'No (valid) Registry specified?!'Assert 0<≢uri_
'You must specify a running Tatin server'Assert Reg.IsHTTP uri_
client←NewClient uri_
{}client R.Connect 0
:If 2≠|≡downloadList
downloadList←','(≠⊆⊢)downloadList
:EndIf
:For file :In downloadList
request←R.NewRequest 0
request.RequestTarget←Reg.VersionOf_REST,'/usage-data?download=',file
request.Headers,←⊂'Accept' 'application/json'
{}client R.Send request
res←client R.Receive request
:If 200≡res.StatusCode
res.Content Reg.WriteNativeFile folder,'/',file
:ElseIf 404≡res.StatusCode
'Command is not available'Assert 0
:Else
('Server error, RC=',⍕res.StatusCode)Assert 0
:EndIf
:EndFor
⎕DL 0.2
{}client R.Close 0
⍝Done
r←UsageDataGetList uri;uri_;request;res;client;file
⍝ Returns a list with all usage data files available for download from `uri`.\\
⍝ `uri` must be either the URI or an alias of a running Tatin server.
uri_←ReplaceRegistryAlias uri
'No (valid) Registry specified?!'Assert 0<≢uri_
'You must specify a running Tatin server'Assert Reg.IsHTTP uri_
request←R.NewRequest 0
request.RequestTarget←Reg.VersionOf_REST,'/usage-data?list'
request.RequestTarget←(-'&'=¯1↑request.RequestTarget)↓request.RequestTarget
request.Headers,←⊂'Accept' 'application/json'
res←SendAndReceive uri_ request
:If 200≡res.StatusCode
:If 0=≢res.Content
r←''
:Else
r←','(≠⊆⊢)res.Content
:EndIf
:ElseIf 404≡res.StatusCode
'Command is not available'Assert 0
:Else
('Server error, RC=',⍕res.StatusCode)Assert 0
:EndIf
⍝Done
:Class UserSettings
⍝ By instanciating this class you get a representation of a user settings file required by Tatin.\\
⍝ In case no path pointing to a folder hosting such a file is provided to `⎕NEW`, the file is searched
⍝ for (and created if it does not yet exist) in the default location (user's home folder) which
⍝ depends on your operating system.\\
⍝ You may call `⎕SE.Tatin.GetUserHomeFolder ''` in order to establish that location.\\
⍝ Optionally you may specify a folder hosting the configuration file as an argument to `⎕NEW`.\\
⍝ Again, if the file does not yet exist it will be created with defaults.\\
⍝ After having created an instance you can add a Registry definition (read: an instance of the
⍝ `DefineRegistry` class) to the user settings with `AddRegistry`, and you may also call
⍝ `ReplaceRegistry` and `RemoveRegistry`.\\
⍝ Note that all changes are strictly workspace-only. If you want your changes to be written to file
⍝ you must call the `Save` method with a 1 as right argument. The exception is that when the file
⍝ does not yet exist, it is created and written to disk with defaults.\\
⍝ If you have passed to `⎕NEW` a path to where the user settings file should be created, and you want
⍝ this file to become the default user settings file whenever Dyalog APL is fired up, then make a call
⍝ to the `MakeDefaultFile` instance method. This creates (or overwrites) a file '.tatin` that points
⍝ to that folder.\\
⍝ The full name of the file is available via the field `path2config`.\\
⍝ You may convert a particular Registry into an ordinary namespace by calling the `GetRegistry` method.
:Field Public Shared ReadOnly cfg_name←'tatin-client.json'  ⍝ Name of the user config file is fixed
:Field Public Shared ReadOnly ErrorNo←997                   ⍝ Used by `Assert`
∇ make0;configFile;buff
:Implements Constructor
:Access Public
Init1 ⍬
configFile←home.GetUserHomeFolder'.tatin'
:If F.IsFile configFile                               ⍝ Has the user...
buff←(∊1⊃F.NGET configFile)~⎕TC
:AndIf 0<≢buff                                        ⍝ ... specified her own location for the user settings file?
_path2config←AddSlash buff                        ⍝ Then we accept that
:Else
_path2config←AddSlash home.GetUserHomeFolder ⍬    ⍝ By default it's the user's home folder on all platforms
:EndIf
:If F.IsFile _path2config,cfg_name                    ⍝ If it exists...
Read ⍬                                            ⍝ we read it
:Else
AddPrincipalServer ⍬
AddTestServer ⍬
Save 1
:EndIf
∇
∇ make1(path2config_);reg;buff
:Implements Constructor
:Access Public
Init1 ⍬
⍝ In case the user passed the fully qualified name rather than just the folder:
:If cfg_name{⍺≡(-≢⍺)↑⍵}path2config_
path2config_←(-≢cfg_name)↓path2config_
:EndIf
'Is not a directory?!'Assert F.IsDir path2config_
_path2config←AddSlash path2config_
:If F.IsFile path2config
Read ⍬
_registries←{0<⊃⍵.⎕NC'proxy':⍵ ⋄ ⍵.proxy←'' ⋄ ⍵}¨_registries  ⍝ "proxy" was introduced in 0.96.0
:Else
AddPrincipalServer ⍬
AddTestServer ⍬
Save 1
:EndIf
∇
∇ Init1 dummy
⍝ Early initialisation
home←(⊃⊃⎕CLASS ⎕THIS).##
F←home.F ⋄ A←home.A
_source←''
_registries←⍬
_caching←1
_path2cache←''
_license←''
_group←''
_maintainer←''
∇
:Property source
⍝ Defines the default for the "source" property of a new package.\\
⍝ Setting this might be useful in case you use most of the time the same source folder, so it makes
⍝ sense to pre-populate a package's "source" property with a default defined here.
:Access Public Instance
∇ r←get
r←_source
∇
∇ set value;buff
buff←value.NewValue
'Invalid: "source"; (depth)'Assert 1=≡buff
'Invalid: "source"; (data type)'Assert' '=1↑0⍴buff
_source←buff
∇
:EndProperty
:Property path2config
:Access Public Instance
∇ r←get
r←_path2config,cfg_name
∇
:EndProperty
:Property fileTimestamp
⍝ Returns the file timestamp. Used to detect changes made in one way or another.
:Access Public Instance
∇ r←get
r←_fileTimestamp
∇
:EndProperty
:Property registries
:Access Public Instance
∇ r←get
:If 0=≢_registries
r←_registries
:Else
r←_registries[⍒_registries.priority]
:EndIf
∇
:EndProperty
:Property json
:Access Public Instance
∇ r←get
r←GetJSON5
∇
:EndProperty
:Property caching
⍝ A Boolean that decides whether packages that are loaded or installed are saved to
⍝ or read from the Tatin cache.
:Access Public Instance
∇ r←get
r←_caching
∇
∇ set val
'Invalid: "caching"; must be a Boolean'Assert(⊂val.NewValue)∊0 1
_caching←val.NewValue
∇
:EndProperty
:Property path2cache
⍝ Defines the path where the Tatin package cache lives.
⍝ If this is empty then the path is established with defaults that depend on the operating system
:Access Public Instance
∇ r←get
r←_path2cache
∇
∇ set val
'Invalid: "patch2cache"; must be a simpe char vector'Assert(≡val.NewValue)∊0 1
'Invalid: "patch2cache";  must be a simple char vector'Assert' '=1↑0⍴val.NewValue
_path2cache←val.NewValue
∇
:EndProperty
:Property license
⍝ Defines the default for the "license" property of a new package.\\
:Access Public Instance
∇ r←get
r←_license
∇
∇ set val
'Invalid: "license"; must be a simple char vector'Assert(≡val.NewValue)∊0 1
'Invalid: "license"; must be a simple char vector'Assert' '=1↑0⍴val.NewValue
_license←val.NewValue
∇
:EndProperty
:Property group
⍝ Defines the default for the "group" property of a new package.\\
:Access Public Instance
∇ r←get
r←_group
∇
∇ set val
'Invalid: "group"; must be a simple char vector'Assert(≡val.NewValue)∊0 1
'Invalid: "group"; must be a simple char vector'Assert' '=1↑0⍴val.NewValue
_group←val.NewValue
∇
:EndProperty
:Property maintainer
⍝ Defines the default for the "maintainer" property of a new package.\\
:Access Public Instance
∇ r←get
r←_maintainer
∇
∇ set val
'Invalid: "maintainer"; must be a simple char vector'Assert(≡val.NewValue)∊0 1
'Invalid: "maintainer"; must be a simple char vector'Assert' '=1↑0⍴val.NewValue
'Invalid: "maintainer"; must carry a "@" character'Assert'@'∊val.NewValue
_maintainer←val.NewValue
∇
:EndProperty
∇ {r}←AddRegistry y;registry;name;alias;buff;reg;isZero;ind;newPriorities
⍝ Adds the definition of a Registry (from a namespace or an instance of the DefineRegistry class)
⍝ to the user settings.\\
⍝ If a Registry with the same uri&alias is already defined an error is thrown.\\
⍝ `⍵` must be one of:
⍝ * An instance of the "Registry" class.
⍝ * A text vector with a name or an alias+name in the format `[alias]name`\\
⍝   In this case `AddRegistry` creates an instance on the fly. Of course this means that this is
⍝   only suitable in case specifying just the name and optionally the alias is sufficient.
⍝ * A namespace that can be used to instantiate the `DefineRegistry` class.\\
⍝ `←` is always `⍬` (shy).
:Access Public Instance
r←⍬
:If 80=⎕DR y
:If ∧/'[]'∊y
(alias name)←{⍵{('[]'~⍨⍵↑⍺)(⍵↓⍺)}⍵⍳']'}y
alias←⎕C alias
:Else
name←y
alias←''
:EndIf
((name='\')/name)←'/'
registry←⎕NEW home.DefineRegistry(,⊂name)
registry.alias←⎕C alias
:ElseIf ∨/'[DefineRegistry]'⍷⍕y ⍝ Instance of the class "DefineRegistry"?
registry←y
:Else
registry←⎕NEW home.DefineRegistry(,⊂y)
:EndIf
:If 0<≢_registries
'This URI/alias combination is already defined'Assert~(⊂registry.(uri alias))∊_registries.(uri alias)
:If 0<registry.⎕NC'alias'
:AndIf 0<≢registry.alias
'This alias is already used for a different uri'Assert~(⊂registry.alias)∊_registries.alias
:EndIf
:EndIf
:If ∨/'[DefineRegistry]'⍷⍕registry
buff←registry.Get ⍬
:Else
buff←registry
:EndIf
:If 0=buff.⎕NC'priority'
:OrIf ⎕NULL=buff.priority
:If 0=≢_registries
buff.priority←100
:Else
isZero←_registries.priority≡¨0
:If 0≥buff.priority←(⌊/_registries.priority~0 ⎕NULL)-10
:AndIf 0≥buff.priority←⌊(⌊/_registries.priority~0 ⎕NULL)÷2
:AndIf 0≥buff.priority←⌈(⌊/_registries.priority~0 ⎕NULL)-1
⍝ We need to make room
ind←⍋_registries.priority
newPriorities←100×1+⍳≢_registries.priority[ind]
(isZero[ind]/newPriorities)←0                     ⍝ Restore zeros
_registries.priority⌈←newPriorities[⍋ind]
buff.priority←100
:EndIf
:EndIf
:EndIf
buff.uri←AddSlash buff.uri
buff.noCaching←registry.noCaching  ⍝ This IS required, otherwise it won't work though it should
_registries,←buff
∇
∇ r←{rawFlag}ListRegistries showApiKey
⍝ List all data of all registries.\\
⍝ `showApiKey` must be a flag. If it 1 then the API key is shown, otherwise it is replaced by "***"
⍝ With `rawflag` being 0 (the default) the result is beautified.
:Access Public Instance
rawFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'rawFlag'
'⍵ must be a Boolean'Assert(⊂rawFlag)∊0 1
r←↑registries.(alias uri port priority noCaching api_key)
:If (,1)≢,showApiKey
r[;2⊃⍴r]←⊂'***'          ⍝ Replace API key by Asterisks
:EndIf
:If ~rawFlag
r←((,[0.5]'Alias' 'URI' 'Port' 'Priority' '~caching' 'API-key'),[1]' ')⍪r
r[2;]←(⌈⌿≢¨r)⍴¨'-'
:EndIf
⍝Done
∇
∇ {r}←ReplaceRegistry registry;ind;reg;priority
⍝ Replaces the definition of a Registry in the user settings.\\
⍝ If that Registry does not already exist an error is thrown.\\
⍝ `⍵` must be an instance of the "Registry" class.\\
⍝ `←` is always `⍬` (shy).
:Access Public Instance
r←⍬
'There is no such registry yet'Assert 0<≢_registries
:If 0>registry.⎕NC⊂'id'    ⍝ Old stuff might lack ID (introduced with 0.74.0)
ind←_registries.id⍳⊂registry.id
:Else
ind←_registries.uri⍳⊂registry.uri
:EndIf
'There is no such registry yet'Assert(≢_registries)≥ind
:If ∨/'[DefineRegistry]'⍷⍕registry  ⍝ Instance of the "DefineRegistry" class?
priority←_registries[ind].priority
_registries[ind]←registry.Get ⍬
:If ⎕NULL≡_registries[ind].priority
_registries[ind].priority←priority ⍝ Inherit from predecessor
:EndIf
:Else
reg←⎕NEW home.DefineRegistry(,⊂registry)
_registries[ind]←reg.Get ⍬
:EndIf
∇
∇ flag←Exist uriOrAlias
⍝ Checks whether `uriOrAlias` is defined as a Registry in the user settings.
:Access Public Instance
flag←∨/EqualsAliasOrName uriOrAlias
∇
∇ {r}←RemoveRegistry idOrUriOrAlias;bool
⍝ Removes a Registry from the user settings.\\
⍝ `⍵` can be either an id or a uri or an alias.\\
⍝ `←` is 1 in case something was removed and 0 otherwise.
:Access Public Instance
:If 0=≢_registries
r←0
:Else
'You MUST NOT delete the very last registry!'Assert 1<≢_registries
:If 0=≢_registries
r←0
:Else
:If (⊂idOrUriOrAlias)∊_registries.id  ⍝ Is it a UUID?
bool←_registries.id≢¨⊂idOrUriOrAlias
:Else
bool←~EqualsAliasOrName idOrUriOrAlias
:EndIf
_registries←bool/_registries
r←∨/~bool
:EndIf
:EndIf
∇
∇ r←GetRegistry idOrUriOrAlias;bool
⍝ Returns a Registry (as a namespace) or `⍬` in case the requested registry does not exist.
⍝ `⍵` can be either a name or an alias.\\
:Access Public Instance
'No Registry defined in the user settings'Assert 0<≢_registries
:If ~∨/bool←_registries.id≡¨⊂idOrUriOrAlias   ⍝ Is it a UUID?
:AndIf 0=+/bool←EqualsAliasOrName idOrUriOrAlias
('Registry <',idOrUriOrAlias,'> not found in user settings'Assert∨/bool
:EndIf
'Unknown'Assert 0<+/bool
'Found more than two Registries'Assert 1=+/bool ⍝ idOrUriOrAlias might be found more than once but with different aliases and API keys
r←(bool⍳1)⊃_registries
∇
∇ r←Delete flag;filename;buff
⍝ Call this in order to delete the currently instantiated user settings file.\\
⍝ Returns 1 in case the file was successfully deleted otherwise (Blocked by another process, already deleted...)
:Access Public Instance
r←0
:If flag
filename←_path2config,cfg_name
:AndIf F.IsFile filename
r←F.DeleteFile filename
(⊂'')F.NPUT(home.GetUserHomeFolder'.tatin')1
:EndIf
∇
∇ {r}←Save flag;tmp;del;json
:Access Public Instance
r←⍬
:If flag
json←GetJSON5
tmp←'tmp'F.GetTempFilename2 cfg_name
{}(⊂json)F.NPUT tmp 1
{}F.DeleteFile path2config
{}path2config(⎕NMOVE home.Reg.F.ExecNfunction)tmp
_fileTimestamp←GetFileTimestamp _path2config
:EndIf
∇
∇ {r}←MakeDefaultFile flag;defaultFolder
:Access Public Instance
⍝ Checks whether the current file is in a non-standard location. If that it the case it will create or overwrite
⍝ any file `.tatin` in the default folder, and add the path to the current user settings file.
r←0
:If flag
defaultFolder←AddSlash home.GetUserHomeFolder''
:AndIf ≢/F.NormalizePath _path2config defaultFolder  ⍝ Not in default folder?!
(⊂_path2config)F.NPUT(defaultFolder,'.tatin')1
r←1
:EndIf
∇
⍝ ------------------- Private stuff
Assert←{⍺←⊢ ⋄ 0∊⍵:⍺ ⎕SIGNAL ErrorNo ⋄ shy←0}
∇ r←GetJSON5;ns
ns←⎕NS''
ns.registries←_registries
ns.source←_source
ns.caching←_caching
ns.path2cache←_path2cache
ns.license←_license
r←home.Reg.JSON ns
∇
∇ bool←EqualsAliasOrName y;alias;uri;msg;uri_;port
⍝ Returns a vector of booleans.\\
⍝ Interprets `⍵` as an alias in case is carries `[]` and as an URI otherwise.
:If '['∊y
alias←{⎕C ⍵~'['}{⍵↑⍨¯1+⍵⍳']'}y
bool←alias∘≡¨_registries.alias
:Else
uri←F.EnforceSlash y
:If ##.Reg.IsHTTP uri
uri←{⍵/⍨3>+\⍵='/'}uri
:EndIf
uri←AddSlash uri
:If ':'∊home.RemoveHttpProtocol uri
port←⊃(//)⎕VFI{1↓⍵↑⍨-':'⍳⍨⌽⍵}¯1↓uri
:Else
port←0 80 443
:EndIf
uri_←':[0-9]+\/'⎕R'/'⊣uri      ⍝ Remove potential port number
bool←(⊂uri_)≡¨_registries.uri
:If 1<≢port
bool∧←_registries.port∊¨⊂port
:Else
bool∧←_registries.port=port
:EndIf
:EndIf
∇
∇ {r}←Read dummy;ns;b
⍝ Reads the Client's config file
r←⍬
ns←⎕NS home.Reg.GetJsonFromFile path2config
:If 0=ns.⎕NC'license'
⍝ Introduced in 2023-02
ns.license←''
:EndIf
:If 0=ns.⎕NC'maintainer'
⍝ Introduced in 2023-10
ns.maintainer←''
:EndIf
:If 0=ns.⎕NC'group'
⍝ Introduced in 2023-10
ns.group←''
:EndIf
ns.registries.uri←{f←'\\'≡2⍴⍵ ⋄ AddSlash(f/'\\'),##.F.EnforceSlash(2×f)↓⍵}¨ns.registries.uri
:If 0<≢ns.registries
:If {(≢∪⍵)≠≢⍵}ns.registries.(uri alias)
('There are non-unique entries in ',path2config,' for uri+alias')Assert 0
:EndIf
_registries←ns.registries[⍋ns.registries.priority]
:Else
_registries←⍬
:EndIf
_fileTimestamp←GetFileTimestamp _path2config
:If 0<≢_registries
:If 0<+/b←0=⊃¨_registries.⎕NC⊂'id'
A(b/_registries).{⎕THIS.id←⍺.Create_UUID}0  ⍝ Was introduced in 0.74.0
:EndIf
_registries.alias←_registries.alias~¨' '
:If 0<+/b←0=⊃¨_registries.⎕NC⊂'noCaching'
(b/_registries).{⎕THIS.noCaching←⍵}0  ⍝ Was introduced in 0.63.0
:EndIf
:EndIf
_source←ns.source
_license←ns.license
_group←ns.group
_maintainer←ns.maintainer
∇
∇ r←GetFileTimestamp filename
r←3 ⎕NINFO filename
∇
AddSlash←{⍵,(~(¯1↑⍵)∊'/\')/'/'}
∇ {r}←AddPrincipalServer dummy;buff;reg
r←⍬
buff←⎕NS''
buff.alias←'tatin'
buff.uri←'https://tatin.dev'
buff.id←A.Create_UUID   ⍝ Required by the ReplaceRegistry function
reg←⎕NEW home.DefineRegistry(,⊂buff)
AddRegistry reg
∇
∇ {r}←AddTestServer dummy;buff;reg
r←⍬
buff←⎕NS''
buff.api_key←'Tatin-Test-API-Key'
buff.alias←'tatin-test'
buff.uri←'https://test.tatin.dev'
buff.id←A.Create_UUID   ⍝ Required by the ReplaceRegistry function
buff.priority←0
reg←⎕NEW home.DefineRegistry(,⊂buff)
AddRegistry reg
∇
:EndClass
ValidateAPI←{
api←,⍵.api
0=≢api:⍵
'Package property "api" is invalid (nested)'Assert 1=≡api:
'Package property "api" is invalid (name)'Assert 0=(⎕NS'').⎕NC api:
'Package property "api" is invalid (path)'Assert~∨/api∊'⎕#':
⍵
}
cfg←ValidateAPI2(cfg projectPath);extension;type;extensions;files;ind
extension←⎕C 3⌷⎕NPARTS cfg.source
extensions←'.aplf' '.aplo' '.aplc' '.apli' '.apln' '.apla' '.dyalog'
:If 0<≢cfg.api
:If extension∊extensions
type←(extensions⍳extension)⊃'Function' 'Operator' 'Class' 'Interface' 'Namespace' 'Array' 'Script'
('Source ',cfg.source,' (',type,') does not exist')Assert ⎕NEXISTS projectPath,cfg.source
:Else
files←↑1↓¨⎕NPARTS¨{(≢⍵)↓¨⊃F.Dir ⍵,'/*'}projectPath,F.AddTrailingSep cfg.source
'API does not exist'Assert(1↑'.'(≠⊆⊢)cfg.api)∊files[;1]
ind←files[;1]⍳1↑'.'(≠⊆⊢)cfg.api
'API is defined but neither a namespace nor a script'Assert files[ind;2]∊'' '.apln' '.aplc'
:EndIf
:EndIf
⍝Done
ns←ValidateAplVersion ns;f;v
:If 0=ns.⎕NC'minimumAplVersion'
ns.minimumAplVersion←'18.0'
:EndIf
(f v)←⎕VFI ns.minimumAplVersion
'"minimumAplVersion" must be a char vector like "18.0"'Assert 1=≢f
'"minimumAplVersion" must be a char vector like "18.0"'Assert 1≡⊃f
'"minimumAplVersion" must be "18.0 or higher"'Assert 18≤v
⍝Done
{r}←x ValidateAssets y;msg
r←0
:If {⍺≡(≢⍺)↑⍵}/F.EnforceSlash¨x y
y←(≢x)↓y
:EndIf
:If 0<≢y
msg←'"assets" must be addressed by a relativ path'
msg Assert'/'≠1⍴y
msg Assert'./'≢2⍴y
⍝ Though on non-Windows platforms the colon might be part of a path we don't allow this anyway
msg Assert~':'∊y
:If ~F.IsDir x,y
'"assets" must be a folder but does not exist'Assert F.IsDir 1⊃⎕NPARTS x,y
:EndIf
:EndIf
⍝Done
ValidateConfig←{
(cfg projectPath)←⍵
req←'group' 'name' 'version'
_←'Missing required fields'Assert∧/req∊cfg.⎕NL-2:
_←'"source" must not be empty'Assert 0<≢cfg.source:
_←'group'ValidateName cfg.group
_←'name'ValidateName cfg.name
_←ValidateVersion cfg.version
_←ValidateLX cfg
cfg←projectPath ValidateExclude cfg
cfg←ValidateAPI cfg
cfg←ValidateAPI2 cfg projectPath
0=≢cfg.assets:shy←0
_←{projectPath ValidateAssets ⍵}¨,⊆cfg.assets
1:shy←0
}
ValidateDescription←{
ns←⍵
'"description" must not be empty'Assert 0<≢ns.description:
ns
}
ValidateDocumentation←{
doc←,⍵.documentation
0=≢doc:⍵
IsHTTP doc:⍵
'./'≡2⍴doc:⍵
'Package property "documentation" is invalid'Assert'⎕THIS.'{⍺≡1 ⎕C(≢⍺)↑⍵}doc:
doc←(≢'.⎕THIS')↓doc
'Package property "documentation" is invalid'Assert 0<≢doc:
list←'.'(≠⊆⊢)doc   ⍝ Might well be something like "Help.View"
'Package property "documentation" is invalid'Assert 0=+/{⊃(⎕NS'').⎕NC ⍵}¨list: ⍝ All valid APL names?
⍵  ⍝ Unfortunately we cannot check the name for pointing to something that exists at this stage
}
ValidateExclude←{
0=cfg.⎕NC'exclude':cfg
0=≢cfg.exclude:cfg
exclude←∪A.(DLB DTB)','(≠⊆⊢)cfg.exclude
projectPath←⍺
b←⎕NEXISTS(⊂(F.AddTrailingSep projectPath),F.AddTrailingSep cfg.source),¨exclude
('Not a valid path for "exclude": ',(~b){0=+/⍺:'' ⋄ ⊃{⍺,', ',⍵}/⍺/⍵}exclude)Assert∧/b:
cfg
}
ValidateFiles←{
⍝ Validate "files": must all be files, and must exist
path←⍺
files←','(≠⊆⊢)cfg.files
bool←F.IsFile path∘,¨files
∧/bool:⍵
('"files": ',(⊃{⍺,',',⍵}/(~bool)/files),' not found/not a directory')Assert 0
}
ValidateLX←{
0=cfg.⎕NC'lx':⍬                                    ⍝ Because it is optional
0=≢cfg.lx:⍬
'"lx" is not a string'Assert 0 2∊⍨10|⎕DR cfg.lx:   ⍝ Must be char
'"lx" is not a valid APL name'Assert ¯1≠(⎕NS'').⎕NC cfg.lx:
⍬
}
ValidateMaintainer←{
⍝ ⍵.maintainer may be one of:
⍝ any@email.address
⍝ John.Doe <any@email.address>
⍝ "John Doe" <any@email.address>
maintainer←A.DLB A.DTB,⍵.maintainer
0=≢maintainer:⍵
'Package property "maintainer" is invalid (does not contain a single @)'Assert'@'+.=maintainer:
'Package property "maintainer" is invalid'Assert 1≤'.'+.={⍵↓⍨⍵⍳'@'}maintainer:
0=+/'><'∊maintainer:⍵
'Package property "maintainer" is invalid'Assert'<'≠1⍴maintainer:
'Package property "maintainer" is invalid'Assert 1 1≡(⊂maintainer)+.=¨'<>':
'Package property "maintainer" is invalid'Assert 1 1 0≡1↓<\0,maintainer⍳'<@>':
(name email)←{⍵{((⍵-1)↑⍺)(⍵↓⍺)}¯1+⍵⍳'<'}maintainer
name~←'"\'                     ⍝ Remove double quotes and escape characters
maintainer←name,' ',email
⍵.maintainer←maintainer
⍵
}
ValidateName←{
('"',⍺,'" is not a string')Assert 0 2∊⍨10|⎕DR ⍵:
','∊⍵:⍺(∇{(⍺,':',⍵)⍺⍺ ⍵})¨','(≠⊆⊢)⍵
('"',⍺,'" is not a valid APL name')Assert 0=(⎕NS'').⎕NC ⍵:
('"',⍺,'" is not pure ASCII')Assert~∨/127<⎕UCS ⍵:
1:shy←0
}
ns←{initFlag}ValidateOSprops ns;list;vals;tags;b1;b2;b3;b
⍝ Check all proper that start with "os_" for beeing Boolean, and at least one of them is
⍝ That way an OS can be added without the need to change this fn
initFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'initFlag'
:If 0<≢list←' '~⍨¨↓'os_'{(((≢⍺)↑[2]⍵)∧.=⍺)⌿⍵}'o'ns.⎕NL 2
vals←ns.⍎¨list
('Must be Boolean: ',{0=≢⍵:⍵ ⋄ ⊃{⍺,', ',⍵}/⍵}(~b)/vals)Assert∧/b←vals∊0 1
:AndIf 0=∨/vals
⍝ Because with 0.81.0 we've introduced the os_* properties and deprecated the tags "linux", "mac-os" and "windows"
tags←','(≠⊆⊢){','@(⍸';'=⍵)⊢⍵}ns.tags
b1←∨/('linux' 'lin')∊tags
b2←∨/'macos' 'mac-os' 'mac'∊tags
b3←∨/('windows' 'win')∊tags
ns.(os_lin os_mac os_win)←b1,b2,b3
:EndIf
:If ~initFlag
'At least one of os_lin, os_mac, os-win must be 1'Assert∨/ns.(os_lin os_mac os_win)
:EndIf
⍝Done
ValidatePackageFiles←{
⍺←''
cfg←⍵
0=cfg.⎕NC'assets':cfg⊣cfg.assets←''
1=≡cfg.assets:cfg
cfg.assets←⊃{⍺,',',⍵}/cfg.assets
cfg
}
cfg←ValidateTags cfg;tags;b;plural;msg;tags_
:If 0<cfg.⎕NC'tags'
tags←cfg.tags
tags←⎕C tags
tags←','@(⍸';'=tags)⊣tags
b←tags∊(⎕C ⎕A),⎕D,' -∆⍙,'
:If ~∧/b
b←~b
plural←(1<+/b)/'s'
msg←'Package propert',((1+1<+/b)⊃'y' 'ies'),' "tag',plural,'" contains ',((1=+/b)/'an '),'invalid character',plural,': ',(b/tags)
msg Assert 0
:EndIf
tags_←' '~⍨¨','(≠⊆⊢)tags
cfg.tags←tags
:EndIf
⍝Done
{r}←ValidateVersion version;bool;version2;ind;buildNo
r←⍬
'"version" is not a string'Assert 0 2∊⍨10|⎕DR version                          ⍝ Must be char
'"version" is invalid'Assert 2='.'+.=version                                ⍝ Two dots: no lesss, no more
'"version" is ill-formed'Assert 0='-'+.={⍵↑⍨¯1+⍵⍳'.'}version                   ⍝ No hyphen before the first dot
(version2 buildNo)←Reg.SplitVersionFromBuild version
'Build number must be nothing but digits'Assert∧/buildNo∊⎕D
'"version" is invalid'Assert 0≠≢'^\d+\.\d+\.\d[_\d\-a-zA-Z]*$'⎕S 0⊢version2    ⍝ Must be {no}.{no}.{patch}
⍝Done
r←Version
⍝ Returns "name", "version" and "date".
r←##.Registry.Version
WinLowercase←{
Reg.IsWindows:⍵
1<≡⍵:∇¨⍵
⎕C ⍵
}
{cfg}←{check}WritePackageConfigFile(path cfg);qdmx;cfg_file;tmp
⍝ Write package config file to disk.\\
⍝ By default several properties are checked and an error is thrown in case something is not quite right.\\
⍝ This can be changed by passing a 0 as ⍺. In this case the checks are **not** performed.
check←{0<⎕NC ⍵:⍎⍵ ⋄ 1}'check'
cfg←InitPackageConfig cfg
:If check
'"source" must not be empty'Assert 0<≢cfg.source
:EndIf
'"source" must be simple'Assert 1=|≡cfg.source
'"source" must be character'Assert' '=1↑0⍴cfg.source
path←⊃1 ⎕NPARTS path,'/'
cfg_file←path,CFG_Name
:If check
{}ValidateVersion cfg.version
cfg←ValidatePackageFiles cfg
cfg←check ValidateOSprops cfg
cfg←ValidateTags cfg
cfg←ValidateAPI cfg
cfg←ValidateDocumentation cfg
:If 0=≢cfg.license
cfg.license←MyUserSettings.license
:EndIf
cfg←ValidateMaintainer cfg
cfg←path ValidateExclude cfg
cfg←path ValidateFiles cfg
⍝ Note that we cannot validate the license, that's up to the server.
'Invalid: "assets" - not a path'Assert~','∊cfg.assets
cfg.assets←path PolishAssetsPaths cfg.assets
path ValidateAssets cfg.assets
{}path CheckAssetsExist cfg.assets
:EndIf
'Invalid package name'Assert 0=(⎕NS''){0=≢⍵:0 ⋄ ⍺.⎕NC ⍵}cfg.name
tmp←cfg_file,'.tmp'
:Trap ((⊂,##.Client.DEBUG)∊,¨'on' 1)↓0
{}cfg.⎕EX'∆List'
{}(Reg.JSON cfg)Reg.SaveJSON tmp 1
:If ⎕NEXISTS cfg_file
('Unable to replace ',cfg_file)Assert F.DeleteFile cfg_file
:EndIf
⎕DL 0.01
{}cfg_file(⎕NMOVE Reg.F.ExecNfunction)tmp
:Else
qdmx←⎕DMX
qdmx.EM ⎕SIGNAL qdmx.EN
:EndTrap
⍝Done
YesOrNo←{⍺←⊢ ⋄ ⍺ CommTools.YesOrNo ⍵}
:Class CodeCoverage
⍝ # The class `CodeCoverage`
⍝ This class provides methods to watch certain parts of the workspace being executed, presumably as part of running
⍝ a test framework such as [`Tester2`](https://github.com/aplteam/Tester2 "Link to Tester2 on GitHub"), although checking
⍝ on code coverage by simply running an application can also be useful, especially for legacy code.\\
⍝ To do this, the following steps need to be performed:
⍝ ## Prepare
⍝ * Instantiate `CodeCoverage` and pass a comma-separated list of namespaces and/or classes to monitor as an argument
⍝   to `⎕NEW`.
⍝ * You may want to set the following two properties to customize `CodeCoverage` to your needs:
⍝   * `ignore`: comma-separated list of fully qualified names of functions, operators, namespaces and scripts to
⍝      ignore.
⍝   * `filename`: name used for three different files:
⍝     * To save the `⎕PROFILE` data in a component file with the extension `.profile`
⍝     * To save the canonical representations of the code in a component file with the extension `.cr`
⍝     * To save the HTML report with the `.html` extension\\
⍝     The collected data and the list of namespaces/classes to watch can be referenced as `data` and
⍝     `watch` but _not_ set: they are read-only instance properties.\\
⍝ ## Running the code
⍝ You must call the `Start` method before executing any code that is to be be watched for coverage. Assuming that
⍝ the instance has been assigned to `C` then call `C.Start ⍬`.\\
⍝ Once all the code you are interested in has been executed call `C.Stop ⍬`.\\
⍝ When the test framework is finished, run `C.Finalise ⍬`.\\
⍝ **Notes:**
⍝ * You can stop and restart again as many times as you like. This can be useful to avoid `⎕PROFILE` collecting
⍝   data while a test framework is running rather than the application you are interested in: `⎕PROFILE` is expensive!
⍝ * You can run the test framework again, say on a different platform: if the `filename` property points to an already
⍝   existing component file, additional data is added by appending more components.
⍝ * The first component self-documents such a DCF file.\\
⍝ ## Generating a report
⍝ To create a meaningful report, call the shared method `CodeCoverage.ProcessDataAndCreateReport` and
⍝ pass `C.filename` (or a character vector containing the filename) as the right argument.\\
⍝ This method will aggregate the data, massage it, process it and finally create an HTML report from it.\\
⍝ Note that by default the report is not verbose, i.e. only the (fully qualified) names of all functions
⍝ and operators that were not executed at all and all the names of functions and operators that were only partially
⍝ executed are reported together with the lines not executed and the total number of lines.\\
⍝ This is a good place to start. Usually this leads to extending the list of things to ignore, adding more
⍝ test cases, deleting blocks of code that have become obsolete etc.\\
⍝ At one point, however, or may want the full details: to do this, add a 1 as the left argument when calling
⍝ `CodeCoverage.ProcessDataAndCreateReport`. Now the canonical representations of all functions and operators that are
⍝ only partially covered will become part of the report. The lines that weren't executed are highlighted (bold) and have
⍝ a right-pointing arrow on the left.\\
⍝ ## Limitations and flaws
⍝ * Nested namespaces/classes are currently not processed. This restriction may be lifted in a future release.
⍝ * Named dfns kept local within a traditional function are not processed correctly. This is a consequence of a
⍝   flaw of `⎕PROFILE`. This cannot be overcome without changing `⎕PROFILE`.\\
⍝ This class is part of the APLTree Open Source project.\\
⍝ Home page: <https://github.com/aplteam/CodeCoverage>\\
⍝ Kai Jaeger
⎕IO←1 ⋄ ⎕ML←1
:Field Public Shared Info←''             ⍝ Strictly speaking this should not be shared, but then CodeCoverage should not run in multiple instances anyway
∇ r←Version
:Access Public Shared
r←'CodeCoverage' '0.10.7+52' '2024-06-05'
∇
∇ History
:Access Public Shared
⍝ * 0.10.7 from 2024-06-05
⍝   * Bug fixes
⍝     * A comma-separated list as argument to ⎕NEW caused a LENGTH ERROR
⍝     * CodeCoverage tests attempted to act on itself - that cannot work properly because the tests overwrite ⎕PROFILE
⍝ * 0.10.6 from 2024-01-30
⍝   * Neither `#` nor `⎕SE` were allowed
⍝ * 0.10.5 from 2024-01-12
⍝   * Link to `Tester2` in the documentation corrected
⍝ * 0.10.4 from 2024-01-12
⍝   * Packages updated
⍝ * 0.10.3 from 2023-04-23
⍝   * Bug fix: Instance names could not be assigned to "ignore"
⍝ * 0.10.2 from 2023-04-09
⍝   * On non-Windows platforms the file access matrix needs setting to avoid problems
⍝ * 0.10.1 from 2023-04-08
⍝   The `CreateListingForFnsAndOpr` function deleted the "*.cr" file when it should not have
⍝ * 0.10.0 from 2023-03-23
⍝   * New function `DeleteFiles` added for getting rid of the two reporting files create/used by `CodeCoverage`, and
⍝     optionally also of the HML file
⍝   * Bug fix: ∆STOPPED caused a VALUE ERROR nothing wa actually executed
∇
:Field Public Shared Readonly APL_Chars←'ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyzÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïðñòóôõöøùúûüþ0123456789∆⍙',⎕ucs (80=⎕dr' ')/9397+⍳26
∇ make1(watch_)
:Access Public Instance
:Implements Constructor
:Access Public
_ignore←''
:If ~(⊃watch_)∊'#⎕'
:AndIf 0<≢1↓⎕RSI
:AndIf 0<(⊃1↓⎕RSI).⎕NC watch_
watch_←(⊃1↓⎕NSI),'.',watch_
:EndIf
⎕SIGNAL/{0∧.≠⍵:''⍬ ⋄ ('Not found: ',watch_)6}⎕NC watch_
watch←'⎕se'⎕R'⎕SE'⍠('IC' 1)⊣watch_
_filename←(739⌶0),'/CodeCoverage-',' '~⍨⍕⎕TS
_data←0 2⍴''
∆STOPPED←0
∇
∇ Close
:Implements destructor
⎕PROFILE'clear'
∇
:Property data
⍝ Matrix with two columns and as many rows as there are observations collected by `⎕PROFILE`.\\
:Access Public Instance
∇ r←Get
r←_data
∇
:EndProperty
:Property ignore
⍝ Either empty or a comma-separated list of fully qualified function, operator class and namespace names
⍝ that should be ignored when compiling the coverage report.\\
⍝ Note that in case it is an ordinary namespace this means that all objects in that namespace will be ignored,
⍝ including any sub-namespaces.
:Access Public Instance
∇ r←Get
r←','(≠⊆⊢),_ignore
∇
∇ set value;v;noOf
:If 0=noOf←+/∧\1=≡¨value.NewValue
v←∊value.NewValue
:Else
v←(⊃{⍺,',',⍵}/noOf↑value.NewValue),noOf↓value.NewValue
:EndIf
'Must be character vector'⎕SIGNAL 11/⍨' '≠1↑0⍴v
('Has invalid characters',b/v)⎕SIGNAL 11/⍨∨/b←~v∊APL_Chars,',⎕#.'
_ignore←v
∇
:EndProperty
:Property watch
⍝ A comma-separated list of namespaces and/or classes that are going to be watched for coverage,
:Access Public Instance
∇ r←Get
r←_watch
∇
∇ set value;v;b;v2
v←∊value.NewValue
'Must be character vector'⎕SIGNAL 11/⍨' '≠1↑0⍴v
('Has invalid characters',b/v)⎕SIGNAL 11/⍨∨/b←~v∊APL_Chars,',⎕#.'
v2←','(≠⊆⊢),v
:If ~∧/v2∊,¨'#' '⎕SE'
:If ∨/~b←0<⎕NC↑v2
11 ⎕SIGNAL⍨'Unknown names: ',⊃{⍺,',',⍵}/(~b)/v2
:EndIf
:EndIf
_watch←v2
∇
:EndProperty
:Property filename
:Access Public Instance
⍝ By default `filename` is a temporary file. However, you can specify your own filename here, with or without
⍝ an extension.\\
⍝ Note that this name will also be used to create the HTML file, just with a different extension.
∇ r←get
r←_filename
∇
∇ set value;v
v←value.NewValue
'Invalid depth'⎕SIGNAL 11/⍨~(≡v)∊0 1
'Must be a character vector'⎕SIGNAL 11/⍨' '≠1↑0⍴∊v
_filename←⊃,/2↑⎕NPARTS v
∇
:EndProperty
∇ {r}←{htmlFile}DeleteFiles filename
⍝ Delete both files created by `CodeCoverage` with the extensions `.profile` and `.cr`.\\
⍝ `filename` must be a single filename with path but without extension.\\
⍝ `htmlFile` defaults to 0, meaning that `filename` with an extension `.html` will not be deleted.
⍝ By specifying a 1 as left argument you can enforce it to be deleted.\\
⍝ `R` is an integer with the number of files deleted.
:Access Public Shared
'Right argument must be a simple character vector'Assert(≡filename)∊0 1
'Right argument must be a simple character vector'Assert' '=1↑0⍴filename
'You MUST not specify a file extension'Assert~'.'∊3⊃⎕NPARTS filename
r←0
htmlFile←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'htmlFile'
'The optional left argument must be 0 (default) or 1'Assert(⊂htmlFile)∊0 1
:If IsFile filename,'.profile'
r+←⎕NDELETE filename,'.profile'
:EndIf
:If IsFile filename,'.cr'
r+←⎕NDELETE filename,'.cr'
:EndIf
:If htmlFile
:AndIf IsFile filename,'.html'
r+←⎕NDELETE filename,'.html'
:EndIf
∇
∇ htmlFilename←{verbose}ProcessDataAndCreateReport filename;details;watch;dcfFilename
⍝ Takes the name of a component file created by first instantiating `CodeCoverage` and then calling
⍝ the instance methods `Start`, `Stop` and `Finalise`.\\
⍝ The components containing the `⎕PROFILE` data (11 and running) are then read, aggregated, massaged and
⍝ finally stored in the tenth component.\\
⍝ A report is then generated from the aggregated data and saved on disk.
⍝ `filename` is used for both, identifying the DCF file and the HTML, only the extensions are different.\\
⍝ The optional left argument `verbose` defaults to 0, which means that the code of the functions and operators
⍝ that are only partially covered will to be listed.\\
⍝ However, by specifying a 1 as left argument you can force the canonical representations of these functions
⍝ and operators to become part of the report with any lines that were not executed highlighted.\\
⍝ Note that this function can be called more than once on the same component file. It just wastes some resources
⍝ calculating the result again, which is not necessary. However, as long as the number of functions and operators
⍝ is not very large that does not matter much. If it does matter then call `ProcessData` and `CreateReport` instead:
⍝ that is all this function does anyway.
:Access Public Shared
dcfFilename←(⊃,/2↑⎕NPARTS filename),'.profile'
'File not found'⎕SIGNAL 11/⍨0=⎕NEXISTS dcfFilename
verbose←{0=⎕NC ⍵:0 ⋄ ⍎⍵}'verbose'
{}ProcessData dcfFilename
htmlFilename←verbose CreateReport filename
∇
∇ filename←{verbose}CreateReport filename;html;tally;caption;b;buff2;linkAndName;buff3;dcfFilename;tno;watched;data;watch;ignore;align;runs;buff
⍝ This function creates an HTML file containing a coverage report from the data collected during the execution of an application.\\
⍝ You must call `ProcessData` first: this function relies on the data being aggregated.\\
⍝ If the file extension of `filename` is not ".html" this will be enforced.\\
⍝ The optional ⍺ (`verbose`) defaults to 0, meaning that no code listings are part of the report.
:Access Public Shared
dcfFilename←(⊃,/2↑⎕NPARTS filename),'.profile'
'File not found'⎕SIGNAL 11/⍨0=⎕NEXISTS dcfFilename
tno←dcfFilename ⎕FSTIE 0
watched←⎕FREAD tno,2
data←⎕FREAD tno 10
watch←⎕FREAD tno 2
ignore←⎕FREAD tno 3
runs←⎕FREAD tno 4
⎕FUNTIE tno
verbose←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'verbose'
html←''
html,←⊂'<!DOCTYPE html>'
html,←⊂'<html lang="en">'
html,←⊂'<head>'
html,←⊂'<title>Coverage</title>'
html,←⊂'<meta charset="utf-8"/>'
html,←⊂'<style>'
html,←GetScreenCss
html,←GetPrintCss
html,←⊂'</style>'
⍝ Download package with all needed components from DataTables CDN
html,←⊂'<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/jq-3.6.0/dt-1.11.2/b-2.0.0/b-print-2.0.0/fh-3.1.9/r-2.2.9/datatables.min.css"/>'
html,←⊂'<script type="text/javascript" src="https://cdn.datatables.net/v/dt/jq-3.6.0/dt-1.11.2/b-2.0.0/b-print-2.0.0/fh-3.1.9/r-2.2.9/datatables.min.js"></script>'
html,←⊂'</head>'
html,←⊂'<body>'
html,←⊂'<h1 id="top">Coverage Report</h1>'
:If 0<≢Info
html,←⊂'<p class="info">',(ExchangeHtmlSpecialChars Info),'</p>'
:EndIf
:If 0=≢data
html,←⊂'<p>Nothing to report at all</p>'
:Else
tally←≢data[;4]
caption←⊃,/{⍺,', ',⍵}/watched
html,←⊂'<p>Watched: ',(⍕tally),' fns/opr within <code>',caption,'</code></p>'
:If 1=≢runs
html,←⊂'<p>The test suite was executed once:</p>'
:Else
html,←⊂'<p>The test suite was executed ',(⍕≢runs),' times:</p>'
:EndIf
html,←⊂'<table>'
html,←⊂'<thead>'
html,←⊂{'<tr>',(⊃,/{'<th>',⍵,'</th>'}¨⍵),'</tr>'}'Executed at' 'APLVersion' 'Memory (MB)'
html,←⊂'</thead>'
html,←⊂'<tbody>'
html,←{'<tr>',(⊃,/{'<td>',⍵,'</td>'}¨⍵),'</tr>'}¨↓runs
html,←⊂'</tbody>'
html,←⊂'</table>'
:If 0<≢∊data[;2 4]
html,←⊂'<p>Overall ',(⍕⌊0.5+100×÷/+⌿≢¨data[;2 4]),'% of the testable code is covered.</p>'
html,←⊂'<p>(Comment lines, empty lines, all <code>:End</code>* lines etc. are ignored)</p>'
:EndIf
html,←⊂'<p>',(⍕data[;3]+.=100),' of the fns/opr are 100% covered.</p>'
b←~data[;3]∊0 100
data←{⍵[⍋⍵[;3];]}data
html,←⊂'<div id="partly-covered" class="keep-together">'
html,←⊂'<table id="percent">'
html,←⊂'<thead>'
align←'left' 'left' 'left' 'right'
html,←⊂{'<tr>',⍵,'</tr>'}⊃,/align{'<th style="text-align:',⍺,';">',⍵,'</th>'}¨'Function/Operator' 'Lines not executed' 'Coverage' '≢'
html,←⊂'</thead>'
html,←⊂'<tbody>'
:If 0<≢buff←((≢data),3)⍴0
data[;2]←data[;4]~¨data[;2]   ⍝ From "executed" to "not executed"
buff[;1]←{4>≢⍵:{0=≢⍵:⍵ ⋄ ⊃{⍺,', ',⍵}/⍵}⍕¨⍵ ⋄ (⍕≢⍵),'←≢',Shorten ⍵}¨data[;2]
buff[;2]←data[;3]
buff[;3]←⍕∘≢¨data[;4]
:If verbose
linkAndName←data[;1]{'<a href="#listing_',⍵,'" title="Link to listing">',⍺,'</a>'}∘⍕¨⍳≢data
buff3←linkAndName{'<td>',⍺,'</td><td>',(1⊃⍵),'</td><td>',(⍕2⊃⍵),'</td><td>',(3⊃⍵),'</td>'}¨↓buff
:Else
buff3←data[;1]{'<td>',⍺,'</td><td>',(1⊃⍵),'</td><td>',(⍕2⊃⍵),'</td><td>',(3⊃⍵),'</td>'}¨↓buff
:EndIf
html,←(↓buff){'<tr',({⍵=3:'' ⋄ ' class="',(⍵⊃'unc' 'fullyC'),'overed"' ⋄ }0 100⍳2⊃⍺),'>',⍵,'</tr>'}¨buff3
:EndIf
html,←⊂'</tbody>'
html,←⊂'</table>'
html,←⊂'</div>'
html,←AddJavaScript buff
:If verbose
html,←⊂'<h2>Listings</h2>'
html,←CreateListingForFnsAndOpr data
:EndIf
:EndIf
html,←⊂'<div id="footer">'
html,←⊂'<hr>'
html,←⊂'<p>Created by "CodeCoverage" version ',(2⊃Version),' from ',(3⊃Version),'</p>'
html,←⊂'</div>'
html,←⊂''
html,←⊂'</body>'
html,←⊂'</html>'
filename←(⊃,/2↑⎕NPARTS filename),'.html'
(⊂html)⎕NPUT filename 1
∇
∇ html←AddJavaScript data
html←''
→(0=≢data)/0
html,←⊂'<script>'
html,←⊂'$(document).ready(function() {'
html,←⊂'    var oTable;'
html,←⊂'    oTable = $("#percent").DataTable( {'
html,←⊂'        paging:   false,'
html,←⊂'        ordering: true,'
html,←⊂'        info:     true,'
html,←⊂'        fixedHeader: true,'
⍝     html,←⊂'        order: [2,"desc"],'
html,←⊂'        order: [2,"asc"],'
html,←⊂'        dom: "Bft",'
html,←⊂'        drawCallback: function( settings ) {'
html,←⊂'             var api = this.api();'
html,←⊂'             $(''.header[id^="listing_"]'').next().addBack().css("display","none");'  ⍝ hide all lines
html,←⊂'             api.rows( {page:"current"} ).data().each(function(data){'
html,←⊂'              id = data[0];'
html,←⊂'              id = id.match(/"(\#.*?)"/);'
html,←⊂'              if (id){$(id[1]).next().addBack().css("display","block");}'  ⍝ show header and following code
html,←⊂'             })'
html,←⊂'        },      '
html,←⊂'        buttons: ['
html,←AddJavaScriptButton('Partly covered' '50%'(+/~data[;2]∊0 100)'^(?!(0%|100%)).*')
html,←AddJavaScriptButton('Uncovered' '0%'(+/data[;2]=0)'^0%')
html,←AddJavaScriptButton('Fully covered' '100%'(+/data[;2]=100)'100%')
html,←AddJavaScriptButton('All' 'all'(≢data)'.')
html,←⊂'    ],'
html,←⊂' '
html,←⊂'        columnDefs: ['
html,←⊂'            {className: "align-right", targets: [2,3]'
html,←⊂'            },'
html,←⊂'            {'
html,←⊂'                render: function ( data, type, row, meta ) {'
html,←⊂'                            return data+"%" ;        '
html,←⊂'                        },'
html,←⊂'                targets: 2'
html,←⊂'            }'
html,←⊂'        ]             '
html,←⊂'    } );'
html,←⊂'    oTable.button(0).trigger();'
html,←⊂''
html,←⊂'} );    '
html,←⊂'</script>'
∇
∇ html←AddJavaScriptButton(caption percent noOf search)
html←''
html,←⊂'        {'
html,←⊂'            text: "',caption,' (',(⍕noOf),')",'
html,←⊂'            titleAttr: "',percent,'",'
html,←⊂'            className: "active",'
html,←⊂'            action: function ( e, dt, node, config ) {'
html,←⊂'                var text = this.text();'
html,←⊂'                var search = "',search,'";'
html,←⊂'                oTable.column(2)'
html,←⊂'                    .search(search,true,false,false)'
html,←⊂'                    .draw();'
html,←⊂'                $(".dt-buttons button").removeClass("active");'
html,←⊂'                this.active( true );'
html,←⊂'            }'
html,←⊂'        },'
∇
∇ {(details watch)}←ProcessData filename;tno;watched;data;b;details;where;wi;dcfFilename;ignore
⍝ Takes the name of a component file created by calling `Start`, `Stop` and `Finalise`.\\
⍝ The components are read, aggregated and massaged and finally stored in the tenth component,
⍝ but the aggregated data is also returned as a shy result along with the watched data.
:Access Public Shared
dcfFilename←(⊃,/2↑⎕NPARTS filename),'.profile'
'File not found'⎕SIGNAL 11/⍨0=⎕NEXISTS dcfFilename
tno←dcfFilename ⎕FSTIE 0
watched←⎕FREAD tno,2
details←watch←⍬
:If 0<≢∊data←tno{⎕FREAD ⍺,⍵}¨9↓⍳-/⌽2↑⎕FSIZE tno
watch←⎕FREAD tno 2
ignore←⎕FREAD tno 3
data←⊃⍪/data
data[;2]←(data[;2]∊¨data[;4])/¨data[;2]
details←data[;1]{(⊃⍺)(∪⊃,/⍵)}⌸data[;2]
where←data[;1]⍳details[;1]
details,←data[where;3 4]
details(RemoveToBeIgnored)←ignore
b←details[;3]≠100
:If ∨/b
(b/details[;3])←100⌊⌊0.5+100×÷/≢¨b⌿details[;2 4]         ⍝ Recalculate percentage
:EndIf
details ⎕FREPLACE tno 10
:EndIf
⎕FUNTIE tno
∇
∇ r←Finalise dummy;names;details;i;name;row;linesCovered;body;lines;bool;regExPattern;filename;tno;d;buff;crF;crX;crT;crN;fileM;bodyC;t∆
⍝ Call this when all the code you want to check on has been executed`.\\
⍝ It examines all functions and operators that are only partially covered, and saves the lines that
⍝ were executed as well as the lines that could have been executed.\\
⍝ For the latter, a number of lines are ignored, such as empty lines, comment lines and all lines
⍝ that contain meaningless code (in terms of being executed), such as all `:End*` lines etc.\\
⍝ Note that the collected data is appended to the DCF file associated with the instance. Therefore
⍝ you can move the DCF file to another platform and re-run the code under the supervision of `CodeCoverage`
⍝ again, for example.
:Access Public Instance
r←⍬
0 0⍴{Stop ⍵}⍣(~⊃∆STOPPED)⊣⍬
_data←_data[;1]{(⊃⍺)(∪⊃,/⍵)}⌸_data[;2]
names←CollectDataForCoverageReport _watch
details←0 4⍴⍬
regExPattern←'^ *:else$' '^ *:section$'                       ⍝ Lines that contain just these patterns...
regExPattern,←'^ *:access ' '^ *:field ' '^ *:attribute'      ⍝ ... or these are to be ignored.
regExPattern,←⊂'^ *:end[a-zA-Z]*$'                            ⍝ All sorts of :End* statements are not of interest either
regExPattern,←⊂'^ *:implements'
regExPattern,←⊂'^ *:signature'
regExPattern,←⊂'^ *:section'
filename←(⊃,/2↑⎕NPARTS _filename),'.profile'
crF←(∊2↑⎕NPARTS filename),'.cr'                               ⍝ this file has the CRs of everything we watched
:If crX←⎕NEXISTS crF
crT←crF ⎕FTIE 0
crN←⎕FREAD crT,1                                          ⍝ the list of names for which we have CRs in component 1+index
:Else
crT←crF ⎕FCREATE 0
(1 3⍴0 ¯1 0)⎕FSTAC crT                                    ⍝ Everybody everything; important for non-Windows platforms
crN←⍬
⍬ ⎕FAPPEND crT
:EndIf
:For i :In ⍳≢names
name←i⊃names
:If (≢_data)≥row←_data[;1]⍳⊂name
linesCovered←2⊃_data[row;]
:Else
linesCovered←⍬
:EndIf
:If {~3 4∊⍨10×⍵-⌊⍵}⎕NC⊆name                               ⍝ Ignore derived functions and derived operators
:AndIf 2≠|≡buff←180⌶name                                  ⍝ For weird staff (like function operands of an operator) we need to check
:If 0=≢body←{⍵↓⍨-+/∧\' '=⌽⍵}¨↓buff                    ⍝ True for localized dfns
⍝ ---------- TODO
⍝     ∘∘∘                                               ⍝TODO⍝ We cannot get the body of that dfn with ⎕CR or 180⌶, so we need to take other measures
⍝ ----------
:EndIf
:If crX
:If (⊂name)∊crN
:If ~body CompareCR bodyC←⎕FREAD crT,1+crN⍳⊂name
⎕←'Current definition of function "',name,'" does not match the one captured earlier - do not trust the results' ⍝ ⎕SIGNAL?!
:EndIf
:Else
⎕←'Found new function "',name,'" that was not captured in previous runs - do not trust the results!'
:EndIf
:Else
crN,←⊂name
body ⎕FAPPEND crT
:EndIf
body←'''[^'']*'''⎕R''⍠('Greedy' 0)⊣body               ⍝ Remove text
body←'⍝.*$'⎕R''⍠('Greedy' 0)⊣body                     ⍝ Remove comments
lines←¯1+⍳≢body
:If '}'=⊃{⍵↓⍨+/∧\' '=⍵}⊃¯1↑body                       ⍝ Is it possibly a dfn? (⎕NC does only work on stuff that's not part of a class!)
:AndIf ∨/(({⍵↑⍨1+-{⍵⍳'.'}⌽⍵}name),'←{')⍷1⊃body        ⍝ First line carries <name>←{   - then it must be a dfn
:AndIf (,'}')≡¯1↑' '~⍨⊃¯1↑body
(body lines)←(0=≢{⍵↓⍨⍵⍳'{'}⊃body)↓¨body lines     ⍝ Drop first line if it is nothing but <name>←{
(body lines)←(-(,'}')≡' '~⍨⊃¯1↑body)↓¨body lines  ⍝ Drop last line if it is nothing but a closing "`}`
:Else
(body lines)←1↓¨body lines                        ⍝ Always drop first line in case of a tfn
bool←regExPattern∘{0=≢⍺ ⎕S 0⍠('IC' 1)('Greedy' 0)⊣⍵}¨body
bool∧←'}'≠⊃∘{⍵↓⍨+/∧\' '=⍵}¨body                   ⍝ Get rid of closing lines of local dfns - otherwise they will be reported
(body lines)←bool∘/¨body lines
:EndIf
(body lines)←(0<≢¨body~¨' ')∘/¨body lines             ⍝ Remove empty lines
details⍪←name linesCovered(100-⌊0.5+100×(≢lines~linesCovered)÷≢lines)lines
:EndIf
:EndFor
details←('.'≠⊃¨¯1↑¨details[;1])⌿details
:If ~crX
crN ⎕FREPLACE crT,1
:EndIf
⎕FUNTIE crT
:If ⎕NEXISTS filename
tno←filename ⎕FSTIE 0
(∪watch,⎕FREAD tno 2)⎕FREPLACE tno 2
(∪ignore,⎕FREAD tno 3)⎕FREPLACE tno 3
(({0=≢d←⎕FREAD tno 4:0 3⍴'' ⋄ d}⍬)⍪CollectInformation ⍬)⎕FREPLACE tno 4 ⍝ Old versions might still carry an empty forth component
details ⎕FAPPEND tno
⎕FUNTIE tno
:Else
3 ⎕MKDIR 1⊃⎕NPARTS filename
tno←filename ⎕FCREATE 0
(1 3⍴0 ¯1 0)⎕FSTAC tno                                    ⍝ Everybody everything; important for non-Windows platforms
d←''
d,←⊂'Documentation regarding the contents of this file'
d,←⊂(⍴1⊃d)⍴'-'
d,←⊂'* The first component contains this documentation'
d,←⊂'* The second one contains what has been watched; this will eventually be used to'
d,←⊂'  compile the caption for the coverage report.'
d,←⊂'* The third component holds the names of functions and operators to be ignored.'
d,←⊂'* The fourth component holds a matrix with as many rows as test runs have been performed:'
d,←⊂'  [;1] Timestamp ("YYYY-MM-DD hh:mm:ss")'
d,←⊂'  [;2] The result of the "APLVersion" property + info about the edition'
d,←⊂'  [;3] ⎕WA in KB'
d,←⊂'* Components five to nine are reserved'
d,←⊂'* The tenth one is originally empty. when "ProcessData" or "ProcessDataAndCreateReport"'
d,←⊂'  is called the resulting data is written to this component.'
d,←⊂'After the tenth one all components carry a matrix with n rows and 4 columns. n is'
d,←⊂'determined by the number of fns/oprs involved. The columns:'
d,←⊂'[;1] The name of the function or operator'
d,←⊂'[;2] Either empty or a vector of line numbers there were *not* executed.'
d,←⊂'     Empty in case none or all lines were executed.'
d,←⊂'[;3] Coverage percentage.'
d,←⊂'[;4] Total number of lines that can be expected to be tested.'
d ⎕FAPPEND tno
watch ⎕FAPPEND tno
ignore ⎕FAPPEND tno
(CollectInformation ⍬)⎕FAPPEND tno
tno{⍵ ⎕FAPPEND ⍺}¨(9-¯1+2⊃⎕FSIZE tno)⍴⊂''                 ⍝ Fill up to the tenth component
details ⎕FAPPEND tno
⎕FUNTIE tno
:EndIf
r←filename
⍝Done
∇
∇ {r}←Start dummy
⍝ Execute `⎕PROFILE'start' 'coverage'`
:Access Public Instance
r←⍬
⎕PROFILE'clear'
⎕PROFILE'start' 'coverage'
∆STOPPED←0
∇
∇ {r}←Stop dummy;buff
⍝ Stores all the data collected since `Start` was invoked, and then executes `⎕PROFILE'clear'`
:Access Public Instance
r←⍬
buff←(⎕PROFILE'data')[;1 2]
⎕PROFILE'clear'
buff←(buff[;2]≢¨⊂⍬)⌿buff                                 ⍝ Fns as such are not of any interest, only lines
_data⍪←(⊃∨/watch{((1+≢¨⍺)↑¨¨⊂⍵)∊¨⊂¨⍺,¨'.'}buff[;1])⌿buff ⍝ Drop everthing that's not watched
∆STOPPED←1
∇
⍝ ------------------------ Private stuff
∇ html←CreateListingForFnsAndOpr partlyCovered;name;lines;body;width;html2;all;testable;where;buff;i;links;percent;cr
cr←⎕NS''
html←''
links←'<a class="float-right no-print no-underline top-links" href="#top" title="Go to the top of the document">&#8607;</a>'
links,←'<a  class="float-right no-print no-underline top-links" href="#partly-covered" title="Go to the beginning of ''Partly-covered''">↑</a>'
cr.filename←(⊃,/2↑⎕NPARTS filename),'.cr'             ⍝ this file has the CRs of everything we watched
:If ⎕NEXISTS cr.filename
cr.tno←cr.filename ⎕FTIE 0
cr.names←⎕FREAD cr.tno,1
⎕←'Tied ',cr.filename,' for listings'
:Else
⎕←'Did not find file "',cr.filename,'" with CRs collected by fn "Finalize" - will try to work without it'
cr.tno←0
:EndIf
:For i :In ⍳≢partlyCovered
(name lines percent testable)←partlyCovered[i;1 2 3 4]
:If (cr.tno=0)∨~(⊂name)∊cr.names
body←{⍵↓⍨-+/∧\' '=⌽⍵}¨↓180⌶name
:Else
:If cr.tno∊⎕FNUMS
body←⎕FREAD cr.tno,1+cr.names⍳⊂name
:Else
body←⍬
:EndIf
:EndIf
:If 0<≢body
body←ExchangeHtmlSpecialChars body
(1⊃body)←{⍵↑⍨¯1+⌊/⍵⍳'⍝;'}1⊃body
width←≢⍕≢body
html2←((⊂(width-1)⍴' '),(width+4){⍺↑' [',(⍕⍵),']'}¨¯1↓⍳≢body),¨body,¨⊂'</code>'
:If 0<≢lines
(⊃¨html2[lines+1])←'→'   ⍝TODO⍝ Check!
:EndIf
buff←(≢body)⍴⊂'<code>'
buff[lines+1]←⊂'<code class="emphasize">'
html2←buff,¨html2
(1⊃html2)←'<div class="code-block">',1⊃html2
html2,←⊂'</div>'
html2←(⊂'<code class="header" id="listing_',(⍕i),'">',name,(' &mdash; ',(⍕percent),'%'),links,'</code>'),html2
html,←html2
:Else
html2←⊂'<div class="code-block missing">Could not get canonical representation.</div>'
html2←(⊂'<code class="header" id="listing_',(⍕i),'">',name,(' &mdash; ',(⍕percent),'%'),links,'</code>'),html2
html,←html2
:EndIf
:EndFor
⎕FUNTIE cr.tno
⎕DL 0.1
∇
Shorten←{
⍝ '1-3,5,6-9,11' ← Shorten 1 2 3 5 6 7 8 9 11
⍺←''
0=≢⍵:¯1↓⍺
n←+/∧\⍵=(⊃⍵)+¯1+⍳≢⍵
1=n:(⍺,(⍕⊃⍵),',')∇ 1↓⍵
(⍺,({(⍕⊃⍵),'-',(⍕¯1↑⍵)}n↑⍵),',')∇ n↓⍵
}
∇ r←GetScreenCss
r←''
r,←⊂'@media screen{'
r,←⊂'    html {background-color: #FFFFF0;}'
r,←⊂'body {'
r,←⊂'    font-size: 16px;'
r,←⊂'    font-family : Verdana, "Bitstream Vera Sans", "DejaVu Sans", Tahoma, Geneva, Arial, Sans-serif;'
r,←⊂'    margin: 1em;'
r,←⊂'}'
r,←⊂'th, td {padding: 5px 10px;}'
r,←⊂'th {text-align: left;}'
r,←⊂'h1, h2, h3, h4, h5, h6 {color: #424242;}'
r,←⊂'h1 {font-size: 22px;}'
r,←⊂'h2 {font-size: 18px; margin-top: 2em; margin-bottom:0.3em;}'
r,←⊂'tbody tr:nth-child(even) {background-color: #F0F0F0;}'
r,←⊂'tbody tr:nth-child(odd) {background-color: #FAFAFA;}'
r,←⊂'th {background-color: #E6E6E6;color: #424242;}'
r,←⊂'table {border: silver 1px solid; font-size: 14px;font-family: APLFont, monospace;}'
r,←⊂'code , code a {font-size: 14px; font-family: APLFont, monospace;}'
r,←⊂'code.header {'
r,←⊂'    font-size: 16px; '
r,←⊂'    font-family: APLFont, monospace; '
r,←⊂'    margin: 1.5em 0.5em 0 0.5em; '
r,←⊂'    padding:0;'
r,←⊂'    display: block;'
r,←⊂'}'
r,←⊂'div.code-block {'
r,←⊂'    border: 1px silver dashed;'
r,←⊂'    background-color: #F2F2F2;'
r,←⊂'    display: block;'
r,←⊂'    margin: 0.5em 0.5em 0.5em 0.5em;'
r,←⊂'    padding: 0.5em;'
r,←⊂'}'
r,←⊂'div.code-block.missing {'
r,←⊂'    background-color: #fa605254;'
r,←⊂'}'
r,←⊂'div.code-block code {display: block; white-space: pre-wrap; margin:0; padding:0; word-wrap: break-word;}'
r,←⊂'.emphasize { font-weight: 800;}'
r,←⊂'ul li, ol li {margin: 0.7em 0.2em;}'
r,←⊂'.float-right {float:right;}'
r,←⊂'.no-underline {    text-decoration :none;}'
r,←⊂'.top-links {font-size:20px; padding-left: 0.6em;}'
r,←⊂'.align-right {text-align: right;}'
r,←⊂'#footer hr {margin-top:1.5em;}'
r,←⊂'#footer p {margin-top:5px; padding-top:0; font-size: 9px;}'
r,←⊂'@font-face {'
r,←⊂'        font-family: "APLFont";'
r,←⊂'    src:'
r,←⊂'        local("APL385 Unicode"),'
r,←⊂'        url("https://misc.aplteam.com/apl385.ttf") format("truetype");'
r,←⊂'}'
r,←⊂'.info {border: 1px silver dashed; background-color: #F2F2F2;margin: 0.5em; padding: 0.5em;}'
r,←⊂'}'
∇
∇ r←GetPrintCss
r←''
r,←⊂'@media print{@page {size: portrait}'
r,←⊂'@page {'
r,←⊂'    margin: 1cm 1cm 1cm 1.75cm;'
r,←⊂'    @bottom-right {'
r,←⊂'        content: counter(page) " / " counter(pages);'
r,←⊂'  }'
r,←⊂'}'
r,←⊂'body {'
r,←⊂'    font: 12pt "Times New Roman", Times, serif;'
r,←⊂'    line-height: 1.2;'
r,←⊂'     /* CSS3 filter, at the moment Webkit only. Prefix it for future implementations */'
r,←⊂'    -webkit-filter: grayscale(100%);'
r,←⊂'    filter: grayscale(100%); /* future-proof */'
r,←⊂'}'
r,←⊂'h1 {font-size: 18pt;}'
r,←⊂'h2 {font-size: 16pt; margin-top: 10pt; margin-bottom: 3pt;}'
r,←⊂'th, td {padding: 2pt 3pt;}'
r,←⊂'th {text-align: left;background-color: #DBDBDB;}'
r,←⊂'tbody tr:nth-child(odd) {background-color: #EDEDED;}'
r,←⊂'table {'
r,←⊂'    color-adjust: exact !important;'
r,←⊂'    -webkit-print-color-adjust: exact !important;'
r,←⊂'    print-color-adjust: exact !important;'
r,←⊂'    font-size: 8pt;'
r,←⊂'    font-family: APLFont, monospace;'
r,←⊂'}'
r,←⊂'div.keep-together {break-inside: avoid; break-before:auto;}'
r,←⊂'table {border: silver 1pt solid;}'
r,←⊂'code , code a {font-size: 8pt; font-family: APLFont, monospace;}'
r,←⊂'code.header {'
r,←⊂'    font-size: 8pt;'
r,←⊂'    font-family: APLFont, monospace;'
r,←⊂'    margin: 7pt 3pt 0 10pt;'
r,←⊂'    padding:0;'
r,←⊂'    display: block;'
r,←⊂'}'
r,←⊂'div.code-block {'
r,←⊂'    border: 1pt silver dashed;'
r,←⊂'    background-color: #F2F2F2;'
r,←⊂'    display: block;'
r,←⊂'    margin: 4pt 4pt 4pt 4pt;'
r,←⊂'    padding: 4pt;'
r,←⊂'}'
r,←⊂'div.code-block code {display: block; white-space: pre-wrap; margin:0; padding:0; word-wrap: break-word;}'
r,←⊂'.emphasize { font-weight: 800;}'
r,←⊂'a {text-decoration: none;color: black;}'
r,←⊂'ul li, ol li {margin: 8pt 3pt;}'
r,←⊂'.no-print {display:none;}'
r,←⊂'.align-right {text-align: right;}'
r,←⊂'#footer hr {margin-top:1.5em;}'
r,←⊂'#footer p {margin-top:5pt; padding-top:0; font-size: 6pt;}'
r,←⊂'@font-face {'
r,←⊂'        font-family: "APLFont";'
r,←⊂'    src:'
r,←⊂'        local("APL385 Unicode"),'
r,←⊂'        url("https://misc.aplteam.com/apl385.ttf") format("truetype");'
r,←⊂'}'
r,←⊂'.info {border: 1px silver dashed; background-color: #F2F2F2;margin: 8px; padding: 8px;}'
r,←⊂'}'
∇
∇ names←CollectDataForCoverageReport watch;this;ref;list;isScripted;this2;ref2
⍝ Determins all objects to be observed together with the number of lines.
names←''
:For this :In ,⊆watch
ref←⍎this
:If IsScripted ref
names,←(⊂this,'.'),¨NamesInScript ref
:Else
names,←(⊂this,'.'),¨' '~¨⍨↓ref.⎕NL 3 4
:If 0<≢list←ref.⎕NL 9
list←' '~¨⍨↓list
isScripted←IsScripted¨ref⍎¨list
:For this2 :In isScripted/list
ref2←ref⍎this2
:If (⍕ref2)≡this,'.',this2                            ⍝ Ignore references
names,←(⊂this,'.',this2,'.'),¨NamesInScript ref2
:EndIf
:EndFor
:If 0<≢list←(~isScripted)/list
:AndIf 0<≢list←({⍵≡⍕⍎⍵}¨(⊂this,'.'),¨list)/list           ⍝ Ignore references
names,←⊃,/CollectDataForCoverageReport¨(⊂this,'.'),¨list
:EndIf
:EndIf
:EndIf
:EndFor
∇
∇ r←NamesInScript ref;body;options;b;tfns;dfns;b2;bodies
:Access Public Shared
⍝ Takes a ref pointing to a class or interface script and returns the names of all functions and operators
⍝ within that script.\\
⍝ Has two limitations:
⍝ * Cannot handle nested classes and nested namespaces.
⍝ * May well mistake a variable name for the name of a dfn.\\
r←''
body←⎕SRC ref
body←'''[^'']*'''⎕R''⊣body                                     ⍝ Get rid of everything between quotes
body←'⍝.*$'⎕R''⊣body                                           ⍝ Get rid of comments
options←('IC' 1)('Greedy' 0)('DotAll' 1)('Mode' 'D')
r,←options GeterAndSetterNames body                            ⍝ Extract the names of all getters and setters (if any)
body←':Property .*:EndProperty'⎕R''⍠options⊣body               ⍝ Remove Properties (because they carry `∇`!)
body←¯1↓1↓(~body∧.=¨' ')/body                                  ⍝ Remove first, last and all empty lines
body←'^ {5,}∇.*$'⎕R''⊣body                                     ⍝ Remove recursive ∇ calls that stand on their own
b←'∇'∊¨body                                                    ⍝ Which lines carry a ∇?
((b\{{1=≢⍵:0 ⋄ '∇'≠⊃⍵}⍵~' '}¨b/body)/body)←' '                 ⍝ Remove all other recursive ∇ calls
body↓¨⍨←{+/∧\' '=⍵}¨body                                       ⍝ Drop all leading spaces
b←'∇'=⊃¨body                                                   ⍝ All lines that start with a nabla
tfns←b/body                                                    ⍝ Trad fns headers
tfns←1↓¨tfns                                                   ⍝ Remove the nablas
tfns←((≢tfns)⍴1 0)/tfns                                        ⍝ Remove every second line: those are the closing ones
tfns←{'←'∊⍵:⍵↓⍨⍵⍳'←' ⋄ ⍵}¨tfns                                 ⍝ Remove all explicit results
tfns←{'{'∊⍵:⍵↓⍨⍵⍳'}' ⋄ ⍵}¨tfns                                 ⍝ Remove optional left argument
tfns←{⍵↓⍨+/∧\' '=⍵}¨tfns                                       ⍝ Remove all leading spaces
tfns←{⍵/⍨~'  '⍷⍵}¨tfns                                         ⍝ Remove all multiple spaces
tfns←{⍵↓⍨{-+/∧\' '=⍵}⌽⍵}¨tfns                                  ⍝ Remove all trailing spaces
:If ∨/b←'('=⊃¨tfns                                             ⍝ These must be operators
(b/tfns)←{{⍵↑⍨¯1+⍵⍳')'}⍵↓⍨⍵⍳' '}¨b/tfns                    ⍝ Extract the operator names
:EndIf
tfns←'\([^)]+\)'⎕R' foo'⊣tfns                                  ⍝ Replace anything betwen () by ` foo` = impersonate a simple ⍵
:If 0<≢tfns←{2=' '+.=⍵:⍵↓⍨⍵⍳' ' ⋄ ⍵}¨tfns                      ⍝ Remove left arguments
r,←{⍵↑⍨¯1+⌊/⍵⍳' ;'}¨tfns                                   ⍝ Name of all trad fns
:EndIf
:If 0<≢bodies←'∇[^∇]*∇'⎕S{⍵.Match}⍠options⊣body                ⍝ Every trad fn must be investigated for any local dfns.
:AndIf 0<≢bodies←{(⎕UCS 10)~¨⍨(~(⎕UCS 13 10)⍷⍵)⊆⍵}¨bodies      ⍝ Split them one-by-one
r,←{0=≢⍵:⍵ ⋄ ⊃,/⍵}EstablishDfns¨bodies                     ⍝ All dfns defined within tradfns
:EndIf
body←'∇[^∇]*∇'⎕R''⍠options⊣body                                ⍝ Wipe out all trad fns
body←(0<≢¨body~¨' ')/body                                      ⍝ No empty lines
⍝ --- Next two lines are future stuff
⍝ dfns←EstablishDfns body                                      ⍝ Extract the dfns (and dops of course)
⍝ r,←∪dfns                                                     ⍝ Those might well be variable assignment, therefore ∪!
∇
IsScripted←{16::0 ⋄ 1⊣⎕SRC ⍵}
EstablishDfns←{
⍝ In case ⍺ is 1 just the names of all dfns (dops) found in ⍵ are returned.
⍝ In case ⍺ is 0 only names that are localized are returned.
⍺←1
body←⍵
dfns←(∨/¨'←{'∘⍷¨body)/body                                 ⍝ Only lines that carry ←{ will survive
0=≢dfns:''
dfns←(0=≢¨1↓¨⊃¨{'\}(.*$)'⎕S{⍵.Match}⊣⍵}¨dfns)/dfns         ⍝ Get rid of one-line unnamed dfns
0=≢dfns:''
dfns←{⍵↑⍨¯1+⍵⍳'←'}¨dfns                                    ⍝ Assignments survive
dfns←(¯1≠⊃∘⎕NC¨dfns)/dfns                                  ⍝ Get rid of what is an invalid name (those are variable assignments)
0=≢dfns:''
dfns~¨←' '                                                 ⍝ Remove all spaces
⍺:dfns
∘∘∘ ⍝TODO⍝
}
∇ r←options GeterAndSetterNames body;bool
r←''
body←1↓⊃,/(⎕UCS 10),¨body
:If ∨/bool←':property'⍷⎕C body
r,←⊃,/body∘{'set_' 'get_',¨⊂(1+≢':propert')↓{⍵↑⍨¯1+⍵⍳⎕UCS 10}⍵↓⍺}¨{⍵/⍳≢⍵}bool
:EndIf
∇
∇ data←data RemoveToBeIgnored ignore;bool
⍝ `ignore` is a nested vector with nanes. In case such a name identifies any APL object it is removed.\\
⍝ However, if an ordinary namespace is part of `ignore` then it won't appear in `data`.
⍝ Therefore we identify container names in a second step and remove everything that belongs to such a container.
⍝ That means it works recursively.
:If 0<≢ignore
:AndIf 0<≢data←(~data[;1]∊ignore)⌿data
bool←9=⊃∘⎕NC¨ignore
data←(⊃∧/data∘{⍵∘≢¨(≢⍵)↑¨⍺[;1]}¨((bool/ignore),¨'.'))⌿data
:EndIf
∇
∇ r←FormatDateTime ts
r←⊃'YYYY-MM-DD hh:mm:ss'(1200⌶)¯1 1 ⎕DT⊂ts
∇
∇ r←CollectInformation dummy;version;ts
⍝ Collects information about the current test run.
ts←FormatDateTime ⎕TS
version←⊃{⍺,' ⋄ ',⍵}/# ⎕WG'APLVersion'
version,←' ⋄ ','Classic' 'Unicode'⊃⍨1+80=⎕DR' '
r←1 3⍴ts version(' '~⍨,'K0G⊂ZZZ.ZZZ.ZZZ.ZZZ.ZZ9⊃'⎕FMT⌊⎕WA÷1024×1024) ⍝ MBs
∇
∇ txt←ExchangeHtmlSpecialChars txt
⍝ < => &lt; ⋄ > => &gt; ⋄ & => &amp;
txt←(,¨'&<>')⎕R'\&amp;' '\&lt;' '\&gt;'⊣txt
∇
∇ z←a CompareCR b;args;i;m;l
⍝ compare two CRs taking into account that some symbols are replaced with ⎕Uxxxx when loaded into classic
⍝ z=1: match, 0: did not match
⍝--> this means that the final run which creates the report must be run on a Unicode interpreter, otherwise
⍝    it will crash with errors because it can't deal with these characters...
:If {0::1 ⋄ 0⊣⎕UCS ⍵}8838  ⍝ do not even attempt to execute this on Classic!
z←1
:ElseIf a≠⍥≢b   ⍝ no of lines must match
z←0
:Else
args←{1=≡⍵:↓⍵ ⋄ ⍵}¨a b
:For i :In ⍳2
:For m :In ('(⎕u\d*)'⎕S 2⍠'IC' 1)i⊃args
:If m≢0
l←(⎕IO+m)⊃i⊃args
l←('⎕u(\d*.)'⎕R{{(⎕UCS dec ¯1↓⍵),(' '≢⍥,¯1↑⍵)/¯1↑⍵}2↓⍵.Match}⍠'IC' 1)l
((⎕IO+m)⊃i⊃args)←l
:EndIf
:EndFor
:EndFor
z←≡/args
:EndIf
∇
⍝ from dfns
dec←{⎕IO ⎕ML←0 1                                ⍝ Decimal from hexadecimal
⍺←0                                         ⍝ unsigned by default.
1<⍴⍴⍵:⍺∘∇⍤1⊢⍵                               ⍝ vector-wise:
0=≢⍵:0                                      ⍝ dec'' → 0.
1≠≡,⍵:⍺ ∇¨⍵                                 ⍝ simple-array-wise:
ws←∊∘(⎕UCS 9 10 13 32 160)                  ⍝ white-space?
ws⊃⍵:⍺ ∇ 1↓⍵                                ⍝ ignoring leading and
ws⊃⌽⍵:⍺ ∇ ¯1↓⍵                              ⍝ ... trailing blanks.
∨/ws ⍵:⍺ ∇¨(1+ws ⍵)⊆⍵                       ⍝ white-space-separated:
v←16|'0123456789abcdef0123456789ABCDEF'⍳⍵   ⍝ hex digits.
11::'Too big'⎕SIGNAL 11                     ⍝ number too big.
(16⊥v)-⍺×(8≤⊃v)×16*≢v                       ⍝ (signed) decimal number.
}
Assert←{⍺←⊢ ⋄ 0∊⍵:⍺ ⎕SIGNAL 998 ⋄ shy←0}
∇ r←IsFile filename
r←0
:Trap 22
r←2=1 ⎕NINFO filename
:EndTrap
∇
:EndClass
(
''
'## Overview'
''
'This package comes with functions and operators that allow you to interrogate the user, and make her...'
''
'* answer simple questions like "Are you sure?" or "Do you really want to delete this file?" (`YesOrNo`)'
'* select an item (or several items) from a list of items, or quit (`Select`)'
'* pause and read a message before continuing (`Pause`)'
'* enter a character vector in response to something like "Enter your name:" (`AskForText`)'
'* enter a number in response to something like "How many copies? " (`AskForNumber`)'
'                                                                 '
'This is useful for interacting with the user in the session, something that user commands do'
'quite often.'
''
'Note that although `AskForNumber` and `AskForText` are operators rather than functions, this document'
'will refer to them as functions except when they themselves are discussed.'
''
'## Interrupting the functions'
''
'When a user is prompted for input, due to a long-standing bug in Dyalog you cannot interrupt with a weak '
'or a strong interrupt. Answering the question or selecting an item and then trying to interrupt the '
'code does not work well on modern machines because they are just too fast.'
''
'That''s why all functions allow you to enter `∘∘∘`, which makes the functions run on a stop vector that '
'is dynamically set for just this purpose.                                                                 '
''
'## Automated responses'
''
'Test cases quite often require certain decisions and choices to be made. In such cases the presence '
'of a human in front of the screen is required. The automation feature is designed to allow such tests '
'to run without a human.'
''
'All functions can be integrated into tests so that no user is required to answer any questions or'
'select items. This is achieved by providing data on global variables that do not normally exist.'
''
'#### Dynamically generated questions and captions'
'    '
'Sometimes you need to create a question (`YesOrNo`) or a caption (`Select`) dynamically such as '
'"Select action for file /foo/boo/this-will-change.txt"'
''
'In such cases, for automation, just specify only the leading part of the question or caption which won''t be '
'generated dynamically. In the example just specify "Select action for file". If a complete match cannot '
'be found, `Select` or `YesAndNo` will check if the _beginning_ of the caption/question matches '
'the given text, so it would still find a match.'
''
'However, you may find it more convenient to use aliases.'
''
'### Using aliases'
''
'Aliases were introduced in version 1.2. '
''
'By default, an alias is defined by text up to the (first) `@` character when the text must not contain a'
'space, a Line Feed (LF) character and a Carriage Return (CR) character. It may contain just alphabetic'
'characters, digits and the characters "-_∆". '
''
'As of version 1.3.0 you can define a different alias characters by assigning it to the global variable '
'`AliasChar`. The only reason for doing this is when you need to have the `@` glyph in a question or caption. '
'Even then, more often than not, you don''t need to worry about this because aliases can only be defined until'
'the first space character or the first LF or CR character.'
''
'Anything up to and including the `@` will be taken as alias as long as it does not contain LF, CR or a '
'space, meaning that this part will not be displayed as a question or message, but can be used as a matching '
'string, again including the (trailing) `AliasChar` character. '
''
'For example:'
''
'```'
'CommToos.YesOrNor ''MyAlias@My Question'' '
'```'
''
'This defines an alias. This on the other hand doesn''t:'
''
'```'
'CommToos.YesOrNor ''The @ character is used...'''
'```'
''
'Note that while aliases may seem like a perfect solution, they can also reduce readability. If you create a '
'number of responses in advance at the start of your application/user command this can become a bit confusing.'
''
'There are two ways to avoid this:'
''
'1. Use a meaningful expression as an alias rather than, for example, just `1@`.'
''
'2. When assigning to one of the global variables you can add something _after_ the `@` glyph: this will be '
'   ignored and can therefore be used to comment on the entry.'
''
'   It could be a hint or define the context in which the question will be asked.'
'   '
'### Cleaning up'
''
'Of course there is nothing wrong with deleting the global variables yourself like this:'
''
'```'
'⎕EX ''CommTools.Select_Choices'''
'```'
''
'However, you can also just call the function `CommTools.Cleanup` which will do the job for you.'
''
'This has some advantages:'
''
'* If `CommTools` is extended in the future, `Cleanup` might do more than that, so calling it is safer than trying '
'  to do the job yourself. '
'* You don''t need to know the names of the global variables, and therefore you can''t get them wrong either  '
''
'The downside of `Cleanup` is that it deletes _all_ global variables used for automation, and there '
'may be scenarios where you do not want this. Then you have to delete yourself what you don''t need anymore.'
'   '
'## The functions and operators'
''
''
'### The function "YesOrNo"'
''
'Imagine asking this question:'
'                       '
'```'
'CommTools.YesOrNo ''Are you sure you want to delete this file?'''
'```'
''
'To answer this question automatically create a global variable `YesOrNo_Answers` as a matrix'
'with two columns:'
''
'| `[;1]` | Contains the question to be answered automatically.'
'| `[;2]` | The answer to be given, usually either "y" or "n".'
''
'So in our case we specify:'
''
'```'
'CommTools.YesOrNo_Answers←1 2⍴''Are you sure you want to delete this file?'' ''y'''
'```         '
''
'When the question is asked:'
'                             '
'```'
'CommTools.YesOrNo ''Are you sure you want to delete this file?'''
'```'
''
'`YesOrNo` would do the following:'
''
'1. Check if there is a global variable `YesOrNo_Answers` around.'
'2. If there is, it would try to match the question to any row in the first column of `YesOrNo_Answers` '
'3. If there is a match, it would return the value in the second column of the identified row'
''
'Notes:'
''
'* Leading spaces in the question are removed'
'* If multiple entries in `YesOrNo_Answers` match the question an error is thrown'
'* If the second column is empty, `YesOrNo` would return the default answer given by the left argument: '
'  '
'  1="Y", 0="N"'
'  '
'  If there is no left argument provided in such a case `YesOrNo` would throw an error'
'* If no row in `YesOrNo_Answers` matches the question it would ask the question as usual'
''
'#### Dynamic questions'
'    '
'Sometimes you need to ask dynamically created questions like "Are you sure you want to delete the file /foo/boo/this-will-change.txt?"'
''
'In this case just specify "Are you sure you want to delete the file" as the text to match: if there is no complete match, `YesOrNo` '
'will start searching for questions that _begin_ with the given text, so it will still find a match. '
''
'#### Multiple line questions                    '
''
'`YesNorNo` accepts nested vectors as questions as well as a character vector with `⎕UCS 10` in it. (Note that a nested vector'
'is internally converted to a simple character vector with `⎕UCS 10` (Line Feed) in it)'
''
'If the two searches outlined above do not produce a match `YesNorNo` would isolate the last bit of the question '
'and check it for a complete match.'
''
'This is best explained with an example:'
''
'```'
'     q←⊂''file1'''
'     q,←⊂''file1'''
'     q,←⊂''Sure you wanna delete these?'''
'     CommTools.YesOrNo_Answers←1 2⍴ (3⊃q) ''y'''
'     ⎕←CommTools.YesOrNo q'
('y'⋄)
'```'
''
'### The "Select" function '
''
'Imagine you want to present a list with three items, and you want the second one to be selected.'
''
'This can be achieved by creating a global variable `Select_Choices` as a matrix with two columns:'
''
'| `[;1]` | The caption of the list, or at least the beginning of the caption'
'| `[;2]` | The answer to be given, so usually either an integer pointing to the item selected,<br>or an "a" (for "all") or a "q" (for quit).'
''
''
'`Select` would do the following:'
''
'1. Check whether there is a global variable `Select_Choices` around'
'2. If so it would try to match the caption to any row in the first column of `Select_Choices` '
'3. If there is a match it would return the value in the second column of the identified row'
''
'Notes:'
''
'* Leading spaces in choices are removed'
'* If multiple entries in `Select_Choices[;1]` match the caption an error is thrown'
'* If no row in `Select_Choices` matches the caption it would present the list for selection to the user  '
''
'So in our case we specify:'
''
'```'
'   l←⊂''First'''
'   l,←⊂''Second'''
'   l,←⊂''Third'''
'   caption←''Please select hot item:'''
'   CommTools.Select_Choices←1 2⍴caption 2'
'   ⎕←caption CommTools.Select l  '
('2'⋄)
'``` '
''
'For all items:'
''
'```   '
'   CommTools.Select_Choices←1 2⍴caption ''a'''
'   ⎕←caption CommTools.Select l  '
'1 2 3'
'``` '
''
'For no items ("quit"):'
''
'```   '
'   CommTools.Select_Choices←1 2⍴caption ''q'''
'   ⎕←⍬≡caption CommTools.Select l  '
('1'⋄)
'```                   '
''
'#### Specifying a selection'
'                       '
'If you need a specific selection to be returned but you don''t know the item number in advance because the list is created '
'dynamically, you can specify the selection itself instead of an integer.'
''
'For example:'
''
'```'
'   CommTools.Select_Choices←1 2⍴''My caption'' ''Second'''
'   ⎕←''My caption'' CommTools.Select l'
'2     '
'```'
''
'#### The wildcard character *'
''
'In case the list of items is created dynamically it might be difficult or even impossible to construct a matching line.'
''
'In such a case use the `*` glyph as a wildcard character: it tells `Select` to match either only the beginning of each line'
'or only the end of a line. That works because the `*` character must be either the first or the last character; anywhere else'
'it would be ignored.'
''
'Examples:'
''
'I. At the beginning    '
''
'```'
'   list←''First item'' ''Second item'' ''Third item'''
'   CommTools.Select_Choices←1 2⍴''My caption'' ''Second*'''
'   ''My caption'' CommTools.Select list'
'```'
''
'I. At the end    '
''
'```'
'   list←''/path2/file_1'' ''/path2/file_2'' ''/path2/file_3'''
'   CommTools.Select_Choices←1 2⍴''My caption'' ''*_3'''
'   ''My caption'' CommTools.Select list'
'```'
''
'### The "Pause" function '
''
'The purpose of this function is to print a message to `⎕SE`, possibly with line feed characters (`⎕UCS 10`) in them, '
'and tell the user to press <enter> to continue.'
''
'As with the other functions you can interrupt `Pause` by typing `∘∘∘`.'
''
'If you don''t want the function to pause at all, create a global variable `NoPause` and assign a 1 to it.'
''
'If you want to pause in some but not all instances you can assign one or more `msg` to `NoPause`. '
'The function will try to match the string(s) on `NoPause` with the message, and if it''s a full or partial match it won''t pause, otherwise it will.'
''
'### Ask for a number'
''
'Imagine you ask this question:'
'                       '
'```'
'({1}CommTools.AskForNumber) ''Number of copies to print'''
'```'
''
'Note that the operator `AskForNumber` requires a check function to be passed as left operand. In the example '
'the check function simply returns a 1. Instead you could perform a real check like this:'
''
'```'
'CheckFn←{'
'   ⍵∊1 2 3 4 5:1 '
'   ⎕←''Please enter a number between 1 and 5'' '
'   0'
('}'⋄)
'(CheckFn CommTools.AskForNumber) ''Number of copies to print:'''
'```     '
''
'If the user does not enter a number but just presses <enter>, an empty vector is returned. You can force the user to enter'
'a number by passing a 1 as left argument (`enforce`).'
''
'To answer this question automatically create a global variable `AskForNumber_Answers` as a matrix'
'with two columns:'
''
'| `[;1]` | Contains the question.'
'| `[;2]` | The answer to be given, either as a character vector or as a number.'
''
'So in our case we specify:'
''
'```'
'CommTools.AskForNumber_Answers←1 2⍴''Number of copies to print'' 1'
'```         '
''
'When the question is asked:'
'                             '
'```'
'({1}CommTools.AskForNumber) ''Number of copies to print'''
'```'
''
'`AskForNumber` would do the following:'
''
'1. Check whether there is a global variable `AskForNumber_Answers` around'
'2. If there is it would try to match the question to any row in the first column of `AskForNumber_Answers` '
'3. If there is a match it would return the value in the second column of the identified row and convert it to a number'
'   if it is text'
''
'Notes:'
''
'* Leading spaces in the question are removed, ": " is appended'
'* If multiple entries in `AskForNumber_Answers` match the question, an error will be thrown'
'* If no row in `AskForNumber_Answers` matches the question, the question is asked as usual'
''
'### Asking for a character vector'
''
'Imagine you are asking this question:'
'                       '
'```'
'({1}CommTools.AskForText) ''Enter a month (three characters)'''
'```'
''
'Note that the operator `AskForText` requires a check function to be passed as left operand. In the example '
'the check function simply returns a 1. Instead you could perform a real check like this:'
''
'```'
'CheckFn←{'
'   (⊂⍵)∊↓12 3⍴''janfebmaraprmaijunjulaugsepoctnovdec'':1 '
'   ⎕←''Please enter just three lowercase characters'' '
'   0'
('}'⋄)
'(CheckFn CommTools.AskForText) ''Enter a month (just three character)'''
'```     '
''
'If the user does not enter anything but just hits <enter> an empty vector will be returned. '
'You can force the user to enter a number by passing a 1 as left argument (`enforce`).'
''
'Instead of a Boolean you can also specify a character vector as `⍺`. In that case, when the user just presses `<enter>`'
'without entering anything, the default (`⍺`) is returned.'
''
'To answer this question automatically create a global variable `AskForText_Answers` as a matrix'
'with two columns:'
''
'| `[;1]` | Contains the question.'
'| `[;2]` | The answer to be given.'
''
'So in our case we specify:'
''
'```'
'CommTools.AskForText_Answers←1 2⍴''Enter a month (three character)'' ''mar'''
'```         '
''
'When the question is asked:'
'                             '
'```'
'({1}CommTools.AskForText) ''Enter a month (three character)'''
'```'
''
'`AskForText` would do the following:'
''
'1. Check whether there is a global variable `AskForText_Answers`'
'2. If so it would try to match the question to any row in the first column of `AskForText_Answers` '
'3. If there is a match it would return the value in the second column of the identified row'
''
'Notes:'
''
'* Leading spaces in the question are removed, ": " is appended'
'* If multiple entries in `AskForText_Answers` match the question, an error will be thrown'
'* If no row in `AskForText_Answers` matches the question, the question will be asked as usual'
)
'@'
value←{enforce}(CheckFn AskForNumber)question;flag;input;valid;alias;bool;buff;success;firstPart;ind
⍝ Operator asking a question and allowing the user to enter a number.\\
⍝ By entering "`∘∘∘`" the user may interrupt `AskForNumber`: this activates a stop.\\
⍝ `CheckFn` is supposed to be a function that gets the input as `⍵` and must return a Boolean
⍝ with a 1 indicating that the input is okay and 0 that it is not. If you don't need/want
⍝ a check function pass `{1}` as left operand.\\
⍝ If the user refuses to enter a number an empty vector is returned.
⍝ However, you might prevent this from happening by specifying a 1 as `⍺` (`enforce`), meaning that
⍝ the user must enter a number in order to continue.\\
⍝ In case `question` is a scalar question mark, `AskForNumber` returns the path to itself and
⍝ the name of the global variable that can be used for automation, separated by a dot.
:If '?'≡question
value←(⍕⎕THIS),'.AskForNumber_Answers←1 2⍴'' ''  '' '''
:Return
:EndIf
enforce←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'enforce'
'Left argument ("enforce numeric input")must be a Boolean'Assert enforce∊0 1
value←⍬
success←flag←0
:If ~(≡question)∊0 1
question←1↓⊃,/LF,¨question
:EndIf
question←ReplaceCRbyLF question
question←{⍵↓⍨+/∧\' '=⍵}question
:Repeat
firstPart←{⍵↑⍨⍵⍳LF}question
:If 0<⎕NC'AskForNumber_Answers'
AskForNumber_Answers←(0<≢¨' '~⍨¨AskForNumber_Answers[;1])⌿AskForNumber_Answers
AskForNumber_Answers[;1]←{⍵↓⍨+/∧\' '=⍵}¨AskForNumber_Answers[;1]
:AndIf 0<≢AskForNumber_Answers
:If AliasChar∊firstPart
ind←firstPart⍳AliasChar
:AndIf ∧/~(LF,' ')∊ind↑question
(alias question)←ind{(⍺↑⍵)(⍺↓⍵)}firstPart
flag←0<+/bool←({⍵↑⍨⍵⍳AliasChar}¨AskForNumber_Answers[;1])≡¨⊂alias
:ElseIf ~flag←0<+/bool←AskForNumber_Answers[;1]≡¨⊂firstPart
flag←0<+/bool←firstPart∘{⍵≡(≢⍵)↑⍺}¨AskForNumber_Answers[;1]
:EndIf
:If flag
'Multiple pre-prepared answers qualify?!'Assert 1=+/bool
input←⍕2⊃AskForNumber_Answers[bool⍳1;]
:EndIf
:Else
:If (⌊/firstPart⍳' ',LF)>firstPart⍳AliasChar
question←{~AliasChar∊⍵:⍵ ⋄ ⍵↓⍨⍵⍳AliasChar}question
:EndIf
:EndIf
:If ~flag
input←⍞,0/⍞←question,': '
:If '∘∘∘'≡¯3↑input
(1+⊃⎕LC)⎕STOP⊃⎕SI
∘∘∘ ⍝ Deliberate stop caused by user input
:EndIf
input←{⍵↑⍨1+-(⌽⍵)⍳':'}input
:EndIf
:If 0=≢input~' '
:AndIf ~enforce
value←⍬
:Return
:Else
(valid value)←⎕VFI input
:If 1≠≢valid
⎕←'Please enter precisely one number'
:ElseIf valid
success←CheckFn value
value←⊃value
:Else
⎕←'You did not enter a valid number, please retry!'
:EndIf
:EndIf
:Until success
⍝Done
text←{x}(CheckFn AskForText)question;flag;alias;bool;buff;success;firstPart;enforce;default;firstFlag
⍝ Operator asking a question and allowing the user to enter text.\\
⍝ By entering "`∘∘∘`" the user may interrupt `AskForText`: this activates a stop.\\
⍝ `CheckFn` is supposed to be a function that gets the input as `⍵` and must return a Boolean
⍝ with a 1 indicating that the input is okay and 0 that it is not. If you don't need/want
⍝ a check function pass `{1}` as left operand.\\
⍝ If the user refuses to enter anything an empty vector is returned.
⍝ However, you might prevent this from happening by specifying a 1 as `⍺` (`enforce`), meaning
⍝ that the user must enter something in order to continue.
⍝ You can also specify a default as `⍺` by passing a character vector instead of a Boolean.
⍝ In case the user does not enter something that default is returned; that's why the Boolean
⍝ would not make a difference anyway.\\
⍝ In case `question` is a scalar question mark, `AskForText` returns the path to itself and
⍝ the name of the global variable that can be used for automation, separated by a dot.
:If '?'≡question
text←(⍕⎕THIS),'.AskForText_Answers←1 2⍴'' ''  '' '''
:Return
:EndIf
x←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'x'
firstFlag←0
:If ' '=1↑0⍴x
default←x
enforce←0
:Else
enforce←x
default←''
:EndIf
text←''
success←flag←0
:If ~(≡question)∊0 1
question←1↓⊃,/LF,¨question
:EndIf
question←ReplaceCRbyLF question
question←{⍵↓⍨+/∧\' '=⍵}question
:Repeat
firstPart←{⍵↑⍨⍵⍳LF}question
:If 0<⎕NC'AskForText_Answers'
AskForText_Answers←(0<≢¨' '~⍨¨AskForText_Answers[;1])⌿AskForText_Answers
AskForText_Answers[;1]←{⍵↓⍨+/∧\' '=⍵}¨AskForText_Answers[;1]
:AndIf 0<≢AskForText_Answers
:If AliasChar∊question
(alias question)←{l←⍵⍳AliasChar ⋄ (l↑⍵)(l↓⍵)}question
flag←0<+/bool←({⍵↑⍨⍵⍳AliasChar}¨AskForText_Answers[;1])≡¨⊂alias
:ElseIf ~flag←0<+/bool←AskForText_Answers[;1]≡¨⊂question
flag←0<+/bool←question∘{⍵≡(≢⍵)↑⍺}¨AskForText_Answers[;1]
:EndIf
:If flag
'Multiple pre-prepared answers qualify?!'Assert 1=+/bool
text←2⊃AskForText_Answers[bool⍳1;]
:EndIf
:Else
:If (⌊/firstPart⍳' ',LF)>firstPart⍳AliasChar
question←{~AliasChar∊⍵:⍵ ⋄ ⍵↓⍨⍵⍳AliasChar}question
:EndIf
:EndIf
:If 0<≢default
:AndIf firstFlag
question,←' [',default,']'
firstFlag←0
:EndIf
:If ~flag
text←⍞,0/⍞←question,': '
:If '∘∘∘'≡¯3↑text
(1+⊃⎕LC)⎕STOP⊃⎕SI
∘∘∘ ⍝ Deliberate stop caused by user input
:EndIf
text←(≢{⍵↑⍨-¯1+(⌽⍵)⍳LF}question,': ')↓text
:If 0=≢text
:AndIf 0<≢default
text←default
:EndIf
:EndIf
:If 0=≢text
:If enforce
⎕←'You must enter something!'
:Else
:Return
:EndIf
:Else
success←CheckFn text
:EndIf
:Until success
⍝Done
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}
Cleanup
⎕EX'Select_Choices'
⎕EX'YesOrNo_Answers'
⎕EX'NoPause'
⎕EX'AskForNumber_Answers'
⎕EX'AskForText_Answers'
r←Copyright
r←'Copyright by Kai Jaeger ⋄ https://kai-jaeger.de ⋄ kai@aplteam.com'
r←ErrNo
r←811
Help
⎕SE.UCMD'ADOC ',⍕⎕THIS
(
'* 1.8.2 from 2024-10-12'
'  * Bug fix: `Select` got two checks wrong'
'* 1.8.1 from 2024-08-03'
'  * The "?"-syntax (automation variable) has been improved'
'  * Bug fixes'
'    * When multiple choices with a wildcard were added to `Select_Choices`, only the first was returned'
'    * When a check function returned a 0, a default value was added to the question again'
'    * Left argument of `AskForNumber` was not checked: must be a Boolean'
'* 1.8.0 from 2024-07-13'
'  * `Select` now supports using the wildcard character (*) not only at the end but also at the beginning'
'    of the second column of the `SelectChoices` variables'
'  * All function now return a full path to a global variable that can be used for automation when the '
'    right argument is a scalar question mark (`?`)'
'  * Documentation polished'
'* 1.7.1 from 2023-11-04'
'  * Bug fix: `AskForText`was not listed by `Public`'
'* 1.7.0 from 2023-09-15'
'  * The `AskForText` function now allows to define a default via `⍺`'
'* 1.6.1 from 2023-08-09'
'  * In case a non-existent item in a list was specified on `Select_Choices` the `Select` function'
'    did not return an empty vector but an index one greater than the number of items in the list'
'* 1.6.0 from 2023-08-07'
'  * `Select` now support a wildcard character (`*`) for `Select_Choices`'
'* 1.5.0 from 2023-06-13'
'  * A question may now contain LF in `AskForNumber`, `AskForText`, `YesOrNo` and `Pause`'
'  * Documentation improved'
'  * Bug fixes'
'    * Not all main functions used `AliasChar` rather than "@"'
'* 1.4.1 from 2023-04-10'
'  * Bug fix in `YesOrNo`, `AskForNumber` and `AskForText`: an alias was not removed from the question'
'* 1.4.0 from 2023-04-03'
'  * AskForText added'
'  * AskForNumber added '
'  * Documentation polished'
'* 1.3.0 from 2023-03-15'
'  * `Pause` added'
'  * The result of the `Version` function has changed'
'* 1.2.3 from 2023-02-19'
'  * The package wrongly believed to depend on `Tester2` and `CodeCoverage`'
'* 1.2.2 from 2023-01-15'
'  * An alias in a caption was only ignored when `Select_Choices` was defined'
'* 1.2.1 from 2021-12-13'
'  * `Select` had a problem when Select_Choices did exist but had zero rows '
'  * `YesOrNo` had a problem when YesOrNo_Answers did exist but had zero rows'
'* 1.2.0 from 2021-12-12'
'  * `Select` and `YesOrNow` now support aliases.'
'* 1.1.0 from 2021-10-10'
'  * `YesAndNo` now checks the global `YesOrNo_Answers`: if it is not empty it is used to answer the question'
'    automatically'
'  * `Select` now checks the global `Select_Choices`: if it is not empty it is used to select an item'
'    automatically      '
'  * `Cleanup` added as a means to get rid of all global variables used for automation'
'  * `Public` added in order to identify the public interface'
'  * `Help` added with extensive documentation including details regarding automation'
'  * Both `YesOrNo` and `Select` can now be interrupted by entering "∘∘∘"'
'  * Bug fixes'
'    * `Select` produced an error message when an item of ⍵ was a scalar'
'* 1.0.1 from 2021-10-12'
'  * Bug fix: API decleration was wrong'
'* 1.0.0 from 2021-10-11'
'  * First release'
)
r←LF
r←⎕UCS 10
{flag}←{lineFlag}Pause msg;input;alias;ind
⍝ Prints `msg` to he session and tells the user that she must press <enter> if she wants to continue.
⍝ By entering "`∘∘∘`" the user may interrupt `Pause`: this activates a stop.\\
⍝ The optional left argument `lineFlag` defaults to 0. If it's 1 then a line is printed. The length
⍝ is defined by `⎕PW-1`.\\
⍝ You can prevent `Pause` from displaying the message and requiring the user to press <enter>,
⍝ refer to the documentation with ]ADoc CommTools\\
⍝ The function will return 1 in case it did present the message and stopped, and 0 otherwise.
lineFlag←{0=⎕NC ⍵:0 ⋄ ⍎⍵}'lineFlag'
msg←⊃LF{⍺,⍺⍺,⍵}/⊆msg
msg←ReplaceCRbyLF msg
flag←1
:If AliasChar∊msg
:If 0<⎕NC'NoPause'
(alias msg)←{l←⍵⍳AliasChar ⋄ (l↑⍵)(l↓⍵)}msg
flag←~∨/({⍵↑⍨⍵⍳AliasChar}¨⊆NoPause)≡¨⊂alias
:EndIf
:Else
:If 0<⎕NC'NoPause'
:If NoPause≡1
:OrIf ∨/(⊆NoPause)∊⊆msg
:OrIf ∨/(NoPause/⍨~AliasChar∊¨NoPause){⍺≡¨(≢¨⍺)↑¨(≢⍺)⍴⊂⍵}{⍵↑⍨¯1+⍵⍳LF}msg
flag←0
:EndIf
:EndIf
:EndIf
:If flag
:If lineFlag
⍞←((⎕PW-1)⍴'─'),LF
:EndIf
:If AliasChar∊msg
ind←msg⍳AliasChar
:AndIf ∧/~(ind↑msg)∊' ',LF
msg←ind↓msg
:EndIf
input←⍞,0/⍞←({0=≢⍵:⍵ ⋄ ⍵,LF}msg),'In order to continue press <enter> '
:If '∘∘∘'≡¯3↑input
(1+⊃⎕LC)⎕STOP⊃⎕SI
∘∘∘ ⍝ Deliberate stop caused by user input
:EndIf
:EndIf
⍝Done
r←Public
r←''
r,←⊂'AskForText'
r,←⊂'AskForNumber'
r,←⊂'Select'
r,←⊂'YesOrNo'
r,←⊂'Pause'
r,←⊂'Cleanup'
r,←⊂'Help'
ReplaceCRbyLF←{LF@(⍸⍵=⎕UCS 13)⊣⍵}
index←{x}Select choices;flag;answer;question;value;bool;⎕ML;⎕IO;manyFlag;mustFlag;caption;buff;flag2;alias;blankFlag;firstPart
⍝ Presents `choices` as a numbered list and allows the user to select either exactly one or multiple ones.
⍝ Selecting just one is the default.\\
⍝ The optional left argument allows you to specify multiple (positional) choices:
⍝  * `caption` is shown above the choices; must be a simple character vector
⍝  * `manyFlag` defaults to 0 (= just 1 item might be selected) or 1 (allow selecting multiple items)
⍝  * `mustFlag` forces the user to select at least one option, disallowing to quit without making a decision\\
⍝ Notes:
⍝  * `choices` must not have more than 999 items\\
⍝  * By entering "`∘∘∘`" the user may interrupt `Select` by running onto a stop vector, overcoming
⍝    the Dyalog bug that ⍞ cannot be interrupted
⍝  * You may use the wildcard character "*" either at the beginning or the end of a selection string assigned
⍝    to the `Select_Choices` variable
⍝  * If the user aborts by entering "q" (for "quit") `⍬` will be returned
⍝  * In case `choices` is a scalar question mark, `Select` returns the path to itself and the name of
⍝    the global variable that can be used for automation, separated by a dot.
:If '?'≡choices
index←(⍕⎕THIS),'.Select_Choices←1 2⍴'' ''  '' '''
:Return
:EndIf
x←{0<⎕NC ⍵:⊆⍎⍵ ⋄ ''}'x'
(caption manyFlag mustFlag)←x,(⍴,x)↓'' 0 0
'"caption" must be a simple character vector'Assert 1=≡caption←,caption
'"caption" must not contain line feeds (⎕UCS 10)'Assert~LF∊caption
'"caption" must not contain carriage returns (⎕UCS 13)'Assert~(⎕UCS 13)∊caption
⎕IO←1 ⋄ ⎕ML←1
'Invalid right argument; must be a vector of text vectors.'⎕SIGNAL ErrNo/⍨2≠|≡choices
'Right argument has more than 999 items'⎕SIGNAL ErrNo/⍨999<≢choices
flag←0
firstPart←{⍵↑⍨⍵⍳LF}caption
:If 0<⎕NC'Select_Choices'
Select_Choices←(0<≢¨Select_Choices[;1])⌿Select_Choices
:AndIf 0<≢Select_Choices
:If AliasChar∊caption
(alias caption)←{l←⍵⍳AliasChar ⋄ (l↑⍵)(l↓⍵)}caption
flag←0<+/bool←({⍵↑⍨(,⍵)⍳AliasChar}¨Select_Choices[;1])≡¨⊂alias
:Else
:If 0=+/bool←Select_Choices[;1]≡¨⊂caption
bool←caption∘{⍵≡⍺↑⍨≢⍵}¨Select_Choices[;1]
:EndIf
flag←0<+/bool
:EndIf
:If flag
'Multiple choices qualify?!'Assert 1=+/bool
index←2⊃Select_Choices[bool⍳1;]
:If (⊂index)∊0 ⍬
index←⍬
:ElseIf ' '=1↑0⍴∊index ⍝ Text?!
:If '*'=¯1↑index
index←⍸((¯1+≢index)↑¨{⍵↓⍨+/∧\' '=⍵}¨choices)≡¨⊂¯1↓index
index←{1=≢⍵:⊃⍵ ⋄ ⍵}index
'Invalid selection'Assert(mustFlag{(0<≢⍵)≠⍺}index)∨∨/index∊⍳≢choices
:ElseIf '*'=⊃index
index←⍸((-¯1+≢index)↑¨{⍵↓⍨-+/∧\' '=⌽⍵}¨choices)≡¨⊂1↓index
index←{1=≢⍵:⊃⍵ ⋄ ⍵}index
'Invalid selection'Assert(mustFlag{(0<≢⍵)≠⍺}index)∨∨/index∊⍳≢choices
:ElseIf (,'a')≡,index
index←⍳≢choices
:ElseIf (,'q')≡,index
index←⍬
:ElseIf 0<≢buff←⍸index∘≡¨choices
index←buff
'Invalid selection'Assert index∊⍳≢choices
:ElseIf 1=≢index←⍸index∘≡¨(≢index)↑¨{⍵↓⍨+/∧\' '=⍵}¨choices
index←⊃index
'Invalid selection'Assert index∊⍳≢choices
:Else
'Invalid selection'Assert 0
:EndIf
:Else
'Invalid selection'Assert∧/index∊⍳≢choices
:EndIf
:EndIf
:EndIf
:If ~flag
flag2←0
:Repeat
blankFlag←0≠≢caption
:If AliasChar∊caption
:If (firstPart⍳' ')>firstPart⍳AliasChar
caption←{~AliasChar∊⍵:⍵ ⋄ ⍵↓⍨⍵⍳AliasChar}caption
:EndIf
:EndIf
⎕←{⍵↑'---',(blankFlag/' '),caption,(blankFlag/' '),⍵⍴'-'}⎕PW-1
⎕←⍪{((⊂'. '),¨⍨(⊂3 0)⍕¨⍳≢⍵),¨⍵}choices
⎕←''
question←'Select one ',(manyFlag/'or more '),'item',((manyFlag)/'s'),' '
question,←((manyFlag∨~mustFlag)/'('),((~mustFlag)/'q=quit'),((manyFlag∧~mustFlag)/', '),(manyFlag/'a=all'),((manyFlag∨~mustFlag)/')'),' :'
:If 0<≢answer←⍞,0/⍞←question
answer←(⍴question)↓answer
:If '∘∘∘'≡¯3↑answer
(1+⊃⎕LC)⎕STOP⊃⎕SI
∘∘∘ ⍝ Deliberate stop caused by user input
:EndIf
:If 1=≢answer
:AndIf answer∊'Qq',manyFlag/'Aa'
:If answer∊'Qq'
:If 0=mustFlag
index←⍬
flag2←1
:EndIf
:Else
index←⍳≢choices
flag2←1
:EndIf
:Else
(bool value)←⎕VFI answer
:If ∧/bool
:AndIf manyFlag∨1=+/bool
value←bool/value
:AndIf ∧/value∊⍳⍴choices
index←value
flag2←0≠≢index
:EndIf
:EndIf
:EndIf
:Until flag2
index←{1<≢⍵:⍵ ⋄ ⊃⍵}⍣(⍬≢index)⊣index
:EndIf
⍝Done
r←Version
⍝ See also `History`
r←'CommTools' '1.8.2' '2024-10-12'
yesOrNo←{default}YesOrNo question;isOkay;answer;add;dtb;answer2;bool;flag;buff;alias;firstPart;ind
⍝ Asks a simple question and allows just "Y" (or "y") or "N" (or "n") as answers.\\
⍝ The question may be a simple character vector, possibly with `⎕UCS 10` in between,
⍝ or a vector of simple character vectors.\\
⍝ You may specify a default via the optional left argument which when specified
⍝ rules what happens when the user just presses <enter>.
⍝ `default` must be either 1 (yes) or 0 (no).\\
⍝ By entering "`∘∘∘`" the user may interrupt `YesOrNo`: this activates a stop.\\
⍝ You can make `YesOrNo` answer the question automatically, refer to the documentation
⍝ with ]ADoc CommTools\\
⍝ Notes:
⍝ * This function does **not** work as intended when traced!
⍝ * In case `question` is a scalar question mark, `YesOrNo` returns the path to itself and
⍝   the name of the global variable that can be used for automation, separated by a dot.
:If '?'≡question
yesOrNo←(⍕⎕THIS),'.YesOrNo_Answers←0 2⍴'' '''
:Return
:EndIf
isOkay←0
default←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'default'
isOkay←0
:If ~(≡question)∊0 1
question←1↓⊃,/LF,¨question
:EndIf
question←ReplaceCRbyLF question
question←{⍵↓⍨+/∧\' '=⍵}question
:If 0≠≢default
'Left argument must be a scalar'⎕SIGNAL 11/⍨1≠≢default
:AndIf ~default∊0 1
'The left argument. if specified, must be a Boolean or empty'⎕SIGNAL 11
:EndIf
flag←1
firstPart←{⍵↑⍨⍵⍳LF}question
:If 0<⎕NC'YesOrNo_Answers'
YesOrNo_Answers←(0<≢¨' '~⍨¨YesOrNo_Answers[;1])⌿YesOrNo_Answers
:AndIf 0<≢YesOrNo_Answers
:If AliasChar∊firstPart
ind←firstPart⍳AliasChar
(alias question)←ind{(⍺↑⍵)(⍺↓⍵)}firstPart
flag←0<+/bool←({⍵↑⍨⍵⍳AliasChar}¨YesOrNo_Answers[;1])≡¨⊂alias
:ElseIf ~flag←0<+/bool←YesOrNo_Answers[;1]≡¨⊂question
:AndIf ~flag←0<+/bool←question∘{⍵≡(≢⍵)↑⍺}¨YesOrNo_Answers[;1]
:AndIf LF∊question
buff←{⍵↓⍨+/∧\' '=⍵}⊃¯1↑LF(≠⊆⊢)question
flag←0<+/bool←YesOrNo_Answers[;1]≡¨⊂buff
:EndIf
:If flag
'Multiple pre-prepared answers qualify?!'Assert 1=+/bool
answer←2⊃YesOrNo_Answers[bool⍳1;]
:If 0=≢answer
yesOrNo←default
:Else
('Invalid answer: ',answer)Assert answer∊'YyNn'
yesOrNo←answer∊'Yy'
:EndIf
:EndIf
:Else
flag←0
:EndIf
:If ~flag
:If 0=≢default
add←' (y/n) '
:Else
:If default
add←' (Y/n) '
:Else
add←' (y/N) '
:EndIf
:EndIf
:If 1<≡question
question←1↓⊃,/LF,¨question
:EndIf
:If (⌊/firstPart⍳' ',LF)>firstPart⍳AliasChar
question←{~AliasChar∊⍵:⍵ ⋄ ⍵↓⍨⍵⍳AliasChar}question,add
:Else
question,←add
:EndIf
:Repeat
⎕←''
⍞←question
answer←⍞
:If answer≡question ⍝ Did ...  (since version 18.0 trailing blanks are not removed anymore)
:OrIf (≢answer)=¯1+≢question ⍝ ... the ...
:OrIf 0=≢answer                                                          ⍝ ... user ...
:OrIf question≡(-≢question)↑answer                                       ⍝ ... just ...
dtb←{⍵↓⍨-+/∧\' '=⌽⍵}
answer2←dtb answer
:OrIf answer2≡((-≢answer2)↑LF{~⍺∊⍵:⍵ ⋄ ' ',dtb ⍺{⌽⍵↑⍨1+⍵⍳⍺}⌽⍵}question)  ⍝ ... press ...
:OrIf answer≡{1↓⊃¯1↑(⍵=LF)⊂⍵}LF,question                                 ⍝ ... <enter>?
:If 0≠≢default
yesOrNo←default
isOkay←1
:EndIf
:Else
:If '∘∘∘'≡¯3↑answer
(1+⊃⎕LC)⎕STOP⊃⎕SI
∘∘∘ ⍝ Deliberate stop caused by user input
:EndIf
answer←¯1↑{⍵↓⍨-+/∧\' '=⌽⍵}answer
:If answer∊'YyNn'
isOkay←1
yesOrNo←answer∊'Yy'
:EndIf
:EndIf
:Until isOkay
:EndIf
⍝Done
:Class DotNetZip
⍝ Zipping and unzipping with .NET(Core) on Windows, Linux and Mac-OS.\\
⍝ This class offers three shared methods:
⍝ * `ZipFolder`
⍝ * `UnzipTo`
⍝ * `ListZipContents`\\
⍝ For more advanced features the class can also be instantiated.\\
⍝ With `⎕NEW` either a new zip file is created or (by default) an existing one is opened.
⍝ This can be changed by passing an `overwrite` flag in addition to the name of the ZIP file.\\
⍝ You can then use these instance methods:
⍝ * `Add`
⍝ * `Delete`
⍝ * `ExtractTo`
⍝ * `List`
⍝ * `Dispose`\\
⍝ Once instantiated the read-only property `filename` carries the name of the ZIP file.\\
⍝ Kai Jaeger - APL Team Ltd.\\
⍝ Homepage: <https://github.com/aplteam/DotNetZip/>
⎕IO←1 ⋄ ⎕ML←1
∆INIT←0
∇ r←Version
:Access Public Shared
r←'DotNetZip' '2.2.0+67' '2023-02-26'
∇
∇ History
:Access Public Shared
⍝ * 2.2.0 from 2024-06-26
⍝   * On very fast machines this could run into
⍝     "The process cannot access the file ... because it is being used by another process"
⍝     We now wait for a moment and then try again, up to 5 times
⍝ * 2.1.0 from 2023-02-01
⍝   * Constructor is now more resilient against a temporary "File is in use" problem.
⍝ * 2.0.2 from 2022-05-31
⍝   * Bug fixed in "Delete"
⍝ * 2.0.1 from 2022-05-20
⍝   * Bug fixed in "Delete"
⍝   * Documentation fixed regarding `overwriteFlag` and `UnzipTo`
⍝   * Test cases polished
⍝ * 2.0.0 from 2022-05-18
⍝   * The constructor now checks whether .NET (core) is really available, and throws an error
⍝     if it is not.
⍝   * Documentation polished.
⍝   * Now managed by Cider rather than acre.
⍝ * 1.0.2 from 2021-03-01
⍝   * Problem with backslash as separator fixed
⍝   * Package config corrected
⍝ * 1.0.1 from 2021-01-10
⍝   * Paths are written to a ZIP file with / rather than \, no matter what the platform is.
⍝     Only then can we be sure that it will work on Linux and Mac-OS due to bugs in many
⍝     versions of .NET and .NET Core.\\
⍝     `ZipFolder` does not call the corresponding .NET method in order to overcome the \ bug.
⍝   * The `Add` function now checks the existence of any file. Sometimes non-existent files
⍝     did not cause the .NET call to crash.
⍝ * 1.0.0 from 2020-09-21
⍝   * First official release. Requires Dyalog 18.0 and is delivered as a Tatin package
∇
:Property  filename
:Access Public Instance
⍝ The name of the ZIP file
∇ r←Get
r←_filename
∇
:EndProperty
∇ make1(zipFilename);overwriteFlag;counter;success
⍝ Constructor that takes just one argument: the name of the ZIP file.\\
⍝ If `zipFilename` already exists it is kind of opened.
:Access Public Instance
:Implements Constructor
overwriteFlag←0
counter←success←0
:Repeat
:Trap 99      ⍝ This can happen on very fast machines
make zipFilename overwriteFlag
success←1
:Else
⎕DL 0.1   ⍝ The solution is to wait some time and then try again
:EndTrap
:Until 5<counter←counter+1
:If 0=success
⎕EXCEPTION.Message ⎕SIGNAL 99
:EndIf
⍝Done
∇
∇ make2(zipFilename overwriteFlag)
⍝ Constructor that takes two arguments:
⍝ * the name of the ZIP file
⍝ * Boolean for `overwriteFlag`\\
⍝ `overwriteFlag` is used to determine whether the ZIP should be opened (0=default)
⍝ or overwritten (1).
:Access Public Instance
:Implements Constructor
'"overwriteFlag" must be a Boolean'⎕SIGNAL 11/⍨~(⊂overwriteFlag)∊0 1
make zipFilename overwriteFlag
⍝Done
∇
∇ make(zipFilename overwriteFlag);stream;msg;flag;counter;doesExist
CheckMinVersion ⍬
Initialize ⍬
zipFilename←AddExtension F.ExpandPath zipFilename
QEX_System
:If doesExist←F.Exists zipFilename
:AndIf 0=overwriteFlag
flag←counter←0
:Repeat
:Trap 90
stream←System.IO.File.Open(zipFilename System.IO.FileMode.Open)
flag←1
:Else
msg←⍕⊃⎕EXCEPTION
:If ~∨/'The process cannot access the file'⍷msg
:OrIf 5=counter←counter+1
99 ⎕SIGNAL⍨{⍵↓⍨1+⍵⍳':'}{⍵↑⍨¯1+⌊/⍵⍳⎕UCS 10 13}∊msg
:Else
⎕DL 0.1
:EndIf
:EndTrap
:Until flag
_zip←QuadNEW System.IO.Compression.ZipArchive(stream System.IO.Compression.ZipArchiveMode.Update)
:Else
:If doesExist
('Cannot delete ',zipFilename)Assert F.DeleteFile zipFilename
:EndIf
:Trap 90
stream←System.IO.File.Open(zipFilename System.IO.FileMode.CreateNew)
:Else
msg←⍕⊃⎕EXCEPTION
99 ⎕SIGNAL⍨{⍵↓⍨1+⍵⍳':'}{⍵↑⍨¯1+⌊/⍵⍳⎕UCS 10 13}∊msg
:EndTrap
_zip←QuadNEW System.IO.Compression.ZipArchive(stream System.IO.Compression.ZipArchiveMode.Create)
_zip.Dispose
⍝ `List` is not available in "Create" mode, so we re-open it
stream←System.IO.File.Open(zipFilename System.IO.FileMode.Open)
_zip←QuadNEW System.IO.Compression.ZipArchive(stream System.IO.Compression.ZipArchiveMode.Update)
:EndIf
_zip.⎕DF'[archive:',zipFilename,']'
_filename←zipFilename
⍝Done
∇
⍝ ------------------------ Instance stuff
∇ {r}←{parent}Add toBeZipped;list;isDir
⍝ Use this to add one or more files to the ZIP file.\\
⍝ `toBeZipped` specifies the full path (or full paths) of what's going to be zipped. That's what's going to be
⍝ stored in the ZIP file.\\
⍝ If `toBeZipped` refers to a full path as in `C:\Foo.txt` or `/tmp/myfile` or, much more likely, refers to
⍝ the current directory as in `./foo.txt` then there is no need to specify the optional left argument.\\
⍝ If however you want to store the file `C:\Projects\Foo\docs\ReadMe.txt`, but it should be saved in the ZIP
⍝ file as `docs\ReadMe.txt`, then you must call `Add` like this:
⍝ ```
⍝ `C:\Projects\Foo` myDotNetZip.Add `docs\ReadMe.txt`
⍝ ```
⍝ Notes:
⍝ * `parent` might or might not have a trailing separator, and `toBeZipped` might or might not have a
⍝ leading separator: `Add` works that out.
⍝ * While `parent`, if specified, must be a simple string, `toBeZipped` might be simple (single file) or nested, when
⍝ every single item is treated as the name of a file or a folder.\\
⍝ Returns `⍬` (shy).
:Access Public Instance
r←⍬
parent←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'parent'
parent←F.EnforceSlash{0=≢⍵:⍵ ⋄ ⍵,(~'/\'∊⍨¯1↑⍵)/F.CurrentSep}parent
:If (≡toBeZipped)∊0 1
toBeZipped←{⍵↓⍨'/\'∊⍨1⍴⍵}toBeZipped
toBeZipped←F.EnforceSlash toBeZipped
:If F.IsDir parent,toBeZipped
:If 0<≢list←⊃('recursive' 1)F.Dir parent,toBeZipped,'/*'
:AndIf 0<≢list←(F.IsFile list)/list
list←(≢parent)↓¨list
list←F.EnforceSlash¨list
parent∘Add_¨list
:EndIf
:Else
parent Add_ toBeZipped
:EndIf
:Else
toBeZipped←{⍵↓⍨'/\'∊⍨1⍴⍵}¨toBeZipped
toBeZipped←F.EnforceSlash¨toBeZipped
isDir←F.IsDir parent∘,¨toBeZipped
:If ∨/~isDir
parent∘Add_¨(~isDir)/toBeZipped
:EndIf
:If ∨/isDir
parent∘Add¨isDir/toBeZipped
:EndIf
:EndIf
∇
∇ r←names ExtractTo folder;name;entry;writer;buff;zip;stream;rc;i;targetFilename;list;sep
⍝ `names` is the name of one or more zipped objects (files or directories).
⍝ Those will be extracted into `folder\`.\\
⍝ `names` may be simple (single object) or nested (vector of objects).\\
⍝ There must be no file or folder of the given name in the target folder, otherwise an error is thrown.\\
⍝ `r` is a vector of Booleans with the same lengths as `names`, carrying 1 for success and 0  otherwise.
⍝ However, if `names` is or contains the name of a folder, the length of `r` may be smaller than the
⍝ number of files and folders extracted.
⍝ A typical reason for a failure is that a given file or folder does not exist in the ZIP file.
:Access Public Instance
names←,⊆names
r←(≢names)⍴0
:For i :In ⍳≢names
name←F.EnforceSlash i⊃names
:If ⎕NULL≢entry←_zip.GetEntry⊂name
targetFilename←F.NormalizePath folder,'/',name
:Trap 90
'Create!'F.CheckPath 1⊃⎕NPARTS targetFilename
QEX_System
System.IO.Compression.ZipFileExtensions.ExtractToFile(entry targetFilename)
r[i]←1
:Else
⎕EXCEPTION.Message ⎕SIGNAL 11
:EndTrap
:Else
:If 0<≢list←List
:AndIf 0<≢≢∪(1⊃¨⎕NPARTS list)~⊂''
sep←('\'∊∊list)⌽'/\'
name←(sep[1]@(⍸name=sep[2]))name
:AndIf 0<≢list←(((1+≢name)↑[2]↑list)∧.=name,sep[1])/list
r[i]←⊃∨/list ExtractTo¨⊂folder
:EndIf
:EndIf
:EndFor
∇
∇ r←List;collection
⍝ Lists the contents of the ZIP file.
:Access Public Instance
collection←⌷_zip.Entries
r←collection.ToString
∇
∇ {r}←Delete filenames;bool;toBeDeleted
⍝ Delete one or more files from the ZIP.\\
⍝ Returns `⍬` (shy).
:Access Public Instance
r←⍬
filenames←F.EnforceSlash¨⊆filenames
:If 0<+/bool←(⍕¨⌷_zip.Entries)∊F.EnforceSlash¨⊆filenames
toBeDeleted←bool/⌷_zip.Entries
toBeDeleted.Delete
:EndIf
∇
∇ {r}←Dispose
⍝ Use this to close the `DotNetZip` instance.\\
⍝ Note that deleteting a instance of `DotNetZip` has the same effect as calling this method although the timing might differ
⍝ Returns `⍬` (shy).
:Access Public Instance
r←⍬
:If 0<⎕NC'_zip'
_zip.Dispose
⎕EX'_zip'
:EndIf
∇
⍝ ------------------------ Shared stuff
∇ Cleanup
:Implements Destructor
⍝ Calls the `Dispose` method and deletes `_zip`
:Trap 6 90
_zip.Dispose
:Case 90
Assert'Cannot access a closed file.'≡⎕EXCEPTION.Message
:EndTrap
⎕EX'_zip'
∇
∇ {r}←zipfile UnzipTo targetFolder
⍝ Unzip `⍺` into `⍵`.\\
⍝ `targetFolder` must not yet exist.
:Access Public Shared
r←Initialize ⍬
QEX_System
:Trap 6
System.IO.Compression.ZipFile.ExtractToDirectory zipfile targetFolder
:Else
⍝ Workaround for bug Mantis 18404 from 2020-08
⍝ The VALUE ERROR is not really a VALUE ERROR. This appears to happen only when `DotNetZip` is
⍝ instanciated within `⎕SE`, then )CLEAR is issed and then `DotNetZip` is again instanciated within `⎕SE`.
⎕EX'System'
System.IO.Compression.ZipFile.ExtractToDirectory zipfile targetFolder
:EndTrap
⍝Done
∇
∇ {zipFilename}←sourceFolder ZipFolder zipFilename;fileList;myZip;F;∆INIT;b
⍝ Takes a folder and zips it. `zipFilename` must not exist.\\
⍝ Returns the fully expanded name of `zipFilename`.\\
⍝ This is a workaround thats gets around the `\` problem on Linux and Mac-OS.\\
⍝ The "real" solution is available under the name `ZipFolder_` and can be brought back once
⍝ Microsoft fixes the bug, which means probably not in the foreseeable future.
:Access Public Shared
∆INIT←0
Initialize ⍬
sourceFolder,←((0<≢sourceFolder)∧~'/\'∊⍨¯1↑sourceFolder)/'/'
fileList←'recursive'F.ListFiles sourceFolder
fileList←(≢sourceFolder)↓¨fileList
:If ~∧/b←⎕NEXISTS sourceFolder∘,¨fileList
('',⊃{⍺,',',⍵}/(~b)/fileList)Assert 0
:Else
myZip←⎕NEW ⎕THIS(,⊂zipFilename)
sourceFolder∘myZip.Add¨fileList
zipFilename←myZip.filename
:EndIf
∇
∇ {targetFile}←sourceFolder ZipFolder_ targetFile
⍝ Takes a folder and zips it. `target` must not exist.\\
⍝ Returns the fully expanded name of the `targetFile`.
⍝  :Access Public Shared
Initialize ⍬
targetFile←F.ExpandPath AddExtension targetFile
sourceFolder←F.ExpandPath sourceFolder
QEX_System
System.IO.Compression.ZipFile.CreateFromDirectory sourceFolder targetFile
⍝Done
∇
∇ r←ListZipContents zipfile;myZip
:Access Public Shared
⍝ Helper that instantiates the `DotNetZip` class temporarily just for the purpose of unzipping a zip file.
myZip←QuadNEW ⎕THIS(zipfile 0)
r←myZip.List
∇
⍝ ------------------------ Private stuff -------------------
∇ r←QuadNEW arg;success;counter;qdmx
⍝ Attempts to be successful several times in case of "being used by another process" errors with
⍝ increasingly long delays. This often occured when `DotNetZip` itself had just dealt with the zip file,
⍝ and it almost always goes away after some tries.
success←counter←0
:Repeat
:Trap 90
r←⎕NEW arg
success←1
:Else
qdmx←⎕DMX
:If ∨/'because it is being used by another process'⍷⍕⎕EXCEPTION
counter+←1
⎕DL 0.2×counter
:Else
qdmx.EM ⎕SIGNAL qdmx.EN
:EndIf
:EndTrap
:Until success∨10<counter
('⎕NEW failed ',(⍕counter),' times')⎕SIGNAL 11/⍨10<counter
∇
∇ {r}←Initialize dummy;notwindows;netcoreset
r←⍬
CheckMinVersion ⍬
:If 0=∆INIT
F←(⊃⊃⎕CLASS ⎕THIS).##.FilesAndDirs
notwindows←'Win'≢3↑⊃# ⎕WG'APLVersion'
netcoreset←(,'1')≡2 ⎕NQ'.' 'GetEnvironment' 'DYALOG_NETCORE'
:If notwindows∨netcoreset                      ⍝ Under Windows, switch selects .NET version
⍝ .NET Core bridge: Lookup by name:
⎕USING←',System.IO.Compression.ZipFile' ',System.IO.Compression' ',System.IO.FileSystem'
:Else
⎕USING←',System.IO.Compression.DLL' ',System.IO.Compression.FileSystem.DLL'
:EndIf
∆INIT←1
:EndIf
∇
∇ {r}←parent Add_ toBeZipped
('Files does not exist: ',parent,toBeZipped)Assert ⎕NEXISTS parent,toBeZipped
Delete toBeZipped      ⍝ Remove from ZIP file, simulating "overwrite"
QEX_System
r←System.IO.Compression.ZipFileExtensions.CreateEntryFromFile _zip(parent,toBeZipped)toBeZipped
∇
AddExtension←{
⍝ ⍵ is a filename. If it has no extension ".zip" is added, otherwise it is left alone
⊃,/{(1⊃⍵),(2⊃⍵),{0=≢⍵:'.zip' ⋄ ⍵}3⊃⍵}⎕NPARTS ⍵
}
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←3 ⋄ ⍺ ⎕SIGNAL 1↓(↑∊⍵),11}
IfAtLeastVersion←{
⍝ ⍵ is supposed to be a number like 15 or 17.1, representing a version of Dyalog APL.
⍝ Returns a Boolean that is 1 only if the current version is at least as good.
⍵≤{⊃(//)⎕VFI ⍵/⍨2>+\'.'=⍵}2⊃# ⎕WG'APLVersion'
}
CheckMinVersion←{
IfAtLeastVersion 17:shy←1
'This class requires at least version 17.0 of Dyalog APL'⎕SIGNAL 11
}
∇ {r}←QEX_System
⍝ Workaround for bug Mantis 18404 from 2020-08
⍝ The VALUE ERROR is not really a VALUE ERROR. This appears to happen only when `DotNetZip` is instanciated
⍝ within `⎕SE`, then )CLEAR is issued and then again `DotNetZip` instanciated within `⎕SE`.
r←⎕EX'System'
∇
:EndClass
(
'## Overview'
''
'This package provides functions that are useful for dealing with files and directories. '
'They aim to be platform-independent.\\'
'Note that error codes and messages may differ between operating systems for the same'
'type of problem.\\'
''
'## Characters to avoid in file names and paths'
'Windows filenames cannot contain any of these characters: `\/:*?"<>|`.'
'If you want platform-independent code, now or in the future,'
'avoid using them even in Mac OS or Linux filenames.\\'
''
'## Separators in file paths'
'Dyalog tried to ease the pain by converting any `\` character into `/` on Windows.'
'The idea of sticking always with the `/` as separator because it works anyway is'
'attractive, but it creates new poblems: when you use third-party software such as a .NET'
'assembly or an EXE like 7zip.exe on Windows, then you **must** use `\` as a separator.'
'Even setting the `Directory` property of a `FileBox` object will fail with `/` as the separator.\\'
'For platform independence it is essential that filenames and directory names are _normalized_.'
'This means using the correct separator for the current operating system.'
'Otherwise you could create a directory or file with a backslash in its name, which is disastrous'
'on Linux or Mac OS.\\'
'The `FilesAndDirs` functions protect you from this problem by normalizing your file paths.'
'Use cover functions like `MkDir`, `NNAMES` and `NCREATE` etc. instead of the built-in system '
'functions to overcome the problem.\\'
'`⎕NCOPY` and `⎕NMOVE` (introduced in 17.0) are exceptions, but you can use the native function'
'with the `ExecNfunction` operator.'
'The `CurrentSep` method returns the correct separator for the current operating system.\\'
'The `NormalizePath` method normalizes a file path for the current operating system.\\'
'If you have a particular reason for using `/` under Windows or `\` under Linux'
'or Mac OS then you can use the `EnforceBackslash` or `EnforceSlash` functions.\\'
''
'## Misc'
'This class supports Windows, Mac OS and Linux but neither the Raspberry Pi nor AIX.'
''
'Kai Jaeger'
''
'Homepage: <http://github.com/aplteam/FilesAndDirs>'
)
AddTrailingSep←{⍺←⊢ ⋄ ⍺ ##.AddTrailingSep ⍵}
Cd←{##.Cd ⍵}
CheckPath←{⍺←⊢ ⋄ 1:shy←⍺ ##.CheckPath ⍵}
r←CurrentSep
r←##.CurrentSep
DateToReal←{##.DateToReal ⍵}
DeleteFile←{##.DeleteFile ⍵}
Dir←{⍺←⊢ ⋄ ⍺ ##.Dir ⍵}
EnforceBackslash←{##.EnforceBackslash ⍵}
EnforceSlash←{##.EnforceSlash ⍵}
ExecNfunction←{⍺←⊢ ⋄ 1:shy←⍺ (⍺⍺ ##.ExecNfunction) ⍵}
Exists←{##.Exists ⍵}
ExpandPath←{##.ExpandPath ⍵}
GetModifiedDate←{##.GetModifiedDate ⍵}
GetNewLineCharsFor←{##.GetNewLineCharsFor ⍵}
GetTempFilename←{⍺←⊢ ⋄ ⍺ ##.GetTempFilename ⍵}
GetTempFilename2←{⍺←⊢ ⋄ ⍺ ##.GetTempFilename2 ⍵}
path←GetTempPath
path←##.GetTempPath
GetTempSubDir←{##.GetTempSubDir ⍵}
IsDir←{##.IsDir ⍵}
IsDirEmpty←{##.IsDirEmpty ⍵}
IsFile←{##.IsFile ⍵}
IsSymbolicLink←{##.IsSymbolicLink ⍵}
ListDirs←{⍺←⊢ ⋄ ⍺ ##.ListDirs ⍵}
ListFiles←{⍺←⊢ ⋄ ⍺ ##.ListFiles ⍵}
MkDir←{##.MkDir ⍵}
NCREATE←{⍺←⊢ ⋄ ⍺ ##.NCREATE ⍵}
NGET←{⍺←⊢ ⋄ ⍺ ##.NGET ⍵}
r←NNAMES
r←##.NNAMES
NPUT←{⍺←⊢ ⋄ 1:shy←⍺ ##.NPUT ⍵}
NormalizePath←{⍺←⊢ ⋄ ⍺ ##.NormalizePath ⍵}
r←PWD
r←##.PWD
{r}←PolishCurrentDir
r←##.PolishCurrentDir
RmDir←{⍺←⊢ ⋄ 1:shy←⍺ ##.RmDir ⍵}
RmDirByForce←{##.RmDirByForce ⍵}
r←Version
r←##.Version
YoungerThan←{⍺←⊢ ⋄ ⍺ ##.YoungerThan ⍵}
path←{sep}AddTrailingSep path
⍝ Add a trailing separator to `path` in case it does not already have one
sep←{0<⎕NC ⍵:⍎⍵ ⋄ CurrentSep}'sep'
:If 0<≢path
path,←(~(¯1↑path)∊'/\')/sep
:EndIf
r←Cd path;Lin;r;rc;∆GetCurrentDirectory;∆SetCurrentDirectory;∆chdir
⍝ Reports and/or changes the current directory.
⍝ The method changes the current directory to what is passed as the right argument.\\
⍝ It returns the former current directory as a result.\\
⍝ Because an empty right argument has no effect, `Cd ''` effectively reports the
⍝ current directory. See also [`PWD`](#) (Print Work Directory).
path←NormalizePath path
:Select APLTreeUtils2.GetOperatingSystem ⍬
:Case 'Win'
'∆GetCurrentDirectory'⎕NA'I4 KERNEL32.C32|GetCurrentDirectory* I4 >T[]'
'∆SetCurrentDirectory'⎕NA'I4 KERNEL32.C32|SetCurrentDirectory* <0T'
:If 0=⊃rc←∆GetCurrentDirectory 260 260
r←GetLastError'GetCurrentDirectory error' ''
:Else
r←NormalizePath⊃↑/rc
:EndIf
:If 0≠≢path←path~'"'
:AndIf ' '=1↑0⍴path
path,←(CurrentSep≠¯1↑path)/CurrentSep
:If ~∆SetCurrentDirectory⊂path
11 ⎕SIGNAL⍨↑{⍵,'; rc=',⍕⍺}/GetLastError'SetCurrentDirectory error'
:EndIf
:EndIf
:CaseList 'Lin' 'Mac'
path←NormalizePath path
r←⊃⎕SH'pwd'
'∆chdir'⎕NA'I ',OS.GetSharedLib,'| chdir <0T1[]'
{}∆chdir⊂path
:Else
.  ⍝ Huuh?!
:EndSelect
{success}←{new}CheckPath path;newFlag
⍝ Returns a 1 if the `path` to be checked is fine, otherwise 0.\\
⍝ If `path` is nested it will return a vector of the same length as `path`
⍝ * If `path` exists but is not a directory a 0 is returned.\\
⍝ * If `path` does not exist a 0 is returned.\\
⍝ * If `path` does not exist but the left argument is "CREATE!" it will be created,
⍝ including any sub directories.\\
⍝ The left argument is case insensitive.
:If 2=|≡path
:If 0=⎕NC'new'
success←CheckPath¨path
:Else
success←new∘CheckPath¨path
:EndIf
:Else
path←NormalizePath path
:If 1=⎕NEXISTS path
success←IsDir path
:Else
success←0
newFlag←'CREATE!' 1∊⍨⊂{6::0 ⋄ {(0=1↑0⍴⍵):⍵ ⋄ 1 ⎕C ⍵}⍎⍵}'new'
:If newFlag
success←MkDir path
:EndIf
:EndIf
:EndIf
r←CurrentSep
⍝ Returns what is the "correct" filename separator under the current OS.
r←('Win'≡APLTreeUtils2.GetOperatingSystem ⍬)⊃'/\'
real←DateToReal timestamp
⍝ Converts a timestamp (`6↑⎕TS`) into a real (YYYYMMDD.hhmmss)
real←60 ⎕DT⊂6↑timestamp
{success}←DeleteFile filenames;thisFile;flag;counter;i;depth
⍝ Attempts to delete one or more files. Returns 1 in case of success and 0 otherwise
⍝ for each file in `filenames`.\\
⍝ Retries up to three times for every single files in case of any error 19 or 22.\\
⍝ This function does not care whether the file exists or not, although naturally
⍝ `success` will be 0 for any non-existing file.\\
⍝ `filenames` can be one of:
⍝ * Text vector representing a single filename.
⍝ * Vector of text vectors each representing a single file.\\
⍝ In case `filenames` is empty a 0 is returned.\\
⍝ Do not uses this function for removing directories: use `RmDir` instead.
:If 0=≢filenames
success←0
:Else
depth←≡filenames
filenames←,⊆filenames
filenames←NormalizePath filenames
success←(≢filenames)⍴0
:For i :In ⍳≢filenames
thisFile←i⊃filenames
:If ⎕NEXISTS thisFile
flag←counter←0
:Repeat
:Trap 19 22
1 ⎕NDELETE thisFile
success[i]←flag←1
flag←1
:Else
:If 4>counter←counter+1
⎕DL 0.1×counter
:Else
flag←1
:EndIf
:EndTrap
:Until flag
:EndIf
:EndFor
:If 1≡depth
success←⊃success
:EndIf
:EndIf
r←{parms_}Dir path;buff;list;more;parms;rc;extension;filename;folder;subFolders;pattern;isrecursiveCall
⍝ By default this function returns names. You may request further information by specifying `type`.\\
⍝ Without a trailing slash and any wildcards `path` is expected to be either a filename or the
⍝ name of a directory. `Dir` returns the requested information for just that file or directory.
⍝ `path` might be empty; in this case it defaults to the current directory.\\
⍝ `*` and `?` are treated as wildcard characters. That means that `FilesAndDirs` cannot deal with files
⍝ that contain a `*` or a `?` as part of any name, be it directory or filename; under Linux and Mac OS
⍝ these are legal characters for filenames and directory names.\\
⍝ Only the very last partition of `path` is allowed to carry wildcard characters.\\
⍝ If the last partition of `path` contains wildcards then `Dir` uses them to filter filenames but not
⍝ directories.\\
⍝ The result is a vector of the same length as `type`. `type` defaults to 0 which stands for filenames
⍝ and directory names.\\
⍝ You may specify parameters either as key/value pairs or via a namespace populated with variables.
⍝ Examples:
⍝ ~~~
⍝ ('recursive' 2) FilesAndDirs.Dir ''      ⍝ returns list with directories & files in the current dir.
⍝ ('recursive' 2) FilesAndDirs.Dir '*.md'  ⍝ returns list with files with extension "md".
⍝ ~~~
⍝
⍝ ~~~
⍝ parms←⎕ns''
⍝ parms.recursive←2
⍝ parms.type←3 4 5 1 0
⍝ parms FilesAndDirs.Dir ''
⍝ ~~~
⍝ Note that the names of parameters are case sensitive.\\
⍝ |Parameter  |Default|Meaning|
⍝ |-----------|-------|-------|
⍝ | depth     | ⍬     | Ignored when `recursive` is 0.<<br>>Use this to restrict the number of times `Dir` goes down the directory tree.<<br>>For example, set this to 2 if you are interested just in the given directory and its sub-directories.|
⍝ | follow    | 0     | 1=follow symbolic links, meaning that the properties shown are those of the file the link points to rather than the link. |
⍝ | recursive | 0     | 1=scan `path` recursively; may crash with "ACCESS DENIED"; 2=like 1 but ignores directories that cause "ACCESS DENIED"|
⍝ | type      | 0     | Use this to select the information to be returned by `Dir`.<<br>>0 means names. For more information see help on `⎕NINFO`. |
⍝ Note that `recursiveCall` is used internally in order to detect whether `Dir` has called itself recursively.
r←⍬
path←NormalizePath path
parms←⎕NS''
parms.follow←1
parms.recursive←0
parms.depth←⍬
parms.type←0
parms.recursiveCall←0
:If 0<⎕NC'parms_'
:If {2::0 ⋄ 1⊣⍵.⎕NL 2}parms_
{}parms.{{⍎⍺,'←⍵'}/⍵}¨parms_.({⍵(⍎⍵)}¨↓⎕NL 2)
'Invalid parameter'⎕SIGNAL 11/⍨∨/~(' '~¨⍨↓parms.⎕NL 2)∊'follow' 'recursive' 'type' 'recursiveCall' 'depth'
:Else
parms_←,⊂∘,⍣(2=|≡parms_)⊣parms_
'Invalid parameter'⎕SIGNAL 11/⍨0∊(⊃¨parms_)∊(' '~¨⍨↓parms.⎕NL 2),⊂'recursiveCall'
parms.{{⍎⍺,'←⍵'}/⍵}¨parms_
:EndIf
:EndIf
isrecursiveCall←parms.recursiveCall
:If 0=≢path
:OrIf (,'.')≡,path
path←PWD,CurrentSep
:EndIf
path↓⍨←-(CurrentSep,'*')≡¯2↑path
:If CurrentSep=¯1↑{⍵↓⍨-'*'=¯1↑⍵}path
'Directory does not exist'⎕SIGNAL 6/⍨0=⎕NEXISTS path
:If 'Win'≢APLTreeUtils2.GetOperatingSystem ⍬
:OrIf ~{(':'=0⊃⍵)∧CurrentSep=1⊃⍵}¯2↑path
:Trap 19 22
'Not a directory'⎕SIGNAL 11/⍨1≠1 ⎕NINFO⊣path
:Else
:If 1 5 'Access is denied.'≢⎕DMX.OSError
({1↓⊃,/(⎕UCS 13),¨⍵}⎕DMX.DM)⎕SIGNAL ⎕EN
:Else
:Return
:EndIf
:EndTrap
:EndIf
:Trap 10 19 22
r←(0 1,parms.type~0 1)⎕NINFO⍠('Follow'parms.follow)('Wildcard' 1)⊣path,'*'
:Else
r←⍬  ⍝ Apparently we do not have the rights to read the directory, therefore we ignore it
:Return
:EndTrap
:If 0≠≢0⊃r
(0⊃r)←NormalizePath 0⊃r
:EndIf
:If 0<parms.recursive
parms.depth-←1
:AndIf 0≠≢r
:AndIf 1∊1⊃r
:AndIf (0=≢parms.depth)∨1↑0<parms.depth
parms.recursiveCall←1
buff←parms∘Dir¨((1=1⊃r)/0⊃r),¨CurrentSep
:If 0≠≢buff←(0<≢¨buff)/buff
r←r,¨⊃,¨/buff
:EndIf
:If 0=isrecursiveCall
r←(⊂⍋↑0⊃r)∘⌷¨r
:EndIf
:EndIf
:If 0=isrecursiveCall
r←r[,(0 1,parms.type~0 1)⍳parms.type]
:EndIf
:Else
:If ∨/'*?'∊path
(folder filename extension)←⎕NPARTS path
('Wildcard characters are allowed only after the last "',CurrentSep,'"')⎕SIGNAL 11/⍨∨/'*?'∊folder
:If 0≠≢buff←⊃⎕NPARTS ¯1↓⊃⎕NPARTS folder
:AndIf 0=⎕NEXISTS buff
'path does not exist'⎕SIGNAL 6
:EndIf
pattern←(folder,((~(¯1↑folder)∊'/\')∧0≠≢folder)/'/'),(filename{0=≢⍺,⍵:'' ⋄ ⍺,⍵}extension)
:Trap (0<parms.recursive)/19 22
buff←(0 1,parms.type~0 1)⎕NINFO⍠('Follow'parms.follow)('Wildcard' 1)⊣pattern
:Else
buff←⍬ ⍬
:EndTrap
:If 0<parms.recursive
buff←((1⊃buff)∊2 4)∘/¨buff   ⍝ Just ordinary files and links
:EndIf
(0⊃buff)←NormalizePath 0⊃buff
r←buff[,(0 1,parms.type~0 1)⍳parms.type]
isrecursiveCall←parms.recursiveCall
parms.recursiveCall←1
:If 0<parms.recursive
parms.depth-←1
:EndIf
:If 0<parms.recursive
:AndIf IsDir folder
:AndIf (0=≢parms.depth)∨1↑0<parms.depth
:AndIf 0≠≢subFolders←ListDirs folder
buff←parms Dir¨subFolders,¨⊂'/',filename,extension
:If 0=+/'*?'∊path
buff←(⊂∘⊂¨subFolders),¨¨buff
:EndIf
buff←(0<≢¨buff)/buff
:If 0≠≢buff←⊃{⍺,¨⍵}/buff
:AndIf 0≠≢buff←(0<≢¨buff)/buff
r←r,¨buff
:EndIf
:EndIf
:If 0=isrecursiveCall
:AndIf 0=≢(filename,extension)~'*'
buff←(0 1,parms.type~0 1)⎕NINFO⍠('Follow'parms.follow)⊣folder
(0⊃buff)←NormalizePath 0⊃buff
r←(⊂¨buff),¨r
:EndIf
:Else
'path does not exist'⎕SIGNAL 6/⍨0=⎕NEXISTS path
r←(0 1,parms.type~0 1)⎕NINFO⍠('Follow'parms.follow)⊣path
(0⊃r)←NormalizePath 0⊃r
r←,⊂r[,(0 1,parms.type~0 1)⍳parms.type]
:EndIf
:EndIf
EncodeBlanks←{0=+/b←' '=w←⍵:w ⋄ (b/w)←⊂'\ ' ⋄ ⊃,/w}
path←EnforceBackslash path
⍝ Use this if you must make sure that `path` contains `\` rather than `/`.\\
((path='/')/path)←'\'
path←EnforceSlash path
⍝ Use this if you must make sure that `path` contains `/` rather than `\`.\\
⍝ Preserves the first two characters if they are `\\`.
((path='\')/path)←'/'
{r}←x(f ExecNfunction)y;counter;max;flag;path;success
⍝ Use this to call `⎕NMOVE` or `⎕NCOPY` because it will try more than once before eventually giving up.\\
⍝ Is an operator in order to allow constructs like this:\\
⍝ ```
⍝ targetPath (⎕NMOVE⍠('IfExists' 'Skip')FilesAndDirs.ExecNFunction) sourcePath
⍝ ```
⍝ Helpful in case a file is in use temporarily by, say, DropBox.
path←{∨/'?*'∊⍵:⊃⎕NPARTS ⍵ ⋄ ⍵}y
('Not found: ',path)⎕SIGNAL(~⎕NEXISTS path)/6 ⍝ The last part carries "?*", so we have to ignore it
counter←flag←success←0
max←10
:Repeat
:Trap 19 22
r←x f y
success←flag←1
:Else
counter+←1
flag←max<counter
⎕DL 0.01×counter
:EndTrap
:Until flag
:If ~success
⎕EM ⎕SIGNAL ⎕EN
:EndIf
⍝Done
bool←Exists y
⍝ Same as `⎕NEXISTS` but `y` is normalized.\\
⍝ Note that if `y` is a symbolic link that exists then a 1 will be returned, no matter
⍝ whether the target the link is pointing to actually does exist or not.
y←NormalizePath y
:If 1<|≡y
bool←⎕NEXISTS¨y
:Else
bool←⎕NEXISTS y
:EndIf
r←ExpandPath path
⍝ Shortcut for  `'expand' NormalizePath` - see there.
r←1 NormalizePath path
r←GetLastError;∆GetLastError
:Select APLTreeUtils2.GetOperatingSystem ⍬
:Case 'Win'
'∆GetLastError'⎕NA'I4 kernel32.C32|GetLastError'
r←∆GetLastError
:CaseList 'Lin' 'Mac'
r←⊃⊃(//)⎕VFI⊃⎕SH'echo $?'
:Else
'This operating system is not supported'⎕SIGNAL 11
:EndSelect
r←GetModifiedDate filename
⍝ Returns the "Modified" date of `filename` as a timestmap
r←⊃3 ⎕NINFO filename
r←GetMsgFromError mid;FORMAT_MESSAGE_IGNORE_INSERTS;FORMAT_MESSAGE_FROM_SYSTEM;FormatMsg;mid;size;LangID;LoadLibrary;this;FORMAT_MESSAGE_FROM_HMODULE;hModule;FreeLibrary;ind;multiByte
⍝ Translate Message ID (mid) to something more useful for human beings.
FORMAT_MESSAGE_IGNORE_INSERTS←512
FORMAT_MESSAGE_FROM_HMODULE←2048
FORMAT_MESSAGE_FROM_SYSTEM←4096
LangID←0
'FormatMsg'⎕NA'I KERNEL32|FormatMessage* I4 I4 I4 I4 >T[] I4 I4'
:If 0>mid←⊃mid
:AndIf ¯16777216≤mid
mid←-mid
:EndIf
multiByte←80=⎕DR' '                  ⍝ Flag: is Unicode
size←1024×1+multiByte                ⍝ Dynamic buffer size
r←↑⊃/FormatMsg(FORMAT_MESSAGE_FROM_SYSTEM+FORMAT_MESSAGE_IGNORE_INSERTS)0 mid LangID size size 0
:If 0=≢r
'LoadLibrary'⎕NA'I KERNEL32|LoadLibrary* <0T'
⎕NA'I KERNEL32|FreeLibrary I'
:For this :In 'ADVAPI32' 'NETMSG' 'WININET' 'WSOCK32'
:If 0≠hModule←LoadLibrary(⊂this)
:If this≡'WSOCK32'
ind←10013 10014 10024 10035 10036 10037 10038 10039 10040 10041 10042 10043 10044 10046 10047 10048 10049 10050 10051 10052 10053 10054 10055 10056 10057 10058 10059 10060 10061 10063 10064 10065 10066 10067 10068 10069 10070 10071 10091 10092 10093 10112 11001 11002 11003 11004
mid←(10060 10013 10023 10010 10011 10012 10026 10014 10015 10044 10036 10031 10030 10016 10029 10028 10122 10039 10046 10040 10038 10037 10127 10034 10035 10003 10047 10033 10135 10000 10042 10043 10017 10018 10019 10020 10021 10025 10001 10002 10148 10041 10005 10006 10007 10114,mid)[ind⍳mid]
:EndIf
r←↑⊃/FormatMsg(FORMAT_MESSAGE_FROM_HMODULE+FORMAT_MESSAGE_IGNORE_INSERTS)hModule mid LangID size size 0
{}FreeLibrary hModule
:If ×⊃⍴r
:Leave
:EndIf
:EndIf
:EndFor
:EndIf
r←¯2↓r
newline←GetNewLineCharsFor os
⍝ Returns the proper `newline` character(s) for `os` or, if `os` is empty, for the current OS.
:If 0=≢os
os←APLTreeUtils2.GetOperatingSystem ⍬
:EndIf
'⍵ is not a supported Operating System'⎕SIGNAL 11/⍨~(⊂os)∊'Win' 'Lin' 'Mac'
newline←('Win' 'Lin' 'Mac'⍳⊂os)⊃(⎕UCS 13 10)(⎕UCS 10)(⎕UCS 10)
⍝Done
filename←{prefixString}GetTempFilename path;rc;start;no;fno
⍝ Returns the name of an unused temporary filename. If `path` is empty the default temp
⍝ path is taken; that's what `GetTempPath` would return. This means you can overwrite
⍝ this by specifying a path.\\
⍝ `prefixString`, if defined, is a leading string of the filename
⍝ going to be generated. This is **not** the same as\\
⍝ `'pref',GetTempFileName ''`\\
⍝ because specified as left argument it is taken into account
⍝ when the uniqueness of the created filename is tested.\\
⍝ See also `GetTempFilename2` which is recommended.\\
⍝ This function does **not** use the Windows built-in function since
⍝ it has proven to be unreliable under W7 (at least).
prefixString←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'prefixString'
path←NormalizePath path
path,←((0≠≢path)∧CurrentSep≠¯1↑path)/CurrentSep
:If 0=≢path
:Trap 0
path←GetTempPath
:Else
11 ⎕SIGNAL⍨'Cannot get a temp path; rc=',⍕⎕EN
:EndTrap
:EndIf
:If 0=rc←'Create!'CheckPath path
11 ⎕SIGNAL⍨'Error during "Create <',path,'>"; rc=',⍕GetLastError
:Else
start←no←⍎ProduceRandomName
:Repeat
filename←path,prefixString,(⎕AN,'_',⍕no),'.tmp'
:Trap 22
fno←filename ⎕NCREATE 0
⎕NUNTIE fno
:Else
fno←0
:EndTrap
no+←10
:Until (fno≠0)∨no>start+30×10  ⍝ max 30 tries
'Unable to create temporay file'⎕SIGNAL 11/⍨fno=0
:EndIf
filename←NormalizePath filename
⍝Done
filename←{extension}GetTempFilename2 prefixString;rc;start;no;fno;path
⍝ Returns the name of a previously unused temporary filename. The file will be created.\\
⍝ `prefixString`, when empty, defaults to `⎕AN`. The name of
⍝ the file will match `prefixString` followed by an `_` and a randomly generated number.\\
⍝ `extension`, if defined, defines the extension of the temp file without the dot.
⍝ This defaults to `tmp`.\\
⍝ This function does **not** use the Windows built-in function since
⍝ it has proven to be unreliable under W7 (at least).
extension←{0<⎕NC ⍵:⍎⍵ ⋄ 'tmp'}'extension'
extension←('.'=1⍴extension)↓extension
:If 0=≢prefixString
prefixString←⎕AN
:EndIf
path←GetTempPath
start←no←⍎ProduceRandomName
:Repeat
filename←path,(prefixString,'_',⍕no),{0=≢⍵:⍵ ⋄ '.',⍵}extension
:Trap 22
fno←filename ⎕NCREATE 0
⎕NUNTIE fno
:Else
fno←0
:EndTrap
no+←10
:Until (fno≠0)∨no>start+30×10  ⍝ max 30 tries
'Unable to create temporay file'⎕SIGNAL 11/⍨fno=0
filename←NormalizePath filename
⍝Done
path←GetTempPath;∆GetTempPath
⍝ Returns the path to the temp directory on the current system.
:Select APLTreeUtils2.GetOperatingSystem ⍬
:Case 'Win'
'∆GetTempPath'⎕NA'I4 KERNEL32.C32|GetTempPath* I4 >T[]'
path←⊃↑/∆GetTempPath 1024 1024
:If 0=≢path
11 ⎕SIGNAL⍨'Problem getting Windows temp path!; rc=',⍕GetLastError
:Else
path←NormalizePath path
:EndIf
:Case 'Lin'
path←'/tmp/'
:Case 'Mac'
path←'/private/tmp/'
:Else
.⍝ Huuh?!
:EndSelect
dirname←GetTempSubDir prefixString;path;no;flag;success;i
⍝ Returns name of previously unused sub directory in the `TEMP` directory with a random name.\\
⍝ The directory will be created.
⍝ `prefixString`, when empty, defaults to `⎕AN`. The name of the directory will
⍝ match `prefixString` followed by an `_` and a randomly generated number.\\
'The right argument must not carry a * or a \'⎕SIGNAL 11/⍨∨/prefixString∊'\*'
:If 0=≢prefixString
prefixString←⎕AN
:EndIf
path←GetTempPath
no←⍎ProduceRandomName
i←0
success←flag←0
:Repeat
dirname←path,(({⍵↓⍨-(¯1↑⍵)∊'/\'}prefixString),'_',(⍕no),'_',(⍕i))
:Trap 22
2 ⎕MKDIR dirname~'"'
flag←success←1
:Else
⎕DL 0.01+0.01×0=5|5
:EndTrap
:Until flag∨30<i←i+1
dirname←NormalizePath dirname
('Unable to create "',dirname,'"')⎕SIGNAL 22/⍨~success
⍝Done
(drive path)←HandlePath path
path←NormalizePath⊃,/1 ⎕NPARTS path
drive←''
:If '\\'≢2↑path
:If ~':'∊path
path←PWD,path
:EndIf
:If ':'∊path
drive←1↑path
:EndIf
:EndIf
(
'* 5.8.1 ⋄ 2024-08-12'
'  * Bug fix: shy API-dfns returned a non-shy result'
'* 5.8.0 ⋄ 2024-07-16'
'  * `NPUT` made more resilient against a FILE NAME ERROR (22)'
'* 5.7.1 ⋄ 2024-04-03'
'  * Bug fixes'
'    * Calling `RmDir` with a single nexted path causes an error'
'    * Both `RmDir` and `RmDirByForce` accepted "\.." as argument, which eventually resulted in C:\'
'* 5.7.0 ⋄ 2023-12-30'
'  * `IsDirEmpty` method added that checks for a dir being empty without performance penalty on Windows'
'* 5.6.1 ⋄ 2023-12-19'
'  * `ListDirs` behaved inconsistently on non-Windows platforms: it threw an error when the provided path'
'    was not a directory but returned an empty list on Windows. It now always throws an error.'
'* 5.6.0 ⋄ 2023-12-18'
'  * `NormalizePath` now removes trailing pairs of ''/..'' on Linux and Mac-OS in case the left'
'    argument is "expand" as it already did on Windows in the past. '
'  * Both `RmDir` and `RmDirByForce` take advantage of that new feature of `NormalizePath`. '
'* 5.5.1 ⋄ 2023-09-26'
'  * Bug fix in `RmDirByForce`: run into an endless loop in case a folder could not be removed'
'  * Superfluous `ADOC_Dec` deleted'
'  * Latest test helpers established'
'  * Packages updated'
'                    '
'* 5.5.0 ⋄ 2023-04-20'
'  * `ListFiles` does allow wildcard characters now even with "recursive"'
'  * Bug fix: mistake in the documentation of ListDirs corrected regarding wildcard  characters'
'* 5.4.2 ⋄ 2023-04-09'
'  * Bug fix in `ListFiles`, `ListDirs` and `Dir`: a simple `.` as argument made them crash'
'* 5.4.1 ⋄ 2023-04-08'
'  * Bug fix in `Cd`: returned a 0 rather than the previous directory on non-Windows platforms'
'  * Several tests fixed that would not work on Mac-OS'
'  * Two superfluous non-public functions removed'
'* 5.4.0 ⋄ 2023-03-24'
'  * Function `AddTrailingSep` added'
'  * Renamed `ADOC_Dec` to `ADOC_Doc`'
'  * Documentation polished'
'* 5.3.4 ⋄ 2023-02-11'
'  * Bug fix: `ExecNfunction` was not available via the API'
'* 5.3.3 ⋄ 2023-02-09'
'  * PolishCurrentDir was buggy'
'* 5.3.2 ⋄ 2023-02-06'
'  * `ExecNfunction` did not get along with wildcard characters'
'  * `RmDirByForce` often crashed on Linux because of timing issues'
'* 5.3.1 ⋄ 2023-02-01'
'  * Bug fix in `RmDirByForce` got somehow lost...'
'* 5.3.0 ⋄ 2023-02-01'
'  * Operator `ExecNfunction` added for executing ⎕NMOVE and ⎕NCOPY'
'  * Converted from a script to an ordinary namespace'
'  * Bug fixes'
'    * `RmDirByForce` should have tried more than once but did not'
'    * `Dir` had trouble to detect that it called itself under very rare circumstances'
'* 5.2.1 ⋄ 2022-11-28'
'  * `RmDirByForce` did not work on directories with a space in their name'
'  * `RmDirByForce` now checks whether `path` was successfully deleted'
'* 5.2.0 ⋄ 2022-11-27'
'  * Method `RmDirByForce` added'
''
'For information regarding older version see <https://github.com/aplteam/FilesAndDirs/releases>'
)
r←IsDir path
⍝ Returns 1 if `path` is a directory and 0 otherwise, even if `path` does exist as a file.\\
⍝ Notes:
⍝ * If `path` is a directory the current user has no "read" access to then it returns 0!
⍝ * `C:\` is considered a directory, though strictly speaking it is not.
:If 2=≡path
r←IsDir¨path
:Else
path←NormalizePath path
:Trap 11
:If r←⎕NEXISTS path
:If 'Win'≢APLTreeUtils2.GetOperatingSystem ⍬
:OrIf ~{(':'=0⊃⍵)∧CurrentSep=1⊃⍵}¯2↑path
:Trap 22
:If 0 ⍝ <1594
⍝ Right now, without ('Wildcard' 1), it generates a FILENAME ERROR when the user has not read access
⍝ See bug report <01594>
⍝ The `⊃⊃` as well as the `(-'/\'∊⍨¯1↑path)↓` are only needed with ('Wildcard' 1)
:If ('.',CurrentSep)≡2↑path
r←{⊃⊃1=1 ⎕NINFO⍠('Wildcard' 1)⊣(-'/\'∊⍨¯1↑⍵)↓⍵}'expand'NormalizePath path
:Else
r←{⊃⊃1=1 ⎕NINFO⍠('Wildcard' 1)⊣(-'/\'∊⍨¯1↑⍵)↓⍵}path
:EndIf
:Else
r←1=1 ⎕NINFO path
:EndIf
:Else
r←0
:EndTrap
:EndIf
:EndIf
:Else
r←0
:EndTrap
:EndIf
bool←IsDirEmpty dir;PathIsDirectoryEmptyW;res
('Right argument is not a directory')⎕SIGNAL 6/⍨~IsDir dir
:If 'Win'≡APLTreeUtils2.GetOperatingSystem ⍬
{}⎕NA'I2 Shlwapi.dll|PathIsDirectoryEmptyW <0T'
bool←PathIsDirectoryEmptyW⊂dir
:Else
res←⎕SH'[ "$(ls -A ',dir,')" ] && echo "Not Empty" || echo ""'
bool←'Not Empty'≢⊃res
:EndIf
r←IsFile y
⍝ Returns 1 if `filename` is a regular file and a 0 otherwise, even if `y` does exist as a directory.\\
⍝ `y` must be either a text vector or a (negative!) tie number of a native file.
⍝ If it is a number but not a tie number then an error is signalled.
:If 2=≡y
r←IsFile¨y
:Else
:If 0=1↑0⍴y
'Not tied'⎕SIGNAL 18/⍨~y∊⎕NNUMS
r←2=1 ⎕NINFO y
:Else
y←NormalizePath y
:Trap 11
:If r←⎕NEXISTS y
r←2=1 ⎕NINFO y
:Else
r←0
:EndIf
:Else
r←0
:EndTrap
:EndIf
:EndIf
r←IsSymbolicLink y
⍝ Returns a 1 if `y` is a symbolic link and a 0 otherwise, even if `y` does exist as a file or directory.\\
⍝ `y` must be a text vector.
:If 2=≡y
r←IsSymbolicLink¨y
:Else
'Invalid right argument'⎕SIGNAL 11/⍨' '≠1↑0⍴y
y←NormalizePath y
:Trap 19 22
r←4=1 ⎕NINFO⍠('Follow' 0)⊣y
:Else
r←0
:EndTrap
:EndIf
r←{x}ListDirs path;buff;recursiveFlag;part1;part2;recursive;depth
⍝ Lists all directories (but nothing else) in `path`.\\
⍝ `path` must of course be a directory.\\
⍝ Specify the string `recursive` (not case sensitive) as left argument to make the
⍝ function work recursively.\\
⍝ In addition to `recursive` you may also specify an integer defining the depth. For example,
⍝ if you are interested just in the given directories and its sub-directory set this to 2.\\
⍝ `*` and `?` are treated as wildcard characters. That means that `FilesAndDirs` cannot deal with files
⍝ that contain a `*` or a `?` as part of any name, be it directory or filename; under Linux and Mac OS
⍝ these are legal characters for filenames and directory names.\\
⍝ Returns a vector of text vectors in case anything was found and `''` otherwise.
x←{0<⎕NC ⍵:⍎⍵ ⋄ ''⍬}'x'
x←⊂∘,⍣((⊃' '=1↑0⍴↑x)∧1=≡x)⊣x
(recursive depth)←2↑x,(≢x)↓0 ⍬
depth-←1
path←NormalizePath,path
(part1 part2)←APLTreeUtils2.SplitPath path
'Wildcard characters are allowed only in the last part of a path'⎕SIGNAL 11/⍨∨/'?*'∊part1
path↓⍨←-CurrentSep=¯1↑path
recursiveFlag←{0=⎕NC ⍵:0 ⋄ w←⍎⍵ ⋄ 0=1↑0⍴w:w ⋄ 'recursive'≡⎕C w}'recursive'
:If recursiveFlag
:AndIf ∨/'*?'∊path
'"path" must not carry wildcard chars in case "Recursive" is specified'⎕SIGNAL 11
:EndIf
path,←(~∨/'?*'∊path)/CurrentSep
'Right argument is not a directory'⎕SIGNAL 11/⍨0=IsDir{~∨/'*?'∊⍵:⍵ ⋄ 0⊃⎕NPARTS ⍵}path
:Trap 10 19 22
buff←(0 1)⎕NINFO⍠('Wildcard' 1)⊣path,'*'
:Else
r←''  ⍝ Apparently we do not have the rights to read the directory, therefore we ignore it
:Return
:EndTrap
r←(1=1⊃buff)/0⊃buff
:If 0≠≢r←NormalizePath r
:AndIf 1=recursiveFlag
:AndIf 0=+/'*?'∊path
:AndIf (0=≢depth)∨1↑0<depth
:AndIf 0≠≢buff←⊃,/(⊂recursiveFlag depth)ListDirs¨r,¨'/'
r,←buff
:EndIf
r←{x}ListFiles path;buff;recursiveFlag;part1;part2;recursive;depth
⍝ Lists all files (but nothing else) in `path`.\\
⍝ `path` must of course be a directory.
⍝ Pass "recursive" (not case sensitive) as ⍺ to make the function work recursively.\\
⍝ In addition to "recursive" you may also specify an integer defining the depth. For
⍝ example, if you are interested just in the content of the given directory and its sub-directories
⍝ (but not any sub-sub directories!) then set this to 2.\\
⍝ `*` and `?` are treated as wildcard characters. That means that `FilesAndDirs` cannot deal with files
⍝ that contain a `*` or a `?` as part of any name, be it directory or filename; under Linux and Mac OS
⍝ these are legal characters for filenames and directory names.\\
⍝ Returns a vector of text vectors in case anything was found and `''` otherwise.
x←{0<⎕NC ⍵:⍎⍵ ⋄ ''⍬}'x'
x←⊂∘,⍣((⊃' '=1↑0⍴↑x)∧1=≡x)⊣x
(recursive depth)←2↑x,(≢x)↓0 ⍬
:If ∧/~'?*'∊1⊃⎕NPARTS path
path←AddTrailingSep path
:EndIf
path←NormalizePath path
(part1 part2)←APLTreeUtils2.SplitPath path
'Wildcard characters are allowed only in the last part of a path'⎕SIGNAL 11/⍨∨/'?*'∊part1
'Right argument is not a directory'⎕SIGNAL 11/⍨0=IsDir part1
path↓⍨←-CurrentSep=¯1↑path
recursiveFlag←'recursive'≡⎕C{0<⎕NC ⍵:⍎⍵ ⋄ ''}'recursive'
path,←(~∨/'?*'∊path)/CurrentSep
:If 0=≢buff←('recursive'recursiveFlag)('type'(0 1))('depth'depth)Dir path
r←''
:Else
r←(2=1⊃buff)/0⊃buff
r←NormalizePath r
:EndIf
{success}←MkDir path;counter;flag
⍝ Make directory. If the directory already exists no action is taken and a 1 returned.\\
⍝ Any part of `path` which does not already exist will be created along the way.\\
⍝ In comparison with `⎕MKDIR` there are some differences:
⍝ * This method normalizes `path`.
⍝ * Errors 19 & 22 are trapped. The function tries again 9 more times at most.
⍝ * The function overcomes a strange problem: on some systems `⎕MKDIR` refuses to create
⍝   the directory repeatedly unless the code is traced.\\
⍝ In any other respect `MkDir` acts like `3 ⎕MKDIR`.\\
⍝ `success` is 1 in case the directory was created successfully or already existed, otherwise 0.
⍝ If `path` is nested then `success` will have the same length as `path`.
:If 2=|≡path
success←MkDir¨path
:Else
path←NormalizePath path
success←0
:If IsDir path
success←1
:Else
:Trap 19 22
counter←flag←0
⍝ This loop tries to overcome the problem that on some machines ⎕MKDIR does not work
⍝ as expected. This cannot (!) be solved by a simple delay.
⍝ However, tracing as well as the loop do work.
:Repeat
:Trap 19 22
success←3 ⎕MKDIR path
:Else
:Leave ⍝ Something went wrong, indicated by `success ←→ 0`
:EndTrap
flag←⎕NEXISTS path
⎕DL(~flag)×0.05×counter+1
:Until flag∨10<counter←counter+1
:EndTrap
:EndIf
:EndIf
r←filename NCREATE tieNo
⍝ Same as `⎕NCREATE` but normalizes `filename`.
r←(NormalizePath filename)⎕NCREATE tieNo
r←{encoding}NGET x;flag;filename;counter;success;qdmx
⍝ The purpose of this function is to cover `⎕NGET` and make sure that the filename is normalized.
:If 326=⎕DR x
(filename flag)←x
filename←NormalizePath filename
:Else
filename←NormalizePath x
flag←0
:EndIf
success←counter←0
:Repeat
:Trap 19
:If 0=⎕NC'encoding'
r←⎕NGET filename flag
:Else
r←encoding ⎕NGET filename flag
:EndIf
success←1
:Else
:If 4>counter←counter+1
⎕DL 0.1×counter
:Else
qdmx←⎕DMX
(1↓⊃,/(⎕UCS 13),¨qdmx.DM)⎕SIGNAL qdmx.EN
:EndIf
:EndTrap
:Until success
⍝Done
r←NNAMES
⍝ Same as `⎕NNAMES` but...
⍝ * returns a vector rather than a matrix.
⍝ * normalizes all filenames
r←NormalizePath{⍵↓⍨-+/∧\' '=⌽⍵}¨↓⎕NNAMES
{r}←data NPUT y;filename;flags;data;counter;success;qdmx
⍝ The purpose of this function is to cover `⎕NPUT` and make sure that the filename is normalized.\\
⍝ In addition the function tries to overcome FILE ACCESS ERRROs twice. They are pretty common these days with
⍝ tools like DropBox etc.\\
⍝ The left as well as the right argument must be the same as for a call to the native `⎕NPUT`.
:If (≡y)∊0 1
filename←NormalizePath y
flags←¯1
:Else
(filename flags)←y
filename←NormalizePath filename
:EndIf
success←counter←0
:Repeat
:If flags≡¯1
:AndIf ⎕NEXISTS filename
⎕DL 0.1  ⍝ Yes, makes no sense, but we've seen this working fine in reality due to the delay!
:EndIf
:Trap 19
:If flags≡¯1
r←data ⎕NPUT filename
:Else
r←data ⎕NPUT filename flags
:EndIf
success←1
:Else
:If 4>counter←counter+1
⎕DL 0.1×counter
:Else
qdmx←⎕DMX
(1↓⊃,/(⎕UCS 13),¨qdmx.DM)⎕SIGNAL qdmx.EN
:EndIf
:EndTrap
:Until success
⍝Done
path←{expandFlag}NormalizePath path;UNCflag;sep;ExpandEnvironmentStrings;isScalar;path_;isWin;hasTrailingSep
⍝ `path` might be either a simple text vector or scalar representing a single filename or a
⍝ vector of text vectors with each item representing a single filename.
⍝ Enforces either `\` or `/` as separator in `path` depending on the current operating system.\\
⍝ If you need a particular separator no matter what the current OS is then use either
⍝ `EnforceBackslash` or `EnforceSlash`.\\
⍝ Note that by default a relative path remains relative and any `../` (or `..\`) is not touched.
⍝ You can change this by specifying `'expand'` as the (optional) left argument; then `path` is
⍝ expanded to an absolute path. As a side effect any `../` is transformed appropriately as well.\\
⍝ On Mac and Linux however only trailing `/..` are transformed.
⍝ Notes:
⍝ * The left argument is not case sensitive.
⍝ * Any pair of `//` or `\\` is reduced to a single one except the first two.
⍝ * Environment variables are expanded.
isScalar←⍬≡⍴path
:If 0≠≢path←,path
:If '%'∊path
:AndIf 'Win'≡APLTreeUtils2.GetOperatingSystem ⍬
'ExpandEnvironmentStrings'⎕NA'I4 KERNEL32.C32|ExpandEnvironmentStrings* <0T >0T I4'
path←1⊃ExpandEnvironmentStrings path 2048 2048
:EndIf
expandFlag←{0<⎕NC ⍵:{0=1↑0⍴⍵:⍵ ⋄ 'expand'≡⎕C ⍵}w←⍎⍵ ⋄ 0}'expandFlag'
isWin←'Win'≡APLTreeUtils2.GetOperatingSystem ⍬
sep←isWin⌽'\/'
hasTrailingSep←(¯1↑path)∊sep
:If 1<≡path
path←expandFlag NormalizePath¨path
:Else
UNCflag←(⊂2⍴path)∊'\\' '//'
:If expandFlag
path←⊃,/1 ⎕NPARTS path
:If ~isWin
path_←(~path∊sep)⊆path
path←(0⊃sep),(⊃,/((-2×+/∧\(⌽path_)≡¨⊂'..')↓path_),¨0⊃sep)
:If ~hasTrailingSep
path←¯1↓path
:EndIf
:EndIf
:EndIf
((path=0⊃sep)/path)←1⊃sep
path←(~(2⍴1⊃sep)⍷path)/path
:If UNCflag
path←'\\',1↓path
:EndIf
:If isScalar
:AndIf 1=≢path
path←⊃path
:EndIf
:EndIf
:EndIf
r←PWD
⍝ Print Work Directory; same as `Cd''`.
r←⊃1 ⎕NPARTS''
r↓⍨←-(¯1↑r)∊'/\'
r←NormalizePath r
{r}←PolishCurrentDir;wsid
⍝ If `⎕WSID` is relative this function does nothing.\\
⍝ Otherwise the current directory is changed so that it becomes the path part of `⎕WSID`.\\
⍝ Returns either `''` or the old directory in case of a change.
r←''
wsid←NormalizePath ⎕WSID
:If ('.',CurrentSep)≢2⍴⎕WSID,' '
:AndIf CurrentSep∊wsid
r←NormalizePath Cd 0⊃APLTreeUtils2.SplitPath wsid
:EndIf
r←ProduceRandomName
⍝ Expensive but successful very soon
r←{(,'ZI2,ZI2,ZI2'⎕FMT 3↑⍵),⍕3↓⍵}3↓⎕TS  ⍝ Expensive but successful very soon
r←Public
r←''
r,←⊂'AddTrailingSep'
r,←⊂'Cd'
r,←⊂'CheckPath'
r,←⊂'CurrentSep'
r,←⊂'DateToReal'
r,←⊂'DeleteFile'
r,←⊂'Dir'
r,←⊂'EnforceBackslash'
r,←⊂'EnforceSlash'
r,←⊂'ExecNfunction'
r,←⊂'Exists'
r,←⊂'ExpandPath'
r,←⊂'GetModifiedDate'
r,←⊂'GetNewLineCharsFor'
r,←⊂'GetTempFilename'
r,←⊂'GetTempFilename2'
r,←⊂'GetTempPath'
r,←⊂'GetTempSubDir'
r,←⊂'IsDir'
r,←⊂'IsDirEmpty'
r,←⊂'IsFile'
r,←⊂'IsSymbolicLink'
r,←⊂'ListDirs'
r,←⊂'ListFiles'
r,←⊂'MkDir'
r,←⊂'NCREATE'
r,←⊂'NGET'
r,←⊂'NNAMES'
r,←⊂'NPUT'
r,←⊂'NormalizePath'
r,←⊂'PWD'
r,←⊂'PolishCurrentDir'
r,←⊂'RmDir'
r,←⊂'RmDirByForce'
r,←⊂'Version'
r,←⊂'YoungerThan'
{(rc en more)}←{mustBeEmpty}RmDir path;list;bool;flags;flag;counter;qdmx
⍝ Tries to remove `path`.\\
⍝ The method attempts to remove `path` and, by default, **all its contents**.\\
⍝ If for some reason you want to make sure that `path` is only removed when empty you can
⍝ specify a 1 as left argument. In that case the method will not do anything if the directory
⍝ `path` is not empty.\\
⍝ However, the method may still be partly successful because it might have deleted files
⍝ in `path` before it actually fails to remove the directory `path` itself.\\
⍝ The result is a three-element vector:
⍝ 1. `rc`: return code with 0 for "okay" (=deleted) and 1 otherwise.
⍝ 1. `en`: event number (`⎕EN`) in case of an error.
⍝ 1. `more`: empty text vector in case `rc` is 0 and possible additional information otherwise.\\
⍝ Notes:
⍝ * If `path` does not exist `(0 0 'Directory does not exist')` is returned
⍝ * If `path` exists but is not a directory `(1 6 'Not a directory')` is returned
⍝ * Wildcard characters (`*` and `?`) are not allowed as part of `path`
⍝   If such characters are specified anyway then an error is signalled.\\
⍝   This is true even under Linux and Mac OS despite the fact that these characters are legal in
⍝   the names of any files and directories.
⍝ * If `path` is a nested vector `RmDir` calls itself recurively. The length of `rc` and `en` and `more`
⍝   match `≢path` in this case.
⍝ * The underlying system function ⎕NDELETE cannot delete read-only files. That means that you cannot
⍝   delete a directory that contains a folder .git, for exmaple. See `RmDirByForce` as an alternative
mustBeEmpty←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'mustBeEmpty'
'Invalid left argument.'⎕SIGNAL 11/⍨~(⊂mustBeEmpty)∊0 1
rc←0 ⋄ en←0 ⋄ more←''
'Wildcard characters are not allowed'⎕SIGNAL 11/⍨∨/'*?'∊path
:If 2=|≡path
(rc en more)←↓⍉↑mustBeEmpty RmDir¨,path
:Else
'"path" must not be /..'⎕SIGNAL 11/⍨(⊂path)∊'\..' '/..'
path←'expand'NormalizePath path
:If ⎕NEXISTS path
:If IsDir path
flags←1+2×~mustBeEmpty
counter←flag←0
:Repeat
:Trap 19 22
flags ⎕NDELETE path
flag←1
:Else
:If 4>counter←counter+1
⎕DL 0.1×counter
:Else
qdmx←⎕DMX
en←qdmx.EN
more←qdmx.EM
flag←rc←1
:EndIf
:EndTrap
:Until flag
:Else
more←'Not a directory'
rc←1
en←6
:EndIf
:Else
more←'Directory does not exist'
:EndIf
:EndIf
(rc msg)←RmDirByForce path;r;buff;flag;i;os;max
⍝ Removes files and directories by force no matter what, including files that have the read-only flag set.\\
⍝ Notes:
⍝ * If `path` does not exist `(0 'Directory does not exist')` is returned
⍝ * If `path` exists but is not a directory `(1 'Not a directory')` is returned
⍝ * In case of success `(0 '')` is returned
⍝ * Wildcard characters (`*` and `?`) are not allowed as part of `path`
⍝   If such characters are specified anyway then an error is signalled.\\
⍝   This is true even on Linux and Mac OS despite the fact that these characters are legal in
⍝   the names of any files and directories.
⍝ * The function checks whether `path` was successfully removed indeed.
'"path" must not be /..'⎕SIGNAL 11/⍨(⊂path)∊'\..' '/..'
path←'expand'NormalizePath path
'Wildcard characters are not allowed'⎕SIGNAL 11/⍨∨/'*?'∊path
rc←0 ⋄ msg←''
:If ~⎕NEXISTS path
msg←'Directory does not exist'
:ElseIf ~IsDir path
rc←1
msg←'Not a directory'
:Else
os←⎕C APLTreeUtils2.GetOperatingSystem ⍬
max←5+3×os≢'win'
flag←i←0
:Repeat
:Trap 11
:Select os
:Case 'win'
buff←∊⎕SH'rmdir /s /q "',(path~'"'),'"'
:Else
buff←∊⎕SH'rm -f -r "',(path~'"'),'"'
:EndSelect
:EndTrap
:If 0≠rc←⎕NEXISTS path
:If max=i←i+1
:If 0=≢msg←buff
msg←'Removing directory failed'
:EndIf
flag←1
:Else
⎕DL 0.2×i
:EndIf
:Else
flag←1
:EndIf
:Until flag
:EndIf
r←Version;json;ns
⍝ See also `History`
r←'FilesAndDirs' '5.8.1' '2024-08-12'
bool←file1 YoungerThan file2;real1;real2
⍝ Returns a Boolean with 1 in case `file1` is "younger" than `file2`
real1←DateToReal GetModifiedDate file1
real2←DateToReal GetModifiedDate file2
bool←real1>real2
:Namespace quadVars
:EndNamespace
:Class GitHubAPIv3
⍝ This class offers methods that allow one to communicate with GitHub by using the GitHub REST API from Dyalog APL.
⍝ Note that this is version 3 of the GitHub API; Later versions do **not** use REST.\\
⍝ Most methods of this class become available only by instantiating the class. `⎕NEW` requires an owner as argument.\\
⍝ However, there are also a few shared methods beyond `Version` and `History` available.\\
⍝ Kai Jaeger\\
⍝ Homepage: <https://github.com/aplteam//GitHubAPIv3>
⎕IO←1 ⋄ ⎕ML←1
∇ r←Version
:Access Public Shared
r←'GitHubAPIv3' '1.4.0' '2024-09-24'
∇
∇ History
:Access Public Shared
⍝ * 1.4.0 from 2024-09-24
⍝   * New instance method `GetMyRateLimits` added whbich complements the older shared method `GetRateLimits`
⍝   * BREAKING CHANGE
⍝     The instance property `pathToConngaDLLs` has been removed and replaced by an instance field with the same name.
⍝     This syntax change was necessary because some shared methods (`GetAllEndPoints`, `GetRateLimits`) called `GetJson`
⍝     which relies on `pathToCongaDLLs` being defined. It affects you only when you have set `pathToCongaDLLs` as a
⍝     property of an instance, because that needs changing: assign it to the field of the class instead.
⍝  * `GetAllTopics` called `GetJson` with a left argument
⍝ * 1.3.0 from 2024-09-23
⍝   * There was no way to specify a path for the Conga DLLs in GetJson: now there is a field `path2CongaDLLs`
⍝   * Bug fixes
⍝     * `GetRelease` did not process its (optional) left argument correctly, resulting in a crash.
⍝     * Shared method `GetJson` relied on instance property `path2CongaDLLs`. Can now be specified as left argument
⍝     * The function `GetJson` had an optional left argument `parms` that was never processed: removed.
⍝ * 1.2.1 from 2024-07-25
⍝   * Bug fixed
⍝     `GetAllIssues` crashed when there were no issues to report
⍝ * 1.2.0
⍝   * Instances of GitHubAPIv3 now have a useful display format: for a user "foo" it shows GitHubAPIv3[foo]
⍝   * The name of the function `GetPrinciple` was changed to `GetPrincipal`
⍝   * When Assert signals an error not only the message but also the HTTP code is returned as in "Not found (404)"
⍝   * Package dependencies updated
⍝   * Bug fixes
⍝     * The DF of an issue was wrong ("Issues" rather than "Issue"). While on it the issue number was added.
⍝ * 1.1.0
⍝   Dependencies updated: HttpCommand and APLTreeUtil2
⍝ * 1.0.1
⍝   * Domain of the function `CastTagname2Number` extended: Major and minor nmber might both carry 3 digits,
⍝     while a build number might carry up to 5 digits.
⍝\\
⍝ For information regarding older versions see <https://github.com/aplteam/GitHubAPIv3/releases>
∇
:Field Public Shared  path2CongaDLLs←''
:Property owner
:Access Public Instance
⍝ This is set once with the constructor, therefore no setter
∇ r←Get
r←_owner
∇
:EndProperty
:Property personal_access_token
:Access Public Instance
∇ r←Get
r←_personal_access_token
∇
∇ Set ipa
_personal_access_token←ipa.NewValue
∇
:EndProperty
∇ make1(owner)
:Access Public Instance
:Implements Constructor
_owner←owner
_personal_access_token←''
_regEx←'setup_<repoName>_<version>[.\]*.[0-9]{0,6}\.exe'  ⍝ After version there _might_ be a built number
A←(⊃⊃⎕CLASS ⎕THIS).##.APLTreeUtils2
H←(⊃⊃⎕CLASS ⎕THIS).##.HttpCommand
⎕DF'GitHubAPIv3[',owner,']'
∇
∇ ns←GetLatestReleaseInfo repoName;gitPath
:Access Public Instance
⍝ Returns meta data regarding the latest release. Drafts and beta releases are ignored.\\
⍝ You must use `https://` as protocol or not specify a protocol at all.\\
⍝ Returns a namespace with the data received from GitHub.
'Right argument is not a repository name'⎕SIGNAL 11/⍨0=≢repoName
gitPath←'https://api.github.com/repos/',_owner,'/',repoName,'/releases/latest'
ns←GetJson gitPath
ns.⎕DF'[JSON object: ',repoName,'-',ns.tag_name,']'
∇
∇ ns←GetReleaseInfoByTagName(repoName tagName);gitPath;rc;msg
:Access Public Instance
⍝ Fetches release meta data with `tagName` from `repoName`.\\
⍝ You must use `https://` as protocol or not specify a protocol at all.
⍝ ## Right argument
⍝ * Name of the repository
⍝ * The tag name\\
⍝ Returns a namespace with the data received from GitHub.
gitPath←'https://api.github.com/repos/',_owner,'/',repoName,'/releases/tags/',tagName
ns←GetJson gitPath
ns.⎕DF'[JSON object: ',repoName,'-',tagName,']'
∇
∇ data←{verbose}GetAllReleases repoName;gitPath;ns
:Access Public Instance
⍝ Returns information regarding all releases of a given repository.\\
⍝ Notes:
⍝ * Pre-releases are included
⍝ * Users without "Push" access will **_not_** see any draft releases\\
⍝ By default a vector of text vectors is returned with the tags.
⍝ In case `verbose` is 1 namespaces for each release are returned.
verbose←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'verbose'
gitPath←'https://api.github.com/repos/',_owner,'/',repoName,'/tags'
ns←GetJson gitPath
:If verbose
data←ns
:If 0≠≢data
data.{⎕DF'[JSON Object: ',⍵,' ',name,']'}⊂repoName
:EndIf
:Else
data←ns.name
:EndIf
∇
∇ rateLimits←GetRateLimits;gitPath
:Access Public Shared
⍝ Returns information regarding the general rate limits (no authentication) without hitting the limits.
⍝ This is about the general rate limits that apply in case the user is not authenticated which applies
⍝ because this is a shared method, so no authentication is implied.\\
⍝ See also the instance method `GetMyRateLimits`.
gitPath←'https://api.github.com/rate_limit'
rateLimits←GetJson gitPath
∇
∇ rateLimits←GetMyRateLimits;gitPath
:Access Public Instance
⍝ Returns information regarding rate limits without hitting the limits. This is an instance method,
⍝ meaning that it returns the rate limits for the currently used authentication token.
⍝ See also the shared method `GetRateLimits`.
gitPath←'https://api.github.com/rate_limit'
rateLimits←GetJson gitPath
∇
∇ topics←GetAllTopics repoName;gitPath;parms;ns;data
:Access Public Instance
⍝ Returns all topics of a given repository.\\
⍝ You must use `https://` as protocol or not specify a protocol at all.
gitPath←'https://api.github.com/repos/',_owner,'/',repoName,'/topics'
data←GetJson gitPath
topics←data.names
∇
∇ ns←GetAllRepos;gitPath
:Access Public Instance
⍝ Returns data of all **public** repositories of the current owner.\\
gitPath←'https://api.github.com/users/',(_owner),'/repos'
ns←GetJson gitPath
ns.{⎕DF'[JSON Object: ',name,']'}⊂⍬
∇
∇ ns←{addPullRequests}GetAllIssues repoName;gitPath
:Access Public Instance
⍝ Returns all issues for a given repository but no pull requests by default.\\
⍝ In GitHub, every pull request is an issue, but not all issues are pull requests.
⍝ You can enforce the addition of Pull Requests by passing a 1 as left argument.\\
⍝ In case there are no issues an empty vector is returned.
addPullRequests←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'addPullRequests'
gitPath←'https://api.github.com/repos/',(_owner),'/',repoName,'/issues'
ns←GetJson gitPath
:If 0<≢ns
:If ~addPullRequests
ns←(0=⊃¨ns.⎕NC⊂'pull_request')/ns
:EndIf
ns.⎕DF(repoName,' issue ')∘,¨(⍕¨ns.number)
ns.⎕FX⊂⎕CR'∆List'
ns.⎕FX⊂'r←∆Details instance' 'r←∆List' ' :If 0<≢instance' 'r(instance.GetPrincipal)←''assignees'' ''login''' 'r(instance.GetPrincipal)←''labels'' ''name''' ':EndIf'
ns.⎕FX⊂'r←∆QuickView instance;keyWords' 'r←∆Details instance' 'keyWords←''title'' ''number'' ''state'' ''updated_at'' ''labels'' ''assignees''' 'r←(r[;1]∊keyWords)⌿r' 'r←r[⍋keyWords⍳r[;1];]'
:EndIf
∇
∇ ns←GetIssue(repoName number);gitPath
:Access Public Instance
⍝ Returns exactly one issue for a given repository.\\
⍝ Note that `ns` gets three functions injected: `∆List`, `∆Details` and `∆QuickView`. While `∆List` does not
⍝ require an argument, `∆Details` and `∆QuickView` require an instance of this class as right argument.\\
⍝ `∆Details` and `∆QuickView` both replace the JSON objects "assignees" and "labels" by real data, but
⍝ `∆QuickView` returns a small subset for a quick glance.
gitPath←'https://api.github.com/repos/',(_owner),'/',repoName,'/issues/',⍕number
ns←GetJson gitPath
ns.{⎕DF ⍵}'[Issue ',(⍕number),' of repo ',repoName,']'
ns.⎕FX ⎕CR'∆List'
ns.⎕FX'r←∆Details instance' 'r←∆List' 'r(instance.GetPrincipal)←''assignees'' ''login''' 'r(instance.GetPrincipal)←''labels'' ''name'''
ns.⎕FX'r←∆QuickView instance;keyWords' 'r←∆Details instance' 'keyWords←''title'' ''number'' ''state'' ''updated_at'' ''labels'' ''assignees''' 'r←(r[;1]∊keyWords)⌿r' 'r←r[⍋keyWords⍳r[;1];]'
∇
∇ endpoints←GetAllEndpoints;gitPath;A;data
:Access Public Shared
⍝ This method returns all REST endpoints offered by the API as a two-column matrix:\\
⍝ * [;1] is the name of the endpoint
⍝ * [;2] is the URL of the endpoint
⍝ It returns a namespace. Use the built-in `List` function for an overview.
A←##.APLTreeUtils2
gitPath←'https://api.github.com/'
data←GetJson gitPath
endpoints←data.{{⍵,[1.5]⍎¨⍵}⎕NL-2}⍬
∇
∇ number←CastTagname2Number text;vec;bool
:Access Public Shared
⍝ Takes something like `v12.34.567` or `v123.4.5.6789` and returns 1234567 and 1234567.6789 respectively.\\
⍝ The items are called major.minor.patch.built with "built" being optional.\\
⍝ In case that is impossible (because `text` does not fulfil the criteria) `⍬` is returned.\\
⍝ Assumptions:
⍝ * `text` may or may not start with a non-digit. All leading non-digit characters are ignored.\\
⍝   Therefore both `1.2.3` and `v.1.2.3` are valid input.
⍝ * No part is allowed to start with a zero followed by a non-zero digit. Therefore 1.0.0 is valid input but
⍝   01.2.3, 1.02.3 and 1.2.03 are not.
⍝ * The remaining `text` must consist of nothing but digits and dots.
⍝ * The first two numbers ("major" and "minor") must not be bigger than 999.
⍝ * The third number ("patch") must not be bigger than 9999.
⍝ * The optional last (forth) number must not be bigger than 99999.
⍝ * `text` must come either with three numbers (as in `1.2.3`) or with four number (as in `1.2.3.9999`).
⍝ If the tag name does not fulfil the assumptions the conversion might fail; in that case `⍬` is
⍝ returned as result.
⍝ Examples:
⍝ + 1.20.333 transforms into 120333
⍝ + 12.12.123.12345 transforms into 1212123.12345\\
number←⍬
⍝ This function might be called from a Shared method. when we need to address APLTreeUtils2 explicitly,
⍝ or from a n Instance method, when `A` is a ref pointing to APLTreeUtils2.
:If 0<##.⎕NC'APLTreeUtils2'
A←##.APLTreeUtils2
:EndIf
:If 0<≢text←{⍵↓⍨+/∧\0=⍵∊⎕D}text
text,←⊃,/(0⌈2-text+.='.')⍴⊂'.0'
:AndIf 0=+/{(1<⊃≢⍵)∧⊃'0'=1↑⍵}¨'.'A.Split text
(bool vec)←'.'⎕VFI text
:AndIf 3 4∊⍨⍴bool
vec←{⍵↑⍨3⌈4⌊⍴⍵}↑vec
:If 3=⍴vec
:If ∧/1000 1000 10000>vec
:AndIf 0=number←1000 1000 10000⊥vec
number←⍬
:EndIf
:Else
:If ~∧/1000 1000 10000 100000>vec
number←⍬
:ElseIf 0=number←1000 1000 10000 100000⊥vec
number←⍬
:EndIf
number÷←100000
:EndIf
:EndIf
∇
∇ url←{tag}GetRelease(repoName type);more;length;info;gitPath;ns;ind
⍝ Returns the URL of a version (release) of `repoName`, be default the latest one.
⍝ Draft releases are ignored.\\
⍝ The URL depends on what `type` is.
⍝ `type` may be one of: <EXE>, <ZIP>, <TAR>. `type` is not case sensitive.\\
⍝ The optional left argument `tag` can be used to request a particular version rather than the latest one.
⍝ `tag` can be something like `1.2.3` (or `1.2.3.4`) or `v1.2.3` (or `v1.2.3.4`).\\
⍝ Returns the download url or an empty vector in case of failure, for example when the given type cannot be detected.
:Access Public Instance
gitPath←'https://api.github.com/repos/',_owner,'/',repoName,'/releases'
ns←GetJson gitPath
url←''
type←1 ⎕C type
'Invalid right argument ("type")'⎕SIGNAL 11/⍨~(⊂type)∊'EXE' 'ZIP' 'TAR'
info←GetLatestReleaseInfo repoName
:If 0=⎕NC'tag'
tag←((1⍴info.tag_name)∊'Vv')↓info.tag_name
:EndIf
:If (⊂type)∊'ZIP' 'TAR'
url←('ZIP' 'TAR'⍳⊂type)⊃info.(zipball_url tarball_url)
:ElseIf 'EXE'≡type
:AndIf 0<≢info.assets
ind←(⎕C ¯4↑¨info.assets.name)⍳⊂'.exe'
:AndIf (≢info.assets)≥ind
url←ind⊃info.assets.browser_download_url
:EndIf
∇
∇ tag←GetLatestTag repoName;MyGitAPI;ns;gitVersion;api
⍝ This method returns the latest `tag` (version number) for `repoName`.\\
⍝ Note that drafted releases and pre-releases are both ignored.
:Access Public Instance
ns←GetLatestReleaseInfo repoName
tag←ns.tag_name
∇
∇ betterVersion←CheckForUpdate(repoName version);gitVersion;version_;gitVersion_
⍝ Takes a version number like `1.2.3` or `1.2.3.4` (usually what is currently installed/used).\\
⍝ Returns one of:
⍝ * An empty vector in case no better version is available
⍝ * The better version number
:Access Public Instance
betterVersion←''
gitVersion_←GetLatestTag repoName
gitVersion←⌊CastTagname2Number gitVersion_
version_←CastTagname2Number version~'v'
:If version_<gitVersion
betterVersion←gitVersion_
:EndIf
∇
∇ r←CreateHttpParms
⍝ Creates a parameter space that can be passed to some method.
⍝ Currently this is private. We might need to change this once we introduce methods
⍝ that actually write data, like, say, `CreateIssue`.
⍝ :Access Public Instance
r←⎕NS''
r.Accepted←'Accept: application/vnd.github.v3+json'
r.Method←'GET'
r.Body←''
∇
⍝ ------------------------------------------ Private stuff ----------------------------------
GetNoOfPages←{
⍝ Takes HTTP headers and returns the number of pages. If there are not any a zero is returned.
headers←⍵
bool←'link'∘≡¨⎕C headers[;1]
0=+/bool:0
link←(bool⍳1)⊃headers[;2]
buff←' 'A.Split link
last←(¯1+⍴buff)⊃buff
buff←{⍵{(⍴'?page-')↓⍵[2]↑⍵[1]↓⍺}⊃'(&|\?)page=[0-9]{1,}'⎕S 0 1⊣⍵}last
⊃⊃(//)⎕VFI buff
}
∇ data←GetJson gitURL;h;json;r;noOfPages;i;ind;link;r2;links;H_
⍝ Takes a URL and returns a namespace, possibly with sub namespaces.
⍝ In case the result is virtually paged by the server this function collects all data!
:If 0=⎕NC'H'
H_←(⊃⊃⎕CLASS ⎕THIS).##.HttpCommand    ⍝ Called as a shared method
:Else
H_←H                                  ⍝ Called from an instance
:EndIf
h←⎕NEW H_(,⊂'')
:If 0<⎕NC'_personal_access_token'
:AndIf 0<≢_personal_access_token
'Authorization'h.AddHeader('Bearer ',_personal_access_token)
:EndIf
h.URL←EncodeBlank gitURL
:If 0<≢path2CongaDLLs
h.CongaPath←path2CongaDLLs
:EndIf
r←h.Run
(r.HttpMessage,' (',(⍕r.HttpStatus),')')Assert r.HttpStatus=200
data←⎕JSON r.Data
noOfPages←GetNoOfPages r.Headers
:If 0<noOfPages
⍝ Fetch second page
ind←r.Headers[;1]⍳⊂'Link'
link←2⊃r.Headers[ind;]
h.URL←{¯1↓1↓⍵↑⍨¯1+⍵⍳';'}link
r2←h.Run
(r.HttpMessage,' (',(⍕r.HttpStatus),')')Assert r.HttpStatus=200
data,←⎕JSON r2.Data
:If 2<noOfPages
⍝ Fetch all remaining pages
links←({¯2↓1↓⍵↑⍨¯1+⍵⍳';'}link)∘{⍺,⍕⍵}¨2↓⍳noOfPages
:For link :In links
h.URL←link
r2←h.Run
(r.HttpMessage,' (',(⍕r.HttpStatus),')')Assert r.HttpStatus=200
data,←⎕JSON r2.Data
:EndFor
:EndIf
:EndIf
∇
∇ data←data GetPrincipal(propName principalName);row;jsonObj;buff
⍝ * `propName` is the name of a variable in `data` holding one or more JSON object(s).\\
⍝ * `principalName` is the principal name of that JSON object or JSON objects.\\
⍝   Typical examples are "label" or "name"\\
⍝ The generic names are then replaced but the real data.
:Access Public instance
row←data[;1]⍳⊂propName
:If 0≠≢jsonObj←2⊃data[row;]
buff←jsonObj⍎¨⊂principalName
data[row;2]←{⍺,', ',⍵}/buff
:EndIf
∇
⍝ The following function is fixed within the data spaces returned by some commands:
∇ r←∆List;names;values;bool
⍝ List all variables and their values.
names←' '~¨⍨↓⎕NL 2
values←⍎¨names
bool←{16::1 ⋄ 0⊣1↑0⍴⍵}¨values  ⍝ Were are objects?
:If ∨/bool
{⍵.⎕DF⊂'(JSON object)'}¨bool/values
:EndIf
r←⍉names,[0.5]values
∇
∇ r←EncodeBlank r
((' '=r)/r)←⊂'%20'
r←∊r
∇
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}
:EndClass
:Class HandleError
⍝ This class offers the method `Process` which is useful to handle application
⍝ errors on a general (or application) level. `Process` in turn is triggered via `⎕TRAP`;
⍝ use the method `HandleError.SetTrap` in order to set `⎕TRAP` accordingly.\\
⍝ Note that the main function, `HandleError.Process`, will run in the same thread the error
⍝ did ouccur in. However, while the code of that function is executed, thread switches may
⍝ well occur. To prevent other threads from invoking `HandleError.Process` it uses `:Hold`.
⍝ ## Goals
⍝ The goal of `HandleError` is to collect as many pieces of information as posssible and make
⍝ them accessible so that they can later be used to analyze (and hopefully solve) the problem.\\
⍝ In order to achieve this `HandleError` takes the following actions, if technically possible:
⍝ * Create an HTML page with essential information regarding the error, for example:
⍝   * Error message
⍝   * Stack
⍝   * System vars like `⎕WSID`, `⎕IO`, `⎕ML`, `⎕TNUMS`, `⎕WA`
⍝   * Current directory
⍝   * Command line
⍝   * and more\\
⍝ * Create a namespace `crash` and populate it with variables providing information
⍝   potentially important for analyzing the error.
⍝   The namespace `crash` is saved in a component file. By default all variables
⍝   visible at the time of the crash are saved in a sub namespace of `crash` called
⍝   `Vars`.\\
⍝   In case of a threaded application this and the HTML page might be all you get
⍝   for analyzing the problem.\\
⍝ * Attempts to save an error workspace. Since no workspace can be saved when threads
⍝   are running, `HandleError` will kill all running threads but the main thread just before
⍝   attempting to save the workspace. That means that even in a multi-threaded application
⍝   you _might_ still get a saved workspace for analyzing purposes if the error happened to
⍝   occur in the main thread.\\
⍝   However, since version 4.1 it is possible to prevent the killing of threads by setting
⍝   `killThreads` to 0, meaning it defaults to 1, so no change in behaviour by default.
⍝   Set this to 0 if you intend to let the application continue, for example because an error
⍝   occurred just in a single thread, but the application as such is expected to be okay.\\
⍝ ## Parameters
⍝ All parameters can be changed by setting variables in a namespace returned by `CreateParms`,
⍝ which can then be passed as right argument to the main function `Process`.
⍝ For defaults just pass an empty vector to `Process`.\\
⍝ ## Custom stuff
⍝ You can make `Process` execute your own code by specifying a custom log function
⍝ and / or a custom function for other purposes:
⍝ * `logFunction` is supposed to be the name of a monadic function that returns a shy result.
⍝   That function must be able to deal with a simple character vector as well as vectors of
⍝   character vectors. As the name suggests it will be called by `Process` when something needs
⍝   to be logged.
⍝ * `customFns` can be used to do anything you like. A typical application for this
⍝   is sending an email to notify certain people about the crash.\\
⍝   The `customFns` must accept  a right argument. This is the parameter namespace
⍝   which holds all the parameters plus three additional variables:
⍝   * `crashFilename` holds the name used for the crash files (HTML file, workspace,
⍝     DCF file) but without `.extension`
⍝   * `LastError` holds `⎕DMX.DM` at the moment of the crash
⍝   * `LastErrorNumber` holds `⎕DMX.EN` at the moment of the crash\\
⍝   The last two steps are necessary because something might go wrong inside `HandleError` and,
⍝   though trapped, as a side effect overwrite both `⎕DMX.DM` and `⎕DMX.EN`.\\
⍝   The `customFns` shall not return a result. If it does it must be "shy" and will be ignored.\\
⍝ Although both function names may use dotted syntax, that would not help in case
⍝ they live in an instance of a class. In such a case use `logFunctionParent`
⍝ and `customFnsParent` respectively in order to define the parent of the functions.\\
⍝ ## Windows Event Log
⍝ `HandleError` will attempt to write to the Windows Event Log when `windowsEventSource`
⍝ is not empty. For that to work both .NET and the Dyalog bridge DLLs are required.
⍝ That means it would not work out of the box in a runtime application without you taking action,
⍝ though it would of course work in development.\\
⍝ ## How tos
⍝ * At an early stage (we don't know yet where to save stuff etc) specify an
⍝   empty vector as right argument to `SetTrap`.
⍝ * As soon as you can create a parameter space by calling `CreateParms`, assign it to something
⍝   like `#.MyParms`, make amendments and finally execute `#.⎕SHADOW 'MyParms'` from within your
⍝   `⎕LX` function. That way `Process` will be able to see `MyParms` from everywhere no matter what.\\
⍝ ## Notes
⍝ * Prior to version 2.2.0 `HandleError` saved crash files in a folder `Errors`
⍝   that was created as a sibling of either the workspace or the stand-alone
⍝   EXE. While this policy still holds true under Linux and Mac OS, under Windows
⍝   a folder with the name of either the EXE or the WS is created
⍝   within %LOCALAPPDATA%, with a sub-folder "Errors" inside it.\\
⍝   This is because under Windows the application is unlikely to have the right to
⍝   write to the directory the EXE was loaded from.\\
⍝ Kai Jaeger\\
⍝ Homepage: <https://github.com/aplteam/HandleError>
⎕IO←1 ⋄ ⎕ML←1
∇ r←Version
:Access Public Shared
r←'HandleError' '4.1.4+60' '2023-04-18'
∇
∇ History
:Access Public Shared
⍝ * 4.1.4 ⋄ 2023-04-18
⍝   * Bug fix: the structure of the project was wrong, resulting in test-related stuff being including
⍝     in the package: that caused the naming problem.
⍝ * 4.1.3 ⋄ 2023-04-17
⍝   * All functions with a "∆" in their names removed from the project: the Mac-OS can stand them
⍝     Otherwise the software is unchanged.
⍝ * 4.1.2 ⋄ 2023-04-10
⍝   * ⎕TNUMS was reported in too many cells
⍝ * 4.1.1 ⋄ 2021-07-24
⍝   * `Process` now uses `:Hold` for preventing itself from running twice in two threads.
⍝   * Documentation polished
⍝   * Dependencies updated
⍝   * "Make" now uses the `MakeHelpers` package and is called by the newly introduced `Admin.Make` function
⍝ * 4.1.0
⍝   * Parameter `killThreads` introduced.
⍝   * `Process` hardened against unforseeable problems.
⍝   * Bug fix: `Process` executed either `⎕OFF` or `→`; in the latter case it shouldn't.
⍝ * 4.0.2
⍝   * Package config file corrected
⍝ * 4.0.1
⍝   * Documentation improved
⍝   * Tests polished
⍝ * 4.0.0
⍝   * BREAKING CHANGES:
⍝     * Requires at least Dyalog 18.0
⍝     * Requires the class `APLTreeUtils2`
⍝   * Does not `:Include APLTreeUtils` anymore
⍝   * Bug fixes:
⍝     * Empty `⎕WSID` (stand-alone-EXE!) can cause havoc (#1)
⍝     * `Process` does not return the name of the error workspace because the function either
⍝       executed `⎕OFF` or '→`. The name is now assigned to `∆ERROR_WS` in the parameter space.
⍝\\
⍝ For information regarding older versions see <https://github.com/aplteam/HandleError/releases>
∇
∇ {r}←{signal}Process parms;crash;TRAP;⎕IO;⎕ML;⎕TRAP;filename
:Access Public Shared
⍝ `⎕OFF`s in runtime or if `enforceOff` is 1 but executes `→` otherwise.\\
⍝ In case you need to save the name of the error WS you must specify a parameter space. `HandleError` will
⍝ inject a variable `∆ERROR_WS` into the parameter space.\\
⍝ All actions `Process` will execute are performed under error trapping, so it should never fail.\\
⍝ `signal`: if specified this overwrites `parms.signal`; this is for test cases only.
r←⍬
:Hold 'HandleError.Process'
⎕IO←1 ⋄ ⎕ML←1
TRAP←⎕TRAP                                    ⍝ Remember old setting (for reporting)
⎕TRAP←(0 1000)'C' '→∆End'                     ⍝ Make sure that it does not crash itself
parms←⍎⍣((0≠≢parms)∧(⎕DR parms)∊320 160 80 82)⊣parms     ⍝ Convert name into reference
:If 9≠⎕NC'parms'
:OrIf 0=≢parms
parms←CreateParms
:EndIf
:If 0<⎕NC'signal'
parms.signal←signal
:EndIf
parms.(LastError LastErrorNumber)←⎕DMX.(DM EN)
parms.(EN ENX EM Message)←⎕DMX.(EN ENX EM Message)
CheckErrorFolder parms
crash←CreateCrash parms TRAP
filename←CreateFilename parms.errorFolder
parms.∆ERROR_WS←filename
parms.crashFilename←filename
{}{0 ⎕TKILL ⍵}⍣parms.killThreads⊣⎕TNUMS~⎕TID   ⍝ Try to kill all threads but itself and the main thread
:Trap 0
WriteHtmlFile parms crash filename
:EndTrap
:Trap 0
WriteToLogFile parms
:EndTrap
⎕DL 0.2
:Trap 0
crash←SaveErrorWorkspace filename parms crash
:Else
crash←⎕NS''
:EndTrap
SaveCrash filename crash parms
WriteToWindowsEvents parms
ExecuteCustomFns parms
:If 0≠parms.signal
⎕SIGNAL parms.signal
:ElseIf parms.off
:If ##.APLTreeUtils2.IsDevelopment∧0=parms.enforceOff
PrintErrorToSession 1⊃parms.LastError
:Else
⎕OFF parms.returnCode
:EndIf
:Else
:If ##.APLTreeUtils2.IsDevelopment∧0=parms.enforceOff
PrintErrorToSession 1⊃parms.LastError
:EndIf
:EndIf
∆End:⎕TRAP←TRAP
:EndHold
∇
∇ r←{force}SetTrap parameterSpaceName;⎕TRAP;⎕ML;⎕IO;calledFrom
:Access Public Shared
⍝ Returns a vector useful to set `⎕TRAP`.
⍝ It behaves differently depending on whether it's a development session or not.\\
⍝ The right argument can be either an empty vector or the **name** of a parameter space - **not** a reference!\\
⍝ The left argument defaults to 0. Setting this to 1 enforces error
⍝ trapping even under a development exe. Useful for test cases.
⎕TRAP←0⍴⎕TRAP
⎕IO←1 ⋄ ⎕ML←0
force←{0=⎕NC ⍵:0 ⋄ ⍎⍵}'force'
r←(0 1000)'S'
calledFrom←{⌽{⍵/⍨2≤+\'.'=⍵}⌽⍵}1⊃⎕XSI
:If 0≠≢parameterSpaceName
:If 1≠≡,parameterSpaceName
:OrIf ~(⎕DR parameterSpaceName)∊80 82 160
'Invalid right argument: must be a name'⎕SIGNAL 11
:EndIf
:EndIf
:If 0=≢parameterSpaceName  ⍝ At a very early stage error trapping does not make sense
:AndIf (0=##.APLTreeUtils2.IsDevelopment)∨force
r←⊂0 'E'(calledFrom,'HandleError.Process ⍬')
:Else
:If (0=##.APLTreeUtils2.IsDevelopment)∨force
r←⊂0 'E'(calledFrom,'HandleError.Process ''',parameterSpaceName,'''')
:EndIf
:EndIf
∇
∇ r←CreateParms;rk;buf;⎕IO;⎕ML
⍝ Returns a namespace with default values for the `HandleError` method
⍝ | Parameter    | Description|
⍝ | - | - |
⍝ | `checkErrorFolder` | Boolean that defaults to 1. If this is 1 and the folder `errorFolder` does **not** exist<<br>>it will be created. |
⍝ | `createHTML` | Boolean that defaults to 1. A 0 means that no HTML file will be created.|
⍝ | `customFns`  | Fully qualified name of a monadic function to be executed by `Process`. Useful to send an email, for example. See also `customFnsParent`.|
⍝ | `customFnsParent` | No default. May be a reference pointing to the parent of the `customFns`. Needed only in case the parent is a class instance since `logFunction` may use dottet syntax.|
⍝ | `enforceOff` | Boolean that defaults to 0. With a 1 you can force `HandleError` to `⎕OFF` no matter whether it's a runtime EXE or not. Overwrites `off`. Mainly for test cases.|
⍝ | `errorFolder`| Folder that keeps the component file (`crash`), the HTML page and the error WS. See below for rules.|
⍝ | `killThreads`| Boolean that defaults to 1, meaning that all threads that can be killed will be killed.|
⍝ | `logFunction`| Name of the logging function to be used. See also `logFnsParent`.|
⍝ | `logFnsParent` | No default. May be a reference pointing to the parent of `logFunction`. Needed only in case the parent is a class instance since `logFunction` may use dottet syntax.|
⍝ | `off`        | Boolean that defaults to 1 which makes `HandleError` execute `⎕OFF` with `returnCode` only in Runtime. A 0 suppresses this, executing `→` instead. See also `enforceOff`|
⍝ | `returnCode` | The return code passed on to `⎕OFF`.|
⍝ | `saveCrash`  | Boolean that defaults to 1.<<br>>A 0 suppresses the creation of `crash` & a component file in which `crash` is saved.|
⍝ | `saveErrorWS`| Boolean that defaults to 1.<<br>>A 0 suppresses the creation of a crash workspace. There is no point in attempting<<br>>to save a WS in a multi-threaded application for example.|
⍝ | `saveVars`   | Boolean that defaults to 1.<<br>>Is ignored when `saveCrash` is 0. If 1 all visible variables are saved in a<<br>>sub namespace `Vars` within `crash`.|
⍝ | `signal`     | When `off` is 0 and `signal` is not 0 then `signal` is `⎕SIGNAL`led by `Process`.<<br>>This can be used for a restart attempt.|
⍝ | `trapInternalErrors` | By default all internal errors are trapped:<<br>>`Process` should never crash an application.|
⍝ | `trapSaveWSID`       | Boolean that defaults to 1. Makes sure that the `⎕SAVE` statement is guarded.<<br>>Useful to trace through it without a problem in versions prior to 14.1.|
⍝ | `windowsEventSource` | Name of the Windows Event Log to write to. Ignored when empty.|
⍝ | `addToMsg`           | Will be added to the log file as well as the Windows Event Log messages.<<br>>Mainly for test cases.|\\
⍝ Since version 2.2.0 `errorFolder` defaults to an empty vector. Assuming that the WS or the stand-alone EXE have the name "Foo" the following rules hold true:
⍝ * If `errorFolder` is empty then it defaults to "%LOCALAPPDATA%/Foo/Errors" under Windows and "Errors/" in the current
⍝   directory otherwise.
⍝ * If `errorFolder` is "Errors/" then this folder will be expected in the current directory.
⍝ * If `errorFolder` is an absolute path it is assumed that the last part is the folder that shall hold the crash files.\\
⍝ In all three instances if the folder in question does not exist but `checkErrorFolder` is 1 the folder will be created.
:Access Public Shared
⎕IO←0 ⋄ ⎕ML←3
r←⎕NS''
r.⎕FX'r←∆List;⎕IO' '⍝ List all variables and possible references in this namespace' '⎕IO←0' 'r←{⍵,[0.5]⍎¨⍵}'' ''~¨⍨↓⎕NL 2 9'
r.checkErrorFolder←1
r.createHTML←1
r.customFns←''
r.customFnsParent←⍬
r.enforceOff←0
r.errorFolder←''
r.killThreads←1
r.logFunction←''
r.logFunctionParent←⍬
r.off←1
r.returnCode←1
r.saveCrash←1
r.saveErrorWS←1
r.saveVars←1
r.signal←0
r.trapInternalErrors←1
r.trapSaveWSID←1
r.windowsEventSource←''
r.addToMsg←''
⍝Done
∇
∇ {r}←ReportErrorToWindowsLog(appName message);⎕USING
⍝ Reports an error to the Windows Event Log, by default to source="APL".\\
⍝ Note that the Dyalog bridge DLLs are required for this to work.
:Access Public Shared
r←⍬
⎕USING←'System,system.dll' 'System.Diagnostics,system.dll'
:If 0=≢appName
appName←'APL'
:EndIf
message←⊆message
WriteWindowsLog_ appName EventLogEntryType.Error message
∇
⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Private stuff
MarkupAsTableRow←{CR,'<tr><td><b>',⍺,((0<⍴⍺)/': </b></td><td>'),(⍕⍵),'</td></tr>'}
∇ r←CR
r←⎕UCS 13
∇
∇ {html}←WriteHtmlFile(parms crash filename);If
:If parms.createHTML
html←AssembleHTML parms crash
:Trap (parms.trapInternalErrors)/0
(⊂html)⎕NPUT(filename,'.html')1
:Else
:Trap parms.trapInternalErrors/0
:If ##.APLTreeUtils2.IsDevelopment
11 ⎕SIGNAL'Writing HTML file failed: ',1⊃parms.LastError
:EndIf
:EndTrap
:EndTrap
:Else
html←''
:EndIf
∇
∇ html←AssembleHTML(parms crash)
html←'<!DOCTYPE html>',CR
html,←'<html lang="en">',CR
html,←'<head>',CR
html,←'  <meta charset="utf-8">',CR
html,←'  <title>',('/'##.APLTreeUtils2.Last filename),'</title>',CR
html,←'  <style media="screen" type="text/css">',CR
html,←'    pre {',CR
html,←'   font-family: "APL385 Unicode"; font-size: 14px;',CR
html,←'   }',CR
html,←'   h1 {',CR
html,←'   font-family: "Courier New";',CR
html,←'   }',CR
html,←'   table#apl {',CR
html,←'   font-family: "APL385 Unicode"; font-size: 14px;',CR
html,←'   }',CR
html,←'  </style>',CR
html,←'</head>',CR
html,←'<body>',CR
html,←'  <h1>',('/'##.APLTreeUtils2.Last filename),'</h1>',CR
html,←'  <table id="apl">'
html,←'  Version'MarkupAsTableRow⍕'#'⎕WG'APLVersion'
html,←'  ⎕WSID'MarkupAsTableRow⍕{'/'##.APLTreeUtils2.Last ⍵ ⋄ ⍵}⍣('/'∊crash.WSID)⊣1↓' ',crash.WSID  ⍝ Enforce ⎕DR 80/82 with 1↓' ',
html,←'  ⎕IO'MarkupAsTableRow⍕⎕IO
html,←'  ⎕ML'MarkupAsTableRow⍕⎕ML
html,←'  ⎕WA'MarkupAsTableRow⍕⎕WA
html,←'  ⎕TNUMS'MarkupAsTableRow{0=≢⍵:⍵ ⋄ ⊃{⍺,',',⍵}/⍕¨⍵}⎕TNUMS
html,←'  Category'MarkupAsTableRow crash.Category
html,←'  EM'MarkupAsTableRow crash.EM
html,←'  HelpURL'MarkupAsTableRow crash.HelpURL
html,←'  EN'MarkupAsTableRow⍕crash.EN
html,←'  ENX'MarkupAsTableRow⍕crash.ENX
html,←'  InternalLocation'MarkupAsTableRow⍕crash.InternalLocation
html,←'  Message'MarkupAsTableRow crash.Message
html,←'  OSError'MarkupAsTableRow⍕crash.OSError
html,←'  Current Dir'MarkupAsTableRow⍕crash.CurrentDir
html,←'  Command line'MarkupAsTableRow⍕crash.CommandLine
:If 0≠≢parms.addToMsg
html,←'  Added Msg'MarkupAsTableRow parms.addToMsg
:EndIf
html,←'  </table>'
html,←'<p><b>Stack:</b></p>',CR
:If 0≠≢crash.XSI
html,←'<pre>',(⊃,/CR,¨crash.XSI,¨{'[',(⍕⍵),']'}¨crash.LC),CR,'</pre>',CR
:EndIf
html,←'<p><b>Error Message:</b></p>',CR
:If 0≠≢crash.DM
html,←'<pre>',(ExchangeHtmlChars⊃,/CR,¨crash.DM),CR,'</pre>',CR
:EndIf
html,←'</body>',CR
html,←'</html>',CR
∇
∇ {r}←WriteWindowsLog_(source type message);eventLog;sep;⎕USING;buffer;⎕ML
⍝ This function writes to the Windows Event Log.
⍝ "message" must either be a string or a vector of strings.
⍝ "type"
⎕ML←1
r←⍬
⎕USING←'System,system.dll' 'System.Diagnostics,system.dll'
⍝ Should check the source/log exist.
eventLog←⎕NEW EventLog
eventLog.Source←source
sep←⎕UCS 10
buffer←¯1↓⊃,/message,¨sep
eventLog.WriteEntry buffer type
∇
∇ html←ExchangeHtmlChars html;b
:If 0<+/b←html='&'
(b/html)←⊂'&amp;'
html←∊html
:EndIf
:If 0<+/b←html='<'
(b/html)←⊂'&lt;'
html←∊html
:EndIf
:If 0<+/b←html='>'
(b/html)←⊂'&gt;'
html←∊html
:EndIf
∇
∇ WriteToLogFile parms;fns;parent
:If 0≠≢parms.logFunction
:Trap (parms.trapInternalErrors)/0
:If '.'∊parms.logFunction
fns←⍎parms.logFunction
:Else
:If ⍬≢parms.logFunctionParent
fns←parms.logFunctionParent⍎parms.logFunction
:Else
'Cannot find the log function'⎕SIGNAL 6
:EndIf
:EndIf
fns'*** Error'
fns'Error number=',⍕parms.LastErrorNumber
fns parms.LastError
:If 0≠≢parms.addToMsg
fns parms.addToMsg
:EndIf
:Else
⍝ Useful to realize in the tracer that something went wrong
:EndTrap
:EndIf
∇
∇ ExecuteCustomFns parms;fns;parent
:If 0≠≢parms.customFns
:Trap (parms.trapInternalErrors)/0
:If '.'∊parms.customFns
fns←⍎parms.customFns
:Else
:If ⍬≢parms.customFnsParent
fns←parms.customFnsParent⍎parms.customFns
:Else
'Cannot find the custom function'⎕SIGNAL 6
:EndIf
:EndIf
fns parms
:Else
⍝ Useful to realize in the tracer that something went wrong
:EndTrap
:EndIf
∇
∇ {crash}←SaveErrorWorkspace(filename parms crash);wsid;lx
:If parms.saveErrorWS
wsid←⎕WSID
⎕WSID←filename
lx←⎕LX
⎕LX←'⎕TRAP←0 ''S'' ⍝',⎕LX
:Trap parms.trapSaveWSID/0
⎕SAVE ⎕WSID
:Else
crash.SaveFailed←⎕DMX.Message
:EndTrap
⎕WSID←wsid       ⍝ Potentially important (for example when running test cases)
⎕LX←lx
:EndIf
∆End:
∇
∇ crash←CreateCrash(parms Trap)
crash←⎕NS''
crash.(AN DM EN XSI LC WSID TID TNUMS)←⎕AN ⎕DM ⎕EN ⎕XSI ⎕LC ⎕WSID ⎕TID ⎕TNUMS
crash.WA←⎕WA
crash.Trap←Trap
crash.CurrentDir←##.FilesAndDirs.PWD
crash.CommandLine←2 ⎕NQ'#' 'GetCommandLine'
:Trap (parms.trapInternalErrors)/0
crash.(Category DM EM HelpURL EN ENX InternalLocation Message OSError)←⎕DMX.(Category DM EM HelpURL EN ENX InternalLocation Message OSError)
crash.(XSI LC)←1↓¨crash.(XSI LC)
:EndTrap
:If 0≠≢parms.addToMsg
crash.addedMsg←parms.addToMsg
:EndIf
:If parms.saveVars
crash←SaveVisibleVars crash
:EndIf
∇
∇ {r}←SaveCrash(filename crash parms);tno
:If parms.saveCrash
:Trap (parms.trapInternalErrors)/0
tno←filename ⎕FCREATE 0
crash ⎕FAPPEND tno  ⍝ Might fail with a WS FULL
:Else
:Trap 0
⎕DMX.DM ⎕FAPPEND tno
:EndTrap
:EndTrap
:Trap 0 ⋄ ⎕FUNTIE tno ⋄ :EndTrap
:EndIf
∇
CreateFilename←{
folder←⍵
folder,←((0≠≢folder)∧'/'≠¯1↑folder)/'/'
folder,({⍵↑⍨¯1+⍵⍳'.'}2⊃##.APLTreeUtils2.SplitPath crash.WSID),'_',14 0⍕100⊥6↑⎕TS}
∇ {r}←WriteToWindowsEvents parms;msg
r←⍬
:If 'Win'≡##.APLTreeUtils2.GetOperatingSystem ⍬
:AndIf 0≠≢parms.windowsEventSource
:Trap (parms.trapInternalErrors)/0
msg←⊂'Application has crashed, RC=',(⍕crash.EN),'; MSG=',crash.EM
msg,←(0<≢parms.errorFolder)/''('Details can be found in ',parms.errorFolder)
:If 0≠≢parms.addToMsg
msg,←{(≡⍵)∊0 1:,⊂,⍵ ⋄ ⍵}parms.addToMsg
:EndIf
ReportErrorToWindowsLog parms.windowsEventSource msg
:EndTrap
:EndIf
∇
∇ {r}←PrintErrorToSession msg
r←⍬
⎕←'HandleError.Process caught ',msg
∇
∇ crash←SaveVisibleVars crash;rf;list;this
rf←{⊃⍵~⊃⍵}⎕RSI
list←' '~¨⍨↓rf.⎕NL 2
'Vars'crash.⎕NS''
:For this :In list
⍎'crash.Vars.',this,'←rf.⍎this'
:EndFor
∇
∇ {r}←CheckErrorFolder parms;buff;wsid
r←⍬
:If 0=≢parms.errorFolder
:If 0=≢wsid←⎕WSID
⎕WSID←'Error-WS'
:EndIf
:If 0=≢buff←2⊃⎕NPARTS wsid
buff←2⊃⎕NPARTS{'"'∊⍵:1↓⍵/⍨1=+\'"'=⍵ ⋄ ⍵↑⍨¯1+⍵⍳' '}2 ⎕NQ'#' 'GetCommandLine' ⍝ Probably a stand-alone EXE
:EndIf
:If 'Win'≡##.APLTreeUtils2.GetOperatingSystem ⍬
parms.errorFolder←(⊃⎕CMD'ECHO %LOCALAPPDATA%'),'/',buff,'\Errors'
:Else
parms.errorFolder←##.FilesAndDirs.PWD,'/Errors'
:EndIf
:EndIf
parms.errorFolder←{(-(¯1↑⍵)∊'/\')↓⍵}##.FilesAndDirs.NormalizePath parms.errorFolder
:If 0=+/'/\'∊parms.errorFolder
parms.errorFolder←##.FilesAndDirs.NormalizePath ##.FilesAndDirs.PWD,'/',parms.errorFolder
:EndIf
:If 0=⎕NEXISTS parms.errorFolder
:AndIf parms.checkErrorFolder
:If 'Win'≡##.APLTreeUtils2.GetOperatingSystem ⍬
:Else
⎕SH'mkdir -p "',parms.errorFolder,'"'
:EndIf
:EndIf
∇
:EndClass
(
'# HashPasswords'
''
'## Overview'
''
'This package gives you the tools you need to generate the hash for a salted password.'
''
'Note that there are several reasons for salting a password:'
''
'* Ensure that passwords that are too short to be secure by normal standards are secure anyway,'
'  at least as far as the length is concerned'
'* Prevent an attacker from realising when users are sharing the same password'
''
'By salting a password with a randomly generated salt, we increase security.'
''
'Note that the salt must be stored as clear text. And no, this is not a security risk!'
''
'For more information see <https://en.m.wikipedia.org/wiki/Salt_(cryptography)>'
''
'## Conga DLLs'
''
'On Windows, .NET is used for solving the task.'
''
'On other platforms `HashPasswords` needs the Conga DLL `libconga??ssl64.*` when `??` stands for the '
'version number like "34".'
''
'If the global variable `HashPasswords.PathToCongaDLLs` is empty (that''s the default) then '
'`HashPasswords` tries to use the Conga DLL the currently running APL is coming with.'
''
'If this is not suitable (for example in an application with a runtime EXE and a limited set of'
'Dyalog files while no Dyalog is installed) then make sure that `PathToCongaDLLs` point to a '
'folder where suitable DLLs can be found.'
''
'## Examples'
''
'```'
'      ≢salt1←HashPasswords.CreateSalt 10'
'10'
'      hash1←HashPasswords.Hash salt1,''123456'''
'      salt2←HashPasswords.CreateSalt 10'
'      ⎕←hash2←HashPasswords.Hash salt2,''123456'''
'      hash1≢hash2'
('1'⋄)
'      hash1≡HashPasswords.Hash salt1,''123456'''
('1'⋄)
'      hash2≡HashPasswords.Hash salt2,''123456'''
('1'⋄)
'```'
)
CreateSalt←{##.CreateSalt ⍵}
Dispose
Hash←{##.Hash ⍵}
Init_SHA256←{⍺←⊢ ⋄ 1:shy←⍺ ##.Init_SHA256 ⍵}
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}
salt←CreateSalt length;⎕RL;alp
⍝ Creates (pseudo)-randomly a salt with `length` characters. Only ASCII chars and digits are used as input.
⎕DL 0.0001×?100
⎕RL←+/⎕TS
alp←(⎕C ⎕A),⎕A,⎕D
salt←alp[?length⍴≢alp]
Dispose
⍝ Clean up
⎕EX'SHA256'
hash←Hash password
⍝ Returns the hash for `password`.\\
⍝ In case `HashPasswords` has not yet been initialized, `Hash` takes care of that.
:If 0=⎕NC'SHA256'
Init_SHA256 ⍬
:EndIf
hash←,Hex SHA256.ComputeHash⊂'UTF-8'⎕UCS password
⍝Done
Hex←{  ⍝ Transform integers to hex and vice versa\\
⍝ `⍵` simple dec- or hex-array\\
⍝ `←` simple hex- or dec-array\\
⍝ Accepts hex as uppercase or lowercase but always return lowercase.\\
⎕IO←0
t←0∊⊃⍬⍴0⍴⊂⍵
a←⎕D,'abcdef',⎕D,'ABCDEF'
t:⍉a⌷⍨⊂16⊥⍣¯1⊢⍉⍵
⍉16⊥16|a⍳⍉⍵
}
(
'* 1.0.1 ⋄ 2023-07-16'
'  * Did not work with 32-bit-version of Dyalog'
'* 1.0.0'
'  * First version'
)
{r}←{force}Init_SHA256 dummy;extn;⎕USING;filename;path;OS
⍝ Make the necessary preparations for hashing a password.\\
⍝ Once initiallized, the function does not run its code again, except when a 1 is passed as `⍺`.
force←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'force'
'⍺ must be a Boolean'Assert(⊂force)∊0 1
:If 9≠⎕NC'SHA256'
:OrIf force
OS←APLTreeUtils2.GetOperatingSystem ⍬
:If 'Win'≡OS
:If 1=1⊃2250⌶0     ⍝ .NET?!
⎕USING←',System.Security.Cryptography.Algorithms'
:Else              ⍝ .NET Framework!
⎕USING←',System.Security.Cryptography.Algorithms.dll'
:EndIf
SHA256←⎕NEW System.Security.Cryptography.SHA256Managed
:Else
'SHA256'⎕NS''
:If 0=≢path←PathToCongaDLLs
path←(2 ⎕NQ #'GetEnvironment' 'Dyalog'),'/lib/'
:EndIf
filename←⊃FilesAndDirs.ListFiles path,'libconga??ssl',((1+Is64Bit)⊃'32' '64'),'.',(1+'Mac'≡OS)⊃'so' 'dylib'
'Conga DLL not found'Assert 0<≢filename
'Init'SHA256.⎕NA filename,'|nettle_sha256_init >I1[112]'
'Update'SHA256.⎕NA filename,'|nettle_sha256_update =I1[112] U8 <T1[]'
'Digest'SHA256.⎕NA filename,'|nettle_sha256_digest =I1[112] U8 >U1[32]'
SHA256.⎕FX'digest←ComputeHash data;ctx' 'data←⎕UCS⊃data' 'ctx←Init 112' 'ctx←Update ctx(⍴data)data' '(ctx digest)←Digest ctx 32 32'
:EndIf
:EndIf
r←Is64Bit
r←∨/'-64'⍷1⊃'#'⎕WG'APLVersion'
''
r←Public
r←'Init_SHA256' 'CreateSalt' 'Hash' 'Dispose'
r←Version
⍝ See also `History`
r←'HashPasswords' '1.1.0' '2024-04-25'
﻿:Class HttpCommand
⍝ General HTTP Commmand utility
⍝ Documentation is found at https://dyalog.github.io/HttpCommand/
⎕ML←⎕IO←1
∇ r←Version
⍝ Return the current version
:Access public shared
r←'HttpCommand' '5.8.0' '2024-07-17'
∇
⍝ Request-related fields
:field public Command←'get'                    ⍝ HTTP command (method)
:field public URL←''                           ⍝ requested resource
:field public Params←''                        ⍝ request parameters
:field public Headers←0 2⍴⊂''                  ⍝ request headers - name, value
:field public ContentType←''                   ⍝ request content-type
:field public Cookies←⍬                        ⍝ request cookies - vector of namespaces
:field public Auth←''                          ⍝ authentication string
:field public AuthType←''                      ⍝ authentication type
:field public BaseURL←''                       ⍝ base URL to use when making multiple requests to the same host
:field public ChunkSize←0                      ⍝ set to size of chunk if using chunked transfer encoding
:field public shared HeaderSubstitution←''     ⍝ delimiters to indicate environment/configuration settings be substituted in headers, set to '' to disable
⍝ Proxy-related fields - only used if connecting through a proxy server
:field public ProxyURL←''                      ⍝ address of the proxy server
:field public ProxyAuth←''                     ⍝ authentication string, if any, for the proxy server
:field public ProxyAuthType←''                 ⍝ authentication type, if any, for the proxy server
:field public ProxyHeaders←0 2⍴⊂''             ⍝ any headers that the proxy server might need
⍝ Conga-related fields
:field public BufferSize←200000                ⍝ Conga buffersize
:field public WaitTime←5000                    ⍝ Timeout in ms on Conga Wait call
:field public Cert←⍬                           ⍝ X509 instance if using HTTPS
:field public SSLFlags←32                      ⍝ SSL/TLS flags - 32 = accept cert without checking it
:field public Priority←'NORMAL:!CTYPE-OPENPGP' ⍝ GnuTLS priority string
:field public PublicCertFile←''                ⍝ if not using an X509 instance, this is the client public certificate file
:field public PrivateKeyFile←''                ⍝ if not using an X509 instance, this is the client private key file
:field public shared LDRC                      ⍝ HttpCommand-set reference to Conga after CongaRef has been resolved
:field public shared CongaPath←''              ⍝ path to user-supplied conga workspace (assumes shared libraries are in the same path)
:field public shared CongaRef←''               ⍝ user-supplied reference to Conga library
:field public shared CongaVersion←''           ⍝ Conga [major minor build]
⍝ Operational fields
:field public SuppressHeaders←0                ⍝ set to 1 to suppress HttpCommand-supplied default request headers
:field public MaxPayloadSize←¯1                ⍝ set to ≥0 to take effect
:field public Timeout←10                       ⍝ seconds to wait for a response before timing out, negative means reset timeout if any activity
:field public RequestOnly←¯1                   ⍝ set to 1 if you only want to return the generated HTTP request, but not actually send it
:field public OutFile←''                       ⍝ name of file to send payload to (format is same as ⎕NPUT right argument)
:field public Secret←1                         ⍝ suppress displaying credentials in Authorization header
:field public MaxRedirections←10               ⍝ set to 0 if you don't want to follow any redirected references, ¯1 for unlimited
:field public KeepAlive←1                      ⍝ default to not close client connection
:field public TranslateData←0                  ⍝ set to 1 to translate XML or JSON response data
:field public UseZip←0                         ⍝ zip request payload (0-no, 1-use gzip, 2-use deflate)
:field public ZipLevel←1                       ⍝ default compression level (0-9)
:field public shared Debug←0                   ⍝ set to 1 to disable trapping, 2 to stop just before creating client
:field public readonly shared ValidFormUrlEncodedChars←'&=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~*+~%'
:field Client←''                               ⍝ Conga client ID
:field ConxProps←''                            ⍝ when a client is made, its connection properties are saved so that if either changes, we close the previous client
:field origCert←¯1                             ⍝ used to check if Cert changed between calls
∇ make
⍝ No argument constructor
:Access public
:Implements constructor
∇
∇ make1 args;settings;invalid
⍝ Constructor arguments - [Command URL Params Headers Cert SSLFlags Priority]
:Access public
:Implements constructor
→0⍴⍨0∊⍴args
args←(eis⍣({9.1≠⎕NC⊂,'⍵'}⊃args)⊢args)
:Select {⊃⎕NC⊂,'⍵'}⊃args
:Case 2.1 ⍝ array
Command URL Params Headers Cert SSLFlags Priority←7↑args,(⍴args)↓Command URL Params Headers Cert SSLFlags Priority
:Case 9.1 ⍝ namespace
:If 0∊⍴invalid←(settings←args.⎕NL ¯2.1 ¯9.1)~(⎕NEW⊃⊃⎕CLASS ⎕THIS).⎕NL ¯2.2
args{⍎⍵,'←⍺⍎⍵'}¨settings
:Else ⋄ ('Invalid HttpCommand setting(s): ',,⍕invalid)⎕SIGNAL 11
:EndIf
:Else ⋄ 'Invalid constructor argument'⎕SIGNAL 11
:EndSelect
∇
∇ {ns}←initResult ns
⍝ initialize the namespace result
:Access shared
ns.(Command URL rc msg HttpVersion HttpStatus HttpMessage Headers Data PeerCert Redirections Cookies OutFile Elapsed BytesWritten)←'' '' ¯1 '' ''⍬''(0 2⍴⊂'')''⍬(0⍴⊂'')⍬'' 0 ¯1
ns.GetHeader←{⎕IO←⎕ML←1 ⋄ ⍺←Headers ⋄ ⍺{1<|≡⍵:⍺∘∇¨⍵ ⋄ (⍺[;2],⊂'')⊃⍨⍺[;1](⍳{(⍵⍵ ⍺)⍺⍺(⍵⍵ ⍵)}{2::0(819⌶)⍵ ⋄ ¯3 ⎕C ⍵})⊆,⍵}⍵} ⍝ return header value or '' if not found
ns.⎕FX'∇r←IsOK' 'r←0 2≡rc,⌊.01×HttpStatus' '∇'
∇
∇ Goodbye
:Implements destructor
{}{0::'' ⋄ LDRC.Names'.'⊣LDRC.Close ⍵}⍣(~0∊⍴Client)⊢Client
∇
∇ r←Config;i
⍝ Returns current configuration
:Access public
r←↑{6::⍵'not set' ⋄ ⍵(⍎⍵)}¨(⎕THIS⍎'⎕NL ¯2.2')~⊂'ValidFormUrlEncodedChars'
:If (≢r)≥i←r[;1]⍳⊂'Auth'
:AndIf Secret
r[i;2]←⊂'>>> Secret setting is 1 <<<'
:EndIf
∇
∇ r←Run
⍝ Attempt to run the HTTP command
:Access public
RequestOnly←0⌈RequestOnly
Result←initResult #.⎕NS''
:Trap Debug↓0
r←(Cert SSLFlags Priority PublicCertFile PrivateKeyFile)HttpCmd Command URL Params Headers
:Else ⍝ :Trap
r←Result
r.(rc msg)←¯1('Unexpected ',⊃{⍺,' at ',⍵}/2↑⎕DMX.DM)
:EndTrap
setDisplayFormat r
exit:
∇
∇ r←Show;ro
⍝ Show the request to be sent to the server
:Access public
ro←RequestOnly
RequestOnly←1
r←Run
RequestOnly←ro
∇
∇ {r}←setDisplayFormat r;rc;msg;stat;data
⍝ set the display format for the namespace result for most HttpCommand commands
:If 9.1=nameClass r
rc←'rc: ',⍕r.rc
msg←' | msg: ',⍕r.msg
stat←' | HTTP Status: ',(⍕r.HttpStatus),' "',r.HttpMessage,'"'
data←' | ',{¯1≠r.BytesWritten:(⍕r.BytesWritten),' bytes written to ',r.OutFile ⋄ '≢Data: ',(⍕≢⍵),(9.1=nameClass ⍵)/' (namespace)'}r.Data
r.⎕DF 1⌽'][',rc,msg,stat,data
:EndIf
∇
∇ r←{requestOnly}Get args
⍝ Shared method to perform an HTTP GET request
⍝ args - [URL Params Headers Cert SSLFlags Priority]
:Access public shared
:If 0=⎕NC'requestOnly' ⋄ requestOnly←¯1 ⋄ :EndIf
:If 2.1=nameClass⊃args ⋄ args←((⊂'GET'),eis args) ⋄ :EndIf
→∆EXIT⍴⍨9.1=nameClass r←requestOnly New args
r←r.Run
∆EXIT:
∇
∇ r←{requestOnly}Do args
⍝ Shared method to perform any HTTP request
⍝ args - [Command URL Params Headers Cert SSLFlags Priority]
:Access public shared
:If 0=⎕NC'requestOnly' ⋄ requestOnly←¯1 ⋄ :EndIf
→∆EXIT⍴⍨9.1=nameClass r←requestOnly New args
r←r.Run
∆EXIT:
∇
∇ r←{requestOnly}New args
⍝ Shared method to create new HttpCommand
⍝ args - [Command URL Params Headers Cert SSLFlags Priority]
⍝ requestOnly - initial setting for RequestOnly
:Access public shared
:If 0=⎕NC'requestOnly' ⋄ requestOnly←¯1 ⋄ :EndIf
r←''
:Trap Debug↓0
:If 0∊⍴args
r←##.⎕NEW ⎕THIS
:Else
r←##.⎕NEW ⎕THIS(eis⍣(9.1≠nameClass⊃args)⊢args)
:EndIf
r.RequestOnly←requestOnly
:Else
r←initResult #.⎕NS''
r.(rc msg)←¯1 ⎕DMX.EM
setDisplayFormat r
→∆EXIT
:EndTrap
∆EXIT:
∇
∇ r←{requestOnly}GetJSON args;cmd
⍝ Shared method to perform an HTTP request with JSON data as the request and response payloads
⍝ args - [Command URL Params Headers Cert SSLFlags Priority]
:Access public shared
:If 0=⎕NC'requestOnly' ⋄ requestOnly←¯1 ⋄ :EndIf
→∆EXIT⍴⍨9.1=nameClass cmd←requestOnly New args
:If 0∊⍴cmd.Command ⋄ cmd.Command←(1+0∊⍴cmd.Params)⊃'POST' 'GET' ⋄ :EndIf
:If ~(⊂lc cmd.Command)∊'get' 'head'
:If 0∊⍴cmd.ContentType ⋄ cmd.ContentType←'application/json;charset=utf-8' ⋄ :EndIf
:If ~0∊⍴cmd.Params
:Trap Debug↓0
cmd.Params←JSONexport cmd.Params
:Else
→∆DONE⊣r.(rc msg)←¯1 'Could not convert parameters to JSON format'
:EndTrap
:EndIf
:EndIf
r←cmd.Run
→cmd.RequestOnly⍴∆EXIT
:If r.rc=0
→∆DONE⍴⍨204=r.HttpStatus ⍝ exit if "no content" HTTP status
:If ¯1=r.BytesWritten ⍝ if not writing to file
:If ∨/'application/json'⍷lc r.Headers getHeader'content-type'
JSONimport r
:Else ⋄ →∆DONE⊣r.(rc msg)←¯2 'Response content-type is not application/json'
:EndIf
:EndIf
:EndIf
∆DONE: ⍝ reset ⎕DF if messages have changed
setDisplayFormat r
∆EXIT:
∇
∇ r←{ro}Fix args;z;url;target
⍝ retrieve and fix APL code loads the latest version from GitHub
⍝ args is:
⍝  [1] URL of code to fix - if the URL has 'github' (but not 'raw.githubusercontent.com') in it, we do some gratuitous massaging
⍝  [2] (optional) reference to namespace in which to fix the code (default ##)
⍝ example: HttpCommand.Fix 'github/Dyalog/Jarvis/Source/Jarvis.dyalog' #.
:Access public shared
(url target)←2↑(,⊆args),##
:If 0=⎕NC'ro' ⋄ ro←0 ⋄ :EndIf
r←z←ro Get{ ⍝ convert url if necessary
~∨/'github'⍷⍵:⍵ ⍝ if not github just
∨/'raw.githubusercontent.com'⍷⍵:⍵ ⍝ already refers to
t←'/'(≠⊆⊢)⍵
i←⍸<\∨/¨'github'∘⍷¨t
'https://raw.githubusercontent.com',∊'/',¨(2↑i↓t),(⊂'master'),(2+i)↓t
}url
→ro⍴0
:If z.rc≠0
r←z.(rc msg)
:ElseIf z.HttpStatus≠200
r←¯1(⍕z)
:Else
:Trap 0
r←0(⍕target{0::⍺.⎕FX ⍵ ⋄ ⍺.⎕FIX ⍵}{⍵⊆⍨~⍵∊⎕UCS 13 10 65279}z.Data)
:Else
r←¯1('Could not ⎕FIX file: ',2↓∊': '∘,¨⎕DMX.(EM Message))
:EndTrap
:EndIf
∇
∇ r←Init
:Access Public
r←(Initialize initResult ⎕NS'').(rc msg)
r[1]×←~0∊⍴2⊃r ⍝ set to 0 if no error message from Conga initialization
∇
∇ r←Initialize r;ref;root;nc;n;ns;congaCopied;class;path
⍝↓↓↓ Check if LDRC exists (VALUE ERROR (6) if not), and is LDRC initialized? (NONCE ERROR (16) if not)
r.msg←''
:Hold 'HttpCommandInit'
:If {6 16 999::1 ⋄ ''≡LDRC:1 ⋄ 0⊣LDRC.Describe'.'}''
LDRC←''
:If ~0∊⍴CongaRef  ⍝ did the user supply a reference to Conga?
:If 0∊⍴LDRC←r ResolveCongaRef CongaRef
r.msg,⍨←'Could not initialize Conga using CongaRef "',(⍕CongaRef),'" due to '
→∆END
:EndIf
:Else
:For root :In ## #
ref nc←root{1↑¨⍵{(×⍵)∘/¨⍺ ⍵}⍺.⎕NC ⍵}ns←'Conga' 'DRC'
:If 9=⊃⌊nc ⋄ :Leave ⋄ :EndIf
:EndFor
:If 9=⊃⌊nc
:If 0∊⍴LDRC←r ResolveCongaRef(root⍎∊ref)
→∆END⊣r.msg,⍨←'Could not initialize Conga from "',(∊(⍕root)'.'ref),'" due to '
:EndIf
→∆COPY↓⍨{999::0 ⋄ 1⊣LDRC.Describe'.'}'' ⍝ it's possible that Conga was saved in a semi-initialized state
:Else
∆COPY:
class←⊃⊃⎕CLASS ⎕THIS
:If ~0∊⍴CongaPath
CongaPath←∊1 ⎕NPARTS CongaPath,'/'
→∆END↓⍨0∊⍴r.msg←(~⎕NEXISTS CongaPath)/'CongaPath "',CongaPath,'" does not exist'
→∆END↓⍨0∊⍴r.msg←(1≠1 ⎕NINFO CongaPath)/'CongaPath "',CongaPath,'" is not a folder'
:EndIf
congaCopied←0
:For n :In ns
:For path :In (1+0∊⍴CongaPath)⊃(⊂CongaPath)((dyalogRoot,'ws/')'') ⍝ if CongaPath specifiec, use it exclusively
:Trap Debug↓0
n class.⎕CY path,'conga'
LDRC←r ResolveCongaRef(class⍎n)
:If 0∊⍴LDRC
r.msg,⍨←n,' was copied from "',path,'conga", but encountered '
→∆END
:EndIf
→∆COPIED⊣congaCopied←1
:EndTrap
:EndFor
:EndFor
→∆END↓⍨0∊⍴r.msg←(~congaCopied)/'neither Conga nor DRC were successfully copied'
∆COPIED:
:EndIf
:EndIf
:EndIf
CongaVersion←LDRC.Version
LDRC.X509Cert.LDRC←LDRC ⍝ reset X509Cert.LDRC reference
:If 0≠⊃LDRC.SetProp'.' 'EventMode' 1
r.msg←'Unable to set EventMode on Conga root'
:EndIf
∆END:
:EndHold
∇
∇ LDRC←r ResolveCongaRef CongaRef;failed;z
⍝ Attempt to resolve what CongaRef refers to
⍝ CongaRef can be a charvec, reference to the Conga or DRC namespaces, or reference to an iConga instance
⍝ LDRC is '' if Conga could not be initialized, otherwise it's a reference to the the Conga.LIB instance or the DRC namespace
LDRC←'' ⋄ failed←0
:Select nameClass CongaRef ⍝ what is it?
:Case 9.1 ⍝ namespace?  e.g. CongaRef←DRC or Conga
∆TRY:
:Trap Debug↓0
:If 2 3≢⌊CongaRef.⎕NC'DllVer' 'Init'
r.msg←'it does not refer to a valid Conga interface'
→∆EXIT⊣LDRC←''
:EndIf
:If ∨/'.Conga'⍷⍕CongaRef ⍝ Conga?
LDRC←CongaPath CongaRef.Init'HttpCommand'
:ElseIf 0≡⊃CongaRef.Init CongaPath ⍝ DRC?
LDRC←CongaRef
:Else ⍝ should never get to here, but... (paranoia)
r.msg←'it does not refer to a valid Conga interface'
→∆EXIT⊣LDRC←''
:End
:Else ⍝ if HttpCommand is reloaded and re-executed in rapid succession, Conga initialization may fail, so we try twice
:If failed
→∆EXIT⊣LDRC←''⊣r.msg←∊{⍺,(~0∊⍴⍵)/': ',⍵}/⎕DMX.(EM Message)
:Else
→∆TRY⊣failed←1
:EndIf
:EndTrap
:Case 9.2 ⍝ instance?  e.g. CongaRef←Conga.Init ''
:If 3=⌊|CongaRef.⎕NC⊂'Clt' ⍝ if it looks like a valid Conga reference
LDRC←CongaRef ⍝ an instance is already initialized
:EndIf
:Case 2.1 ⍝ variable?  e.g. CongaRef←'#.Conga'
:Trap Debug↓0
:If 9≠z←⎕NC⍕CongaRef
→∆EXIT⊣r.msg←'CongaRef ',(1+z=0)⊃'is invalid' 'was not found'
:EndIf
LDRC←r ResolveCongaRef(⍎∊⍕CongaRef)
:Else
r.msg←∊{⍺,(~0∊⍴⍵)/': ',⍵}/⎕DMX.(EM Message)
:EndTrap
:EndSelect
∆EXIT:
∇
∇ (rc secureParams)←CreateSecureParams certs;cert;flags;priority;public;private;nmt;msg;t
⍝ certs is:
⍝ cert     - X509Cert instance or (PublicCertFile PrivateKeyFile)
⍝ flags    - SSL flags
⍝ priority - GnuTLS priority
⍝ public   - PublicCertFile
⍝ private  - PrivateKeyFile
certs←,⊆certs
(cert flags priority public private)←5↑certs,(≢certs)↓'' 0 'NORMAL:!CTYPE-OPENPGP' '' ''
LDRC.X509Cert.LDRC←LDRC ⍝ make sure the X509 instance points to the right LDRC
:If 0∊⍴cert ⍝ if X509 (or public private) not supplied
∆CHECK:
⍝ if cert is empty, check PublicCertFile and PrivateKeyFile
:If ∨/nmt←(~0∊⍴)¨public private ⍝ either file name not empty?
:If ∧/nmt ⍝ if so, both need to be non-empty
:If ∨/t←{0::1 ⋄ ~⎕NEXISTS ⍵}¨public private ⍝ either file not exist?
→∆FAIL⊣msg←'Not found',4↓∊t/'PublicCertFile' 'PrivateKeyFile'{' and ',⍺,' "',(∊⍕⍵),'"'}¨public private
:EndIf
:Trap Debug↓0
cert←⊃LDRC.X509Cert.ReadCertFromFile public
:Else
→∆FAIL⊣msg←'Unable to decode PublicCertFile "',(∊⍕public),'" as certificate'
:EndTrap
cert.KeyOrigin←'DER'private
:Else
→∆FAIL⊣msg←(⊃nmt/'PublicCertFile' 'PrivateKeyFile'),' is empty' ⍝ both must be specified
:EndIf
:Else
cert←⎕NEW LDRC.X509Cert
:EndIf
:ElseIf 2=⍴cert ⍝ 2-element vector of public/private file names?
public private←cert
→∆CHECK
:ElseIf {0::1 ⋄ 'X509Cert'≢{⊃⊢/'.'(≠⊆⊢)⍵}⍕⎕CLASS ⍵}cert
→∆FAIL⊣msg←'Invalid certificate parameter'
:EndIf
secureParams←('x509'cert)('SSLValidation'flags)('Priority'priority)
→rc←0
∆FAIL:(rc secureParams)←¯1 msg ⍝ failure
∇
∇ {r}←certs HttpCmd args;url;parms;hdrs;urlparms;p;b;secure;port;host;path;auth;req;err;done;data;datalen;rc;donetime;ind;len;obj;evt;dat;z;msg;timedOut;certfile;keyfile;simpleChar;defaultPort;cookies;domain;t;replace;outFile;toFile;startSize;options;congaPath;progress;starttime;outTn;secureParams;ct;forceClose;headers;cmd;file;protocol;conx;proxied;proxy;cert;noCT;simpleParms;noContentLength;connectionClose;tmpFile;tmpTn;redirected;encoding;compType;isutf8;boundary
⍝ issue an HTTP command
⍝ certs - X509Cert|(PublicCertFile PrivateKeyFile) SSLValidation Priority PublicCertFile PrivateKeyFile
⍝ args  - [1] HTTP method
⍝         [2] URL in format [HTTP[S]://][user:pass@]url[:port][/path[?query_string]]
⍝         {3} parameters is using POST - either a namespace or URL-encoded string
⍝         {4} HTTP headers in form {↑}(('hdr1' 'val1')('hdr2' 'val2'))
⍝         {5} cookies in form {↑}(('cookie1' 'val1')('cookie2' 'val2'))
⍝ Makes secure connection if left arg provided or URL begins with https:
⍝ Result: namespace containing (conga return code) (HTTP Status) (HTTP headers) (HTTP body) [PeerCert if secure]
args←,⊆args
(cmd url parms headers cookies)←args,(⍴args)↓'' ''(⎕NS'')'' ''
:If 0∊⍴cmd ⋄ cmd←'GET' ⋄ :EndIf
r←Result
toFile←redirected←outTn←tmpTn←0 ⍝ initial settings
tmpFile←''
url←,url
url←BaseURL makeURL url
cmd←uc,cmd
⍝ Do some cursory parameter checking
→∆END↓⍨0∊⍴r.msg←'No URL specified'/⍨0∊⍴url ⍝ exit early if no URL
→∆END↓⍨0∊⍴r.msg←'URL is not a simple character vector'/⍨~isSimpleChar url
→∆END↓⍨0∊⍴r.msg←'Cookies are not character'/⍨(0∊⍴cookies)⍱1↑isChar cookies
→∆END↓⍨0∊⍴r.msg←'Headers are not character'/⍨(0∊⍴headers)⍱1↑isChar headers
:If ~RequestOnly  ⍝ don't bother initializing Conga if only returning request
→∆END↓⍨0∊⍴(Initialize r).msg
:EndIf
∆GET:
⍝ do header initialization here because we may return here on a redirect
:Trap 7
hdrs←makeHeaders headers
:Else
→∆END⊣r.msg←'Improper header format'
:EndTrap
conx←ConxProps ConnectionProperties r.URL←url
→∆END↓⍨0∊⍴r.msg←conx.msg
(protocol secure auth host port path urlparms defaultPort)←conx.(protocol secure auth host port path urlparms defaultPort)
secure∨←⍲/{0∊⍴⍵}¨certs[1 4] ⍝ we're also secure if we have a cert or a PublicCertFile
:If proxied←~0∊⍴ProxyURL
:If CongaVersion(~atLeast)3 4 1626 ⍝ Conga build that introduced proxy support
→∆END⊣r.msg←'Conga version 3.4.1626 or later is required to use a proxy'
:EndIf
proxy←ConnectionProperties ProxyURL
→∆END↓⍨0∊⍴r.msg←proxy.msg
proxy.headers←makeHeaders ProxyHeaders
:EndIf
r.(Secure Host Port Path)←secure(lc host)port({{'/',¯1↓⍵/⍨⌽∨\'/'=⌽⍵}⍵↓⍨'/'=⊃⍵}path)
:If ~SuppressHeaders
hdrs←'Host'(hdrs addHeader)host,((~defaultPort)/':',⍕port)
hdrs←'User-Agent'(hdrs addHeader)deb'Dyalog-',1↓∊'/',¨2↑Version
hdrs←'Accept'(hdrs addHeader)'*/*'
hdrs←'Accept-Encoding'(hdrs addHeader)'gzip, deflate'
:If ~0∊⍴Auth
:If (1<|≡Auth)∨':'∊Auth ⍝ (userid password) or userid:password
:AndIf ('basic'≡lc AuthType)∨0∊⍴AuthType
Auth←Base64Encode ¯1↓∊(,⊆Auth),¨':'
AuthType←'Basic'
:EndIf
hdrs←'Authorization'(hdrs setHeader)deb AuthType,' ',⍕Auth
:EndIf
:If '∘???∘'≡hdrs getHeader'cookie' ⍝ if the user has specified a cookie header, it takes precedence
:AndIf ~0∊⍴cookies←r applyCookies Cookies
hdrs←'Cookie'(hdrs addHeader)formatCookies cookies
:EndIf
:If ~0∊⍴auth
hdrs←'Authorization'(hdrs addHeader)auth
:EndIf
:If 0≠ChunkSize
hdrs←'Transfer-Encoding'(hdrs addHeader)'chunked'
:EndIf
:If proxied
:If ~0∊⍴ProxyAuth
:If (1<|≡ProxyAuth)∨':'∊ProxyAuth ⍝ (userid password) or userid:password
:AndIf ('basic'≡lc ProxyAuthType)∨0∊⍴ProxyAuthType
ProxyAuth←Base64Encode ¯1↓∊(,⊆ProxyAuth),¨':'
ProxyAuthType←'Basic'
:EndIf
proxy.headers←'Proxy-Authorization'(proxy.headers setHeader)deb ProxyAuthType,' ',⍕ProxyAuth
:EndIf
:If ~0∊⍴proxy.auth
proxy.headers←'Proxy-Authorization'(proxy.headers addHeader)proxy.auth
:EndIf
:EndIf
:EndIf
noCT←(0∊⍴ContentType)∧('∘???∘'≡hdrs getHeader'content-type') ⍝ no content-type specified
:If noCT⍲0∊⍴parms ⍝ do we have any parameters or a content-type
simpleParms←{2≠⎕NC'⍵':0 ⋄ 1≥|≡⍵}parms ⍝ simple vector or scalar and not a reference
:If (⊆cmd)∊'GET' 'HEAD' ⍝ if the command is GET or HEAD
:AndIf noCT
⍝ params needs to be URLEncoded and will be appended to the query string
:If simpleParms
parms←∊⍕parms       ⍝ deal with possible numeric
parms←UrlEncode⍣(~∧/parms∊HttpCommand.ValidFormUrlEncodedChars)⊢parms ⍝ URLEncode if necessary
:Else ⍝ parms is a namespace or a name/value pairs array
parms←UrlEncode parms
:EndIf
urlparms,←(0∊⍴urlparms)↓'&',parms
parms←''
:Else ⍝ not a GET or HEAD command or content-type has been specified
:If ~SuppressHeaders
:If noCT ⍝ no content-type specified, try to work out what it should be
:If simpleParms ⍝ if parms is simple
:If (isJSON parms)∨isNum parms ⍝ and looks like JSON or is numeric
hdrs←'Content-Type'(hdrs addHeader)'application/json;charset=utf-8'
:Else
hdrs←'Content-Type'(hdrs addHeader)'application/x-www-form-urlencoded'
:EndIf
:Else ⍝ not simpleParms
hdrs←'Content-Type'(hdrs addHeader)'application/json;charset=utf-8'
:EndIf
:ElseIf ~0∊⍴ContentType ⍝ ContentType has been specified
hdrs←'Content-Type'(hdrs setHeader)ContentType ⍝ it overrides a pre-existing content-type header
:EndIf
:EndIf
simpleChar←{1<≢⍴⍵:0 ⋄ (⎕DR ⍵)∊80 82}parms
:Select ⊃';'(≠⊆⊢)lc hdrs getHeader'Content-Type'
:Case 'application/x-www-form-urlencoded'
:If ~simpleChar ⍝ if not simple character...
:OrIf ~∧/parms∊ValidFormUrlEncodedChars ⍝ or not valid URL-encoded
parms←UrlEncode parms ⍝ encode it
:EndIf
:Case 'application/json'
:If ~isJSON parms ⍝ if it's not already JSON
parms←JSONexport parms ⍝ JSONify it
:Else
parms←SafeJSON parms
:EndIf
:Case 'multipart/form-data'
:If 9.1≠nameClass parms ⍝ must be a namespace
→∆END⊣r.msg←'Params must be a namespace when using "multipart/form-data" content type'
:Else
boundary←50{⍵[?⍺⍴≢⍵]}⎕D,⎕A,⎕C ⎕A
hdrs←'Content-Type'(hdrs setHeader)'multipart/form-data; boundary=',boundary
(parms msg)←boundary multipart parms
:If ~0∊⍴msg
→∆END⊣r.msg←msg
:EndIf
:EndIf
:Else
parms←∊⍕parms
:EndSelect
:Select UseZip
:Case 1 ⍝ gzip
:Trap 0
parms←toChar 2⊃3 ZipLevel Zipper sint parms
hdrs←'Content-Encoding'(hdrs setHeader)'gzip'
:Else
r.msg←'gzip encoding on request payload failed'
:EndTrap
:Case 2 ⍝ deflate
:Trap 0
parms←toChar 2⊃2 ZipLevel Zipper sint parms
hdrs←'Content-Encoding'(hdrs setHeader)'deflate'
:Else
r.msg←'deflate encoding on request payload failed'
:EndTrap
:EndSelect
:If RequestOnly>SuppressHeaders ⍝ Conga supplies content-length, but for RequestOnly we need to insert it
:AndIf 0=ChunkSize
hdrs←'Content-Length'(hdrs addHeader)⍕⍴parms
:EndIf
:EndIf
:EndIf
hdrs⌿⍨←~0∊¨≢¨hdrs[;2] ⍝ remove any headers with empty values
:If 0≠ChunkSize
parms←ChunkSize Chunk parms
:EndIf
:If RequestOnly
r←cmd,' ',(path,(0∊⍴urlparms)↓'?',urlparms),' HTTP/1.1',(∊{NL,⍺,': ',∊⍕⍵}/privatize environment hdrs),NL,NL,parms
→∆EXIT
:EndIf
(outFile replace)←2↑{⍵,(≢⍵)↓'' 0}eis OutFile
:If 0=outTn ⍝ if we don't already have an output file tied
:If toFile←~0∊⍴outFile ⍝ if we're directing the response payload to file
:Trap Debug↓0
outFile←1 ⎕NPARTS outFile
:If ~⎕NEXISTS⊃outFile
→∆END⊣r.msg←'Output file folder "',(⊃outFile),'" does not exist'
:EndIf
:If 0∊⍴∊1↓outFile ⍝ no file name specified, try to use the name from the URL
:If ~0∊⍴file←∊1↓1 ⎕NPARTS path
outFile←(⊃outFile),file
:Else ⍝ no file name specified and none in the URL
→∆END⊣r.msg←'No file name specified in OutFile or URL'
:EndIf
:EndIf
:If ⎕NEXISTS outFile←∊outFile
:If (0=replace)∧0≠2 ⎕NINFO outFile
→∆END⊣r.msg←'Output file "',outFile,'" is not empty'
:Else
outTn←outFile ⎕NTIE 0
{}0 ⎕NRESIZE⍣(1=replace)⊢outTn
:EndIf
:Else
outTn←outFile ⎕NCREATE 0
:EndIf
startSize←⎕NSIZE outTn
r.OutFile←outFile
tmpFile←tempFolder,'/',(∊1↓1 ⎕NPARTS outFile) ⍝ create temporary file to work with
tmpTn←tmpFile(⎕NCREATE⍠'Unique' 1)0 ⍝ create with a unique name
tmpFile←∊1 ⎕NPARTS ⎕NNAMES[⎕NNUMS⍳tmpTn;] ⍝ save the name for ⎕NDELETE later
:Else
→∆END⊣r.msg←({⍺,(~0∊⍴⍵)/' (',⍵,')'}/⎕DMX.(EM Message)),' occurred while trying to initialize output file "',(⍕outFile),'"'
:EndTrap
:EndIf
:EndIf
secureParams←''
:If secure
:AndIf 0≠⊃(rc secureParams)←CreateSecureParams certs
→∆END⊣r.(rc msg)←rc secureParams
:EndIf
:If proxied
proxy.secureParams←''
:If proxy.secure
:AndIf 0≠⊃(rc proxy.secureParams)←CreateSecureParams'' 0
→∆END⊣r.(rc msg)←rc('PROXY: ',proxy.secureParams)
:EndIf
:EndIf
stopIf Debug=2
:If ~0∊⍴Client                    ⍝ do we have a client already?
:If 0∊⍴ConxProps              ⍝ should never happen (have a client but no connection properties)
Client←''                 ⍝ reset client
:ElseIf ConxProps.(Host Port Secure certs)≢r.(Host Port Secure),⊂certs ⍝ something's changed, reset
⍝ don't set message for same domain
r.msg←(ConxProps.Host≢over{lc ¯2↑'.'(≠⊆⊢)⍵}r.Host)/'Connection properties changed, connection reset'
{}{0::'' ⋄ LDRC.Close ⍵}Client
Client←ConxProps←''
:ElseIf 'Timeout'≢3⊃LDRC.Wait Client 0 ⍝ nothing changed, make sure client is alive
Client←ConxProps←'' ⍝ connection dropped, reset
:EndIf
:EndIf
starttime←⎕AI[3]
donetime←⌊starttime+1000×|Timeout ⍝ time after which we'll time out
:If 0∊⍴Client
options←''
:If CongaVersion atLeast 3 3
options←⊂'Options'LDRC.Options.DecodeHttp
:EndIf
:If ~proxied
:If 0≠⊃(err Client)←2↑rc←LDRC.Clt''host port'http'BufferSize,secureParams,options
Client←''
→∆END⊣r.(rc msg)←err('Conga client creation failed ',,⍕1↓rc)
:EndIf
:Else ⍝ proxied
forceClose←1 ⍝ any error forces client to close, forceClose gets reset later if no proxy connection errors
⍝ connect to proxy
:If 0≠⊃(err Client)←2↑rc←LDRC.Clt''proxy.host proxy.port'http'BufferSize proxy.secureParams,options
Client←''
→∆END⊣r.(rc msg)←err('Conga proxy client creation failed ',,⍕1↓rc)
:EndIf
⍝ connect to proxied host
:If 0≠err←⊃rc←LDRC.Send Client('CONNECT'(host,':',⍕port)'HTTP/1.1'proxy.headers'')
→∆END⊣r.(rc msg)←err('Proxy CONNECT failed: ',⍕1↓rc)
:EndIf
:If 0≠err←⊃rc←LDRC.Wait Client 1000
→∆END⊣r.(rc msg)←err('Proxy CONNECT wait failed: ',∊⍕1↓rc)
:Else
(err obj evt dat)←4↑rc
:If evt≢'HTTPHeader'
→∆END⊣r.(rc msg)←err('Proxy CONNECT did not respond with HTTPHeader event: ',∊⍕1↓rc)
:EndIf
:If '200'≢2⊃dat
r.(msg HttpStatus HttpMessage Headers)←(⊂'Proxy CONNECT response failed'),1↓dat
r.HttpStatus←⊃toInt r.HttpStatus
datalen←⊃toInt{0∊⍴⍵:'¯1' ⋄ ⍵}r.GetHeader'Content-Length' ⍝ ¯1 if no content length not specified
→(datalen≠0)↓∆END,∆LISTEN
:EndIf
:EndIf
⍝ if secure, upgrade to SSL
:If proxied∧secure
cert←1 2⊃secureParams
:AndIf 0≠err←⊃rc←LDRC.SetProp Client'StartTLS'(cert.AsArg,('SSLValidation' 0)('Address'host))
→∆END⊣r.(rc msg)←err('Proxy failed to upgrade to secure connection: ',∊⍕1↓rc)
:EndIf
:EndIf
:If CongaVersion(~atLeast)3 3
:AndIf 0≠err←⊃rc←LDRC.SetProp Client'DecodeBuffers' 15 ⍝ set to decode HTTP messages
→∆END⊣r.(rc msg)←err('Could not set DecodeBuffers on Conga client "',Client,'": ',,⍕1↓rc)
:EndIf
:EndIf
(ConxProps←⎕NS'').(Host Port Secure certs)←r.(Host Port Secure),⊂certs ⍝ preserve connection settings for subsequent calls
:If 0=⊃rc←LDRC.Send Client(cmd(path,(0∊⍴urlparms)↓'?',urlparms)'HTTP/1.1'(environment hdrs)parms)
∆LISTEN:
forceClose←~KeepAlive
(timedOut done data progress noContentLength connectionClose)←0 0 ⍬ 0 0 0
:Trap 1000 ⍝ in case break is pressed while listening
:While ~done
:If ~done←0≠err←1⊃rc←LDRC.Wait Client WaitTime
(err obj evt dat)←4↑rc
:Select evt
:Case 'HTTPHeader'
:If 1=≡dat
→∆END⊣r.(rc Data msg)←¯1 dat'Conga failed to parse the response HTTP header' ⍝ HTTP header parsing failed?
:Else
r.(HttpVersion HttpStatus HttpMessage Headers)←4↑dat
r.HttpStatus←toInt r.HttpStatus
redirected←3=⌊0.01×r.HttpStatus
datalen←⊃toInt{0∊⍴⍵:'¯1' ⋄ ⍵}r.GetHeader'Content-Length' ⍝ ¯1 if no content length not specified
connectionClose←'close'≡lc r.GetHeader'Connection'
noContentLength←datalen=¯1
done←(cmd≡'HEAD')∨(0=datalen)∨204=r.HttpStatus
→∆END⍴⍨forceClose←r CheckPayloadSize datalen             ⍝ we have a payload size limit
:EndIf
:Case 'HTTPBody'
→∆END⍴⍨forceClose←r CheckPayloadSize(≢data)+≢dat
:If toFile>redirected ⍝ don't write redirect response payload to file
→∆END⍴⍨forceClose←r CheckPayloadSize(⎕NSIZE tmpTn)+≢dat
dat ⎕NAPPEND tmpTn
⎕NUNTIE ⍬
:Else
data,←dat
:EndIf
done←~noContentLength ⍝ if not content-length specified and not chunked - keep listening
:Case 'HTTPChunk'
:If 1=≡dat
→∆END⊣r.(Data msg)←dat'Conga failed to parse the response HTTP chunk' ⍝ HTTP chunk parsing failed?
:ElseIf toFile>redirected ⍝ don't write redirect response payload to file
→∆END⍴⍨forceClose←r CheckPayloadSize(⎕NSIZE tmpTn)+≢1⊃dat
(1⊃dat)⎕NAPPEND tmpTn
⎕NUNTIE ⍬
:Else
→∆END⍴⍨forceClose←r CheckPayloadSize(≢data)+≢1⊃dat
data,←1⊃dat
:EndIf
:Case 'HTTPTrailer'
:If 2≠≢⍴dat
→∆END⊣r.(Data msg)←dat'Conga failed to parse the response HTTP trailer' ⍝ HTTP trailer parsing failed?
:Else
r.Headers⍪←dat ⋄ done←1
:EndIf
:Case 'HTTPFail'
data,←dat
r.Data←data
r.msg←'Conga could not parse the HTTP reponse'
→∆END
:Case 'HTTPError'
data,←dat
r.Data←data
:If noContentLength∧connectionClose
r.(rc msg)←0 ''
done←1
:Else
rc.msg←'Response payload not completely received'
→∆END
:EndIf
:Case 'BlockLast' ⍝ BlockLast included for pre-Conga v3.4 compatibility for RFC7230 (Sec 3.3.3 item 7)
→∆END⍴⍨forceClose←r CheckPayloadSize(≢data)+≢dat
:If toFile<redirected
→∆END⍴⍨forceClose←r CheckPayloadSize(⎕NSIZE tmpTn)+≢dat
dat ⎕NAPPEND tmpTn
⎕NUNTIE ⍬
:Else
data,←dat
:EndIf
done←1
:Case 'Timeout'
timedOut←⊃(done donetime progress)←Client checkTimeOut donetime progress
:Case 'Error'
:Select ⊃r.rc←4⊃rc
:Case 1135
r.msg←'Response header size exceeds BufferSize (',(⍕BufferSize),')'
:Else
r.msg←'Conga error processing your request: ',,⍕r.rc
:EndSelect
→∆END⊣forceClose←1
:Case 'Closed'
r.msg←'Socket closed by server'
done←forceClose←1
:If 0∊⍴r.HttpStatus
→∆END⊣r.rc←4⊃rc ⍝ set return code if closed before receiving HTTPHeader event
:EndIf
:Else
→∆END⊣r.msg←'Unhandled Conga event type: ',evt ⍝ This shouldn't happen
:EndSelect
:Else
r.msg←'Conga wait error ',,⍕rc ⍝ some other error (very unlikely)
:EndIf
:EndWhile
:EndTrap
r.Elapsed←⎕AI[3]-starttime
:If timedOut
forceClose←1
r.(rc msg)←100 'Request timed out before server responded'
r.Data←data ⍝ return any partial payload
→∆END
:EndIf
forceClose∨←connectionClose ⍝ if there's a 'Connection: close' header
:If 0=err
ct←lc r.GetHeader'content-type'
isutf8←0<≢'charset\s*=\s*utf-8'⎕S'&'⍠1⊢ct←lc r.GetHeader'content-type'
isutf8∨←(∨/'application/json'⍷ct)∧~∨/'charset'⍷ct ⍝ application/json defaults to UTF-8 unless other charset specified
encoding←lc r.GetHeader'content-encoding' ⍝ response payload compressed?
compType←¯2 ¯3 0['deflate' 'gzip'⍳⊂encoding]
:If toFile≤redirected
:Trap Debug↓0 ⍝ If any errors occur, abandon conversion
:If ~0∊⍴data
:If ~0∊⍴encoding
:If 0≠compType
data←256|compType Zipper 83 ⎕DR data ⍝ unzip
data←⎕UCS data ⍝ try to translate
:Else
r.msg←'Unhandled content-encoding: ',compType,', could not decode response payload'
:EndIf
:EndIf
:EndIf
:If isutf8
data←'UTF-8'⎕UCS ⎕UCS data
data←(65279=⎕UCS⊃data)↓data ⍝ drop off BOM, if any
:EndIf
:Else
r.rc←⎕DMX.EN
r.msg←⎕DMX.EM,' occurred during response payload conversion (Data was not converted)'
r.Data←data
→∆END
:EndTrap
:If TranslateData=1
:If ∨/∊'text/xml' 'application/xml'⍷¨⊂ct
r{0::⍺.(rc Data msg)←¯2 ⍵'Could not translate XML payload' ⋄ ⍺.Data←⎕XML ⍵}data
:ElseIf ∨/'application/json'⍷ct
r.Data←data
JSONimport r
:Else
r.Data←data
:EndIf
:Else
r.Data←data
:EndIf
:Else ⍝ toFile and not redirected
:If ~0∊⍴encoding ⍝ content-encoding header?
:If 0≠compType
:If 0≠z←compType UnzipFile tmpTn
r.msg←(⎕EM z),' occurred when attempting to decompress response payload'
:EndIf
:Else
r.msg←'Unhandled content-encoding: ',compType,', could not decode response payload'
:EndIf
:EndIf
r.BytesWritten←⎕NSIZE tmpTn
(⎕NREAD tmpTn,83,(r.BytesWritten),0)⎕NAPPEND outTn
:EndIf ⍝ ~toFile
r.Cookies←parseCookies r.Headers r.Host(extractPath r.Path)
Cookies←Cookies updateCookies r.Cookies
:If (r.HttpStatus∊301 302 303 307 308)>0=MaxRedirections ⍝ if redirected and allowing redirections
:If MaxRedirections<.=¯1,≢r.Redirections ⋄ →∆END⊣r.(rc msg)←¯1('Too many redirections (',(⍕MaxRedirections),')')
:Else
:If ''≢url←r.GetHeader'location' ⍝ if we were redirected use the "location" header field for the URL
:If '/'=⊃url ⋄ url,⍨←host ⋄ :EndIf ⍝ if a relative redirection, use the current host
r.Redirections,←t←#.⎕NS''
t.(URL HttpVersion HttpStatus HttpMessage Headers Data)←r.(URL HttpVersion HttpStatus HttpMessage Headers Data)
{}LDRC.Close Client
cmd←(1+303=r.HttpStatus)⊃cmd'GET' ⍝ 303 (See Other) is always followed by a 'GET'. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/303
→∆GET
:Else
r.msg←'Redirection detected, but no "location" header supplied.' ⍝ should never happen from a properly functioning server
:EndIf
:EndIf
:EndIf
:If secure
:AndIf 0=⊃z←LDRC.GetProp Client'PeerCert'
r.PeerCert←2⊃z
:EndIf
:EndIf
:Else
:If 1081=⊃rc ⍝ 1081 could be due to an error in Conga that fails on long URLs, so try sending request as a character vector
:If 0=⊃rc←LDRC.Send Client(cmd,' ',(path,(0∊⍴urlparms)↓'?',urlparms),' HTTP/1.1',NL,(∊': 'NL,⍨¨⍤1⊢hdrs),NL,parms)
→∆LISTEN
:EndIf
:EndIf
r.msg←'Conga error while attempting to send request: ',,⍕1↓rc
:EndIf
r.rc←1⊃rc ⍝ set the return code to the Conga return code
∆END:
⎕NUNTIE tmpTn,outTn
{0:: ⋄ ⎕NDELETE ⍵}tmpFile
Client←{0::'' ⋄ KeepAlive>forceClose:⍵ ⋄ ''⊣LDRC.Close ⍵}Client
∆EXIT:
∇
∇ r←size Chunk payload;l;n;last;lens;hlens;mask
:Access public shared
⍝ Split payload into chunks for chunked transfer-encoding
l←≢payload ⍝ payload length
n←⌊l÷size  ⍝ number of whole chunk
last←l-n×size ⍝ size of last chunk
lens←(n⍴size),last,(last≠0)/0 ⍝ chunk lengths + 0 for terminating chunk
hlens←d2h¨lens ⍝ hex lengths
mask←0 1 0(⊢⊢⍤/(⍴⊢)⍴⊣),(2+≢¨hlens),lens,[1.1]2 ⍝ expansion mask
r←mask\payload ⍝ expand payload
r[⍸~mask]←2⌽∊NL∘,¨hlens,¨⊂NL ⍝ insert chunk information
∇
∇ rc←r CheckPayloadSize size
⍝ checks if payload exceeds MaxPayloadSize
rc←0
:If MaxPayloadSize≠¯1
:AndIf size>MaxPayloadSize
r.(rc msg)←¯1 'Payload length exceeds MaxPayloadSize'
rc←1
:EndIf
∇
∇ (timedOut donetime progress)←obj checkTimeOut(donetime progress);tmp;snap
⍝ check if request has timed out
→∆EXIT↓⍨timedOut←⎕AI[3]>donetime ⍝ exit unless donetime hasn't passed
→∆EXIT↓⍨Timeout<0                ⍝ if Timeout<0, reset donetime if there's progress
→∆EXIT↓⍨0=⊃tmp←LDRC.Tree obj     ⍝ look at the current state of the connection
snap←2 2⊃tmp                     ⍝ second element shoulf contain the state
:If ~0∊⍴snap                     ⍝ if we have any...
snap←(⊂∘⍋⌷⊢)↑(↑2 2⊃tmp)[;1]  ⍝ ...progress should be in elements [4 5]
:EndIf
→∆EXIT⍴⍨progress≡snap            ⍝ exit if nothing further received
(timedOut donetime progress)←0(donetime+WaitTime)snap ⍝ reset ticker
∆EXIT:
∇
∇ {r}←type UnzipFile tn;data
:Access public shared
⍝ Unzip an output file
⍝ type is compression type: ¯2 for gzip, ¯3 for deflate
⍝ tn is the tie number of the file to unzip
⍝ r is 0 for success or ⎕EN
:Trap 0
data←⎕NREAD tn 83,(⎕NSIZE tn),0
data←⎕UCS 256|type Zipper data
0 ⎕NRESIZE tn
data ⎕NAPPEND tn
⎕NUNTIE ⍬
r←0
:Else
r←⎕EN
:EndTrap
∇
∇ (payload msg)←boundary multipart parms;name;value;filename;contentType;content
⍝ format multipart/form-data payload
⍝ parms is a namespace with named objects
⍝
msg←payload←''
:For name :In parms.⎕NL ¯2
payload,←'--',boundary
(value contentType)←2↑(⊆parms⍎name),⊂''
payload,←NL,'Content-Disposition: form-data; name="',name,'"'
:If ~0∊⍴contentType
payload,←NL,'Content-Type: ',contentType
:EndIf
:If '@<'∊⍨⊃value
:If ⎕NEXISTS 1↓value
:AndIf 2=1 ⎕NINFO 1↓value
payload,←('@'=⊃value)/'; filename="',(∊¯2↑1 ⎕NPARTS value),'"'
(contentType content)←contentType readFile 1↓value
payload,←NL,'Content-Type: ',contentType,NL,NL
payload,←content,NL
:Else
→0⊣msg←'File not found: "',(1↓value),'"'
:EndIf
:Else
payload,←NL,NL,(∊⍕value),NL
:EndIf
:EndFor
payload,←'--',boundary,'--'
∇
∇ (contentType content)←contentType readFile filename;ext;tn
⍝ return file content in a manner consistent with multipart/form-data
:Access public shared
:If 0∊⍴contentType
ext←⎕C 3⊃1 ⎕NPARTS filename
:If ext≡'.txt' ⋄ contentType←'text/plain'
:Else ⋄ contentType←'application/octet-stream'
:EndIf
:EndIf
tn←filename ⎕NTIE 0
content←⎕NREAD tn,(⎕DR''),¯1
⎕NUNTIE tn
∇
NL←⎕UCS 13 10
toChar←{(⎕DR'')⎕DR ⍵}
fromutf8←{0::(⎕AV,'?')[⎕AVU⍳⍵] ⋄ 'UTF-8'⎕UCS ⍵} ⍝ Turn raw UTF-8 input into text
utf8←{3=10|⎕DR ⍵: 256|⍵ ⋄ 'UTF-8' ⎕UCS ⍵}
sint←{⎕IO←0 ⋄ 83=⎕DR ⍵:⍵ ⋄ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 ¯128 ¯127 ¯126 ¯125 ¯124 ¯123 ¯122 ¯121 ¯120 ¯119 ¯118 ¯117 ¯116 ¯115 ¯114 ¯113 ¯112 ¯111 ¯110 ¯109 ¯108 ¯107 ¯106 ¯105 ¯104 ¯103 ¯102 ¯101 ¯100 ¯99 ¯98 ¯97 ¯96 ¯95 ¯94 ¯93 ¯92 ¯91 ¯90 ¯89 ¯88 ¯87 ¯86 ¯85 ¯84 ¯83 ¯82 ¯81 ¯80 ¯79 ¯78 ¯77 ¯76 ¯75 ¯74 ¯73 ¯72 ¯71 ¯70 ¯69 ¯68 ¯67 ¯66 ¯65 ¯64 ¯63 ¯62 ¯61 ¯60 ¯59 ¯58 ¯57 ¯56 ¯55 ¯54 ¯53 ¯52 ¯51 ¯50 ¯49 ¯48 ¯47 ¯46 ¯45 ¯44 ¯43 ¯42 ¯41 ¯40 ¯39 ¯38 ¯37 ¯36 ¯35 ¯34 ¯33 ¯32 ¯31 ¯30 ¯29 ¯28 ¯27 ¯26 ¯25 ¯24 ¯23 ¯22 ¯21 ¯20 ¯19 ¯18 ¯17 ¯16 ¯15 ¯14 ¯13 ¯12 ¯11 ¯10 ¯9 ¯8 ¯7 ¯6 ¯5 ¯4 ¯3 ¯2 ¯1[utf8 ⍵]}
lc←{2::0(819⌶)⍵ ⋄ ¯3 ⎕C ⍵} ⍝ lower case conversion
uc←{2::1(819⌶)⍵ ⋄ 1 ⎕C ⍵}  ⍝ upper case conversion
ci←{(lc ⍺)⍺⍺ lc ⍵} ⍝ case insensitive operator
deb←' '∘(1↓,(/⍨)1(⊢∨⌽)0,≠) ⍝ delete extraneous blanks
dlb←{(+/∧\' '=⍵)↓⍵} ⍝ delete leading blanks
dltb←{(⌽dlb)⍣2⊢⍵} ⍝ delete leading and trailing blanks
iotaz←((≢⊣)(≥×⊢)⍳)
nameClass←{⎕NC⊂,'⍵'} ⍝ name class of argument
splitOnFirst←{(⍺↑⍨¯1+p)(⍺↓⍨p←⌊/⍺⍳⍵)} ⍝ split ⍺ on first occurrence of ⍵ (removing first ⍵)
splitOn←≠⊆⊣ ⍝ split ⍺ on all ⍵ (removing ⍵)
h2d←{⎕IO←0 ⋄ 16⊥'0123456789abcdef'⍳lc ⍵} ⍝ hex to decimal
d2h←{⎕IO←0 ⋄ '0123456789ABCDEF'[((1∘⌈≢)↑⊢)16(⊥⍣¯1)⍵]} ⍝ decimal to hex
getchunklen←{¯1=len←¯1+⊃(NL⍷⍵)/⍳⍴⍵:¯1 ¯1 ⋄ chunklen←h2d len↑⍵ ⋄ (⍴⍵)<len+chunklen+4:¯1 ¯1 ⋄ len chunklen}
toInt←{0∊⍴⍵:⍬ ⋄ ~3 5∊⍨10|⎕DR t←1⊃2⊃⎕VFI ⍕⍵:⍬ ⋄ t≠⌊t:⍬ ⋄ t} ⍝ simple char to int
fmtHeaders←{0∊⍴⍵:'' ⋄ (firstCaps¨⍵[;1])(,∘⍕¨⍵[;2])} ⍝ formatted HTTP headers
firstCaps←{1↓uc@(¯1↓0,'-'∘=)lc '-',⍵} ⍝ capitalize first letters e.g. Content-Encoding
getHeader←{⍺{1<|≡⍵:⍺∘∇¨⍵ ⋄ (⍺[;2],⊂'∘???∘')⊃⍨⍺[;1](⍳{(⍵⍵ ⍺)⍺⍺(⍵⍵ ⍵)}lc)⊆,⍵}⍵} ⍝ return header value(s) or '∘???∘' if not found
tableGet←{⍺[;2]/⍨⍺[;1](≡ ci)¨⊂⍵}
endsWith←{∧/⍵=⍺↑⍨-≢⍵}
beginsWith←{∧/⍵=⍺↑⍨≢⍵}
extractPath←{⍵↑⍨1⌈¯1+⊢/⍸'/'=⍵}∘,
isChar←{1≥|≡⍵:0 2∊⍨10|⎕DR {⊃⍣(0∊⍴⍵)⊢⍵}⍵ ⋄ ∧/∇¨⍵}
isSimpleChar←{1≥|≡⍵: isChar ⍵ ⋄ 0}
isNum←{1 3 5 7∊⍨10|⎕DR ⍵}
over←{(⍵⍵ ⍺)⍺⍺(⍵⍵ ⍵)}
isJSON←{~0 2∊⍨10|⎕DR ⍵:0 ⋄ ~(⊃⍵)∊'-{["',⎕D:0 ⋄ {0::0 ⋄1⊣0 ⎕JSON ⍵}⍵} ⍝ test for JSONableness fails on APL that looks like JSON (e.g. '"abc"')
stopIf←{1∊⍵:-⎕TRAP←0 'C' '⎕←''Stopped for debugging... (Press Ctrl-Enter)''' ⋄ shy←0} ⍝ faster alternative to setting ⎕STOP
seconds←{⍵÷86400} ⍝ convert seconds to fractional day (for cookie max-age)
atLeast←{a←(≢⍵)↑⍺ ⋄ ⊃((~∧\⍵=a)/a>⍵),1} ⍝ checks if ⍺ is at least version ⍵
Zipper←219⌶
tempFolder←739⌶0
makeURL←{ ⍝ build URL from BaseURL (⍺) and URL (⍵)
~0∊⍴'^https?\:\/\/'⎕S 3⍠('IC' 1)⊢⍵:⍵  ⍝ URL begins with http:// or https://
0∊⍴⍺:⍵        ⍝ no BaseURL
t←'/'=⊃⍵      ⍝ URL begins with '/'?
'/'=⊃⌽⍺:⍺,t↓⍵ ⍝ BaseURL ends with '/'
⍺,t↓'/',⍵     ⍝ insert '/' if not already there
}
∇ r←makeHeaders w
r←{
0::¯1            ⍝ any error
¯1∊⍵:⍵
0∊⍴⍵:0 2⍴⊂''     ⍝ empty
1≥|≡⍵:∇{         ⍝ simple array
2=⍴⍵:1⊂⍵     ⍝ degenerate case of scalar name and value ('n' 'v' ≡ 'nv')
dlb¨¨((,⍵)((~∊)⊆⊣)NL)splitOnFirst¨':'
}⍵
2=⍴⍴⍵:{          ⍝ matrix
0∊≢¨⍵[;1]:¯1 ⍝ no empty names
0 1 1/0,,¨⍵  ⍝ ensure it's 2 columns
}⍵
3=|≡⍵:∇{         ⍝ depth 3
2|≢⊃,/⍵:¯1   ⍝ ensure an even number of element
↑⍵
}(eis,)¨⍵
2=|≡⍵:∇{
∧/':'∊¨⍵:⍵ splitOnFirst¨':'
((0.5×⍴⍵),2)⍴⍵
}⍵
¯1
}w
'Invalid Headers format'⎕SIGNAL 7/⍨r≡¯1
∇
∇ r←JSONexport data
:Trap 11
r←SafeJSON 1(3⊃⎕RSI,##).⎕JSON data ⍝ attempt to export
:Else
r←SafeJSON 1(3⊃⎕RSI,##).⎕JSON⍠'HighRank' 'Split'⊢data ⍝ Dyalog v18.0 and later
:EndTrap
∇
JSONimport←{
0::⍵.(rc msg)←¯2 'Could not translate JSON payload'
11::⍵.Data←0(3⊃⎕RSI,##).⎕JSON ⍵.Data
⍵.Data←0(3⊃⎕RSI,##).⎕JSON⍠'Dialect' 'JSON5'⊢⍵.Data}
∇ r←GetEnv var
⍝ return enviroment variable setting for var
:Access public shared
r←2 ⎕NQ'.' 'GetEnvironment'var
∇
∇ r←dyalogRoot
⍝ return path to interpreter
r←{⍵,('/\'∊⍨⊢/⍵)↓'/'}{0∊⍴t←GetEnv'DYALOG':⊃1 ⎕NPARTS⊃2 ⎕NQ'.' 'GetCommandLineArgs' ⋄ t}''
∇
∇ ns←{ConxProps}ConnectionProperties url;p;defaultPort;ind;msg;protocol;secure;auth;host;port;path;urlparms
:If 0=⎕NC'ConxProps' ⋄ ConxProps←'' ⋄ :EndIf
ns←⎕NS''
msg←''
(protocol secure host path urlparms)←ConxProps parseURL url
:If ~(⊂protocol)∊'' 'http:' 'https:'
→∆END⊣msg←'Invalid protocol: ',¯1↓protocol
:EndIf
auth←''
:If 0≠p←¯1↑⍸host='@' ⍝ Handle user:password@host...
auth←('Basic ',(Base64Encode(p-1)↑host))
host←p↓host
:EndIf
⍝ This next section is a chicken and egg scenario trying to figure out
⍝ whether to use HTTPS as well as what port to use
:If defaultPort←(≢host)<ind←host⍳':' ⍝ then if there's no port specified in the host
port←(1+secure)⊃80 443 ⍝ use the default HTTP/HTTPS port
:Else
:If 0=port←⊃toInt ind↓host
→∆END⊣msg←'Invalid host/port: ',host
:EndIf
host↑⍨←ind-1
:EndIf
:If 0∊⍴host
→∆END⊣msg←'No host specified'
:EndIf
:If ~(port>0)∧(port≤65535)∧port=⌊port
→∆END⊣msg←'Invalid port: ',⍕port
:EndIf
secure∨←(0∊⍴protocol)∧port=443 ⍝ if just port 443 was specified, without any protocol, use SSL
:If defaultPort∧secure
port←443
:EndIf
ns.(protocol secure auth host port path urlparms defaultPort)←protocol secure auth host port path urlparms defaultPort
∆END:
ns.msg←msg
∇
∇ (protocol secure host path urlparms)←{conx}parseURL url;path;p;ind
⍝ Parses a URL and returns
⍝   secure - Boolean whether running HTTPS or not based on leading http://
⍝   host - domain or IP address
⍝   path - path on the host for the requested resource, if any
⍝   urlparms - URL query string, if any
:If 0=⎕NC'conx' ⋄ conx←'' ⋄ :EndIf
(url urlparms)←2↑(url splitOnFirst'?'),⊂''
p←⍬⍴2+⍸<\'://'⍷url
protocol←lc(0⌈p-2)↑url
secure←protocol beginsWith'https:'
url←p↓url                          ⍝ Remove HTTP[s]:// if present
(host path)←url splitOnFirst'/'    ⍝ Extract host and path from url
ind←host iotaz'@'                  ⍝ any credentials?
host←(ind↑host),lc ind↓host        ⍝ host (domain) is case-insensitive (credentials are not)
:If ~0∊⍴conx ⍝ if we have an existing connection
:AndIf 0∊⍴protocol ⍝ and no protocol was specified
secure←(conx.Host≡host)∧conx.Secure ⍝ use the protocol from the existing connection
:EndIf
path←'/',∊(⊂'%20')@(=∘' ')⊢path    ⍝ convert spaces in path name to %20
∇
∇ r←parseHttpDate date;d
⍝ Parses a RFC 7231 format date (Ddd, DD Mmm YYYY hh:mm:ss GMT)
⍝ returns Extended IDN format
⍝ this function does almost no validation of its input, we expect a properly formatted date
⍝ ill-formatted dates return ⍬
:Trap 0
d←{⍵⊆⍨⍵∊⎕A,⎕D}uc date
r←1 0 1 1 1 1\toInt¨d[4 2 5 6 7]
r[2]←(3⊃d)⍳⍨12 3⍴'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'
r←TStoIDN r
:Else
r←⍬
:EndTrap
∇
∇ idn←TStoIDN ts
⍝ Convert timestamp to extended IDN format
:Trap 2 11 ⍝ syntax error if pre-v18.0, domain error if
idn←¯1 1 ⎕DT⊂ts
:Else
idn←(2 ⎕NQ'.' 'DateToIDN'(3↑ts))+(24 60 60 1000⊥4↑3↓ts)÷86400000
:EndTrap
∇
∇ ts←IDNtoTS idn
⍝ Convert extended IDN to timestamp
:Trap 2 ⍝ syntax error if pre-v18.0
ts←⊃1 ¯1 ⎕DT idn
:Else
ts←3↑2 ⎕NQ'.' 'IDNToDate'(⌊idn)
ts,←⌊0.5+24 60 60 1000⊤86400000×1|⍬⍴idn
:EndTrap
∇
∇ idn←Now
⍝ Return extended IDN for current time
idn←TStoIDN ⎕TS
∇
∇ cookies←parseCookies(headers host path);cookie;segs;setcookie;seg;value;name;domain
⍝ Parses set-cookie headers into cookie array
⍝ Attempts to follow RFC6265 https://datatracker.ietf.org/doc/html/rfc6265
cookies←⍬
:For setcookie :In headers tableGet'set-cookie'
segs←dltb¨¨2↑¨'='splitOnFirst⍨¨dltb¨setcookie splitOn';'
(cookie←#.⎕NS'').(Name Value Host Domain Path HttpOnly Secure Expires SameSite Creation Other)←'' ''host'' '/' 0 0 '' ''Now''
→∆NEXT⍴⍨0∊≢¨cookie.(Name Value)←⊃segs
segs←1↓segs
segs/⍨←⌽(⍳∘≢=⍳⍨)⌽lc⊃¨segs ⍝ select the last occurence of each attribute
:For name value :In segs
:Select lc name
:Case 'expires'
:If ''≡cookie.Expires ⍝ if Expires was set already from MaxAge, MaxAge takes precedence
→∆NEXT⍴⍨0∊⍴cookie.Expires←parseHttpDate value ⍝ ignore cookies with invalid expires dates
:EndIf
:Case 'max-age' ⍝ specifies number of seconds after which cookie expires
cookie.Expires←Now+seconds toInt value
:Case 'domain' ⍝ RCF 6265 Sec. 5.2.3
→∆NEXT⍴⍨0∊⍴domain←lc value ⍝ cookies with empty domain values are ignored
:If domain≡host
domain←host
:ElseIf host endsWith domain←('.'=⊃domain)↓'.',domain
cookie.Domain←domain
:Else ⋄ →∆NEXT
:EndIf
:Case 'path' ⍝ RCF 6265 Sec. 5.2.4
:If '/'=⊃value ⋄ cookie.Path←value ⋄ :EndIf
:Case 'secure' ⋄ cookie.Secure←1
:Case 'httponly' ⋄ cookie.HttpOnly←1
:Case 'samesite' ⋄ cookie.SameSite←value
:Else ⋄ cookie.Other,←⊂dltb¨name value ⍝ catch all in case something else was sent with cookie
:EndSelect
:EndFor
cookies,←cookie
∆NEXT:
:EndFor
∇
NotExpired←{
0∊⍴⍵.Expires:1
Now≤⍵.Expires
}
domainMatch←{
⍝ ⍺ - host, ⍵ - cookie.(domain host)
dom←(1+0∊⍴1⊃⍵)⊃⍵
⍺≡dom:1
(⍺ endsWith dom)∧'.'=⊃dom
}
pathMatch←{
⍝ ⍺ - requested path, ⍵ - cookie path
⍺ beginsWith ⍵
}
∇ cookies←cookies updateCookies new;cookie;ind
⍝ update internal cookies based on result of ParseCookies
:If 0∊⍴cookies
cookies←new
:Else
:For cookie :In new
:If 0≠ind←cookies.Name iotaz⊂cookie.Name
:If 0∊⍴cookie.Value ⍝ deleted cookie?
cookie←(ind≠⍳≢cookies)/cookies
:Else
cookies[ind]←cookie
:EndIf
:Else
cookies,←cookie
:EndIf
:EndFor
:EndIf
:If ~0∊⍴cookies
cookies/⍨←NotExpired¨cookies ⍝ remove any expired cookies
:EndIf
∇
∇ r←state applyCookies cookies;mask
⍝ return which cookies to send based on current request and
r←⍬
→0⍴⍨0∊⍴mask←1⍴⍨≢cookies ⍝ exit if no cookies
→0↓⍨∨/mask∧←cookies.Secure≤state.Secure ⍝ HTTPS only filter
→0↓⍨∨/mask←mask\state.Host∘domainMatch¨mask/cookies.(Domain Host)
→0↓⍨∨/mask←mask\state.Path∘pathMatch¨mask/cookies.Path
→0↓⍨∨/mask←mask\NotExpired¨mask/cookies
r←mask/cookies
∇
∇ r←formatCookies cookies
r←2↓∊cookies.('; ',Name,'=',Value)
∇
∇ {r}←name AddHeader value;hdrs
⍝ add a header unless it's already defined
:Access public
:Trap 7
r←Headers←name(Headers addHeader)value
:Else
⎕EM ⎕SIGNAL ⎕EN
:EndTrap
∇
∇ hdrs←name(hdrs addHeader)value
⍝ add a header unless it's already defined
hdrs←makeHeaders hdrs
hdrs⍪←('∘???∘'≡hdrs getHeader name)⌿⍉⍪name value
∇
∇ {r}←name SetHeader value;ind
⍝ set a header value, overwriting any existing one
:Access public
:Trap 7
r←Headers←name(Headers setHeader)value
:Else
⎕EM ⎕SIGNAL ⎕EN
:EndTrap
∇
∇ hdrs←name(hdrs setHeader)value;ind
hdrs←makeHeaders hdrs
ind←hdrs[;1](⍳ci)eis name
hdrs↑⍨←ind⌈≢hdrs
hdrs[ind;]←name(⍕value)
∇
∇ {r}←RemoveHeader name
⍝ remove a header
:Access public
:Trap 7
Headers←makeHeaders Headers
:Else
⎕EM ⎕SIGNAL ⎕EN
:EndTrap
Headers⌿⍨←Headers[;1](≢¨ci)eis name
r←Headers
∇
∇ hdrs←environment hdrs;beg;end;escape;hits;regex
⍝ substitute any header names or values that begin with '$env:' with the named environment variable
:If ~0∊⍴HeaderSubstitution
(beg end)←2⍴HeaderSubstitution
escape←'.^$*+?()[]{\|-'∘{m←∊(1+⍺∊⍨t←⌽⍵)↑¨1 ⋄ t←m\t ⋄ t[⍸~m]←'\' ⋄ ⌽t} ⍝ chars that need escaping in regex
regex←(escape beg),'[[:alpha:]].*?',escape end
hdrs←(⍴hdrs)⍴regex ⎕R{0∊⍴e←GetEnv(≢beg)↓(-≢end)↓⍵.Match:⍵.Match ⋄ e}⊢,hdrs
:EndIf
∇
∇ hdrs←privatize hdrs
⍝ suppress displaying Authorization header value if Private=1
:If Secret
hdrs[⍸hdrs[;1](∊ci)'Authorization' 'Proxy-Authorization';2]←⊂'>>> Secret setting is 1 <<<'
:EndIf
∇
∇ r←{a}eis w;f
⍝ enclose if simple
f←{⍺←1 ⋄ ,(⊂⍣(⍺=|≡⍵))⍵}
:If 0=⎕NC'a' ⋄ r←f w
:Else ⋄ r←a f w
:EndIf
∇
base64←{(⎕IO ⎕ML)←0 1            ⍝ from dfns workspace - Base64 encoding and decoding as used in MIME.
chars←'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
bits←{,⍉(⍺⍴2)⊤⍵}             ⍝ encode each element of ⍵ in ⍺ bits, and catenate them all together
part←{((⍴⍵)⍴⍺↑1)⊂⍵}          ⍝ partition ⍵ into chunks of length ⍺
0=2|⎕DR ⍵:2∘⊥∘(8∘↑)¨8 part{(-8|⍴⍵)↓⍵}6 bits{(⍵≠64)/⍵}chars⍳⍵  ⍝ decode a string into octets
four←{                       ⍝ use 4 characters to encode either
8=⍴⍵:'=='∇ ⍵,0 0 0 0     ⍝   1,
16=⍴⍵:'='∇ ⍵,0 0         ⍝   2
chars[2∘⊥¨6 part ⍵],⍺    ⍝   or 3 octets of input
}
cats←⊃∘(,/)∘((⊂'')∘,)        ⍝ catenate zero or more strings
cats''∘four¨24 part 8 bits ⍵
}
∇ r←{cpo}Base64Encode w
⍝ Base64 Encode
⍝ Optional cpo (code points only) suppresses UTF-8 translation
⍝ if w is integer skip any conversion
:Access public shared
:If (⎕DR w)∊83 163 ⋄ r←base64 w
:ElseIf 0=⎕NC'cpo' ⋄ r←base64'UTF-8'⎕UCS w
:Else ⋄ r←base64 ⎕UCS w
:EndIf
∇
∇ r←{cpo}Base64Decode w
⍝ Base64 Decode
⍝ Optional cpo (code points only) suppresses UTF-8 translation
:Access public shared
:If 0=⎕NC'cpo' ⋄ r←'UTF-8'⎕UCS base64 w
:Else ⋄ r←⎕UCS base64 w
:EndIf
∇
∇ r←DecodeHeader buf;len;d
⍝ Decode HTTP Header
r←0(0 2⍴⊂'')
:If 0<len←¯1+⊃{((NL,NL)⍷⍵)/⍳⍴⍵}buf
d←(⍴NL)↓¨{(NL⍷⍵)⊂⍵}NL,len↑buf
d←↑{((p-1)↑⍵)((p←⍵⍳':')↓⍵)}¨d
d[;1]←lc¨d[;1]
d[;2]←dlb¨d[;2]
r←(len+4)d
:EndIf
∇
∇ r←{name}UrlEncode data;⎕IO;format;noname;xlate;hex
⍝ data is one of:
⍝      - a simple character vector (no name supplied)
⍝      - an even number of name/data character vectors
⍝       'name' 'fred' 'type' 'student' > 'name=fred&type=student'
⍝      - a namespace containing variable(s) to be encoded
⍝ r    is a character vector of the URLEncoded data
:Access Public Shared
⎕IO←0
format←{
1=≡⍵:⍺(,⍕⍵)
↑⍺∘{⍺(,⍕⍵)}¨⍵
}
:If 0=⎕NC'name' ⋄ name←'' ⋄ :EndIf
noname←0
:If 9.1=⎕NC⊂'data'
data←⊃⍪/{0∊⍴t←⍵.⎕NL ¯2:'' ⋄ ⍵{⍵ format ⍺⍎⍵}¨t}data
:Else
:Select |≡data
:CaseList 0 1
:If 1≥|≡data
noname←0∊⍴name
data←name(,data)
:EndIf
:Case 3 ⍝ nested name/value pairs (('abc' '123')('def' '789'))
data←⊃,/data
:EndSelect
:EndIf
hex←'%',¨,∘.,⍨⎕D,6↑⎕A
xlate←{
i←⍸~⍵∊'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~*'
0∊⍴i:⍵
∊({⊂∊hex['UTF-8'⎕UCS ⍵]}¨⍵[i])@i⊢⍵
}
data←xlate∘⍕¨data
r←noname↓¯1↓∊data,¨(⍴data)⍴'=&'
∇
∇ r←UrlDecode r;rgx;rgxu;i;j;z;t;m;⎕IO;lens;fill
:Access public shared
⎕IO←0
((r='+')/r)←' '
rgx←'[0-9a-fA-F]'
rgxu←'%[uU]',(4×⍴rgx)⍴rgx ⍝ 4 characters
r←(rgxu ⎕R{{⎕UCS 16⊥⍉16|'0123456789ABCDEF0123456789abcdef'⍳⍵}2↓⍵.Match})r
:If 0≠⍴i←(r='%')/⍳⍴r
:AndIf 0≠⍴i←(i≤¯2+⍴r)/i
z←r[j←i∘.+1 2]
t←'UTF-8'⎕UCS 16⊥⍉16|'0123456789ABCDEF0123456789abcdef'⍳z
lens←⊃∘⍴¨'UTF-8'∘⎕UCS¨t  ⍝ UTF-8 is variable length encoding
fill←i[¯1↓+\0,lens]
r[fill]←t
m←(⍴r)⍴1 ⋄ m[(,j),i~fill]←0
r←m/r
:EndIf
∇
∇ w←SafeJSON w;i;c;⎕IO
⍝ Convert Unicode chars to \uXXXX
⎕IO←0
→0⍴⍨0∊⍴i←⍸127<c←⎕UCS w
w[i]←{⊂'\u','0123456789ABCDEF'[¯4↑16⊥⍣¯1⊢⍵]}¨c[i]
w←∊w
∇
∇ r←Documentation
⍝ return full documentation
:Access public shared
r←'See https://dyalog.github.io/HttpCommand/'
∇
∇ (rc msg)←Upgrade;latest;url;z;newer;ns;code;vers
⍝ loads the latest released version from GitHub
:Access public shared
(rc msg)←¯1 'Default message'
:If 82=⎕DR''
→0⊣msg←'Upgrade is not available on Classic interpreters'
:EndIf
:Trap Debug↓0
latest←GetJSON'get' 'https://api.github.com/repos/Dyalog/HttpCommand/releases/latest'
:If 0 200≢latest.(rc HttpStatus)
→0⊣msg←'Unable to retrieve latest HttpCommand release: ',⍕latest
:EndIf
url←latest.Data.(assets.browser_download_url⊃⍨assets.name⍳⊂'HttpCommand.dyalog')
z←Get url
:If z.(rc HttpStatus)≢0 200
→0⊣msg←'Unable to retrieve latest HttpCommand definition: ',⍕z
:EndIf
newer←{
0∊⍴⍺:0      ⍝ same version
(⊃⍺)>⊃⍵:1   ⍝ newer version
(⊃⍺)=⊃⍵:(1↓⍺)∇ 1↓⍵
¯1          ⍝ older version
}
{}LDRC.Close'.' ⍝ close Conga
LDRC←''         ⍝ reset local reference so that Conga gets reloaded
:Trap Debug↓0
ns←⎕NS''
code←{⍵⊆⍨~⍵∊⎕UCS 13 10 65279}'UTF-8'⎕UCS ⎕UCS z.Data
vers←(0 ns.⎕FIX code).Version Version
:If 1=⊃newer/{2⊃'.'⎕VFI 2⊃⍵}¨vers
(rc msg)←1(deb⍕,'Upgraded to' 'from',⍪vers)
:Else
(rc msg)←0(deb⍕'Already using the most current version: ',2⊃vers)
:EndIf
:Else
msg←'Could not ⎕FIX new HttpCommand: ',2↓∊': '∘,¨⎕DMX.(EM Message)
:EndTrap
:Else
r←¯1('Unexpected ',⊃{⍺,' at ',⍵}/2↑⎕DMX.DM)
:EndTrap
∇
:EndClass
:Class IniFiles
⍝ ## APL-like INI files
⍝ ### Overview
⍝ This class provides a kind of APL-like INI files.
⍝ ~~~
⍝ MyInstance1←⎕NEW IniFiles (,⊂'MyIniFile.ini')
⍝ MyInstance2←⎕NEW IniFiles ('MyIniFile1.ini' 'MyIniFile2.ini')
⍝ AsNamespace←MyInstance2.Convert ⎕NS ''
⍝ ~~~
⍝ Author: Kai Jaeger ⋄ APL Team Ltd ⋄ http://aplteam.com
⍝
⍝ Homepage: http://aplwiki.com/IniFiles
⎕IO←1 ⋄ ⎕ML←1
∇ r←Version
:Access Public Shared
r←'IniFiles' '5.0.3+22' '2022-04-13'
∇
∇ History
:Access Public Shared
⍝ * 5.0.3
⍝   * `GetIniFiles` did not work under Linux/Mac-OS
⍝   * Now managed by Cider
⍝ * 5.0.2
⍝   * Package config file corrected
⍝ * 5.0.1
⍝   * Internal change: `Uppercase` and Lowercase` replaced by calles to `⎕C`.
⍝ * 5.0.0
⍝   * BREAKING CHANGES:
⍝     * Does not now requires the class `APLTreeUtils2`
⍝     * Requires at least Dyalog 18.0
⍝   * `IniFiles` does not :Include APLTreeUtils anymore
⍝   * Bug fix: in case a value was added with `Put` the `Changed` property was not set to 1.
⍝   * Internally now `⎕ML←1` is used.
⍝\\
⍝ For information regarding older versions see <https://github.com/aplteam/IniFiles/releases>
∇
∇ r←GetSections
⍝ Returns a vector of strings with sections names.
:Access Public Instance
r←1 ⎕C 1↓¨_Sections
∇
∇ r←GetIniFiles filename;p;fn;ext;fn2;fn1;f1;f2;assume;A
:Access Public Shared
⍝ Returns a list of INI files.\\
⍝ Let's assume that "foo.ini" ←→ filename. Let's also assume that the current computer's name is "JohnDoe".
⍝ Finally let's assume that there are two INI files in the current directory:
⍝ * foo.ini
⍝ * foo_johndoe.ini\\
⍝ Then `GetIniFiles` returns:\\
⍝ `'foo.ini' 'foo_johndoe,ini' ← #.IniFiles.GetIniFiles`\\
⍝ If there is no file foo_johndoe.ini however then the result is:\\
⍝ `'foo.ini' ← #.IniFiles.GetIniFiles`
A←(⊃⊃⎕CLASS ⎕THIS).##.⍎'APLTreeUtils2'
(p fn)←{('\'∊⍵):A.SplitPath ⍵ ⋄ ''⍵}filename
(fn ext)←{('.'∊⍵):'.'A.SplitPath ⍵ ⋄ (⍵,'.')'ini'}fn
f1←⎕NEXISTS fn1←p,fn,ext
f2←⎕NEXISTS fn2←p,(¯1↓fn),'_',GetComputerName,'.',ext
⍎('Could not find ',fn1)Signal 6/⍨f1=0
r←(f1/⊂fn1),f2/⊂fn2
∇
∇ (r data allRemarks)←Import(data allRemarks);il;refToIniFile;fullName;temp;buffer;bool;ilRemarks;i;thisRemark;this;r;lnos;buff
bool←∨/¨'!Import'∘⍷¨data                  ⍝ Where are the files to be imported?
lnos←⍳⍴data                               ⍝ Create Line Numbers
il←bool⌿data                              ⍝ Create it (Import List)
ilRemarks←bool/allRemarks                 ⍝ Remarks belonging to !Import
⍎'!Import statement must not have a remark'Signal 911/⍨0∨.<≢¨ilRemarks
data←(~bool)/data                         ⍝ Remove the "!Import" lines from "data" numbers
lnos←bool/lnos                            ⍝ Remove the "!Import" lines from the line numbers
allRemarks←(~bool)/allRemarks             ⍝ Remove the "!Import" lines from "allRemarks"
il←(+/∧\' '=↑il)↓¨il                      ⍝ Drop any leading blanks
il←⎕C¨(il⍳¨' ')↓¨il                       ⍝ Drop method name, leaving the filenames
refToIniFile←⊃1⊃⎕CLASS ⎕THIS              ⍝ Ref to itself
r←0 3⍴⊂''
:For this :In il
:If (~':'∊this)∧~(1⍴this)∊'/\'        ⍝ Does not start with / and has no drive letter?
fullName←(⊃1 ⎕NPARTS''),'\',this  ⍝ Then make it absolute
:Else
fullName←this                     ⍝ Is already absolute
:EndIf
fullName←⊃,/1 ⎕NPARTS fullName
'Tries to import itself'⎕SIGNAL 11/⍨(⊂⎕C fullName)∊⎕C _IniFilename
temp←(⎕NEW refToIniFile(fullName _debugFlag)).Convert ⎕NS''  ⍝ Create an instance
buff←temp.List''
buff[;3]←DoubleCurlies¨buff[;3]
r⍪←buff
:EndFor
_import←0<1⊃⍴r
∇
:Property IniFilename
:Access Public
∇ r←get
r←{0∊⍴⍵:1⊃⍵ ⋄ ↑{⍺,';',⍵}/⍵}_IniFilename
∇
:EndProperty
:Property Default
:Access Public
⍝ This property is **initialised**! If set, indexing an unknown key will
⍝ return the value of this property.
∇ r←get
⍎'No default defined!'Signal 6/⍨0=⎕NC'_default'
r←_default
∇
∇ set arg
_default←arg.NewValue
∇
:EndProperty
:Property OldStyleFlag
⍝ Read-only property that tells you whether the current INI file is old-fashioned or not.
:Access Public
∇ r←get
r←_oldStyleFlag
∇
:EndProperty
:Property EstablishedAt
⍝ Stores date and time as float (date.time) when the instance was established.\\
⍝ Usefult if you want to find out whether the INI file was changed since it was instanciated.
⍝ See `HasInifileChanged`
:Access Public
∇ r←get
r←_EstablishedAt
∇
:EndProperty
:Property Changed
⍝ Read-only property that tells you that the data from the INI file was changed later on by assignment.\\
⍝ Note that those changes will persist only if the `Save` method is invoked at some point.
⍝ See also `HasInifileChanged`
:Access Public
∇ r←get
r←_changed
∇
:EndProperty
:Property keyed default data
⍝ This property allows external access to the INI data via indexing.
∇ set val;where;EndHold;keys;section;key;data;where2;i;buffer;buffer2;ref;name;line;KEY;TOC;toc;this;new;newItem;comments;SECTION
keys←{2=|≡⍵:⍵ ⋄ ⊃⍵}val.Indexers
'Length Error'⎕SIGNAL(≠/≢¨keys(,val.NewValue))/11
keys←{~':'∊⍵:⍵ ⋄ ⍵{((⍵-1)↑⍺)(⍵↓⍺)}⍵⍳':'}¨keys
:For i :In ⍳⍴,keys
buffer←i⊃,keys
'Use "Section:key" syntax'⎕SIGNAL 11/⍨2≠⍴buffer
(section key)←buffer
SECTION←1 ⎕C section←'_',section
:If (⍴_Sections)<where←_SECTIONS⍳⊂SECTION
⍝ Event the section is new!
(1 ⎕C section)⎕NS''
_Sections,←⊂section
{⍵._Data←0 5⍴'' ⋄ ⍵.generalRemarks←''}⍎1 ⎕C section
_changed←1
where←⍴_Sections
:EndIf
data←{⍵._Data}ref←⍎where⊃_SECTIONS
KEY←1 ⎕C key
(toc TOC)←↓⍉data[;1 5]
:If (1⊃⍴data)≥where2←TOC⍳⊂KEY
⍝ It is an update!
buffer←i⊃,val.NewValue
'Invalid depth'⎕SIGNAL 11/⍨~0 1 2∊⍨|≡buffer
:If 2=|≡buffer
new←''
:For this :In buffer
:If IsChar this
newItem←⊂ReplaceCurlies TOC this
newItem,←⊂'''',(DoubleQuotes this),''''
new,←⊂newItem
:Else
new,←⊂2⍴⊂⍕this
:EndIf
:EndFor
_changed∨←data[where2;2]≢1⊃¨new
:If (1+⍴new)≠⍴4⊃data[where2;] ⍝ Add one for initialiation (nested!)
:AndIf 0≠≢4⊃data[where2;]
⍝ The length has changed, so the comments do not any longer fit!
comments←(1,(2⊃data[where2;])∊(1⊃¨new))/4⊃data[where2;]
comments←(1,(1⊃¨new)∊2⊃data[where2;])\comments
data[where2;4]←⊂comments
:EndIf
data[where2;2 3]←↓⍉↑new
:Else
:If '{'∊buffer
data[where2;2]←⊂ReplaceCurlies TOC buffer
data[where2;3]←⊂'''',(DoubleQuotes buffer),''''
:EndIf
_changed∨←data[where2;2]≢⊂buffer
data[where2;2]←⊂buffer
data[where2;3]←⊂'''',(DoubleQuotes⍕buffer),''''
:EndIf
:Else
⍝ key is new in this section
buffer←i⊃,val.NewValue
'Invalid depth'⎕SIGNAL 11/⍨~0 1 2∊⍨|≡buffer
:If 2=|≡buffer
new←''
:For this :In buffer
:If IsChar this
newItem←⊂ReplaceCurlies TOC this
newItem,←⊂'''',(DoubleQuotes this),''''
:Else
newItem←2⍴⊂⍕this
:EndIf
new,←⊂newItem
:EndFor
_changed←1
data⍪←((⊂key),(↓⍉↑new),⊂''),⊂''
:Else
:If 2=+/'{}'∊buffer
name←{{⍵↑⍨¯1+'}'⍳⍨⍵}⍵↓⍨⍵⍳'{'}buffer
:If (1⊃⍴ref._Data)<line←ref._Data[;5]⍳⊂1 ⎕C name
6 ⎕SIGNAL⍨'Unknown: "',name,'"'
:EndIf
buffer2←(line⊃ref._Data[;2]){a←¯1+⍵⍳'{' ⋄ w←a⌽⍵ ⋄ (-a)⌽⍺,⍵↓⍨⍵⍳'}'}buffer
:Else
buffer2←buffer
:EndIf
:If IsChar buffer
buffer←DoubleQuotes buffer
buffer←'''',(⍕buffer),''''
:Else
buffer←{0 1∊⍨≡⍵:⍕⍵ ⋄ ∇¨⍵}buffer
:EndIf
data⍪←key buffer2 buffer''KEY
_changed←1
:EndIf
:EndIf
data{⍵._Data←⍺}⍎where⊃_SECTIONS
:EndFor
∇
∇ r←get arg;keys;bool;where;this;KEYS;THIS;i;noOf
'Invalid argument'⎕SIGNAL 11/⍨0 1∊⍨≡keys←⊃arg.Indexers
:If 0∊⍴keys←{~':'∊⍵:⍵ ⋄ ⍵{((⍵-1)↑⍺)(⍵↓⍺)}⍵⍳':'}¨keys
r←''
:Else
'Invalid key'⎕SIGNAL 11/⍨0=⍴∊keys
KEYS←1 ⎕C¨keys
:If 0∊bool←('_',¨1⊃¨KEYS)∊1 ⎕C _Sections
11 ⎕SIGNAL⍨'Unknown section: ',↑{⍺,',',⍵}/∪(~bool)/1⊃¨keys
:EndIf
r←''
:For i :In ⍳⍴,keys
THIS←i⊃,KEYS
this←i⊃,keys
:If 0=≢2⊃this
r,←⊂{({⍵⌿⍨0<≢¨⍵[;1]}⍵._Data)[;2]}⍎'_',1⊃THIS
:Else
noOf←{1⊃⍴⍵._Data}⍎'_',1⊃THIS
:If noOf<where←(2⊃THIS){(⍵._Data[;5])⍳⊂1 ⎕C ⍺}⍎'_',1⊃THIS
:If 0=⎕NC'_default'
6 ⎕SIGNAL⍨'Unknown: ',2⊃this
:Else
r,←⊂_default
:EndIf
:Else
r,←where{⍵._Data[where;2]}⍎'_',1⊃THIS
:EndIf
:EndIf
:EndFor
:If ⍬≡⍴keys
:If 1=|≡r
r←⊃r
:Else
r←r[1]
:EndIf
:EndIf
:EndIf
∇
:EndProperty
⍝⍝⍝ Constructors
∇ make0;parent
⍝ No parameter: Creates a new INI file by definition
:Implements Constructor
:Access Public
Init ⍬
CallCreate''
∇
∇ make1(IniFilename)
⍝ Takes the name of one or more INI files to be processed as parameter.
:Implements Constructor
:Access Public
Init ⍬
CallCreate IniFilename
∇
∇ make2(IniFilename debugFlag)
:Implements Constructor
:Access Public
⍝ Takes the name of the INI file and what originally was supposed
⍝ to be a reference to the `UnicodeFile` class as parameters.\\
⍝ However, that property is not needed any longer (since version 1.6),
⍝ and for that reason the argument `debugFlag` is ignored when it is
⍝ a string. If it is a Boolean then however it is treated as a debug
⍝ flag. It default is 0 but one can specify a 1.
⍝
⍝ Setting it to 1 has two effects:
⍝ * All error trapping is deactivated.
⍝ * Instead of signalling an error the program stops.
Init ⍬
_debugFlag←{((⊂⍵)∊0 1):⍵ ⋄ 0}debugFlag
'Invalid parameter: "debugFlag"; not a boolean'⎕SIGNAL 11/⍨∨/~_debugFlag∊0 1
CallCreate IniFilename
∇
∇ Init dummy
⎕ML←1 ⋄ ⎕IO←1
_import←0
_debugFlag←0
_EN←⍬
_EstablishedAt←Timestamp2Float ⎕TS
A←(⊃⊃⎕CLASS ⎕THIS).##.APLTreeUtils2
∇
∇ Create IniFilename;data;allRemarks;import;dm;en;invalid;⎕TRAP;sec;sep
⍝ Called by the official constructors
_changed←_oldStyleFlag←0
_Sections←''
⎕TRAP←(1+_debugFlag)⊃((0 'C' '_EN←⎕en ⋄ (⎕IO⊃⎕DM)⎕signal 911'))((0 1000)'S')
:If 0≠≢_IniFilename←IniFilename
_IniFilename←CheckExtension¨_IniFilename
(data _oldStyleFlag allRemarks)←EvaluateINIs _IniFilename
import←''
:If 0<+/∨/¨'!Import'∘⍷¨data
:Trap 911
(import data allRemarks)←Import data allRemarks
:Else
⍎911 Signal⍨1⊃⎕DM
:EndTrap
:EndIf
:Trap 911
(data locals allRemarks)←GetLocals data allRemarks
:Else
⍎911 Signal⍨1⊃⎕DM
:EndTrap
data←{(0=≢⍵):⍵ ⋄ ⊃,/SortSection¨⍵}SplitSections data
:If 0≠≢import
(data allRemarks)←MergeImport import data allRemarks
:EndIf
:If 0≠≢data
sep←+\'['=⊃¨data
(data allRemarks)←sep∘{⎕ML←3 ⋄ ⍺⊂⍵}¨data allRemarks
:If ∨/invalid←(' '∊¨~∘'[]'∘⊃¨data)∨¯1=⊃∘⎕NC¨~∘'[ ]'∘⊃¨data
⍎11 Signal⍨'Invalid section name(s): ',⊃{⍺,', ',⍵}/invalid/⊃¨data
:EndIf
:AndIf 0≠≢_Sections←'_',¨∪~∘'[ ]'∘⊃¨data
⎕NS∘''¨sec←1 ⎕C _Sections
(⍎¨sec)._Data←⊂0 5⍴''
ProcessSections data allRemarks
:EndIf
:EndIf
⎕DF(⍕⎕THIS),' on <',({0∊⍴⍵:⍵ ⋄ ↑{⍺,';',⍵}/⍵}_IniFilename),'>'
∇
∇ ProcessSections(data allRemarks);thisSection;sectionRemarks;this;ref;buffer;TOC;toc
:For thisSection sectionRemarks :In ↓⍉↑data allRemarks
this←'_','[ ]'~⍨1⊃thisSection
ref←⍎1 ⎕C this
ref.generalRemarks←⊂{⍵↓⍨+/∧\' '=⍵}1⊃sectionRemarks
buffer←{i←⍵⍳'=' ⋄ ((i-1)↑⍵)(i↓⍵)}¨1↓thisSection
:If OldStyleFlag
:AndIf ∨/(0<≢¨∊¨buffer)∧¯1=⊃∘⎕NC¨(⊃¨buffer)~¨' '
⍎11 Signal⍨'Check value names: ',↑{⍺,',',⍵}/{(⊃¨⍵)/⍨(0<≢¨∊¨⍵)∧¯1=⊃∘⎕NC¨⊃¨⍵}buffer
:EndIf
:If ∨/' '∊¨A.DLB A.DTB','~¨⍨⊃¨buffer
⍎11 Signal⍨'Invalid value name(s): ',⊃{⍺,', ',⍵}/{⍵/⍨' '∊¨⍵}⊃¨buffer
:EndIf
toc←' '~¨⍨1⊃¨buffer
TOC←1 ⎕C toc
buffer←2⊃¨{2↑⍵,'' ''}¨buffer
EstablishValuesInSection(TOC toc buffer)
:If 0=≢ref._Data
ref.Remarks←''
:Else
ref.Remarks←sectionRemarks~↑,/{2=|≡⍵:⍵ ⋄ ⊂⍵}¨ref._Data[;4]  ⍝ ⊃ ←→ ↑ ?!
:EndIf
:EndFor
∇
∇ EstablishValuesInSection(TOC toc buffer);i;NAME;name;value;remark;value2;where
:For i :In ⍳⍴,toc
(NAME name)←i⊃¨TOC toc
value←i⊃buffer
remark←{⍵↓⍨+/∧\' '=⍵}(1+i)⊃sectionRemarks ⍝ first one is the section
:If 0∊⍴name
ref._Data⍪←'' '' ''remark''
:Else
:If 0∊⍴value
:AndIf 0=_oldStyleFlag
⍎911 Signal⍨'Invalid line: ',i⊃toc
:ElseIf ∧/'{}'∊value
:AndIf ~OldStyleFlag
:Trap 0
value2←⍎ReplaceCurlies(ref._Data[;5],TOC~¨',')value
:Else
⍎911 Signal⍨'Invalid value: ',name
:EndTrap
:Else
:If _oldStyleFlag
:If ''''∧.=2↑¯1⌽value2←value
:Trap 2 11
value2←⍎value2
:Else
⎕EN ⎕SIGNAL⍨'Invalid definition, check: ',value2
:EndTrap
:EndIf
:Else
:Trap 2 11
value2←⍎value
:Else
⎕EN ⎕SIGNAL⍨'Invalid definition, check: ',value
:EndTrap
:EndIf
:If ~0∊⍴value2
⍎('Invalid definition: ',name)Signal 911/⍨~0 1∊⍨≡value2
:EndIf
:EndIf
where←ref._Data[;5]⍳⊂NAME~','
:If where>≢ref._Data
ref._Data⍪←name value2 value remark NAME
:ElseIf ','∊name
:If 0=≢2⊃ref._Data[where;] ⍝ Is it the first time?
ref._Data[where;4]←⊂¨ref._Data[where;4]
ref._Data[where;3]←⊂''
:EndIf
ref._Data[where;2]←⊂(2⊃ref._Data[where;]),⊂value2
ref._Data[where;3]←⊂(3⊃ref._Data[where;]),⊂value
ref._Data[where;4]←⊂(4⊃ref._Data[where;]),⊂remark
:Else
ref._Data[where;2 3 4]←value2 value remark
:EndIf
:EndIf
:EndFor
∇
∇ r←{type}Convert r;data;thisSection;s;noOf;n;v;rf;allValues;this;theseNames;theseValues;code
:Access Public
⍝ Takes a ref to a (typically empty) namespace and populates it with the values
⍝ defined by the INI file entries.\\
⍝ If the optional left argument is "flat", sections are ignored and every entry
⍝ gets a simple variable.\\
⍝ If it's not "flat" then section names are used as names for sub-namespaces.\\
⍝ Note that `Convert` will fail if the names used for sections and values
⍝ are not proper APL names.\\
⍝ `Convert` injects a method `List` into the resulting namespace which
⍝ prints a matrix to the session with all names and values.
type←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'type'
⍎'Left argument must be either empty or "flat"'Signal 11/⍨~(0∊⍴type)∨'flat'≡type
data←Get ⍬ ⍬
:If 'flat'≡type
:If 0≠≢data←(0<≢¨data[;2])⌿data                   ⍝ Isolate pure data
(theseNames theseValues)←↓⍉data[;2 3]         ⍝ All the names and values
theseNames r.{⍎⍺,'←⍵'}¨theseValues            ⍝ Assign the values to the names
:EndIf
r.⎕FX'r←List;⎕IO;⎕ML' '(⎕IO ⎕ML)←0 3' 'r←{⍵,[.5]⍎¨⍵}⎕nl -2'  ⍝ Establish method "List"
:Else
allValues←data[;3]
:For thisSection :In data[;1]~⊂''                 ⍝ Loop over sections
s←data[;1]⍳⊂thisSection                       ⍝ Where does the section start?
:If 0<noOf←{+/∧\0=≢¨⍵}s↓data[;1]              ⍝ How many entries has the section?
rf←⍎'r.',thisSection,'←⎕NS'''''           ⍝ Create a namespace name after the section
rf.⎕DF thisSection                        ⍝ Set the display format
theseNames←noOf↑s↓data[;2]                ⍝ All the names and ...
theseValues←noOf↑s↓allValues              ⍝ ... values of this section
:If ¯1∊⊃∘⎕NC¨theseNames
⍎11 Signal⍨'Invalid value name(s): ',{⊃{⍺,', ',⍵}/⍵/⍨¯1=⊃∘⎕NC¨⍵}theseNames
:EndIf
theseNames rf.{⍎⍺,'←⍵'}¨theseValues       ⍝ Assign values to names inside that namespace
:EndIf
:EndFor
code←''
code,←⊂' r←List section;toc;section_U;ind'
code,←⊂'⍝ If "section" is empty or "*", all sections are returned'
code,←⊂' ⎕IO←1 ⋄ ⎕ML←1'
code,←⊂' r←'''''
code,←⊂' :If (0∊⍴section)∨(,''*'')≡,section'
code,←⊂'     :If ~0∊⍴⎕NL-9'
code,←⊂'         r←↑⍪/{⍵,⍵.{{⎕IO←0 ⋄ ⎕ML←3 ⋄ ⍵,[0.5]⍎¨⍵}⎕NL-2}⍵}¨⍎¨⎕NL-9'
code,←⊂'     :EndIf'
code,←⊂' :Else'
code,←⊂'     ''Invalid right argument''⎕SIGNAL 11/⍨~(≡section)∊0 1'
code,←⊂'     toc←⎕NL-9'
code,←⊂'     section_U←1(819⌶)section'
code,←⊂'     :If (⊂section_U)∊toc'
code,←⊂'         ind←toc⍳⊂section_U'
code,←⊂'         r←{⍵.{{⎕IO←0 ⋄ ⎕ML←3 ⋄ ⍵,[0.5]⍎¨⍵}⎕NL-2}⍵}⍎ind⊃toc'
code,←⊂'     :EndIf'
code,←⊂' :EndIf'
r.⎕FX code                                        ⍝ Establish method "List"
:EndIf
∇
∇ r←{default}Get_ name;row;this;ref;subRow;where;thisSection;bool;section;key;SECTION
:Access Public
:If 0 1∊⍨≡name
(section key)←{∨/b←':'=⍵:⍵{((¯1+⍵)↑⍺)(⍵↓⍺)}b⍳1 ⋄ ⍵}name
:Else
(section key)←name
:EndIf
⍎'Invalid syntax!'Signal 11/⍨∧/2=¨≡¨section key
section←{0∊⍴⍵:⍵ ⋄ '_',⍵}section
:If ⍬≡section
section←''
:EndIf
SECTION←1 ⎕C section
:If ((⊂section)∊''⍬)∧(⊂key)∊''⍬
r←0 3⍴''
:For thisSection :In _SECTIONS
r⍪←(⊂1↓thisSection),'' ''
r⍪←(⊂''),thisSection⍎'_Data[;1 2]'
:EndFor
:ElseIf (⊂key)∊''⍬
:If (1⊃⍴_Sections)≥where←_SECTIONS⍳⊂SECTION
r←(where⊃_SECTIONS)⍎'_Data[;1 2]'
:Else
⍎6 Signal⍨'Unknown: "',(⍕∊section),'"'
:EndIf
:Else
:If 0=≢section
r←⊃⍪/{⍵{(⊂⍺),⍵._Data}⍎⍵}¨_Sections
:Else
row←_SECTIONS⍳⊂SECTION
:If (1⊃⍴_Sections)<row
⍎6 Signal⍨'Unknown section'
:EndIf
:EndIf
this←row⊃_Sections
ref←⍎row⊃_SECTIONS
:If 0=≢key
r←ref._Data
:Else
key←{0 1∊⍨≡⍵:⊂⍵ ⋄ ⍵}key
subRow←ref._Data[;5]⍳1 ⎕C key
:If ∨/bool←(⊃⍴ref._Data)<subRow
:If 0=⎕NC'default'
:If 0=⎕NC'Default'
⍎6 Signal⍨'Value Error: "',(↑{⍺,',',⍵}/bool/key),'"'
:Else
:Trap 6
r←(ref._Data[;2],⊂Default)[subRow]
:Else
⍎(1⊃⎕DM)Signal ⎕EN
:EndTrap
:EndIf
:Else
r←(ref._Data[;2],⊂default)[subRow]
:EndIf
:Else
r←ref._Data[subRow;2]
:EndIf
:EndIf
:EndIf
:If 2=⍴⍴r
:Select 2⊃⍴r
:Case 2
r⌿⍨←0<≢¨r[;1]
:Case 3
r⌿⍨←0∨.≠⍨≢¨r
:EndSelect
:EndIf
∇
∇ r←{default}Get name
⍝ Returns the (enclosed) value for a single value or a vector of values
⍝ if more than one key was provided.\\
⍝ `name` might be one of:
⍝ * `('sectionName' 'key')`
⍝ * `(('sectionName' 'key1')('sectionName' 'key2'))`
⍝ * `'sectionName:key'`
⍝ * `('sectionName:key1' 'sectionName:key2')`
⍝
⍝ Note that mixed syntax is not supported:
⍝ ~~~
⍝ ('sectionName' ('key1' 'key2')) ⍝  invalid!
⍝ ('sectionName' 'key1') 'sectionName:key2' ⍝  invalid!
⍝ ~~~
⍝ If "key" is empty, **all** values of that sections are returned.\\
⍝ If a requested value is not available, "default" (the left argument)
⍝ is returned if specified, otherwise the property "Default" is returned
⍝ if specified; otherwise an interrupt is signalled.
:Access Public
:If 0=⎕NC'default'
r←Get_ name
:Else
r←default Get_ name
:EndIf
∇
∇ {r}←data Put name
⍝ Set `name` to `data`.\\
⍝ Note that `name` can be:
⍝ * A simple string. Must provide both, a "section" and a `name`,
⍝   separated by a colon as in "section:key"
⍝ * A nested vector of length 2.
⍝
⍝ Examples for the latter:
⍝ ~~~
⍝ `1⊃name ←→ section name`
⍝ `2⊃name ←→ key (or entry name)`
⍝ ~~~
:Access Public
r←⍬
data Put_ name
∇
∇ data Put_ name;key;SECTION;where;ref;KEYS;buffer;KEY;toc;section;key
:If 0 1∊⍨≡name
⍎'Must be specified as "sectionName:key"'Signal 11/⍨~':'∊name
(section key)←{a←⍵⍳':' ⋄ (⍵↑⍨a-1)(a↓⍵)}name
:Else
(section key)←name
:EndIf
section←'_',section
(SECTION KEY)←1 ⎕C(section key)
:If (⊂SECTION)∊_SECTIONS
where←_SECTIONS⍳⊂SECTION
ref←⍎SECTION
:Else
⍎6 Signal⍨'Unkown section; (consider executing "AddSection")'
:EndIf
KEYS←ref._Data[;5]
:If (⎕DR data)∊11 83 645
buffer←data(⍕data)
:Else
:If 2=|≡data
buffer←({ReplaceCurlies KEYS ⍵}¨data)({'''',⍵,''''}¨,data)
:Else
buffer←(ReplaceCurlies KEYS data)('''',data,'''')
:EndIf
:EndIf
:If (⊂KEY)∊KEYS
where←KEYS⍳⊂KEY
:If ~_changed
_changed←data≢2⊃ref._Data[where;]
:EndIf
ref._Data[where;2 3]←buffer
:Else
ref._Data⍪←(⊂key),buffer,(⊂''),⊂1 ⎕C key
_changed←1
:EndIf
∇
∇ {r}←Delete name;section;key;ref;bool;this;TOC
:Access Public
⍝ Delete a key or a section. Returns 1 if there was something to delete.
⍝
⍝ To delete "myKey" from "MySection":
⍝ ~~~
⍝ `('MySection' 'MyKey')`
⍝ ~~~
⍝ "name" can also be a nested vector:
⍝ ~~~
⍝ `(('SectionA' 'key1') ('SectionA' 'key2'))`
⍝ ~~~
⍝ or a full name like:
⍝ ~~~
⍝ `('section:key') or (('section:key1') ('section:key1'))`
⍝ ~~~
⍝ Note that `('section' ('key1' 'key2'))` is **not** a valid syntax.
⍝
⍝ To delete an entire section:
⍝ ~~~
⍝ `Delete 'foo:'`
⍝ ~~~
⍝ If `name` is a vector of names, `Delete` calls itself recursively.
⍝ Mixed syntax is **not** supported, so use one of:
⍝ ~~~
⍝ Delete ('sectiona' 'key1')('otherSection' 'key2')('thirdSection' '')
⍝ Delete ('sectiona:key1' 'otherSection:key2' 'thirdSection:')
⍝ ~~~
r←0
:If 0 1∊⍨≡name
⍎'Invalid right argument'Signal 11/⍨1≠':'+.=name
(section key)←' '~¨⍨2↑1 ⎕C':'(≠⊆⊢)name
section←'_',section
:If 0=≢key
:If 9=⎕NC section
⎕EX section
_Sections←(_SECTIONS≢¨⊂section)/_Sections
r←_changed←1
:EndIf
:Else
⍝key←{⍵∧.=' ':'' ⋄ ⍵}key
(section key)←1 ⎕C':'(≠⊆⊢)name
section←'_',section
:If (⊂section)∊_SECTIONS
TOC←{⍵._Data[;5]}ref←⍎section
:AndIf r←0<+/bool←(⊂key)≡¨TOC
ref._Data⌿⍨←~bool
r←_changed←1
:EndIf
:EndIf
:Else
:If 0 1∊⍨≡2⊃name
:If 2=|≡name
:AndIf ~':'∊1⊃,name
r←Delete⊃{⍺,':',⍵}/name
:Else
r←Delete¨name
:EndIf
:Else
:If 3=|≡name
:AndIf 1 2≡≡¨name
r←Delete¨(⊂name[1]),¨⊂¨2⊃name
:Else
r←⍬
:For this :In name
r,←Delete this
:EndFor
:EndIf
:EndIf
:EndIf
∇
∇ r←Exist name;section;key;ref;this
:Access Public
⍝ Returns 1 if `name` exists. `name` can be either a nested vector like
⍝ ~~~
⍝ ('Section' 'key')
⍝ ~~~
⍝ or
⍝ ~~~
⍝ (('Section' 'key1') ('Section' 'key2'))
⍝ ~~~
⍝ or a full name like
⍝ ~~~
⍝ ('section:key')
⍝ ~~~
⍝  or
⍝ ~~~
⍝ (('section:key1') ('section:key1'))
⍝ ~~~
⍝ Note that `('section' ('key1' 'key2'))` is **not** a valid syntax.
⍝
⍝ To check the existence of a section use
⍝ ~~~
⍝ Exist 'foo:'
⍝ ~~~
⍝ If `name` is a vector of names, `Exist` calls itself recursively.
⍝
⍝ Mixed syntax is **not** supported, so use one of:
⍝ ~~~
⍝ Exist ('section' 'key1')('otherSection' 'key2')('thirdSection' '')
⍝ Exist ('section:key1' 'otherSection:key2' 'thirdSection:')
⍝ ~~~
:If 0 1∊⍨≡name
(section key)←' '~¨⍨1 ⎕C 2↑':'(≠⊆⊢)name
section←'_',section
:If 0∊⍴key
r←⊃9=⎕NC section
:Else
key←{⍵∧.=' ':'' ⋄ ⍵}key
:If 0∊⍴key
r←(⊂section)∊_SECTIONS
:Else
:If r←(⊂section)∊_SECTIONS
ref←⍎section
r←(⊂key)∊ref._Data[;5]
:EndIf
:EndIf
:EndIf
:Else
:If ∧/':'∊¨name
r←Exist¨name
:Else
:If 3=|≡name
⍎'Mixed syntax not eligible'Signal 11/⍨(∨/':'∊¨name)∧(∨/2=|≡¨name)
r←Exist¨name
:Else
r←Exist⊃{⍺,':',⍵}/name
:EndIf
:EndIf
:EndIf
∇
∇ {r}←AddSection name;NAME;ref
⍝ Adds a new section to the INI file.
⍝
⍝ Return a 1 if a section was added. A 0 is rerturned in case the section already exists.
:Access Public
NAME←1 ⎕C name←'_',name
⍎'Section name must be a valid APL name'Signal 11/⍨¯1=⎕NC NAME
:If r←0=⎕NC NAME
NAME ⎕NS''
ref←⍎NAME
ref._Data←0 5⍴''
_Sections,←⊂name
_changed←1
:EndIf
∇
∇ boolean←HasInifileChanged;ts
⍝ Returns a 1 in case the (any) ini file has changed since the instance was created.\\
⍝ See also the `Changed` property.
:Access Public Instance
ts←{↑3 ⎕NINFO ⍵}¨_IniFilename
boolean←_EstablishedAt∨.<Timestamp2Float¨ts
∇
∇ {oldFilename}←Save filename;thisSection;thisKey;thisData;ref;buffer;origValue;THISSECTION;thisRemark;data;bool;where;i;this;thisKEY
:Access Public
⍝ If `filename` is empty the INI is saved into the same file it originally came from.
⍝
⍝ Note that `Save` will throw a SYNTAX ERROR in case...
⍝ * the instance was defined by more than one INI file.
⍝ * another INI file was imported.
⍎'An INI file with !Import statement cannot be saved'Signal 11/⍨_import
:If 1<⍴_IniFilename
⍎11 Signal⍨'This INI instance was defined by more than one INI file; it therefore cannot be saved.'
:EndIf
oldFilename←_IniFilename
:If ~0∊⍴filename
_IniFilename←,⊂filename
:EndIf
_IniFilename←CheckExtension¨_IniFilename
:If 0=⎕NC'locals'
:OrIf 0∊⍴locals
data←''
:Else
bool←∧\0=≢¨locals[;1]
data←'; '∘,¨{⍵↓⍨+/∧\' '=⍵}¨bool⌿locals[;4]
:For thisKey thisData origValue thisRemark thisKEY :In ↓(~bool)⌿locals
buffer←(thisKey{0∊⍴⍺:⍺ ⋄ ⍺,⍵}'='),{0=1↑0⍴⍵:⍕⍵ ⋄ '''',(DoubleQuotes ⍵),''''}thisData
:If ~0∊⍴thisRemark
:If ''''''≡buffer
buffer←thisKey{⍵,⍨(~0∊⍴⍺)/(⎕UCS 9)}'; ',thisRemark
:Else
buffer,←thisKey{⍵,⍨(~0∊⍴⍺)/(⎕UCS 9)}'; ',thisRemark
:EndIf
:EndIf
data,←⊂buffer
:EndFor
:EndIf
:For thisSection :In _Sections
thisSection←1↓thisSection
THISSECTION←1 ⎕C thisSection
ref←⍎'_',THISSECTION
:If 0=⎕NC'ref.generalRemarks'  ⍝ might not exist if the original filename was empty
data,←⊂'[',THISSECTION,']'
:Else
data,←⊂'[',(THISSECTION),']',{⍵,⍨(~0∊⍴⍵)/(⎕UCS 9),'; '}1⊃1↑ref.generalRemarks
data,←{⍵,⍨(~0∊⍴⍵)/'; '}¨1↓ref.generalRemarks
:EndIf
:For thisKey thisData origValue thisRemark :In ↓4↑[2]ref._Data
buffer←''
:If 0 1∊⍨≡thisData
:If '{'∊origValue
buffer←thisKey,'=''',(DoubleQuotes⍎origValue),''''
:Else
:If ''''''≡buffer←(thisKey{0∊⍴⍺:⍺ ⋄ ⍺,⍵}'='),{0=1↑0⍴⍵:⍕⍵ ⋄ '''',(DoubleQuotes ⍵),''''}thisData
buffer←''
:EndIf
:EndIf
:If ~0∊⍴thisRemark
buffer,←thisKey{⍵,⍨(~0∊⍴⍺)/(⎕UCS 9)}'; ',thisRemark
:EndIf
data,←⊂buffer
:Else
buffer←(⊂thisKey,'='''''),(⊂thisKey,',='),¨{0=1↑0⍴⍵:⍕⍵ ⋄ '''',(DoubleQuotes ⍵),''''}¨⍎¨origValue
:If ~0∊⍴thisRemark
buffer,¨←{⍵,⍨(~0∊⍴⍵)/(⎕UCS 9),'; '}¨thisRemark
:EndIf
data,←buffer
:EndIf
:EndFor
:EndFor
bool←(';'≠⊃¨1⍴¨data)∧(⎕UCS 9)∊¨data
where←bool\{⍵⍳(⎕UCS 9)}¨bool/data
buffer←(⎕UCS 9)⍴¨⍨{⍵-⍨⌈/1+⍵}⌊4÷⍨≢¨(where-1)↑¨data
:For i :In ⍳⍴,data
:If i⊃bool
this←i⊃data
this[where[i]]←⊂i⊃buffer
this←∊this
(i⊃data)←this
:EndIf
:EndFor
(⊂data)⎕NPUT(1⊃_IniFilename)1
∇
∇ {r}←DeleteDefault
⍝ As soon as the `Default` property is set, one can get rid of it only be calling
⍝ this method. Returns a 1 if there was a default, otherwise 0.
:Access Public
r←2=⎕NC'_default'
⎕EX'_default'
∇
∇ r←Help;this
:Access Public shared
this←⊃¯1↑'.'##.APLTreeUtils2.Split⍕⎕THIS
r←''
r,←⊂'To provide a list of methods and properties use'
r,←⊂'  ]ADOC -summary ',⍕this
r,←⊂'To provide a full list of methods and properties use'
r,←⊂'  ]ADOC  -summary=full',⍕this
r,←⊂'To provide more details about methods and properties use'
r,←⊂'  ]ADOC ',⍕this
r,←⊂'A fully-fledged documentation is available at:'
r,←⊂'http://aplwiki.com/IniFiles'
r←↑r
∇
fixkeys←{0 1∊⍨≡⍵:,⊂⍵
⍵}
IsChar←{0 2∊⍨10|⎕DR ⍵}
∇ r←{extension}CheckExtension r
⍝ Add extension if there is no extension. Default is "ini"
extension←{2=⎕NC ⍵:⍎⍵ ⋄ 'ini'}'extension'
r←r,(~'.'∊{⍵↑⍨-⌊/'\/'⍳⍨⌽⍵}r)/'.',extension
∇
∇ r←_SECTIONS
r←1 ⎕C _Sections
∇
∇ value←ReplaceCurlies(toc value);bool;val2;where;name;names;noOf
⍝ Replace `{foo}` with real data, if there are any curlies.
value←ExchangeDoubleCourlies value'{'(⎕UCS 0)
value←ExchangeDoubleCourlies value'}'(⎕UCS 1)
:If ∧/'{}'∊value
bool←{{⍵∨≠\⍵}⍵∊'{}'}value
names←1 ⎕C bool/value
names←'}'~⍨¨'{'A.Split names
names←(0<≢¨names)/names
:For name :In names
:Trap 0
where←toc⍳⊂name
:If (⍴toc)∨.<where
where←(1 ⎕C locals[;1])⍳⊂name
⍎('Invalid references found in INI file, check "',name,'"')Signal 6/⍨where∨.>1⊃⍴locals
val2←DoubleQuotes⊃locals[where;2]
:Else
val2←DoubleQuotes 2⊃ref._Data[where;]
:EndIf
:Else
⍎6 Signal⍨'Invalid references found in INI file, check "',name,'"'
:EndTrap
noOf←¯1+value⍳'{'
value←(-noOf)⌽(⍕val2),({⍵↓⍨⍵⍳'}'}noOf⌽value)
:EndFor
value←'''',(1↓¯1↓value),''''
:EndIf
value←RestoreCurlies value
∇
DoubleQuotes←{
1<≡⍵:∇¨⍵
∨/b←''''=⍵:b{w←⍵ ⋄ (b/w)←⊂'''''' ⋄ ∊w}⍵
⍵
}
∇ (data locals allRemarks)←GetLocals(data allRemarks);where;toc;i;name;value;remark;data2;allRemarks2;value2;itemNo;ref;NAME
⍝ Extract any "local" variabels.
⍝ Locals are defined as those assigned above the first section
locals←0 5⍴''                                     ⍝ Initialize the main result
:If '['∊⊃¨data
:If 0<where←¯1+'['⍳⍨⊃¨data                    ⍝ Where starts the first section
data2←where↑data                          ⍝ Take eveything above the first section
data2←(+/∧\' '=↑data2)↓¨data2             ⍝ Drop any leading blanks
data2/⍨←'!Import'{((⍴⍺)↑[2]↑⍵)∨.≠⍺}data2  ⍝ Remove all "!Import" directives
data2←'='A.Split¨data2     ⍝ Split remaining items at "=" (assignment)
toc←' '~¨⍨1⊃¨data2                        ⍝ First part = names
data2←2⊃¨{2↑⍵,'' ''}¨data2                ⍝ Second part = data
allRemarks2←where↑allRemarks              ⍝
:For i :In ⍳⍴,toc
name←i⊃toc
value←i⊃data2
remark←i⊃allRemarks2
:If 0∊⍴name
locals⍪←'' '' ''remark''
:Else
:If ∧/'{}'∊value
value2←⍎ReplaceCurlies((1 ⎕C toc)value)
:Else
:If _oldStyleFlag
value2←value
value←'''',value,''''
:Else
value2←⍎value
:EndIf
:EndIf
itemNo←locals[;5]⍳⊂NAME←1 ⎕C name~','
:If itemNo>1⊃⍴locals
locals⍪←name value2 value remark NAME
:ElseIf ','∊name
⍎911 Signal⍨'Invalid syntax: nested values are not supported for "local" variables'
:Else
locals[itemNo;2 3 4]←value2 value remark
:EndIf
:EndIf
:EndFor
locals[;4]←{2=|≡⍵:↑,/⍵ ⋄ ⍵}¨locals[;4]
data←where↓data
allRemarks←where↓allRemarks
:EndIf
:EndIf
∇
∇ (oldStyleFlag DM EN)←CheckValues(data filename);vals;f;emptyFlag;swq;ewq;iv;in;b;tq;bool;lnos
⍝ Returns either ({boolean} '' ⍬) or ({Boolean} 'Error msg' {number}) with
⍝ Boolean being OldStyleFlag.
⍝
⍝ Therefore the result can be used for a ⎕SIGNAL statement.
⍝
⍝ We don't have to worry about comments and trailing blanks: handled by now.
⍝
⍝ Side effect: sets global /_oldStyleFlag
(oldStyleFlag DM EN)←¯1 '' 0      ⍝ ¯1: not decided yet. As soon it is something else the case is settled
bool←0<≢¨A.DLB data
lnos←bool/⍳⍴data                  ⍝ Create line numbers
data←bool/data                    ⍝ Drop empty lines
bool←';'≠⊃¨data                   ⍝ Pure comment lines
(data lnos)←bool∘/¨data lnos      ⍝ Get rid of all comment lines from data & lnos
:If ∨/b←'!'=⊃¨data
:AndIf ∨/b←b\'!IMPORT'∘{⍺≡1 ⎕C(⍴⍺)↑⍵}¨b/data
oldStyleFlag←0                ⍝ Now we know it's not an old-style file.
(data lnos)←(⊂~b)/¨data lnos
:EndIf
:If ¯1=oldStyleFlag
:AndIf ~0∊⍴(¯1+(⊃¨data)⍳'[')↑data ⍝ Local variables?!
oldStyleFlag←0                ⍝ Now we know it's not an old-style file.
bool←~∧\'['≠⊃¨data            ⍝ Where does the real stuff starts (first section)?
(data lnos)←bool∘/¨data lnos  ⍝ Remove the local variables
:EndIf
bool←'['≠⊃¨data                   ⍝ Which are not sections?
(data lnos)←bool∘/¨data lnos      ⍝ Get rid of them
:If ∨/b←~'='∊¨{⍵↑⍨¯1+⍵⍳''''}data
DM←'Check line',((1≠+/b)/'s'),' ',(⊃{⍺,',',⍵}/⍕¨b/lnos),' of ',filename
EN←11
:Return
:EndIf
vals←A.DLB{⍵↓⍨⍵⍳'='}¨data           ⍝ Remove the assigment as such.
swq←''''=⊃¨vals                   ⍝ Start With Quote
ewq←''''=⊃¨¯1⌽¨vals               ⍝ Ends with quotes
in←{∧/{⍵↑⍨1⌈⍴⍵}1⊃⎕VFI ⍵}¨vals     ⍝ "Is Numeric" flag
emptyFlag←0=⊃∘⍴¨vals              ⍝ Empty is allowed only in old-style
:If ¯1=oldStyleFlag
:If 2=⍴∪(~in)/swq+ewq
DM←filename,' is inconsistent - neither old-style nor new-style; check line(s) ',⍕⍸bool\in⍱swq∧ewq
EN←11
:Return
:Else
oldStyleFlag←~(0∊⍴data)∨∧/in∨2=swq+ewq   ⍝ Locals only? All fine?!
:EndIf
:EndIf
:If ¯1=oldStyleFlag
oldStyleFlag←0                ⍝ We don't know otherwise, so we assume "no"
:EndIf
:If oldStyleFlag
:If ∨/b←~(swq+ewq)∊0 2
DM←filename,' is invalid: ',⊃,/{⍺,',',⍵}/b/data~¨'''' ⋄ EN←11
:EndIf
:Else
:If ∨/b←(~in)∧2≠swq+ewq
DM←filename,' is inconsistent: ',⊃,/{⍺,',',⍵}/b/data ⋄ EN←11
:ElseIf ∨/emptyFlag
DM←filename,' is inconsistent: ',⊃,/{⍺,',',⍵}/emptyFlag/data ⋄ EN←11
:EndIf
:EndIf
∇
RemoveInBetweenBlanks←{
⍝ Remove all "in-between" blanks from names.
s←⍵
(0=≢s):s                            ⍝ Empty? Ignore!
((1↑s)∊';!['):s
(~'='∊⍵):⍵
where←⍵⍳'='
name←⍵↑⍨¯1+where
name←({~(∧\⍵)∨⌽∧\⌽⍵}name=' ')/name
val←where↓⍵
name,'=',({~(∧\⍵)∨⌽∧\⌽⍵}val=' ')/val
}
∇ (data remarks)←MergeImport(import data remarks);value;section;secName;secList;ind;name
data←{(+\'['=⊃¨⍵)⊂⍵}data
secList←⊃¨data
:For section name value :In ↓import
secName←'[',(⍕section),']'
:If (⍴secList)<ind←secList⍳⊂secName
data,←⊂⊂secName
secList,←⊂secName
remarks,←⊂''
:EndIf
ind←secList⍳⊂secName
:If 2=|≡value
(ind⊃data),←⊂name,'='''''
(ind⊃data),←(⊂name,',='),¨Pack¨value
:Else
(ind⊃data),←⊂name,'=',Pack value
:EndIf
:EndFor
data←⊃,/SortSection¨data
remarks←(⍴data)↑remarks,(⍴data)⍴⊂''
∇
Pack←{
(0=1↑0⍴⍵):⍕⍵
'''',⍵,''''
}
SortSection←{
(0 1∊⍨⍴,⍵):⍵
(⍵[1]),{⍵[⍋'{'∊¨⍵]}1↓⍵
}
SplitSections←{(+\'['=⊃¨⍵)⊂⍵}
∇ r←ExchangeDoubleCourlies(r what new);b;ind
⍝ Typical:
⍝ data ← RestoreCurlies ExchangeDoubleCourlies '{{abc}}' '{' (⎕UCS 0)
⍝ data ← RestoreCurlies ExchangeDoubleCourlies data '}' (⎕UCS 1)
⍝ '{abc}' ←→ RestoreCurlies data
:While ∨/b←(2⍴what)⍷r
ind←⊃⍸b
r←(-ind-1)⌽new,2↓(ind-1)⌽r
:EndWhile
∇
RestoreCurlies←{
r←⍵
b←r=⎕UCS 0
(b/r)←'{'
b←r=⎕UCS 1
(b/r)←'}'
r
}
∇ (data oldStyleFlag remarks)←EvaluateINIs filenames;dm;en;this;buffer;buffer2;bool;flag;remarks2
data←'' ⋄ oldStyleFlag←⍬ ⋄ remarks←''
:For this :In filenames
:If 0=≢buffer←⊃⎕NGET this 1
:Return
:EndIf
buffer←(,∘⊂⍣(⊃1=|≡buffer))buffer
buffer←{(0=+/b←(⎕UCS 9)=w←⍵):w ⋄ (b/w)←' ' ⋄ w}¨buffer    ⍝ Transform TAB into blanks
buffer~¨←⎕UCS 10                                          ⍝ Remove any LF characters
buffer←{0 1∊⍨≡⍵:⊂⍵ ⋄ ⍵}buffer
⍝buffer←{(0<∊⍴∘,¨⍵)⌿⍵}buffer  ⍝ No: in order to report line numbers we can't do this
buffer2←↑,buffer
bool←{a∨≠\a←⍵=''''}buffer2
((,bool)/,buffer2)←' '
remarks2←(';'⍳⍨¨⊂[2]buffer2)↓¨buffer
buffer←(¯1+';'⍳⍨¨⊂[2]buffer2)↑¨buffer
buffer←RemoveInBetweenBlanks¨A.DLB A.DTB buffer
(flag dm en)←CheckValues buffer this
⍎dm Signal en
data,←buffer
remarks,←remarks2
oldStyleFlag,←flag
:EndFor
oldStyleFlag←∨/oldStyleFlag
∇
∇ CallCreate IniFilename
:If 0 1∊⍨≡IniFilename
:AndIf 0≠≢IniFilename
IniFilename←,⊂IniFilename
:EndIf
:Trap (~_debugFlag)/911
Create IniFilename
:Else
⍎({(911≡⍵)∨⍬≡⍵:11 ⋄ ⍵}_EN)Signal⍨1⊃⎕DM
:EndTrap
∇
Signal←{
dm←⍺
en←⍵
(0∊⍴en):''
(0=en):''
debugFlag←{(0<⎕NC ⍵):⍎⍵ ⋄ 0}'_debugFlag'
debugFlag:en{⎕←⍵ ⋄ ⎕←⍺ ⋄ '.'}dm
'''',({⍵↑⍨255⌊⍴,⍵}DoubleQuotes dm),''' ⎕SIGNAL ',⍕en
}
∇ r←GetComputerName
:If Reg.IsWindows
r←2 ⎕NQ'#' 'GetEnvironment' 'Computername'
:Else
r←⊃⎕SH'uname -n'
:EndIf
∇
∇ r←Timestamp2Float ts
⍝ yyyymmdd.hhmmss←Timestamp2Float ⎕TS
r←{1E¯9×0 100 100 100 100 100 1000⊥7↑⍵}ts
∇
DoubleCurlies←{
(~'{'∊r←⍵):r
(('{'=r)/r)←⊂'{{'
r←⊃,/r
(('}'=r)/r)←⊂'}}'
⊃,/r
}
:EndClass
r←A
:If 0<⎕NC'APLTreeUtils2'
r←APLTreeUtils2
:ElseIf 0<##.⎕NC'APLTreeUtils2'
⍝ Hack required when MarkAPL is used by Tatin: cannot be loaded as a package
r←##.APLTreeUtils2
:Else
'APLTreeUtils2 is missing?!'⎕signal 6
:EndIf
(
'## Overview'
''
'MarkAPL converts Markdown to valid HTML5.'
''
'The Markdown can be specified in two ways:'
''
'* On a vector of text vectors.'
'* On a filename.'
''
'## How to get help'
''
'In order to view MarkAPL''s cheat sheet execute this:'
''
'~~~'
'#.MarkAPL.Help 0'
'~~~'
''
'If you need comprehensive information call:'
''
'~~~'
'#.MarkAPL.Reference 0'
'~~~'
''
'## Examples'
''
'### Creating an HTML file from a Markdown file'
''
'~~~'
'report←#.MarkAPL.ConvertMarkdownFile ''C:\MyMarkdown.md'''
'~~~'
''
'This converts the Markdown in the file `C:\MyMarkdown.md` into fully-fledged'
'HTML and writes it to a file `C:\MyMarkdown.html`.'
''
'`report` is ideally empty but might be a vector of text vectors with warnings or even error messages.'
''
'The example uses just defaults. Instead you can specify parameters via a namespace passed as the optional left argument. '
'See further down an example how to do this with the `Markdown2HTML` method.'
''
'### Creating HTML from Markdown'
''
'Of course you can also convert Markdown from a variable in the workspace:'
''
'~~~'
'MyMarkdown←''# MarkAPL'' ''All about **_MarkAPL_**'''
'(html ns)←#.MarkAPL.Markdown2HTML MyMarkdown'
'~~~'
''
'This converts `MyMarkdown` into HTML. By default the HTML is just a snippet, not a fully-fledged HTML page. You can change that:'
''
'~~~'
'parms←#.MarkAPL.CreateParms'
'parms.outputFilename←''out.html'''
'(html ns)←parms #.MarkAPL.Markdown2HTML MyMarkdown'
']Open out.html'
'~~~'
''
'## Misc'
''
'|Homepage:    | <http://github.com/aplteam/MarkAPL> |'
'|Cheat sheet: | #.MarkAPL.Help 0 |'
'|Reference:   | #.MarkAPL.Reference 0 |'
''
'Kai Jaeger'
)
CompressCSS←{##.CompressCSS ⍵}
ConvertMarkdownFile←{⍺←⊢ ⋄ 1:shy←⍺ ##.ConvertMarkdownFile ⍵}
parms←CreateHelpParms
parms←##.CreateHelpParms
r←CreateParms
r←##.CreateParms
Execute←{##.Execute ⍵}
Help←{⍺←⊢ ⋄ 1:shy←⍺ ##.Help ⍵}
r←History
r←##.History
Init←{##.Init ⍵}
MakeHTML_Doc←{⍺←⊢ ⋄ ⍺ ##.MakeHTML_Doc ⍵}
Markdown2HTML←{⍺←⊢ ⋄ 1:shy←⍺ ##.Markdown2HTML ⍵}
Matrix2MarkdownList←{##.Matrix2MarkdownList ⍵}
Matrix2MarkdownTable←{⍺←⊢ ⋄ ⍺ ##.Matrix2MarkdownTable ⍵}
Process←{##.Process ⍵}
Reference←{⍺←⊢ ⋄ 1:shy←⍺ ##.Reference ⍵}
r←Version
r←##.Version
AddAlignStyle←{
⍝ ⍺←1 : it is for <th>
⍝ ⍺←2 : it is for <td>  (default)
⍺←2
(⍺=1)∧⍵≡'center':''                ⍝ For ⍺←→1 (th): headers default to center anyway
(⍺=2)∧⍵≡'left':''                  ⍝ For ⍺←→2 (td): headers default to left anyway
' style="text-align: ',⍵,';"'
}
filename←recompileFlag AddAppropriateExtension filename
⍝ If ⍵ (a filename) has an extension it's just returned.
:If 0=≢3⊃⎕NPARTS filename
filename,←(1+recompileFlag)⊃'.html' '.md'
:EndIf
AddBookmarkClassName←{
sa←⍵  ⍝ Special attributes - they MAY contain a user-defined class name
0=+/'class="'⍷sa:sa,' class="bookmark_link"'
'class="'⎕R'&bookmark_link '⊣sa
}
anchor←AddBookmarkLink(level ns bookmarkName)
⍝ Add ID and HREF if that is okay with ns.parms.bookmarkLink
anchor←''
:If 0<ns.parms.bookmarkLink
:AndIf ns.parms.bookmarkLink≥level
anchor,←' href="#',bookmarkName,'" id="',bookmarkName,'"'
⍝ Make sure the class is assigned after ID/Href, otherwise you'll break `CheckInternalLinks`
anchor,←' class="autoheader_anchor"'
anchor←'<a',anchor,'>'
:EndIf
r←AllAllowedCharsInTag
r←⎕A,'abcdefghijklmnopqrstuvwxyz-_',⎕D
r←AllWhiteSpaceChars
r←⎕UCS 32 9 10 11 13
ns←AppendFootnoteDefinitions ns;i;footnote;html
html←''
html,←⊂'<div id="footnotes_div">'
html,←⊂'<hr>'
html,←⊂'<p><strong>',ns.parms.footnotesCaption,'</strong></p>'
html,←⊂'<ol>'
:For i footnote :InEach {(⍳≢⍵)⍵}ns.footnoteDefs[;2]
html,←⊂'<li id="fnref',(⍕i),'">',(⊃,/Tag¨footnote),'<a href="#fnref',(⍕i),'" class="footnote_anchor"></a>'
:EndFor
html,←'</ol>' '</div>'
ns.html,←html
⍝Done
Between←{⍵∨≠\⍵}
BringBackSpecialHtmlEntities←{
⍝ Bring back the three special HTML entities: &lt; and &gt; and &amp;
⍝ Needed in cases processed stuff must be processed again (TOC for example)
0=≢⍵:⍵
'&amp;'⎕R'\&'⊣'&gt;'⎕R'>'⊣'&lt;'⎕R'<'⊣⍵
}
BuildColumnHeader←{
⍺←0 ⍝ Default data type is 0 (Char)
dt←⍺
~':'∊(1↑⍵),¯1↑⍵:⍵((-dt)⌽':','-')
'::'≡2↑¯1⌽⍵:(1↓¯1↓⍵)':-:'
':'=⊃¯1⌽⍵:(¯1↓⍵)'-:'
':'=⊃⍵:(1↓⍵)'-:'
':-'
}
ns←CalculateHeaderNumbers ns;nos;current;level;lastLevel;i;bool;headers
current←6⍴0
:If 0<ns.parms.⎕NC'startHeaderNoWith'
current[1]←ns.parms.startHeaderNoWith-1
:Else
ns.parms.startHeaderNoWith←0
:EndIf
:If ∧/bool←CheckHeaders ns
bool←ns.headers[;1]∊{1=≢⍵:⍳⍵ ⋄ ⍵}ns.parms.numberHeaders
:If 0≠≢headers←bool⌿ns.headers
headers[;1]-←(⊃headers)-1
nos←(⊃≢headers)⍴0
lastLevel←1
:For i :In ⍳⊃≢headers
level←headers[i;1]
:If lastLevel>level
(level↓current)←0
:EndIf
current[level]+←1
nos[i]←⊂level↑current
lastLevel←level
:EndFor
(bool⌿ns.headers)[;4]←{⊃,/(⍕¨⍵),¨'.'}¨nos
:EndIf
:Else
ns.report,←⊂'Headers are ill-nested and need correction - check level(s) ',⍕⍸~bool
:EndIf
flag←CheckForHtmlBlock(markdown emptyLines topOfDocument);row
⍝ Returns 1 if `markdown` starts with an HTML block and 0 otherwise
flag←0
:If topOfDocument
:OrIf ⊃⍴'^<pre.*>' '^<script.*>' '^<style.*>'⎕S 0⍠('Greedy' 0)⊣⊃markdown  ⍝ <pre>, <script>, <style> don't require empty lines around them.
:OrIf ∆LastLineWasEmpty∨(⊃emptyLines)∧'<'=1↑⊃⊃1↓markdown                  ⍝ But it MAY have a blank leading line anyway!
row←⊃(⊃emptyLines)↓markdown
:If flag←'<'=1⍴row
:AndIf '<<'≢2⍴row
flag←0=≢'^<([a-zA-Z0-9]){3,6}://'⎕S 0⊣row                         ⍝ Tell implicit links (like <http://aplwiki.com>) from an HTML blocks; 3="ftp"; 6="mailto"
:EndIf
:EndIf
ns←CheckForInvalidFootnotes1 ns;ind;ids;mask;html;ind2
⍝ At this point if headers are converted to links automatically they must not carry a footnote ref (early)
:If 0<ns.parms.bookmarkLink
:AndIf 0<≢ind←⍸{≢'^#{1,6}'⎕S 2⍠('Greedy' 0)⊢⍵}¨ns.markdown
:AndIf 0<≢ind2←2+'\[\^[a-zA-Z]+\]'⎕S 2⊣ns.markdown[ind]
:AndIf 0<≢ind←ind[ind2]
ns.report,←⊂'Invalid footnote definition in auto-link headers: line(s) ',⊃{⍺,',',⍵}/⍕¨ind
:EndIf
ns←CheckForInvalidFootnotes2 ns;ind;ids;mask;html
⍝ At this point if we find any footnote refs they must be invalid, otherwise we wouldn't find them. (Let check)
:If ns.parms.checkFootnotes
:AndIf 0≠≢ns.html
html←FlattenHTML ns.html
mask←~GetMaskForCodeTags html
:AndIf 0≠≢html←mask/html
:AndIf 0≠≢ind←⍸'[^'⍷html
ids←ind{{⍵↑⍨¯1+⍵⍳']'}(⍺+1)↓⍵}¨⊂html
ns.report,←'Warning: invalid footnote: '∘,¨ids
:EndIf
CheckHeaders←{
ns←⍵
bool←({1=≢⍵:⍳⍵ ⋄ ⍵}ns.parms.numberHeaders)∊ns.headers[;1]
(-+/∧\~⌽bool)↓bool   ⍝ The highest levels might not be in use, so we need to drop them
}
ns←CheckInternalLinks ns;html;anchors;links
⍝ Checks all internal links for being correct (not pointing into nowhere land).
:If ns.parms.checkLinks
:AndIf 0≠≢ns.html
html←⊃,/ns.html
:AndIf 0≠≢html←(~GetMaskForCodeTags html)/html
anchors←GetBookmarkAnchors html
links←GetBookmarkLinks html
:AndIf 0≠≢links←(~links∊anchors)/links
ns.report,←'Invalid internal link: ['∘,¨links,¨']'
:EndIf
r←ns CheckOddNumberOfDoubleQuotes(txt type);mask;ind;escape;openFlag;i;msg
⍝ Check "txt". That can be anything: paragraph, cell, list item, header, blockquote ...
⍝ * If it contains no " or an even number nothing changes.
⍝ * A single one is escaped.
⍝ * When an odd number is found the last one is escaped and a warning is issued, because
⍝   that might well not be what the user intended to do.
r←' ',txt
msg←''
mask←~GetMaskForCode r
:If 0=≢ind←⍸mask\'"'=mask/r                      ⍝ No double quotes at all? Done!
r←txt
:ElseIf 1=≢ind                                        ⍝ Just one double quote? Done!
r←'`(.*?)`' '"'⎕R'&' '\\"'⊣txt                    ⍝ Escapes the " but ignores `code`
msg←'Warning: single double quote found in ',type
ns.report,←⊂msg,' (line ',(⍕ns.parms.lineNumberOffset+⊃ns.lineNumbers),')'
:Else
:If '\'∧.≠r[ind-1]                                ⍝ Nothing escaped?
:If 0=2|≢ind                                  ⍝ Even number of "?
r←txt
:Else                                         ⍝ No, number is odd
(txt[¯1+¯1↑ind])←⊂'\"'                    ⍝ Escape the last one.
r←⊃,/txt
msg←'Warning: odd number of double quotes found in ',type
ns.report,←⊂msg,' (line ',(⍕¯1+ns.parms.lineNumberOffset+⊃ns.lineNumbers),')'
:EndIf
:Else                                             ⍝ We have some `\"` so we need a loop
openFlag←1
txt←' ',txt
:For i :In ind
:If '\"'≢txt[i-1 0]
:If openFlag
openFlag←0
:Else
openFlag←1
:EndIf
:EndIf
:EndFor
r←1↓⊃,/txt
:EndIf
:EndIf
(noOf item)←CollectItem bl
⍝ Collects as many lines from `bl` as belong to what's a single list item.
⍝ bl:    All the lines a list may be compiled from.
⍝ The end is defined by one of:
⍝ * Empty line
⍝ * Line consisting of nothing but spaces
⍝ * The next list item (either numbered or bulleted, no matter what the indentation is)
⍝ Whatever comes first.
noOf←+/∧\0≠≢¨bl~¨' '
noOf←1++/∧\~IsHtmlList¨1↓noOf↑bl
item←FlattenNestedItem noOf↑bl
(noOf para)←CollectItemPara bl;options;buff
⍝ Collects as many lines from `bl` as belong to what's a paragraph.
⍝ bl:    All the lines a list may be compiled from.
⍝ indentation:   Number of blanks defining the indentation. May be zero.
⍝ ←:     [1]=Number of lines in bl the para is made of; [2]=the para as such
⍝ Note: this function must be called only when at least ⊃bl is a para indeed.
:If 1=noOf←+/∧\0≠≢¨bl
para←⊃bl
:Else
noOf←1++/∧\0=IsHtmlList¨1↓noOf↑bl
options←('Mode' 'M')('EOL' 'CR')('DotAll' 1)
para←A.DLB⊃,/' ',¨noOf↑bl
:EndIf
toc←CollectToc ns;ind;buff;level;caption;IDs;bool
toc←⍬
:If 0≠≢ind←'<h[1-6][ >]'⎕S 2⍠('Greedy' 0)⊣ns.html
level←{⊃A.ToNum 1↑2↓⊃'<h[1-6].*>'⎕S{⍵.Match}⍠('Greedy' 0)⊣⍵}¨ns.html[ind+1]
caption←{1↓¨(-1+≢'<hx>')↓¨{⊃'\>.*\</h[1-6]>'⎕S{⍵.Match}⍠('Greedy' 0)⊣⍵}¨⍵}ns.html[1+ind]
caption←{0=≢⍵:⍵ ⋄ '&lt;' '&gt;' '&amp;' '<code.*>' '</code>'⎕R('<' '>' '\&' '`' '`')⍠('Greedy' 0)('Mode' 'L')⊣⍵}¨caption
IDs←{⊃'data-id="[^"]*"'⎕S{⍵.Match}⊣⍵}¨ns.html[ind+1]
((0=⊃¨1↑¨0⍴¨IDs)/IDs)←⊂''
toc←↓(level,[1.5]caption),IDs
(3⊃¨toc)←{0=≢⍵:⍵ ⋄ ¯1↓⍵↓⍨⍵⍳'"'}¨3⊃¨toc
bool←{2<+/{⍵∨≠\⍵}⍵='"'}¨IDs
:AndIf 0≠≢toc←bool⌿toc
toc,¨←ns.headerLineNos
:EndIf
CompileAttribute←{
attr←⍵
0≠2|'"'+.=attr:'Special attributes: invalid nunmber of "'⎕SIGNAL 11
mask←Between'"'=attr
0<+/mask:' ',attr
⊃{⍺,'="',⍵,'"'}/'='A.Split attr
}
CompileAttributes←{
sp←⍺
attrs←A.DMB ⍵
attrs←CompileAttribute¨attrs
1=≢attrs:sp⊣sp.r,←' ',⊃attrs
sp.r,←⊃{⍺,' ',⍵}/attrs
sp
}
CompileBookMarkName←{
⍝ Returns the bookmark name
⍺←1
bookmarkMayStartWithDigit←⍺
(txt specialAttrs)←⍵
txt←BringBackSpecialHtmlEntities txt
r←GetIdFromSpecialAttributes specialAttrs
0≠≢r:{{⍵↑⍨¯1+⍵⍳'"'}⍵↓⍨⍵⍳'"'}r
r←txt
r←'&[A-Za-z]*;'⎕R''⊢r                 ⍝ Remove HTML entities (&{word}; only)
r←'<.+?>'⎕R''⊣r                       ⍝ Remove everything between <>
r←RemoveHTML r
r←'\[.*\]'⎕R''⊣r                      ⍝ Remove everything between []
r←'\(.*\)'⎕R''⊣r                      ⍝ Remove everything between ()
allowed←' ∆⍙_-',⎕D,⎕A,⎕C ⎕A
r←(r∊allowed)/r                       ⍝ Remove invalid characters
r←allowed{⍵↓⍨+/∧\~⍵∊⍺~⎕D}⍣(~bookmarkMayStartWithDigit)⊣r ⍝ Remove all leading digits if ~bookmarkMayStartWithDigit
r←A.DLB A.DTB r                           ⍝ Remove leading and trailing blanks
r←{0=≢⍵:⍵ ⋄ (⊃⍵)∊'∆⍙_',⎕D,⎕A,⎕C ⎕A:⍵ ⋄ ∇ 1↓⍵}r
((' '=r)/r)←'-'                       ⍝ Replace remaining blanks by hyphens
r
}
CompileClassNames←{
sp←⍺
sp.r,←' class="',(⊃{⍺,' ',⍵}/1↓¨⍵),'"'
sp
}
ns←CompileHelp(filename recompileFlag parms);ps;fn;b
⍝ Called by `Help` and `Reference`.
ns←⍬
parms←EstablishDefaultHomeFolder parms
:If ⎕NULL≡parms.cssURL
:AndIf {0=≢⍵:0 ⋄ (~':'∊⍵)∧'/'≠1⍴⍵}parms.screenCSS
:AndIf {0=≢⍵:0 ⋄ (~':'∊⍵)∧'/'≠1⍴⍵}parms.printCSS
parms.cssURL←parms.homeFolder{0=≢⍺:'.',⍵ ⋄ ⍺,⍵}'/Files'
:EndIf
:If (':'∊filename)∨'/'=1⍴filename
fn←CorrectSlash filename
:ElseIf './'≢2↑filename
fn←CorrectSlash F.PWD,'/',filename
:Else
fn←filename
:EndIf
parms.inputFilename←fn
:If 0=≢parms.inputFilename
:AndIf 0=F.IsFile parms.inputFilename←(⊃,/2↑⎕NPARTS fn),(1+recompileFlag)⊃'.html' '.md'
('Could not find "',parms.inputFilename,'"')⎕SIGNAL 6
:EndIf
:If 0=≢parms.outputFilename
parms.outputFilename←(⊃,/2↑⎕NPARTS fn),'.html'
:EndIf
:If |recompileFlag
:If 0=F.Exists parms.inputFilename
6 ⎕SIGNAL⍨'File "',parms.inputFilename,'" not found; set "homeFolder"'
:EndIf
:If 0=≢parms.outputFilename
parms.outputFilename←fn
:Else
fn←parms.outputFilename
:EndIf
ns←2⊃parms Markdown2HTML''
:EndIf
:If 0=parms.⎕NC'viewInBrowser'
parms.viewInBrowser←1
:EndIf
CompileID_Names←{
sp←⍺
sp.r,←' id="',(LowercaseID 1↓⍵),'"'
sp
}
CompilePara←{
para←⍵
para←('⍝'≠⊃¨para)/para  ⍝ Get rid of lines that start with a lamp symbol.
para←{'\'≠¯1↑⍵:⍵ ⋄ (¯1↓⍵),⎕UCS 13}¨para
para←(1↓⊃,/' ',¨para)
mask←GetMaskForCode para
{⍵/⍨(GetMaskForCode ⍵)∨~(∧\' '=⍵)∨('  '⍷⍵)∨⌽∧\' '=⌽⍵}para
}
parms←CompileParms parms
:If 0=≢parms
parms←CreateParms
:EndIf
parms←EstablishDefaultHomeFolder parms
:If ⎕NULL≡parms.cssURL
parms.cssURL←'file://',F.NormalizePath({0=≢⍵:'.',⍵ ⋄ ⍵}parms.homeFolder),'/Files/'
:EndIf
parms.cssURL←F.AddTrailingSep parms.cssURL
parms.cssURL←{'/'@(⍸⍵='\')⊣⍵}parms.cssURL
parms.(inputFilename outputFilename)←1 CorrectSlash¨parms.(inputFilename outputFilename)
parms.(cssURL screenCSS printCSS)←0 CorrectSlash¨parms.(cssURL screenCSS printCSS)
⍝Done
css←CompressCSS css;start;end;mask;bool;flag;b1;b2;b
:Access Public Shared
⍝ Takes CSS and compresses it to a single line.
⍝ Along the way it...
⍝ * removes all comments
⍝ * removes any spaces around `;:{}`
⍝ * replaces <TAB> chars by spaces
⍝ * removes multiple spaces
⍝
⍝ Note that this method can have desastrous results when performed on non-valid CSS!\\
⍝ Throws an error in case something is not right with the CSS.
css←{(1↓⊃,/(⎕UCS 13),¨⍵)}⍣(1≠≡css)⊣css
start←'/*'⍷css
end←'*/'⍷css
mask←~{⍵∨≠\⍵}css='"'
'Cannot compress CSS: number of occurrences of /* and */ are different'⎕SIGNAL 11/⍨0=≡/+/¨mask∘/¨start end
'Cannot compress CSS: Invalid nested comments'⎕SIGNAL 11/⍨0≠≢(∪⊃-/+\¨start end)~0 1
start∧←mask
end∧←mask
bool←~{⍵∨≠\⍵}start∨end
bool[1+⍸end]←0
css←bool/css
css←A.DMB css~⎕TC
((css=⎕UCS 9)/css)←' '
mask←~{⍵∨≠\⍵}css='"'
b1←mask\mask/⊃∨/' :' ' ;' ' {' ' }'⍷¨⊂css
b2←mask\mask/⊃∨/': ' '; ' '{ ' '} '⍷¨⊂css
b←~b1∨0,¯1↓b2
css←b/css
⍝Done
r←ConvertEscapedAmpersand md;b;m
r←'\\&'⎕R'\&amp;'⊣md
⍝Done
ConvertH1AndH2HeadersToH3←{
⍝ This is called within any Aside (LeanPub extension) as well as by ProcessMarkAPLExtensions (collapsibles).
⍝ Since screen readers read out any <h1> and <h2> tags we convert them to <h3> which is a common strategy.
html←⍵
html←'<h1>' '<h2>'⎕R'<h3>'⊣html
'</h1>' '</h2>'⎕R'</h3>'⊣html
}
(html report)←ConvertMarkdown2HTML markdown;parms;ns
⍝ `markdown` may come from an aside (= LeanPub extension like `A> `) or a collapsible (`^> `).
⍝ This requires to be converted to HTML with MarkAPL but without...
⍝ * header anchors
⍝ * numbering headers
⍝ etc.
parms←CreateParms
parms.numberHeaders←0
parms.bookmarkLink←0
parms.createFullHtmlPage←0
parms.verbose←0
parms.ignoreEmbeddedParms←1
parms.div_h_tag←0
(html ns)←parms Markdown2HTML markdown
html←ConvertH1AndH2HeadersToH3 html
report←ns.report
⍝Done
{report}←{parms}ConvertMarkdownFile filename;ns
⍝ Converts the contents of `filename` to HTML5. The output filename equals `filename` except that
⍝ the extension changes from `.md` to `.html`.\\
⍝ This can be overwritten by specifying a parameter space as left argument (typically created
⍝ by calling `CreateParms`) and setting `outputFilename`.\\
⍝ If no left argument is passed then defaults take place, in particular regarding the CSS.\\
⍝ Note that by default `ConvertMarkdownFile` creates a fully-fledged HTML page.\\
⍝ The result is either an empty text vector or a vector of text vectors. It may contain warnings or error
⍝ messages. It's what is returned by `Init` on `ns.report`.
parms←{0=⎕NC ⍵:CreateParms ⋄ ⍎⍵}'parms'
:If 0<≢filename
:AndIf filename≢parms.inputFilename
('Both parms.inputFilename and ⍵ are not empty?!')⎕SIGNAL 11/⍨0<≢parms.inputFilename
parms.inputFilename←F.NormalizePath filename
:Else
filename←parms.inputFilename
:EndIf
parms.createFullHtmlPage←(1+¯1≡parms.createFullHtmlPage)⊃parms.createFullHtmlPage 1
:If 0=≢parms.outputFilename
parms.outputFilename←F.NormalizePath∊(¯1↓⎕NPARTS filename),'.html'
:EndIf
ns←Init parms''
ns←Process ns
:If parms.createFullHtmlPage
ns.html←ns.parms MakeHTML_Doc ns.html
:EndIf
(⊂ns.html)⎕NPUT parms.outputFilename 1
report←ns.report
⍝Done
to←from CopyTo to;id;value;flag
⍝ ⍺ is typically something like embedded parms while ⍵ are THE parms
:For id :In ' '~¨⍨↓from.⎕NL 2
:If flag←0=to.⎕NC id
value←from.⍎id
:Else
:If flag←¯1≢value←to.⍎id
flag←~0=≢value
:EndIf
:EndIf
:If flag
id to.{⍎⍺,'←⍵'}value
:EndIf
:EndFor
CorrectSlash←{
⍝ ⍺ is a Boolean that decides whether ⍵ shall be normalized (1) or not (0).
⍝ For everything that points to the local file system we want normalization,
⍝ but for stuff that potentially points elsewhere (like `cssUrl`) we don't want that:
⍝ We don't necessarily know the OS over there!
⍝ Default is normalization.
⍝ Leave any kind of protocol alone like "http://" etc. but also stuff like "foo://".
⍺←1
ss←'://' ⍝ Search string
0=+/bool←ss⍷⍵:F.NormalizePath⍣(⊃⍺)⊣⍵
length←(¯1+≢ss)+bool⍳1
r←(length↑⍵),F.NormalizePath⍣(⊃⍺)⊣length↓⍵
0='file://'{((⊃(≢⍺)↓⍵)∊'\/')∧⍺≡(≢⍺)↑⍵}r:r
'file:///',(1+≢'file://')↓r
}
parms←CreateHelpParms
parms←CreateParms
parms.linkToCSS←0
parms.toc←2 3
parms.numberHeaders←2 3 4 5 6
parms.bookmarkLink←6
parms.viewInBrowser←1
parms.compressCSS←1
parms.title←'MarkAPL Reference'
parms.width←1100
parms.reportLinks←1
md←CreateMarkdownFromUrlAndLinkText(urls linkTexts);url;linkText;i;buff
md←''
i←0
:For url linkText :InEach urls linkTexts
i+←1
buff←'* <',url,'>'
:If url≢linkText
buff←'* {{{{{',(⍕i),'}}}}}:<br>',url
:EndIf
md,←⊂buff
:EndFor
r←CreateParms;clp;SetTo
⍝ Returns a parameter namespace with default values. Use method `∆List` to list all names and their values.\\
⍝ For a documentation of all parameters refer to the MarkAPL reference. Call `MarkAPL.Reference 0` for that.
r←⎕NS''
clp←GetCommandLineParms''
SetTo←{0=clp.⎕NC ⍺:⍎'r.',⍺,'←⍵' ⋄ ⍎'r.',⍺,'←clp.⍎⍺'}  ⍝ Take command line parms or default
'bookmarkLink'SetTo 6
'bookmarkMayStartWithDigit'SetTo 1
r.debug←A.IsDevelopment
'charset'SetTo'utf-8'
'checkFootnotes'SetTo r.debug
'checkLinks'SetTo r.debug
'compressCSS'SetTo 1
'copy2ClipboardBtn'SetTo 1
'copyCaption'SetTo'Copy'
'copiedCaption'SetTo'Copied'
'createFullHtmlPage'SetTo ¯1
'cssURL'SetTo ⎕NULL
'div_h_tag'SetTo 1
'enforceEdge'SetTo 1
'footnotesCaption'SetTo'Footnotes'
'head'SetTo''
:If 0<##.⎕NC'TatinVars.HOME'
'homeFolder'SetTo⍎'##.TatinVars.HOME'
:Else
'homeFolder'SetTo''
:EndIf
'ignoreEmbeddedParms'SetTo 0
'imageURL'SetTo''
'inputFilename'SetTo''
'javaScript'SetTo 1
'lang'SetTo'en'
'leanpubExtensions'SetTo 0
'lineNumberOffset'SetTo 0
'linkToCSS'SetTo 0
'lowercaseID'SetTo 1
'markdownStrict'SetTo 0
'numberHeaders'SetTo 0
'noCSS'SetTo 0
'outputFilename'SetTo''
'printCSS'SetTo'Dark_print.css'
'reportLinks'SetTo 0
'reportLinksCaption'SetTo'Link report'
'saveHTML'SetTo ¯1                            ⍝ Meddy parameter
'screenCSS'SetTo'Dark_screen.css'
'smoothScrolling'SetTo 1
'subTocs'SetTo 1
'startHeaderNoWith'SetTo 1
'syntaxSugar'SetTo 1
'title'SetTo ⎕NULL
'toc'SetTo 0
'tocCaption'SetTo'Table of contents'
'tocHideCaption'SetTo'Hide'
'tocShowCaption'SetTo'Show'
'verbose'SetTo r.debug
'width'SetTo 900
r.⎕FX'r←∆List;⎕IO' '⍝ List all variables and possible references in this namespace' '⎕IO←1' 'r←{⍵,[1.5]⍎¨⍵}⎕NL-2 9'
⍝Done
r←ns CreateTOC def;lastLevel;level;caption;id;no;bf;nf;co;ff
⍝ def:
⍝ [;1] level
⍝ [;2] caption
⍝ [;3] running no
⍝ [;4] id
r←⊂'<nav id="main_nav" class="toc">'
r,←⊂'<h2 id="toc-heading">',ns.parms.tocCaption,'</h2>'
:If ns.parms.javaScript
r,←⊂'<button id="toc-toggle" aria-controls="toc-list" aria-expanded="false">',ns.parms.tocShowCaption,'</button>'
:EndIf
r,←⊂''
r,←⊂'<div class="toc-container">'
r,←⊂'<ul id="toc-list"',(ns.parms.javaScript/' class="hide print"'),'>'
lastLevel←⊃⊃def
bf←(,0)≢,ns.parms.bookmarkLink        ⍝ Bookmark flag
nf←(,0)≢,ns.parms.numberHeaders       ⍝ Numbered flag
co←1                                  ⍝ Count opened lists
ff←1                                  ⍝ "First" flag
:For (level caption no id) :In ↓def
:If lastLevel<level
r,←⊂'<ul>'
co+←1
:ElseIf lastLevel>level
((≢r)⊃r),←'</li>'
r,←(lastLevel-level)⍴⊂'</ul>',(co>1)/'</li>'
co-←lastLevel-level
:ElseIf lastLevel=level
:AndIf ~ff
((≢r)⊃r),←'</li>'
:EndIf
caption←⊃ns ProcessInlineMarkUp caption
r,←⊂'<li class="toc-entry toc-h',(⍕level),'"><a href="#',(LowercaseID id),'">',caption,'</a>'
lastLevel←level
ff←0
:EndFor
r,←(0⌈co-1)⍴⊂'</li></ul></li>'
r,←⊂'</ul>'
r,←⊂'</div>'
r,←⊂'</nav>'
Create_NS←{
ns←⎕NS''
ns.markdown←''
ns.emptyLines←⍬
ns.leadingChars←''
ns.lineNumbers←⍬                              ⍝ Useful for reporting problems
ns.report←''                                  ⍝ That's how MarkAPL tells about potential problem.
ns.withoutBlanks←⍬
ns.footnoteDefs←0 2⍴''
ns.headerLineNos←⍬
ns.headers←0 4⍴''                             ⍝ Level, bookmark, caption, header numbers
ns.html←''                                    ⍝ Our result
ns.embeddedParms←0 2⍴''
ns.abbreviations←0 2⍴''
ns.linkRefs←⍬
ns.data←⍬
ns.(subToc toc)←⊂''
_←'parms'ns.⎕NS''
ns.parms.syntaxSugar←1
ns.parms.lang←'en'
ns
}
DeleteTrailingWhiteSpace←{
⍝ Blanks, Tabs, you name it.
⍝ See https://www.wikiwand.com/en/Whitespace_character for details.
⎕IO←1 ⋄ ⎕ML←1
(2=|≡⍵):∇¨⍵
ws←⎕UCS 9 10 11 12 13 32 133 160
(1=⍴⍴⍵):⌽{(+/∧\⍵∊ws)↓⍵}⌽⍵
}
DetectClosingTag←{
⍝ Find the tag
(md tag)←⍵
(∨/¨tag∘⍷¨md)⍳1
}
DetectClosingTagBeforeEmptyLine←{
⍝ Find the tag followed by a blank line
(md tag)←⍵
b←(∨/¨tag∘⍷¨md)∧((1↓0=≢¨md)),0
0=+/b:0
b⍳1
}
DetectOpeningTag←{
⍝ When this is called we know that the first char of the current line is a `<` character.
⍝ ⍺ is something like "<style" (Yes, without the closing >!)
⍝ We now need to find out whether it is really an HTML tag.
md←⍵                                  ⍝ Nested vector with all the Markdown
tag←⍺
0≠≢tag ⎕S 0⍠('IC' 1)⊣⊃md
}
Drop←{
ns←⍵
ns.(markdown markdownLC leadingChars emptyLines withoutBlanks lineNumbers)←ns.noOf↓¨ns.(markdown markdownLC leadingChars emptyLines withoutBlanks lineNumbers)
ns.noOf←1
ns
}
DropSpecialAttributes←{
specialAttrs←⍺
0=≢specialAttrs:⍵
'\'=1↑¯2↑⍵:⍵
buff←(⎕UCS 13)A.Split ⍵     ⍝ In case of <<BR>>!
tx←A.DTB⊃buff
'}'≠¯1↑tx:1↓⊃,/(⎕UCS 13),¨(⊂tx),1↓buff
~'{'∊tx:1↓⊃,/(⎕UCS 13),¨(⊂tx),1↓buff
tx←A.DTB{⌽⍵↓⍨⍵⍳'{'}1↓⌽tx
1↓⊃,/(⎕UCS 13),¨(⊂tx),1↓buff
}
DropSpecialImageAttributes←{
⍝ In general special attributes are always located at the end of an object
⍝ while an image might might well be inside something else like a para or a cell etc.
specialAttrs←⍺
0=≢specialAttrs:⍵
'\'=1↑¯2↑⍵:⍵
buff←(⎕UCS 13)A.Split ⍵     ⍝ In case of <<BR>>!
tx←A.DTB⊃buff
~'{'∊tx:⍵
no←¯1+tx⍳'{'
tx←no⌽⍵
(-no)⌽{⍵↓⍨⍵⍳'}'}tx
}
DropTailAfterClosingTag←{
html←⍵
tag←⍺
buff←(≢html)⊃html
buff←((¯1+≢tag)+1⍳⍨tag⍷⎕C buff)↑buff
((≢html)⊃html)←buff
html
}
EscapePipeSymbolInCell←{
⍝ ⍵ is a cell from any APL matrix.
⍝ We convert any | to \| (escaping) except when it lives within code
c←⍵
mask←~GetMaskForCode c     ⍝ We must ignore code
0=+/mask:c                 ⍝ Everything is code? Done!
b←'|'=mask/c               ⍝ Where are the | when we ignore the code?
0=+/b:c                    ⍝ None?! Done!
buff←mask/c                ⍝ Get what's not code
(b/buff)←⊂'\|'             ⍝ Replace all | by \|
(mask/c)←buff              ⍝ Put stuff back
⊃,/c                       ⍝ Simplify
}
r←{opCode}EscapeSpecialChars tx;b;b1;b2;b3;buff;ignore;replaceBy;replace
⍝ ⍵ is typically a line of a Markdown document.
⍝ Code is **not** masked here: we need to exchange "<>&" even in code.
⍝ See `EscapeSpecialCharsOutsideCode` if you don't want this to happen.
⍝ However, don't touch anything between "" inside <> (attribute definitions).
⍝ ⍺ may be 1 or 2 and defaults to 1; that means that "<<" remains untouched.
⍝ If ⍺ is 2 (typically ⍵ is nothing but code) then "&<>" are all converted.
⍝ The opcode allows for faster operation.
opCode←{0<⎕NC ⍵:⍎⍵ ⋄ 1}'opCode'
:If 0<≢r←tx
:If opCode=1
:If ∨/b←GetMaskForCode tx
buff←b/tx
b1←buff='&'
b2←buff='<'
b3←buff='>'
(b1/buff)←⊂'&amp;'
(b2/buff)←⊂'&lt;'
(b3/buff)←⊂'&gt;'
(b/tx)←buff
tx←⊃,/tx
:EndIf
ignore←''
ignore,←⊂'`[^`]+`'                     ⍝ Code blocks
ignore,←⊂'<!--.+-->'                   ⍝ SGML comments
ignore,←⊂'<![CDATA[.+]]>'              ⍝ SGML CDATA section
ignore,←⊂'\&[a-z][a-z0-9]*;'           ⍝ HTML entities by name
ignore,←⊂'\&#[0-9][0-9]*;'             ⍝ HTML entities by number
:If ns.parms.syntaxSugar
ignore,←⊂'(?<!<)<<(?!<)'
ignore,←⊂'(?<!>)>>(?!>)'
:EndIf
replace←''
replace,←⊂'(?<!\\)&'                   ⍝ Not "\&" ?
replace,←⊂'<[a-zA-Z][a-zA-Z0-9]*>'     ⍝ Opening tags pure
replace,←⊂'<[a-zA-Z][a-zA-Z0-9]* .+>'  ⍝ Opening tags with attributes
replace,←⊂'</[a-zA-Z][a-zA-Z0-9]*>'    ⍝ Closing tags
replace,←⊂,'<'
replace,←⊂,'>'
replaceBy←(,¨((≢ignore)⍴'&'),'\&amp;' '\0' '\0' '\0' '\&lt;' '\&gt;')
r←(ignore,replace)⎕R replaceBy⊣tx
:ElseIf opCode=2
r←'<'⎕R'\&lt;'⊣'>'⎕R'\&gt;'⊣'\&'⎕R'&amp;'⊣tx
:Else
.                                      ⍝ Huh?! Invalid left argument
:EndIf
:EndIf
⍝Done
EscapeSpecialCharsOutsideCode←{
⍝ ⍵ is typically a line of a Markdown document.
⍝ Code is masked here. If you don't want this see `EscapeSpecialChars`
0=≢⍵:⍵
((⊂'`.*?`'),,¨'<>&')⎕R'\0' '\&lt;' '\&gt;' '&amp;'⊢⍵
}
EstablishDefaultHomeFolder←{
p←⍵
⎕NULL≢p.homeFolder:p
this←⍕⎕THIS
p.homeFolder←Get_Home
p
}
result←ns ExecExternalFns y;fns;__arg;nc;dmx
result←''
(fns __arg)←{∨/' '''∊⍵:(¯1+⌊/⍵⍳' '''){(⍺↑⍵)(A.DLB ⍺↓⍵)}⍵ ⋄ ⍵ ⍬}y
nc←⎕NC⊂fns
:If 3≠⌊|nc
ns.report,←⊂'Unknown external function: <',fns,'>'
:Else
:If (1=×nc)∧0=2⊃1 ⎕AT fns
ns.report,←⊂'External function <',fns,'> is niladic but must not!'  ⍝ We cannot perform this check on class methods!
:Else
:Trap 0
⍎'result←',fns,' ns'
:If ¯1=×≡result
ns.report,←⊂'External function <',fns,'> is niladic but must not!'  ⍝ Only thiss can explain a negative result
result←''
:EndIf
:Case 2
:Trap 0
⍎'result←__arg ',fns,' ns'
:Else
ns.report,←⊂'External function <',fns,'> did crash'
:EndTrap
:Else
dmx←⎕DMX
⍝ At this stage it might be a dfn that requires a left argument, meaning that we have a VALUE ERROR on `⍺`!
:If 6=dmx.EN
:AndIf {'⍺'∊⍵/⍨{~⍵∨≠\⍵}⍵=''''}2⊃dmx.DM
:Trap 0
⍎'result←__arg ',fns,' ns'
:Else
result←''
ns.report,←⊂'External function <',fns,'> did crash'
:EndTrap
:Else
ns.report,←⊂'External function <',fns,'> did crash'
:EndIf
:EndTrap
:EndIf
:EndIf
r←Execute y
⍝ This is used for test purposes only: to execute non-public methods.
:Access Public Shared
'Invalid call'⎕SIGNAL 11/⍨~A.IsDevelopment
:If 0=⎕NC'ns'
⎕SHADOW'ns'
ns←Create_NS ⍬
:EndIf
r←⍎y
⍝Done
r←F
:If 0<⎕NC'FilesAndDirs'
r←FilesAndDirs
:ElseIf 0<##.⎕NC'FilesAndDirs'
⍝ Hack required when MarkAPL is used by Tatin: cannot be loaded as a package
r←##.FilesAndDirs
:Else
'FilesAndDirs is missing?!'⎕SIGNAL 6
:EndIf
FindFenceEnd←{
⍝ The end of a fence must have at last three ⍺ characters and may have leading and trailing blanks as well
⍝ but nothing else, in particular no special attributes.
⍝ ⍵ is a vector of Markdown vectors.
pattern←⍺
0≠≢noOf←1+(pattern,'\s{0,}$')⎕S 2⍠('Mode' 'L')⊣⍵:1+⊃noOf
1+≢⍵            ⍝ To the end of the document!
}
FlattenHTML←{
⍝ Typically used to flatten ns.html
⍝ Bring back with :
⍝ ns.html ←→ (⎕Ucs 13) A.Split FlattenHTML ns.html
1↓⊃,/(⎕UCS 13),¨⍵
}
FlattenNestedItem←{
item←⍵
1=≢item:⊃item
1↓⊃,/' ',¨A.DLB item
}
hits←GatherFootNoteReferences ns;i;id;footnote;mask;bool;row;ind
⍝ Finds all the references to footnotes in the HTML
⍝ `hits` is a matrix with 4 columns:
⍝ [;1] Number
⍝ [;2] Original name
⍝ [;3] Row in ns.html where a hit was found
⍝ [;4] Index of the hit in that row.
hits←0 4⍴⍬
:For i id footnote :In ↓(⍳⊃⍴ns.footnoteDefs),ns.footnoteDefs
mask←{~Between⊃∨/'<code>' '</code>'⍷¨⊂⍵}¨ns.html
:If 0<+/∊bool←('[^',id,']')∘⍷¨mask/¨ns.html
:For row :In ⍸∨/¨bool
ind←1⍳⍨('[^',id,']')⍷row⊃ns.html                                      ⍝ Only the first one is taken into account
:If 0≠≢ind←(~ind∊⍸GetMaskForCodeTags row⊃ns.html)/ind  ⍝ Remove those between <code tags
hits⍪←i,(⊂id),row,ind
:EndIf
:EndFor
:EndIf
:EndFor
hits←{⍵[⍒⍵[;3];]}{⍵[⍒⍵[;4];]}hits   ⍝ It's essential to turn them around!
GetAllLinkRefs←{
⍝ This combs through the html and finds all link references ([][]-syntax).
⍝ Ignores inline code.
⍝ Returns a three-item-vector for each hit.
⍝ [1] The link text - that can by anything.
⍝ [2] The ref id. That's what we hope to find in ns.linkRefs later on.
⍝     This must be US ASCII letters and digits and nothing else, not even white space.
⍝ [3] The match - -everything between the opening [ and the closing ], including [].
html←⍵
mask←GetMaskForCodeTags¨html
maskedHtml←mask{⎕ML←3 ⋄ 0=+/⍺:⍵ ⋄ w←⍵ ⋄ (⍺/w)←' ' ⋄ w}¨html
hits←↓⍉↑'\[[^\]]*\]\[[^\]][A-Za-z0-9-_]*\]'⎕S(0 1 2)⊣maskedHtml
0=≢∊hits:hits
html∘GetLinkRef¨↓⍉↑hits
}
name←{ns}GetBookMarkNameFromCaption(txt specialAttrs)
⍝ Remove all formatting, links, etc.
⍝ Remove everything between <>, () and [].
⍝ Remove all punctuation except underscores, hyphens, and periods.
⍝ Remove all HTML &{word}: entities
⍝ Remove all code.
⍝ Remove HTML.
⍝ Remove leading and trailing spaces.
⍝ Replace all remaining spaces with hyphens.
⍝ Convert all alphabetic characters to lowercase.
⍝ Remove everything up to the first letter or `∆⍙`.
⍝ If nothing is left after this, use `section` as identifier.
ns←{
0<⎕NC ⍵:⍎⍵
r←⎕NS''
r.headerLineNos←⍬
r.headers←0 3⍴''
r.lineNumbers←0
r.report←''
r.parms←⎕NS''
r.parms.bookmarkMayStartWithDigit←1
r.parms.lineNumberOffset←0
r
}'ns'
:If 0={0=⍵.⎕NC'parms.bookmarkLink':1 ⋄ ⍵.parms.bookmarkLink}ns
name←''
:Else
name←ns.parms.bookmarkMayStartWithDigit CompileBookMarkName txt specialAttrs
:If 0=≢name                              ⍝ Nothing left?
name←'section'                       ⍝ Go for the name section
ns.report,←⊂'Warning: header on line ',(⍕ns.parms.lineNumberOffset+⊃ns.lineNumbers),': no bookmark name left; name assigned'
:EndIf
:If (⊂LowercaseID name)∊ns.headers[;2]   ⍝ Does this bookmark already exist?
name←1{n←⍵,'-',⍕⍺ ⋄ ~(⊂n)∊ns.headers[;2]:n ⋄ (1+⍺)∇ ⍵ ⋄ }LowercaseID name  ⍝ Append a number to `name`
ns.report,←⊂'Warning: header on line ',(⍕ns.parms.lineNumberOffset+⊃ns.lineNumbers),': ambiguous name; number added'
:EndIf
:EndIf
anchors←GetBookmarkAnchors html;buff
⍝ There are three different types of bookmark anchors:
⍝ * Headers (auto-generated; they have the class "autoheader_anchor")
⍝ * Footnotes (they have the class "footnote_anchor")
⍝ * Those with an ID assigned by special attributes or as part of an HTML block)
⍝ For that reason we need to take anything into account that carries an ID though
⍝ they might carry that ID only to be stylable with CSS.
anchors←''
buff←'<'A.Split html
:If 0≠≢buff←(∨/¨'id="'∘⍷¨buff)/buff
:AndIf 0≠≢anchors←(∨/¨' id="'∘⍷¨buff)/buff
anchors←{⍵{0=≢⍵:'' ⋄ {⍵↑⍨¯1+⍵⍳'"'}(+/⍵)↓⍺}⊃'id="'⎕S 0 1⊣⍵}¨anchors
:EndIf
⍝Done
links←GetBookmarkLinks html;buff
⍝ Those have the class "bookmark_link" or "footnote_link" assigned in case they are generated via Markdown.
⍝ However, if they are part of an HTML block then they might or not have any class assigned to them.
⍝ Therefore we need to take anything into account that carries an HREF attribute.
links←''
:If 0≠≢buff←'<'A.Split html
:AndIf 0≠≢links←(∨/¨' href="'∘⍷¨buff)/buff
links←{⍵{0=≢⍵:'' ⋄ {⍵↑⍨¯1+⍵⍳'"'}(+/⍵)↓⍺}⊃'href="'⎕S 0 1⊣⍵}¨links
links←1↓¨('#'=⊃¨links)/links
:EndIf
r←indendations GetCodeBlockFrom list;fence;pattern;bool;noOf
r←''
fence←⊃(⊃list)~' '
:If fence∊'~`'
pattern←'^\s{0,',(⍕indendations),'}',fence,'{3,}'
:AndIf 0≠≢pattern ⎕S 0⊣⊃list
:AndIf 0<+/bool←pattern∘{⊃⍴⍺ ⎕S 0⍠('Mode' 'L')('Greedy' 0)⊣⍵}¨1↓list
noOf←2++/∧\~bool
r←noOf↑list
:EndIf
GetCommandLineParms←{
⍺←1↓2 ⎕NQ #'GetCommandLineArgs'
arg←⍺
r←⎕NS''
clp←{⍵/⍨'-'≠⊃¨⍵}arg
0=≢clp:r
0=≢clp←{⍵/⍨'='∊¨⍵}clp:r
clp←'='A.Split¨clp
_←r.{⍎⍺,'←',{'''',⍵,''''}⍣(0∊⊃⎕VFI ⍵)⊢⍵}/¨clp
r
}
r←GetCopyCodeJavaScript parms;copyCaption
⍝ Returns the JavaScript that adds a "Copy" button to every `<pre>` and established the handler for the "Click" event.
r←⊂''
:If parms.copy2ClipboardBtn
r←''
copyCaption←' ',(⎕UCS 128203),' '
copyCaption←' ',parms.copyCaption,' '
r,←⊂''
r,←⊂'// Adds a "Copy" button to every code block & established the event handler'
r,←⊂'const copyButtonLabel = "',(copyCaption),'" ;'
r,←⊂''
r,←⊂'let blocks = document.querySelectorAll("pre");'
r,←⊂''
r,←⊂'blocks.forEach((block) => {'
r,←⊂'  if (navigator.clipboard) {'
r,←⊂'    let button = document.createElement("button");'
r,←⊂''
r,←⊂'    button.innerText = copyButtonLabel;'
r,←⊂'    button.title = "Copies the code block to the clipboard.";'
r,←⊂'    block.appendChild(button);'
r,←⊂'     '
r,←⊂'    button.addEventListener("click", async () => {'
r,←⊂'      await copyCode(block, button);'
r,←⊂'    });'
r,←⊂'  }  '
r,←⊂'});  '
r,←⊂''
r,←⊂'async function copyCode(block, button) {'
r,←⊂'  let code = block.querySelector("code");'
r,←⊂'  let text = code.innerText;'
r,←⊂''
r,←⊂'  await navigator.clipboard.writeText(text);'
r,←⊂''
r,←⊂'  button.innerText = " ',parms.copiedCaption,' ";'
r,←⊂''
r,←⊂'  setTimeout(() => {'
r,←⊂'    button.innerText = copyButtonLabel;'
r,←⊂'  }, 700);'
r,←⊂'}'
r,←⊂''
:EndIf
r←GetCurrentDir
r←¯1↓⊃1 ⎕NPARTS''
r←GetEmptyLines md
⍝ Returns vector of Booleans for those lines that are empty.
⍝ Note that empty lines within code blocks are **ignored**!
r←0=≢¨md
r∧←~WhereAreCodeBlocks md
GetFooter←{
strict←⍺
strict:''⍵ ⍝ No footers
cells←⍵
0=+/bool←{'='∧.=⊃,/⍵}¨cells:''cells
ind←¯1+bool⍳1
((1+ind)↓cells)(ind↑cells)
}
GetIdFromSpecialAttributes←{
⍝ 'id="foo"' ←→ GetIdFromSpecialAttributes 'class="qwe" id="foo" style="color:red;"'
0=≢buff←⊃'\sid="[^"]*."'⎕S(0 1)⊣⍵:''
(ind length)←buff
length↑(ind+1)↓⍵
}
GetInfoString←{
⍺←3
indendation←⍺
md←⍵
fence←⊃md~' '
0=≢md←(+/∧\md=fence)↓md:''
0=≢md←(¯1+md⍳'{')↑md:''               ⍝ Remove special attributes (if any)
pattern←'^\s{0,',(⍕indendation),'}',fence,'{3,}'
0=≢infoString←A.DLB A.DTB pattern ⎕R''⊣md:''
(~fence∊infoString)/infoString        ⍝ Any info string must not contain a fencing character
}
r←GetJavaScriptForPrintingCollapsibles
r←''
r,←⊂''
r,←⊂'// Function that makes sure that all "Collapsibles" are extended (open) when printing'
r,←⊂'// We have to make sure that everything is going to be printed'
r,←⊂'window.matchMedia("print").addEventListener("change", evt => {'
r,←⊂'    if (evt.matches) {'
r,←⊂'        elms = document.body.querySelectorAll("details:not([open])");'
r,←⊂'        for (e of elms) {'
r,←⊂'            e.setAttribute("open", "");'
r,←⊂'            e.dataset.wasclosed = "";'
r,←⊂'        }'
r,←⊂'    } else {'
r,←⊂'        elms = document.body.querySelectorAll("details[data-wasclosed]");'
r,←⊂'        for (e of elms) {'
r,←⊂'            e.removeAttribute("open");'
r,←⊂'            delete e.dataset.wasclosed;'
r,←⊂'        }'
r,←⊂'    }'
r,←⊂'})'
r,←⊂'// End "PrintingCollapsibles"'
r,←⊂''
⍝Done
r←GetJavaScriptForTogglingTOC parms
r←''
r,←⊂''
r,←⊂'// Toggle the visibility of the TOC when the "Hide/Show" button is clicked'
r,←⊂'const button = document.querySelector("#toc-toggle");'
r,←⊂'const content = document.querySelector("#toc-list");'
r,←⊂'button.addEventListener("click", toggleTableOfContents);'
r,←⊂'function toggleTableOfContents() {'
r,←⊂'  content.classList.toggle("hide");'
r,←⊂'  if (button.innerText === "',parms.tocHideCaption,'") {'
r,←⊂'    button.innerText = "',parms.tocShowCaption,'";'
r,←⊂'    button.setAttribute("aria-expanded", false);'
r,←⊂'  } else {'
r,←⊂'    button.innerText = "',parms.tocHideCaption,'";'
r,←⊂'    button.setAttribute("aria-expanded", true);'
r,←⊂'  }'
r,←⊂'}'
r,←⊂''
GetLengthOfLeadingWhitespacePlusListMarker←{
⍝ 9 ← ∇ '  123)   List item'
⍝ 0 ← ∇ 'List item'
⊃'^\s*?\b\d{1,9}\b[.)]\s+' '^\s*?[-*+]{1}\s+'⎕S 1⊢⍵
}
GetLinkRef←{
html←⍺
(start length row)←⍵
row+←⎕IO
buff←row⊃html
match←(⊂start+⍳length)⌷buff
'[]['≡3↑match:''(¯1↓3↓match)match
(linkText id)←{⎕ML←3 ⋄ 0 2↓¨(1++\']['⍷⍵)⊂⍵}¯1↓1↓match
linkText id match
}
GetListBlock←{
bl←⍵
mask←~Between{⊃3>≢⍵:0 ⋄ (⊂3⍴⍵)∊'```' '~~~'}¨bl~¨' '
bl←(⌊/(~(≢bl)⍴ns.emptyLines)⌿+/∧\' '=↑bl)↓¨bl
(mask/bl)←HandleEscapedNewLines mask/bl
leadingBlanks←+/∧\' '=↑bl
drop←{⍵⌊⊃⍵}leadingBlanks
drop↓¨bl
}
markdown←GetMarkdown markdown;length
:If 0=≢markdown
'Neither "markdown" nor "inputFilename" are set?!'⎕SIGNAL 6/⍨0=≢parms.inputFilename
markdown←⊃⎕NGET parms.inputFilename 1
:EndIf
markdown←,,¨markdown
'Invalid Markdown (depth)'⎕SIGNAL 11/⍨2≠|≡markdown
'Invalid Markdown (depth)'⎕SIGNAL 11/⍨(,1)≢∪≡¨markdown
length←≢markdown
:If length>≢markdown←'\t'⎕R(4⍴' ')⍠('Mode' 'M')⊣markdown              ⍝ Replace all <TAB> chars by 4 spaces
markdown,←(length-≢markdown)⍴⊂''                                  ⍝ In order to overcome bug <01446>
:EndIf
markdown←{0=+/b←(⎕UCS 0)=⍵:⍵ ⋄ w←⍵ ⋄ (b/w)←⎕UCS 65533 ⋄ w}¨markdown   ⍝ Replace U+0000 by U+FFFD for secutity reasons
⍝Done
r←GetMaskForCode txt;on;txt_;ind;in;i;noOf;k;bool
⍝ Returns a mask (vector of Booleans with zeros for all APL code in ⍵.
⍝ Does not fall over odd number of tick: the last one is then ignored.
⍝ Honors escaped backticks when found outside a code block.
⍝ This can only be solved in a loop because of, say, this:  `\\`
⍝ This is a code block with two backslashes, not an opening backtick followed by an escaped one!
txt_←' ',txt,' '
on←0
:If 0=≢ind←⍸txt_='`'
r←(≢txt)⍴0
:Else
r←(≢txt)⍴0
r←(2+≢txt)⍴0
i←0
:Repeat
i+←1
in←ind[i]
:If 0=on                          ⍝ No code block is "open" right now?
:If '\'≠txt_[in-1]            ⍝ Then an escape char in front of the ` must be honoured.
:AndIf i<≢ind                 ⍝ At least one more char to come? (results in ignoring the last in case of an odd number of backticks.
noOf←+/∧\'`'=(in-1)↓txt_  ⍝ How many consecutive backticks? The same number must be used to close it!
i+←0⌈noOf-1
:If 1=+/bool←'`'=(in+noOf)↓txt_      ⍝ Is there a corresponding ...      (single backtick)
:OrIf noOf∊{+/¨∧\¨1↓¨⍵⊂⍨0 1⍷⍵}0,bool                ⍝ ... closing block of backticks?   (more than one backtick)
r[in]←1
on←1                  ⍝ Code block "opened".
:Else
⍝ There is no corresponding closing block of backticks, so they did not open a block: they survive!
:EndIf
:EndIf
:Else
:If noOf=+/∧\'`'=(in-1)↓txt_  ⍝ Only the precise same number of backticks that opened a block can close it.
r[in+noOf-1]←1
i+←noOf-1
on←0                      ⍝ Code block "closed".
:EndIf
:EndIf
:Until i≥≢ind
r←{⍵∨≠\⍵}¯1↓1↓r
:EndIf
GetMaskForCodeTags←{
⍝ Returns a mask for everything between <code*> and </code>.
⍝ We can savely assume valid HTML5 here.
txt←⍵
r←(≢txt)⍴0=1
0=+/b←'</code>'⍷txt:r         ⍝ No closing tag? Done!
r[(¯1+≢'</code>')+⍸b]←1
ind←⍸'<code'⍷txt
ind←(txt[ind+≢'<code']∊'> ')/ind
r[ind]←1
Between r
}
r←GetRegExPatternForSubToc
r←''
r,←⊂'^<<subtoc>>'
r,←⊂'^<<subtoc *\{[^}]*}>>'
r,←⊂'^<<subtoc-[0-6]>>'
r,←⊂'^<<subtoc-[0-6] *\{[^}]*}>>'
GetSpecialAttributes←{
⍝ Checks whether ⍵ (a single line of Markdown) carries a "special attributes" definition.
⍝ If so it returns a vector of definitions.
⍝ Example:
⍝ 'id="foo" class="cl1 cl2" attr1="A B C" attr2=123' ←→ ∇ '{#foo .cl1 .cl2 attr1="A B C" attr2=123}'
⍝  'style="color=red;font-family='APL385 Unicode'"' ←→ ∇ 'style="color:red;font-family:'APL385 Unicode'"
md←A.DTB ⍵
('!['≡2⍴md)∧0=(+/'<<br>>'⍷md)++/'<br>'⍷md:''  ⍝ Might be a stand-alone image!
'}'≠¯1↑md:''
'\'=1↑¯2↑md:'' ⍝ Escaped?
~'{'∊md:''
0=≢def←A.DMB{¯1↓1↓⌽⍵↑⍨⍵⍳'{'}⌽md:''
mask←~Between'"'=def
defs←1↓¨(1,mask\' '=mask/def)⊂' ',def
0∊'='∊¨{⍵/⍨~(⊃¨⍵)∊'.#'}defs:''
0∨.≠2|'"'+.=¨defs:''
sp←⎕NS''          ⍝ Result space
sp.r←''           ⍝ Collects the result(s)
b←'.'=⊃¨defs      ⍝ All class definitions (if any)
sp{0=≢⍵:⍺ ⋄ ⍺ CompileClassNames ⍵}←b/defs
b←'#'=⊃¨defs      ⍝ An id definitions (if any)
1<+/b:'Invalid special attribute: more than one "id"'⎕SIGNAL 11
sp{0=≢⍵:⍺ ⋄ ⍺ CompileID_Names ⍵}←(b⍳1)⊃defs,⊂''
b←~(⊃¨defs)∊'#.'  ⍝ Any attribute defs
sp{0=≢⍵:⍺ ⋄ ⍺ CompileAttributes ⍵}←b/defs
sp.r/⍨←~''''''⍷sp.r  ⍝ APLers might specify double-quotes, so we remove them.
{⍵/⍨~'  '⍷⍵}sp.r
}
(url title)←GetUrlAndTitleFromLink link;noOf
⍝ Takes something like [Link Text](#A BookMark Link "The Title") and returns
⍝ '#a-bookmark-link` `The Title`
⍝ or [APL wiki](http://aplwiki.com "foo")
⍝ 'http://aplwiki.com' 'foo'
url←((link{⍵\⍵/⍺}~GetMaskForCode link)⍳']')↓link
url←(url⍳'(')↓url
url↓⍨←-{⍵⍳')'}⌽url
url←A.DTB url
((url='\')/url)←'/'
:If '"'=¯1↑url           ⍝ Has it a title?!
:AndIf 2≤'"'+.=url
noOf←1+{+/∧\1=+\⍵='"'}⌽url
title←¯1↓1↓(-noOf)↑url
url←A.DTB A.DLB(-noOf)↓url
:Else
title←''
:EndIf
:If 0=+/'://'⍷url         ⍝ Protocol
:AndIf 'mailto:'{⍺≢(≢⍺)↑⍵}url ⍝ Is not a "mailto" link
:AndIf '#'≠1⍴url          ⍝ Bookmark
:AndIf ':/'≢2⍴1↓url,'  '  ⍝ Absolute Windows path
:AndIf './'≢2⍴url,'  '    ⍝ Relative path
:AndIf '/'≠1⍴url          ⍝ Absolute UNIX path
:If '@'∊url
url←'mailto:',url
:EndIf
:EndIf
ns←HandleAbbreviations ns;html;abbr;comment;match2;match1;tag1;tag2;b;ignore;comment_
:If 0≠≢ns.abbreviations
html←ns.html
:For abbr comment :In ↓ns.abbreviations
comment←2 EscapeSpecialChars comment
:If ns.parms.syntaxSugar
comment←ns.parms SmartStuff comment
comment_←'&'⎕R'\\&'⊣comment         ⍝ & is a reserved character (Dyalog, not PCRE!)
:Else
comment_←{b←'&'=w←⍵ ⋄ (b/w)←⊂'\&' ⋄ ⊃,/w}comment_      ⍝ Escape "&"
:EndIf
tag1←'<abbr title="',comment_,'">\&ldquo;',abbr,'\&rdquo;</abbr>'   ⍝ &ldquo;=left double quote and &rdquo;=right double quote
tag2←'<abbr title="',comment_,'">',abbr,'</abbr>'
match2←{0=+/b←'&'=w←⍵:w ⋄ (b/w)←⊂'&amp;' ⋄ ⊃,/w}abbr
match1←'"',match2,'"'
match2←'\b',match2,'\b'
ignore←'<img.*>' '<a .*>.*</a>' '<code>.*</code>' '<code .*>.*</code>'
ignore,←⊂'<abbr .*>[^<]*</abbr>'       ⍝ Abbreviations themselves should be left alone
ignore,←⊂'<dt>.*</dt>'                 ⍝ The keyword of a definition should not become an <abbr> tag.
ignore,←⊂'<dt .*>.*</dt>'              ⍝ Same in case of special attributes
html←(ignore,match1 match2)⎕R((,¨(≢ignore)⍴'&'),tag1 tag2)⍠('Mode' 'D')('DotAll' 1)('Greedy' 0)⊣html
:EndFor
ns.html←html
:EndIf
HandleEscapedNewLines←{
items←⍵
0=+/b←'\'=⊃¨¯1↑¨items:items
ind←⍸b
items[ind]←{(¯1↓⍵),⎕UCS 13}¨items[ind]
items
}
{ns}←{parms}Help recompileFlag;filename;path;filenames;ind
⍝ Displays any of the MarkAPL help files with your default browser.\\
⍝ `recompileFlag`:
⍝ * 0 shows the HTML file as it stands.
⍝ * 1 lets MarkAPL recompile it from MarkAPL_CheatSheet.md first.
⍝ Returns either `⍬` or the `ns` namespace created by `Init` and modified by `Process`.
⍝ However, if the markdown file does not exist then `recompileFlag` has no effect (is always 0)
⍝ because then there is nothing that could be recompiled.
:Access Public Shared
parms←{0<⎕NC ⍵:⍎⍵ ⋄ CreateHelpParms}'parms'
:If 0=≢parms.homeFolder
path←TatinVars.GetFullPath2AssetsFolder,'/'
:Else
path←parms.homeFolder,'/Files/'
:EndIf
filenames←FilesAndDirs.ListFiles path,'*.html'
ind←'Select a document you want to put on view:'CommTools.Select{2⊃⎕NPARTS ⍵}¨filenames
→(0=≢ind)/0
filename←ind⊃filenames
:If ~⎕NEXISTS(⊃,/2↑⎕NPARTS filename),'.md'
recompileFlag←0
:EndIf
:If recompileFlag
filename←(⊃,/2↑⎕NPARTS filename),'.md'
:EndIf
filename←recompileFlag AddAppropriateExtension filename
ns←CompileHelp filename recompileFlag parms
:If ¯1≠×recompileFlag  ⍝ This syntax is used only by `Make` and test cases, therefore it is not documented.
:AndIf parms.viewInBrowser
ns ShowHtml(⊃,/2↑⎕NPARTS filename),'.html'
:EndIf
⍝Done
(
'* 13.1.0 ⋄ 2024-09-26'
'  * In earlier version when a collapsible was expanded, all other collapsibles were contracted.'
'    This was not welcomed for users in need for comparing the content of two collapsibles.'
'  * A url like "foo,htnl" in a link was always changed to "https://foo.html" - that''s wrong.'
'* 13.0.0 ⋄ 2024-08-09'
'  * Syntax changed for marking up checkboxes in Markdown: `- [ ]` or `- [x]` respectively. '
'    This is the reason why this is a new major version.\\'
'    This brings MarkAPL in line with the GitHub syntax which is now well established.\\'
'  * CSS for all lists in all CSS files updated for both screen and print'
'  * Deprecated `collapsibleTOC` removed'
'  * Bug fixes'
'    * Both flavours of lists as well as check boxes were wrongly displayed when part of a blockquote'
'    * ID assigned to an ambiguous header in MarkAPL.md'
'    * Documentation corrected regarding check boxes (the documentation stated that a `<div>` was put'
'      around the list, but that''s is not the case)'
'    * Sometimes a caption did not get a number assigned (#45)'
'    * Insufficient white space between cited paragraphs in the "Dark" theme''s "print" SS. (#44)'
'* 12.1.2 ⋄ 2024-04-07'
'  * `Help` did not work when `MarkAPL` was brought into the WS with `]Tatin.LoadPackages`'
'* 12.1.1 ⋄ 2024-01-29'
'  * Bug fixes      '
'    * The print style sheet produced a way too big basic font size.'
'    * `CreateParms` called `FilesAndDirs` but should call function `F` instead.'
'* 12.1.0 ⋄ 2024-01-11'
'  * New parameters `tocShowCaption` and `tocHideCaption` introduced for replacing the default captions of'
'    the "Copy"/"Hide" button in the TOC area.'
'  * New parameter `startHeaderNoWith` allows specifying the initial value of the level-1 header number.'
'  * New parameters `copyCaption` and `copiedCaption` introduced for replacing the default captions of the '
'    "Copy" button in code blocks.'
'  * Restriction removed from `ConvertMarkdownFile`: allows specification of `inputFilename` now.'
'  * Print styles improved.'
'  * Table styling improved.'
'  * Bug fixes:'
'    * `cssURL` was not correctly processed when not set.'
'* 12.0.2 ⋄ 2023-12-15'
'  * Bug fixes:'
'    * Function `Version` addressed `TatinVars` incorrectly; introduced with 12.0.1'
'* 12.0.1 ⋄ 2023-12-14'
'  * Bug fixes: '
'    * The CSS variables in the "Dark" theme weren''t interpreted by the IE via the OCX control.'
'    * Guillemets were not processed when found at the beginning of a paragraph.'
'    * `collapsibleTOC` was rejected when defined as an embedded parameter. Not processed anymore, but'
'      should be ignored rather than rejected.'
'* 12.0.0 ⋄ 2023-12-11'
'  * BREAKING CHANGES: '
'    * HTML tags in Markdown are now left alone, implementing the original intention, and bringing MarkAPL '
'      in line with big shots like GitHub Markdown                   '
'    * The `id` parameter as well as `href` in case they point to an internal anchor (`#`) are now by'
'      default lowercased. You can change that by setting the new parameter `lowercaseID←1`'
'  * Collapsibles implemented with the `<details>` and `<summary>` tags.'
'  * Accordions (multiple collapsibles in succession) implemented.'
'  * Check boxes (ticked and un-ticked) added.'
'  * Code blocks now offer a Copy-to-clipboard" button.'
'  * The main TOC now always has a button "Show/Hide" that toggles the TOC when clicked.'
'  * New parameter `copy2ClipboardBtn` (defaults to 1) can be used to suppress the new copy-to-clipboard button '
'    for all code blocks.'
'  * New parameter `javaScript` (defaults to 1) can be used to suppress the injection of **any* JavaScript '
'    code. '
'  * New "Dark" theme established as the new default layout.'
'  * The LeanPub icons are now SVGs injected into the document, so no Internet connection is required anymore'
'    when LeanPub extensions are used.'
'  * The "normalization" part of the screen has been updated from 7.0 to 8.0.1'
'  * The parameters `collapsibleTOC` and `showHide` have been retired.'
'  * The special MarkAPL feature `<<br>>` has been retired: now `<br>` will do'
'  * All CSS layouts improved (again).'
'  * Bug fixes'
'    * Some CSS files were ANSI encoded when they must be UTF8-encoded.'
'    * `ignoreEmbeddedParms←1` did not remove embedded parameters from the input.'
'    * Links in footnotes were not processed in case <<br>> was not part of the footprint '
'    * The LeanPub extension "Tip" was not implemented by accident.'
'    * The link list (print only) showed the URL followed by the link text - should have been the other way round  '
'* 11.1.0 ⋄ 2023-08-13'
'  * Layout `MarkAPL_screen` improved (TOC and inline code)'
'  * Layout `BlackOnWhite_screen` improved (TOC and inline code)'
'  * Documentation improved / updated'
'  * `LICENSE` updated'
'  * Bug fix: a header like `## This header contains two ## ##` was not handled correctly'
'  * Packages updated'
'  * `Make` updated'
'  * Internal change: class script replaced by functions, operators and variables'
'* 11.0.5 ⋄ 2022-06-15'
'  * Bug fix: `Matrix2MarkdownList` complained wrongly that ⍵ should have 2 columns: 3 is correct'
'* 11.0.4 ⋄ 2022-10-26'
'  * Bug fixes'
'    * `ShowHtml` did not cope when the right argument pointed to the current directory'
'* 11.0.3 ⋄ 2022-05-09'
'  * Bug fixes:'
'    * When the command line of the current instance of Dyalog contained something like'
'      lx="1 #.RunThis 1"'
'      then that expression was subject to ⍎, meaning the function got executed.'
'    * URL links with APL code in the link text were buggy'
'* 11.0.2 ⋄ 2021-10-12'
'  * Two successive lists were indistinguishable from a single one in all the CSS.'
'  * Tatin packages updated'
'  * Internal change: now managed by Cider rather than acre'
'  * Bug fixes'
'    * MarkAPL 11 relied on the variable TatinVars'
'    * Two successive lists were not distinguishable. This was a CSS problem; changed.'
'* 11.0.1'
'  Bug reports:'
'  * Internal link in a LeanPub block were wrongly reported as invalid no matter what'
'  * Footnotes that were not referenced were not displayed. They are now displayed but a warning is reported'
'* 11.0.0'
'  * HTML and CSS but also Markdown documents (though only in develoment mode, read as part of the project'
'    rather than the package "MarkAPL" now always live in a sub folder Files/.'
'  * Both the project and the package require a variable `TatinVars.HOME`. While this variable always exists'
'    for the MarkAPL package (because its a Tatin convention) it needs to be injected for the project.'
''
'For information regarding older versions see <https://github.com/aplteam/MarkAPL/releases>'
'                                 '
)
r←HtmlBlockTags
⍝ Returns a list with all block elements in HTML5
r←''
r,←⊂'<address>'
r,←⊂'<article>'
r,←⊂'<aside>'
r,←⊂'<blockquote>'
r,←⊂'<canvas>'
r,←⊂'<dd>'
r,←⊂'<div>'
r,←⊂'<dl>'
r,←⊂'<dt>'
r,←⊂'<fieldset>'
r,←⊂'<figcaption>'
r,←⊂'<figure>'
r,←⊂'<footer>'
r,←⊂'<form>'
r,←⊂'<h1>'
r,←⊂'<h6>'
r,←⊂'<header>'
r,←⊂'<hr>'
r,←⊂'<li>'
r,←⊂'<main>'
r,←⊂'<nav>'
r,←⊂'<noscript>'
r,←⊂'<ol>'
r,←⊂'<p>'
r,←⊂'<pre>'
r,←⊂'<section>'
r,←⊂'<table>'
r,←⊂'<tfoot>'
r,←⊂'<ul>'
r,←⊂'<video>'
r←HtmlTags
⍝ Returns a list with all official tags supported in HTML5
r←''
r,←⊂'a'
r,←⊂'abbr'
r,←⊂'address'
r,←⊂'area'
r,←⊂'article'
r,←⊂'aside'
r,←⊂'audio'
r,←⊂'b'
r,←⊂'base'
r,←⊂'bdi'
r,←⊂'bdo'
r,←⊂'basefont'
r,←⊂'blockquote'
r,←⊂'body'
r,←⊂'br'
r,←⊂'button'
r,←⊂'canvas'
r,←⊂'caption'
r,←⊂'cite'
r,←⊂'code'
r,←⊂'col'
r,←⊂'colgroup'
r,←⊂'data'
r,←⊂'datalist'
r,←⊂'dd'
r,←⊂'del'
r,←⊂'details'
r,←⊂'dfn'
r,←⊂'dialog'
r,←⊂'div'
r,←⊂'dl'
r,←⊂'dt'
r,←⊂'em'
r,←⊂'embed'
r,←⊂'fieldset'
r,←⊂'figcaption'
r,←⊂'figure'
r,←⊂'footer'
r,←⊂'form'
r,←⊂'h1'
r,←⊂'h2'
r,←⊂'h3'
r,←⊂'h4'
r,←⊂'h5'
r,←⊂'h6'
r,←⊂'head'
r,←⊂'header'
r,←⊂'hgroup'
r,←⊂'hr'
r,←⊂'html'
r,←⊂'i'
r,←⊂'iframe'
r,←⊂'img'
r,←⊂'input'
r,←⊂'ins'
r,←⊂'kbd'
r,←⊂'label'
r,←⊂'legend'
r,←⊂'li'
r,←⊂'link'
r,←⊂'main'
r,←⊂'map'
r,←⊂'mark'
r,←⊂'menu'
r,←⊂'menuitem'
r,←⊂'meta'
r,←⊂'meter'
r,←⊂'nav'
r,←⊂'noscript'
r,←⊂'object'
r,←⊂'ol'
r,←⊂'optgroup'
r,←⊂'option'
r,←⊂'p'
r,←⊂'param'
r,←⊂'picture'
r,←⊂'portal'
r,←⊂'pre'
r,←⊂'progress'
r,←⊂'q'
r,←⊂'rp'
r,←⊂'rt'
r,←⊂'ruby'
r,←⊂'s'
r,←⊂'samp'
r,←⊂'script'
r,←⊂'search'
r,←⊂'section'
r,←⊂'slot'
r,←⊂'small'
r,←⊂'source'
r,←⊂'span'
r,←⊂'strong'
r,←⊂'style'
r,←⊂'sub'
r,←⊂'summary'
r,←⊂'table'
r,←⊂'tbody'
r,←⊂'td'
r,←⊂'template'
r,←⊂'textarea'
r,←⊂'tfoot'
r,←⊂'th'
r,←⊂'thead'
r,←⊂'title'
r,←⊂'tr'
r,←⊂'track'
r,←⊂'u'
r,←⊂'ul'
r,←⊂'var'
r,←⊂'video'
r,←⊂'wbr'
r←,¨r
r←HtmlTagsAllowedInPara
⍝ Returns a list with all tags a <p> might contain.
⍝ Does not list tags that might be inside a tag returned by this function etc.
r←''
r,←⊂'a'
r,←⊂'abbr'
r,←⊂'area'
r,←⊂'audio'
r,←⊂'b'
r,←⊂'bdi'
r,←⊂'bdo'
r,←⊂'br'
r,←⊂'button'
r,←⊂'canvas'
r,←⊂'cite'
r,←⊂'code'
r,←⊂'command'
r,←⊂'datalist'
r,←⊂'del'
r,←⊂'dfn'
r,←⊂'em'
r,←⊂'embed'
r,←⊂'i'
r,←⊂'iframe'
r,←⊂'img'
r,←⊂'input'
r,←⊂'ins'
r,←⊂'kbd'
r,←⊂'keygen'
r,←⊂'label'
r,←⊂'map'
r,←⊂'mark'
r,←⊂'math'
r,←⊂'meter'
r,←⊂'noscript'
r,←⊂'object'
r,←⊂'output'
r,←⊂'progress'
r,←⊂'q'
r,←⊂'ruby'
r,←⊂'s'
r,←⊂'samp'
r,←⊂'script'
r,←⊂'select'
r,←⊂'small'
r,←⊂'span'
r,←⊂'strong'
r,←⊂'sub'
r,←⊂'sup'
r,←⊂'svg'
r,←⊂'textarea'
r,←⊂'time'
r,←⊂'u'
r,←⊂'var'
r,←⊂'video'
r,←⊂'wbr'
r,←⊂'text'
IdentifyBulletedList←{
⍝ This uses ns.leadingChars, meaning that it ignores indentation
ns←⍵
max←⍺
IdentifyList__ ns max'*'
}
r←IdentifyListItems ns;max;buff;ind;b1;b2;b
⍝ Takes "ns" as right argument and figures out how many items belong to the current list.
⍝ Things are complicated by ...
⍝ * the fact that lazyness is allowed.
⍝ * lines might be glued together with a trailing `\` or divided by <br>.
⍝ * Laziness and indentation might be mixed together.
⍝ * Lists might be nested.
⍝ Note that a single blank line between items is okay; only more than one empty line breaks a list definition.
⍝ We know already where two blank lines occur (max).
r←max←{0=+/⍵:≢⍵ ⋄ ⍵⍳1}⍨1 1⍷ns.emptyLines      ⍝ Two empty lines stop a list dead in any case
buff←max↑ns.markdown
:If 0≠≢ind←(⍸max↑ns.emptyLines)~max     ⍝ We are interested in the lines after any empty line
b1←0=+/∧\' '=↑buff[ind+1]                 ⍝ If those are not indented they potentially break the list
b2←~IsHtmlList¨buff[ind+1]                ⍝ Which ones are not list items as such at all?
:If 0<+/b←b1∧b2
r←⊃b/ind
:EndIf
:EndIf
IdentifyList__←{
(ns max type)←⍵
nl←0,¯1↓'\'=⊃¨¯1↑¨max↑ns.markdown                                 ⍝ nl flags all lines that...
nl∨←0,¯1↓(~max↑ns.emptyLines)∧'  '∘≡¨¯2↑¨max↑ns.markdown          ⍝ ... belong to the predecessor...
nl∨←0,¯1↓'<<br>>'{⍺∘≡¨(-≢⍺)↑¨⍵}max↑ns.markdown                    ⍝ ... due to line breaks.
markers←(1+'*'=type)⊃'0123456789 ' '+-* '                         ⍝ "markers" depends on list type.
max←+/∧\nl∨(⊃¨max↑ns.leadingChars)∊markers                        ⍝
'*'≡type:+/∧\{(' '=⍵)∨~⊃∘IsOrderedHtmlList¨⍵}⊃¨max↑ns.markdown    ⍝ No mistake: we check for the ...
'1'≡type:+/∧\{(' '=⍵)∨~⊃∘IsBulletedHtmlList¨⍵}⊃¨max↑ns.leadingChars  ⍝ OTHER list type here!
.                                                                 ⍝ Huuh?!
}
IdentifyOrderedList←{
ns←⍵
max←⍺
IdentifyList__ ns max'1'
}
ns←Init(parms markdown);buffer
⍝ Creates a namespace "ns" that contains important stuff needed to process `markdown`.
⍝ See "MarkAPL.html" for details.
:Access Public Shared
parms←CompileParms parms
markdown←GetMarkdown markdown
ns←Create_NS ⍬
ns.markdown←A.DTB(,⊆markdown),⊂''
ns.lineNumbers←⍳≢ns.markdown                ⍝ Useful for reporting problems
ns.parms←parms
ns←parms.ignoreEmbeddedParms ProcessEmbeddedParms ns
ns←RemoveAllComments ns
ns←parms ProcessLeanPubExtensions ns
:If IsLeanPubEncodingLine⊃ns.markdown
ns.markdown[1]←⊂''
:EndIf
ns.markdownLC←⎕C ns.markdown                ⍝ We need this often, so we do this ONCE
buffer←A.DLB ns.markdown
ns.emptyLines←GetEmptyLines buffer
ns.leadingChars←(16⌊≢¨ns.markdown)↑¨buffer
ns.withoutBlanks←ns.markdown~¨' '
:If (,0)≢,ns.parms.toc
ns.parms.bookmarkLink⌈←⌈/ns.parms.toc
:EndIf
ns.parms.head←,⊆ns.parms.head
LowercaseID←(1≡parms.lowercaseID)∘{(⎕C⍣⍺)⍵} ⍝ Lowercase ⍵ in case parms.lowercaseID is 1
⍝Done
InjectBR←{
⍝ In case ⍵ contains any (⎕UCS 13) these are converted into `<br>`
tx←⍵
0=+/b←tx=⎕UCS 13:tx
'\r'⎕R'<br>'⍠'Mode' 'D'⊣tx
}
html←type InjectCssFilenamesIntoHtml parms;css;cssFiles;cssFile;url
⍝ Inject zero, one or many CSS filenames and embrace them with a <link> tag.
'Invalid CSS media type'⎕SIGNAL 11/⍨0=+/(⊂type)∊'screen' 'print'
cssFiles←','A.Split parms.⍎type,'CSS'
cssFiles←{0=+/b←'\'=r←⍵~'"':r ⋄ (b/r)←'/' ⋄ r}¨cssFiles
html←''
:For cssFile :In cssFiles
url←APLTreeUtils2.DLB parms.cssURL,cssFile
:If ~IsHTTP url
:andif ~IsFTP url
:andif ~IsFileProtocol url
url←'file://',url ⍝ Because Firefox insists (2023-12-07)
:EndIf
html,←⊂'<link href="',url,'" rel="stylesheet" media="',type,'">'
:EndFor
⍝Done
html←type InjectCssIntoHtml parms;css;cssFiles;cssFile;blockNo;cssFile_
⍝ Inject zero, one or many CSS files and embrace them with a <style> tag.
⍝ The CSS is converted into a single line if `compressCSS` is 1.
⍝ The parameter `tocCaption` is honoured.
'Invalid CSS media type'⎕SIGNAL 11/⍨0=+/(⊂type)∊'screen' 'print'
cssFiles←','A.Split parms.⍎type,'CSS'
html←''
:For cssFile :In cssFiles
:If 0=≢parms.cssURL
cssFile_←cssFile
:Else
cssFile_←parms.cssURL,'/',cssFile
:EndIf
css←⊃⎕NGET(MassageFilename cssFile_)1
:If type≡'screen'
:AndIf 0≠≢blockNo←'<<maxwidth>>'⎕S 2⊣css
blockNo+←1
(blockNo⊃css)←'max-width:',({' '=1↑0⍴⍵:⍵,(0=≢⍵~⎕D)/'px' ⋄ (⍕⍵),'px'}parms.width),';'
:EndIf
css←2 InsertTocCaption parms css
css←{CompressCSS 2↓⊃,/(⎕UCS 13 10)∘,¨⍵}⍣parms.compressCSS⊣css
html,←,⊆css
:EndFor
:If 0≠≢html
html←(⊂'<style media="',type,'">'),html,(⊂'</style>')
:EndIf
⍝Done
ns←InjectFootNotes ns;hits
hits←GatherFootNoteReferences ns
ns←ReplaceFootnoteReferences ns hits
:If 0<≢ns.footnoteDefs
ns←AppendFootnoteDefinitions ns
:EndIf
html←InjectLinkTextIntoReportLink(html linkTexts);i;pattern;replaceBy;b1;b2;b3
:For i :In ⍳≢linkTexts
pattern←'\{\{\{\{\{',(⍕i),'}}}}}'
replaceBy←i⊃linkTexts
b1←replaceBy='\'
b2←replaceBy='%'
b3←replaceBy='&'
(b1/replaceBy)←⊂'\\'
(b2/replaceBy)←⊂'\&'
(b3/replaceBy)←⊂'\&'
replaceBy←⊃,/replaceBy
html←pattern ⎕R replaceBy⍠('Greedy' 0)⊣html
:EndFor
{ns}←InjectNumberedHeaders ns;html;no;header;new;level;searchFor;ind;length;levelsToBeNumbered;i;bool
:If 0≠≢ns.headers  ⍝ Are their any headers at all?
levelsToBeNumbered←{1≠≢⍵:⍵ ⋄ ⍳⍵}ns.parms.numberHeaders
:AndIf ∨/levelsToBeNumbered∊ns.headers[;1] ⍝ Right levels?!
html←FlattenHTML ns.html
:For i :In ⍳≢ns.headers
(level header no)←ns.headers[i;1 3 4]
:If level∊levelsToBeNumbered
searchFor←A.DMB'>',header,'</h',(⍕level),'>'
:AndIf 1=+/bool←searchFor⍷html
ind←bool⍳1
length←¯1+1⍳⍨'</h'⍷{m←~GetMaskForCodeTags ⍵ ⋄ m\m/⍵}ind↓html
new←no,((0<≢no)/' '),header
html←(-ind)⌽new,length↓ind⌽html
:EndIf
:EndFor
ns.html←(⎕UCS 13)A.Split html
:EndIf
ns←InjectSubTOCs ns;where;i;header;level;ind;from;noOf;levels;toc;drop;md;ns2;parms;specialAttrs;depth;subToc
:If (,0)≢,ns.parms.toc
:AndIf 0≠≢ns.subToc
where←⍸{≢GetRegExPatternForSubToc ⎕S 0⍠('Greedy' 0)('IC' 1)⊣⍵}¨ns.html
:For i :In ⍳≢ns.subToc
(level header depth specialAttrs)←i⊃ns.subToc
ind←i⊃where
from←1⍳⍨(ns.headers[;1]=level)∧(ns.headers[;3]≡¨⊂header)
noOf←+/∧\level<from↓ns.headers[;1]
levels←noOf↑from↓ns.headers[;1]
toc←↑3↑¨noOf↑from↓ns.toc
:If depth>0
toc←((depth+¯1+⊃toc[;1])≥toc[;1])⌿toc
:EndIf
:If (≢toc)∊0 1
ns.html[i⊃where]←⊂''
ns.report,←⊂'No SubTOC injected for "',header,'": ',((1+1=≢toc)⊃'no item' 'just one sub-header'),' found'
:Leave
:Else
drop←⌊/toc[;1]
md←{(' '⍴⍨(1⊃⍵)-drop),'* [',(2⊃⍵),'](#',(3⊃⍵),')'}¨↓toc
parms←CreateParms
parms.markdownStrict←ns.parms.markdownStrict
parms.verbose←0
parms.checkLinks←0
parms.checkFootnotes←0
parms.syntaxSugar←0
ns2←Init parms md
{}ProcessLists ns2
:If (,0)≢,ns.parms.numberHeaders
ns2.html←'href="#\d{0,}-'⎕R'href="#'⍠('Greedy' 0)⊣ns2.html
:EndIf
subToc←('<nav',specialAttrs,' class="sub-toc">')('<p>Topics:</p>'),ns2.html,⊂'</nav>'
ns.html[i⊃where]←⊂subToc
:EndIf
:EndFor
ns.html←⊃,/{1=≡⍵:⊂⍵ ⋄ ⍵}¨ns.html
:EndIf
ns←InjectTOC ns;param;levels;b;h;ns2;html;r;tocHtml;drop;parms;links;noOf;buff;toc;i
⍝ Inject a TOC in case the user has specified this
:If 1=≢ns.parms.toc
levels←⍳ns.parms.toc
:Else
levels←ns.parms.toc
:EndIf
:If 0≠≢toc←↑((⊃¨ns.toc)∊levels)/ns.toc
drop←⌊/toc[;1]
:If (,0)≢,ns.parms.numberHeaders
toc,←toc{⍵[;4]⌿⍨⍵[;2]∊LowercaseID ⍺[;3]}ns.headers
links←ns.parms.bookmarkMayStartWithDigit{LowercaseID ⍺ CompileBookMarkName ⍵''}¨toc[;3]
tocHtml←ns CreateTOC toc[;1 2 5],links
:Else
links←{(3⊃⍵)≡GetBookMarkNameFromCaption(2⊃⍵)'':3⊃⍵ ⋄ 3⊃⍵}¨↓toc
tocHtml←ns CreateTOC(toc[;1 2],(⊂'')),links
:EndIf
:If '<a' '<h'≡2↑¨2↑ns.html                        ⍝ First two lines define a header?!
noOf←1⍳⍨'</a>'{⍺∘≡¨(≢⍺)↑¨⍵}ns.html
ns.html←(noOf↑ns.html),tocHtml,noOf↓ns.html   ⍝ Insert after the first header
:Else
:If ∨/'<h1 '⍷∊ns.html
⍝ Insert TOC after <h1>
:If ∨/'<div class="h_tag">'⍷∊ns.html
i←⊃ns.html⍳⊂'</div>'
ns.html←(i↑ns.html),tocHtml,i↓ns.html
:EndIf
:EndIf
:EndIf
:EndIf
InsertTocCaption←{
⍝ Replace "<<tocCaption>>" in the css against "parms.tocCaption"
⍝ ⍺ is 1 for print CSS and 2 for screen CSS.
(parms css)←⍵
lines←⍸∨/¨bool←'<<tocCaption>>'∘⍷¨css
0=≢lines:css
bool←bool[lines]
(tpd tpu)←⎕UCS 9660 9650   ⍝ Triangle Point Down, Triangle Pointing Up
(1=⍺)∨1=≢lines:css
css[lines[2]]←⊂'content: ''',(parms.tocCaption,' ',tpu,''''),';'
css
}
IotaSetextHeader←{
⍝ Returns indices as a vector of Booleans for all lines in ns.markdown that in itself would qualify as a SeText header.
⍝ "In itself" means that it does not check whether what is above it is a para; that need to be checked independently.
type←⍺
(withoutBlanks markdown emptyLines)←⍵
0=+/b←(~emptyLines)∧withoutBlanks∧.=¨type:1+⍴markdown
⍸b\{4>+/∧\' '=⍵}¨b/markdown          ⍝ Max 3 leading blanks
}
IsBulletedHtmlList←{
⍝ Returns a 1 in case ⍵ qualifies as an LI element of a bulleted list.
tx←,⍵
~{(⊃A.DLB ⍵)∊'*+-'}tx:0
pattern←'^\s{0,',(⍕⍺),'}[-+\*]\s'
0≠≢pattern ⎕S 0⊣tx
}
IsFTP←{0<≢'ftp://'⎕S 0⊣⍵}
IsFence←{
⍝ ⍺ must be either ~ or `
⍝ Returns 1 in case ⍵ is a valid fence for a code block.
md←⍵
fence←⍺
pattern←'^ {0,3}',fence,'{3,}'
0=≢pattern ⎕S 0⍠('Greedy' 0)('Mode' 'L')⊣md:0
remains←pattern ⎕R''⍠('Greedy' 0)('Mode' 'L')⊣md
~fence∊{⍵↓⍨+/∧\fence=⍵}remains
}
IsFenceStart←{
⍝ The start of a code block fence may have an info string after the fence as such.
md←⍵
3<noOfBlanks←+/∧\' '=md:0             ⍝ Max three blanks
md←noOfBlanks↓md
fence←⊃md
~fence∊'`~':0
3>noOfFencingChars←+/∧\md=fence:0     ⍝ At least three fencing characters
0=≢md←noOfFencingChars↓md:1
~fence∊md                             ⍝ Any info string must not contain the fence character
}
IsFileProtocol←{0<≢'file://'⎕S 0⊣⍵}
IsGlued←{
⍝ Takes a vector of vectors and returns a 1 for those lines
⍝ that end either with \ of with <br>
b←'\'=⊃¨¯1↑¨⍵
0,¯1↓b∨'<br>'∘{⍺≡(-≢⍺)↑⍵}¨⍵
}
IsHTTP←{0<≢'http[s]?://'⎕S 0⊣⍵}
IsHtmlList←{
⍝ Returns a 1 in case ⍵ qualifies as an LI element of a list.
⍝ That is the case if one of the following conditions holds true:
tx←⍵
⍺←99                          ⍝ Number of leading blanks allowed.
⍺ IsBulletedHtmlList tx:1
⍺ IsOrderedHtmlList tx
}
IsLeanPubEncodingLine←{
⍝ For the Leanpub Servcie the first line of the markdown (⍵) my contain `{:: encoding="` somewhere.
⍝ This function returns a 1 in case this is true.\\
⍝ Note that this is **not** related to the LeanPub extensions.
≢'^ *{:: encoding=".*$'⎕S 0⊣⍵
}
IsMailTo←{0<≢'mailto:'⎕S 0⊣⍵}
IsOrderedHtmlList←{
⍝ Returns a 1 in case ⍵ qualifies as an LI element of an ordered list.
⍝ ⍺ is the number of leading blanks allowed (for a starting list item this would be 3).
⍝ [1] Zero to many white spaces
⍝ [2] 1 to 9 digits ...
⍝ [3] ... but not more than 9 of them
⍝ [4] Either a `.` or a `)`
⍝ [5] One or more white spaces
⍝ Then it's an ordered list item
tx←⍵
0=≢'^\s*?\b\d{1,9}\b[.)]\s+?'⎕S 0⊣tx:0
⍺>3:1
3≥+/∧\' '=tx
}
flag←IsSelfDefinedHtmlTag tag
flag←0
:If '-'∊tag                                   ⍝ A self-defined tag MUST contain a hyphen
:AndIf ∧/tag∊AllAllowedCharsInTag             ⍝ Check for allowed characters
flag←(⊃tag)∊TagMustStartWith              ⍝ The first char after the `<` must be a char
:EndIf
IsStyleBlockStart←{
start←⍵
'<style'{⍺≢(≢⍺)↑⍵}start:0
later←(≢'<style')↓start
'>'=⊃later:1
0=≢later:1
}
IsTableRow←{
⍝ ⍵ qualifies as a table row if it contains at least 2 un-escaped pipes (`|`).
row←,⍵
mask←~GetMaskForCode row
0=+/b←'|'=mask/row:0
∨/'\'≠(' ',row)[⍸b]
}
IsUnicodeCharacter←{
⍝ Input is a text vector.
⍝ Returns 0 or 1 for every single chacter in ⍵.
⍝ Uses RegEx for the identification, therefore slow on large amounts of data.
1=≢⍵:≢'\p{L}'⎕S 0⊣⍵
∇¨⍵
}
IsolateLink←{
txt←⍵
mask←⍺
0=+/b←']('⍷mask\mask/txt:⍬
link←⌽(b⍳1)↑txt
mask2←⌽(≢link)↑mask
link2←mask2\mask2/link
(≢link)-1++/∧\~(+\link2='[')=+\link2=']'
}
LeanPubAltTextFor←{
altText←'Error' 'Discussion' 'Information' 'Warning' 'Question' 'Tip' 'Exercise'
extension←'ediwqtx'
(extension⍳⎕C ⍵)⊃altText
}
r←Discussion title
r←''
r,←⊂'<svg version="1.0" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="[title]" width="20px" height="20px" viewBox="0 0 20 20" preserveAspectRatio="xMidYMid meet">'
r,←⊂'<title>',title,'</title>'
r,←⊂'<g transform="translate(0,20) scale(0.1,-0.1)"'
r,←⊂'fill="#000000" stroke="none">'
r,←⊂'<path d="M37 178 c-19 -18 -26 -36 -30 -78 l-5 -56 51 -1 c75 -2 115 37 102 98 -13 57 -75 76 -118 37z"/>'
r,←⊂'<path d="M180 114 c0 -29 -37 -74 -74 -90 l-31 -13 40 -1 c22 0 49 -3 61 -6 19 -5 21 -1 22 48 1 29 -3 60 -8 68 -8 12 -10 11 -10 -6z"/>'
r,←⊂'</g>'
r,←⊂'</svg>'
r←Error title
r←''
r,←⊂'<svg version="1.0" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="[title]" width="20px" height="20px" viewBox="0 0 20 20" preserveAspectRatio="xMidYMid meet">'
r,←⊂'<title>',title,'</title>'
r,←⊂'<g transform="translate(0,20) scale(0.1,-0.1)"'
r,←⊂'fill="#000000" stroke="none">'
r,←⊂'<path d="M0 180 c0 -11 9 -25 20 -32 26 -16 26 -28 0 -28 -11 0 -20 -4 -20 -10 0 -5 8 -10 18 -10 29 0 34 -12 9 -24 -12 -6 -23 -22 -25 -34 -4 -27 14 -29 21 -2 8 32 45 26 49 -7 2 -22 8 -28 28 -28 20 0 26 6 28 28 4 33 41 39 49 7 7 -27 25 -25 21 2 -2 12 -13 28 -25 34 -25 12 -20 24 9 24 10 0 18 5 18 10 0 6 -9 10 -20 10 -11 0 -20 3 -20 8 0 4 9 13 20 20 20 12 28 52 10 52 -5 0 -10 -6 -10 -14 0 -26 -21 -29 -44 -7 -12 12 -28 21 -36 21 -8 0 -24 -9 -36 -21 -23 -22 -44 -19 -44 7 0 8 -4 14 -10 14 -5 0 -10 -9 -10 -20z m124 -16 c29 -28 11 -104 -24 -104 -35 0 -53 76 -24 104 19 20 29 20 48 0z m-14 -134 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z"/>'
r,←⊂'</g> '
r,←⊂'</svg>'
r←Exercise title
r←''
r,←⊂'<svg version="1.0" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="[title]" width="20px" height="20px" viewBox="0 0 20 20" preserveAspectRatio="xMidYMid meet">'
r,←⊂'<title>',title,'</title>'
r,←⊂'<g transform="translate(0,20) scale(0.1,-0.1)" fill="#000000" stroke="none">'
r,←⊂'<path d="M67 194 c-3 -4 -3 -20 0 -36 6 -29 5 -29 -31 -23 -29 6 -36 4 -36 -9 0 -21 46 -50 66 -42 11 4 32 -9 65 -39 26 -25 53 -45 58 -45 28 0 18 27 -25 71 -33 33 -48 57 -46 70 5 30 -34 70 -51 53z"/>'
r,←⊂'</g>'
r,←⊂'</svg>'
r←Information title
r←''
r,←⊂'<svg version="1.0" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="[title]" width="20px" height="20px" viewBox="0 0 20 20" preserveAspectRatio="xMidYMid meet">'
r,←⊂'<title>',title,'</title>'
r,←⊂'<g transform="translate(0,20) scale(0.1,-0.1)" fill="#000000" stroke="none">'
r,←⊂'<path d="M0 100 l0 -100 105 0 105 0 0 100 0 100 -105 0 -105 0 0 -100z m190 0 l0 -80 -85 0 -85 0 0 80 0 80 85 0 85 0 0 -80z"/>'
r,←⊂'<path d="M90 140 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z"/> <path d="M90 80 c0 -20 5 -30 15 -30 10 0 15 10 15 30 0 20 -5 30 -15 30 -10 0 -15 -10 -15 -30z"/>'
r,←⊂'</g>'
r,←⊂'</svg>'
r←Question title
r←''
r,←⊂'<svg version="1.0" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="[title]" width="20px" height="20px" viewBox="0 0 20 20" preserveAspectRatio="xMidYMid meet">'
r,←⊂'<title>',title,'</title>'
r,←⊂'<g transform="translate(0.000000,20.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none">'
r,←⊂'<path d="M4 187 c-2 -8 -4 -52 -2 -98 l3 -84 100 0 100 0 0 95 0 95 -98 3 c-75 2 -99 0 -103 -11z m186 -87 l0 -80 -85 0 -85 0 0 80 0 80 85 0 85 0 0 -80z"/>'
r,←⊂'<path d="M60 150 c0 -5 14 -10 30 -10 17 0 30 -4 30 -10 0 -5 -9 -10 -20 -10 -15 0 -20 -7 -20 -25 0 -16 6 -25 15 -25 8 0 15 7 15 15 0 8 9 15 20 15 16 0 20 7 20 30 0 29 -2 30 -45 30 -25 0 -45 -4 -45 -10z"/>'
r,←⊂'<path d="M80 45 c0 -8 7 -15 15 -15 8 0 15 7 15 15 0 8 -7 15 -15 15 -8 0 -15 -7 -15 -15z"/>'
r,←⊂'</g>'
r,←⊂'</svg>'
r←Tip title
r←''
r,←⊂'<svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="20pt" height="20pt" viewBox="0 0 20 20" preserveAspectRatio="xMidYMid meet">'
r,←⊂'<g transform="translate(0,20) scale(0.1,-0.1)" fill="#000000" stroke="none">'
r,←⊂'<path d="M90 185 c0 -8 5 -15 10 -15 6 0 10 7 10 15 0 8 -4 15 -10 15 -5 0 -10 -7 -10 -15z"/>'
r,←⊂'<path d="M30 161 c0 -5 7 -11 14 -14 10 -4 13 -1 9 9 -6 15 -23 19 -23 5z"/>'
r,←⊂'<path d="M147 156 c-4 -10 -1 -13 9 -9 7 3 14 9 14 14 0 14 -17 10 -23 -5z"/>'
r,←⊂'<path d="M70 125 c-26 -32 13 -81 48 -59 9 6 18 19 20 28 8 38 -43 61 -68 31z m46 -16 c10 -17 -13 -36 -27 -22 -12 12 -4 33 11 33 5 0 12 -5 16 -11z"/>'
r,←⊂'<path d="M0 100 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z"/>'
r,←⊂'<path d="M170 100 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z"/>'
r,←⊂'<path d="M43 53 c-15 -5 -17 -23 -4 -23 5 0 11 7 15 15 3 8 4 15 3 14 -1 0 -8 -3 -14 -6z"/>'
r,←⊂'<path d="M147 44 c3 -7 9 -14 14 -14 14 0 10 17 -5 23 -10 4 -13 1 -9 -9z"/>'
r,←⊂'<path d="M90 15 c0 -8 5 -15 10 -15 6 0 10 7 10 15 0 8 -4 15 -10 15 -5 0 -10 -7 -10 -15z"/>'
r,←⊂'</g>'
r,←⊂'</svg>'
r←Warning title
r←''
r,←⊂'<svg version="1.0" xmlns="http://www.w3.org/2000/svg" role="img" aria-label=[title]" width="20px" height="20px" viewBox="0 0 20 20" preserveAspectRatio="xMidYMid meet">'
r,←⊂'<title>',title,'</title>'
r,←⊂'<g transform="translate(0,20) scale(0.1,-0.1)" fill="#000000" stroke="none">'
r,←⊂'<path d="M177 166 c-3 -8 -34 -18 -74 -25 -101 -17 -103 -19 -103 -52 0 -16 4 -29 9 -29 5 0 11 -10 13 -22 2 -19 10 -24 41 -26 28 -2 37 1 37 12 0 12 7 14 33 10 17 -4 37 -13 43 -20 21 -26 24 -15 24 76 0 82 -9 112 -23 76z m3 -80 l0 -44 -77 17 c-97 20 -104 40 -23 57 98 21 100 20 100 -30z m-105 -46 c3 -6 -3 -10 -14 -10 -12 0 -21 5 -21 10 0 6 6 10 14 10 8 0 18 -4 21 -10z"/>'
r,←⊂'</g>'
r,←⊂'</svg>'
LookForEmbeddedParm←{
markdown←⍵
valueName←⍺
searchFor←'[parm]:'
0=+/bool←searchFor∘≡¨(≢searchFor)↑¨markdown:''
buff←(≢searchFor)↓¨bool/markdown
0=+/bool←valueName∘≡¨(≢valueName)↑¨buff:''
buff←(≢searchFor)↓(bool⍳1)⊃markdown
valueName≢(≢valueName)↑buff:''
value←(1+≢valueName)↓buff
''''=1⍴value:1↓¯1↓value
⊃(//)⎕VFI value
}
r←parms MakeHTML_Doc html;bool;lines;sh;ind;copyCodeJavaScript;toggleTocJavaScript;javaScript;buff;hasTOC;hasCodeBlock;hasCollapsible
⍝ Takes HTML, typically created by calling `Process`, and makes it a fully fledged document by adding
⍝ <body>, <head> -- with <title> -- and <html> including the DocType. By default CSS is injected as well.
:Access Public Shared
r←⊂'<!DOCTYPE html>'
r,←⊂'<html',((0≠≢parms.lang)/' lang="',(parms.lang~'"'),'"'),(parms.smoothScrolling/' style="scroll-behavior:smooth" '),'>'
r,←⊂'<head>'
:If parms.enforceEdge
⍝ ↓↓↓ https://blogs.msdn.microsoft.com/askie/2009/03/23/understanding-compatibility-modes-in-internet-explorer-8/
r,←⊂'<meta http-equiv="X-UA-Compatible" content="IE=edge">'
⍝ This MUST be the first <meta> tag!
:EndIf
r,←⊂'<meta charset="',parms.charset,'">'
:If ⎕NULL≡parms.title
:If 1=+/ind←∨/¨⊃∨/'<h1 ' '<h1>'{⍺∘⍷¨⍵}¨⊂html
parms.title←{⍵↑⍨¯1+⍵⍳'<'}{⍵↓⍨⍵⍳'>'}{⍵↓⍨¯1+1⍳⍨'<h1'⍷⍵}(ind⍳1)⊃html
:Else
parms.title←'MarkAPL'
:EndIf
:EndIf
r,←⊂'<title>',parms.title,'</title>'
parms←EstablishDefaultHomeFolder parms
:If 0=parms.noCSS
:If ⎕NULL≡parms.cssURL
parms.cssURL←({0=≢⍵:'.',⍵ ⋄ ⍵}parms.homeFolder),'/Files/'
:EndIf
parms.cssURL~←'"'
:If 0≠≢parms.cssURL
parms.cssURL,←{'/'/⍨~(¯1↑⍵)∊'/\'}parms.cssURL
((parms.cssURL='\')/parms.cssURL)←'/'
:EndIf
:If parms.linkToCSS
r,←'screen'InjectCssFilenamesIntoHtml parms
:If 0≠≢parms.printCSS
r,←'print'InjectCssFilenamesIntoHtml parms
:EndIf
:Else
:If 0≠≢parms.screenCSS
r,←'screen'InjectCssIntoHtml parms
:EndIf
:If 0≠≢parms.printCSS
r,←'print'InjectCssIntoHtml parms
:EndIf
:EndIf
:EndIf
buff←∊html
hasCodeBlock←∨/'<pre'⍷buff
hasCollapsible←∨/'<summary'⍷buff
hasTOC←∨/'<nav id="main_nav"'⍷buff
buff←''
:If hasCollapsible
:AndIf parms.javaScript
r,←'' '<script>'
r,←GetJavaScriptForPrintingCollapsibles
r,←'' '</script>'
:EndIf
:If 0≠≢parms.head
r,←,⊆parms.head
:EndIf
copyCodeJavaScript←toggleTocJavaScript←''
:If parms.javaScript
:If hasCodeBlock
copyCodeJavaScript←GetCopyCodeJavaScript parms
:EndIf
:If hasTOC
toggleTocJavaScript←GetJavaScriptForTogglingTOC parms
:EndIf
javaScript←copyCodeJavaScript,toggleTocJavaScript
:If 0<≢javaScript
javaScript←('' '<script>'),javaScript,('</script>' '')
:EndIf
:Else
javaScript←''
:EndIf
r,←'</head>' '<body>',html,javaScript,'</body>' '</html>'
⍝Done
MakeLiteralForRegex←{
⍝ Escapes all reserved chars in ⍵ which is a RegEx search pattern that needs to be interpreted literal.
literal←⍵
reservedChars←'^.\$|?+()['
b←literal∊reservedChars
0=+/b:literal
(b/literal)←('\',¨reservedChars)[reservedChars⍳b/literal]
⊃,/literal
}
CompressCSS←{##.CompressCSS ⍵}
ConvertMarkdownFile←{⍺←⊢ ⋄ 1:shy←⍺ ##.ConvertMarkdownFile ⍵}
parms←CreateHelpParms
parms←##.CreateHelpParms
r←CreateParms
r←##.CreateParms
Execute←{##.Execute ⍵}
Help←{⍺←⊢ ⋄ 1:shy←⍺ ##.Help ⍵}
(
'* 11.1.0 ⋄ 2023-08-13'
'  * Layout `MarkAPL_screen` improved (TOC and inline code)'
'  * Layout `BlackOnWhite_screen` improved (TOC and inline code)'
'  * Documentation improved / updated'
'  * `LICENSE` updated'
'  * Bug fix: a header like `## This header contains two ## ##` was not handled correctly'
'  * Packages updated'
'  * `Make` updated'
'  * Internal change: class script replaced by functions, operators and variables'
'* 11.0.5 ⋄ 2022-06-15'
'  * Bug fix: `Matrix2MarkdownList` complained wrongly that ⍵ should have 2 columns: 3 is correct'
'* 11.0.4 ⋄ 2022-10-26'
'  * Bug fixes'
'    * `ShowHtml` did not cope when the right argument pointed to the current directory'
'* 11.0.3 ⋄ 2022-05-09'
'  * Bug fixes:'
'    * When the command line of the current instance of Dyalog contained something like'
'      lx="1 #.RunThis 1"'
'      then that expression was subject to ⍎, meaning the function got executed.'
'    * URL links with APL code in the link text were buggy'
'* 11.0.2 ⋄ 2021-10-12'
'  * Two successive lists were indistinguishable from a single one in all the CSS.'
'  * Tatin packages updated'
'  * Internal change: now managed by Cider rather than acre'
'  * Bug fixes'
'    * MarkAPL 11 relied on the variable TatinVars'
'    * Two successive lists were not distinguishable. This was a CSS problem; changed.'
'* 11.0.1'
'  Bug reports:'
'  * Internal link in a LeanPub block were wrongly reported as invalid no matter what'
'  * Footnotes that were not referenced were not displayed. They are now displayed but a warning is reported'
'* 11.0.0'
'  * HTML and CSS but also Markdown documents (though only in develoment mode, read as part of the project'
'    rather than the package "MarkAPL" now always live in a sub folder Files/.'
'  * Both the project and the package require a variable `TatinVars.HOME`. While this variable always exists'
'    for the MarkAPL package (because its a Tatin convention) it needs to be injected for the project.'
''
'For information regarding older versions see <https://github.com/aplteam/MarkAPL/releases>'
)
Init←{##.Init ⍵}
MakeHTML_Doc←{⍺←⊢ ⋄ ⍺ ##.MakeHTML_Doc ⍵}
Markdown2HTML←{⍺←⊢ ⋄ 1:shy←⍺ ##.Markdown2HTML ⍵}
Matrix2MarkdownList←{##.Matrix2MarkdownList ⍵}
Matrix2MarkdownTable←{⍺←⊢ ⋄ ⍺ ##.Matrix2MarkdownTable ⍵}
Process←{##.Process ⍵}
Reference←{⍺←⊢ ⋄ 1:shy←⍺ ##.Reference ⍵}
r←Version
r←##.Version
MarkUpAsCode←{
(code specialAttrs infoString)←⍵
code←,⊆code
st←'<pre',((0≠≢infoString)/' class="',infoString,'"'),' tabindex="0"><code',({0=≢⍵:⍵ ⋄ ' ',⍵}A.DMB specialAttrs),'>'    ⍝ Start tag
(1⊃code)←st,1⊃code
((≢code)⊃code),←'</code></pre>'
code
}
tx2←MarkUpInlineCode tx;mask;offset1;offset2;noOf;i;buff;leading
:If 0<+/mask←GetMaskForCode tx2←tx
offset1←⍸0 1⍷0,mask
tx2[offset1]←⊂'<code>'
offset2←⍸1 0⍷mask,0
tx2[offset2]←⊂'</code>'
⍝ In case a block was opened/closed by more than just one backtick we need to get rid of the additonal ones:
noOf←tx2∘{+/∧\'`'=∊⍵↓⍺}¨offset1           ⍝ noOf opening (closing backticks). Those larger than 0 need attention
:For i :In ⍳≢noOf
:If 0<i⊃noOf
tx2[offset1[i]+⍸{(∧\'`'=⍵)∨⌽∧\'`'=⌽⍵}tx2[offset1[i]+⍳offset2[i]-offset1[i]+1]]←⊂''
:EndIf
:EndFor
tx2←⊃,/tx2
leading←(¯1+1⊃⍸'<code>'⍷tx2)↑tx2
tx2←(≢leading)↓tx2
tx2←(≢'code>')↓¨{⍵⊆⍨~'<code>'⍷⍵}tx2
tx2←'<code>'∘,¨MarkUpInlineCode_¨tx2
tx2←leading,⊃,/tx2
:EndIf
txt←MarkUpInlineCode_ txt;length;buff
length←¯1+⍸'</code>'⍷txt
:If 2<length
buff←length↑txt
:AndIf buff∨.≠' '
:AndIf buff[1,≢buff]∧.=' '
txt←((length-2)↑1↓txt),length↓txt
:EndIf
⍝Done
{(html ns)}←{parms}Markdown2HTML markdown
⍝ `⍵` is one of:
⍝   * Vector of character vectors representing a Markdown document.
⍝   * Empty vector. In this case the parameter "inputFilename" must be specified.
⍝ `⍺` Is a namespace with parameters, typically create by calling `CreateParms`.\\
⍝ `←` Is a two-element vector starting from version 1.7.0:
⍝ 1. Is always the HTML created. As a side effect this HTML will also be written
⍝    to the file specified by `outputFilename` - if that is not empty that is.
⍝ 2. The `ns` namespace created by `Init` and needed / processed by `Process. This contains `ns.report`,
⍝    something you might want to check.
⍝ In case `outputFilename` is not empty the HTML is also written to file.
:Access Public Shared
parms←{0<⎕NC ⍵:⍎⍵ ⋄ CreateParms}'parms'
:If 0=≢markdown
:If 0=≢parms.inputFilename
'Neither "markdown" nor "inputFilename" defined'⎕SIGNAL 6
:Else
markdown←⊃⎕NGET parms.inputFilename 1
:EndIf
:EndIf
ns←Init parms markdown
ns←Process ns
html←ns.html
:If (0≠≢ns.parms.outputFilename)∧0≠ns.parms.createFullHtmlPage
:OrIf 1=ns.parms.createFullHtmlPage
html←ns.parms MakeHTML_Doc html
:EndIf
:If 0<≢ns.parms.outputFilename
(⊂html)⎕NPUT ns.parms.outputFilename 1
:EndIf
⍝Done
MaskFunctionCall←{
txt←,⍵
b←(≢txt)⍴0
mask←~GetMaskForCodeTags txt
0=≢ind←'[^⍎]⍎⍎[^⍎]'⎕S 0⊣' ',(mask/txt),' ':b
ind←{↑,/{⍵[1]+⍳⍵[2]-⍵[1]}¨↓(((≢⍵)÷2),2)⍴⍵}ind
b[ind]←1
b
}
MaskTagAttrs←{
txt←⍵
r←(≢txt)⍴0
~'<'∊txt:r
ind←∊{(⊃⍵)+⍳1↓⍵}¨'<[a-z]*\b[^>]*>'⎕S(0 1)⊣txt
r[ind]←1
r
}
cb←MassageCodeBlock(cb noOfBlanks);pc
pc←¯1↓1↓cb                            ⍝ Pure code: without the fences.
:If ' '∧.=⊃,/noOfBlanks↑¨pc           ⍝ We take this as indicator that the pure code has it's own ideas regarding indentation; nothing needs to be done
(¯1↓1↓cb)←noOfBlanks↓¨pc
:EndIf
MassageFilename←{
CorrectSlash'file:/{2,3}'⎕R''⊣⍵
}
md←Matrix2MarkdownList mat;i;type
:Access Public Shared
⍝ Converts an APL matrix in to list definition(s).\\
⍝ The matrix must have three columns:\\
⍝ 1. List type. 0=bulleted list, 1 etc numeric list **and** starting point.
⍝ 2. Nesting level. May start with either 0 or 1.
⍝ 3. Text vector of vector of text vector.
'Invalid right argument - not a matrix'⎕SIGNAL 11/⍨2≠⍴⍴mat
'Invalid right argument - must have 3 columns'⎕SIGNAL 11/⍨3≠2⊃⍴mat
'First line''s level must be either 0 or 1'⎕SIGNAL 11/⍨~(⊃mat)∊0 1
'Invalid right argument - must have 3 columns'⎕SIGNAL 11/⍨~∧/mat[;1]∊0,⍳999
mat[;2]←{⍵-1}⍣(1=⊃mat[;2])⊣mat[;2]        ⍝ Ensure 0 is first level
md←mat[;2]⍴¨' '
type←0=mat[;1]
(type/md)←(type/md),¨⊂'* '
type←~type
(type/md)←(type/md),¨(⍕¨type/mat[;1]),¨⊂'. '
md←⊃,/md{(≡⍵)∊0 1:⊂⍺,⍵ ⋄ (⊂⍺,⊃⍵),(⊂(≢⍺)⍴' '),¨1↓⍵}¨mat[;3]
md←'' '',md,'' ''
⍝Done
r←{colHeader}Matrix2MarkdownTable mat;b;⎕IO;dt;mask;noOfColumns
:Access Public Shared
⍝ Converts an APL matrix into Markdown.\\
⍝ Since the Markdown is created automatically we value space & performance more than readability.\\
⍝ Without a left argument the right argument transforms into a matrix without
⍝ column headers. If a column is strictly numeric it is right-aligned.\\
⍝ If a left argument is provided then it is expected to be a vector of text vectors
⍝ defining column headers.\\
⍝ Such column headers may define column alignment via a leading and/or a trailing `:`; that means
⍝ that when using this method you cannot have a trailing `:` in a column header.\\
⍝ In case no column headers are specified or the column headers don't define alignment then columns
⍝ that contain nothing but numeric data are by default right-aligned while all other columns
⍝ are left-aligned.\\
⍝ This method does not allow special attributes, although they may be added in a seperate
⍝ step of course.
'Invalid right argument - not a matrix'⎕SIGNAL 11/⍨2≠⍴⍴r←mat
:If 0<=/b←,∨/¨'|'∊¨r                          ⍝ Any "|" anywhere?!
(b/,r)←EscapePipeSymbolInCell¨b/,r
:EndIf
dt←0=⊃¨0⍴¨r                                   ⍝ Data type
:If 0=⎕NC'colHeader'                          ⍝ If no left argument...
colHeader←,[0.5](':-' '-:')[1+∧⌿dt]       ⍝ ... then we right-align numeric cols.
:Else
'Left argument: length error'⎕SIGNAL 6/⍨(≢colHeader)≠2⊃⍴mat
'Left argument: depth error'⎕SIGNAL 11/⍨2≠≡colHeader
colHeader←⍉↑(∧⌿dt)BuildColumnHeader¨colHeader
:EndIf
r←colHeader⍪r
dt←((⍴colHeader)⍴0)⍪dt
((,dt)/,r)←⍕¨(,dt)/,r                         ⍝ Format numeric cells only
r←'|',¨r                                      ⍝ Insert the "|" for cell recognition
noOfColumns←2⊃⍴r
r←↓r
r←noOfColumns{⎕ML←3 ⋄ (1<⍺)↓¨∊¨⍵}r
⍝Done
flag←x NotWithinWord hit;txt;length;boundary1;boundary2;flag1;flag2;l;offset;buff
⍝ ⍵ is a vector of hits for, say, `_`
⍝ ⍺ is a two-element vector:
⍝   [1] Something like a paragraph
⍝   [2] Length of markup (_, *, **, __, ~~, ...); 1∨2
(txt length)←x
:If ~flag←' '=boundary1←(⊂hit+¯1)⌷txt       ⍝ What's to the left of the hit? ∆⍙>,⎕D and Unicode "letters" qualify
boundary2←(⊂hit+length)⌷txt   ⍝ What's to the left and right of the hit
:If '>'=boundary1
flag1←0
:ElseIf 0=flag1←IsUnicodeCharacter boundary1
l←¯1+⊃'[\p{L}0-9∆⍙]+'⎕S 1⊣'a',buff←⌽¯2↓hit↑txt    ⍝ How many are there?
flag1←∨/IsUnicodeCharacter l↑buff                 ⍝ Investigate whether at least one "letter" is part of it
:EndIf
flag2←(IsUnicodeCharacter boundary2)∨boundary1∊'<∆⍙',⎕D
flag←~flag1∧flag2
:EndIf
NumberHeaders←{
ns←⍵
(,0)≡,ns.parms.numberHeaders:ns
ns←CalculateHeaderNumbers ns
InjectNumberedHeaders ns
}
ns←PolishWarnings ns;this;name;noOf;i
noOf←≢ns.report
:For i :In ⍳noOf
this←i⊃ns.report
:If 'Invalid internal link:'{⍺≡(≢⍺)↑⍵}this
name←{⍵↑⍨¯1+⍵⍳']'}{⍵↓⍨⍵⍳'['}this
:AndIf (⊂name)∊ns.headers[;2]
⍝ It is an internal bookmark link, which was wrongly reported as invalid, so we remove it from the report
ns.report[i]←⊂''
:EndIf
:EndFor
ns.report←(0<≢¨ns.report)/ns.report
ns←Process ns
⍝ Takes a namespace, typically created by calling `Init`, and then processes `ns.markdown`,
⍝ creating ns.html along the way.
⍝
⍝ The result is all MarkDown converted to HTML but not a fully-fledged HTML document. In order to
⍝ achieve that call `MakeHTML_Doc` in the next step.
:Access Public Shared
ns.noOf←1               ⍝ Minimum number of lines to be removed from ns.(markdown leadingChars emptyLines) per cycle.
ns←CheckForInvalidFootnotes1 ns
ns←ScanMarkdown ns
ns←NumberHeaders ns
ns.toc←CollectToc ns
ns←SetTitle ns
ns←InjectTOC ns
ns←InjectSubTOCs ns
ns←ReplaceLinkIDs ns
ns←ReportLinks ns
ns←InjectFootNotes ns
ns←HandleAbbreviations ns
ns←CheckInternalLinks ns
ns←CheckForInvalidFootnotes2 ns
ns←PolishWarnings ns
:If A.IsDevelopment
:AndIf ns.parms.verbose
:AndIf 0≠≢ns.report
⎕←⍪ns.report
:EndIf
ns.html←{1=≡⍵:⍵ ⋄ ⊃,/⊃⍵}¨ns.html
⍝Done
flag←ProcessATX_Header ns;l;txt;sa;c;c2;bookmarkName;anchor;level;bookmarkName_
flag←0
l←+/∧\'#'=1⊃ns.leadingChars                   ⍝ Level
'Invalid header level'⎕SIGNAL 11/⍨~l∊⍳6
txt←1⊃ns.markdown
:If 4>+/∧\' '=txt                             ⍝ A maximum of three spaces is allowed
:AndIf ' '=⊃txt~'#'                           ⍝ The first char after the # must be a blank
sa←GetSpecialAttributes⊃ns.markdown
txt←sa DropSpecialAttributes txt
:AndIf '#'∨.≠txt~' '
(level c)←txt{(⍵↑⍺)((1+⍵)↓⍺)}⊃⍸'# '⍷txt   ⍝ c=Caption; first eliminate leading `#`
:If (' ',level)≡(-1+≢level)↑c             ⍝ Does it have a closing tag?
c←(-1+≢level)↓c                       ⍝ Remove closing tag
:EndIf
c←ns CheckOddNumberOfDoubleQuotes c'header'
c2←⊃ns ProcessInlineMarkUp c
bookmarkName←ns GetBookMarkNameFromCaption txt((l≤ns.parms.bookmarkLink)/sa)
bookmarkName_←LowercaseID bookmarkName
anchor←AddBookmarkLink l ns bookmarkName_
ns.html,←ns.parms.div_h_tag/⊂'<div class="h_tag">'
ns.html,←{⊂⍣(0≠≢⍵)⊣⍵}anchor
ns.html,←⊂A.DMB'<h',(⍕l),({0=≢⍵:⍵ ⋄ ' data-id="',⍵,'"'}bookmarkName),({0=≢⍵:⍵ ⋄ ' ',⍵}RemoveIdFromSpecialAttributes⍣(0≠≢anchor)⊣sa),'>',c2,'</h',(⍕l),'>'
ns.html,←(0<≢anchor)/⊂'</a>'
ns.html,←ns.parms.div_h_tag/⊂'</div>'
ns.headers⍪←l bookmarkName_ c2''
ns.headerLineNos,←⊃ns.lineNumbers
ns.noOf←1
ns←Drop ns
flag←1
:EndIf
⍝Done
r←ProcessAbbreviationDefs ns;def;abbr;comment
r←0
:If '*['≡2⍴⊃ns.leadingChars
r←1
:If 0≠≢'\*\[[\p{L} \/\+-_=&]*\]:'⎕S 0⊣⊃ns.markdown      ⍝ Find identifiers
(abbr comment)←¯1 0↓¨':'A.Split 2↓⊃ns.markdown
(abbr comment)←A.DLB∘A.DTB¨abbr comment
ns.abbreviations⍪←abbr comment
:Else
ns.report,←⊂'Invalid abbreviation in line ',⍕ns.parms.lineNumberOffset+⊃ns.lineNumbers
:EndIf
ns←Drop ns
:EndIf
txt←ProcessAsterisks txt_;noOf;bool;ind;start;end;txt2
⍝ Takes a string and marks up everything between * and * as <em>
⍝ except when it...
⍝ * occurs within a word
⍝ * occurs within APL code
⍝ * has a white-space char to the right of any opening marker
⍝ * has a white-space char to the left of any closing marker
⍝ Call this **after** having called ProcessDoubleAsterisks
txt2←txt←'  ',txt_,'  '
txt2←'\\\*'⎕R'⌹⌹'⍠('Mode' 'D')⊣txt2
((GetMaskForCode txt2)/txt2)←' '
:If 0<+/bool←'*'=txt2
:AndIf 1<+/bool
:AndIf 0<+/bool∧bool\~∧/⍉txt2[¯1 1∘.+⍸bool]∊AllWhiteSpaceChars
:AndIf 0<+/bool∧bool\∧/⍉txt2[¯1 1∘.+⍸bool]≠'*'
mask←GetMaskForCode txt
bool∧←~mask
:AndIf 0≠≢ind←⍸bool
ind←{⍵↑⍨(≢⍵)-2|≢⍵}ind
start←((≢ind)⍴1 0)/ind
end←((≢ind)⍴0 1)/ind
txt[start]←⊂'<em>'
txt[end]←⊂'</em>'
txt←⊃,/txt
:EndIf
txt←2↓¯2↓txt
⍝Done
ProcessAutomaticLinks←{
⍝ Transforms <https:mydomain.com> into a link
⍝ (It was a very bad idea to use this syntax! [](url) is so obvious!)
⍝ Note that this function escapes any of `_`, `__`, `*`, `**`, `~~`.
txt←⍵
~∧/'<>'∊txt:txt
head←(¯1+txt⍳'<')↑txt
txt←(≢head)↓txt
mask←~GetMaskForCode txt
bool←'<'=mask\mask/txt
0=+/bool:head,txt
txt2←(1+bool)⊆txt
txt3←ProcessAutomaticLinks_¨txt2
head,⊃,/txt3
}
r←ProcessAutomaticLinks_ txt;link;trailer;sa
(link trailer)←{i←⍵⍳'>' ⋄ (i↑⍵)(i↓⍵)}txt
link←¯1↓1↓link
sa←GetSpecialAttributes link
link←sa DropSpecialAttributes link
:If IsHTTP link
:OrIf IsFTP link
:OrIf IsFileProtocol link
r←(sa{'<a href="',⍵,'" class="external_link"',⍺,'>',⍵,'</a>'}link),trailer
:ElseIf IsMailTo link
r←(sa{'<a href="',⍵,'" class="mailto_link"',⍺,'>',({⍵↓⍨⍵⍳':'}link),'</a>'}link),trailer
:ElseIf '@'∊link
r←(sa{'<a href="mailto:',⍵,'" class="mailto_link"',⍺,'>',⍵,'</a>'}link),trailer
:Else
r←txt
:EndIf
ProcessAutomaticLinks_OBSOLETE←{
⍝ This must be done early because later any "<" and ">" will be replaced by there HTML entities.
⍝ (It was a very bad idea to use this syntax! [](url} is so obvious!)
⍝ Therefore we replace "<" and ">" by made-up HTML entities which we replace later by "<" & ">".
⍝ Note that this function escapes any of `_`, `__`, `*`, `**`, `~~`.
txt←⍵
mask←~GetMaskForCode txt
0=≢i1←¯1+⍸'<'=mask\mask/txt:txt
txt←i1[1]⌽txt
(≢txt)<l←txt⍳'>':(-i1[1])⌽txt
link←¯1↓1↓l↑txt
sa←GetSpecialAttributes{'{'∊⍵:{⍵↑⍨⍵⍳'}'}{⍵↓⍨¯1+⍵⍳'{'}⍵ ⋄ ⍵}link
link←A.DTB{⍵/⍨~Between ⍵∊'{}'}link
∨/link∊AllWhiteSpaceChars:⍵                       ⍝ The link text must not contain any white space
0={(∨/'://'⍷⍵)∨'@'∊⍵}link:⍵                       ⍝ We need to catch URLs and email addresses
link,⍨←(0={(∨/'://'⍷⍵)∨'@'∊⍵}link)/'http://'
link←'\_' '\*' '\~\~'⎕R'\\_' '\\*' '\\~\\~'⍠('Greedy' 0)⊣link
link,⍨←(('@'∊link)∧'mailto:'{⍺≢⎕C(≢⍺)↑⍵}link)/'mailto:'
class←' class="',((1+'mailto'{⍺≡(≢⍺)↑⍵}link)⊃'external_link' 'mailto_link'),'"'
linkText←sa DropSpecialAttributes'mailto:'{⍵↓⍨(≢⍺)×⍺≡(≢⍺)↑⍵}1↓¯1↓l↑txt
linkText←'\_' '\*' '\~\~'⎕R'\\_' '\\*' '\\~\\~'⍠('Greedy' 0)⊣linkText
txt←('<a href="',link,'"',class,sa,'>',linkText,'</a>'),l↓txt
txt←(-i1[1])⌽txt
∇ txt
}
r←ProcessBlockQuotes ns;parms;md;ns2;sa
⍝ Processes any blockquotes recursively. That way they can contain **everything**, including blockquotes.
r←0
:If '> '≡2↑⊃ns.leadingChars
ns.noOf←ScanForBlockQuotes ns
parms←CreateParms
parms.bookmarkLink←0
parms.markdownStrict←ns.parms.markdownStrict
parms.verbose←0
parms.checkLinks←0
parms.checkFootnotes←0
parms.subTocs←0
parms.syntaxSugar←ns.parms.syntaxSugar
parms.lineNumberOffset←⊃ns.lineNumbers
md←ns.noOf↑ns.markdown
(1⊃md)←2↓1⊃md
(1↓md)←(2×'> '∘≡¨2↑¨1↓md)↓¨1↓md
sa←GetSpecialAttributes⊃md
(⊃md)←sa DropSpecialAttributes⊃md
ns2←Init parms md
ns2←Process ns2
ns.html,←(⊂'<blockquote',((0<≢sa)/' ',A.DLB sa),'>'),ns2.html,⊂'</blockquote>'
ns.report,←ns2.report
ns←Drop ns
r←1
:EndIf
⍝Done
r←ProcessCheckBoxes ns;noOfLines;list;b
⍝ Replaces "- [ ]" with "☐" and "- [x]" or "- [X]" with "☒"
r←0
:If 0<≢list←(+/∧\~ns.emptyLines)↑ns.markdown
b←∧\{0<≢'^ {0,3}- \[[ xX]] '⎕S 0⊣⍵}¨list
:AndIf ∨/b
noOfLines←+/b
list←b/list
list←ns{⊃⍺ ProcessInlineMarkUp ⍵}¨list
b←∨/¨'[ ]'∘⍷¨list
(b/list)←{'- \[ \]'⎕R'☐'⊣⍵}¨b/list
b←~b
(b/list)←{'- \[[xX]\]'⎕R'☒'⊣⍵}¨b/list
ns.noOf←noOfLines
r←1
ns.html,←⊂'<ul class="checkboxes">'
ns.html,←{'<li',({'☒'∊⍵:' class="checked">' ⋄ '>'}⍵),({⍵↓⍨1+⌊/⍵⍳'☐☒'}⍵),'</li>'}¨list
ns.html,←⊂'</ul>'
ns←Drop ns
∆LastLineWasEmpty←1
:EndIf
⍝Done
r←ProcessCodeBlock ns;bl;buff;sa;pattern;min;line;infoString;fence
⍝ Handles code block, either "~~~" (Markdown2 Extra) or "```" (Git).
r←0
line←⊃ns.markdown
:If IsFenceStart line
line←A.DLB line
min←{(⊃⍵)+.=⍵}line
fence←⊃line
pattern←('^\s{0,3}'),fence,'{',(⍕,min),',}'
:AndIf ¯1≢ns.noOf←pattern FindFenceEnd 1↓ns.markdown
:If 2<ns.noOf
bl←1↓¯1↓ns.noOf↑ns.markdown
sa←GetSpecialAttributes line
line←sa DropSpecialAttributes line
infoString←GetInfoString line
:If 0<+/≢¨bl~¨' '
bl←((+/∧\' '=⊃ns.markdown)⌊⌊/+/∧\' '=↑bl)↓¨bl   ⍝ Drop as many blanks as there are indendet blanks
buff←(2 EscapeSpecialChars¨bl)sa infoString
buff←ns MarkUpAsCode buff
:If ns.parms.leanpubExtensions
buff←ProcessLeanPubCodeEmphasizing buff
:EndIf
ns.html,←buff
:EndIf
ns.noOf←2+≢bl
:ElseIf 2≠ns.noOf
:OrIf 0≠≢(⊃ns.markdown)~'~` '
ns.noOf←0
:Return
:EndIf
r←1
ns←Drop ns
:EndIf
r←ProcessDataDefs ns;def;value;id;b;v
r←0
:If '['=⊃⊃ns.leadingChars
:If 0≠≢⍸'[data]:'≡⎕C 7↑⊃ns.leadingChars      ⍝ Find identifiers
def←⊃ns.markdown
:If '='∊def
(id value)←¯1 0↓¨7 0↓¨{i←⍵⍳'=' ⋄ (i↑⍵)(i↓⍵)}def
id←A.DLB A.DTB id
value←A.DLB A.DTB value
:If ''''∊value
:If ''''''≡2⍴¯1⌽value
value←¯1↓1↓value
:Else
value←''
ns.report,←⊂'Data value definition for line ',(⍕ns.parms.lineNumberOffset+⊃ns.lineNumbers),' is invalid'
:EndIf
:Else
(b v)←⎕VFI value
:If ∧/b
value←{1=≢⍵:⍬⍴⍵ ⋄ ⍵}v
:EndIf
:EndIf
ns.data,←⊂id value
:Else
ns.report,←⊂'Data definition on line ',(⍕ns.parms.lineNumberOffset+⊃ns.lineNumbers),' is invalid'
:EndIf
ns←Drop ns
r←1
:EndIf
:EndIf
r←ProcessDefinitionLists ns;noOf;bool;bl;html;nop;not2;buff;bl2;total;el;not;sa;colons
r←0
:If 1<≢ns.markdown                                ⍝ A definitions has at least two lines
:AndIf 1≤ScanForPara ns                           ⍝ Exactly one line for a term but there might be no empty line after it.
:AndIf 0≠≢'^\s{0,3}:\s'⎕S 0⊣⊃(+/∧\1↓ns.emptyLines)↓1↓ns.markdown  ⍝ Is there ": " in the first non-empty line?
noOf←(≢ns.markdown)⌊(1 1⍷ns.emptyLines)⍳1     ⍝ Maximum number of lines until the last `:` of this definition list
colons←': '∘≡¨2↑¨noOf↑ns.leadingChars         ⍝ Where are any leading colons followed by a space?
total←0
:AndIf 0<+/colons                                 ⍝ Any at all? If not it's not a definition list!
bl←noOf↑ns.markdown                           ⍝ The whole lot
html←⊂'<dl>'
el←{0=≢¨⍵}bl~¨' '                           ⍝ Empty lines
:Repeat
:If 1<≢bl
:AndIf 0≠≢∊1↓bl
:AndIf 0≠≢'^\s{0,3}:\s'⎕S 0⊣{⍵⊃⍨1⍳⍨0<≢¨⍵}1↓bl
sa←GetSpecialAttributes⊃bl
(⊃bl)←sa DropSpecialAttributes⊃bl
buff←('dt',sa)∘Tag¨1⊃¨ns ProcessInlineMarkUp¨1↑bl
not←1++/∧\1↓el
(bl colons el)←not↓¨bl colons el
:AndIf 0∊el
⍝ Now we pick up everything that fulfills one of the following conditions:
⍝ * Starts with a ": "
⍝ * Starts with two spaces (plus any leading spaces before the ":")
⍝ * Is an empty line
nop←+/∧\el∨colons∨{⊃(' '=¯1↓⍵)∧' '≠¯1↑⍵}¨(3++/∧\' '=⊃bl)↑¨bl
:AndIf 0<≢bl2←nop↑bl
(bl colons el)←(≢bl2)↓¨bl colons el
:AndIf 0≠≢bl2←(0<≢¨bl2~¨' ')/bl2
bl2{v←⍺ ⋄ 0=≢⍵:v ⋄ ((¯1+⊃⍵)⊃v)←A.DMB((¯1+⊃⍵)⊃v),' ',(⊃⍵)⊃v ⋄ ((⊃⍵)⊃v)←'' ⋄ v ∇ 1↓⍵}←⌽⍸':'≠⊃¨A.DLB¨bl2
bl2←(0<≢¨bl2)/bl2
bl2←{⍵↓⍨1+⍵⍳':'}¨bl2
sa←GetSpecialAttributes¨bl2
bl2←sa DropSpecialAttributes¨bl2
bl2←⊃¨ns ProcessInlineMarkUp¨bl2
:If 1=not
:AndIf 1=≢bl2
bl2←⊂('dd',⊃sa)Tag⊃bl2
:Else
:If 1<≢bl2←((⊂'dd'),¨sa)Tag¨Tag¨bl2
(1⊃bl2)←'<p>'⎕R'<p class="first_dd">'⊣1⊃bl2
:EndIf
:EndIf
html,←buff,bl2
total+←not+nop
:Else
bl←''
:EndIf
:Until 0=≢bl
ns.noOf←total
html,←⊂'</dl>'
r←1
ns.html,←html
ns←Drop ns
∆LastLineWasEmpty←1
:EndIf
⍝Done
txt←ProcessDoubleAsterisks txt_;noOf;bool;ind;start;end;mask
⍝ Takes a string and marks up everything between ** and ** as <strong>
⍝ except when it occurs within a word or within APL code or the ** are surrounded on both sides by white space.
⍝ Call this **before** calling ProcessAsterisks.
txt←'  ',txt_,'  '
:If 0<+/bool←'**'⍷txt
:AndIf 0<+/bool←bool∧bool\~∧/⍉txt[¯1 2∘.+⍸bool]∊AllWhiteSpaceChars
:AndIf 0<+/bool←bool∧bool\txt[¯1+⍸bool]≠'\'
mask←GetMaskForCode txt
bool∧←~mask
:AndIf 0≠≢ind←⍸bool
:AndIf 0≠≢ind←(-2|≢ind)↓ind
start←((≢ind)⍴1 0)/ind
end←((≢ind)⍴0 1)/ind
txt[start]←⊂'<strong>'
txt[end]←⊂'</strong>'
txt[1+start,end]←⊂''
txt←⊃,/txt
:EndIf
txt←2↓¯2↓txt
⍝Done
txt←ProcessDoubleTildes txt_;noOf;bool;ind;start;end;mask;bool1;bool2
⍝ Takes a string and marks up everything between ~~ and ~~ as <del>
⍝ except when it occurs within a word or within APL code.
⍝ "~~" might also appear as "~~~", and it might be escaped.
txt←'  ',txt_,'  '
:If 0<+/bool←'~~'⍷txt
ind←⍸bool
:AndIf 0<+/bool1←bool∧bool\~txt[¯1+ind]∊'\~'
:AndIf 0<+/bool2←bool∧bool\~txt[ind+≢'~~']∊'~\'
:AndIf 0<+/bool←bool1∧bool2
mask←GetMaskForCode txt
bool∧←~mask
:AndIf 0≠≢ind←⍸bool
:AndIf 0≠≢ind←((txt 2∘NotWithinWord¨ind))/ind
start←((≢ind)⍴1 0)/ind
end←((≢ind)⍴0 1)/ind
txt[start]←⊂'<del>'
txt[end]←⊂'</del>'
txt[1+start,end]←⊂''
txt←⊃,/txt
:EndIf
txt←2↓¯2↓txt
⍝Done
txt←ProcessDoubleUnderscores txt_;noOf;bool;ind;start;end;txt2
⍝ Takes a string and marks up everything between __ and __ as <strong>
⍝ except when it occurs within a word or within APL code or as part of a function call.
txt2←txt←'  ',txt_,'  '
((GetMaskForCode txt2)/txt2)←' '
:If ∨/bool←'\_'⍷txt2
⍝          txt2[,⍉0 1∘.+⍸ bool]←(2×+/bool)⍴'' '_'
txt2←'\\_'⎕R'aa'⊣txt2
:EndIf
:If 0<+/bool←'__'⍷txt2
:AndIf 0<+/bool∧bool\~∧/⍉txt2[¯1 2∘.+⍸bool]∊AllWhiteSpaceChars
:AndIf 0≠≢ind←⍸bool
:AndIf 0≠≢ind←((txt 2∘NotWithinWord¨ind))/ind
ind←{⍵↑⍨(≢⍵)-2|≢⍵}ind
start←((≢ind)⍴1 0)/ind
end←((≢ind)⍴0 1)/ind
txt[start]←⊂'<strong>'
txt[end]←⊂'</strong>'
txt[1+start,end]←⊂''
txt←⊃,/txt
:EndIf
txt←2↓¯2↓txt
⍝Done
ns←ignoreEmbeddedParms ProcessEmbeddedParms ns;noOf;b1;buff;b2;b3;bool
⍝ Here we do not need to add ns.parms.lineNumberOffset because there are no
⍝ embedded parameters with recursive calls anyway!
:If 0<noOf←{¯1+1⍳⍨1 1⍷((0=≢¨⍵)∨⍵∧.=¨' '),1 1}¯1↓ns.markdown            ⍝ Two consecutive blank lines break the [parm]: definitions
:If 0=⊃b1←(⊃¨noOf↑ns.markdown)∊'[ ⍝'                               ⍝ First character must be one of those
b1[1]←IsLeanPubEncodingLine⊃ns.markdown                        ⍝ But it might also be a LeanPub encoding directive
:EndIf
(b1 buff)←noOf↑¨b1 ns.markdown
:If 0<noOf←{(≢⍵)-¯1+(⌽⍵)⍳1},b1                                     ⍝ The number of candidates
buff←noOf↑buff
:AndIf 0<+/b1←'['=⊃¨buff                                           ⍝ Leading `[` are required for [parm]: definitions!
:AndIf 0<noOf←{(≢⍵)-¯1+(⌽⍵)⍳1},b1                                  ⍝ The number of candidates
buff[(IsLeanPubEncodingLine⊃buff)/1]←⊂''                       ⍝ Erase the LeanPub encoding directive
buff←noOf↑buff
:AndIf 0<+/b1←'[parm]:'{⍺∘≡¨(≢⍺)↑¨⍵}buff                           ⍝ Now we are getting more specific because of `[data]:`
:AndIf 0<noOf←{(≢⍵)-¯1+(⌽⍵)⍳1},b1
(b1 buff)←noOf↑¨b1 buff
b2←0=≢¨buff~¨' '                                               ⍝ Between any [parm]: lines there might be single blank lines
b3←'⍝'=⊃¨buff                                                  ⍝ Between any [parm]: lines there might be comment lines
:AndIf 0<noOf←+/b1∨b2∨b3
buff←noOf↑buff
ns.markdown[(IsLeanPubEncodingLine⊃buff)↓⍳noOf]←⊂''            ⍝ Convert the [parm] definitions in the markdown to blank lines
bool←'[parm]:'∘{⍺≡(≢⍺)↑⍵}¨buff                                 ⍝ Otherwise we are not interested
:If ~ignoreEmbeddedParms
(⍸bool)ProcessEmbeddedParms_¨bool/buff                     ⍝ Process the rows one by one
:If ∨/bool←~ns.embeddedParms[;1]∊CreateHelpParms.∆List[;1]
ns.report,←⊂'Invalid embbed parameter',((1<+/bool)/'s'),': ',⊃{⍺,',',⍵}/'"',¨'"',⍨¨bool/ns.embeddedParms[;1]
:EndIf
:EndIf
:EndIf
:EndIf
{r}←i ProcessEmbeddedParms_ def;key;value;allowed;b;v
⍝ `def` is a single definition (like `[parm]:name=value`) or a blank or comment line or a LeanPub directive.
⍝ Returns the number of succesdsfully established key/value pairs.
⍝ Is called by `ProcessEmbeddedParms` and requiresd access to `ns`/
r←0
allowed←CreateParms.∆List[;1]                                     ⍝ List of allowed parameter names
:If '='∊def                                                       ⍝ A definition MUST contain this
(key value)←¯1 0↓¨((≢'[parm]:'),0)↓¨{i←⍵⍳'=' ⋄ (i↑⍵)(i↓⍵)}def ⍝ Split into name and value
key~←' '
:If 0=≢value←A.DLB A.DTB value                                    ⍝ Empty values do not make sense
ns.report,←⊂'Parameter definition on line ',(⍕i),' is invalid'
:Else
:If ''''∊value
:If ''''''≡2⍴¯1⌽value
value←¯1↓1↓value
:Else
value←''
ns.report,←⊂'Parameter value definition for line ',(⍕⊃i),' is invalid'
:EndIf
:ElseIf '⎕null'{⍺≡⎕C(≢⍺)↑⍵}value
value←⎕NULL
:Else
(b v)←⎕VFI value
:If ∧/b
value←{1=≢⍵:⍬⍴⍵ ⋄ ⍵}v
:EndIf
:EndIf
:EndIf
ns.embeddedParms⍪←key value
⍎'ns.parms.',key,'←value'
:Else
ns.report,←⊂'Parameter definition on line ',(⍕i),' is invalid'
:EndIf
r←ProcessEmeddedHTML ns;tags;b;flag
⍝ Figures out whether the current line begins an HTML block.\\
⍝ For details regarding HTML block see <http://spec.commonmark.org/0.24/#html-blocks>.\\
⍝ There's more to it than meets the eye at first glance.
r←1
:If CheckForHtmlBlock ns.(markdown emptyLines topOfDocument)
:If r←ProcessHtmlBlock_ScriptStylePre ns
:AndIf r←ProcessHtmlBlock_HtmlComments ns
:AndIf r←ProcessHtmlBlockType_CDATA ns
:AndIf r←ProcessHtmlBlockType_Tags ns
{⍵:.}ns.noOf=0                         ⍝ That must not happen at this stage!
:AndIf ⊃ns.emptyLines
ns.noOf←1
ns←Drop ns
:EndIf
:EndIf
r←ProcessFootnoteDefs ns;b1;noOf;b2;def;id
r←0
:If 0≠≢'^\[\^[A-Za-z0-9_⍙∆]*\]:'⎕S 0⊣⊃ns.markdown       ⍝ Find identifiers
noOf←ScanForPara ns
noOf←1⍳⍨'[^'∘≡¨2↑¨(noOf-1)↑1↓ns.markdown
b1←'  '∘≡¨2↑¨noOf↓ns.markdown
b2←noOf↓ns.emptyLines
ns.noOf←noOf+(+/∧\b1)⌊1⍳⍨1 1⍷b2
def←A.DLB{(⊂{'  ',A.DLB ⍵↓⍨⍵⍳':'}⊃⍵),1↓⍵}ns.noOf↑ns.markdown
:AndIf ':'=1↑{⍵↓⍨⍵⍳']'}⊃ns.markdown
id←{⍵↑⍨¯1+⍵⍳']'}2↓⊃ns.markdown
:AndIf ∧/~AllWhiteSpaceChars∊id
:AndIf 0≠≢def←(-+/∧\0=⌽≢¨def)↓def
:AndIf 0≠≢def←{1↓¨(' '=⊃¨⍵)⊂⍵}' ',def
:AndIf 0≠≢def←CompilePara¨def
:AndIf 0≠≢def←⊃¨ns ProcessInlineMarkUp¨def
ns.footnoteDefs⍪←id def
ns←Drop ns
r←1
:EndIf
(html isHtmlBlock)←ns ProcessFunctionCalls html;mask;ind;noOf;call;result;flag;isEmpty
mask←~GetMaskForCodeTags html
isHtmlBlock←0
:If 0≠≢ind←'[^⍎]⍎⍎[^⍎]'⎕S 0⊣' ',(mask/html),' '  ⍝ Two blanks for the ≠ to fit start and end. The first one also fixes ⎕io
:AndIf 0≠≢ind←(2×⌊0.5×≢ind)↑ind
:Repeat
html←(⊃ind)⌽html
noOf←-/ind[2 1]
call←A.DLB A.DTB 1↓(noOf-1)↑1↓html
html←(2+noOf)↓html
result←ns ExecExternalFns call
:If 0≠≢result
isEmpty←0=≢¨result~¨' '
result←(0⌈¯1++/∧\isEmpty)↓(-0⌈¯1++/∧\⌽isEmpty)↓result ⍝ Allow max 1 leading/trailing blank line
flag←⊃ns.parms.syntaxSugar
isHtmlBlock←CheckForHtmlBlock (⊆result)(0=≢¨' '~¨⍨⊆result)ns.topOfDocument
:If 1=≡result
:If flag∧~isHtmlBlock
result←⊃ns ProcessInlineMarkUp result
:EndIf
:Else
'Embeded function returned invalid result'⎕SIGNAL 11/⍨(,1)≢∪≡¨,¨result
:If flag∧~isHtmlBlock
result←,⊆result
result←,⊃¨ns ProcessInlineMarkUp¨A.DMB result
:EndIf
:EndIf
'Called function returned an HTML block but does not stand on its own'⎕SIGNAL 11/⍨isHtmlBlock∧0≠≢html
:If 0=≢html
html←(-ind[1])⌽result,html
:Else
html←(-ind[1])⌽(⊃⍣(1<≡html)⊣result),html
:EndIf
:EndIf
:Until 0=≢ind←2↓ind
:EndIf
ProcessHeaders←{
ns←⍵
'#'=1⍴⊃ns.leadingChars:ProcessATX_Header ns
ProcessSetextHeader ns
}
ProcessHorizontalRulers←{
ns←⍵
3<+/∧\' '=⊃ns.markdown:0              ⍝ Zero to a maximum of three leading white space characters are allowed.
sa←GetSpecialAttributes⊃ns.markdown
line←A.DLB⊃ns.markdown
line←sa DropSpecialAttributes line
0=+/∧/¨(⊂line~⎕UCS 9 10 11 12 13 32 133 160)='*-_':0
3>line+.=⊃line:0
0≠≢line~' ',⊃line:0
ns.html,←⊂'<hr',sa,'>'
ns←Drop ns
1
}
r←ProcessHtmlBlockType_CDATA ns;start
⍝ <![CDATA[ and ]]
⍝ ← is 0 when found and processed, otherwise 1.
r←1
:If 2<≢ns.markdown
:AndIf 0=≢⊃ns.markdown
:AndIf '<![CDATA['{⍺≡(≢⍺)↑⍵}2⊃ns.leadingChars
:AndIf 0<ns.noOf←DetectClosingTagBeforeEmptyLine ns.markdown']]>'
ns.html,←']]>'DropTailAfterClosingTag 1↓ns.noOf↑ns.markdown
ns←Drop ns
r←0
:EndIf
r←ProcessHtmlBlockType_Tags ns;start;t;f2;tag;noOfEmptyLines
⍝ Check for all HTML5 tags as well as self-defined tags.
⍝ Note that self-defined tags must contain a hyphen by definition
⍝ Note also that an HTML block MUST START with a < in the first column, and will
⍝ end at the first empty line to be found
⍝ ← is 1 when found and processed, otherwise 0.
r←1
:If ns.topOfDocument∨∆LastLineWasEmpty∨⊃ns.emptyLines
:If 0<ns.noOf←+/∧\ns.emptyLines           ⍝ Let's get rid...
ns←Drop ns                            ⍝ ...of any empty lines first.
:EndIf
ns.noOf←1
tag←'/'~⍨{⍵↑⍨¯1+⌊/⍵⍳'> '}1↓⊃ns.markdownLC ⍝ Just the tag name, no matter whether closing or opening
:If (⊂tag)∊HtmlTags
:OrIf IsSelfDefinedHtmlTag tag
ns.noOf←(≢ns.markdown)⌊ns.emptyLines⍳1
ns.html,←ns.noOf↑ns.markdown
ns←Drop ns
∆LastLineWasEmpty←1
r←0
:ElseIf '@'∊∊tag
r←1
:EndIf
:EndIf
r←ProcessHtmlBlock_HtmlComments ns;start;md;bool
⍝ <!-- and -->
⍝ ← is 0 when found and processed, otherwise 1.
r←1
:If 2<≢ns.markdown
:AndIf 1∊(1↓ns.emptyLines),1
:AndIf '<!--'{⍺≡(≢⍺)↑⍵}⊃1↓ns.markdown
:AndIf 0<+/bool←(~∨/¨'-->'∘⍷¨ns.markdown)
ns.noOf←1++/∧\bool
md←1↓ns.noOf↑ns.markdown
ns.html,←'-->'DropTailAfterClosingTag md
ns←Drop ns
r←0
:EndIf
r←ProcessHtmlBlock_ScriptStylePre ns;start
⍝ <script>, <style> or <pre>.
⍝ These are special because the first two can never be nested while the last one
⍝ preserves white space by definition.
⍝ ← is 0 when found and processed, otherwise 1.
r←0
:If '^<script\b[^>]*>'DetectOpeningTag(⊃ns.emptyLines)↓ns.markdown
ns←Drop⍣(⊃ns.emptyLines)⊣ns
ns.noOf←DetectClosingTag ns.markdownLC'</script>'
ns.html,←'</script>'DropTailAfterClosingTag ns.noOf↑ns.markdown
ns←Drop ns
:ElseIf '^<pre\b[^>]*>'DetectOpeningTag(⊃ns.emptyLines)↓ns.markdown
ns←Drop⍣(⊃ns.emptyLines)⊣ns
ns.noOf←DetectClosingTag ns.markdownLC'</pre>'
ns.html,←Process_PRE ns.noOf↑ns.markdown
ns←Drop ns
:ElseIf '^<style>'DetectOpeningTag(⊃ns.emptyLines)↓ns.markdown
ns←Drop⍣(⊃ns.emptyLines)⊣ns
ns.noOf←DetectClosingTag ns.markdownLC'</style>'
ns.html,←'</style>'DropTailAfterClosingTag ns.noOf↑ns.markdown
ns←Drop ns
:Else
r←1
:EndIf
ProcessImageUrl←{
base←⍵
url←⍺
0=≢base:url
IsHTTP url:url
':'∊url:url
'/'=1⍴url:url
base,(('/'≠¯1↑base)/'/'),url
}
ProcessImages←{
txt←⍵
mask←~GetMaskForCode txt
0=≢i1←¯1+⍸mask∧'!['⍷txt:txt
i1←⊃i1
'![CDATA['{⍺≡(≢⍺)↑⍵}i1↓txt:txt        ⍝ Invalid <![CDATA[ section (probably missing empty lines)
txt←i1⌽txt
alt←2↓¯1↓{⍵↑⍨⍵⍳']'}txt
txt←{⍵↓⍨⍵⍳']'}txt
buff←1↓¯1↓txt↑⍨0⍳⍨(+\'('=txt)>+\')'=txt
specialAttributes←GetSpecialAttributes'.*\(' '\).*'⎕R'' ''⍠('Greedy' 0)⊣buff
buff2←specialAttributes DropSpecialImageAttributes buff
title←{A.DLB ¯1↓A.DTB{⍵↑⍨⍵⍳'"'}⍵↓⍨⍵⍳'"'}buff2
url←{A.DLB A.DTB ⍵↑⍨¯1+⌊/⍵⍳'"{'}buff2
((url='\')/url)←'/'
url←url ProcessImageUrl ns.parms.imageURL
insert←'<img src="',url,'"'
insert,←specialAttributes
(('"'=alt)/alt)←''''
(title alt)←title{0=≢⍺:⊂⍵ ⋄ 0=≢⍵:⊂⍺ ⋄ ⍺ ⍵}alt
insert,←' alt="',alt,'"'
insert,←(0≠≢title)/' title="',title,'"'
insert,←'>'
txt←(-i1)⌽insert,(2+≢buff)↓txt
∇ txt
}
(r isHtmlBlock)←ns ProcessInlineMarkUp tx
⍝ Note: sequence matters! Think thrice before changing, and run test cases immediately if you do anyway.
r←1 ProcessInlineMarkUp_ tx ns.parms
(r isHtmlBlock)←ns ProcessFunctionCalls r
⍝Done
r←escapeFlag ProcessInlineMarkUp_(tx parms)
⍝ Note: sequence matters! Think thrice before changing, and run test cases immediately if you do anyway.
r←tx
r←Process_BR r
r←ProcessAutomaticLinks r
r←ConvertEscapedAmpersand r
r←ProcessSpecialHTML_Chars⍣escapeFlag⊣r
r←parms SmartStuff⍣(⊃parms.syntaxSugar)⊣r
⍝ r←ConvertEscapedAmpersand r
r←ProcessImages r
r←parms.bookmarkMayStartWithDigit ProcessLinks r
r←ProcessDoubleAsterisks r
r←ProcessAsterisks r
r←ProcessDoubleUnderscores r
r←1 ProcessUnderscores r
r←ProcessDoubleTildes r
r←MarkUpInlineCode r
r←RemoveEscapeChars r
r←InjectBR r
⍝Done
ProcessInlineMarkupInLinkText←{
r←ProcessDoubleAsterisks ⍵
r←ProcessAsterisks r
r←ProcessDoubleUnderscores r
r←0 ProcessUnderscores r
r←ProcessDoubleTildes r
ns.parms SmartStuff⍣(⊃ns.parms.syntaxSugar)⊣r
}
html←ProcessLeanPubCodeEmphasizing html;patterns;replaceBy;hits;bool
⍝ Replaces `leanpub-start-insert` by an opening <span> and `leanpub-start-end` by a closing </span>.
⍝ Used to emphasize changes in the code with CSS.
⍝ html←'leanpub-start-insert' 'leanpub-end-insert'⎕R'<span class="leanpub_code">' '</span>'⍠('Greedy' 0)('IC' 1)⊣html
patterns←'^\\leanpub-start-insert' '^\\leanpub-end-insert' '^leanpub-start-insert' '^leanpub-end-insert'
replaceBy←'leanpub-start-insert' 'leanpub-end-insert' '<span class="leanpub_code">' '</span>'
html←patterns ⎕R replaceBy⍠('Greedy' 0)('IC' 1)('Mode' 'L')⊣html
html←1↓∊(⎕UCS 13),¨html
hits←↑'<span class="leanpub_code">' '</span>'⎕S 0 1 3⍠('Greedy' 0)('IC' 1)('Mode' 'M')⊣html
:If 0≠≢hits
⍝ Here we remove the CR between `leanpup-*-insert` and the following line
bool←(≢html)⍴1
bool[1++/hits[;1 2]]←0
bool←(~bool)⍲(~bool)\(⎕UCS 13)=(~bool)/html  ⍝ Only when it's a CR: the last one does not have one!
html←bool/html
:EndIf
html←(⎕UCS 13)A.Split html
⍝Done
ns←parms ProcessLeanPubExtensions ns;flag
⍝ Replaces `A> ` and alikes against a <div> that is used to give it an outlook similar to what LeanPub is doing.
⍝ When this functions runs we have not yet established all embedded parameters from the Markdown, and we can't
⍝ at this stage - too early. But we cannot process the LeanPub extensions later either, so we have to look up for
⍝ any embedded parameter `leanpubExtensions` ourself.
:If 0=flag←parms.leanpubExtensions
:If 0=parms.ignoreEmbeddedParms
flag←(,1)≡,'leanpubExtensions'LookForEmbeddedParm RemoveLeanpubEncoding ns.markdown
:EndIf
:EndIf
:If flag
ns←parms ProcessLeanPubExtensions_ ns
:EndIf
ns←parms ProcessLeanPubExtensions_ ns;leanPubExtensions;extension;isNotCodeBlock;bool;start;lengths;i;ind;noOf;openDiv;body;html;img;after;report;this;fn
leanPubExtensions←'AWTEIQDX'
:For extension :In leanPubExtensions
isNotCodeBlock←~WhereAreCodeBlocks ns.markdown
:If 0<+/bool←isNotCodeBlock\(3↑¨isNotCodeBlock/ns.markdown)≡¨⊂extension,'> '
:AndIf 0≠≢start←⍸0 1⍷bool
lengths←,+/¨bool{⎕ML←3 ⋄ ⍺⊂⍵}bool
:For i :In ⍳≢start
ind←i⊃start
:If 0=≢ind⊃ns.markdown            ⍝ The line before must be empty
noOf←i⊃lengths
after←1+ind+noOf
:If 0=≢after⊃ns.markdown      ⍝ The line after must be empty
openDiv←⊂'<div class="leanpub',((extension≡'A')/'_A'),'">'
body←3↓¨ns.markdown[ind+⍳lengths[i]]
(html report)←ConvertMarkdown2HTML body
:If extension≠'A'  ⍝ Not an Aside?
fn←('EDIWQTX'⍳extension)⊃'Error' 'Discussion' 'Information' 'Warning' 'Question' 'Tip' 'Exercise'
img←⊃,/LeanPubIcons.⍎fn,' ''',(LeanPubAltTextFor extension),''''
html←img'<div>',html,⊂'</div>'
:EndIf
html←{0=+/b←0=≢¨⍵:⍵ ⋄ w←⍵ ⋄ (b/w)←⊂'&nbsp;' ⋄ w}html  ⍝ Important: only this way "html" is later recognized as a single HTML block.
html←openDiv,html,⊂'</div>'
ns.markdown←(ind↑ns.markdown),html,(ind+noOf)↓ns.markdown
ns.lineNumbers←(ind↑ns.lineNumbers),((≢html)⍴⊂(1+ind),ind+noOf),(ind+noOf)↓ns.lineNumbers
:If 0≠≢report
:For this :In report
:If ∨/'(line'⍷this
ns.report,←((ind+1)⊃ns.lineNumbers)∘{i←-(⌽⍵)⍳' ' ⋄ (i↓⍵),' ',({1=≢⍵:⍕⍵ ⋄ ⊃{⍺,'-',⍵}/⍕¨⍵}⍺),')'}¨report
:Else
ns.report,←((ind+1)⊃ns.lineNumbers)∘{i←-(⌽⍵)⍳' ' ⋄ ⍵,' (lines ',({1=≢⍵:⍕⍵ ⋄ ⊃{⍺,'-',⍵}/⍕¨⍵}⍺),')'}¨report
:EndIf
:EndFor
:EndIf
(i↓start)←(i↓start)+(≢html)-noOf
:EndIf
:EndIf
:EndFor
:EndIf
:EndFor
ProcessLinks←{
⍺←1
bookmarkMayStartWithDigit←⍺
txt←⍵
mask←~GetMaskForCode txt
⍬≡on←mask IsolateLink txt:txt
txt←on⌽txt
mask←on⌽mask
closeBracket←(']('⍷(mask\mask/txt))⍳1
mask←(closeBracket⍴1),{(+\⍵='(')-+\⍵=')'}closeBracket↓txt  ⍝ Careful: a caption might contain ")" when just ⍳')' would not suffice
off←1++/∧\1=(∧\0=mask)∨mask>0
linkDef←off↑txt
linkDef←A.DMB ReplaceQTC_byBlank linkDef
mask←~GetMaskForCode linkDef
linkDef←ReplaceDoubleSmartQuotes linkDef mask
sa←GetSpecialAttributes⌽{'{'∊⍵:{⍵↑⍨⍵⍳'{'}{⍵↓⍨¯1+⍵⍳'}'}⍵ ⋄ ''}⌽mask/linkDef   ⍝ Because special attributes for a link follow straight after the link
txt←off↓txt
mask←⌽~GetMaskForCode linkDef
linkDef←⌽mask{'{'∊⍺/⍵:')',(⍵↓⍨(⍺\⍺/⍵)⍳'{') ⋄ ⍵}⌽linkDef                ⍝ Drop the special attribute but leave any code alone
(url title)←GetUrlAndTitleFromLink linkDef
poundFlag←⊃'#'=1⍴url
mask←~GetMaskForCode linkDef
linkText←1↓A.DTB mask{⍵↑⍨¯1+1⍳⍨⍺\']('⍷⍺/⍵}linkDef
url←linkText(bookmarkMayStartWithDigit∘CompileBookMarkName{(1<≢⍵)∧'#'=1↑⍵:'#',⍺⍺ ⍵'' ⋄ (,'#')≡,⍵:'#',⍺⍺ ⍺'' ⋄ ⍵})url
linkText{0=≢⍵:⍺ ⋄ ⍵}←(1+poundFlag)⊃linkText title
linkText←ProcessInlineMarkupInLinkText linkText
linkText{0=≢⍺~' ':⍵ ⋄ ⍺}←poundFlag↓url
tag←'a href="',({'#'=1⍴⍵:LowercaseID ⍵ ⋄ ⍵}url),'"'  ⍝ Make internal (bookmark) links lowercase unless supressed
tag,←(~poundFlag)/' class="',((1+'mailto'{⍺≡(≢⍺)↑⍵}url)⊃'external_link' 'mailto_link'),'"'
tag,←AddBookmarkClassName⍣poundFlag⊣sa
tag,←((~poundFlag)∧0≠≢title)/' title="',title,'"'
insert←tag Tag linkText
txt←(-on)⌽insert,txt
∇ txt
}
r←ProcessList ns;bl;type;i;startAt;item;pFlag;noOfBlanks;levels;levelChange;buff;sa;lastType;lastItem;toBeAdded;indentations;html;lastWasEmpty;indendations;cb;drop;para;Max;buff2;ns2;parms;ns3;md;report;infoString;buff3
⍝ Processing lists is more complex than one would think at first glance for several reasons:
⍝ * Lists can be nested at any level.
⍝ * A nested list can have a different type.
⍝ * Changing the bullet char for bulleted lists (+-*) starts a new list!
⍝ * Lists may contain independent paragrahs; their level is defined by indenting.
⍝ * MarkAPL allows lazy indenting: if a list item spans over several lines only the first
⍝   line must be indented properly. All other lines may or may not be indented.
⍝ * A single backslash at the end of an item are interpreted as "inject <br> here".
:If 0=ns.noOf←IdentifyListItems ns
r←0
:Else
type←,(1+(⊃⊃ns.leadingChars)∊'*+-')⌷'ou'
bl←A.DTB GetListBlock ns.noOf↑ns.markdown
report←''
:If type='u'
html←,⊂'<ul>'
:Else
startAt←{⍵↑⍨¯1+⌊/⍵⍳'.)'}A.DLB⊃bl
html←,⊂'<ol start="',startAt,'">'
:EndIf
i←lastWasEmpty←levelChange←0
⍝ `levels` and `indentation` record almost the same thing:
⍝ * `level` counts white-space until the first non-white-space character.
⍝ * `indentation` does the same but then adds the length of the list-marker.
⍝ The latter is needed in order to identify the level of paragraphs and code blocks within a list.
levels←+/∧\' '=⊃bl
indendations←GetLengthOfLeadingWhitespacePlusListMarker⊃bl
lastType←⊃A.DLB⊃bl
:Repeat
drop←1
i←i+1
:If IsHtmlList A.DLB⊃bl
noOfBlanks←+/∧\' '=⊃bl
:If noOfBlanks≠¯1↑levels
:If noOfBlanks>¯1↑levels
type,←(1+(⊃i⊃ns.leadingChars)∊'*+-')⌷'ou'
((≢html)⊃html)←'</li>'{⍵↓⍨(-≢⍺)×⍺≡(-≢⍺)↑⍵}(≢html)⊃html
:If 'u'=¯1↑type
html,←⊂'<ul>'
:Else
startAt←{⍵↑⍨¯1+⌊/⍵⍳'.)'}A.DLB⊃bl
html,←⊂'<ol start="',startAt,'">'
:EndIf
levels,←noOfBlanks
indendations,←GetLengthOfLeadingWhitespacePlusListMarker⊃bl
lastType,←⊃A.DLB⊃bl
:Else
levelChange←+/∧\(⌽levels)>noOfBlanks
html,←({'</',(¯1↑⍵),'l>'}¨⌽(-levelChange)↑type),¨⊂'</li>'
(levels indendations lastType type)←(-levelChange)↓¨levels indendations lastType type
:EndIf
:ElseIf 0≠≢⊃bl
:AndIf (¯1↑lastType){~⍺∊'+-*':~⍵∊⎕D ⋄ ⍺≠⍵}⊃A.DLB⊃bl
html,←⊂'</',(¯1↑type),'l>'
((≢type)⊃type)←(1+(⊃i⊃ns.leadingChars)∊'*+-')⌷'ou'
lastType,←⊃A.DLB⊃bl
:If 'u'=¯1↑type
html,←⊂'<ul>'
:Else
startAt←{⍵↑⍨¯1+⍵⍳'.'}A.DLB⊃bl
html,←⊂'<ol start="',startAt,'">'
:EndIf
:EndIf
:EndIf
:If 0=≢' '~⍨⊃bl
lastWasEmpty←1
:Else
:If IsHtmlList A.DLB⊃bl
(drop item)←CollectItem bl
:If 0≠≢sa←GetSpecialAttributes⊃bl
:If (⊂3↑(≢html)⊃html)∊'<ul' '<ol'
((≢html)⊃html)←(¯1↓((≢html)⊃html)),sa,'>'
item←A.DLB A.DTB sa DropSpecialAttributes item
:EndIf
:Else
item←A.DLB A.DTB item
:EndIf
i←i+drop-1
item←ns CheckOddNumberOfDoubleQuotes item'list item'
:If '\'=¯1↑item
item,←'<br>'
:EndIf
buff←⊃¯1↑html
:If ~(⊂{' '~⍨{⍵↑⍨⌊/⍵⍳' >'}{⌽⍵↑⍨⍵⍳'<'}⌽⍵}buff)∊'</ul>' '</ol>' '</li>' '<ul' '<ol' '<ul>' '<ol>'
(¯1↑html)←⊂buff,'</li>'
:EndIf
buff3←⊃ns ProcessInlineMarkUp{A.DLB ⍵↓⍨⍵⍳' '},item
html,←⊂'<li>',(A.DLB buff3),'</li>'
lastWasEmpty←0
:Else
noOfBlanks←+/∧\' '=⊃bl
:If (¯1↑indendations){0=⍵:0 ⋄ ⍵≠⍺}noOfBlanks          ⍝ The level has changed
:If noOfBlanks∊indendations                       ⍝ Did the user get the indentation right?
levelChange←¯1+(⌽indendations)⍳noOfBlanks
:Else                                             ⍝ No he did not.
levelChange←0⌈¯1++/indendations<noOfBlanks    ⍝ Let's get as close as possible
:EndIf
:If 0≠levelChange
:If '>'=¯1↑buff←⊃¯1↑html
:AndIf ~(⊂{⌽⍵↑⍨⍵⍳'<'}⌽buff)∊'</ul>' '</ol>' '<ul>' '<ol>'
⍝                                  (¯1↑html)←⊂buff,'</li>'
:EndIf
html,←({'</',⍵,'l>'}¨(-levelChange)↑type),¨⊂'</li>'
(type levels indendations lastType)←(-levelChange)↓¨type levels indendations lastType
:EndIf
:EndIf
:If lastWasEmpty
buff←⊃bl
:If 0≠≢cb←(¯1↑indendations)GetCodeBlockFrom bl
sa←GetSpecialAttributes⊃cb
infoString←(¯1↑indendations)GetInfoString⊃cb
:If (+/∧\' '=⊃cb)≥⊃noOfBlanks                  ⍝ Max number of spaces is the indentation
cb←MassageCodeBlock cb noOfBlanks
cb←¯1↓1↓cb
:If 0<+/≢¨cb~¨' '
buff2←⊃¯1↑html
:If '</li>'{⍺≡(-≢⍺)↑⍵}buff2
buff2←(-≢'</li>')↓buff2
(¯1↑html)←⊂buff2
:EndIf
html,←MarkUpAsCode(2 EscapeSpecialChars¨cb)sa infoString
(¯1↑html)←⊂(⊃¯1↑html),'</li>'
:EndIf
drop←2+≢cb
i+←1+≢cb
:EndIf
:ElseIf '|'=⊃A.DLB buff                             ⍝ Is it a table?
:AndIf (+/∧\' '=buff)≥⊃noOfBlanks                 ⍝ Max number of spaces is the indentation
drop←+/∧\'|'=,1↑[2]A.DLB↑bl
buff←drop↑bl
parms←CreateParms
parms←ns.parms CopyTo parms
parms.lineNumberOffset←⊃ns.lineNumbers
ns2←Init parms(A.DLB buff)
ns2←Process ns2
report,←ns2.report
((≢html)⊃html)←(-≢'</li>')↓(≢html)⊃html
html,←ns2.html
((≢html)⊃html),←'</li>'
:ElseIf '> '≡2⍴A.DLB buff                           ⍝ Is it a blockquote?
ns3←⎕NS''
ns3.(markdown markdownLC leadingChars emptyLines withoutBlanks lineNumbers)←(ns.noOf-≢bl)↓¨ns.noOf↑¨ns.(markdown markdownLC leadingChars emptyLines withoutBlanks lineNumbers)
drop←ScanForBlockQuotes ns3
parms←CreateParms
parms.bookmarkLink←0
parms.markdownStrict←ns.parms.markdownStrict
parms.verbose←0
parms.checkLinks←0
parms.checkFootnotes←0
parms.subTocs←0
parms.syntaxSugar←ns.parms.syntaxSugar
parms.lineNumberOffset←⊃ns.lineNumbers
md←noOfBlanks↓¨drop↑ns3.markdown
ns2←Init parms md
ns2←Process ns2
((≢html)⊃html)←(-≢'</li>')↓(≢html)⊃html
html,←ns2.html
((≢html)⊃html),←'</li>'
report,←ns2.report
:Else
(drop para)←CollectItemPara bl
i←i+drop-1
:If '!['{⍺≡(≢⍺)↑⍵}A.DLB buff
:AndIf '![CDATA['{⍺≢(≢⍺)↑⍵}A.DLB buff
:AndIf 1
⍝ Regular expression needed that catches the image.
⍝ If nothing is left then any special attributes belong to the image rather than the paragraph.
⍝ OR: The definition of images is wrong and special attributes MUST be specified inside the ()!!!!
⍝ (That's much more likely!)
sa←'' ⍝ then any special attributes
:Else
sa←GetSpecialAttributes para
:EndIf
para←A.DTB sa DropSpecialAttributes para
buff←⊃¯1↑html
:If '</li>'≡({{⌽⍵↑⍨⍵⍳'<'}⌽⍵}buff)
buff←(-≢'</li>')↓buff
(¯1↑html)←⊂buff
:EndIf
buff3←⊃ns ProcessInlineMarkUp para
html,←⊂'<p',sa,'>',(A.DLB buff3),'</p></li>'
:EndIf
:Else
html,←⊂'<p>',(⊃bl),'</p>'
:EndIf
lastWasEmpty←0
:EndIf
:EndIf
bl←drop↓bl
:Until 0=≢bl
html,←({'</',(¯1↑⍵),'l>'}¨⌽type),¨((¯1+≢type)⍴⊂'</li>'),⊂''
html←InjectBR¨html
ns.html,←html
ns←Drop ns
r←1
:EndIf
r←ProcessLists ns;noOf
r←0
:If 0=ns.parms.markdownStrict
:OrIf ∆LastLineWasEmpty
:If 3 IsHtmlList⊃ns.markdown
r←ProcessList ns
:EndIf
:EndIf
⍝Done
r←ProcessMarkAPLExtensions ns;noOfLines;b;list;html;details;b1;b2;ind;list2;summary;header;noOfHashes
⍝ Converts `!> ` and `=>` to <details> and <summary>
r←0
:If ~ns.parms.markdownStrict
noOfLines←+/∧\~ns.emptyLines
list←noOfLines↑ns.markdown
(b1 b2)←{b1←'!> '∘≡¨⍵ ⋄ b2←'=> '∘≡¨⍵ ⋄ b1 b2}3↑¨list
:AndIf 1≤+/b2
:If 1=+/b1
⍝ It's a single collapsible
b←b1∨b2
list2←3↓¨b/list
html←⊂'<div class="collapsible">'
html,←⊂'<details>'
html,←⊂'<summary>'
summary←1⊃list2
list2←1↓list2
header←{⍵↓⍨3⌊+/∧\' '=⍵}summary         ⍝ Remove up to three spaces
:If 0<noOfHashes←+/∧\'#'=header        ⍝ Any leading "#" at all?
:AndIf 7>noOfHashes                    ⍝ But not more than 6
:AndIf ' '=1⍴noOfHashes↓header         ⍝ The first char after the last leading # must be a space
:AndIf 0<≢(noOfHashes+1)↓header        ⍝ There must be something left which is the text of the header
header←noOfHashes{h←⍕⍺ ⋄ '<h',h,'>',⍵,'</h',h,'>'}(1+noOfHashes)↓header
html,←1⍴ConvertH1AndH2HeadersToH3⊂header
:Else
html,←1⍴ConvertH1AndH2HeadersToH3⊂summary
:EndIf
html,←⊂'</summary>'
html,←⊂'<div class="collapsible-content">'
html,←⊂'<hr>'
html,←1⊃ConvertMarkdown2HTML list2
html,←⊂'</div>'
html,←⊂'</details>'
html,←⊂'</div>'
ns.html,←html
:Else
⍝ It's multiple collapsibles and therefore an accordian
html←⊂'<div class="accordion">'
:For ind :In ⍸b1
b←1,∧\ind↓b2
list2←3↓¨b/(ind-1)↓list
html,←⊂'<div>'
html,←⊂'<details>'
html,←⊂'<summary>'
summary←1⊃list2
list2←1↓list2
header←{⍵↓⍨3⌊+/∧\' '=⍵}summary         ⍝ Remove up to three spaces
:If 0<noOfHashes←+/∧\'#'=header        ⍝ Any leading "#" at all?
:AndIf 7>noOfHashes                    ⍝ But not more than 6
:AndIf ' '=1⍴noOfHashes↓header         ⍝ The first char after the last leading # must be a space
:AndIf 0<≢(noOfHashes+1)↓header        ⍝ There must be something left which is the text of the header
header←noOfHashes{h←⍕⍺ ⋄ '<h',h,'>',⍵,'</h',h,'>'}(1+noOfHashes)↓header
html,←1⍴ConvertH1AndH2HeadersToH3⊂header
:Else
html,←1⍴ConvertH1AndH2HeadersToH3⊂summary
:EndIf
html,←⊂'</summary>'
html,←⊂'<div class="accordion-content">'
html,←⊂'<hr>'
html,←1⊃ConvertMarkdown2HTML list2
html,←⊂'</div>'
html,←⊂'</details>'
html,←⊂'</div>'
:EndFor
html,←⊂'</div>'
ns.html,←html
:EndIf
ns.noOf←noOfLines
ns←Drop ns
∆LastLineWasEmpty←1
r←1
:EndIf
⍝Done
{r}←∆LastLineWasEmpty ProcessParagraph ns;para;tag;pattern
r←⍬
ns.noOf←ScanForPara ns
ns.noOf←1⌈ns.noOf
para←CompilePara ns.noOf↑ns.markdown
:If '<'=1⍴para
:AndIf '<<'≢2⍴para
:AndIf {{0=+/'://'⍷⍵}⍵↑⍨⍵⍳'>'}para ⍝ Not a auto-link?
pattern←{('<[a-zA-Z',(⍵/'0-9'),'][0-9a-zA-Z]*>')('</[a-zA-Z',(⍵/'0-9'),'][0-9a-zA-Z]*>')}ns.parms.bookmarkMayStartWithDigit
:AndIf 0<≢pattern ⎕S 0⊣para
ns.html,←⊂(para⍳'>')↑para
para←(para⍳'>')↓para
para←(' '=⊃para)↓para
:If 0<≢para
ns ProcessParagraph_ para
:EndIf
:Else
ns ProcessParagraph_ para
:EndIf
ns←Drop ns
{r}←ns ProcessParagraph_ para;sa;isHtmlBlock
r←⍬
para←ns CheckOddNumberOfDoubleQuotes para'paragraph'
sa←GetSpecialAttributes para
para←sa DropSpecialAttributes⍣(0<⊃⍴sa)⊣para
(para isHtmlBlock)←ns ProcessInlineMarkUp para
:If 0≠≢para
:If isHtmlBlock
ns.html,←para
:Else
ns.html,←,⊆sa{2=≡⍵:⍺∘∇¨⍵ ⋄ '<p',({0=≢⍵:'>' ⋄ ⍵,'>'}⍺),⍵,'</p>'}para
:EndIf
:EndIf
r←ProcessReferenceLinks ns;line;id;url;alt;sa
r←0
:If '['=⊃⊃ns.leadingChars
:AndIf 0≠≢'\[[A-Za-z0-9_-]*\]:'⎕S 0⊣⊃ns.markdown      ⍝ Find identifiers
id←{1↓⍵↑⍨¯2+⍵⍳':'}⊃ns.markdown
url←A.DLB A.DTB{⍵↓⍨⍵⍳':'}⊃ns.markdown
:AndIf {~'='∊⍵↑⍨⌊/⍵⍳'?{'}url   ⍝ `?` parts URL parameter, `{` parts special attributes. Both may carry `=`!
sa←GetSpecialAttributes url
url←A.DTB sa DropSpecialAttributes url
:If 2=+/'"'=url
alt←{¯1↓⍵↓⍨⍵⍳'"'}url
url←A.DTB{⍵↑⍨¯1+⍵⍳'"'}url
:Else
alt←''
:EndIf
ns.linkRefs,←⊂id url alt sa
ns←Drop ns
r←1
:EndIf
flag←ProcessSetextHeader ns;noOf;ind;sa;l;c;c2;anchor;bookmarkName;bookmarkName_
flag←0
noOf←ScanForPara ns                           ⍝ Because only what qualifies as paragraph can be an ATX header
:If noOf≠0
:AndIf noOf<≢ns.markdown
:AndIf 0<≢∊(1+noOf)⌷ns.withoutBlanks          ⍝ Must not be empty of course
ind←noOf+⍸∊'-='IotaSetextHeader¨⊂(1+noOf)⌷¨ns.(withoutBlanks markdown emptyLines)
:AndIf 0≠≢ind                             ⍝ It's not a Setext header
ind←⊃ind
sa←GetSpecialAttributes(ind-1)⊃ns.markdown
l←1+'-'=⊃ind⊃ns.leadingChars
c←CompilePara noOf↑ns.markdown
c←sa DropSpecialAttributes c
ns.noOf←1+noOf
c2←⊃ns ProcessInlineMarkUp c
c←ns CheckOddNumberOfDoubleQuotes c'header'
bookmarkName←ns GetBookMarkNameFromCaption c2((l≤ns.parms.bookmarkLink)/sa)
bookmarkName_←LowercaseID bookmarkName
anchor←AddBookmarkLink l ns bookmarkName_
ns.html,←ns.parms.div_h_tag/⊂'<div class="h_tag">'
ns.html,←{⊂⍣(0≠≢⍵)⊣⍵}anchor
ns.html,←⊂A.DMB'<h',(⍕l),({0=≢⍵:⍵ ⋄ ' data-id="',⍵,'"'}bookmarkName),({0=≢⍵:⍵ ⋄ ' ',⍵}RemoveIdFromSpecialAttributes⍣(0≠≢anchor)⊣sa),'>',c2,'</h',(⍕l),'>'
ns.html,←(0<≢anchor)/⊂'</a>'
ns.html,←ns.parms.div_h_tag/⊂'</div>'
ns.headers⍪←l bookmarkName_ c2''
ns.headerLineNos,←⊃ns.lineNumbers
ns←Drop ns
flag←1
:EndIf
⍝Done
ProcessSpecialHTML_Chars←{
tx←⍵
0=+/tx∊'&<>':tx
EscapeSpecialChars tx
}
r←ProcessSubTOC ns;header;level;nextHeader;specialAttrs;subToc;depth
r←0
:If 0<≢subToc←GetRegExPatternForSubToc ⎕S{⍵.Match}⍠('Greedy' 0)('IC' 1)⊣⊃ns.markdown
:If (,0)≢,ns.parms.toc
:AndIf ns.parms.subTocs
subToc←⊃subToc
:If 0<≢ns.html
:AndIf 0<≢nextHeader←{⍵⊃⍨1⍳⍨'<h'∘≡¨(≢'<h')↑¨⍵}⌽ns.html
header←{⍵↑⍨¯1+⍵⍳'<'}{⍵↓⍨⍵⍳'>'}nextHeader
level←{⊃(//)⎕VFI ⍵↑⍨¯1+⌊/⍵⍳' >'}2↓nextHeader
specialAttrs←GetSpecialAttributes(∧/'{}'∊subToc)/{⍵↑⍨⍵⍳'}'}{⍵↓⍨¯1+⍵⍳'{'}subToc
depth←0
:If '-'∊subToc
depth←⊃(//)⎕VFI{⊃⍵↓⍨⍵⍳'-'}subToc
:EndIf
ns.subToc,←⊂level header depth specialAttrs
ns.html,←⎕C 1↑ns.markdown
:EndIf
:EndIf
ns←Drop ns
r←1
:EndIf
r←ProcessTable ns;b;max
r←0
:If IsTableRow⊃ns.markdown
max←+/∧\∨/'|'=↑ns.withoutBlanks
ns.noOf←+/∧\IsTableRow¨max↑ns.markdown
:If 1<ns.noOf
:AndIf ∨/{∧/'-'='|: '~⍨⍵}¨{⍵↑⍨¯1+⍵⍳'{'}¨2↑ns.markdown
r←ProcessTable_ ns
:Else
r←ProcessTableWithoutColTitles ns
:EndIf
:EndIf
⍝Done
r←ProcessTableWithoutColTitles ns;specialAttrs;cells;footer;rows;align;hasFooter;html
r←1
specialAttrs←GetSpecialAttributes⊃ns.markdown
html←⊂{0=≢⍵:'<table>' ⋄ '<table',⍵,'>'}specialAttrs
cells←SplitTableRowButMaskCode¨{(⊂specialAttrs DropSpecialAttributes⊃⍵),1↓⍵}ns.noOf↑ns.markdown
cells←{A.DLB∘A.DTB ⍵}¨¨cells
cells←ns{⍺ CheckOddNumberOfDoubleQuotes ⍵'header'}¨¨cells
hasFooter←'='∧.={2≥≢⍵:0 ⋄ ∊(¯1+≢⍵)⊃⍵}cells
align←('left' 'right')[1+{∧/⊃⎕VFI∊' ',¨⍵}¨↓⍉↑hasFooter{1=⍺:1↓¯2⌽⍵ ⋄ ⍵}cells]
:If {(∧/⍵∊' -:')∧('-'∊⍵)}↑,/1⊃cells
cells←1↓cells
:EndIf
cells←⊃¨¨ns ProcessInlineMarkUp¨¨cells
(footer cells)←ns.parms.markdownStrict GetFooter cells
:If 0=≢cells
r←0
:Else
:If 0≠≢footer
html,←⊂'<tfoot>'
html,←⊃,/{(⊂'<tr>'),⍵,⊂'</tr>'}¨{('td'∘{⍺,⍵}¨2 AddAlignStyle¨align)Tag¨⍵}¨(≢align)↑¨footer
html,←⊂'</tfoot>'
:EndIf
html,←⊂'<tbody>'
rows←{('td'∘{⍺,⍵}¨AddAlignStyle¨align)Tag¨⍵}¨(⊃⌈/≢¨cells)↑¨cells
html,←⊃,/{(⊂'<tr>'),⍵,⊂'</tr>'}¨rows
html,←⊂'</tbody>'
html,←⊂'</table>'
ns.html,←html
ns←Drop ns
:EndIf
⍝Done
r←ProcessTable_ ns;specialAttrs;ind;align;drop;cells;rows;b;head;noOfCols;footer;buff
:Trap (~ns.parms.debug)/0
specialAttrs←GetSpecialAttributes⊃ns.markdown
ns.html,←⊂{0=≢⍵:'<table>' ⋄ '<table',⍵,'>'}specialAttrs
:If {∧/'-'='|: '~⍨⍵}2⊃ns.markdown
ns.html,←⊂'<thead>'
ns.html,←⊂'<tr>'
ind←{~':'∊⍵:1 ⋄ '::'≡2⍴¯1⌽⍵:3 ⋄ ':'=1⍴⍵:2 ⋄ 4}¨' '~¨⍨SplitTableRowButMaskCode 2⊃ns.markdown
align←↑¨ind⌷¨⊂'?' 'left' 'center' 'right'
head←SplitTableRowButMaskCode specialAttrs DropSpecialAttributes 1⊃ns.markdown
head←ns{⍺ CheckOddNumberOfDoubleQuotes ⍵'header'}¨head
head←⊃¨ns ProcessInlineMarkUp¨head
:If ns.parms.syntaxSugar
head←ns.parms.lang∘SmartQuotes¨head
:EndIf
drop←2
:Else
ind←{~':'∊⍵:1 ⋄ '::'≡2⍴¯1⌽⍵:3 ⋄ ':'=1⍴⍵:2 ⋄ 4}¨' '~¨⍨SplitTableRowButMaskCode 1⊃ns.markdown
align←↑¨ind⌷¨⊂'?' 'left' 'center' 'right'
drop←1
:EndIf
:If 0≠≢cells←drop↓ns.noOf↑ns.markdown
cells←SplitTableRowButMaskCode¨cells
cells←{A.DLB∘A.DTB ⍵}¨¨cells
cells←ns{⍺ CheckOddNumberOfDoubleQuotes ⍵'header'}¨¨cells
cells←⊃¨¨ns ProcessInlineMarkUp¨¨cells
:If ∨/b←∨/¨'?'=align
noOfCols←⌈/(≢align),≢¨cells
b←noOfCols↑b
:If (≢align)>noOfCols
cells←cells,¨((≢align)-noOfCols)⍴(⊃⌈/≢¨cells)⍴⊂,' '
:ElseIf (≢align)<noOfCols
align←noOfCols↑align,noOfCols⍴⊂'left'
:EndIf
:If noOfCols∨.≠≢¨cells
cells←noOfCols↑¨cells,¨noOfCols⍴¨⊂,' '
:EndIf
buff←⍉↑b∘/¨cells
buff[;⍸∧⌿buff∧.=¨'=']←'0'
(b/align)←('left' 'right')[{{0=≢⍵~' ':1 ⋄ 1+⊃∧/⊃⎕VFI ⍵}⊃,/' ',¨⍵}¨↓buff]
:EndIf
:Else
:If ∨/b←∨/¨'?'=align
(b/align)←⊂'left'
:EndIf
:EndIf
:If 2=drop
buff←('th'∘{⍺,⍵}¨1 AddAlignStyle¨align)Tag¨(≢align)↑head,(≢align)⍴⊂''
ns.html,←buff
ns.html,←⊂'</tr>'
ns.html,←⊂'</thead>'
:EndIf
(footer cells)←ns.parms.markdownStrict GetFooter cells
ns.html,←⊂'<tbody>'
rows←{('td'∘{⍺,⍵}¨2 AddAlignStyle¨align)Tag¨⍵}¨(≢align)↑¨cells
ns.html,←⊃,/{(⊂'<tr>'),⍵,⊂'</tr>'}¨rows
ns.html,←⊂'</tbody>'
:If 0≠≢footer
ns.html,←⊂'<tfoot>'
ns.html,←⊃,/{(⊂'<tr>'),⍵,⊂'</tr>'}¨{('td'∘{⍺,⍵}¨2 AddAlignStyle¨align)Tag¨⍵}¨(≢align)↑¨footer
ns.html,←⊂'</tfoot>'
:EndIf
ns.html,←⊂'</table>'
ns←Drop ns
r←1
:Else
r←1
ns←Drop ns
:EndTrap
⍝Done
txt←{ignoreURLs}ProcessUnderscores txt_;noOf;bool;ind;start;end;txt2;b;buff
⍝ Takes a string and marks up everything between _ and _ as <strong>
⍝ except when it occurs ...
⍝ * within a word
⍝ * within APL code
⍝ * as part of a function call
⍝ * between &amp;pointybracket_open; and &amp;pointybracket_close;
⍝ * within the URL
ignoreURLs←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'ignoreURLs'
txt2←txt←'  ',txt_,'  '
txt2←'\\_' '__'⎕R'⌹⌹' 'aa'⍠('Mode' 'D')⊣txt2
:If 0<+/bool←'_'=txt2
:AndIf 1<+/bool
:AndIf 0<+/bool∧bool\~∧/⍉txt2[¯1 1∘.+⍸bool]∊AllWhiteSpaceChars
bool∧←~GetMaskForCode txt
:If ignoreURLs
:AndIf 0≠≢buff←'<a .*>*.</a>'⎕S 0 1⍠('Greedy' 0)⊣(~bool){⍺\⍺/⍵}txt
bool[{⊃,/{⍵[1]+⍳⍵[2]}¨⍵}buff]←0
:EndIf
bool∧←~MaskTagAttrs txt
bool∧←~MaskFunctionCall txt
:AndIf 0≠≢ind←⍸bool
:AndIf 0≠≢ind←(txt 1∘NotWithinWord¨ind)/ind
ind←{⍵↑⍨(≢⍵)-2|≢⍵}ind
start←((≢ind)⍴1 0)/ind
end←((≢ind)⍴0 1)/ind
txt[start]←⊂'<em>'
txt[end]←⊂'</em>'
txt←⊃,/txt
:EndIf
txt←2↓¯2↓txt
⍝Done
Process_BR←{
⍝ The extended syntax of MarkAPL allows `<<br>>` in the code which will be
⍝ converted to <br> in two stages: here we replace this by a ⎕UCS 13 (CR).
⍝ Same for the "normal" <br> introduced with the changes in 12.0
txt←⍵
⍝ Make sure that <<br>> and <br> survive in code & exchange all others against ⎕UCS 13 (\r)
'`.*<<br>>.*`' '`.*<br>.*`' '<<br>>' '<br>'⎕R'\0' '\0' '\r' '\r'⍠('IC' 1)⊣txt
}
md←Process_PRE md;first;last
md←,md
:If 1=≢md
:If 0=≢'<code\b[^>]*>'⎕S 0⊣⊃md   ⍝ <code> missing?!
(⊃md)←'(<pre\b[^>]*>)'⎕R'\1<code>'⊣⊃md
:EndIf
:If 0=≢'</code>'⎕S 0⊣⊃md   ⍝ </code> missing?!
((≢md)⊃md)←'(</pre>)'⎕R'</code>\1'⊣(≢md)⊃md
:EndIf
:Else
(first last)←md[1,≢md]
:If 0=≢'<code\b[^>]*>'⎕S 0⊣first
:AndIf 0=≢'<code\b[^>]*>'⎕S 0⊣⊃1↓md
first,←'<code>'
:EndIf
:If 0=+/'</code'⍷last
:AndIf '</code'{⍺≢(≢⍺)↑⍵}⊃¯2↑md
:If 0=≢{⍵↓⍨⍵⍳'>'}last
last,⍨←'</code>'
:Else
last←'</code>',last
:EndIf
:EndIf
md[1]←⊂first
md[≢md]←⊂last
:If 0=≢'<code>'{⍵↓⍨(¯1+≢⍺)+1⍳⍨⍺⍷⍵}1⊃md        ⍝ Do <pre> and <code> stand on their own?
md←(,/2↑md),2↓md                          ⍝ Then connect the HTML with the first line of code
:EndIf
:If ≢'^</code></pre>$'⎕S 0⊣{⍵↓⍨-+/∧\' '=⌽⍵}{⍵/⍨~∨\⍵='⍝'}(≢md)⊃md  ⍝ Do </pre> and </code> stand on their own? (Comments are ignored)
md←(¯2↓md),,/¯2↑md                        ⍝ Then connect the HTML with the last line of code
:EndIf
:EndIf
md←'</pre>'DropTailAfterClosingTag md
r←Public
r←''
r,←⊂'CompressCSS'
r,←⊂'ConvertMarkdownFile'
r,←⊂'CreateHelpParms'
r,←⊂'CreateParms'
r,←⊂'Execute'
r,←⊂'Help'
r,←⊂'History'
r,←⊂'Init'
r,←⊂'MakeHTML_Doc'
r,←⊂'Markdown2HTML'
r,←⊂'Matrix2MarkdownList'
r,←⊂'Matrix2MarkdownTable'
r,←⊂'Process'
r,←⊂'Reference'
r,←⊂'Version'
{ns}←{parms}Reference recompileFlag;filename;folder
⍝ Displays the file MarkAPL.html with your default browser.\\
⍝ `recompileFlag`:
⍝ * A zero shows the file as it stands.
⍝ * A 1 lets MarkAPL recompile it from MarkAPL.md first.
⍝ However, if the markdown file does not exist then `recompileFlag` has no effect (is always 0).
⍝ Returns either `⍬` or the `ns` namespace created by `Init` and modified by `Process`.
:Access Public Shared
parms←{0<⎕NC ⍵:⍎⍵ ⋄ CreateHelpParms}'parms'
parms←EstablishDefaultHomeFolder parms
filename←parms.homeFolder{0=≢⍺:'.',⍵ ⋄ ⍺,⍵}'/Files/MarkAPL'
:If ~⎕NEXISTS(⊃,/2↑⎕NPARTS filename),'.md'
recompileFlag←0
:EndIf
filename←recompileFlag AddAppropriateExtension filename
ns←CompileHelp filename recompileFlag parms
:If ¯1≠×recompileFlag  ⍝ This syntax is used only by the `Make` workspace and test cases, therefore it is not documented.
:AndIf parms.viewInBrowser
ns ShowHtml parms.outputFilename
:EndIf
⍝Done
RemoveAllComments←{
ns←⍵
markdown←ns.markdown
markdown←1↓∊(⎕UCS 10),¨markdown
ind←1+'^\s{0,3}[~`]{3,}\s{0,}({.*?})?\s{0,}$'⎕S 0⍠('Mode' 'M')('DotAll' 1)('EOL' 'LF')⊣markdown
ind,←1+'<pre\b' '</pre>'⎕S 0⍠('Mode' 'M')('DotAll' 1)⊣markdown
ind←ind[⍋ind]
b←(≢markdown)⍴0
b[ind]←1
b←Between b
b∧←markdown≠⎕UCS 10
markdown[⍸b]←' '
b2←'⍝'≠⊃¨(⎕UCS 10)A.Split markdown
ns.markdown←b2/ns.markdown
ns.lineNumbers←(+\~b2/b2)+b2/ns.lineNumbers
ns
}
RemoveDoubleSlashes←{'//'{⍵/⍨~⍺⍷⍵}'\\'{⍵/⍨~⍺⍷⍵}⍵}
r←RemoveEscapeChars tx;mask;b;specialChars;ind;b2
⍝ Remove the "\" (Escape character) from ⍵ except when ...
⍝ * they are part of code (survives untouched)
⍝ * there are two of them in succession (one survives)
⍝ * it appears within an attribute definition like <a title="\3">
⍝ * any character to the right of the `\` is not one of `_*|~{}(&<>`
⍝ This does not work on, say, "\\\\\\\\\\\\\\\; that why this is not legal.
mask←~GetMaskForCodeTags tx
mask←mask\{~Between ⍵∊'<>'}mask/tx
b←'\'=(mask/tx),' '
⍝ We try to be smart: those are to be escaped anyway, so nothing else is touched
specialChars←'_*|~`{}(&\'
b∧←b\((mask/tx),' ')[1+⍸b]∊specialChars
b←¯1↓b∧b\'\'≠((mask/tx),' ')[1+⍸b]
r←((~mask)∨mask\~b)/tx
mask←~GetMaskForCodeTags r
b←~mask\'\\'⍷mask/r
r←b/r
⍝Done
RemoveHTML←{
⍝ 'This contains a tag'←∇ 'This contains a <span>tag'</span>
txt←⍵
'<>'{⍵/⍨~Between ⍵∊⍺}txt
}
RemoveIdFromSpecialAttributes←{
⍝ 'class="qwe" style="color:red;"' ←→ RemoveIdFromSpecialAttributes 'class="qwe" id="foo" style="color:red;"'
'\sid="[^"]*."'⎕R''⊣⍵
}
r←RemoveLampLines ns
r←0
:If '⍝'=⊃⊃ns.markdown
ns←Drop ns
r←1
:EndIf
RemoveLeanpubEncoding←{
0=≢'^ *{:: encoding=".*$'⎕S 0⊣⊃⍵:⍵
1↓⍵
}
ReplaceDoubleSmartQuotes←{
⍝ In case ⍵ carries special attributes at this point ordinary double quotes(") will be replaced
⍝ by smart one like (“” and „“). We need to being them back
(txt mask)←⍵
txt2←mask\mask/txt
0=+/b←txt2∊'“”„“':txt
(b/txt)←'"'
txt
}
ns←ReplaceFootnoteReferences(ns hits);i;ind;row;id;newID;this
⍝ Replaces the original footnote references (which have arbitrary names)
⍝ against ones which are strictly numbered from 1 to whatever.
:For i :In ⍳≢hits
(id row ind)←hits[i;1 3 4]
newID←'<a href="#fnref',(⍕id),'" class="footnote_link"><sup>',(⍕id),'</sup></a>]'
(row⊃ns.html)←(-ind)⌽newID,{⍵↓⍨⍵⍳']'}ind⌽row⊃ns.html
:EndFor
:For this :In (~ns.footnoteDefs[;1]∊hits[;2])⌿ns.footnoteDefs[;1]
ns.report,←⊂'Warning: footnote "',this,'" not referenced anywhere'
:EndFor
{r}←ns ReplaceLinkID(linkText id searchFor);ind;url;title;sa;new
r←⍬
ind←(⊃¨ns.linkRefs)⍳⊂id
:If ind≤≢ns.linkRefs
(url title sa)←1↓ind⊃ns.linkRefs
:If 0=≢title
:If 0=≢linkText
linkText←((ind,3)⊃ns.linkRefs)←url
:Else
((ind,3)⊃ns.linkRefs)←linkText
:EndIf
:EndIf
:If 0=≢linkText
linkText←title
:EndIf
new←'<a href="',url,'" class="external_link"',((0≠≢title)/' title="',title,'"'),sa,'>',linkText,'</a>'
ns.html←'<code>.*?</code>'(MakeLiteralForRegex searchFor)⎕R'\0'new⍠('Mode' 'D')('DotAll' 1)⊣ns.html
:EndIf
ns←ReplaceLinkIDs ns;mask;linkRefs
⍝ Replace the [{any link text}][link id] references in the HTML against the real thing: <a href="...
:If 0≠≢ns.linkRefs
:AndIf 0<+/mask←∨/¨~GetMaskForCodeTags¨ns.html
:AndIf 0≠≢∊linkRefs←GetAllLinkRefs mask/ns.html
ns ReplaceLinkID¨linkRefs
:EndIf
tx←ReplacePointyBracketsAndAmpersandByHtmlEntities tx;m;b;buff;i;item;start;end;b1;b2;b3
:If ∨/b←'<code'⍷tx
⍝ This will rarely be the case, so performance is not a great concern here.
buff←(~b)⊆tx
:For i :In ⍳≢buff
item←i⊃buff
:If 'code'{⍺≡(≢⍺)↑⍵}item
start←'<',item↑⍨item⍳'>'
item←(¯1+≢start)↓item
end←(¯1+⍸'</code>'⍷item)↓item
item←(-≢end)↓item
b1←item='<'
b2←item='>'
b3←item='&'
(b1/item)←⊂'&lt;'
(b2/item)←⊂'&gt;'
(b3/item)←⊂'&amp;'
(i⊃buff)←start,item,end
:EndIf
:EndFor
tx←∊buff
:EndIf
ReplaceQTC_byBlank←{
tx←⍵
0=+/b←tx∊⎕TC:tx
(b/tx)←' '
tx
}
ReportLinks←{
⍝ Injects a list with all external references together with a remark.
⍝ The resulting table is assigned the class "print_only" for obvious reasons.
ns←⍵
1≠ns.parms.reportLinks:ns
html←FlattenHTML ns.html
hits←'<a[^>]+class="external_link".*</a>'⎕S 0 1⍠('Greedy' 0)('Mode' 'D')⊣html
0=≢hits:ns
anchors←(-≢'</a>')↓¨hits{⍺[2]↑⍺[1]⌽⍵}¨⊂html
urls←'href="'∘{{⍵↑⍨¯1+⍵⍳'"'}⍵↓⍨(¯1+≢⍺)+1⍳⍨⍺⍷⍵}¨anchors
b←(urls⍳urls)=⍳≢urls  ⍝ For dropping doubles
(anchors urls)←b∘/¨anchors urls
linkTexts←{⍵↓⍨⍵⍳'>'}¨anchors
linkTexts←ns.parms{0 ProcessInlineMarkUp_ ⍵ ⍺}¨linkTexts
md←CreateMarkdownFromUrlAndLinkText urls linkTexts
md←'' '---' ''('**',ns.parms.reportLinksCaption,'**')'',md,''
ns2←Init''md
ns2←Process ns2
html2←InjectLinkTextIntoReportLink ns2.html linkTexts
ns.html,←(⊂'<div id="external_link_report" class="print_only">'),html2,(⊂'</div>')
ns
}
r←ScanForBlockQuotes ns;ns2;lc;b;max
r←0
ns2←⎕NS''
lc←↑2↑¨ns.leadingChars        ⍝ Leading two chars
max←¯1+ns.emptyLines⍳1        ⍝ An empty line marks the end
ns2.(markdown markdownLC leadingChars emptyLines withoutBlanks lineNumbers)←max↑¨ns.(markdown markdownLC leadingChars emptyLines withoutBlanks lineNumbers)
lc←max↑lc                     ⍝ Leading chars
:While 0<ns2.noOf←1 ScanForPara ns2
lc←ns2.noOf↓lc            ⍝ Leading chars
:If 0=≢lc                 ⍝ No blockquotes...
:OrIf '> '≢lc[1;]         ⍝ any more?
r+←ns2.noOf
:Leave                ⍝ No - we are done
:EndIf
ns2.noOf+←+/∧\lc∧.='> '   ⍝ Add them
r+←ns2.noOf
ns2←Drop ns2
:EndWhile
noOf←{dontCheckForBlockQuote}ScanForPara ns;buff;bool
⍝ `noOf` : Number of lines, if any), the next paragraph will comprise.
dontCheckForBlockQuote←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'dontCheckForBlockQuote'
:If 1≠noOf←+/∧\0=ns.emptyLines                                                          ⍝ How many lines until next empty line?
:AndIf 1≠noOf←noOf⌊¯1+⊃'='IotaSetextHeader noOf↑¨ns.(withoutBlanks markdown emptyLines) ⍝ Header (= syntax)
:AndIf 1≠noOf←noOf⌊¯1+⊃'-'IotaSetextHeader noOf↑¨ns.(withoutBlanks markdown emptyLines) ⍝ Header (- syntax)
:AndIf 1≠noOf←+/∧\~(noOf↑⊃¨ns.leadingChars)∊'|#='                                       ⍝ header, tables?
:AndIf 1≠noOf←+/∧\~(noOf↑⊃¨ns.leadingChars)∊'|#='                                       ⍝ HTML header, tables?
:AndIf 1≠noOf←+/∧\~{⊃⍴'^\s{0,3}[-+\*]\s'⎕S 0⊣⍵}¨noOf↑ns.markdown                        ⍝ bulleted list
:AndIf 1≠noOf←+/∧\~{⊃⍴'^\s{0,3}[0-9]{1,9}[.)] '⎕S 0⊣⍵}¨noOf↑ns.markdown                 ⍝ Ordered lists?
:AndIf 1≠noOf←+/∧\~{∨/({⍵⍴⍨3⌊≢⍵}⍵~' ')∘≡¨'***' '---' '___'}¨noOf↑ns.markdown            ⍝ Horizontal rulers?
:AndIf 1≠noOf←+/∧\~'```'∘{⍺≡(≢⍺)↑⍵}¨noOf↑ns.markdown                                    ⍝ Code block (``` syntax)
:AndIf 1≠noOf←+/∧\~'~~~'∘{⍺≡(≢⍺)↑⍵}¨noOf↑ns.markdown                                    ⍝ Code block (~~~ syntax)
:AndIf 1≠noOf←+/∧\'<<subtoc>>'∘≢¨⎕C noOf↑ns.markdown                                    ⍝ Sub TOCs
:AndIf 1≠noOf←+/∧\{0=≢'<pre\b[^>]*>' '<style\b[^>]*>' '<script\b[^>]*>'⎕S 0⊣⍵}¨noOf↑ns.leadingChars               ⍝
:AndIf ~dontCheckForBlockQuote
noOf←+/∧\~(noOf↑⊃¨ns.leadingChars)∊'|>#='                                           ⍝ Blockquote (>) MUST be the last check!
:EndIf
ns←ScanMarkdown ns;∆LastLineWasEmpty;isHtmlBlock;html
∆LastLineWasEmpty←0
ns.topOfDocument←1
:Repeat
:If 0≠≢'^⍎⍎[#_A-Za-z∆⍙].*⍎⍎$'⎕S 0⍠('Greedy' 0)⊣⊃ns.markdown ⍝  Does the line call an embedded function but nothing else?
:AndIf 3=⎕NC{⍵↑⍨¯1+⌊/⍵⍳'⍎ '''}2↓⊃ns.markdown
(html isHtmlBlock)←ns ProcessFunctionCalls⊃ns.markdown
:AndIf 0≠≢html
:If 0=isHtmlBlock
:If {~'<'∊⍵:1 ⋄ (⊂'> '~⍨⍵↑⍨⌊/⍵⍳'> ')∊¯1↓¨HtmlBlockTags}html
html←'<p>'∘,¨(,⊆html),¨⊂'</p>'
:EndIf
:EndIf
ns.html,←,⊆html
ns←Drop ns
:Else
:If ProcessEmeddedHTML ns
:If ⊃ns.emptyLines
⍝ ns.noOf←+/∧\ns.emptyLines  ⍝ No! Don't do this: it breaks the logic
ns←Drop ns
∆LastLineWasEmpty←1
:Else
:If 0=ProcessSubTOC ns
:AndIf 0=ProcessFootnoteDefs ns
:AndIf 0=ProcessAbbreviationDefs ns
:AndIf 0=ProcessDataDefs ns
:AndIf 0=ProcessReferenceLinks ns
:AndIf 0=ProcessCodeBlock ns
:AndIf 0=ProcessHeaders ns
:AndIf 0=RemoveLampLines ns
:AndIf 0=ProcessBlockQuotes ns
:AndIf 0=ProcessTable ns
:AndIf 0=ProcessHorizontalRulers ns
:AndIf 0=ProcessCheckBoxes ns
:AndIf 0=ProcessLists ns
:AndIf 0=ProcessDefinitionLists ns
:AndIf 0=ProcessMarkAPLExtensions ns
∆LastLineWasEmpty ProcessParagraph ns      ⍝ This must be the last one!
∆LastLineWasEmpty←0
:EndIf
:EndIf
:Else
:If ⊃ns.emptyLines
ns.noOf←1
ns←Drop ns
∆LastLineWasEmpty←1
:EndIf
:EndIf
:EndIf
ns.topOfDocument←0
:Until 0=≢ns.leadingChars
:If 0≠≢ns.html
ns.html←{'&#96;'⎕R'`'⊣⍵}⊣,¨ns.html
:EndIf
ns.html[⍸ns.html∧.=¨' ']←⊂''
⍝Done
SetTitle←{
ns←⍵
¯1≢ns.parms.title:ns
1≠ns.headers[;1]+.=1:ns⊣ns.parms.title←'MarkAPL'
ns.parms.title←{⊃⍵[⍵[;1]⍳1;3]}ns.headers
ns
}
{r}←ns ShowHtml name;filename
:If './'≡2⍴name
name←(⊃1 ⎕NPARTS''),2↓name
:EndIf
:If '/'≠1⍴name
:AndIf ~':'∊name
filename←F.EnforceSlash parms.homeFolder,'/Docs/',name,'.html'
:Else
filename←name
:EndIf
:If ⍬≢ns
A.GoToWebPage'file:///',filename
:Else
:If F.IsFile filename
A.GoToWebPage'file:///',filename
:Else
6 ⎕SIGNAL⍨'File not found: "',name,'"'
:EndIf
:EndIf
SmartQuotes←{
⍝ Exchange pairs of double quotes ←→ “„ but in DE, AT and CH ←→ „“.
⍝ See also SmartTypography for similar stuff.
⍝ This function does not check ns.syntaxSugar: that's up to the caller.
⍺←'en'                             ⍝ Default language is English.
lang←⍺
html←⍵
bbt←'`[^`].*?`'                    ⍝ Between back-ticks (= code)
cdq←'"".+?""'                      ⍝ Catch what is enclosed between two pairs (that is four of them!) of double quotes
cim←'!\[[^\)].*?\){.*?}'           ⍝ Catch image with special attributes
cl1←'\[\]\([^)]*.?\)'              ⍝ Catch simple link
cl2←'\[[^]]*.?\]\([^)]*.?\)'       ⍝ Catch simple link
ced←'\\"'                          ⍝ Catch escaped double quote
ctag←'<[^>]*?>'                    ⍝ Catch opening HTML tag
cpb←'&amp;pointybracket_open([^&]*.?)&amp;pointybracket_close' ⍝ Catch pointy brackets
me←'\0'
quotes1←'"(.*?)"'
quotes2←(1+(⊂lang)∊'de' 'at' 'ch')⊃'“\1”' '„\1“'
cpb cl1 cl2 cim bbt cdq ctag ced quotes1 ⎕R((7⍴⊂me),'"'quotes2)⍠('Mode' 'D')('DotAll' 1)⊣html
}
SmartStuff←{
parms←⍺
buff←SmartTypography ⍵
parms.lang SmartQuotes buff
}
html_←SmartTypography html;cb;bbt;ignore
⍝ Does all the smart stuff except double + single quote handling; see `SmartQuotes` for that.
⍝ This function does not check ns.syntaxSugar: that's up to the caller.
cb←'(^ {0,3}[~`]{3,}).*\1'                                                         ⍝ Code blocks (anything between `~~~` and three back ticks.
bbt←'`[^`].*?`'                                                                    ⍝ Between back-ticks (= code)
ignore←'<!--[^-]+-->'cb bbt
html_←(ignore,⊂'---')⎕R(,¨((≢ignore)⍴⊂'\0'),'—')⍠('Mode' 'D')('DotAll' 1)⊣html     ⍝ em dash
html_←(ignore,⊂'--')⎕R(,¨((≢ignore)⍴⊂'\0'),'–')⍠('Mode' 'D')('DotAll' 1)⊣html_     ⍝ en dash
html_←(ignore,⊂'\.\.\.')⎕R(,¨((≢ignore)⍴'&'),'…')⍠('Mode' 'D')('DotAll' 1)⊣html_   ⍝ Ellipses
html_←(ignore,⊂'<<')⎕R(,¨((≢ignore)⍴'&'),'«')⍠('Mode' 'D')('DotAll' 1)⊣html_       ⍝ Chevron
html_←(ignore,⊂'>>')⎕R(,¨((≢ignore)⍴'&'),'»')⍠('Mode' 'D')('DotAll' 1)⊣html_       ⍝ Chevron
html_←(ignore,'\B\(c\)\B' '\B\(tm\)\B' '\B\(C\)\B' '\B\(TM\)\B')⎕R(,¨((≢ignore)⍴'&'),'©' '™' '©' '™')⊣html_ ⍝ Copyright and Trademark
html_←(ignore,⊂'\B\&lt;==&gt;\B')⎕R(,¨((≢ignore)⍴'&'),'↔')⊣html_                   ⍝ Left-and-right arrow
html_←(ignore,⊂'\B\&lt;==\B')⎕R(,¨((≢ignore)⍴'&'),'←')⊣html_                       ⍝ Left arrow
html_←(ignore,⊂'\B\==&gt;\B')⎕R(,¨((≢ignore)⍴'&'),'→')⊣html_                       ⍝ Right arrow
⍝Done
SplitTableRowButMaskCode←{
⍝  'First' 'Second' ←→ SplitTableRowButMaskCode 'First',(⎕UCS 13 10),'Second'
⍝ (,¨'1' '2' '3') ←→ '.' SplitTableRowButMaskCode '1.2.3'
⍝ But:
⍝ 'Code' '`{{⍵/⍨2=+⌿0=⍵∘.|⍵}⍳⍵}`' '' ←→ '|' SplitTableRowButMaskCode '|Code | `{{⍵/⍨2=+⌿0=⍵∘.|⍵}⍳⍵}` |
⎕ML←⎕IO←1
txt←A.DLB A.DTB ⍵
txt←(('|'≠⊃txt)/'|'),txt
txt,←{'|'/⍨('|'≠1↑1↓⍵)∧'\|'≢⊃⍵}¯2⌽txt
txt←{⍵,'`|'}⍣(1=2|+/txt='`')⊣txt           ⍝ Add trailing tick and pipe in case of odd number of ticks
mask←~GetMaskForCode txt
bool←mask\'|'=mask/txt
bool[1~⍨⍸bool]←'\'≠txt[¯1+1~⍨⍸bool]
r←1↓¨¯1↓bool⊂txt
{0=+/b←'\|'⍷w←⍵:w ⋄ (~b)/w}¨r
}
Tag←{
⍺←'p'
'<',⍺,'>',⍵,'</',({⍵↑⍨¯1+⍵⍳' '},⍺),'>'
}
r←TagMustStartWith
r←⎕A,'abcdefghijklmnopqrstuvwxyz'
r←Version
⍝ See also `History`
r←'MarkAPL' '13.1.0+327' '2024-09-26'
bool←WhereAreCodeBlocks md;b1;b2;fences;first
md←{⍵↓⍨3⌊+/∧\' '=⍵}¨md
b1←'~'IsFence¨md
b2←'`'IsFence¨md
:If 0=+/b1+b2                     ⍝ No code blocks at all: done!
bool←(≢md)⍴0
:Else
:If >/b1 b2⍳¨1
(b2 b1)←b1 b2
:EndIf
b1←Between b1
(b1/b2)←0
b2←Between b2
bool←b1∨b2
:EndIf
:Class OS
⍝ This class offers methods that return the same result under Windows, Linux (but not Raspberry PI) and Mac OS.
⍝ Examples are `GetPID` and `KillPID`.\\
⍝ Exceptions are the functions `ShellExecute` (Linux/Mac only) and `WinExecute` (Windows only). They
⍝ perform very similar tasks but with very different parameters and results, so they were separated.\\
⍝ Kai Jaeger\\
⍝ Homepage: <https://github.com/aplteam/OS>
⎕IO←1 ⋄ ⎕ML←1
∇ r←Version
:Access Public shared
r←'OS' '3.1.1' '2021-05-08'
∇
∇ r←History
:Access Public shared
⍝ * 3.1.1 from 2023-05-08
⍝   * APLTreeUtils2 updated which was buggy (wrong version number)
⍝ * 3.1.0 from 2023-05-02
⍝   * New method `GetTaskList` added
⍝   * `History now returns a useful result
⍝ * 3.0.1 from 2021-03-01
⍝   * Package config file corrected (new format)
⍝   * APLTreeUtils2.Uppercase replaced by a call to 1 ⎕C
⍝ * 3.0.0 from 2020-09-07
⍝   * Does not :Include APLTreeUtils anymore (but requires the class APLTreeUtils2)
⍝   * Uses ⎕ML←1 and  ⎕IO←1 internally
⍝   * Needs at least Dyalog 18.0
⍝\\
⍝ For information regarding older versions see <https://github.com/aplteam/OS/releases>
r←↑{⍵↓⍨+/∧\∧⌿(↑⍵)=' '}{⍵↓⍨⍵⍳'⍝'}¨{⍵/⍨'⍝'=⊃¨⍵}{⍵↓⍨+/∧\(↑⍵)=' '}¨1↓⎕NR⊃⎕SI
∇
∇ (rc more result)←ShellExecute cmd;buff
:Access Shared Public
⍝ Simple way to fire up an application under Linux/Mac OS.\\
⍝ cmd must be a command line ready to be executed.
⍝ * `rc` is the exit code of the command executed.
⍝ * `more` is currently always an empty text vector.
⍝ * `result` is what's returned by the command executed.
⍝ You might consider adding </dev/null 1>/dev/null 2>/dev/null to a background call.
result←more←''
rc←0
:Trap 11
cmd←##.APLTreeUtils2.DTB cmd
:If '&'=¯1↑cmd
{}⎕SH(¯1↓cmd),' </dev/null >/dev/null 2>&1 &'
:Else
cmd,←' 2>&1; echo "CMDEXIT=$?"; exit 0'
buff←⎕SH cmd
rc←{2 6::⍬ ⋄ ⍎⍵}(≢'CMDEXIT=')↓⊃¯1↑buff
:If 0≡rc
result←¯1↓buff
:Else
more←¯1↓buff
:EndIf
:EndIf
:Else
rc←1
more←⎕DMX.Message
:EndTrap
∇
∇ r←{filter}GetTaskList y;addColumnTitles;bool;colTitles;doNoTouch;doNoTouchplatform;native;sep
⍝ Returns a table with all processes with Name and Process ID when `native` is 0.
⍝ If `native` is 1 the result depends on the current OS. The default is 0.
⍝ `addColumnTitles←1` (the default) adds two rows with columsn titles and separators.
⍝ `doNoTouch←1` does not cut the path on Mac-OS. Defaults to 0. Is ignored on other platforms
⍝ The optional left argument `filter` is, when not empty, used to catch a matching process.
⍝ In case `filter` is not numeric the names are scanned (case independent), otherwise the process IDs.
:Access Public Shared
(native addColumnTitles doNoTouch)←3↑y,(≢y)↓0 1 0
filter←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'filter'
'"addColumnTitles" must be a Boolean'Assert addColumnTitles∊0 1
'"native" must be a Boolean'Assert native∊0 1
platform←⎕C 3↑⊃#.⎕WG'APLVersion'
:Select platform
:Case 'win'
r←⎕CMD'tasklist'
r/⍨←0<≢¨r
sep←2⊃r
bool←sep≠' '
colTitles←bool∘⊆¨2↑r
r←2↓r
r←↑bool∘⊆¨r
r←1 SortTable r
:If native
:If addColumnTitles
r←(↑colTitles),[1]r
:EndIf
:Else
r←r[;1 2]
r[;2]←{⊃⊃(//)⎕VFI ⍵}¨r[;2]
:If 0<≢filter
:If ' '=1↑0⍴filter
r←(∨/(⎕C filter)⍷⎕C↑r[;1])⌿r
:Else
r←(filter=r[;2])⌿r
:EndIf
:EndIf
:If addColumnTitles
r←(↑2↑¨colTitles),[1]r
:EndIf
:EndIf
:Case 'lin'
r←⎕SH'ps -A'
r←↑{' '(≠⊆⊢)⍵}¨{⍵/⍨~'  '⍷⍵}¨r
(1↓r[;1])←{⊃⊃(//)⎕VFI ⍵}¨1↓r[;1]
:If 0<≢filter
:If ' '=1↑0⍴filter
r←(1,∨/(⎕C filter)⍷⎕C↑1↓r[;4])⌿r
:Else
r←(1,filter=1↓r[;1])⌿r
:EndIf
:EndIf
(1↓r)←1 SortTable 1↓r
:If ~addColumnTitles
r←1↓r
:EndIf
:If ~native
r←r[;4 1]
:EndIf
:If addColumnTitles
r←(1 0,(¯1+≢r)⍴1)⍀r
r[2;]←(≢¨r[1;])⍴¨'='
:EndIf
:Case 'mac'
r←⎕SH'ps -A'
r←{' '(≠⊆⊢)⍵}¨{⍵/⍨~'  '⍷⍵}¨r
r←↑4↑¨r
(1↓r[;1])←{⊃⊃(//)⎕VFI ⍵}¨1↓r[;1]
:If 0=doNoTouch
r[;4]←{⍵{⍺↑⍨-¯1+⍵⍳'/'}⌽⍵}¨r[;4]
:EndIf
:If 0<≢filter
:If ' '=1↑0⍴filter
r←(1,∨/(⎕C filter)⍷⎕C↑1↓r[;4])⌿r
:Else
r←(filter∊r[;1])⌿r
:EndIf
:EndIf
(1↓r)←4 SortTable 1↓r
:If ~addColumnTitles
r←1↓r
:EndIf
:If ~native
r←r[;4 1]
:EndIf
:If addColumnTitles
r←(1 0,(¯1+≢r)⍴1)⍀r
r[2;]←(≢¨r[1;])⍴¨'='
:EndIf
:Else
'Unsupported OS?!'Assert 0
:EndSelect
∇
∇ t←col SortTable t
⍝ Sort table `t` according to column `col`.
:If 1<≢t
t←t[⍋⎕C t[;col];]
:EndIf
∇
∇ {(success rc more)}←{adminFlag}WinExecute x;ShellOpen;parms;flag
:Access Public Shared
⍝ Simple way to fire up an application or a document.\\
⍝ Note that you **cannot** catch the standard output of any application executed with `WinExecute`.
⍝ However, you might be able to execute it with `WinExecBatch` which _can_ return the standard
⍝ output returned by whatever you've executed - see there.\\
⍝ `⍵` can be one of:
⍝ * A namespace, typically created by calling [`CreateParms_WinExecute`](#). This is called a
⍝   parameter space.
⍝ * A text string typically specifying a document or an EXE, possibly with command line parameters.\\
⍝ In case a text string is passed and the name of the file (first parameter: the EXE/document) contains
⍝ a space then this filename **must** be enclosed within double quotes.\\
⍝ Any other filename with spaces in the name must be enclosed by double-quotes as well.\\
⍝ A parameter space is usually created by calling `CreateParms_WinExecute`. You can then make
⍝ amendments to it and pass it as right argument. See there for details.\\
⍝ If the defaults are fine for you and you want just start an EXE or, say, display an
⍝ HTML file then you can just specify a path pointing either to the EXE or to the document.\\
⍝ You can even specify command line parameters this way but you **must** then enclose `file` with
⍝ double quotes (") even if the file does not contain any blanks. (The `ShellExecute` Windows function
⍝ does not like double quotes but they will be removed before it is called).\\
⍝ The optional left argument defaults to 0 which makes the verb default to "OPEN". By specifying
⍝ a 1 here it's going to be "RUNAS" meaning that the application is executed in elevated mode
⍝ (=with admin rights). Of course for this the user must have admin rights.\\
⍝ See the test cases for examples.\\
⍝ The function returns a three-element vector:
⍝ 1. A Boolean flag, 1 indicating success.
⍝ 2. The return code of the Windows API function `ShellOpen`. Is 42 in case of success.
⍝ 3. An empty text string in case of success. In case of failure this may provide additional information.
'Runs under Windows only'Assert'Win'≡##.APLTreeUtils2.GetOperatingSystem ⍬
success←0 ⋄ more←'' ⋄ rc←0
:If (⎕DR x)∊80 82
:If 0≠2|'"'+.=x
more←'Odd nunmber of doubles quotes detected'
:Return
:EndIf
parms←CreateParms_WinExecute
:If '"'=1⍴x
parms.(file lpParms)←x{(⍵↑⍺)(⍵↓⍺)}1++/∧\2>+\'"'=x
:Else
parms.(file lpParms)←x{(⍵↑⍺)(⍵↓⍺)}⌊/x⍳' "'
:EndIf
:ElseIf 326=⎕DR x
:AndIf 9=⎕NC'x'
parms←x
parms.verb←1 ⎕C parms.verb
:If 0≠2|'"'+.=parms.lpParms
more←'Odd nunmber of doubles quotes in "lpParms" detected'
:Return
:EndIf
:Else
'Invalid right argument'Assert 0
:EndIf
'Invalid verb'Assert(⊂parms.verb)∊'EXPLORE' 'FIND' 'OPEN' 'PRINT' 'RUNAS' ''
'ShellOpen'⎕NA'U Shell32.C32|ShellExecute* I <0T <0T <0T <0T I'
adminFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'adminFlag'
:If adminFlag
parms.verb←'RUNAS'
:EndIf
parms.file~←'"'
:Trap 0
rc←ShellOpen parms.(handle verb file lpParms lpDirectory show)
success←42=rc
:Else
rc←⎕EN
more←⎕DMX.Message
:Return
:EndTrap
∇
∇ parms←CreateParms_WinExecute
:Access Public Shared
⍝ This method returns a parameter space populated with default values that can be fed to the [`WinExecute`](#) method.
⍝ | **Parameter**| **Notes** |
⍝ | `verb`       | Must be one of: EDIT, EXPLORE, FIND, OPEN, PRINT, RUNAS, NULL (default). Note that "RUNAS" is "Open" with admin rights. |
⍝ | `file`       | Name of the file `verb` is performed on. Usually this is an EXE but it can be a document as well. |
⍝ | `handle`     | Handle pointing to a window or 0 (default). |
⍝ | `show`       | 1 (default) allows the application involved to show its windows. 0 hides any windows. |
⍝ | `lpParms`    | Command line parameters in case the verb is "OPEN". |
⍝ | `lpDirectory`| The working directory for the application involved. |
⍝
⍝ For more information see <https://msdn.microsoft.com/en-us/library/windows/desktop/bb762153(v=vs.85).aspx>
parms←⎕NS''
parms.verb←''
parms.file←''
parms.handle←0
parms.show←1          ⍝ Allow the app to show its windows. Suppress with  0.
parms.lpParms←''
parms.lpDirectory←''
∇
∇ (success rc result)←{adminFlag}WinExecBatch cmd;batFilename;tempFilename;en;more;parms;i;flag
⍝ This method executes a command and returns its standard output on `result`.\\
⍝ ** Don't** use this for programs that interact with a user! For example, don't use
⍝ this to fire up an APL session! This cannot work because standard output is redirected.\\
⍝ Use `WinExecute` for this which cannot capture standard output itself.\\
⍝ Performes the following actions:
⍝ * Puts `cmd` into a batch file which is a temp file.
⍝ * Execute that batch file with `WinExecute`.
⍝ * Circumvent the standard output of the batch file into another temp file.
⍝ * Waits until the temp file makes an appearance.
⍝ * Reads that temp file and returns the contents as `result`.\\
⍝ * `success` is a Boolean with 1 indicating success.
⍝ * `rc` is a return code. 42 stands for "okay".
:Access Public Shared
'Runs under Windows only'Assert'Win'≡##.APLTreeUtils2.GetOperatingSystem ⍬
tempFilename←GetTempFilename
batFilename←(¯3↓tempFilename),'BAT'
cmd,←' >',tempFilename
⎕NDELETE tempFilename
(⊂cmd)⎕NPUT batFilename
adminFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'adminFlag'
parms←CreateParms_WinExecute
parms.file←batFilename
parms.show←0
(success rc more)←adminFlag WinExecute parms
:If success
i←flag←0
:Repeat
i+←1
⎕DL 0.1
:If IsFile tempFilename
result←⊃⎕NGET tempFilename
flag←(100<i)∨0<≢result
:EndIf
:Until flag
:Else
result←more
:EndIf
⎕DL 0.1
{}{19 22::⍬ ⋄ ⎕NDELETE ⍵}¨batFilename tempFilename
∇
∇ r←GetSharedLib
:Access Public Shared
:Select ##.APLTreeUtils2.GetOperatingSystem ⍬
:Case 'Lin'
r←GetLibcName ⍬
:Case 'Mac'
r←'/usr/lib/libc.dylib'
:Else
. ⍝ Huuh?!
:EndSelect
∇
∇ r←GetPID;∆GetPID;∆GetCurrentProcessId
⍝ Returns the process ID of the current process ID.
⍝ In case of an error a 0 is returned.\\
⍝ See also [`KillPID`](#).
:Access Public Shared
:Select ##.APLTreeUtils2.GetOperatingSystem ⍬
:Case 'Win'
:Trap 11
'∆GetCurrentProcessId'⎕NA'I KERNEL32|GetCurrentProcessId'
r←∆GetCurrentProcessId
:Else
r←0
:EndTrap
:CaseList 'Mac' 'Lin'
'∆GetPID'⎕NA'I4 ',GetSharedLib,'| getpid'
:Trap 11
r←∆GetPID
:Else
r←0
:EndTrap
:Else
.⍝ Huuh?!
:EndSelect
∇
∇ r←KillPID pid;False;OpenProcess;PROCESS_TERMINATE;TerminateProcess;h;res;thisPID;∆CloseHandle;∆OpenProcess;∆TerminateProcess
⍝ Kill one or more processes identified by their process ID.\\
⍝ See also [`GetPID`](#).
:Access Public Shared
r←0
:Select ##.APLTreeUtils2.GetOperatingSystem ⍬
:Case 'Win'
'∆OpenProcess'⎕NA'U4 KERNEL32.C32|OpenProcess I4 I2 I4'
PROCESS_TERMINATE←⊃83 323 ⎕DR 1
False←⊃83 323 ⎕DR 0
'∆CloseHandle'⎕NA'U KERNEL32.C32|CloseHandle I4'
:Repeat
thisPID←⊃pid
'Invalid PID: not an integer'Assert 0=1↑0⍴thisPID
:If 0≠h←∆OpenProcess PROCESS_TERMINATE False thisPID   ⍝ Get handle to the process
'∆TerminateProcess'⎕NA'KERNEL32.C32|TerminateProcess P I4'
{}∆TerminateProcess h 0                         ⍝ Kill it
r←1
:End
{}∆CloseHandle h
:Until 0=≢pid←1↓pid
:CaseList 'Lin' 'Mac'
:Repeat
r←⍬
:Trap 0
res←⎕SH'kill -9 ',⍕pid
r,←1
:Else
r,←0
:EndTrap
:Until 0=≢pid←1↓pid
r←∧/r
:Else
. ⍝ Huuh?!
:EndSelect
∇
⍝ Private stuff
GetLibcName←{   ⍝ Linux: extract real name of libc that is actually used
pid←⊃⎕SH'echo $PPID'
libs←⎕SH'ldd /proc/',pid,'/exe'
⊃('^[[:space:]]*libc\.so\b.*=>[[:space:]]*([^[:space:]]*)'⎕S'\1')libs
}
GetAPL_Width←{z←⍵ ⋄ 2×⍬⍴⎕SIZE'z'}
∇ r←GetDyaLib
r←'dyalog',(⍕GetAPL_Width ⍬),'.dylib'
∇
∇ filename←GetTempFilename;rc;start;no;fno;path
⍝ Copied from FilesAndDirs in 2019-10 in an attempt to make OS independent.
path←GetTempPath
start←no←⍎{(,'ZI2,ZI2,ZI2'⎕FMT 3↑⍵),⍕3↓⍵}3↓⎕TS  ⍝ Expensive but successful very soon
⍝ no←100⊥3↓⎕TS ⍝ Not reliable: can take a large number of tries before successful
:Repeat
filename←path,(⎕AN,'_',⍕no),'.tmp'
:Trap 22
fno←filename ⎕NCREATE 0
⎕NUNTIE fno
:Else
fno←0
:EndTrap
no+←10
:Until (fno≠0)∨no>start+1000×10  ⍝ max 1000 tries
'Unable to create temporay file'Assert fno≠0
∇
∇ path←GetTempPath;∆GetTempPath
⍝ Copied from FilesAndDirs in 2019-10 in an attempt to make OS independent.
⍝ Replace this by the `739 ⌶ 0` function once 17.0 becomes the latest supported version.
:Select ##.APLTreeUtils2.GetOperatingSystem ⍬
:Case 'Win'
'∆GetTempPath'⎕NA'I4 KERNEL32.C32|GetTempPath* I4 >T[]'
path←⊃↑/∆GetTempPath 1024 1024
:If 0=≢path
0 Assert⍨'Problem getting Windows temp path!; rc=',⍕GetLastError
:EndIf
:Case 'Lin'
path←'/tmp/'
:Case 'Mac'
path←'/private/tmp/'
:Else
.⍝ Huuh?!
:EndSelect
∇
∇ r←GetLastError;∆GetLastError
⍝ Copied from FilesAndDirs in 2019-10 in an attempt to make OS independent.
:Select ##.APLTreeUtils2.GetOperatingSystem ⍬
:Case 'Win'
'∆GetLastError'⎕NA'I4 kernel32.C32|GetLastError'
r←∆GetLastError
:CaseList 'Lin' 'Mac'
r←⎕SH'$errno'
:If 0=≢r
r←0
:Else
r←⊂(//)⎕VFI∊r
:EndIf
:Else
.  ⍝ Huuh?!
:EndSelect
∇
IsFile←{
0=⎕NEXISTS ⍵:0
2=1 ⎕NINFO ⍵
}
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}
:EndClass
APLfromJSON←{
⍝ ⍵ is JSON
⍝ ← is APL
⍝ Deals with potentially empty as well as rank=2 arrays
(,0)≡⍴⍵:''
'[,]'≡⍵~⎕TC:''
r←⎕JSON⍠('Dialect' 'JSON5')⊣⍵
2≥|≡r:r
↑r
}
pkgs←registryPath AddDependencies pkgs;pkg;filename;deps;i
⍝ Takes a list of package IDs, established any dependencies and adds them if they are not already on the list
:If 0<≢pkgs
:For i :In ⍳≢pkgs
pkg←1⊃pkgs[i;]
filename←registryPath,pkg,'/',DependenciesFilename
:If F.IsFile filename
deps←⊃⎕NGET filename 1
:If 2=2⊃⍴pkgs
deps←{'@'∊⍵:⍵↓⍨⍵⍳'@' ⋄ ⍵}¨deps         ⍝ Remove package aliase
pkgs⍪←((~deps∊pkgs)/deps),[1.5]⊂pkg    ⍝ Only what we don't already have
:Else
pkgs[i;1]←⊂(⊂pkg),(⊂2⍴' '),¨deps
:EndIf
:EndIf
:EndFor
:If ~2=2⊃⍴pkgs
pkgs←⍪{⊃,/⍵}⊆¨,pkgs
:EndIf
:EndIf
r←AddInfoURL(list path);list2;b
r←(≢list)⍴''
b←{⌽{(⍳≢⍵)=⍵⍳⍵}⌽⍵},RemoveVersionNumber¨list[;1]
(b/r)←2⊃¨FetchDescriptionAndPackageProjectUrl¨path∘,¨b/,list[;1]
⍝Done
AddSlash←{0=≢⍵:⍵ ⋄ ⍵,(~(¯1↑⍵)∊'/\')/'/'}
r←{removeVersionNo}AggregatePackages list;list2;list3;list4;noOfVersions
removeVersionNo←{0<⎕NC ⍵:⍎⍵ ⋄ 1}'removeVersionNo'
list2←RemoveMinorAndPatch¨list[;1]
list3←∪list2
:If removeVersionNo
list4←RemoveVersionNumber¨list3
:Else
list4←list3
:EndIf
noOfVersions←{≢⍵}⌸list4
list4←∪list4
r←list4,[1.5]noOfVersions
:If 2=2⊃⍴list   ⍝ Has project_url?! ("date" sets aggregate to 0 anyway)
r,←list[⍸{⌽{(⍳≢⍵)=⍵⍳⍵}⌽⍵}RemoveVersionNumber¨,list[;1];2]
:EndIf
⍝Done
Assert←{⍺←⊢ ⋄ 0∊⍵:⍺ ⎕SIGNAL ErrorNo ⋄ shy←0}
Base64←{
⍝    A←⎕A,(⎕UCS(⍳26)+⎕UCS'a'),⎕D,'+/'                      ⍝ alphabet
⎕IO←0
A←'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
⍺←~∧/⍵∊A,'='
ed←{⊃⍵{⍺{2⊥⍉((⌈(⍴⍵)÷⍺),⍺){⍺⍴(×/⍺)↑⍵}⍵},⍉(⍵⍴2)⊤⍺⍺}/⍺}  ⍝ encode decode
⍺:{⍵,'='⍴⍨4|-⍴⍵}(⊂6 8 ed ⎕UCS ⍵)⌷A                    ⍝ encode strict /
1:⎕UCS{(-+/'='=¯3↑⍵)↓8 6 ed A⍳⍵}⍵∩A,'='               ⍝ decode strict x
⍝ base64 encoding
⍝ ⍺ 1=encode; 0=decode
⍝ ⍵ byte string: 256∧.>⎕ucs ⍵
⍝ ← ⍺=1: longer (4:3) string in A-Z,a-z,0-9,+/= only
⍝   ⍺=0: original string whence ⍵ was encoded
⍝   whitespace in (⍵) is ignored on decode
}
BitsToInt←{(32⍴2)⊥⌽32↑⍵}
r←BuildListFilename
r←'apl-buildlist.json'
r←CFG_Name
r←'apl-package.json'
msg←CheckConfigProperties(cfg G);success;names
msg←''  ⍝ Indicates success
⍝ === Check license
:If 0=cfg.⎕NC'license'
msg←'"license" property is missing'
:ElseIf 0<≢G
:AndIf G.INI.Exist'LICENSE'
:AndIf G.INI.Exist'LICENSE:urls'
:AndIf G.INI.Exist'LICENSE:names'
:AndIf 0<≢names←⊃G.INI.Get'LICENSE:names'
:AndIf ~(⊂cfg.license)∊names
msg←'License is invalid - valid options are: ',⊃{⍺,', ',⍵}/names
⍝ === Check minimumAplVersion
:ElseIf 0=cfg.⎕NC'minimumAplVersion'
msg←'"minimumAplVersion" property is missing'
⍝ === Check maintainer
:ElseIf 0=cfg.⎕NC'maintainer'
msg←'"maintainer" property is missing'
⍝ === Check tags
:ElseIf 0=cfg.⎕NC'tags'
msg←'"tags" property is missing'
:EndIf
msg←G CheckLicense cfg;names
msg←'' ⍝ Indicates success
:If 0=cfg.⎕NC'license'
msg←'"license" property is missing'
:Else
:If G.INI.Exist'LICENSE'
:AndIf G.INI.Exist'LICENSE:urls'
:AndIf G.INI.Exist'LICENSE:names'
:AndIf 0<≢names←⊃G.INI.Get'LICENSE:names'
:AndIf ~(⊂cfg.license)∊names
msg←'License is invalid - valid are: ',⊃{⍺,', ',⍵}/names
:EndIf
:EndIf
⍝Done
parms←CheckParmsForListPackages parms;list;msg;flag
⍝ Makes sure that `parms` will be a namespace that carries the required parameters.
⍝ If `parms` is `⍬` or '' it is replaced by `⎕NS''` and then populated with defaults.
⍝ `parms` is also checked for containing other stuff (not permitted) and converts
⍝ `group` and `tags` to lowercase.
:If (⊂parms)∊''⍬
parms←⎕NS''
:EndIf
:If 0=parms.⎕NC'group'
parms.group←''
:EndIf
:If 0=parms.⎕NC'tags'
parms.tags←''
:EndIf
:If 0=parms.⎕NC'aggregate'
parms.aggregate←1
:EndIf
:If 0=parms.⎕NC'date'
parms.date←0
:EndIf
:If 0=parms.⎕NC'project_url'
parms.project_url←0
:EndIf
:If 0=parms.⎕NC'since'
parms.since←0
:EndIf
:If 0=parms.⎕NC'userCommand'
parms.userCommand←0
:EndIf
:If 0=parms.⎕NC'latest'
parms.latest←0
:EndIf
⍝ If at least one is specified the others default to 0. If none is specified they all default to 1
flag←0∧.=parms.⎕NC↑'os_win' 'os_mac' 'os_lin'
:If 0=parms.⎕NC'os_win'
parms.os_win←flag
:EndIf
:If 0=parms.⎕NC'os_mac'
parms.os_mac←flag
:EndIf
:If 0=parms.⎕NC'os_lin'
parms.os_lin←flag
:EndIf
:If 0=parms.⎕NC'dependencies'
parms.dependencies←0
:EndIf
list←'group' 'latest' 'tags' 'aggregate' 'date' 'project_url' 'since' 'os_win' 'os_mac' 'os_lin' 'userCommand' 'dependencies'
msg←'Invalid left argument: only "group", "latest", "tags", "date", "project_url", "aggregate", "dependencies", "os_win", "os_mac" and "os_lin" are permitted'
msg Assert∧/(' '~¨⍨↓parms.⎕NL 2)∊list
'"aggregate" must be a Boolean'Assert parms.aggregate∊0 1
'"latest" must be a Boolean'Assert parms.latest∊0 1
'"date" must be a Boolean'Assert parms.date∊0 1
'"os_win" must be a Boolean'Assert parms.os_win∊0 1
'"os_mac" must be a Boolean'Assert parms.os_mac∊0 1
'"os_lin" must be a Boolean'Assert parms.os_lin∊0 1
'"userCommand" must be a Boolean'Assert parms.userCommand∊0 1
'"dependencies" must be a Boolean'Assert parms.dependencies∊0 1
parms.since←{0=1↑0⍴∊⍵:⍵ ⋄ (flag value)←⎕VFI ⍵ ⋄ flag:value ⋄ ⍵}parms.since
:If ' '=1↑0⍴parms.since
:Trap 0
'"since", when character, must be international date format: YYYY-MM-DD'Assert(∧/parms.since[1 2 3 4 6 7 9 10]∊⎕D)∧'-'∧.=parms.since[5 8]
:Else
'"since" is invalid'Assert 0
:EndTrap
:Else
'"since" must be an integer: YYYYMMDD'Assert(⎕DR parms.since)∊323 83 83
:EndIf
parms.tags←⎕C parms.tags
⍝Done
CreateNamespace←{
⍝ Creates a namespace as either a child of # or ⎕SE, depending on ⍵ (which is usually ⎕THIS)
⍺←⊢
1:shy←⍺{⍺←⊢ ⋄ '#'=1⍴⍵:⍺ #.⎕NS'' ⋄ ⍺ ⎕SE.⎕NS''}⍕⍵
}
CreateRegistry←{
⍝ Creates a brand new registry.\\
⍝ `⍵` must either not exist or be an empty folder.\\
path←⍵
_←F.MkDir path
_←Index.Create path
1:shy←0
}
Create_UUID←{
A.Create_UUID
}
msg←DeletePackage packagePath;msg;rc;en
⍝ Existence of the folder `packagePath` must be checked beforehand
msg←''
(rc en msg)←F.RmDir packagePath
:If 0≠rc
msg,←'; RC=',⍕en
:EndIf
⍝Done
r←DependenciesFilename
r←'apl-dependencies.txt'
EnforceAPL_Name←{'_'@(⍸~⍵∊⎕A,⎕D,'abcdefghijklmnopqrstuvwxyz')⊣⍵}
r←ErrorNo
r←998
{r}←ref EstablishVariablesFromFiles filenames;filename;data;name;dmx
r←0
:For filename :In filenames
data←⊃⎕NGET filename 1
:Trap 0
data←⎕SE.Dyalog.Array.Deserialise data
:Else
dmx←⎕DMX
⎕←'*** Deserialising a variable failed with ',(2⊃dmx.DM),'; RC=',⍕dmx.EN
:EndTrap
:Trap 0
name←⎕SE.Link.U.StripCaseCodePart 2⊃⎕NPARTS filename
name ref.{⍎⍺,'←⍵'}data
:Else
dmx←⎕DMX
⎕←'*** Establishing variable <',filename,'> failed with ',(2⊃dmx.DM),'; RC=',⍕dmx.EN
:EndTrap
:EndFor
⍝Done
r←x(fns Exec)y;qdmx
⍝ Operator useful for trapping all errors and returning either '' for success and an error message
⍝ otherwise. This is typically useful for functions like ⎕NCOPY, ⎕NMOVE and the like.\\
⍝ You *must not* use this operator if the operand function returns a value since this is ignored.
⍝ Also, the operand function must be dyadic.\\
⍝ You should not use this for executing user-defined functions since *all* errors are trapped.
r←''
:Trap 0
{}x fns y
:Else
qdmx←⎕DMX
r←qdmx.EM
:EndTrap
r←FetchAdditionalDataForListPackages path;cfg;OSes;f
cfg←ReadPackageConfigFile path
OSes←⊃{0=≢⍵:'' ⋄ {⍺,', ',⍵}/⍵}cfg.(os_lin os_mac os_win)/'Lin' 'Mac' 'Win'
:If 0=cfg.⎕NC'project_url'             ⍝ Was introduced after packages were already published
r←cfg.description''OSes
:Else
r←cfg.(description project_url),⊂OSes
:EndIf
:If f←0<cfg.⎕NC'userCommandScript'     ⍝ Was introduced after packages were already published
f←0<≢cfg.userCommandScript
:EndIf
r,←⊂f/'Yes'                            ⍝ Mark as a user command
r,←⊂cfg.tags
⍝Done
FetchDescriptionAndPackageProjectUrl←{
path←⍵
cfg←ReadPackageConfigFile path
0=cfg.⎕NC'project_url':cfg.description''  ⍝ Because project_url was introduced after packages were already published
cfg.(description project_url)
}
list←{depth}FindDependenciesLocally(folder subFolder pkgList level);folders;subFolder;buff;dependencies;filename;pkg;bool;thisFolder
⍝ Sub-function of FindDependencies without independent meaning
⍝ `level` can be 0 (default) or 1
depth←{0<⎕NC ⍵:⍎⍵ ⋄ ¯1}'depth'
'Invalid: "level"'Assert(⊂level)∊0 1
'Files not found'Assert F.IsDir folder
'Files not found'Assert F.IsDir subFolder
'Package list is empty'Assert 0<≢pkgList
list←''
:If ⎕NEXISTS filename←subFolder,'apl-dependencies.txt'
:AndIf 0<≢dependencies←⊃F.NGET filename 1
:For pkg :In pkgList
:Select '-'+.=pkg
:Case 0 ⍝ Just a package name
bool←pkg∘≡¨⎕C{⍵↑⍨¯1+⍵⍳'-'}¨{⍵↓⍨⍵⍳'-'}¨dependencies
:Case 1 ⍝ Group and package name
bool←pkg∘≡¨⎕C RemoveVersionNumber¨dependencies
:Case 2 ⍝ Group and package name and version number
bool←pkg∘≡¨⎕C RemoveMinorAndPatch¨dependencies
:EndSelect
:If level
:If ∨/bool
list,←subFolder∘,¨bool/dependencies
:EndIf
:Else
list,←(∨/bool)/⊂¯1↓subFolder
:EndIf
:If 0=level
:AndIf ∨/bool  ⍝ One hit is enough
:Leave
:EndIf
:EndFor
:EndIf
:If depth=¯1
:OrIf 0<depth←depth-1
:If 0<≢folders←F.ListDirs subFolder
folders←(~({⊃,/1↓⍵}¨⎕NPARTS¨folders)∊'.git' '.cider')/folders
:For thisFolder :In folders
thisFolder←F.AddTrailingSep thisFolder
list,←depth FindDependenciesLocally folder thisFolder pkgList level
:EndFor
list←list[⍋⎕C list]
:EndIf
:EndIf
⍝Done
(fuzzy list)←{aggregate}FindTag(path tags allPackages);tagList;bool;ind;bool_;fuzzy_
⍝ `path` is a path to a Registry.\\
⍝ `tags` is one ore more tags: either a simple text vector or a vector of text vectors. Multiple tags result in an AND search.\\
⍝ In a first attempt we try to find exact matches for the tags given. If successful we return the full package IDs with a hit and 0 for `fuzzy`.\\
⍝ If not successful we try again by using ⍷. If that is successful we return the full package IDs with a hit and 1 for `fuzzy`.\\
⍝ If still not successful we try again with a fuzzy search. If that is successful we return the full package IDs with a hit and 2 for `fuzzy`.\\
⍝ If still not successful we return (¯1 '').\\
⍝ `aggregate` defaults to 0. If it is 1 the minor version number and the patch numbers are removed and duplicates dropped from the result.
aggregate←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'aggregate'
fuzzy←¯1
list←''
tags←⎕C¨⊆tags
:If 0<≢tagList←GetTags path
(fuzzy_ bool_)←↓⍉↑tagList[;2]∘{FindTag_ ⍺ ⍵}¨,tags
bool←tagList[;1]∊⊃∩/bool_⌿¨⊂tagList[;1]
:If ∨/bool
ind←∪⊃¨bool⌿tagList[;1]
list←allPackages[ind;1]
:If 2=⍴⍴allPackages
list←({(⍳≢⍵)=⍵⍳⍵}list)⌿allPackages[ind[⍋ind];]
:Else
list←∪list
:EndIf
fuzzy←⌈/fuzzy_
:EndIf
:If aggregate
:AndIf 0<≢list
:If 2=⍴⍴allPackages
list←({⌽{(⍳≢⍵)=⍵⍳⍵}⌽⍵}RemoveMinorAndPatch¨list[;1])⌿list
:Else
list←∪RemoveMinorAndPatch¨list        ⍝ Get rid of minor and patch number but preserve major one
:EndIf
:EndIf
:EndIf
⍝Done
(fuzzy bool)←{minPercentage}FindTag_(tagList search);tagList_;hits;search_;b;percentage
⍝ Tries to find `search` (one to many tags) in `tagList`.
⍝ Uses a fuzzy approach in case nothing fits with ≡ and ⍷.
⍝ Returns:
⍝ * (¯1 '') in case nothing fits
⍝ * (0 <list>) for an exact match
⍝ * (1 <list>) for a match with ⍷
⍝ * (2 <list>) for a fuzzy match
minPercentage←{0<⎕NC ⍵:⍎⍵ ⋄ 50}'minPercentage'
fuzzy←¯1
bool←0
:If 0<+/bool←search∘≡¨tagList
fuzzy←0
:ElseIf 0<+/bool←∨/search⍷↑tagList
fuzzy←1
:Else
tagList_←{↓{⍵}⌺2⊣⍵}¨tagList
search_←{↓⍵}⌺2⊣search
b←tagList_∊¨⊂search_
hits←+/¨(b/¨tagList_){2</⍺⍳⍵}¨⊂search_
percentage←⌊0.5+100×hits÷≢¨tagList
:If 0<+/bool←percentage≥minPercentage
fuzzy←2
:EndIf
:EndIf
⍝Done
FormatFloatDate←{
⍝ '21021-01-02 17:03:04' ← FormatFloatDate 210210102.170304
⍝ Error trapping because we have sometimes seen publishing dates like 20210101.00006 which is invalid.
v←⍵
11::∇ v-0.000001
v2←60 1 ⎕DT v
⊃'YYYY-MM-DD hh:mm:ss'(1200⌶)v2
}
list←{appendPublishingDate}GetAllPackages registryPath;list2;deprecated
⍝ Return names of all folders in `registryPath` that are valid package IDs INCLUDING deprecated packages
appendPublishingDate←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'appendPublishingDate'
list←F.ListDirs registryPath                           ⍝ All folder name
list←{⊃,/1↓⎕NPARTS ⍵}¨list                             ⍝ Remove path: we only need the package IDs
list←(2≤list+.=¨'-')/list                              ⍝ Package IDs carry at least two hyphens
list←list[⍋⎕C list]                                    ⍝ Only Windows guarantees a sorted list, and Windows and Linux sort differently!
:If appendPublishingDate
list2←registryPath InjectPublishingDate list       ⍝ Add publishing date where required
list←list,[1.5]list2[;2]
:If 0<≢list←list[SortIndexForPackageIDs list2;]
list[;2]←FormatFloatDate¨list[;2]
:EndIf
:Else
list←⍪list
:EndIf
⍝Done
r←{noBetas}GetBestVersionNumber path;id;list;buff;list2;level;version;best;path_
⍝ Establishes the best version number for ⍵
⍝ '{group}-{name}-3.0.0' ← GetBestVersionNumber '{name}'
⍝ '{group}-{name}-3.0.0' ← GetBestVersionNumber '{group}-{name}'
⍝ '{group}-{name}-2.1.0' ← GetBestVersionNumber '{group}-{name}-2'
⍝ '{group}-{name}-1.2.1' ← GetBestVersionNumber '{group}-{name}-1'
⍝ '{group}-{name}-1.1.9' ← GetBestVersionNumber '{group}-{name}-1.1'
⍝ Returns an empty vector in case nothing fits
noBetas←{0<⎕NC ⍵:⍎⍵ ⋄ GetNoBetasDefault}'noBetas '
r←''
id←(≢RemovePackageID path)↓path
path_←(-≢id)↓path
:If IsValidPackageName id
⍝ We first need to establish the group:
path←{⍵↓⍨-≢'/\'A.Last ⍵}path
:If 0=≢buff←⊃F.ListDirs path,'*-',id
:Return
:EndIf
id←({⍵↑⍨⍵⍳'-'}{⍵↑⍨1+-⌊/(⌽⍵)⍳'/\'}buff),id
path,←id
:EndIf
level←⊃'-'+.=id
:If 0<≢list←,GetAllPackages path_
:AndIf 0<≢list←('.zip'∘≢¨⎕C¨3⊃∘⎕NPARTS¨list)/list
:AndIf 0<≢list←((⎕C id){⍺∘≡¨⎕C(≢⍺)↑¨⍵}list)/list
:If 1=level
list←('-'=⊃¨1↑¨(≢id)↓¨list)/list
:EndIf
:If 0<≢list
:If noBetas
:AndIf 0=≢list←({3>⌈/+\'-'=⍵}¨list)/list   ⍝ Remove all beta versions
:Return
:EndIf
list2←path_ InjectPublishingDate list      ⍝ Add publishing date where required
list←list[SortIndexForPackageIDs list2]
best←⊃¯1↑list
version←{1↓⍵/⍨2≤+\'-'=⍵}⊃,/best
:If IsValidPackageID_WithoutPatchNo version
version←({⍵/⍨2>+\'-'=⍵}path),'-',version
:Else
r←path_,({⍵/⍨2>+\'-'=⍵}best),'-',version
:EndIf
:EndIf
:EndIf
⍝Done
r←{what}GetGroupData(path groupName);dcfFilename;dcfTie;markdown;email;folder;cred;ind
⍝ Returns the data saved for a group as a matrix:
⍝ [;1] The name
⍝ [;2] The corresponding data\\
⍝ In case a left argument is specified it must be one of the items in the first component
⍝ but neither "toc" nor "group". In that case a character vector is returned.
⍝ In case the folder "Groups" does not exist a matrix with zero rows is returns in case
⍝ ⍺ was not specified, and '' otherwise.
⍝ Examples:
⍝ 2 2 ←→ ⍴GetGroupData 'aplteam'
⍝ 'kai@aplteam.com' ←→ 'email' GetGroupData 'aplteam'
folder←'expand'F.NormalizePath path,'/../Groups/'
:If ⎕NEXISTS folder
dcfFilename←folder,groupName,'.dcf'
:AndIf ⎕NEXISTS dcfFilename
dcfTie←dcfFilename ⎕FSTIE 0
markdown←⎕FREAD dcfTie 3
email←⎕FREAD dcfTie 4
:If 0=≢email
cred←##.Server.ReadCredentialFile ##.Server.G.RegistryPath,'/Credentials.csv'
ind←cred[;1]⍳⊂groupName
:AndIf ind≤≢cred
email←4⊃cred[ind;],'' ''  ⍝ Paranoia because of format change in 2023-11
:EndIf
r←2 2⍴'markdown'markdown'email'email
⎕FUNTIE dcfTie
:If 0<⎕NC'what'
('Not a valid data item for a group: ',what)Assert(⊂what)∊r[;1]
r←2⊃r[;r[;1]⍳⊂what]
:EndIf
:Else
:If 0<⎕NC'what'
r←''
:Else
r←0 2⍴''
:EndIf
:EndIf
⍝Done
group←GetGroupFromPackageID packageID;buff;ind
⍝ Returns the group name of packageID
⍝ 'aplteam' ← GetGroupFromPackageID 'aplteam-name-1.2.3'
⍝ 'aplteam' ← GetGroupFromPackageID 'aplteam-name-1.2.3-beta-1'
buff←'-'(≠⊆⊢)packageID
:If 1=≢buff              ⍝ just a name without group and version?!
group←''             ⍝ There is no group name
:ElseIf IsValidPackageID_Complete packageID
group←1⊃buff
:Else
'Invalid package ID'Assert 2≤≢buff ⍝ Must at least be "<name>-<version>" or "<group>-<name>-<version>"
⍝ index of first item that is a version number (without build no. and "beta" stuff etc):
ind←1⍳⍨{∧/(⎕D∊⍨⍵~'.')∧('.'∧.=⍵~⎕D)}¨buff
'Invalid package ID'Assert ind∊2 3
:If 2=ind
group←''         ⍝ There is no group name
:Else
group←1⊃buff
:EndIf
:EndIf
⍝Done
r←GetGroupName url
⍝ Takes a url and returns just the group name
⍝ Exammples:
⍝ 'aplteam' ← GetGroupName 'aplteam-foo-1.0.0'
⍝ 'aplteam' ← GetGroupName '/some path/has-some-hyphens/aplteam-foo-1.0.0'
r←{1↓⍵↑⍨-'/'⍳⍨⌽⍵}{'/'@(⍸⍵='\')⊢⍵}url
r←{⍵↑⍨¯1+⍵⍳'-'}r
⍝Done
GetJsonFromFile←{JSON 1⊃F.NGET ⍵}
r←GetNoBetasDefault
⍝ This is a niladic function in order to make sure that the default is the same everywhere
r←0
r←pkgList GetOperatingsSystems path;filename;buff
⍝ If ⍺ is undefined the full list is returned.
⍝ If ⍺ is defined, only matches are returned.
⍝ The result is a matrix with four columns:
⍝ [;1]      Package ID
⍝ [;2,3,4]  Booleans for os_lin, os_mac, os_win
r←0 4⍴''
filename←path,'/tatin_os.txt'
('File not found: ',path)Assert F.IsFile filename
:If 0<≢buff←⊃F.NGET filename 1
r←↑{l←¯1+⍵⍳' ' ⋄ (⊂l↑⍵),⍎(l↓⍵)}¨buff
:If 0<⎕NC'pkgList'
r←(r[;1]∊pkgList)⌿r
:EndIf
:EndIf
⍝Done
r←GetTags path;filename
filename←path,'/tatin_tags.txt'
'Tag file not found'Assert F.IsFile filename
:If 0<≢r←⊃F.NGET filename 1
r←↑TAB{⍺(≠⊆⊢)⍵}¨r
r[;2]←⎕C r[;2]
r←r[⍋r;]
r[;1]←{⊃⊃(//)⎕VFI ⍵}¨r[;1]
:EndIf
⍝Done
r←GetTempDir
r←739⌶0
(
'* 0.115.0 ⋄ 2024-10-13'
'  * `]ListPackages` now has a -latest flag'
'  * The API function `ListPackages` no accepts a `latest` parameter'
'  * `CreateAPIfromCFG` is now much better documented'
'  * Bug fixes'
'    * ]InstallPackackage did not suggest to call ]LoadDependencies with -overwrite but should'
'    * The `exclude` parameter does not work as intended in case of leading or trailign spaces'
'    * `LoadPackages` did not check on its argument being a file that does exist.'
'    * Test cases do not write to the project anymore'
'    * `ZipArchive` package updated: fixes a problem with spaces in filenames'
'* 0.114.0 ⋄ 2024-09-29'
'  * Syntax of `ListVersions` enhanced: without an argument (or just a Registry) it tries to cooperate with Cider'
'  * The INI-entry "Base" has been removed from the INI template. If the INI entry is set it''s ignored.'
'  * Internal changes: test cases'
'    * Communication between tests and the test server improved '
'    * Handling auto-start (Windows only for the time being) and user starts improved  '
'  * Bug fixes'
'    * `ProcessLogFile` crashed on an empty (brand new) log file'
'    * The INI entries "Base" and "BaseTagPort" are no longer reqiered and are ignored when defined. The associated'
'      code has been changed.'
'    * MarkAPL package updated: fixes a pro lem with URLs.'
'    * Adding a home page for a group failed because of a missing email address which can only be defined via the '
'      group''s home page...  '
'* 0.113.1 ⋄ 2024-09-08'
'  * Bug fix: due to a bug in APLProcess now working new versions were created for 18.0 and 18.2.'
'    This fix therefore affects only 18.0 and 18.2'
'* 0.113.0 ⋄ 2024-09-05'
'  * `PublishPackages` offers a list now when more than one ZIP file is found in a distribution folder'
'  * `CloseConnections` handles a 1006 now separately from other errors'
'  * `aplteam-APLProcess` exchanged against `dyalog-APLProcess`'
'  * Bug fixes'
'    * `GetProgramFilesFolder` still returned `.dyalog/` on non-Windows systems (only affected build process)'
'    * On Linux `FetchPackagesForCopyRegistry` had a problem'
'    * Documentation regarding the installation on non-Windows platforms amended to latest changes in `]activate`'
'    * 4 test cases failed on Linux & Mac OS due to a typo: "Myapp" rather than "MyApp"  '
'* 0.112.1 ⋄ 2024-08-16'
'  * Change of strategy when the dependecy file was changed after the build list was created: the build list'
'    is now re-created from scratch.'
'  * Bug fixes'
'    * `CreateAPIfromCFG` made shy tfns non-shy'
'    * `UpdateTatin` had a problem on Linux and Mac-OS once the bug in ]activate is fixed'
'    * `InitPackageConfig` does not perform a check on the names ina package config file'
'* 0.112.0 ⋄ 2024-07-14'
'  * Major flaw in ]CopyRegistry fixed: must copy deprecated packages as well for compatability reasons'
'  * Package updated (CommTools)'
'* 0.111.0 ⋄ 2024-07-12'
'  * The user command ]LoadDependencies did not cooperate with Cider. Now it does: if no argument is specified,'
'    it looks for open Cider projects and acts accordingly. Same for the folder to load from.'
'  * Bug fixes         '
'    * Under rare circumstances editing a group homepage caused a server error 500.'
'    * The internal function `ReturnDependencyFiles` did not react appropriately in case a package was not found. '
'* 0.110.0 ⋄ 2024-07-08'
'  * User command `]CopyRegistry` and its API equivalent implemented'
'  * `]ListPackages` as well as the API-equivalent have a new parameter `-dependencies` '
'  * Concurrent development of Client and Server are made much easier, and documented as well'
'  * User command help pages polished'
'  * Help pages reorganzied: they are now variables for much easier editing'
'  * The ]Maintenance user command now excepts [MyUCMDs] as argument'
'  * Bug fixes'
'    * When the newly introduced optional parameter `exclude` pointed exclusively to non-existing files then'
'      the attempt to produce a message crashed.'
'    * `BuildPackage` wrongly refused to run without .NET Framework on Windows - not required anymore'
'    * `]ListPackages` crashed when `[*]` was specified as an argument depending on which Reistries are defined'
'    * `]Tatin.Version -check` crashed'
'* 0.109.0 ⋄ 2024-06-27'
'  * New API function `CreateAPIfromCFG` implemented that creates an API automatically'
'  * New (optional) package property `exclude` introduced                               '
'  * For Linux & Mac-OS /home/<⎕AN> is no longer hard coded but established with 2⎕NQ''.'' ''GetEnvironment'' ''HOME'''
'  * Documentation for the server and the "Load and Update Strategy" improved'
'  * When a package is fully specified to InstallPackages (and therefore, implicitly, also to LoadPackages) '
'    (read: owner+name+full-version-number) but without a Registry, then when there is only one Registry defined'
'    in the user settings with a priority greater than 0 AND the package (and any dependencies) is available'
'    from the cache, no Internet is required anymore'
'  * The "Run" function does not re-create the user command cache anymore'
'  * Package alias names properly documented  '
'* 0.108.1 ⋄ 2024-05-04'
'  * Bug fix (introduced by 0.108.0): ListVersions and siblings t returned the list properly sorted, but in '
'    reverse order'
'* 0.108.0 ⋄ 2024-05-02'
'  * Integrity check added to `]PublishPackage` regarding the origin of dependencies'
'  * `]PublishPackage` now returns messages as result rather than printing them to ⎕SE  '
'  * Bug fixes'
'    * On the production server, calling the usage data page caused an error 500'
'    * Reporting ignored Registries by `CheckForLaterVersion` was wrong'
'    * A package installed into a non-managed Registry was not found by `InstallPackages`'
'    * `Run.aplf` gets around problems caused by saving Tatin in the session file'
'    * `DeletePackage` did not deal with case problems'
'    * New version of `ZipArchive` that runs on Mac-OS High Sierra'
'    * `OnHouseKeeping` did not execute `⎕OFF` in Runtime when it should have'
'    * `SortIndexForPackageIDs` did not return the expected result when the path carried hyphens'
'    * Under rare circumstances a dependency ref injected into a package was pointing to the wrong package'
'    * Incompatabilities when running/developing on Linux and Mac-OS addressed'
'* 0.107.0 ⋄ 2024-04-04'
'  * ]DeletePackages and the related API function changed. The API function even has a different syntax.'
'  * ]GetDeletePolicy enhanced plus fixing #178'
'* 0.106.2 ⋄ 2024-03-27  '
'  * Bug fixes'
'    * After updating Tatin to 0.106.1 a newly started session did not offer any ]Tatin user commands'
'    * ]UpdateTatin reported a wrong installation folder'
'* 0.106.1 ⋄ 2024-03-18'
'  * User command help polished'
'  * Flag renamed in ]PackageConfig: -quiet is now -force'
'  * Bug fixes                                          '
'    * Version 0.106.0 introduced a bug that made ]UpdateTatin crash with a VALUE ERROR'
'    * API function "Version" was buggy with * and -all'
'* 0.106.0 ⋄ 2024-03-12'
'  * The user command script is now a redirect-only script. The real thing is an ordinary namespace: Tatin.UC'
'    This is part of the Tatin project: saved in APLSource/UC/'
'  * When there is a Cider project "Tatin" opened the user is asked whether she wants to execute code in #.Tatin'
'    rather than ⎕SE._Tatin, making work on the user commands significantly easier. '
'  * Bug fixes'
'    * Usage Data crashed on turn of the year, and thereafter.  '
'* 0.105.0 ⋄ 2024-03-03'
'  * `]DeletePackage` renamed to `]DeletePackages`'
'  * `]DeletePackages` now accepts an incomplete package ID and works out group name and list of packages'
'    fitting the input before attempting to delete it'
'  * `⎕SE.Tatin.DeletePackages` now accepts these inputs (examples):'
'    * aplteam-foo'
'    * aplteam-foo-1'
'    * foo'
'  * `UpdateClient` handles 302 (redirect) now no matter what'
'  * ]ListRegistries has now a flag -raw'
'  * New version of MarkAPL integrated with a bug fix in the dark print theme'
'  * Bug fixes'
'    * `UpdateClient` appeared to hang once the new release notes were shown in the default browser (#186)'
'    * Instructions for installing and updating Tatin corrected and polished '
'    * Initializing process of Tatin is now more robust'
'* 0.104.1 ⋄ 2024-01-27'
'  * No instance of the UserSettings class is any longer distributed with the Client workspace'
'  * Sending ZIPped data is no longer Base64-encoded but declared as binary data with the HTTP header "Content-Type".'
'* 0.104.0 ⋄ 2024-01-22'
'  * The results of both `]ListRegistries` and its API counterpart have changed. '
'  * `TatinVars.HOME` is now much more flexible now, addressing Dyalog stand-alone applications'
'  * Bug fixes'
'    * `UpdateClient` had a problem with `Run.aplf`'
'    * `UserSettings.ReplaceRegistry` did not correcly identify an `id`'
'    * `DefineRegistry` did not allow changing the `id`'
'    * `DefineRegistry`''s constructor did not handle a port number as in `''https://localhost:9090''`'
'    * `Client.ListRegistries` did not return the `id` - delivers now a changed and complete result'
'* 0.103.2 ⋄ 2024-01-16'
'  * New version of FilesAndDirs integrated'
'  * ]UserSettings now accepts a flag -home that prints the folder hosting the user settings file'
'  * UserSettings documentation improved.  '
'  * Bug fixes'
'    * It was possible to publish without an API key though not with an invalid one'
'    * The function `SplitLogFile` caused a WS FULL at the turn of the year due to a bad implementation'
'    * `GetProgramFilesFolder` did return a wrong folder on Linux and Mac-OS'
'    * `]UpdateTatin` did not put the release notes into a Ride browser when it should'
'    * ]InstallPackage when acting on a non-existing ZIP file did not provide a useful error message'
)
{r}←ImportWithQuadFIX(sourcePath target);ref;list;sourceFiles;sourceDirs;bool;i;target2;extensions;rc
⍝ Uses just ⎕FIX with no left argument in an attempt to overcome bugs <01841> and <01843>
r←⍬
:If 0=⎕NC target
target CreateNamespace ⎕THIS
:EndIf
ref←⍎target
sourcePath←##.FilesAndDirs.NormalizePath sourcePath
:If F.IsDir sourcePath
:If 0<≢sourceFiles←F.ListFiles sourcePath,'/'
extensions←⎕C¨3⊃∘⎕NPARTS¨sourceFiles
bool←~extensions∊'.txt' '.json' '.dws'
:AndIf 0<≢sourceFiles←bool/sourceFiles
extensions←bool/extensions
bool←(extensions∊'.aplc' '.apln' '.apli' '.aplf' '.aplo' '.dyalog')
:If 0<+/bool
ref QuadFix¨bool/sourceFiles
:EndIf
bool←extensions≡¨⊂'.apla'
:If 0<≢sourceFiles←bool/sourceFiles
ref EstablishVariablesFromFiles sourceFiles
:EndIf
:EndIf
sourceDirs←F.ListDirs sourcePath,'/'
:If 0<≢sourceDirs
:For i :In ⍳≢sourceDirs
target2←target,{0=≢⍵:⍵ ⋄ '.',⍵}{1↓⍵↑⍨-⌊/(⌽⍵)⍳'/\'}i⊃sourceDirs
ImportWithQuadFIX(i⊃sourceDirs)target2
:EndFor
:EndIf
:ElseIf ⎕NEXISTS sourcePath    ⍝ Then we can assume it's a fn or an op
ref QuadFix sourcePath
:Else                          ⍝ Probably an empty namespace, so we create one (might later host refs to dependencies!)
(2⊃⎕NPARTS sourcePath)ref.⎕NS''
:EndIf
⍝Done
{ref}←Compile path;packageList;index;cfgFiles;descs;tags;cfgData;ind;index2;deprecated;deprecated_;osList;os_lin;os_mac;os_win;UC
⍝ (Re)-builds the index for the registry pointed to by `path`.
⍝ Writes several files:
⍝ * {path}/tatin_index.txt contains a simple string with all package folder names, including deprecated packages
⍝ * {path}/tatin_descriptions.json contains a simple string with all package descriptions
⍝ * {path}/tatin_tags.txt contains the tags for all packages
⍝ * {path}/tatin_deprecated.txt contains the names of all packages that are deprecated, but
⍝ * {path}/tatin_os.txt contains Booleans for all Operatings System with one line per package
⍝ * {path}/tatin_uc.txt contains a Boolean to indicate whether a package is a user command or not (one line per package)
⍝   within a major version only the last version, if that is deprecated
⍝ More stuff might be added later.
⍝ Returns a reference to a namspace that holds veriables with these pieces of information.
ref←⎕NS''
:Hold 'INDEX'
:If 0<≢packageList←##.F.ListDirs path
packageList←##.InjectPublishingDate packageList
packageList←packageList[##.SortIndexForPackageIDs packageList;1]
index←{⍵↑⍨1+-⌊/(⌽⍵)⍳'/\'}¨packageList
cfgFiles←packageList,¨⊂'/apl-package.json'
cfgFiles←(##.F.IsFile cfgFiles)/cfgFiles                       ⍝ Should only happen in case one is tracing through test cases
cfgData←{(##.ReadPackageConfigFile ⍵)}¨cfgFiles
cfgData←PolishCfgData cfgData
(descs tags os_lin os_mac os_win)←↓⍉↑cfgData.(description tags os_lin os_mac os_win)
osList←({⊃,/1↓⎕NPARTS ⍵}¨packageList),¨' ',¨⍕¨os_lin,¨os_mac,¨os_win
UC←index{⍵\⍵/⍺}{0=⍵.⎕NC'userCommandScript':0 ⋄ 0<≢⍵.userCommandScript}¨cfgData
(cfgData.deprecated/descs)←⊂''
(cfgData.deprecated/tags)←⊂''
(cfgData.deprecated/UC)←⊂''
descs←⊃,/descs,¨⎕UCS 13
ref.descriptions←descs
deprecated←cfgData.deprecated⌿index
(⊂descs)##.F.NPUT(path,'/tatin_descriptions.json')1
tags←##.TAB{(1⊃⍵),⍺,(2⊃⍵)}¨⊃,/(⍳≢tags){(⊂⍕⍺)∘,¨⊂¨{⍵⊆⍨~⍵∊';,'}⍵}¨tags ⍝ We keep supporting ";" for the time being
tags←(~({⊃⊃(//)⎕VFI ⍵↑⍨¯1+⍵⍳⎕UCS 9}¨tags)∊deprecated)⌿tags     ⍝ Remove all tags that belong to deprecated packages
(⊂tags)##.F.NPUT(path,'/tatin_tags.txt')1
deprecated_←⊃,/deprecated,¨⎕UCS 13
(⊂deprecated_)##.F.NPUT(path,'/tatin_deprecated.txt')1
ref.deprecated←deprecated_
index2←⊃,/index,¨⎕UCS 13
ref.index←index2
(⊂index2)##.F.NPUT(path,'/',GetIndexFilename)1
(⊂osList)##.F.NPUT(path,'/tatin_os.txt')1
(⊂UC)##.F.NPUT(path,'/tatin_uc.txt')1
:Else
(⊂'')##.F.NPUT(path,'/',GetIndexFilename)1
(⊂'')##.F.NPUT(path,'/tatin_descriptions.json')1
(⊂'')##.F.NPUT(path,'/tatin_tags.txt')1
(⊂'')##.F.NPUT(path,'/tatin_deprecated.txt')1
(⊂'')##.F.NPUT(path,'/tatin_os.txt')1
(⊂'')##.F.NPUT(path,'/tatin_uc.txt')1
:EndIf
:EndHold
⍝Done
Create←{
⍝ Creates a Registry index file. Must not exist yet, otherwise it throws an error.
path←⍵
_←(⊂'')##.F.NPUT path,'/',GetIndexFilename
1:shy←0
}
ind←path FindFullPackageID packageName;index;bool
⍝ `path` must point to a Tatin Registry
⍝ `packageName` is simple string `{group}-{name}-{version}`
⍝ Returns the index of that package in the index or 0 if not found.
⍝ If the file that is expected to hold the index is not found it is created (empty).
⍝ See all `FindPartPackageID
ind←0
index←⎕C 1⊃'ASCII'##.F.NGET path,'/',GetIndexFilename
:If 0<+/bool←(⎕C packageName,##.LF)⍷index
ind←1+(index↑⍨bool⍳1)+.=##.LF
:EndIf
⍝Done
r←path FindPartPackageID packageName;index;bool;list
⍝ `path` must point to a Tatin Registry
⍝ `packageName` is the `{group}-{name}` part of a package ID
⍝ Returns either matrix with zero rows or a matrix with full package IDs in the first
⍝ column and the Registry path in the second column.
⍝ If the file that is expected to hold the index is not found it is created (empty).
⍝ See also `FindFullPackageID`
r←0 2⍴⍬
:If 0=##.F.Exists path,'/',GetIndexFilename
Create path
:EndIf
index←⎕C ##.LF(≠⊆⊢)1⊃'ASCII'##.F.NGET path,'/',GetIndexFilename
:If 0<+/bool←((1+≢packageName)↑¨index)≡¨⊂⎕C packageName,'-'
list←bool/index
r←↑(⊂¨list),¨⊂⊂path
:EndIf
⍝Done
r←GetIndexFilename
r←'tatin_index.txt'
r←{nested}GetRegistryIndex path;filename;list
⍝ In a managed Tatin Registry there must be a file "tatin_index.txt".
⍝ In a local un-managed Registry there is none.
⍝ By default a simple character vector (⎕UCS 10-separated) is returned.
⍝ You may change this by specifying a 1 as `⍺`.
nested←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'nested'
filename←path,'/',GetIndexFilename
:If 0<##.F.IsFile filename
r←⊃##.F.NGET filename nested
:Else
r←(1+≢path)↓¨##.F.ListDirs path  ⍝ It's a local Registry, and it is not managed, se we go for directories
:EndIf
⍝Done
cfgData←PolishCfgData cfgData;ind
⍝ Checks for properties that got introduced at a later stage and therefore might not exist in
⍝ any old config file. We inject them with default data.
⍝ Might also handle renames, if any.
:If 0<≢ind←⍸{0=⊃⍵.⎕NC'description'}¨cfgData
cfgData[ind].description←⊂''
:EndIf
:If 0<≢ind←⍸{0=⊃⍵.⎕NC'tags'}¨cfgData
cfgData[ind].tags←⊂''
:EndIf
:If 0<≢ind←⍸{0=⊃⍵.⎕NC'deprecated'}¨cfgData
cfgData[ind].deprecated←0              ⍝ For selection we need this in all config data
:EndIf
:If 0<≢ind←⍸{0=⊃⍵.⎕NC'os_lin'}¨cfgData
cfgData[ind].os_lin←0
:EndIf
:If 0<≢ind←⍸{0=⊃⍵.⎕NC'os_mac'}¨cfgData
cfgData[ind].os_mac←0
:EndIf
:If 0<≢ind←⍸{0=⊃⍵.⎕NC'os_win'}¨cfgData
cfgData[ind].os_win←0
:EndIf
r←{path}InjectPublishingDate packageIDs;i;packageID;json
⍝ Returns a matrix with three columns:
⍝ [;1] packageID (without any beta part)
⍝ [;2] the publishing date as a real (YYYYMMDD.hhmmss)
⍝ [;3] the publishing date but for non-betas 99999999
⍝ Useful for sorting purposes.
path←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'path'
r←((≢packageIDs),3)⍴''
:For i :In ⍳≢packageIDs
packageID←i⊃packageIDs
json←GetJsonFromFile(AddSlash path),packageID,'/',CFG_Name
:If NotJustDigits{⍵↓⍨1++/2>+\'-'=⍵}{∨/'/\'∊⍵:⊃,/1↓⎕NPARTS ⍵ ⋄ ⍵}packageID
r[i;]←packageID json.date json.date
:Else
r[i;]←packageID json.date 99999999
:EndIf
:EndFor
⍝Done
IntToBits←{⌽(32⍴2)⊤⍵}
r←IsBeta packageID;patch
⍝ Returns 1 in case ⍵ (a package ID) is a beta version.
⍝ Betas are defined as having anything trailing that's neither a . not a digit.
⍝ Can also handle the name of ZIP files.
:If '.zip'{⍺≡⎕C(-≢⍺)↑⍵}packageID
packageID←{⍵↑⍨1+-⌊/(⌽⍵)⍳'/\'}¯4↓packageID
:EndIf
packageID←(¯1+packageID⍳'+')↑packageID
patch←{1↓⍵/⍨2≤+\'-'=⍵}packageID
r←0<≢patch~⎕D,'.'
⍝Done
IsFILE←{≢'file://'⎕S 0⊣⍵}
IsHTTP←{≢'https*://'⎕S 0⊣⍵}
IsValidPackageID_Complete←{
⍝ `⍵` is a string to be check for being a packge ID.\\
⍝ `←` is 1 only if `⍵` is full package ID: {group}-{name}-{major.minor.patch}
⍝ Examples are:
⍝ * aplteam-MyClass-1.0.0
⍝ * aplteam-MyClass-11.222.333
⍝ * aplteam-MyClass-2.0.0-beta3\\
1=≢'^[A-Za-z]+[A-Za-z0-9_]*-[A-Za-z]+[A-Za-z0-9_]*-[0-9]+\.[0-9]*\.[0-9][.\=+\-_0-9A-Za-z]*$'⎕S 0⊣⍵
}
IsValidPackageID_WithMajorNo←{
⍝ `⍵` is a string to be check for being a package ID.\\
⍝ `←` is 1 only if `⍵` is full package ID with a major number but without minor and patch number: {group}-{name}-{major}
⍝ Example:
⍝ * aplteam-MyClass-1
1=≢'^[A-Za-z]+[A-Za-z0-9_]*-[A-Za-z]+[A-Za-z0-9_]*-[0-9]+$'⎕S 0⊣⍵
}
IsValidPackageID_WithoutPatchNo←{
⍝ `⍵` is a string to be checked for being a package ID.\\
⍝ `←` is 1 only if `⍵` is full package ID without the patch number: {group}-{name}[{major.minor}
⍝ Example:
⍝ * 1 ← IsValidPackageID_WithoutVersionNo 'aplteam-MyClass-1.2'
1=≢'^[A-Za-z]+[A-Za-z0-9_]*-[A-Za-z]+[A-Za-z0-9_]*-[0-9]+\.[0-9]$'⎕S 0⊣⍵
}
IsValidPackageID_WithoutVersionNo←{
⍝ `⍵` is a string to be checked for being a package ID.\\
⍝ `←` is 1 only if `⍵` is full package ID without the version number: {group}-{name}
⍝ Example:
⍝ * 1 ← IsValidPackageID_WithoutVersionNo 'aplteam-MyClass'
1=≢'^[A-Za-z]+[A-Za-z0-9_]*-[A-Za-z]+[A-Za-z0-9_]*$'⎕S 0⊣⍵
}
IsValidPackageName←{
⍝ `⍵` is a string to be checked for being a package name (NOT an ID!).\\
⍝ `←` is 1 only if `⍵` is just a valid name: no group and no version, and no hyphen.
⍝ Examples:
⍝ * 1 ← IsValidPackageName 'MyClass'
⍝ * 0 ← IsValidPackageName 'mygroup-MyClass-1.2.3'
1=≢'^[A-Za-z]+[A-Za-z0-9_]*$'⎕S 0⊣⍵
}
r←IsWindows
r←'Win'≡3↑⊃'.'⎕WG'APLVersion'
r←{format}JSON data;buff
⍝ `⍵` is a namespace with variables, for example for config parameters.\\
⍝ `←` is JSON but nicely formatted.
r←''
:If (,0)≢⍴data   ⍝ We need to overcome bug <01752>
format←{0<⎕NC ⍵:⍎⍵ ⋄ 'D'}'format'
'Invalid: "format"'Assert 1=≢format
'Invalid: "format"'Assert format∊'DM'
:If ⍬≢⍴data
:AndIf (2≠⍴⍴data)∧2≠≡data
buff←{'\\'⎕R'\\\\'⍠('Greedy' 0)⊣⍵}⍣(⍬≢⍴data)⊣data      ⍝ Backslash is the JSON escape character!
buff←(⎕UCS 10)(≠⊆⊢)buff
buff←(';'≠⊃¨buff)/buff
buff←1↓⊃,/(⎕UCS 10),¨buff
:Else
buff←data
:EndIf
r←⎕JSON⍠('Format'format)('Compact' 0)('Dialect' 'JSON5')⊣↓⍣(⊃2=⍴⍴buff)⊣buff
:EndIf
⍝Done
r←LF
r←⎕UCS 10
list←ListDeprecatedPackages path;filename
filename←path,'tatin_deprecated.txt'
list←''
:If F.IsFile filename
list←⊃F.NGET filename 1
:EndIf
⍝Done
list←ListGroups path;index;filename
filename←F.ExpandPath path,'/',Index.GetIndexFilename
'Is not a Tatin registry'Assert F.IsFile filename
index←1⊃F.NGET filename 1
index←(2≤index+.=¨'-')/index  ⍝ Just in case...
list←∪{⍵↑⍨¯1+⍵⍳'-'}¨index
⍝Done
r←{list}ListPackages(uri parms);packageID;registryPath;fuzzy;tags;noOfHyphens;noOfDots;uniqueIDs;list2;since;flag;bool;OSlist
⍝ Documentation see ##.Client.ListPackages
'No registry specified'Assert 0<≢uri
parms←CheckParmsForListPackages parms
r←(0,(1+parms.date))⍴⍬
(registryPath packageID)←SeparateUriAndPackageID uri
registryPath←F.ExpandPath registryPath
parms.date{⍺:⍺ ⋄ 0≢⊃⍵}←parms.since
:If flag←0=⎕NC'list'
list←(parms.date)GetAllPackages registryPath
:EndIf
:If 0<≢parms.tags
:AndIf ~(⊂parms.tags)∊0 1
tags←','(≠⊆⊢)⎕C parms.tags
(fuzzy list)←parms.aggregate FindTag registryPath tags list
list←⍪list
→(0∊≢list)/0
:EndIf
:If flag
list←registryPath RemoveDeprecatedPackages list
:If parms.latest
list←(⌽({⍵⍳⍵}⌽RemoveMinorAndPatch¨list[;1])=⍳≢list)⌿list
:EndIf
:EndIf
:If 0<≢parms.group
list←((⎕C parms.group)∘≡¨GetGroupFromPackageID¨list[;1])⌿list
→(0∊≢list)/0
:EndIf
:If parms.userCommand
list←list OnlyUserCommandPackages registryPath
:EndIf
:If 0∊bool←∊parms.(os_lin os_mac os_win)
OSlist←list GetOperatingsSystems registryPath
list←(∨/bool/OSlist[;2 3 4])⌿list
→(0∊≢list)/0
:EndIf
:If 0≢parms.project_url
list,←AddInfoURL list registryPath
:EndIf
:If 0=≢packageID~'*'
:If parms.aggregate
:AndIf parms.date=0
r←AggregatePackages list
:Else
r←list
:EndIf
:If 0≢⊃parms.since
since←parms.since
:If ' '=1↑0⍴since                             ⍝ International date format?
since←⊃A.ToNum since~'-'                  ⍝ Convert to a number
:EndIf
r←(since≤{⊃A.ToNum(10↑⍵)~'-'}¨r[;2])⌿r
:EndIf
:Else
noOfHyphens←'-'+.=packageID
:Select noOfHyphens
:Case 0                                           ⍝ Just the group
:If 0<≢list←((⎕C packageID,'-')∘≡¨{⎕C ⍵↑⍨⍵⍳'-'}¨list[;1])⌿list
:If parms.aggregate
r←AggregatePackages list
:Else
r←list,⊂⍬
:EndIf
:EndIf
:Case 1                                           ⍝ group and name
:If 0<≢list←((⎕C packageID,'-')∘≡¨(⎕C∘RemoveVersionNumber¨list[;1]),¨'-')⌿list
:If parms.aggregate
r←AggregatePackages list
:Else
r←list,⊂⍬
:EndIf
:EndIf
:Else                                             ⍝ group, name and version, but the version mgith carry additional hyphens!
noOfDots←'.'+.=packageID
:Select noOfDots
:Case 0                                       ⍝ Just major
:If 0<≢list←((⎕C packageID,'.')∘≡¨{⎕C ⍵↑⍨⍵⍳'.'}¨list[;1])⌿list
:If parms.aggregate
r←0 AggregatePackages list
:Else
r←list,⊂⍬
:EndIf
:EndIf
:Case 1                                       ⍝ major and minor
:If 0<≢list←((⎕C packageID,'.')∘≡¨{⎕C'.',⍨⍵/⍨2>+\'.'=⍵}¨list[;1])⌿list
:If parms.aggregate
r←⍉⍪{(1⊃⍵)(≢⍵)}RemovePatch¨,list
:Else
r←list,⊂⍬
:EndIf
:EndIf
:Else
:If (⊂⎕C packageID)∊⎕C,list               ⍝ verbatim
r←1 2⍴packageID ⍬
:EndIf
:EndSelect
:EndSelect
:EndIf
:If 0<≢r
:AndIf parms.dependencies
r←registryPath AddDependencies r
:EndIf
⍝Done
data←ListTags(uri parms);registryPath;tagList;search;bool;fuzzy;bool_;IDs;search_;os;os2
⍝ Returns either a data with all tags or, in case `parms.tags` is not empty,
⍝ all tags of all packages that carry the tags specified in `parms`.
'No registry specified'Assert 0<≢uri
data←0 2⍴''
registryPath←F.ExpandPath uri
'Neither an alias nor a path?!'Assert F.IsDir registryPath
tagList←GetTags registryPath
:If 0<≢tagList
:If 2=parms.⎕NC'tags'
:AndIf 0<≢parms.tags
search←','(≠⊆⊢)parms.tags
(fuzzy bool)←↓⍉↑tagList[;2]∘{FindTag_ ⍺ ⍵}¨,search
IDs←⊃∩/bool⌿¨⊂tagList[;1]
search_←⊃∩/bool⌿¨⊂tagList[;2]
bool_←tagList[;1]∊IDs
tagList←bool_⌿tagList
:EndIf
:If 2=parms.⎕NC'os'
:AndIf 0<≢parms.os
os←⊃F.NGET(registryPath,'tatin_os.txt')1
os←↑{A.ToNum ⍵↓⍨⍵⍳' '}¨os[tagList[;1]]
os2←','(≠⊆⊢)parms.os
:If (⊂'lin')∊os2
(os tagList)←(os[;1])∘⌿¨os tagList
:EndIf
:If (⊂'mac')∊os2
(os tagList)←(os[;2])∘⌿¨os tagList
:EndIf
:If (⊂'win')∊os2
(os tagList)←(os[;3])∘⌿¨os tagList
:EndIf
:EndIf
:If 0<≢tagList
data←{⍺,≢⍵}⌸tagList[;2]
data←data[⍋data[;1];]
:EndIf
:EndIf
⍝Done
r←{dateFlag}ListVersions uri;registryPath;packageID;group;name;regEx;pattern;ind;list;list2;list_lc;buff;major;groups;bool;version;minor;versions;bool2
⍝ Takes a package ID without minor and patch number (but possibly with major) and returns all versions saved for that package ID (vector)
⍝ If `dateFlag` is specified and 1 (default is 0) then a matrix is returned with the publishing date in [;2].
⍝ The latest (best?!) version is at the bottom, the oldes ot the top.
'Invalid package ID'Assert 0 1 2∊⍨('\/'A.Last uri)+.='-' ⍝ Must be either "name" or "group-name" or "group-name-major" or "name-major"
dateFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'dateFlag'
(registryPath packageID)←SplitAtLast uri
'Is not a folder'Assert F.IsDir registryPath
registryPath←F.ExpandPath registryPath
list_lc←⎕C list←1 Index.GetRegistryIndex registryPath
group←name←major←version←''
:Select '-'+.=packageID
:Case 2                        ⍝ group, name and version
(group name version)←⎕C'-'(≠⊆⊢)packageID
:Case 1                        ⍝ Either groups and name or name and major
buff←'-'(≠⊆⊢)packageID
:If (1⍴2⊃buff)∊⎕D          ⍝ Major?
(name major)←buff
name←⎕C name
:Else                      ⍝ group and name
(group name)←⎕C buff
:EndIf
:Else                          ⍝ just name
name←⎕C packageID
:EndSelect
'Specifying minor and patch number is not permitted'Assert~'.'∊major
:If 0<≢group
groups←⎕C{⍵↑⍨¯1+⍵⍳'-'}¨list_lc
bool←groups≡¨⊂group
(list_lc list)←bool∘/¨list_lc list
:EndIf
:If 0<≢list
bool←(⎕C name)∘≡¨{{⍵↑⍨¯1+⍵⍳'-'}⍵↓⍨⍵⍳'-'}¨list_lc
(list_lc list)←bool∘/¨list_lc list
:AndIf 0<≢list
:If 0<≢version
(major minor)←' '~⍨¨2↑'.'(≠⊆⊢)version,'..' ⍝ Patch is ignored
versions←{⍵↓⍨1++/2>+\'-'=⍵}¨list_lc
versions←{⍵/⍨2>+\⍵='.'}¨versions
versions←↑{'.'(≠⊆⊢)⍵}¨versions
bool←major∘≡¨versions[;1]
:If 0<≢minor
bool2←minor∘≡¨versions[;2]
(list_lc list)←(bool∧bool2)∘/¨list_lc list
:Else
(list_lc list)←bool∘/¨list_lc list
:EndIf
:EndIf
:EndIf
list2←registryPath InjectPublishingDate list
:If dateFlag
ind←SortIndexForPackageIDs list2
list←list[ind]
list2←list2[ind;]
r←list,|list2[;,2]
:Else
r←list[SortIndexForPackageIDs list2]
:EndIf
⍝Done
cfg←MassageTags cfg;tags
⍝ This code still lives only because the os_* flags got introduced pretty late, and at that point
⍝ people got used to add tags to indicate OS compatability.
:If 0<≢cfg.tags
tags←','(≠⊆⊢)cfg.tags
tags~←'apl' 'dyalog' 'dyalogapl' 'dyalog-apl'  ⍝ These make no sense: Tatin is a Dyalog package manager by definition
:If (⊂'windows')∊tags
cfg.os_win←1
:EndIf
:If ∨/('mac-os' 'mac' 'macos')∊tags
cfg.os_mac←1
:EndIf
:If (⊂'linux')∊tags
cfg.os_lin←1
:EndIf
tags~←'windows' 'mac-os' 'macos' 'mac' 'linux'
cfg.tags←{0=≢⍵:'' ⋄ ⊃{⍺,',',⍵}/⍵}tags
:EndIf
NotJustDigits←{
⍝ Takes a Version number or part of it (like the Patch no) and checks whether it consists just of digits and dots.
⍝ Used to tell `1.2.3` from `1.2.3-beta-1-fix123'
~0 1∊⍨≡⍵:∇¨⍵
0<≢'\d+\.\d+\.\d+-'⎕S 0⍠('Greedy' 0)⊣⍵
}
list←list OnlyUserCommandPackages registryPath;uc;UC
UC←⊃F.NGET(registryPath,'tatin_uc.txt')1
list←(list[;1]∊UC)⌿list
⍝Done
r←PROJECT_HOME
:If 0<##.⎕NC'CiderConfig'
r←##.CiderConfig.HOME
:Else
r←F.PWD   ⍝ If it's not a project then this is the best we can do
:EndIf
{(statusCode errMsg)}←{isHttpRequest}PublishPackage y;packageID;zipFilename;registryPath;G;HttpCodes;tempDir;cfg;packageDir;list;zipFilename2
⍝ Tries to publish a package locally.\\
⍝ * If the package already exists `errmsg` carries an appropriate message. No further action is taken.
⍝ * If any action along the line fails (like creating the package directory, copying the ZIP file, copying the dependency file, if any)
⍝   then all actions carried out so far are rolled back.
⍝ Two right arguments are mandatory:
⍝ [1] Name of a zip file
⍝ [2] Path to the folder where the Registry data lives
⍝ The third argument is optional and only provided by a running server: it's the namespace G (Globals).
⍝ No matter whether this functions was called by a Tatin server or not, it returns HTTP status codes:
⍝ * In case of success 200
⍝ * In case the package is already published 400 (Bad request)
⍝ * In case something else went wrong 500 (Internal Server error)
⍝ In case the function is called by a Tatin server, `errMsg` should be returned as content; that's why we do not just use `Assert`.
(zipFilename registryPath G)←3↑y,⊂⍬
isHttpRequest←{0=⎕NC ⍵:0 ⋄ ⍎⍵}'isHttpRequest'
HttpCodes←⎕NS'' ⋄ HttpCodes.OK←200 ⋄ HttpCodes.InternalServerError←500 ⋄ HttpCodes.BadRequest←400
tempDir←F.GetTempSubDir''
zipFilename ZipArchive.UnzipTo tempDir
:If F.IsFile tempDir,'/',CFG_Name
cfg←ReadPackageConfigFile tempDir
:Else
errMsg←'Package does not contain a file "',CFG_Name,'"'
statusCode←HttpCodes.BadRequest
→∆GetOut
:EndIf
:If 0<≢errMsg←CheckConfigProperties cfg G
statusCode←HttpCodes.BadRequest
:Else
cfg←MassageTags cfg
statusCode←HttpCodes.OK ⋄ errMsg←''
:If 0=≢cfg.minimumAplVersion
cfg.minimumAplVersion←'18.0' ⍝ This is the minimum by definition: Tatin does not run on earlier versions
:EndIf
:If 0=≢cfg.maintainer
cfg.maintainer←'email'GetGroupData registryPath cfg.group
:EndIf
(JSON cfg)F.NPUT(tempDir,'/',CFG_Name)1
packageID←{⍵.group,'-',⍵.name,'-',⍵.version}cfg
packageID←⊃SplitVersionFromBuild packageID
registryPath←AddSlash registryPath
packageDir←registryPath,packageID
list←GetAllPackages registryPath
list←RemoveVersionNumber¨list
:If ~(⊂RemoveVersionNumber 2⊃⎕NPARTS packageDir)∊list
:AndIf (⊂⎕C RemoveVersionNumber 2⊃⎕NPARTS packageDir)∊⎕C list
errMsg←'There is already such a package but with a different spelling (case)'
statusCode←HttpCodes.BadRequest
:ElseIf F.IsDir packageDir
errMsg←'Package already exists (version conflict)'
statusCode←HttpCodes.BadRequest
:ElseIf 0=F.MkDir packageDir,'/data'
statusCode←HttpCodes.InternalServerError
errMsg←'Could not create data/ directory for ',packageID
:ElseIf 0<≢(zipFilename2←packageDir,'/',packageID,'.zip')(⎕NCOPY Exec)zipFilename
statusCode←HttpCodes.InternalServerError
errMsg←'Publishing ',packageID,' failed due to a server error'
packageDir RollbackPublishPackage errMsg
:Else
(packageDir,'/data')(⎕NCOPY⍠('Wildcard' 1)F.ExecNfunction)tempDir,'/*'
:If 0<≢packageDir(⎕NMOVE Exec)packageDir,'/data/apl-package.json'
statusCode←HttpCodes.InternalServerError
errMsg←'Publishing ',packageID,' failed due to a server error'
packageDir RollbackPublishPackage errMsg
:Else
(statusCode errMsg)←PublishPackage_ packageID packageDir tempDir zipFilename2 isHttpRequest
:EndIf
:EndIf
:EndIf
∆GetOut:
F.RmDir tempDir
⍝Done
(statusCode errMsg)←PublishPackage_(packageID packageDir path zipFilename isHttpRequest);myZip;dependenciesFilename;deps
⍝ Sub-function of PublishPackage without independent meaning other than clearifying matter: it really does the job.
statusCode←HttpCodes.OK ⋄ errMsg←''
SetPublishingDate packageDir,'/',CFG_Name
myZip←⎕NEW ZipArchive(,⊂zipFilename)
packageDir myZip.Add CFG_Name
myZip.Dispose
dependenciesFilename←packageDir,'/data/',DependenciesFilename
:If F.Exists dependenciesFilename
:If 0<≢deps←⊃F.NGET dependenciesFilename 1
:If isHttpRequest      ⍝ If the Registry is managed by a server we cannot allow file://
:AndIf ∨/IsFILE¨deps
statusCode←HttpCodes.BadRequest
errMsg←'Publishing package ',packageID,' failed; dependency uses file:// protocol'
packageDir RollbackPublishPackage errMsg
:Else
:If 0<≢errMsg←packageDir(⎕NMOVE Exec)dependenciesFilename
statusCode←HttpCodes.InternalServerError
errMsg←'Publishing package failed: ',packageID
packageDir RollbackPublishPackage errMsg
:Else
0 RemoveDataFolder packageDir ⍝ For the time being we keep `data/`. If we change our mind pass 1 as left argument
:EndIf
:EndIf
:EndIf
:EndIf
⍝Done
{r}←ref QuadFix filename;body;res
⍝ Read any code from file and fix in "ref": functions, operators, classes, interfaces and scripted namespaces.
⍝ Throws an error in case fixing failed.
body←⊃⎕NGET filename 1
res←2 ref.⎕FIX body
'Could not fix'Assert(⎕DR⊃res)∊80 160
r←((⍕ref),'.'),∊res
⍝Done
ReadNativeFile←{
filename←⍵
tno←filename ⎕NTIE 0
size←⎕NSIZE tno
r←⎕NREAD tno 80 size 0
_←⎕NUNTIE tno
r
}
cfg←ReadPackageConfigFile path;buff
⍝ Takes path to a package and returns the config file of that package.
:If CFG_Name{⍺≢(-≢⍺)↑⍵}path
path,←'/',CFG_Name
:EndIf
buff←⊃F.NGET path
(('\'=buff)/buff)←'/'
cfg←⎕JSON⍠('Dialect' 'JSON5')⊣buff
⍝Done
RemoveBetaPart←{
⍝ 'group-pkg-1.0.0' ←→ RemoveBetaPart 'group-pkg-1.0.0-beta-1'
1<≡⍵:∇¨⍵
⍵/⍨3>+\⍵='-'
}
{rc}←flag RemoveDataFolder path;en;more
⍝ Attempts to remove the `data\` folder from `path` in case `flag` is 1.\\
⍝ Note that this is the only step in the process of publishing a package that might fail without all actions already carried out as part
⍝ being rolled back. In other works, if removing the `data\` folder fails that is ignored.
rc←0
:If flag
(rc en more)←F.RmDir path,'/data'
:EndIf
mat←path RemoveDeprecatedPackages mat;deprecated;deprecated_;list
⍝ All packages of a major version are removed when the very latest package is marked as deprecated
deprecated←ListDeprecatedPackages path
deprecated_←RemoveMinorAndPatch¨deprecated
list←RemoveMinorAndPatch¨mat[;1]
mat←(~list∊deprecated_)⌿mat
⍝Done
RemoveMinorAndPatch←{
⍝ Takes a packageID and removes the minor and the patch number:
⍝ 'aplteam-APLTreeUtils-6' ← RemoveMinorPatch 'aplteam-APLTreeUtils-6.0.1'
⍝ 'aplteam-foo-0'          ← RemoveMinorPatch 'aplteam-foo-0.1.2-beta3'
2>'-'+.=⍵:⍵
{(1⊃⍵),'-',(2⊃⍵),'-',{⍵↑⍨¯1+⍵⍳'.'}3⊃⍵}'-'(≠⊆⊢)⍵
}
RemoveOneLevel←{
⍝  'C:\Temp' ←→     RemoveOneLevel 'C:\Temp\Foo'
⍝  'C:\Temp' ←→     RemoveOneLevel 'C:\Temp\Foo\'
⍝  'AA.BB'   ←→ '.' RemoveOneLevel 'AA.BB.CC'
⍺←'/\'
sep←⍺
path←⍵
path←(-sep∊⍨¯1↑path)↓path
0=+/path∊sep:path
path↓⍨-⌊/sep⍳⍨⌽path
}
RemovePackageID←{
⍝ Removes the package ID from the URL
URL←⍵
(-⊥⍨~URL∊'\/')↓URL
}
RemovePatch←{
⍝ Takes a packageID and removes the patch number:
⍝ 'aplteam-APLTreeUtils-6.0' ← RemoveMinorPatch 'aplteam-APLTreeUtils-6.0.1'
⍝ 'aplteam-foo-0.1'          ← RemoveMinorPatch 'aplteam-foo-0.1.2-beta3'
2>'-'+.=⍵:⍵
(group name version)←'-'(≠⊆⊢)⍵
group,'-',name,'-',{⍵/⍨2>+\'.'=⍵}version
}
RemoveVersionNumber←{
⍝  'group-name' ←→ RemoveOneLevel 'group-name-1.2.3
⍝  'C:/Foo/group-name' ←→ RemoveOneLevel 'C:/Foo/group-name-1.2.3
(2>+\'-'=⍵)/⍵
}
{r}←packageDir RollbackPublishPackage msg;rc;en;more
⍝ Rolls back any attempt to publish a package locally.
⍝ This is decided by `msg`: if it is empty, no action is taken at all.\\
⍝ `packageDir` (together with any content) will be removed.
⍝ If that fails for any reason an error is thrown.\\
⍝ Returns always `⍬`
r←⍬
:If 0<≢msg
:AndIf 2=⎕NC'packageDir'
(rc en more)←F.RmDir packageDir
'Removing package folder after failed publishing attempt failed'Assert 0=rc
:EndIf
⍝Done
{r}←json SaveJSON y;filename;flags
⍝ Attempts to write `json` to `filename` and makes sure that all ⎕UCS 10 are replaced by ⎕UCS 13.\\
⍝ This is necessary in order to overcome the shortcomings of the current implementation of ⎕JSON (April 2023).
'Must not be nested'Assert 1=≡json
(filename flags)←2↑(⊆y),0
r←(⊂json)(⎕NPUT⍠'NEOL' 2)filename flags
⍝Done
SeparateUriAndPackageID←{
protocol←{⍵↑⍨1↑'^file://' '^https?://'⎕S 1⍠('Greedy' 0)⊣⍵}⍵
buff←(≢protocol)↓⍵
∧/~'\/'∊buff:(protocol,buff)''
protocol'',¨{⍵{(⍵↓⍺)(⍵↑⍺)}1+-{⌊/⍵⍳'/\'}⌽⍵}buff
}
ind←SeparateUriAndPackageID_ vec;buff
⍝ Sub function on SeparateUriAndPackageID without independent meaning
:If '-'∊⊃vec
buff←4↑¨'-'A.Split¨vec
ind←⍋⎕C{⍵[1 2],(⊂{⊃,/¯5↑¨'.'A.Split ⍵}3⊃⍵),⊂(4⊃⍵)}¨buff
:Else
ind←⍋⎕C{⊃,/¯4↑¨'.'A.Split ⍵}¨vec
:EndIf
{r}←{TS}SetPublishingDate filename;json;TS2
⍝ Injects the publishing date into the config file as a float
⍝ You may specify a TS as left argument (mainly test cases)
r←⍬
TS←{0=⎕NC ⍵:⎕TS ⋄ ⍎⍵}'TS'
TS2←60 ⎕DT⊂TS
json←JSON⊃F.NGET filename
json.date←TS2
(⊂JSON json)F.NPUT filename 1
⍝Done
ind←SortIndexForPackageIDs data;ind1;ind2;buff
⍝ ⍵ must be one of:
⍝ * A list of package IDs or a list of version numbers.
⍝ * A three-column-matrix (additional columns are ignored):
⍝   [;1] packageID (without any beta part) or version numbers
⍝   [;2] the publishing date as a real (YYYYMMDD.hhmmss)
⍝   [;3] the publishing date but for non-betas 99999999 - this col determins the sort sequence
⍝ The latest (best) goes to the bottom, the oldest to the top.\\
⍝ * For non-betas the version number rules
⍝ * For betas the publishing dates rule\\
⍝ Notes:
⍝ * {group}-{name}-9.0.0 comes before {group}-{name}-10.0.0
⍝ * {group}-{name}-9.9.0 comes before {group}-{name}-9.10.0
⍝ * {group}-{name}-9.9.9 comes before {group}-{name}-9.9.10
⍝ * {group}-{name}-9.0.0 20101213.010203 comes before {group}-{name}-9.0.0 20110114.010203
ind←⍬
:If 0<≢data
Assert 0=∧/~'.'∊¨data
:If 2=⍴⍴data
ind1←⍋data[;3]
data←data[ind1;]
buff←{⊃,/1↓⎕NPARTS ⍵}¨data[;1]
buff←RemoveBetaPart¨buff
ind2←SeparateUriAndPackageID_ buff
ind←ind1[ind2]
:Else
ind←SeparateUriAndPackageID_ RemoveBetaPart{∨/'/\'∊⊃⍵:(≢⊃⎕NPARTS⊃⍵)↓¨⍵ ⋄ ⍵}data
:EndIf
:EndIf
⍝Done
SplitAtLast←{
⍝ ('C:\Temp\' 'foo') ← SplitAtLast 'C:\Temp\foo'
⍝ ('foo' '')         ← SplitAtLast 'foo'
⍺←'\/'
∧/~⍺∊⍵:⍵''
⍵{(⍵↓⍺)((⍵+1)↑⍺)}-⌊/(⌽⍵)⍳⍺
}
(version2 patch)←SplitVersionFromBuild version;bool;ind
⍝ ('1.2.3' '')         ← SplitVersionFromBuild '1.2.3'
⍝ ('1.2.3-beta-1' '')  ← SplitVersionFromBuild '1.2.3-beta-1'
⍝ ('1.2.3' '34')       ← SplitVersionFromBuild '1.2.3+34'
⍝ ('1.2.3-beta1' '34') ← SplitVersionFromBuild '1.2.3-beta1+34'
:If '+'∊version
ind←version⍳'+'
patch←ind↓version
version2←(ind-1)↑version
:Else
version2←version
patch←''
:EndIf
⍝Done
r←TAB
r←⎕UCS 9
r←TatinVersionAsHttpHeader
r←'x-tatin'(2⊃Version)
⍝Done
r←Timestamp2Float ts
⍝ yyyymmdd.hhmmss←Timestamp2Float ⎕TS
r←{1E¯9×0 100 100 100 100 100 1000⊥7↑⍵}ts
r←Version
⍝ See also `History`
r←'Tatin' '0.115.0+1992' '2024-10-14'
r←VersionOf_REST
r←'/v1'
WriteNativeFile←{
filename←⍵
data←⍺
_←{⍵ ⎕NERASE ⍵ ⎕NTIE 0}⍣(⎕NEXISTS filename)⊣filename
tno←filename ⎕NCREATE 0
r←data ⎕NAPPEND tno 80
_←⎕NUNTIE tno
1:shy←r
}
r←Attachment
r←##.Attachment
r←Connection
r←##.Connection
r←ConnectionParameters
r←##.ConnectionParameters
{r}←Help
r←##.Help
r←MailParameters
r←##.MailParameters
SendEmailExample←{
⍝ Use this to send a test email to `emailAddress`.
⍝ Use with care: the email address used for logging on to the SMTP server is not suitable for
⍝ anything remotely confidental; it's just for tests. Be aware that the hard-coded credentials
⍝ might get changed in case somebody uabuses this.
⍝ Note that the number of emails you may send is limited.
⍝ ⍺ is optional and may be a char vector (filename) or a vector of char vectors (filesnames).
⍝ If specified those are attached to the email. Relative filenames are expected in ./
⍺←⊣
⍺ ##.SendEmailExample ⍵
}
r←Version
r←##.Version
:Class Attachment
∇ make1(filename);extension
:Access Public Instance
:Implements Constructor
Init filename
:If 0=≢extension←3⊃⎕NPARTS _filename
_mimeType←'application/octet-stream'
:Else
_mimeType←GetMimeType extension
:EndIf
∇
∇ make2(filename mimeType)
:Access Public Instance
:Implements Constructor
Init filename
_mimeType←mimeType
'Mime type must not be empty'Assert 0<≢_mimeType
∇
∇ Init filename
'File not found'Assert ⎕NEXISTS filename
_filename←filename
_mimeType←''
∇
:Property filename
:Access Public Instance
∇ r←get
r←_filename
∇
:EndProperty
:Property mimeType
:Access Public Instance
∇ r←get
r←_mimeType
∇
∇ set Arg
'mimeType: invalid depth'Assert(≡Arg.NewValue)∊0 1
'mimeType: invalid data type'Assert' '=1↑0⍴Arg.NewValue
_mimeType←Arg.NewValue
∇
:EndProperty
∇ r←GetAllMimeTypes;mat;row
⍝ Returns a matrix with two columns: extension and Mime type
:Access Public Shared
r←''
r,←⊂'.bin' 'application/octet-stream'
r,←⊂'.bmp' 'image/bmp'
r,←⊂'.css' 'text/css'
r,←⊂'.csv' 'text/csv'
r,←⊂'.doc' 'application/msword'
r,←⊂'.docx' 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
r,←⊂'.gz' 'application/gzip'
r,←⊂'.gif' 'image/gif'
r,←⊂'.htm' 'text/html'
r,←⊂'.html' 'text/html'
r,←⊂'.ico' 'image/vnd.microsoft.ico'
r,←⊂'.jpeg' 'image/jpeg'
r,←⊂'.js' 'text/javascript'
r,←⊂'.json' 'application/json'
r,←⊂'.mp3' 'audio/mpeg'
r,←⊂'.mp4' 'video/mp4'
r,←⊂'.mpeg' 'video/mpeg'
r,←⊂'.otf' 'font/otf'
r,←⊂'.png' 'image/png'
r,←⊂'.pdf' 'application/pdf'
r,←⊂'.ppt' 'application/vnd.ms-powerpoint'
r,←⊂'.pptx' 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
r,←⊂'.rar' 'application/vnd.rar'
r,←⊂'.rtf' 'application/rtf'
r,←⊂'.sh' 'application/x-sh'
r,←⊂'.svg' 'image/svg+xml'
r,←⊂'.tar' 'application/x-tar'
r,←⊂'.tif' 'image/tiff'
r,←⊂'.ttf' 'font/ttf'
r,←⊂'.txt' 'text/plain'
r,←⊂'.vsd' 'application/vnd.visio'
r,←⊂'.wav' 'audio/wav'
r,←⊂'.woff' 'font/woff'
r,←⊂'.woff2' 'font/woff2'
r,←⊂'.xhtml' 'application/xhtml+xml'
r,←⊂'.xls' 'application/vnd.ms-excel'
r,←⊂'.xlsx' 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
r,←⊂'.xml' 'text/xml'
r,←⊂'.zip' 'application/zip'
r,←⊂'.7z' 'application/x-7z-compresses'
r←↑r
∇
∇ r←GetMimeType extension;mat;row
:Access Public Shared
extension←⎕C(('.'≠1⍴extension)/'.'),extension
mat←GetAllMimeTypes
:If (≢mat)≥row←mat[;1]⍳⊂extension
r←2⊃mat[row;]
:Else
r←'application/octet-stream'  ⍝ Kind of most general MIME type
:EndIf
∇
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}
:EndClass
:Class Connection
⍝ Based on original work by Conrad Hoesle-Kienzlen in 1999
⍝ * Updated by Morten Kromberg to use UTF-8 text, 2009
⍝ * Updated by Brian Becker in jan2011 to make compatible with Unix and Unicode
⍝ * Updated by Brian Becker in mar2019 to use Conga, make it a class, etc
⍝ * Updated by Kai Jaeger 2021-08: better traceable & bug fixes & test cases & made a Tatin package
(⎕IO ⎕ML)←1
:Field public ReadOnly CongaRootName←'SMTP'
:Field public shared CongaRef←''   ⍝ user-supplied reference to location of Conga namespace
:Field public shared LDRC←''       ⍝ reference to Conga library instance after CongaRef has been resolved
:Field _clt←''             ⍝ Conga client id
:Field _loggedOn←0
:Field _EHLOResponse←''
:Field _conx←''            ⍝ Conga connection id
:Property EHLOResponse
:Access public
∇ r←get
r←_EHLOResponse
∇
:EndProperty
:Property Clt  ⍝ client
:Access public
∇ r←get
r←_clt
∇
:EndProperty
:Property Conx  ⍝ client connection
:Access public
∇ r←get
r←_conx
∇
:EndProperty
:Property LoggedOn  ⍝ has authentication taken place?
:Access public
∇ r←get
r←_loggedOn
∇
:EndProperty
:Property ConnectionParms
:Access Public Instance
∇ r←get
r←_connectionParms
∇
:EndProperty
:Section Utilities
if←⍴⍨
empty←0∘∊⍴
splitOn←{⍵{(≢⍺)↓¨⍵⊂⍨⍺⍷⍵}⍵,⍺} ⍝ e.g. response splitOn CRLF
∇ r←Config
⍝ returns current service configuration
:Access public
r←↑{⍵≡'Password':⍵'********' ⋄ ⍵(⍎⍵)}¨⎕THIS⍎'⎕NL ¯2.2 ¯2.3'
∇
∇ r←CRLF
r←⎕UCS 13 10
∇
∇ (rc msg)←Connected;r;state
:Access public
msg←'SMTP server has not been connected'
→0↓⍨rc←Clt≢''
:Trap 0 ⍝ handle any Conga error, LDRC not defined, etc
r←LDRC.Describe Clt
:Else
→0⊣(rc msg)←0 'Conga could not query client'
:EndTrap
:If 0=⊃r ⍝ good Conga return code?
:Select state←⎕C 2⊃3↑2⊃r
:Case 'client'
(rc msg)←1 'connected'
:Case 'error'
(rc msg)←0 'not connected (possible server timeout)'
:Else
(rc msg)←0 'unknown client state: ',∊⍕state
:EndSelect
:Else
(rc msg)←0 'non-zero Conga return code'
:EndIf
∇
:endsection
∇ make1(connectionParms);list;msg
:Access public
:Implements constructor
⍝ `connectionParms` must be an instance of the `ConnectionParameters` class
'Right argument is not an instance of "ConnectionParameters"'Assert(⊃⊃⎕CLASS connectionParms)≡(⊃⊃⎕CLASS ⎕THIS).##.ConnectionParameters
msg Assert 0=≢msg←connectionParms.PerformChecks ⍬
_connectionParms←connectionParms
∇
∇ unmake;base
:Implements destructor
:Trap 0
{}Logoff
:If 0∊≢⎕INSTANCES base←⊃⊃⎕CLASS ⎕THIS
base.LDRC←''
:EndIf
:EndTrap
∇
∇ r←NewMessage(connectionParms mailParms)
:Access public shared
⍝ Create a new message instance
r←⎕NEW(⊃⊃⎕CLASS ⎕THIS).##.Message(⎕THIS connectionParms mailParms)
∇
∇ (rc msg log)←Send mailParms;logIt;message;text;rec
:Access public
logIt←{⍵⊣log,←⍵[2]}
(rc msg log)←¯1 '' ''
:If 0<≢msg←_connectionParms.PerformChecks ⍬
:Return
:EndIf
:If 0<≢msg←mailParms.PerformChecks ⍬
:Return
:EndIf
:If 0=≢mailParms.From
mailParms.From←_connectionParms.Userid
:EndIf
message←NewMessage _connectionParms mailParms
(rc msg text)←message.Compose mailParms
→Exit if 0≠rc
:If ~⊃Connected
(rc msg)←Connect      ⍝ connect to SMTP server
→Exit if 0≠rc
:EndIf
:If ~LoggedOn
(rc msg)←Logon
→Exit if 0≠rc
:EndIf
(rc msg)←Ping ⍝ ping the server to make sure it's still up
→Exit if 0≠rc
(rc msg)←Do'MAIL FROM: ',message.(normalizeAddr extractAddr From)
→Err if 0≠rc
:For rec :In message.(normalizeAddr∘extractAddr¨Recipients)
{}logIt Do'RCPT TO: ',rec
:EndFor
(rc msg)←Do'DATA'
→Err if 0≠rc
(rc msg)←Do text,CRLF,'.'
→Exit if 0=rc
Err:
logIt(rc msg)←Do'RSET'
Exit:
∇
∇ (rc msg)←{crlf}Xmit data;tmp
:Access public
⍝ transmit data without waiting for a response
⍝ {crlf} is a Boolean (default=0) indicating whether to append CRLF to data
⍝ After receiving a "DATA" comment, the SMTP server does not send a response until it receives CRLF,'.',CRLF
⍝ so, the typical use of Xmit would be to send the headers and content of the message and ending with a Do CRLF,'.'
:If 0=⎕NC'crlf' ⋄ crlf←0 ⋄ :EndIf
msg←'Sent'
→Exit if 0=rc←⊃tmp←LDRC.Send Clt data,crlf/CRLF
msg←1↓∊' ',¨⍕¨(tmp,'' '')[2 3]
Exit:
∇
∇ (rc msg)←Connect;r;uid;cert
:Access public
(rc msg)←¯1 ''
_connectionParms.Secure←0⌈_connectionParms.Secure
:If 0∊⍴LDRC
:OrIf {0::1 ⋄ 0≠⊃LDRC.Describe'.'}''
(rc msg)←Init CongaRootName
:EndIf
cert←⍬
:If _connectionParms.Secure
:If 0∊⍴LDRC.X509Cert.LDRC ⋄ LDRC.X509Cert.LDRC←LDRC ⋄ :EndIf
cert←('X509'(⎕NEW LDRC.X509Cert))('SSLValidation'_connectionParms.TLSFlags)
:EndIf
:Select ⊃r←LDRC.Clt(''_connectionParms.Server _connectionParms.Port'text' 2000000,cert)
:Case 0
_clt←2⊃r                   ⍝ Conga client name
:If 0=⊃(rc msg)←Do''       ⍝ retrieve the server response
(rc msg)←EHLO _connectionParms.Domain ⍝ log on user domain
_EHLOResponse←msg
:Else
{}LDRC.Close _clt
_clt←''
:EndIf
:Case 100 ⍝ timeout
msg←'Conga timeout on connect'
:Else ⍝ some Conga error occured
_clt←''
msg←'Conga error: ',,⍕LDRC.Error⊃r
:EndSelect
Exit:
∇
∇ (rc msg)←EHLO domain;resp;m
:Access public
⍝ Some SMTP servers (gmail in particular) break up the response to EHLO into multiple messages
:If 0=⊃(rc msg)←Do'EHLO ',domain
resp←msg splitOn CRLF
:If '250 '≢4↑⊃⊢/resp  ⍝ this makes the assumption that the EHLO response is in 2 parts only
:If 0=⊃(rc m)←Do''
msg,←m
:Else
msg←m
:EndIf
:EndIf
:EndIf
∇
∇ (rc msg)←Logon;email;rc;dom;elho;auth
:Access public
⍝ Log on to an SMTP mail server optionally using AUTH LOGIN or AUTH PLAIN authentication if userid and password are non-empty
⍝  Other authentication types may be added in the future
⍝  If no password is set, then authentication is not done
⍝
(rc msg)←¯1 ''
:If ~⊃Connected
→Exit if 0≠⊃(rc msg)←Connect
:EndIf
elho←' '(,⍨)¨(~EHLOResponse∊CRLF)⊆EHLOResponse
:If 1≠≢auth←('^250.AUTH '⎕S'%')elho
→Exit⊣msg←'250-AUTH server response was not found or was not proper'
:EndIf
auth←' '(≠⊆⊢)8↓⊃auth
:If (⊂'LOGIN')∊auth
→Exit if 0≠⊃(rc msg)←Do'AUTH LOGIN'
→Exit if 0≠⊃(rc msg)←Do(⊃⊃⎕CLASS ⎕THIS).##.Message.Base64Encoding _connectionParms.Userid
(rc msg)←Do(⊃⊃⎕CLASS ⎕THIS).##.Message.Base64Encoding _connectionParms.Password
:ElseIf (⊂'PLAIN')∊auth
→Exit if 0≠⊃(rc msg)←Do'AUTH PLAIN'
(rc msg)←Do(⊃⊃⎕CLASS ⎕THIS)##.Message.Base64Encoding _connectionParms.Userid,(⎕UCS 0),_connectionParms.Userid,(⎕UCS 0),_connectionParms.Password
:Else
'Only authentication methods LOGIN and PLAIN are currently supported'⎕SIGNAL 11
:EndIf
Exit:
_loggedOn←0=rc
∇
∇ (rc msg)←Logoff
:Access public
⍝ Log out from an SMTP mail server
:If 0=⊃(rc msg)←Do'QUIT'
rc←⊃LDRC.Close Clt
:EndIf
_loggedOn←0
∇
∇ (rc msg)←Ping
:Access public
(rc msg)←Do'NOOP'
∇
∇ (rc msg)←Reset
:Access public
(rc msg)←Do'RSET'
∇
∇ r←Do cmd;cnt;rc;c
:Access public
→go
⍝ Send a command to an smtp server and retrieve answer
⍝ cmd: smtp command, or mail body, or empty vector
⍝      If cmd is an empty vector, the function returns a pending answer
⍝      from the server
⍝ r    [1]=0 if OK (response was a 2XX) or 1 if error
⍝      [2]=status message starting with a 3-digit status number
⍝
⍝ Valid commands are:
⍝ Name Parameter      Description & return codes (S=success, E=error)
⍝ ---- -------------  ------------------------------------------------
⍝ HELO <domain>       Make yourself known to the server
⍝                      S: 250; E: 421 500 501 504
⍝ EHLO <domain>       Like HELO but request extended smtp services
⍝                      S: 250; E: 421 500 501 504
⍝                      NOTE: apart from code 250, the server answers with
⍝                            a cr/lf delimited list of supported commands
⍝ MAIL FROM:<sender>  Start a new mail, <sender> is your mail address
⍝                      S: 250; E: 421 451 452 500 501 552
⍝ RCPT TO:<receiver>  Identify the recipients, up to 100 are allowed
⍝                      S: 250 251; E: 421 450 451 452 500 501 503 550-553
⍝ DATA                Initialize sending mail body
⍝                      S: 354; E: 451 452 552 554
⍝ <maildata>          Send the mail body (use smtp_stuff to prepare it)
⍝                      NOTE: there is no response until "end-of-mail" is sent.
⍝ .<cr/lf>            "end-of-mail" command, a line with only a dot and cr/lf
⍝                      S: 250; E: 421 451 500 501 503 554
⍝ RSET                Cancel the mail just sent
⍝                      S: 250; E: 421 500 501 504
⍝ VRFY <string>       Verify a recipients mail address (often disabled)
⍝                      S: 250 251; E: 421 500 501 502 504 550 551 553
⍝ EXPN <string>       Expand a mailing list (often disabled)
⍝                      S: 250; E: 421 500 501 502 504 550
⍝ HELP [<string>]     Return a help message, optionally followed by a command
⍝                      S: 211 214; E: 421 500 501 502 504
⍝ NOOP                Returns success or error
⍝                      S: 250; E: 421 500
⍝ QUIT                End the smtp session
⍝                      S: 221; E: 500
⍝ TURN                Reverse the roles of client and server (DON't USE!)
⍝                      S: 250; E: 500 502 503
⍝
⍝ Meaning of the return codes:
⍝ NOTE: If the 3-digit number is followed by "-", there is more data to follow
⍝ 211 System status, or system help reply
⍝ 214 Help message
⍝ 220 <domain> Service ready
⍝ 221 <domain> Service closing transmission channel
⍝ 250 Requested mail action okay, completed
⍝ 251 User not local; will forward to <forward-path> (this is not an error!)
⍝ 354 Start mail input; end with <CRLF>.<CRLF>
⍝ 421 <domain> Service not available, closing transmission channel
⍝ 450 Requested mail action not taken: mailbox unavailable [E.g., mailbox busy]
⍝ 451 Requested action aborted: local error in processing
⍝ 452 Requested action not taken: insufficient system storage
⍝ 500 Syntax error, command unrecognized
⍝ 501 Syntax error in parameters or arguments
⍝ 502 Command not implemented
⍝ 503 Bad sequence of commands
⍝ 504 Command parameter not implemented
⍝ 550 Requested action not taken: mailbox unavailable
⍝ 551 User not local; please try <forward-path>
⍝ 552 Requested mail action aborted: exceeded storage allocation
⍝ 553 Requested action not taken: mailbox name not allowed (typo?)
⍝ 555 Only used by this program to indicate a special error condition
go:
:If ⊃c←Connected                   ⍝ if we're connected
:If ~empty cmd
:If 0≠⊃rc←LDRC.Send Clt(cmd,CRLF)
→Exit⊣r←'555 Conga error: ',,⍕2↑rc
:EndIf
:EndIf
cnt←0
Try:
:Select ⊃rc←LDRC.Wait Clt 2000  ⍝ wait up to 2 seconds
:Case 0
r←¯2↓4⊃rc                     ⍝ grab the data
:Case 100                         ⍝ timeout, try up to 3 times
cnt+←1
→Try if 3>cnt
r←'555 Conga timeout'
:Else
r←'555 Conga error: ',,⍕2↑rc
:EndSelect
:Else                              ⍝ if the socket does not exist
r←'555 SMTP server not connected - ',2⊃c
:EndIf
Exit:
r←((⊃r)∊'45')r                    ⍝ check for error and return
∇
:Section Conga
∇ (rc msg)←Init rootname;ref;root;nc;class;dyalog;n;ns;congaCopied
(rc msg)←¯1 ''
⍝↓↓↓ Check is LDRC exists (VALUE ERROR (6) if not), and is LDRC initialized? (NONCE ERROR (16) if not)
:Hold 'SMTPInit'
:If {6 16 999::1 ⋄ ''≡LDRC:1 ⋄ 0⊣LDRC.Describe'.'}''
LDRC←''
:If 9=#.⎕NC'Conga'
{#.Conga.X509Cert.LDRC←''}⍬ ⍝ if #.Conga exists, reset X509Cert.LDRC reference
:EndIf
:If 0≠≢CongaRef  ⍝ did the user supply a reference to Conga?
LDRC←rootname ResolveCongaRef CongaRef
:If ''≡LDRC
msg←'CongaRef (',(⍕CongaRef),') does not point to a valid instance of Conga'
→Exit
:EndIf
:Else
:For root :In ##.## #
ref nc←root{1↑¨⍵{(×⍵)∘/¨⍺ ⍵}⍺.⎕NC ⍵}ns←(-~0∊⍴rootname)↓'Conga' 'DRC' ⍝ if rootname is supplied, can only use Conga (no DRC)
:If 9=⊃⌊nc
:Leave
:EndIf
:EndFor
:If 9=⊃⌊nc
LDRC←rootname ResolveCongaRef root⍎∊ref
:If ''≡LDRC
msg←(⍕root),'.',(∊ref),' does not point to a valid instance of Conga'
→Exit
:EndIf
→∆COPY↓⍨{999::0 ⋄ 1⊣LDRC.Describe'.'}'' ⍝ it's possible that Conga was saved in a semi-initialized state
:Else
∆COPY:
class←⊃⊃⎕CLASS ⎕THIS
dyalog←{⍵,'/'↓⍨'/\'∊⍨¯1↑⍵}2 ⎕NQ'.' 'GetEnvironment' 'DYALOG'
congaCopied←0
:For n :In ns
:Trap 0
n class.⎕CY dyalog,'ws/conga'
LDRC←rootname ResolveCongaRef class⍎n
:If ''≡LDRC
msg←n,' was copied from [DYALOG]/ws/conga, but is not valid'
→Exit
:EndIf
congaCopied←1
:Leave
:EndTrap
:EndFor
:If ~congaCopied
msg←'Neither Conga nor DRC were successfully copied from [DYALOG]/ws/conga'
→Exit
:EndIf
:EndIf
:EndIf
:EndIf
rc←¯1×LDRC≢''
Exit:
:EndHold
∇
∇ LDRC←rootname ResolveCongaRef CongaRef;z;failed
⍝ CongaRef could be a charvec, reference to the Conga or DRC namespaces, or reference to an iConga instance
⍝ :Access public shared  ⍝!!! testing only  - remove :Access after testing
LDRC←'' ⋄ failed←0
:Select ⎕NC⊂'CongaRef' ⍝ what is it?
:Case 9.1 ⍝ namespace?  e.g. CongaRef←DRC or Conga
Try:
:Trap 0
:If ∨/'.Conga'⍷⍕CongaRef ⍝ is it Conga?
LDRC←CongaRef.Init rootname
:ElseIf 0≡⊃CongaRef.Init'' ⍝ DRC?
LDRC←CongaRef
:Else
→0⊣LDRC←''
:End
:Else ⍝ if HttpCommand is reloaded and re-executed in rapid succession, Conga initialization may fail, so we try twice
:If failed
→0⊣LDRC←''
:Else
→Try⊣failed←1
:EndIf
:EndTrap
:Case 9.2 ⍝ instance?  e.g. CongaRef←Conga.Init ''
LDRC←CongaRef ⍝ an instance is already initialized
:Case 2.1 ⍝ variable?  e.g. CongaRef←'#.Conga'
:Trap 0
LDRC←ResolveCongaRef(⍎∊⍕CongaRef)
:EndTrap
:EndSelect
∇
:EndSection
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}
:EndClass
:Class ConnectionParameters
⍝ Create an instance with all the properties required for a connection to an SMTP server.
⍝ Pass an instance of this class as argument to `⎕NEW Connection`.
∇ make
:Implements Constructor
:Access Public
_Server←''                    ⍝ server address
_Password←''                  ⍝ optional password (if server requires authentication)
_Userid←''                    ⍝ userid for authentication (defaults to `From`)
_Secure←1                     ⍝ 1=SSL/TLS, 0 = not secure
_Port←465                     ⍝ server port (465 for secure, 578 otherwise)
_Domain←''                    ⍝ fully qualified domain name for logging on with `Userid` and `Password`
_Org←''                       ⍝ optional organization
_ReplyTo←''                   ⍝ optional reply to email address
_XMailer←'APLTeam SMTP Client ',2⊃(⊃⊃⎕class ⎕this).##.Version  ⍝ client identifier
_TLSFlags←32                  ⍝ Default: accept server certificate without validating (see Conga User Guide Appendix C)
∇
:Property Server
⍝ URL of an SMTP server, for example smtp.gmail.com'
:Access public Instance
∇ r←get
r←_Server
∇
∇ set arg
'Server: not a simple character vector'Assert 80=⎕DR arg.NewValue
_Server←arg.NewValue
∇
:EndProperty
:Property Password
⍝ Used in connection with `Userid` to log onto `Server`
:Access public Instance
∇ r←get
r←_Password
∇
∇ set arg;val
'Password: not a simple character vector'Assert 80=⎕DR arg.NewValue
_Password←arg.NewValue
∇
:EndProperty
:Property Userid
⍝ Simple character vector that is going to be the subject line of the email
:Access public Instance
∇ r←get
r←_Userid
∇
∇ set arg
'Userid: not a simple character vector'Assert 80=⎕DR arg.NewValue
_Userid←arg.NewValue
∇
:EndProperty
:Property Secure
⍝ Boolean that decides whether communication is secured or not
:Access public Instance
∇ r←get
r←_Secure
∇
∇ set arg
'Secure: not a Boolean'Assert(⊂arg.NewValue)∊0 1
_Secure←arg.NewValue
∇
:EndProperty
:Property Port
⍝ Integer between 1 and 65535
:Access public Instance
∇ r←get
r←_Port
∇
∇ set arg
'Port: not an integer between 1 and 65535'Assert(⎕DR arg.NewValue)∊83 163 323
'Port: not an integer between 1 and 65535'Assert arg.NewValue∊⍳65535
_Port←arg.NewValue
∇
:EndProperty
:Property Domain
⍝ URL of the SMTP server
:Access public Instance
∇ r←get
:If 0=≢_Domain
_Domain←{⍵↓⍨⍵⍳'@'}_Userid
:EndIf
r←_Domain
∇
∇ set arg
'Domain: not a simple character vector'Assert 80=⎕DR arg.NewValue
_Domain←arg.NewValue
∇
:EndProperty
:Property Org
⍝ Optionally: organisation
:Access public Instance
∇ r←get
r←_Org
∇
∇ set arg
'Org: not a simple character vector'Assert 80=⎕DR arg.NewValue
_Org←arg.NewValue
∇
:EndProperty
:Property ReplyTo
⍝ Optional email address
:Access public Instance
∇ r←get
r←_ReplyTo
∇
∇ set arg
'ReplyTo: not a simple character vector'Assert 80=⎕DR arg.NewValue
:If 0<≢arg.NewValue
'ReplyTo: does not carry an @'Assert'@'∊arg.NewValue
'ReplyTo: not a valid email address'Assert 5<≢arg.NewValue
:EndIf
_ReplyTo←arg.NewValue
∇
:EndProperty
:Property XMailer
⍝ Client identifier
:Access public Instance
∇ r←get
r←_XMailer
∇
∇ set arg
'XMailer: not a simple character vector'Assert 80=⎕DR arg.NewValue
_XMailer←arg.NewValue
∇
:EndProperty
:Property TLSFlags
⍝
:Access public Instance
∇ r←get
r←_TLSFlags
∇
∇ set arg
'TLSFlags: invalid data type'Assert(⎕DR arg.NewValue)∊83 163
'TLSFlags: not a single integer in 1,2*⍳7 'Assert 1=≢arg.NewValue
'TLSFlags: not a single integer in 1,2*⍳7'Assert(⊂arg.NewValue)∊1,2*⍳7
_TLSFlags←⊃arg.NewValue
∇
:EndProperty
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}
∇ msg←PerformChecks dummy
⍝ Call this in order to check the parameters for completeness and consistency.
⍝ Checks all settings. If `msg` is empty then everything is OK.
:Access Public Instance
msg←''
:If 0=≢Domain
msg,←⊂'"Domain"'
:EndIf
:If 0=≢_Server
msg,←⊂'"Server"'
:EndIf
:If 0=≢_Port
msg,←⊂'"Port"'
:EndIf
:If _Secure
:If 0=≢_Password
msg,←⊂'"Password"'
:EndIf
:If 0=≢_Userid
msg,←⊂'"Userid"'
:EndIf
:EndIf
:If 0<≢msg
msg←'Missing: ',⊃{⍺,',',⍵}/msg
:EndIf
∇
:EndClass
{r}←Help;filename
r←⍬
filename←'SMTP_Help.html'
:If 0<⎕NC'TatinVars'
⎕SE.UCMD'Open ',TatinVars.HOME,'/',filename
:Else
⎕SE.UCMD'Open ',##.CiderConfig.HOME,'/',filename
:EndIf
:Class MailParameters
⍝ Create an instance with all the properties required for sending an email.
⍝ Pass an instance of this class to the `Send` method of an instance of the `Connection` class.
∇ make
:Implements Constructor
:Access Public
_To←''
_CC←''
_BCC←''
_From←''
_Subject←''
_Body←''
_Attachments←''
∇
:Property To
⍝ Exactly one email address
:Access public Instance
∇ r←get
r←_To
∇
∇ set arg
'To: not a simple character vector'Assert 80=⎕DR arg.NewValue
'To: does not contain an @ symbol'Assert'@'∊arg.NewValue
'To: invalid email address'Assert 5<≢arg.NewValue
'To: you must not specify more than one email address'Assert~','∊arg.NewValue
_To←arg.NewValue
∇
:EndProperty
:Property CC
⍝ Zero to many comma-separated email addresses as a simple character vector
:Access public Instance
∇ r←get
r←_CC
∇
∇ set arg;val
val←','(≠⊆⊢)arg.NewValue
'CC: not a simple character vector'Assert∧/{80=⎕DR ⍵}¨val
'CC: invalid email address'Assert 5∧.<≢¨val
'CC: invalid email address; no ampersand found'Assert∧/'@'∊¨val
_CC←val
∇
:EndProperty
:Property BCC
⍝ Zero to many comma-separated email addresses as a simple character vector
:Access public Instance
∇ r←get
r←_BCC
∇
∇ set arg;val
val←','(≠⊆⊢)arg.NewValue
'BCC: not a simple character vector'Assert∧/{80=⎕DR ⍵}¨val
'BCC: invalid email address'Assert 5∧.<≢¨val
'BCC: no ampersand found'Assert∧/'@'∊¨val
_BCC←val
∇
:EndProperty
:Property From
⍝ Something like <john Doe) john.doe@wherever.com or just an email address.
⍝ If this is left empty it falls back to `Userid` of the connection instance.
⍝ This is a good idea in most scenarios these days because otherwise you mail
⍝ is very likely to end up in the Spam folder.
:Access public Instance
∇ r←get
r←_From
∇
∇ set arg
'From: not a simple character vector'Assert 80=⎕DR arg.NewValue
'From: invalid email address'Assert 5<≢arg.NewValue
'From: no ampersand found'Assert'@'∊arg.NewValue
_From←arg.NewValue
∇
:EndProperty
:Property Subject
⍝ Simple character vector that is going to be the subject line of the email
:Access public Instance
∇ r←get
r←_Subject
∇
∇ set arg
'Subject: not a simple character vector'Assert (⎕DR arg.NewValue)∊80 160
_Subject←arg.NewValue
∇
:EndProperty
:Property Body
⍝ Simple character vector that is going to be the subject line of the email
:Access public Instance
∇ r←get
r←_Body
∇
∇ set arg;val
val←,⊆arg.NewValue
'Body: neither a simple character vector nor a vector of character vectors'Assert∧/{(⎕DR ⍵)∊80 160}¨val
_Body←val
∇
:EndProperty
:Property Attachments
⍝ Vector of instances of the `Attachment` class.
:Access public Instance
∇ r←get
r←_Attachments
∇
∇ set arg;val
:If 0=≢arg.NewValue
_Attachments←''
:Else
'Use the AddAttachment method'Assert 0
:EndIf
∇
:EndProperty
∇ {r}←AddAttachment y
⍝ Used to add attachments.
⍝ `y` may be one of:
⍝ * An instance of the `Attachment` class
⍝ * A simple character vector interpreted as a filename
⍝ * A vector of two simple character vectors interpreted as filename and mime type
:Access public instance
:If 80=⎕DR y
_Attachments,←⎕NEW(⊃⊃⎕CLASS ⎕THIS).##.Attachment(,⊂y)
:ElseIf 2=≡y
:AndIf 2=≢y
:AndIf 80∧.=⎕DR¨y
_Attachments,←⎕NEW(⊃⊃⎕CLASS ⎕THIS).##.Attachment y
:ElseIf 1=≢y
:AndIf (⊃⊃⎕CLASS ⎕THIS).##.Attachment≡⊃⊃⎕CLASS y
_Attachments,←y
:Else
'Neither a filename nor a filename plus a mime type nor an instance of the "Attachment" class'Assert 0
:EndIf
∇
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}
∇ msg←PerformChecks dummy
⍝ Call this in order to check the parameters for completeness and consistency.
⍝ Checks all settings. If `msg` is empty then everything is OK.
:Access Public Instance
msg←''
:If 0=≢_To
msg,←⊂'"To"'
:EndIf
:If 0=≢_Subject
msg,←⊂'"Subject"'
:EndIf
:If 0=≢_Body
msg,←⊂'"Body"'
:EndIf
:If 0<≢msg
msg←'Missing: ',⊃{⍺,',',⍵}/msg
:EndIf
∇
:EndClass
:Class Message
:Field public From←''
:Field public Subject←''
:Field public ReplyTo←''
:Field public Org←''
:Field public To←''           ⍝ vector of email addresses
:Field public CC←''           ⍝ vector of email addresses
:Field public BCC←''          ⍝ vector of email addresses
:Field public Headers←''      ⍝ vector of ('name' 'value')
:Field public XMailer←''
:Field public Body←''         ⍝ character vector 'content' or vector of ('MIMEType' 'content')
:Field public Attachments←''  ⍝ vector of instances of the `Attachment` class.
:Field public Client          ⍝ reference to SMTP client that created this
:Field _text←''
:Field _recipients←''
:Property Text
:Access public
∇ r←Get
r←_text
∇
:EndProperty
:Property Recipients
:Access public
∇ r←Get
r←_recipients
∇
:EndProperty
∇ make1(_Client connectionParams mailParams)
:Access public
:Implements constructor
Client←_Client
XMailer←connectionParams.XMailer
ReplyTo←connectionParams.ReplyTo
Org←connectionParams.Org
From←mailParams.From
Subject←mailParams.Subject
Body←mailParams.Body
CC←mailParams.CC
BCC←mailParams.BCC
Attachments←mailParams.Attachments
∇
∇ (rc msg text)←Compose mailParams;addHeader;haveAtts;boundary;mime;body;atts;i;n;att;⎕TRAP
:Access public
⍝ Compose email content
(rc msg text)←¯1 '' ''
_recipients←CompileAllRecipients mailParams
addHeader←{
⍵∧.=' ':''
128∧.>⎕UCS ⍵:⍺,': ',⍵,CRLF
⍺,': =?utf-8?B?',(Base64Encoding ⍵),'?=',CRLF
}
text←'Date'addHeader now    ⍝ Internet-conform date first
text,←'From'addHeader normalizeAddr From
text,←'Reply-To'addHeader normalizeAddr ReplyTo ⍝ the reply-to address
text,←'Organization'addHeader Org
text,←'X-Mailer'addHeader XMailer
text,←'MIME-Version'addHeader'1.0'
text,←∊CRLF∘(,⍨)¨('B'≠⊃¨Recipients)/Recipients ⍝ no headers for BCC recipients
text,←'Subject'addHeader(⎕UCS'UTF-8'⎕UCS Subject)     ⍝ the message subject
:If haveAtts←0≠≢Attachments ⍝ Any attachments?
boundary←'000',((⍕⎕TS)~' '),'APLTeamSMTP',CRLF ⍝ construct a boundary for attachments
text,←'Content-Type'addHeader'multipart/mixed; boundary="',(¯2↓boundary),'"'
text,←CRLF
text,←'This is a multi-part message in MIME format.',CRLF
text,←'--',boundary
:EndIf
:If 0≠≢Body
mime←(1+∨/'<html'⍷⎕C Body)⊃'plain' 'html'
mime←'text/',mime,'; charset="UTF-8"'
text,←'Content-Type'addHeader mime
text,←CRLF
text,←⎕UCS'UTF-8'⎕UCS⊃,/Body,¨⊂CRLF
text,←CRLF
:EndIf
:If haveAtts
text,←haveAtts/'--',boundary
:For i :In ⍳n←≢Attachments
:If 0∊⍴att←i ProcessAttachment i⊃,Attachments
msg←'Error processing attachment ',(⍕i),', file="',(1⊃i⊃Attachments),'"'
→Exit
:EndIf
text,←att
text,←'--',boundary
:EndFor
:EndIf
(rc msg)←0 ''
Exit:
∇
∇ r←Send
:Access public
r←Client.Send ⎕THIS
∇
∇ r←i ProcessAttachment attachment;mimeType;content;filename;⎕TRAP;path
r←''
(path mimeType)←attachment.(filename mimeType)
filename←∊¯2↑⎕NPARTS path
:Trap 0
content←ReadFile path
:Else
:Return
:EndTrap
r,←'Content-Type: ',mimeType,'; charset="US-ASCII"; name="',filename,'"',CRLF
r,←'Content-Disposition: attachment; filename="',filename,'"',CRLF
r,←'Content-Transfer-Encoding: base64',CRLF,CRLF
r,←chunk Base64Encoding content
∇
∇ r←ReadFile file;tno
⍝ We don't trap errors here because we don't want to pretend sending emails with attachments when we don't
tno←file ⎕NTIE 0
r←⎕NREAD tno,(⎕DR' '),¯1 0
⎕NUNTIE tno
∇
∇ r←CompileAllRecipients mailParams;addrs
r←''
r,←⊂'To: ',normalizeAddr mailParams.To
r,←{0=≢⍵:⍵ ⋄ 'CC: '∘,¨normalizeAddr¨⍵}mailParams.CC
r,←{0=≢⍵:⍵ ⋄ 'BCC: '∘,¨normalizeAddr¨⍵}mailParams.BCC
∇
∇ r←CRLF
r←⎕UCS 13 10
∇
∇ r←{len}chunk content;breaks;mask;stuff
⍝ Convert content into a vector with embedded cr/lf plus dot-stuffing
⍝ len : the maximum line length, excluding cr/lf line ends. Defaults to 72,
⍝       as 74 is a safe line length to transmit through SMTP
⍝ rc  : A string with cr/lf every len characters and dot-stuffing
⍝ NOTE: It is safe to send a Base64-encoded string through this function,
⍝       as those strings do not contain any dots. However, the function does
⍝       not work well if there are cr/lf already present in the input.
⍝ Dot-Stuffing: The end of an SMTP mail text is indicated by transmitting
⍝               a line with a single dot. This means, that the original
⍝               mail text must not contain a single dot on a line by itself.
⍝               To prevent this, every line that starts with a dot get's
⍝               preceeded with a second dot, which will be removed by the
⍝               recipients mail client. See pop3_unstuff, the reverse function.
stuff←{'.'=⊃⍵:'.',⍵ ⋄ ⍵}
:If 900⌶⍬ ⋄ len←72 ⋄ :EndIf    ⍝ default line length, if not given
:If 2>|≡content ⍝ simple array? otherwise, treat it as a vector of vectors
:Select ≢⍴content
:Case 0
content←,⊂,content
:Case 1
:If ∨/CRLF∊content         ⍝ any line breaks?
content,⍨←CRLF
breaks←CRLF∘.=content
content←(~∘⊂CRLF)¨content⊂⍨(∨⌿breaks)≠breaks[2;]∧¯1↓0,breaks[1;] ⍝ break on CRLF or lone CR or lone LF
:Else
content←,⊂content
:EndIf
:Case 2
content←↓content
:Else
content←↓((×/¯1↓⍴content),¯1↑⍴content)⍴content
:EndSelect
:EndIf
content←{⍵↓⍨-⊥⍨' '=⍵}¨content ⍝ delete trailing blanks
content←stuff¨content ⍝ dot-stuff (double leading dot)
:If ∨/mask←len<≢¨content  ⍝ any lines longer than length?
:If 1=≢content ⍝ single chunk
content←{((≢⍵)⍴len↑1)⊂⍵}⊃content
(1↓content)←stuff¨1↓content
:Else
content←({⊂len∘chunk ⍵}@{mask})content
:EndIf
:EndIf
r←∊content,¨⊂CRLF
∇
∇ r←extractAddr addr;quotes;ind;del
:Access Public Shared
⍝ extract the mail address from a string
⍝ perform very cursory validation on the address
⍝ addr - the string to be validated (can be in form "Fred Bloggs" fred@bloggs.com)
⍝ r    - the email address or empty if not valid
r←''
quotes←(⊢∨≠\)'"'=addr ⍝ mask out quoted material e.g. "fred@work" fred@bloggs.com
ind←⊃⍸quotes<addr='@'
:If ind≠0
del←0,(1+≢addr),⍨⍸quotes<' '=addr ⍝ break on space
r←addr{⍵[1]↓(¯1+⍵[2])↑⍺}del[0 1+del⍸ind]
r←⊃('.+@[^.].+\..+'⎕S'%')r
:EndIf
∇
∇ addr←normalizeAddr addr;a
:Access Public Shared
:If 0<≢addr~' '  ⍝ MB: avoid issues when addr is a 0/ManyAddrs
:If '<>'≢(⊣/,⊢/)a←extractAddr addr
addr←(addr/⍨~∨\⌽<\⌽a⍷addr),'<',a,'>'
:EndIf
:EndIf
∇
∇ r←Base64Encoding txt;⎕IO;A;ed
:Access Public Shared
⍝ ⍵ byte string: 256∧.>⎕ucs ⍵
⍝ ← longer (4:3) string in A-Z,a-z,0-9,+/= only
⎕IO←0
A←'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
ed←{⊃⍵{⍺{2⊥⍉((⌈(⍴⍵)÷⍺),⍺){⍺⍴(×/⍺)↑⍵}⍵},⍉(⍵⍴2)⊤⍺⍺}/⍺}
r←{⍵,'='⍴⍨4|-⍴⍵}(⊂6 8 ed ⎕UCS txt)⌷A
∇
∇ rc←now;time;day;mon;s;x;LOCTIME;TIMEZONE;isUnicode;twid
⍝ returns an internet-conforming (RFC 2822) timestamp
:If 'Win'≡3↑⊃'.'⎕WG'APLVersion'
isUnicode←80=⎕DR'A'
twid←64 32[1+isUnicode] ⍝ set width for text elements based on unicode or not
'LOCTIME'⎕NA'KERNEL32.C32|GetLocalTime >{I2[8]}' ⍝ associate GetLocalTime function
'TIMEZONE'⎕NA'U4 KERNEL32.C32|GetTimeZoneInformation >{I4 T[',(⍕twid),'] {I2[8]} I4 T[',(⍕twid),'] {I2[8]} I4}' ⍝ associate GetTimeZone function
⍝ prepare values for time formatting
day←'Sun,' 'Mon,' 'Tue,' 'Wed,' 'Thu,' 'Fri,' 'Sat,'
mon←'Jan ' 'Feb ' 'Mar ' 'Apr ' 'May ' 'Jun ' 'Jul ' 'Aug ' 'Sep ' 'Oct ' 'Nov ' 'Dec '
⍝ read the local time and format to Internet standard
time←⊃LOCTIME⊂8⍴1000
rc←(1+time[3])⊃day
rc←rc,,'< >,ZI2,< >'⎕FMT time[4]
rc←rc,time[2]⊃mon
rc←rc,,'I4,< >,ZI2,<:>,ZI2,<:>,ZI2,< >'⎕FMT 1 4⍴time[1 5 6 7]
⍝ call timezone function and calculate offset from GMT
x←TIMEZONE⊂0(twid⍴' ')(8⍴0)0(twid⍴' ')(8⍴0)0
x←(⊃x),2⊃x
s←'+-'[1+0>x←(-2⊃x)+-x[(5 8)[⊃x]]]
rc←rc,s,,'ZI4,< (GMT)>'⎕FMT|100×x÷60
:Else
rc←1⊃⎕SH'date -R' ⍝ unix - call date command
:EndIf
∇
∇ r←Config
⍝ returns current message configuration
:Access public
r←↑{⍵(⍎⍵)}¨⎕THIS⍎'⎕NL ¯2.2 ¯2.3'
∇
beginsWith←{⍵≡(≢⍵)↑⍺}
:EndClass
r←{filenames}SendEmailExample emailAddress;connectionParms;myConnection;mailParms;rc;msg;log
⍝ Use this to send a test email to `emailAddress`.
⍝ Use with care: the email address used for logging on to the SMTP server is not suitable for
⍝ anything remotely confidental; it's just for tests. Be aware that the hard-coded credentials
⍝ might get changed in case somebody uabuses this.
⍝ Note that the number of emails you may send is limited.
⍝ ⍺ is optional and may be a char vector (filename) or a vector of char vectors (filesnames).
⍝ If specified those are attached to the email. Relative filenames are expected in ./
filenames←{0<⎕NC ⍵:,⊆⍎⍵ ⋄ ⍬}'filenames'
connectionParms←⎕NEW ConnectionParameters
connectionParms.Server←'smtp.gmail.com'
connectionParms.Port←465
connectionParms.Userid←'smtp.tatin.tests1@gmail.com'
connectionParms.Password←'EuCD3NlYYXDDYwS6QJj2'
myConnection←⎕NEW Connection(,⊂connectionParms)
mailParms←⎕NEW MailParameters
mailParms.From←'do-not-reply@aplteam.com'
mailParms.To←connectionParms.Userid
mailParms.CC←emailAddress
mailParms.Subject←'From APLTeam SMTP'
mailParms.Body←'Test E-mail' ⍝ Can also be a vector of text vectors
:If filenames≢⍬
mailParms.AddAttachment¨filenames
:EndIf
(rc msg log)←myConnection.Send mailParms
:If 0=rc
r←'Email was sent successfully'
:Else
r←'Failed with rc=',(⍕rc),'; ',¯1↓(⊆msg),¨⎕UCS 13
:EndIf
r←Version
r←'SMTP' '2.0.0' '2021-12-21'
okayFlag←credentials AcceptCredential(apiKey groupName);credentials;ind;salt;hash;apiKeys;groupNames;bool
⍝ Takes an API key and a group name and checks whether that is found in the array `credentials`.
⍝ Note that `G.Credentials` is usually provided as `⍺` except by test cases etc.\\
⍝ This function is called when the user attempts to perform a PUT (read: "Publish") or
⍝ a DELETE or any other operation that requires authentication.\\
⍝ `apiKey` must be clear text.
⍝ Note that with version 0.103.0 this function also checks whether there is an email
⍝ address definedfor a group name that is not "*" _and_ requires an API key.
okayFlag←1
:If 0<≢credentials                                             ⍝ Do we have any credentials saved at all?
:If 2=⍴⍴credentials
(groupNames apiKeys)←↓⍉credentials[;1 2]
:If 0=≢apiKeys~' '
okayFlag←1
:Else
apiKey←A.DTB A.DLB apiKey
:If 0=≢apiKey                                      ⍝ Did the user provide credentials?
bool←(⊂,'*')≡¨groupNames                       ⍝ Wildcard?
bool∨←0=≢¨apiKeys                              ⍝ Has no API key
:If (⊂groupName)∊bool/groupNames               ⍝ Does this group NOT require an API key?
okayFlag←1
:Else
okayFlag←(,'*')≡(∊credentials)~⎕TS,' '     ⍝ Everybody anything?
:EndIf
:Else
ind←groupNames⍳⊂,groupName
:If ind≤≢groupNames                            ⍝ Is it known?!
:If 0<≢ind⊃apiKeys                         ⍝ Was that group assigned a specific API kay?
salt←⊃credentials[ind;3]
hash←HashPasswords.Hash salt,apiKey
okayFlag←hash≡2⊃credentials[ind;]      ⍝ Check the api key hash
:Else
okayFlag←(,'*')≡,ind⊃groupNames        ⍝ Is it a "master key" (all groups)?
:EndIf
:Else
ind←groupNames⍳⊂,'*'                       ⍝ Is there...
:If ind≤≢groupNames                        ⍝ ... a wildcard?
salt←⊃credentials[ind;3]
hash←HashPasswords.Hash salt,apiKey
okayFlag←hash≡2⊃credentials[ind;]      ⍝ Check the api key hash
:EndIf
:EndIf
:EndIf
:EndIf
:EndIf
:EndIf
⍝Done
html←AddJavaScript data
html←''
→(0=≢data)/0
html,←⊂'<script>'
html,←⊂'$(document).ready(function() {'
html,←⊂'    var oTable;'
html,←⊂'    oTable = $("#percent").DataTable( {'
html,←⊂'        paging:   false,'
html,←⊂'        ordering: true,'
html,←⊂'        info:     true,'
html,←⊂'        fixedHeader: true,'
html,←⊂'        order: [2,"asc"],'
html,←⊂'        dom: "Bft",'
html,←⊂'        buttons: ['
html,←AddJavaScriptButton('Search' ''(100)'^(?!(windows)).*')
html,←⊂'    ],'
html,←⊂' '
html,←⊂'        columnDefs: ['
html,←⊂'            {className: "align-right", targets: [2,3]'
html,←⊂'            },'
html,←⊂'            {'
html,←⊂'                render: function ( data, type, row, meta ) {'
html,←⊂'                            return data+"%" ;        '
html,←⊂'                        },'
html,←⊂'                targets: 2'
html,←⊂'            }'
html,←⊂'        ]             '
html,←⊂'    } );'
html,←⊂'    oTable.button(0).trigger();'
html,←⊂''
html,←⊂'} );    '
html,←⊂'</script>'
⍝Done
html←AddJavaScriptButton(caption percent noOf search)
html←''
html,←⊂'        {'
html,←⊂'            text: "',caption,' (',(⍕noOf),')",'
html,←⊂'            titleAttr: "',percent,'",'
html,←⊂'            className: "active",'
html,←⊂'            action: function ( e, dt, node, config ) {'
html,←⊂'                var text = this.text();'
html,←⊂'                var search = "',search,'";'
html,←⊂'                oTable.column(2)'
html,←⊂'                    .search(search,true,false,false)'
html,←⊂'                    .draw();'
html,←⊂'                $(".dt-buttons button").removeClass("active");'
html,←⊂'                this.active( true );'
html,←⊂'            }'
html,←⊂'        },'
⍝Done
AddSpecialMessage←{
⍝ Useful for adding a general message to ALL HTML pages right after the <h1> in case the INI file says so.
0=≢∊msg←⊆⊃G.INI.Get'MSG:Text':''
css←⊃G.INI.Get'MSG:CSS'
style←{0=≢⍵:⍵ ⋄ 'style="',⍵,'"'}css
style∘{'<div class="noprint" ',⍺,'><p>',⍵,'</p></div>'}¨msg
}
r←CR
r←⎕UCS 13
r←{colTitles}CalcTableWidth data
:If 0=⎕NC'colTitles'
r←{(≢⍵)++/⍵}⌈⌿≢¨data
:Else
r←+/⌈⌿((+/≢¨colTitles))⍪≢¨data
:EndIf
response←ChangeGroupHomepage request;groupName;folder;dcfFilename;dcfTie;markdown;email
groupName←request R.GetQueryParameter'change-group-homepage'
folder←'expand'F.NormalizePath G.HTDOCS,'/../Groups/'
dcfFilename←folder,groupName,'.dcf'
dcfTie←dcfFilename ⎕FSTIE 0
:If groupName≡⎕FREAD dcfTie 2
markdown←⎕FREAD dcfTie 3
email←⎕FREAD dcfTie 4
⎕FUNTIE dcfTie
response←(markdown email)EditGroupHomepage groupName request
:Else
response←request RespondWithHTML 500 ⍝ Must not happen
:EndIf
response←request CheckForExistence packageIDs;ns;json
⍝ Returns a Booleans for every packageID; 1 = hosted on this Registry
ns←⎕NS''
packageIDs←','A.Split packageIDs
ns.exist←F.IsDir G.RegistryPath∘,¨packageIDs
json←Reg.JSON ns
response←R.NewResponse request
response.Content←json
⍝Done
parms←CheckServerParms parms
⍝ Add Tatin-specific stuff
parms.Log←P.G.INI.Get'LOGGING:Log'
parms.LogFolder←P.G.INI.Get'LOGGING:Folder'
⍝Done
msg←CheckTatinVersion request;minimum;minor;major;clientVersion;clientMajor;clientMinor;clientVersion_;majorServVersion
⍝ ## If the current (server) major version is 0
⍝ Checks whether the Tatin version used on the client matches the minimum version defined
⍝ in the INI (if any) and rejects the request as 400 (bad request) if not.\\
⍝ The INI entry might or might not exist but if it does it must be a number with one of:
⍝ * a major number (integer)
⍝ * major.minor number (real)
⍝ ## If the current (server) major version is greater than 0:
⍝ The request must have a major version number that matches the server's major version number.\\
⍝ The INI entry might or might not exist; if it does it is dealt with in the same way as
⍝ documented above.
msg←''
clientVersion←request R.GetHeaderValue'x-tatin'
:If 0<≢clientVersion                               ⍝ Empty? Browser request!
:If G.INI.Exist'Config:MinimumTatinVersion'
minimum←⊃0 G.INI.Get'Config:MinimumTatinVersion'
:Else
minimum←'0.0.0'
:EndIf
msg←minimum CheckTatinVersion_ clientVersion
:EndIf
⍝Done
msg←minimum CheckTatinVersion_ clientVersion;minor;major;clientVersion;clientMajor;clientMinor;majorServerVersion;patch;clientPatch;flag
⍝ This is a sub-function of `CheckTatinVersion` without independent value.
msg←''
flag←0
clientVersion←{⍵↑⍨+/∧\⍵∊⎕D,'.'}clientVersion  ⍝ Remove stuff like "beta-1" or "-rc-1" etc
(clientMajor clientMinor clientPatch)←⊃∘A.ToNum¨3↑{'.'(≠⊆⊢)⍵}clientVersion
majorServerVersion←A.ToNum{⍵↑⍨¯1+⍵⍳'.'}2⊃Reg.Version
:If clientMajor<majorServerVersion
flag←1
:ElseIf 0≠≢minimum
(major minor patch)←3↑⊃¨A.ToNum¨3↑{'.'(≠⊆⊢)⍵}minimum
:If clientMajor≠major
:OrIf clientMinor<minor
:OrIf (clientMinor=minor)∧patch>clientPatch
flag←1
:EndIf
:EndIf
:If flag
msg←'Request came from an outdated version of Tatin. Please update your Tatin client.'
:EndIf
⍝Done
credentials←credentials ConvertCredentials newCredentials;i;group;apiKey;salt;hash
⍝ Converts API-keys in `newCredentials` into hashes and adds a Salt along the way.
⍝ Eventually merges `credentials` and `newCredentials`.
:If 0<≢newCredentials
:For i :In ⍳≢newCredentials
(group apiKey salt)←3↑' '~⍨¨newCredentials[i;]
:If 0=≢apiKey
newCredentials[i;]←group'' ''
:Else
salt←HashPasswords.CreateSalt 10
hash←HashPasswords.Hash salt,apiKey
newCredentials[i;]←group hash salt
:EndIf
:EndFor
:If 0=≢credentials
credentials←newCredentials
:Else
credentials←(~credentials[;1]∊newCredentials[;1])⌿credentials
credentials⍪←newCredentials
:EndIf
:EndIf
CopyDependencies
:If 0=##.⎕NC'CiderConfig'
'RumbaLean' 'Plodder'##.⎕CY'./Assets/Runtime/Plodder/Plodder.dws'
:Else
'RumbaLean' 'Plodder'##.⎕CY ##.CiderConfig.HOME,'/Assets/Runtime/Plodder/Plodder.dws'
:EndIf
new←path CorrectPkgName old;list;list_lc;bool
⍝ Translates package name to the correct spelling in terms of lowercase/uppercase
list←,Reg.GetAllPackages path
list_lc←⎕C list
bool←list_lc≡¨⊂⎕C old
:If 0=+/bool
new←''
:Else
new←(bool⍳1)⊃list
:EndIf
CreateAllRefs
Reg←##.Registry
Reg.(A F OS ZipArchive)←##.(APLTreeUtils2 FilesAndDirs OS ZipArchive)
(A F OS R ZipArchive)←##.(APLTreeUtils2 FilesAndDirs OS RumbaLean.Core ZipArchive)
HashPasswords.APLTreeUtils2←A
HashPasswords.FilesAndDirs←F
response←CreateDocumentationIndex request;html;specialMsg;html2;offset;length;sf;options;html3;filename;h1;h2
⍝ Creates the "Tatin Documentation Center" page
html←HtmlHeader''
filename←StaticFolder,'docs/_ReadMe.html'
html2←⊃F.NGET filename 1
h1←{row←1⍳⍨∨/¨'<h1 '∘⍷¨⍵ ⋄ row⊃⍵}html2
offset←¯1+{1⍳⍨∨/¨'<div class="h_tag">'∘⍷¨⍵}html2
length←{1⍳⍨∨/¨'</div>'∘⍷¨⍵}offset↓html2
html2←(length+offset)↓html2
html2←(¯1+html2⍳⊂'</body>')↑html2
h2←'<h2',(3↓¯3↓h1),'h2>'
html2←1↓⊃,/(⎕UCS 13),¨(⊂h2),(AddSpecialMessage ⍬),html2
sf←'<div[^>]*>\r<a[^>]*>\r(<h3[^>]*>[^<]*<\/h3>)\r</a>\r</div>'  ⍝ sf = search for
options←('Greedy' 0)('Mode' 'D')('DotAll' 1)
html2←sf ⎕R'\1'⍠options⊣html2
sf←'(<a href="./)'
html2←sf ⎕R('\1',StaticFolder,'/docs/')⍠options⊣html2
sf←'( title=")([^"]*)"'
html2←sf ⎕R'\1Opens \2 in a new Tab" target="_blank" rel=noopener'⍠options⊣html2
html2←(⎕UCS 13)A.Split html2
html,←html2
html,←GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
response←request ReturnHTML html
⍝Done
response←CreateGroupHomepage request;groupName;folder;markdown;email
:If 0=≢groupName←request R.GetQueryParameter'name'
groupName←request R.GetQueryParameter'change-group-homepage'
:EndIf
folder←'expand'F.NormalizePath G.HTDOCS,'/../Groups/'
response←EditGroupHomepage groupName request
⍝Done
response←CreateHomePage request;html;policy;add;regInfo
⍝ Creates the index.html
⍝ https://tatin.dev/Assets/docs/InstallingAndUpdatingTheTatinClient.html
add←''
html←HtmlHeader add
html,←⊂'<h2>Main page</h2>'
html,←AddSpecialMessage ⍬
html,←⊂'<p>This is the Tatin Registry. It holds packages designed to be used under Dyalog APL.</p>'
html,←⊂'<div class="install-info">'
html,←⊂'<h3>The Tatin Client</h3>'
html,←⊂'<hr>'
html,←⊂'<ul>'
html,←⊂'<li>How to <a href="./',StaticFolder,'docs/InstallingAndUpdatingTheTatinClient.html" target="_blank" rel=noopener>install</a></li>'
html,←⊂'<li>How to <a href="https://tatin.dev/Assets/docs/InstallingAndUpdatingTheTatinClient.html#updating-tatin" target="_blank" rel=noopener>update</a></li>'
html,←⊂'</ul>'
html,←⊂'</div>'
html,←⊂'<nav>'
html,←⊂'<ol>'
regInfo←GetRegistryInfo G.INI
html,←⊂'<li><a href="',Reg.VersionOf_REST,'/packages">',regInfo,'Packages</a></li>'
html,←⊂'<li><a href="',Reg.VersionOf_REST,'/deprecated-pkgs">',regInfo,'Deprecated packages</a></li>'
html,←⊂'<li><a href="',Reg.VersionOf_REST,'/groups">',regInfo,'Groups</a></li>'
html,←⊂'<li><a href="',Reg.VersionOf_REST,'/tags">',regInfo,'Tags</a></li>'
html,←⊂'<li><a href="',Reg.VersionOf_REST,'/documentation">Documentation Center</a></li>'
html,←⊂'<li><a href="',Reg.VersionOf_REST,'/credential-report">',regInfo,'Credential report</a></li>'
html,←⊂'<li><a href="',Reg.VersionOf_REST,'/usage-data">',regInfo,'Usage data</a></li>'
:If G.INI.Exist'LICENSE:names'
:AndIf 0<≢⊃G.INI.Get'LICENSE:names'
html,←⊂'<li><a href="',Reg.VersionOf_REST,'/get-licenses">Licensing</a></li>'
:EndIf
html,←⊂'<li><a href="',Reg.VersionOf_REST,'/version-information">',regInfo,'Version information</a></li>'
html,←⊂'</ol>'
html,←⊂'</nav>'
:Select GetDeletePolicy
:Case 'Any'
policy←'This server operates a "delete any" policy: you may delete <b>any</b> package with fitting credentials.'
:Case 'None'
policy←'This server operates a "delete none" policy: once published, packages cannot be deleted.'
:Case 'JustBetas'
policy←'This server operates a "delete betas only" policy: you may delete <b>only</b> beta packages with fitting credentials.'
:EndSelect
html,←⊂'<p>',policy,'</p>'
html,←GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
response←request ReturnHTML html
⍝Done
response←DeletePackages request;b;deletePolicy;msg;msgs;noOfFailures;noOfOkay;okay;packageID;packageIDs;rc;regPath;statusCodes;⎕TRAP;packageID_
⍝ Delete one or more packages.\\
⍝ Whether deleting a package is an option is determined by the INI setting [CONFIG]DeletePackages
⍝ which is returned by `GetDeletePolicy` as a text vector.
deletePolicy←GetDeletePolicy
packageIDs←{','∊⍵:','(≠⊆⊢)⍵ ⋄ ⊆⍵}request.RequestTarget
:If 'None'≡deletePolicy
response←request Respond 405
response.Content←'This server does not allow deleting packages'
:ElseIf ~∧/b←Reg.IsValidPackageID_Complete¨packageIDs
response←request Respond 400
response.Content←'Invalid package ID(s): ',⊃{⍺,', ',⍵}/(~b)/packageIDs
:Else
statusCodes←msgs←''
regPath←Reg.AddSlash G.RegistryPath
:For packageID :In packageIDs
:If 0=≢packageID_←regPath CorrectPkgName packageID
statusCodes,←404
msgs,←⊂'Package not found: ',packageID
:Else
:If 'JustBetas'≢deletePolicy
:OrIf Reg.IsBeta packageID_
:If 0=≢msg←Reg.DeletePackage regPath,packageID_
statusCodes,←200
msgs,←⊂''
:Else
statusCodes,←400
msgs,←⊂msg
:EndIf
:Else
statusCodes,←405
msgs,←⊂'Not a beta version but the server policies allows deletion of betas only'
:EndIf
:EndIf
:EndFor
okay←200=statusCodes
:If ∨/okay
(rc msg)←Emails.SendMail_DeletedPkg G.INI(okay/packageIDs)
:If rc≠0
P.AppLog⊆'*** Error'
P.AppLog⊆'Sending email to gatekeeper with notification of a deleted package failed: ',(⍕∊rc)
:EndIf
:EndIf
:If ∧/okay
response←request Respond 200
response.Content←'Package',((1<≢msgs)/'s'),' deleted'
:Else
response←request Respond⌈/statusCodes
noOfOkay←statusCodes+.=200
noOfFailures←statusCodes+.≠200
msg←¯2↓⊃,/{(1⊃⍵),': ',(⍕2⊃⍵),' (',(3⊃⍵),'); '}¨↓⍉↑(~okay)∘/¨packageIDs statusCodes msgs
response.Content←(⍕noOfOkay),' package',((1≠noOfOkay)/'s'),' successesfully deleted. Failure',((1≠noOfFailures)/'s'),': ',msg
:EndIf
:EndIf
⍝Done
response←Deprecate request;packageID;bestVersions;group;package;versions;savedVersions;tempFolder;bestMajorVersions;cfgFilename;newCfgFilename;folder;newZipFilename;Z
;data;json;newFolder;version;bool;report;rcs;multiples;zipFilename
⍝ `packageIDs` must be a simple character vector with a group name, a package name and optionally a major version number.
⍝ Examples:
⍝ group-package
⍝ group-package-1
⍝ The function creates a new version by copying the last version and carrying out the following actions:
⍝  * Set the patch number to 0
⍝  * Increase the minor version number
⍝  * Inject the `deprecated` property with the value 1 into the config file
⍝  * Assign `deprecateComment` to the config file if passed on
⍝  * Enforce compilation of the Registry's internal data
⍝  * Update the ZIP file
⍝ If no major version number is specified then the aforementioned actions are carried out for all major versions of the given package.
packageID←{1↓⍵↑⍨-'/'⍳⍨⌽⍵}request.Path
(group package versions)←3↑'-'(≠⊆⊢)packageID,'-*'
:If 0=≢savedVersions←Reg.ListVersions G.RegistryPath,group,'-',package
response←request Respond 404 0
response.Content←'Package not found'
:Else
bestVersions←{⍵{⍺[(⍳≢⍵){∪⍺[⍵⍳⍵]}⍵]}⌽Reg.RemoveMinorAndPatch¨⍵}{⌽⍵[Reg.SortIndexForPackageIDs G.RegistryPath∘,¨⍵]}savedVersions
bestMajorVersions←Reg.RemoveMinorAndPatch¨bestVersions
tempFolder←(F.GetTempSubDir'Tatin'),'/'
:If multiples←(,'*')≡,versions
versions←Reg.RemoveMinorAndPatch¨bestVersions
:Else
versions←⊆packageID
:EndIf
report←''
rcs←⍬
:For version :In versions
:If ~(⊂version)∊bestMajorVersions
response←request Respond 404 0
response.Content←'Package not found'
F.RmDir tempFolder
:Return
:EndIf
folder←(bestMajorVersions⍳⊂version)⊃bestVersions
'Create!'F.CheckPath tempFolder
tempFolder ⎕NCOPY G.RegistryPath,folder
cfgFilename←G.RegistryPath,folder,'/',Reg.CFG_Name
newCfgFilename←tempFolder,folder,'/',Reg.CFG_Name
data←Reg.APLfromJSON⊃F.NGET newCfgFilename
:If 0=data.⎕NC'deprecated'
:OrIf ~data.deprecated
data.deprecated←1
data.date←60 ⎕DT⊂⎕TS
data.deprecateComment←request.Content
data.version←ElevateMinorVersionNumber data.version
json←Reg.JSON data
(⊂json)F.NPUT newCfgFilename 1
newFolder←data.version{(⍵/⍨2>+\⍵='-'),'-',⍺}folder
zipFilename←⊃⊃F.Dir tempFolder,folder,'/*.zip'
newZipFilename←tempFolder,folder,'/',newFolder,'.zip'
newZipFilename(⎕NMOVE Reg.F.ExecNfunction)zipFilename
Z←⎕NEW ZipArchive(,⊂newZipFilename)
Z.Delete Reg.CFG_Name
(tempFolder,folder)Z.Add Reg.CFG_Name
Z.Dispose
(G.RegistryPath,newFolder)(⎕NMOVE Reg.F.ExecNfunction)tempFolder,folder
report,←'Deprecated: ',data.group,'-',data.name,'-',data.version,CR
rcs,←200
:ElseIf ~multiples
response←request Respond 400
response.Content←'Package was already deprecated'
F.RmDir tempFolder
:Return
:EndIf
:EndFor
:If rcs∧.=200
response←request Respond 200
:Else
response←request Respond 400
:If 200∊rcs
report,←'ATTENTION: deprecation was partly successful'
:EndIf
:EndIf
response.Content←report
F.RmDir tempFolder
:EndIf
⍝Done
response←EditGroupHomepage request;html;row;groupName;folder;parms;data
:If 0=≢groupName←request R.GetQueryParameter'name'
response←request RespondWithHTML 400 'Invalid Request: no group name specified'
:Else
response←R.NewResponse request
data←'' ''
:If request.Path≡'/',GetVersion_REST'group-homepage-edit'
:AndIf 0=≢data←{⍵[;2]}Reg.GetGroupData G.RegistryPath groupName
data←'' ''
:EndIf
folder←G.HTDOCS,'../Groups/'
'Create!'F.CheckPath folder
html←data EditGroupHomepage_ groupName
response←request ReturnHTML html
:EndIf
⍝Done
html←data EditGroupHomepage_ groupName;html;parms;markdown;email
(markdown email)←data
html←HtmlHeader''
html,←⊂'<h2>Group home page of "',groupName,'"</h2>'
html,←⊆AddSpecialMessage''
html,←⊂'<form id="create-group-homepage" action="','group-homepage-save">'
html,←⊂'content'H.Label'Content (<a href="https://download.aplteam.com/MarkAPL_CheatSheet.html" target="_blank" rel=noopener>Markdown</a>):'
html,←⊂H.BR
html,←⊂'<textarea name="content" id="content" rows="15" placeholder="your markdown" autofocus required spellcheck="true" lang="en">'
html,←⊆markdown
html,←⊂'</textarea>'
html,←⊂H.BR
html,←⊂H.BR
html,←⊂'email'H.Label'Single email address:'
html,←⊂H.BR
parms←⎕NS''
parms.(id name type placeholder value)←'email' 'email' 'email' 'your.name@email.address'email
html,←⊂'required'H.Input parms
html,←⊂H.BR
:If 0<≢G.Credentials
html,←⊂'api-key'H.Label'API key:'
html,←⊂H.BR
parms←⎕NS''
parms.(id name type placeholder)←'api-key' 'api-key' 'password' 'Password (API-key)'
html,←⊂'required'H.Input parms
html,←⊂H.BR
:EndIf
parms←⎕NS''
parms.(id name type value style readonly)←'group' 'group' 'text'groupName'display:none;' 'readonly'
html,←⊂H.Input parms
html,←⊂H.BR
⍝ This is used to tell the server what this is all about. That allows the server to determine that
⍝ the content must be massaged in a specific way.
parms←⎕NS''
parms.(id name type value style readonly)←'sgh' 'sgh' 'text' 'save-group-homepage' 'display:none;' 'readonly'
html,←⊂H.Input parms
html,←⊂H.BR
html,←⊂'<input id="submit-homepage" formmethod="post" class="button" value="Save" type="submit">'
html,←⊂'</form>'
html,←⊆GetFooter
html,←⊂'<script>'
html,←⊂'//set focus on input'
html,←⊂'$(''input[name=content]'').focus();'
html,←⊂'</script>'
html,←⊂'</body>'
html,←⊂'</html>'
⍝Done
r←ElevateMinorVersionNumber no
r←(⌊/¯1+no⍳'+- ')↑no               ⍝ Get rid of stuff like build number, beta, rc-1 etc, leaving just major/minor/patch
r←A.ToNum¨'.'(≠⊆⊢)r
(3⊃r)←0                            ⍝ Reset patch number
(2⊃r)+←1                           ⍝ Increase the minor number
r←⊃{⍺,'.',⍵}/⍕¨r
⍝Done
(rc msg)←{add}SendCrashMail INI;parms;myConnection;mailParms;convert;domain;rc;msg;log;folder;list;filename;S
⍝ The idea is to have a GMail address dedicated for http://[test].tatin.dev
⍝ but we use this only to logon the Google's SMTP server: the address is not monitored.
⍝ The real consignees are listed as "To". That way we don't have to be particularly
⍝ concerned regarding the password.
⍝ You may add additional information to the standard crash email by passing `add`.
⍝ This must be a simple character vector.
msg←'' ⋄ rc←0
:If INI.Get'EMAIL:active'
add←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'add'
'⍺ must be a simplem character vector'##.Reg.Assert(⎕DR add)∊80 160
S←##.##.SMTP
convert←{0=≢⍵:⍵ ⋄ ⊃{⍺,',',⍵}/⊆⍵}
parms←⎕NEW S.ConnectionParameters
parms.Server←⊃INI.Get'EMAIL:SMTP_Server'
parms.Port←⊃INI.Get'EMAIL:Port'
parms.Userid←⊃INI.Get'EMAIL:To'
parms.Password←⊃INI.Get'EMAIL:Password'
myConnection←⎕NEW S.Connection(,⊂parms)
mailParms←⎕NEW S.MailParameters
mailParms.From←'do-not-reply@tatin.dev'
mailParms.To←⊃INI.Get'EMAIL:To'
mailParms.CC←convert⊃INI.Get'EMAIL:CC'
domain←⊃INI.Get'EMAIL:Domain'
mailParms.Subject←domain,' has crashed'
mailParms.Body←⊃INI.Get'EMAIL:Body'
mailParms.Body←'<DOMAIN>'⎕R domain⊣mailParms.Body
:If 0<≢add
mailParms.Body,←⊆add
:EndIf
mailParms.Body,←⎕UCS 13 10
folder←⊃INI.Get'TRAP:Folder'
:If 0<≢list←##.F.ListFiles folder,'*.html'
filename←⊃¯1↑list
mailParms.AddAttachment filename'text/html'
:EndIf
(rc msg log)←myConnection.Send mailParms
:If 0=rc
msg←'Email was sent successfully'
:Else
msg←'Failed with rc=',(⍕rc),'; ',¯1↓(⊆msg),¨⎕UCS 13
:EndIf
:EndIf
⍝Done
(rc msg)←SendMail_DeletedPkg(INI ID);parms;myConnection;mailParms;convert;domain;rc;msg;log;S;gatekeeper
⍝ The idea is to have a GMail address dedicated for http://[test].tatin.dev
⍝ but we use this only to logon the Google's SMTP server: the address is not monitored.
⍝ The real consignees are listed as "To". That way we don't have to be particularly
⍝ concerned regarding the password.
rc←0 ⋄ msg←''
:If INI.Get'EMAIL:active'
:AndIf INI.Exist'EMAIL:gatekeeper'
:AndIf 0<≢gatekeeper←⊃INI.Get'EMAIL:gatekeeper'
S←##.##.SMTP
convert←{0=≢⍵:⍵ ⋄ ⊃{⍺,',',⍵}/⊆⍵}
parms←⎕NEW S.ConnectionParameters
parms.Server←⊃INI.Get'EMAIL:SMTP_Server'
parms.Port←⊃INI.Get'EMAIL:Port'
parms.Userid←⊃INI.Get'EMAIL:To'
parms.Password←⊃INI.Get'EMAIL:Password'
myConnection←⎕NEW S.Connection(,⊂parms)
mailParms←⎕NEW S.MailParameters
mailParms.From←'do-not-reply@tatin.dev'
mailParms.To←⊃INI.Get'EMAIL:To'
mailParms.CC←convert gatekeeper
domain←⊃INI.Get'EMAIL:Domain'
mailParms.Subject←(⍕≢ID),' package got deleted on ',domain
mailParms.Body←(⊃{⍺,(⎕UCS 13),⍵}/ID),⎕UCS 13 10
(rc msg log)←myConnection.Send mailParms
:If 0=rc
msg←'Email was sent successfully'
:Else
msg←'Failed with rc=',(⍕rc),'; ',¯1↓(⊆msg),¨⎕UCS 13
:EndIf
:EndIf
⍝Done
(rc msg)←SendMail_PublishedPkg(INI ID regPath);cfg;parms;myConnection;mailParms;convert;domain;rc;msg;log;S;gatekeeper
⍝ The idea is to have a GMail address dedicated for http://[test].tatin.dev
⍝ but we use this only to logon the Google's SMTP server: the address is not monitored.
⍝ The real consignees are listed as "To". That way we don't have to be particularly
⍝ concerned regarding the password.
rc←0 ⋄ msg←''
:If INI.Get'EMAIL:active'
:AndIf INI.Exist'EMAIL:gatekeeper'
:AndIf 0<≢gatekeeper←⊃INI.Get'EMAIL:gatekeeper'
cfg←⊃##.F.NGET regPath,ID,'\',##.Reg.CFG_Name
S←##.##.SMTP
convert←{0=≢⍵:⍵ ⋄ ⊃{⍺,',',⍵}/⊆⍵}
parms←⎕NEW S.ConnectionParameters
parms.Server←⊃INI.Get'EMAIL:SMTP_Server'
parms.Port←⊃INI.Get'EMAIL:Port'
parms.Userid←⊃INI.Get'EMAIL:To'
parms.Password←⊃INI.Get'EMAIL:Password'
myConnection←⎕NEW S.Connection(,⊂parms)
mailParms←⎕NEW S.MailParameters
mailParms.From←'do-not-reply@tatin.dev'
mailParms.To←⊃INI.Get'EMAIL:To'
mailParms.CC←convert gatekeeper
domain←⊃INI.Get'EMAIL:Domain'
mailParms.Subject←'Package was published on ',domain,': ',ID
mailParms.Body←cfg
mailParms.Body,←⎕UCS 13 10
(rc msg log)←myConnection.Send mailParms
:If 0=rc
msg←'Email was sent successfully'
:Else
msg←'Failed with rc=',(⍕rc),'; ',¯1↓(⊆msg),¨⎕UCS 13
:EndIf
:EndIf
⍝Done
EscapeSpecialChars←{
'<'⎕R'\&lt;'⊣'>'⎕R'\&gt;'⊣'\&'⎕R'&amp;'⊣⍵
}
r←EstablishGroup name;list
r←''
:If 0<≢list←(≢G.RegistryPath)↓¨F.ListDirs G.RegistryPath
:AndIf 0<≢list←(∨/¨('-',(⎕c name),'-')∘⍷¨⎕c list)/list
r←¯1↓¨∪{⍵↑⍨⍵⍳'-'}¨list
:EndIf
⍝Done
{r}←ExecuteMaintenanceCode G;list;codeFile;ref;body;function;pkgFolderList;path;qdmx
⍝ Maintenance code can be executed by putting an .aplf file into a folder `INI:Config:MaintenancePath'.\\
⍝ All those functions are executed once: after the first execution the text file is
⍝ renamed by adding an extension `.executed`.\\
⍝ The main purpose of this feature is to be able to polish anything in package config files, particularly tags.\\
⍝ Note that when this function finds both "foo.aplf" and "foo.aplf.executed" then it will not execute "foo.aplf".\\
r←⍬
:If 0<≢path←⊃G.INI.Get'Config:MaintenancePath'
:AndIf ⎕NEXISTS path
:AndIf 0<≢list←⊃F.Dir path,'/*.aplf'
:For codeFile :In list
:If ~⎕NEXISTS codeFile,'.executed' ⍝ In case a new version brings along a maintenance file that has already been executed
ref←⎕NS''
body←⊃F.NGET codeFile 1
Reg.Assert' '=1↑0⍴ref.⎕FX body
function←ref.⍎⊃↓ref.⎕NL 3
pkgFolderList←,Reg.GetAllPackages G.RegistryPath
:Trap 0
G.RegistryPath(function ##.Admin.LoopThrough)pkgFolderList
(codeFile,'.executed')(⎕NMOVE Reg.F.ExecNfunction)codeFile
:Else
qdmx←⎕DMX
('Culprit was the maintenance file ',⊃,/1↓⎕NPARTS codeFile)SendCrashMail ⍬
(codeFile,'.crashed')(⎕NMOVE Reg.F.ExecNfunction)codeFile
:EndTrap
:EndIf
:EndFor
:EndIf
r←FetchBackground ini;backgroundColor;text
⍝ The INI file section [HTMLBACKGROUND] rules how the background should like this.\\
⍝ * For production servers we expect "colour" to be set and used for the <body> tag.
⍝ * You may add a text as watermark for indicating the purpose of a Tatin server.
⍝   On https://test.tatin.dev this is used to display "Tatin Test Server" for example.
r←''
r,←⊂'<style>'
:If ini.Exist'HTMLBACKGROUND:color'
backgroundColor←⊃ini.Get'HTMLBACKGROUND:color'
:AndIf 0<≢backgroundColor
r,←⊂'body {'
r,←⊂'background-color: ',backgroundColor,');'
r,←'}'
:EndIf
:If ini.Exist'HTMLBACKGROUND:watermark'
text←⊃ini.Get'HTMLBACKGROUND:watermark'
((''''=text)/text)←'`'   ⍝ body:before does not show quotes in 2022-11
:AndIf 0<≢text
r,←⊂' body:before{'
r,←⊂'  content: ''',text,''';'
r,←⊂'  position: fixed;'
r,←⊂'  top: 0;'
r,←⊂'  bottom: 0;'
r,←⊂'  left: 0;'
r,←⊂'  right: 0;'
r,←⊂'  z-index: -1;'
r,←⊂'  color: #FFADAD;'
r,←⊂'  font-size: 100px;'
r,←⊂'  font-weight: 500;'
r,←⊂'  display: grid;'
r,←⊂'  justify-content: center;'
r,←⊂'  align-content: center;'
r,←⊂'  opacity: 0.2;'
r,←⊂'  transform: rotate(-45deg);'
r,←⊂'}'
:EndIf
r,←⊂'</style>'
⍝Done
response←request FetchPackage packageID;list;ind;packageID_
:If Reg.IsValidPackageID_Complete packageID
list←1 Reg.Index.GetRegistryIndex G.RegistryPath
ind←(⎕C list)⍳⊂⎕C packageID
:If ind≤≢list
packageID_←ind⊃list
response←R.NewResponse request
:If 1≠≢list←F.ListFiles G.RegistryPath,'/',packageID_,'/',packageID_,'*.zip'
⍝ Whether we find none or more than one, something is seriously wrong then
response←request RespondWithHTML 500
:Else
response.IsFile←1
response.FilePath←⊃list
response.ContentType←'application/zip'
:EndIf
:Else
response←request RespondWithHTML 404
:EndIf
:Else
response←request RespondWithHTML 404
:EndIf
⍝Done
txt←FormatFloatDate val
txt←Reg.FormatFloatDate val
deps←known GetAllDependencies deps;list;deps2
⍝ Fetches all dependencies recursively
:If 0<≢deps
list←G.RegistryPath∘,¨deps,¨⊂'/',Reg.DependenciesFilename
:AndIf 0<≢list←(F.IsFile list)/list
:AndIf 0<≢deps2←∪⊃,/{⊃F.NGET ⍵ 1}¨list
:AndIf 0<≢deps2←deps2~known
:AndIf 0<≢deps2←deps2~deps
deps,←deps2
:AndIf 0<≢deps2←deps GetAllDependencies deps2
deps←∪deps,deps2
:EndIf
⍝Done
response←request GetBestVersionNumber packageID;bestVersion;ns;group;noBetas
⍝ `path` is fully qualified. The packageID part might have just a major version no. or no version number info at all
:If Reg.IsValidPackageName packageID
:If 0<≢group←EstablishGroup packageID
:If 1=≢group
packageID←(1⊃group),'-',packageID
:Else
response←request Respond 400
response.Content←'The package <',packageID,'> exists in multiple groups: ',⊃{⍺,',',⍵}/group
:Return
:EndIf
:Else
response←'Package not found'Return404 request
:If 200≠response.StatusCode
:Return
:EndIf
:EndIf
:EndIf
:If 0=≢noBetas←request R.GetHeaderValue'include-betas'
noBetas←Reg.GetNoBetasDefault
:Else
noBetas←~noBetas∊'yY'
:EndIf
bestVersion←(≢G.RegistryPath)↓noBetas Reg.GetBestVersionNumber G.RegistryPath,packageID
:If 0<≢bestVersion
ns←⎕NS''
ns.BestVersion←bestVersion
response←request ReturnJSON Reg.JSON ns
:Else
response←'Package not found'Return404 request
:EndIf
⍝Done
r←GetCredentialReport(groupNames apiKeys);ind;credentials;b1;b2;b3;p;c;l
⍝ Returns a report on credentials
r←''
p←{'<p>',⍵,'</p>'}
c←{'<code>',⍵,'</code>'}
l←{'<li>',⍵,'</li>'}
:If 0=≢groupNames
r,←⊂p'Anybody can publish anything.'
:Else
b1←(,'*')∘≡¨,¨groupNames~¨'='
b2←0=≢¨apiKeys~¨' '
:If ∨/~b1
:If ∨/b3←(~b1)∧b2
r,←⊂p'These groups do <b>not</b> require an API key:'
r,←⊂'<ul>'
r,←l∘c¨b3/groupNames
r,←⊂'</ul>'
:EndIf
:If ∨/~b2
b3←(,'*')∘≢¨,¨(~b2)/groupNames
:AndIf ∨/b3
:If 0=+/b1,b2
r,←⊂p'All groups require a specific API key.'
:Else
r,←⊂p'These groups require a specific API key:'
r,←⊂'<ul>'
r,←l∘c¨{⍵↑⍨¯1+⌊/⍵⍳',='}¨b3/(~b2)/groupNames
r,←⊂'</ul>'
:EndIf
:EndIf
:EndIf
:If ∨/b1
:If ∨/b2
:If 0=≢r
r,←⊂p'Anybody can publish anything.'
:Else
r,←⊂p'Anybody can publish any other group.'
:EndIf
:Else
:If 0=≢r
r,←⊂p'All groups require an API key.'
:Else
r,←⊂p'All other groups require a generic API key.'
:EndIf
:EndIf
:EndIf
:EndIf
r←GetCssForUsageDataPage
r←''
r,←⊂'<style>'
r,←⊂'.tab {'
r,←⊂'  overflow: hidden;'
r,←⊂'  border: 1px solid #ccc;'
r,←⊂'  background-color: #f1f1f1;'
r,←⊂'}'
r,←⊂''
r,←⊂'/* Style the buttons that are used to open the tab content */'
r,←⊂'.tab button {'
r,←⊂'  background-color: inherit;'
r,←⊂'  float: left;'
r,←⊂'  border: none;'
r,←⊂'  outline: none;'
r,←⊂'  cursor: pointer;'
r,←⊂'  padding: 14px 16px;'
r,←⊂'  transition: 0.3s;'
r,←⊂'  font-size: 1em;'
r,←⊂'}'
r,←⊂''
r,←⊂'/* Change background color of buttons on hover */'
r,←⊂'.tab button:hover {'
r,←⊂'  background-color: #ddd;'
r,←⊂'}'
r,←⊂''
r,←⊂'.tab button.active {'
r,←⊂'  background-color: #ccc;'
r,←⊂'}'
r,←⊂''
r,←⊂'/* Style the tab content */'
r,←⊂'.tabcontent {'
r,←⊂'  display: none;'
r,←⊂'  padding: 6px 12px;'
r,←⊂'  border: 1px solid #ccc;'
r,←⊂'  border-top: none;'
r,←⊂'} '
r,←⊂'#data-table { '
r,←⊂'  font-size: large; '
r,←⊂'  font-weight: normal; '
r,←⊂'  font-family: monospace; '
r,←⊂'} '
r,←⊂'</style>'
r←GetDataTableStuff dummy
⍝ All the stuff (links, Fonts, CSS, ...) that is required for using the DataTables extension is returned by this function.
r←''
r,←⊂'<link rel="stylesheet" type="text/css" href="chrome-extension://hldllnfgjbablcfcdcjldbbfopmohnda/content_scripts.css">'
r,←⊂'<style>'
r,←⊂'@font-face{'
r,←⊂'font-family: ''Circular'';'
r,←⊂'font-weight: 400;'
r,←⊂'src: url(chrome-extension://mfidniedemcgceagapgdekdbmanojomk/font/Circular-Pro-Black-Regular.eot);'
r,←⊂'src: url(chrome-extension://mfidniedemcgceagapgdekdbmanojomk/font/Circular-Pro-Black-Regular.eot?#iefix) format(''embedded-opentype''),'
r,←⊂'url(chrome-extension://mfidniedemcgceagapgdekdbmanojomk/font/Circular-Pro-Black-Regular.woff2) format(''woff2''),'
r,←⊂'url(chrome-extension://mfidniedemcgceagapgdekdbmanojomk/font/Circular-Pro-Black-Regular.woff) format(''woff''),'
r,←⊂'url(chrome-extension://mfidniedemcgceagapgdekdbmanojomk/font/Circular-Pro-Black-Regular.ttf) format(''truetype''),'
r,←⊂'url(chrome-extension://mfidniedemcgceagapgdekdbmanojomk/font/Circular-Pro-Black-Regular.svg) format(''svg'');'
r,←⊂'}'
r,←⊂'@font-face{'
r,←⊂'font-family: ''Circular''; '
r,←⊂'font-weight: 700;'
r,←⊂'src: url(chrome-extension://mfidniedemcgceagapgdekdbmanojomk/font/Circular-Pro-Black-Bold.eot);'
r,←⊂'src: url(chrome-extension://mfidniedemcgceagapgdekdbmanojomk/font/Circular-Pro-Black-Bold.eot?#iefix) format(''embedded-opentype''),'
r,←⊂'url(chrome-extension://mfidniedemcgceagapgdekdbmanojomk/font/Circular-Pro-Black-Bold.woff2) format(''woff2''),'
r,←⊂'url(chrome-extension://mfidniedemcgceagapgdekdbmanojomk/font/Circular-Pro-Black-Bold.woff) format(''woff''),'
r,←⊂'url(chrome-extension://mfidniedemcgceagapgdekdbmanojomk/font/Circular-Pro-Black-Bold.ttf) format(''truetype''),'
r,←⊂'url(chrome-extension://mfidniedemcgceagapgdekdbmanojomk/font/Circular-Pro-Black-Bold.svg) format(''svg'');'
r,←⊂'}'
r,←⊂'</style>'
r,←⊂'<script src="chrome-extension://mooikfkahbdckldjjndioackbalphokd/assets/prompt.js"></script>'
r,←⊂' <script type="text/javascript">'
r,←⊂'    $(document).ready(function () {'
r,←⊂'        $(''table'').DataTable({'
r,←⊂'            "dom":"ft",'
r,←⊂'            "paging":false,'
r,←⊂'            "ordering": false,'
r,←⊂'            "language": {'
r,←⊂'                "search": '' '','
r,←⊂'                "searchPlaceholder": "Filter..."'
r,←⊂'            }'
r,←⊂'        });'
r,←⊂'        $(''.dataTables_filter'').css("float","left");'
r,←⊂'        $("input:visible").first().focus();'
r,←⊂'    });'
r,←⊂' </script>'
⍝Done
r←GetDeletePolicy;ind
ind←⊃0 G.INI.Get'Config:DeletePackages'
r←(0 1 2⍳ind)⊃'None' 'Any' 'JustBetas'
response←request GetDependencies packageID;html;filename;list;content;dependencies
⍝ Collect dependencies if not http: those need to be dealt with by the caller since this is
⍝ the server module, and we don't query other servers.
:If Reg.IsValidPackageID_Complete packageID
filename←(⊃¯1↑1⊃F.Dir G.RegistryPath,packageID,'*'),'/',Reg.DependenciesFilename
:If F.IsFile filename
:AndIf 0<≢dependencies←⊃F.NGET filename 1
:If IsJsonRequest request.Headers
response←request ReturnJSON Reg.JSON dependencies
:Else
response←request Respond 401 1
:EndIf
:Else
response←request Respond 200 0      ⍝ 200 but no content: no dependencies
:EndIf
:Else
response←request Respond 404 1
:EndIf
response←GetDeprecatedPackages request;filename;list;html;⎕TRAP;all
⍝ Respond to a request for all deprecated packages, HTML or JSON
list←Reg.ListDeprecatedPackages G.RegistryPath
list←Reg.RemoveMinorAndPatch¨list
:If (⊂'all')∊request.QueryParameters[;1]
all←Reg.GetAllPackages G.RegistryPath
list←(,(Reg.RemoveMinorAndPatch¨all)∊list)⌿all
:EndIf
:If IsJsonRequest request.Headers
response←request ReturnJSON Reg.JSON list
:Else  ⍝ It's a request from a Browser
html←PrepareHtmlPageForDeprecatedList list
response←request ReturnHTML html
:EndIf
response←request GetDetails packageID;data;html;filename;url;version;filenames
⍝ Attempts to return the package config file.
⍝ * If no version is specified then the latest version is determined and its details are returned.
⍝ * If just a major number is provided the details of the best version of that major number are returned.
⍝ * If a full package ID is provided the details for that precise version are returned.
⍝ * Otherwise a 404 is returned.
:If Reg.IsValidPackageID_Complete packageID
filename←G.RegistryPath,packageID,'/',Reg.CFG_Name
version←'full'
:ElseIf Reg.IsValidPackageID_WithMajorNo packageID
filenames←⊃F.Dir G.RegistryPath,packageID,'*'
filename←({⍵⊃⍨⊃¯1↑Reg.SortIndexForPackageIDs ⍵}filenames),'/',Reg.CFG_Name
version←'major'
:ElseIf Reg.IsValidPackageID_WithoutPatchNo packageID
filenames←⊃F.Dir(G.RegistryPath,packageID,'*')
filename←({⍵⊃⍨⊃¯1↑Reg.SortIndexForPackageIDs ⍵}filenames),'/',Reg.CFG_Name
version←'major+minor'
:ElseIf Reg.IsValidPackageID_WithoutVersionNo packageID
filenames←⊃F.Dir G.RegistryPath,packageID,'-*'
filename←({⍵⊃⍨⊃¯1↑Reg.SortIndexForPackageIDs ⍵}filenames),'/',Reg.CFG_Name
version←'none'
:Else
response←request Respond 404 1
:Return
:EndIf
:If 0=F.IsFile filename
response←request Respond 404 1
:Else
:If 0<≢data←1⊃F.NGET filename 1
:If IsJsonRequest request.Headers
response←request ReturnJSON Reg.JSON data
:Else
url←{(Reg.GetJsonFromFile ⍵).project_url}filename
html←PrepareHtmlPageForPackageDetails packageID data url version
response←request ReturnHTML html
:EndIf
:Else
response←request Respond 404 1
:EndIf
:EndIf
html←GetFooter;footer;email;subject
html←''
html,←⊂'<div id="my-footer">'
html,←⊂'<hr>'
footer←'Created by Tatin version ',(⊃{⍺,' from ',⍵}/1↓Version),' under ',⍕'#'⎕WG'APLVersion'
subject←⊃G.INI.Get'CONFIG:Subject'
email←⊃G.INI.Get'CONFIG:EmailAddress'
:If 0<≢subject
:AndIf 0<≢email
footer,←'	&#8212; Bugs, questions, problems:'
((subject∊'''"')/subject)←'`'
subject←' '⎕R'\%20'⊣subject
footer,←'<a class="mailto_link" href="mailto:',email,'?subject=',subject,'">',email,'</a>'
:EndIf
html,←⊂'<p>',footer,'</p>'
html,←⊂'</div>'
⍝Done
GetFromHeaders←{
headers←⍵
bool←⍺∘≡¨⊃¨headers
0=+/bool:''
2⊃⊃¯1↑bool/headers
}
response←request GetFullPackageList packageID;data;html;noOfVersions;IDs;uniqueIDs;descriptionAndProjecturl;list5;pkgs;group;json;list
⍝ Return literally all packages. Parameters are ignored
:If IsJsonRequest request.Headers
pkgs←1 Reg.GetAllPackages G.RegistryPath
:If 0<≢group←request R.GetQueryParameter'group'
pkgs←(group∘≡¨Reg.GetGroupFromPackageID¨pkgs[;1])⌿pkgs
:EndIf
pkgs←pkgs[;1]
:If (⊂'latest')∊request.QueryParameters[;1]
⍝ Only the latest version of each package, ignoring the major version number
pkgs←{⍵/⍨⌽{(⍵⍳⍵)=⍳≢⍵}⌽Reg.RemoveVersionNumber¨⍵}pkgs
:EndIf
:If 0<≢list←request R.GetQueryParameter'list'
list←','(≠⊆⊢)list
pkgs←list ReducePkgsList pkgs
:EndIf
pkgs,[1.5]←⊂''
:If 0=≢request R.GetQueryParameter'dependencies'
:OrIf 1=1↑A.ToNum request R.GetQueryParameter'dependencies'
pkgs←G.RegistryPath Reg.AddDependencies pkgs
:EndIf
pkgs←pkgs[;1]
json←Reg.JSON pkgs
response←request ReturnJSON json
:Else  ⍝ It's a request from a Browser
list←1 Reg.GetAllPackages G.RegistryPath
html←packageID PrepareHtmlPageForFullPackageList list
response←request ReturnHTML html
:EndIf
response←GetGroupList dummy;data;html;groups;path
path←'expand'F.NormalizePath G.RegistryPath
:If IsJsonRequest request.Headers
data←Reg.ListGroups path
response←request ReturnJSON Reg.JSON data
:Else
groups←GetGroupList_ path
groups←groups,[1.5]1
groups⍪←(G.Credentials[;1]~,⊂,'*'),[1.6]0
groups←{(1⊃⍺)((≢⍵)×2⊃⍺)}⌸groups
groups←groups[groups[;1]⍳∪groups[;1];]
html←PrepareHtmlPageForGroupList groups
response←request ReturnHTML html
:EndIf
⍝Done
groups←GetGroupList_ path;packages;groups
packages←,Reg.GetAllPackages path
:If 0<≢groups←∪{⍵↑⍨¯1+⍵⍳'.'}¨packages
groups←{⍵↑⍨¯1+⍵⍳'-'}¨groups
:EndIf
⍝Done
r←GetJavaScriptFocus id
⍝ Useful to make sure that "autofocus" will be honoured
r←''
r,←⊂'   $(document).ready(function() {'
r,←⊂'      setTimeout(function() {'
r,←⊂'          $("',id,'").focus();'
r,←⊂'      }, 1500);'
r,←⊂'   });'
r←GetJavaScriptForTabbedInterface initialTab
⍝ Works with any numbers of tabs,
⍝ "initialTab" is the Tab that should initiall be visible
r←''
r,←⊂'   window.onload = function() {'
r,←⊂'      document.getElementById("',initialTab,'").click();'
r,←⊂'  }'
r,←⊂'function openTab(evt, name) {'
r,←⊂'  // Declare all variables'
r,←⊂'  var i, tabcontent, tablinks;'
r,←⊂''
r,←⊂'  // Get all elements with class="tabcontent" and hide them'
r,←⊂'  tabcontent = document.getElementsByClassName("tabcontent");'
r,←⊂'  for (i = 0; i < tabcontent.length; i++) {'
r,←⊂'    tabcontent[i].style.display = "none";'
r,←⊂'  }'
r,←⊂''
r,←⊂'  // Get all elements with class="tablinks" and remove the class "active"'
r,←⊂'  tablinks = document.getElementsByClassName("tablinks");'
r,←⊂'  for (i = 0; i < tablinks.length; i++) {'
r,←⊂'    tablinks[i].className = tablinks[i].className.replace(" active", "");'
r,←⊂'  }'
r,←⊂''
r,←⊂'  // Show the current tab, and add an "active" class to the button that opened the tab'
r,←⊂'  document.getElementById(name).style.display = "block";'
r,←⊂'  evt.currentTarget.className += " active";'
r,←⊂'} '
response←request GetMajorVersionList(packageID folder);data;html;qdmx
:Trap Reg.ErrorNo
:If 0<≢data←ListMajorVersions packageID
:If IsJsonRequest request.Headers
response←request ReturnJSON Reg.JSON data
:Else
html←PrepareHtmlPageForMajorVersionList packageID data
response←request ReturnHTML html
:EndIf
:Else
response←request Respond 404 1
:EndIf
:Else
qdmx←⎕DMX
response←request Respond 400 0
response.Content←qdmx.EM
:EndTrap
⍝Done
response←GetMinimumServerVersion request;data;html
⍝ Respond to a request for some or all tags, HTML or JSON
data←P.G.INI.Get'CONFIG:MinimumTatinVersion'
response←request ReturnJSON Reg.JSON data
r←GetPackageConfigFilename
r←'apl-project.json'
⍝Done
response←request GetPackageList packageID;data;html;noOfVersions;IDs;parms;list5;mat;group;msg;buff
⍝ Respond to a request for some or all packages, HTML or JSON
:If Reg.IsValidPackageName packageID
:If 0<≢group←EstablishGroup packageID
:If 1=≢group
packageID←(1⊃group),'-',packageID
:Else
response←request Respond 400
response.Content←'The package <',packageID,'> exists in multiple groups: ',⊃{⍺,',',⍵}/group
:Return
:EndIf
:Else
msg←'Package ',packageID,' not found'
:If IsJsonRequest request.Headers
response←msg Return404 request
:Else
response←request RespondWithHTML 404 msg
:EndIf
:Return
:EndIf
:EndIf
parms←⎕NS''
parms.group←request R.GetQueryParameter'group'
parms.tags←request R.GetQueryParameter'tags'
parms.latest←⊃A.ToNum request R.GetQueryParameter'latest'
:If parms.latest
parms.aggregate←0
parms.date←0
:Else
:If 0<≢parms.date←request R.GetQueryParameter'date'
parms.date←⊃A.ToNum parms.date
parms.aggregate←0
:Else
parms.date←0
:If 0<≢buff←request R.GetQueryParameter'aggregate'
parms.aggregate←⊃A.ToNum buff
:EndIf
:EndIf
:EndIf
parms.project_url←{(⊂∊⍵)∊,¨'01':⍵ ⋄ 0}request R.GetQueryParameter'project_url'
parms.since←{0=≢⍵:0 ⋄ ⍵}request R.GetQueryParameter'since'
parms.(os_lin os_mac os_win)←1
buff←request∘R.GetQueryParameter¨'os_lin' 'os_mac' 'os_win'
:If 1∊≢¨buff
parms.(os_lin os_mac os_win)←{0=≢⍵:0 ⋄ ⊃A.ToNum ⍵}¨buff
:EndIf
parms.userCommand←(,'1')≡,request R.GetQueryParameter'userCommand'
parms.dependencies←(,'1')≡,request R.GetQueryParameter'dependencies'
parms←Reg.CheckParmsForListPackages parms
:If IsJsonRequest request.Headers
:If 0=≢data←Reg.ListPackages(G.RegistryPath,'/',packageID)parms
response←Return404 request
:Else
response←request ReturnJSON Reg.JSON data
:EndIf
:Else  ⍝ It's a request from a Browser
parms.tags←1
mat←packageID GetPackageList_ parms
html←packageID PrepareHtmlPageForPackageList mat
response←request ReturnHTML html
:EndIf
r←{packageID}GetPackageList_ parms;list;list2;list3;uniqueIDs;data
r←0 4⍴''
packageID←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'packageID'
list←Reg.GetAllPackages G.RegistryPath
list←G.RegistryPath Reg.RemoveDeprecatedPackages list
list2←list Reg.ListPackages(G.RegistryPath,packageID)parms
list3←Reg.RemoveVersionNumber¨list
:If 0<≢uniqueIDs←(⌽,list){⍺[(Reg.RemoveVersionNumber¨⍺)⍳⍵]}list2[;1]     ⍝ ⌽ them in order to get the latest version
data←↑Reg.FetchAdditionalDataForListPackages¨G.RegistryPath∘,¨uniqueIDs
data[;4]←'[,;]'⎕R', '⊣data[;4]  ⍝ Replace "," & ";" by ", " in description
r←list2,data
:EndIf
⍝Done
r←GetPackagesOfGroup group;parms;⎕TRAP
⍝ Same as ListPackages but only for packages owned by "group"
parms←Reg.CheckParmsForListPackages ⍬
parms.group←group
parms.date←0
r←GetPackageList_ parms
⍝Done
r←GetQuitDQEvent;events;b
⍝ Investigate whether there is an event number that can be used to quit DQ and if so send it to #
r←0
:If 0<≢events←↑# ⎕WG'Event'
:AndIf ∨/b←1≡¨events[;2]
r←events[⊃⍸b;1]
:EndIf
msg←GetReasonPhraseFor status;mat;msgs;stati;ind
(stati msgs)←R.StatusCodeRegistry ⍬
ind←stati⍳status
:If ind≤≢stati
msg←ind⊃msgs
:Else
msg←'Something went wrong'
:EndIf
⍝Done
txt←GetRegistryInfo ini
⍝ Checks whether there is an INI entry "MenuItemBefore" and if so, return it was a trailing space
txt←''
:If ini.Exist'CONFIG:menuItemBefore'
:AndIf 0<≢txt←⊃ini.Get'CONFIG:menuItemBefore'
txt←(-':'=¯1↑txt)↓txt
txt,←': '
:EndIf
response←GetServerVersion request;data;html
⍝ Respond to a request for some or all tags, HTML or JSON
:If IsJsonRequest request.Headers
data←Reg.Version
response←request ReturnJSON Reg.JSON data
:Else
data←⊂'<p>',(⊃{⍺,' from ',⍵}/1↓Reg.Version),'</p>'
html←PrepareHtmlPageForServerVersionNo data
response←request ReturnHTML html
:EndIf
r←GetSpecialCommands type
r←''
:Select type
:Case 'GET'
r,←⊂'get-server-path'
r,←⊂'recompile-index'
r,←⊂'stop'
r,←⊂'shutdown'
r,←⊂'crash'
r,←⊂'list-commands'
r,←⊂'get-delete-policy'
r,←⊂'off'
:CaseList 'PUT' 'POST'
r,←⊂'set-delete-policy'
:Else
. ⍝ Huuh?!
:EndSelect
html←GetStatistics dummy;folder;list;filename;title;i;data
⍝ Returns a page with download links to statistical data
folder←∊P.LogFolder
list←⌽F.ListFiles folder,'usage-data-*.zip'
html←''
:If 0=≢list
html,←⊂'Sorry, but there is no usage data available yet.'
:Else
html,←⊂'<!-- Tab links -->'
html,←⊂'<div class="tab">'
html,←⊂'  <button id="info-tab" class="tablinks" onclick="openTab(event, ''info'')">Information</button>'
html,←⊂'  <button id="view-tab" class="tablinks" onclick="openTab(event, ''view'')">View</button>'
html,←⊂'  <button id="download-tab" class="tablinks" onclick="openTab(event, ''download'')">Downloads</button>'
html,←⊂'</div>'
⍝ Content for the "Info" Tab
html,←⊂'<div id="info" class="tabcontent">'
html,←⊂H.Para'Via this page you can download usage data for packages.'
html,←⊂'<ul>'
html,←⊂H.LI'  For every year there is a file <code>usage-data-&lt;YYYY&gt;.zip</code> (if data is available)'
html,←⊂H.LI'  For the current year there is a file <code>usage-data-&lt;YYYY&gt;-&lt;MM&gt;.zip</code> which means you get all data from this year except the current month'
html,←⊂'</ul>'
html,←⊂H.Para'The following steps are carried out by any Tatin Server:'
html,←⊂'<ol>'
html,←⊂H.LI'On the first of January of any given year:'
html,←⊂'<ul>'
html,←⊂H.LI'All the data of the pevious year is collected and saved in <code>usage-data-&lt;YYYY&gt;.csv</code>'
html,←⊂H.LI'A file <code>usage-data-&lt;YYYY&gt;.zip</code> is created from that CSV file'
html,←⊂'</ul>'
html,←⊂H.LI'On the first day of any given month (except the first of January):'
html,←⊂'<ul>'
html,←⊂H.LI'A file <code>usage-data-&lt;YYYY&gt;-&lt;MM&gt;.csv</code> is created the comprehends all the data of that year except the new month'
html,←⊂H.LI'A file <code>usage-data-&lt;YYYY&gt;-&lt;MM&gt;.zip</code> is created from that CSV file'
html,←⊂'</ul>'
html,←⊂'</ol>'
html,←⊂'</div>'
⍝ Content for the "View" Tab
html,←⊂'<div id="view" class="tabcontent">'
filename←{⍵⊃⍨1+⊃'usage-data-[0-9]{4}-[0-9]{2}'⎕S 2⊣(≢∊P.LogFolder)↓¨⍵}list,⊂''
:If 0=≢filename  ⍝ No current-year data available (in January!)? Take last year.
filename←⊃list
:EndIf
filename←(¯3↓filename),'csv'
data←⎕CSV filename
data←{⍺,≢⍵}⌸data[;1 2]
data[1;3]←⊂'Downloads'
data[;3]←⍕¨data[;3]
html,←⊂H.Para'The table shows the data from the file "',((≢∊P.LogFolder)↓filename),'" but aggregated by month and version number.'
html,←⊂H.Para'Because of the aggregation, "Month" and "Year" are no longer meaningful, therefore these columns are not shown.'
html,←⊂'<table id="data-table">'
html,←⊂'<thead>'
html,←(⊂'<tr>'),((⎕UCS 10),¨{'<th>',⍵,'</th>'}¨data[1;]),(⊂'</tr>')
html,←⊂'</thead>'
html,←⊂'<tbody>'
html,←⊃,/{(⊂'<tr>'),((⎕UCS 10),¨'' '' 'style="text-align:right;"'{({0=≢⍵:'<td>' ⋄ '<td ',⍵,'>'}⍺),⍵,'</td>'}¨⍵),(⊂'</tr>')}¨↓1↓data
html,←⊂'</tbody>'
html,←⊂'</table>'
html,←⊂'</div>'
⍝ Content for the "Download" Tab
html,←⊂'<div id="download" class="tabcontent">'
html,←⊂'<ol>'
:For i :In ⍳≢list
filename←⊃,/1↓⎕NPARTS i⊃list
:If (≢'usage-data-YYYY-MM.zip')=≢filename           ⍝ Then it is the current year's data
title←'Data for this year up to ',(⊃(//)⎕VFI 2↑(≢'usage-data-2022-')↓filename)⊃Months
:Else
title←'Data for ',4↑(≢'usage-data-')↓filename
:EndIf
title,←' (zipped, ~',(⍕1⌈⌊0.5+(('type' 2)F.Dir(∊P.LogFolder),filename)÷1014),'KB)'
html,←⊂H.LI('usage-data/',filename)H.A title
:EndFor
html,←⊂'</ol>'
html,←⊂'</div>'
:EndIf
⍝Done
response←GetTagList request;parms;data;html
⍝ Respond to a request for some or all tags, HTML or JSON
:If IsJsonRequest request.Headers
parms←⎕NS''
parms.tags←''
parms.tags←⎕C request R.GetQueryParameter'tags'
parms.os←⎕C request R.GetQueryParameter'os'
data←Reg.ListTags G.RegistryPath parms
response←request ReturnJSON Reg.JSON data
:Else
⍝ Because it's a request from a Browser for the time
⍝ being we know that *all* packages are requested.
data←Reg.ListTags G.RegistryPath(⎕NS'')
html←PrepareHtmlPageForTagList data
response←request ReturnHTML html
:EndIf
response←GetVersionInformation request;data;html;minimum;minor;major;v
⍝ Return HTML with version information
data←'Server is running Tatin version ',⊃{⍺,' from ',⍵}/1↓Reg.Version
:If G.INI.Exist'Config:MinimumTatinVersion'
minimum←⊃G.INI.Get'Config:MinimumTatinVersion'
data,←'; minimum version required on the client side is ',⍕minimum
:EndIf
:If IsJsonRequest request.Headers
response←request ReturnJSON Reg.JSON data
:Else
html←HtmlHeader''
html,←⊂'<h2>Version information and requirements</h2>'
html,←AddSpecialMessage ⍬
html,←⊂'<p>',data,'</p>'
html,←⊆GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
response←request ReturnHTML html
:EndIf
⍝Done
response←request GetVersionList packageID;data;html;qdmx;date;buff
:Trap Reg.ErrorNo
:If IsJsonRequest request.Headers
:If date←0<≢buff←request R.GetQueryParameter'publishingdate'
date←⊃A.ToNum⊃buff
:EndIf
:If 0<≢data←date Reg.ListVersions G.RegistryPath,packageID
response←request ReturnJSON Reg.JSON data
:Else
response←request Respond 404 1
:EndIf
:Else
:If 0<≢data←1 Reg.ListVersions G.RegistryPath,Reg.RemoveMinorAndPatch packageID
data[;2]←FormatFloatDate¨data[;2]
html←PrepareHtmlPageForVersionList packageID data
response←request ReturnHTML html
:Else
response←request Respond 404 1
:EndIf
:EndIf
:Else
qdmx←⎕DMX
response←request Respond 400 0
response.Content←qdmx.EM
:EndTrap
⍝Done
GetVersion_REST←{'v1/',⍵}
r←GetWorkspaceHash;wsid
⍝ Used to identify changes made to the WS on file
r←''  ⍝ In case there is no WS on disk to be found, for example when created on the fly for tests.
:If 'CLEAR WS'≢⎕WSID
wsid←(1⊃1 ⎕NPARTS''),'/Server.dws'
:AndIf ##.FilesAndDirs.IsFile wsid  ⍝ Alias "F" does not necessarily exist at this point!
r←2 ⎕NQ #'GetBuildID'wsid
:AndIf r∧.='0'  ⍝ Then something went wrong, but it's not worth to crash the server
r←''
:EndIf
⍝Done
A←{
'<a href="',⍺,'">',⍵,'</a>'
}
r←BR
r←'<br>'
Button←{
⍝ ⍺ = parameter namespace
⍝ ⍵ = Caption
p←⍺
'<button ',(⊃{⍺,' ',⍵}/p.{{⍵,'="',(⍎⍵),'"'}¨' '~¨⍨↓⎕NL ⍵}2),'>',⍵,'</button>'
}
Input←{
⍝ ⍵ = parms with assigment
⍝ ⍺ = string that may contain keywords like "required" or "autofocus"
⍺←''
p←⍵
'<input ',⍺,' ',(⊃{⍺,' ',⍵}/p.{{⍵,'="',(⍎⍵),'"'}¨' '~¨⍨↓⎕NL ⍵}2),'>'
}
LI←{
'<li>',⍵,'</li>'
}
Label←{
'<label for="',⍺,'">',⍵,'</label>'
}
r←OpenTable max;width
width←''
:If ~(⊂max)∊0 ⍬
width←' max-width: ',(⍕max),'em;'
:EndIf
r←'<table class="stripe cell-border" style="margin: 0 0 0 0;',width,'">'
Para←{
⍺←''
add←{0=≢⍵:⍵ ⋄ ' ',⍵}⍺
'<p',add,'>',⍵,'</p>'
}
Script←{
(⊂'<script type="text/javascript">'),(⊆⍵),(⊂'</script>')
}
request←HandleFormData request;ind;content;parms
⍝ This is a workaround for the fact that Rumba does not take care of data submitted via a form
ind←¯1+request.Content⍳'&'
content←ind↑request.Content
content←(content⍳'=')↓content
content←R.PercentDecode content
:If 0<≢parms←ind↓request.Content
parms←'&'(≠⊆⊢)parms
parms←{'='(≠⊆⊢)⍵}¨parms
(2⊃¨parms)←R.PercentDecode¨2⊃¨parms
request.QueryParameters←↑parms
:EndIf
request.Content←content
⍝Done
response←HandleGroupHomePage request;row;groupName
groupName←request R.GetQueryParameter'name'
response←ReturnGroupHomepage groupName request
response←Handle_Delete request;groupName;apiKey
request.RequestTarget←('/'=1⍴request.RequestTarget)↓request.RequestTarget
groupName←Reg.GetGroupName request.RequestTarget
apiKey←'api-key'GetFromHeaders request.Headers
:If G.Credentials AcceptCredential apiKey groupName
:If ∧/Reg.IsValidPackageID_Complete¨{','∊⍵:','(≠⊆⊢)⍵ ⋄ ⊆⍵}request.RequestTarget
response←DeletePackages request
:Else
response←request Respond 400  ⍝ 400 ←→ Bad Request
response.Content←'Neither valid package ID nor proper REST request'
:EndIf
:Else
response←request Respond 401      ⍝ 401 ←→ Unauthorized
response.Content←'Unauthorized request'
:EndIf
⍝Done
response←Handle_GET request;html;packageID;fullPath;path;versionNo
:If (,'/')≡request.Path
:OrIf '/index.html'≡request.Path
response←CreateHomePage request
:Else
fullPath←{⍵↓⍨'/'=⊃⍵}request.Path
:If 'Assets/'≡{⍵↑⍨⌊/⍵⍳'/\'}(≢Reg.VersionOf_REST)↓fullPath  ⍝ Static stuff with REST version
response←request ReturnFiles G.HTDOCS,(≢Reg.VersionOf_REST)↓fullPath
:ElseIf 'Assets/'≡{⍵↑⍨⌊/⍵⍳'/\'}fullPath                    ⍝ Static stuff without REST version
response←request ReturnFiles G.HTDOCS,fullPath
:ElseIf 'usage-data/'≡{⍵↑⍨⌊/⍵⍳'/\'}fullPath
response←request ReturnUsageDataFiles fullPath
:Else
path←Reg.RemovePackageID fullPath
packageID←(≢path)↓fullPath
:If 0=≢path
:If Reg.IsValidPackageID_Complete packageID
response←request FetchPackage packageID        ⍝ It is a fully qualified packageID
:Else
⍝ Neither a valid package ID nor a proper REST request
:If (⊂'text/html')∊request.Accept.MediaRange   ⍝ Is it a browser?
response←request RespondWithHTML 404 'Invalid package ID'
:Else
response←request Respond 404               ⍝ Nope, so we send back JSON5
:EndIf
:EndIf
:ElseIf request IsREST_v1 fullPath
response←request Handle_GET_REST_Version1 fullPath
:Else
response←request Respond 404                       ⍝ Neither a valid package ID nor a proper REST request
:EndIf
:EndIf
:EndIf
⍝Done
response←request Handle_GET_REST_Version1 path_;packageID;json;path;data;html;regFolder;specialCommands;groupName
⍝ Handles all commands defined in version 1 of the REST interface
path_↓⍨←-'/'=¯1↑path_
:If 1='/'+.=path_
path←path_
packageID←''
:Else
(path packageID)←Reg.SeparateUriAndPackageID path_
path↓⍨←-'/'=¯1↑path
:EndIf
path←⎕C path
specialCommands←GetSpecialCommands request.Method
:If (⊂path)∊(⊂'v1/'),¨specialCommands
response←request ProcessTestCommands ⎕C path
:Else
:If path≡GetVersion_REST'groups'
:AndIf 0<≢packageID
:AndIf 0=Reg.IsValidPackageID_Complete packageID
⍝ Special case: somebody asked for the home page of a group via a browser
:If G.INI.Exist'CONFIG:GroupHomePages'
:AndIf G.INI.Get'CONFIG:GroupHomePages'
groupName←1↓{⍵↑⍨-⌊/'/\'⍳⍨⌽⍵}path_
response←ReturnGroupHomepage packageID request
:Else
response←request RespondWithHTML 404
:EndIf
:Else
:Select path
:Case GetVersion_REST'all_packages'                ⍝ Inactive since 0.79.0, and a candiate for being removed alltogether
response←request GetFullPackageList packageID
:Case GetVersion_REST'copy-registry'
response←request GetFullPackageList''
:Case GetVersion_REST'packages'
response←request GetPackageList packageID
:Case GetVersion_REST'deprecated-pkgs'
response←GetDeprecatedPackages request
:Case GetVersion_REST'packages/major_versions'
regFolder←'expand'F.NormalizePath G.RegistryPath
response←request GetMajorVersionList packageID regFolder
:Case GetVersion_REST'packages/versions'
response←request GetVersionList packageID
:Case GetVersion_REST'packages/details'
response←request GetDetails packageID
:Case GetVersion_REST'packages/dependencies'
response←request ReturnDependencyFiles packageID
:Case GetVersion_REST'packages/exist'
response←request CheckForExistence packageID
:Case GetVersion_REST'packages/dependencies'
response←request GetDependencies packageID
:Case GetVersion_REST'packages/best_version'
response←request GetBestVersionNumber packageID
:Case GetVersion_REST'groups'
response←GetGroupList ⍬
:Case GetVersion_REST'tags'
response←GetTagList request
:Case GetVersion_REST'documentation'
response←CreateDocumentationIndex request
:Case GetVersion_REST'version'
response←GetServerVersion request
:Case GetVersion_REST'minimum-version'
response←GetMinimumServerVersion request
:Case GetVersion_REST'version-information'
response←GetVersionInformation request
:Case GetVersion_REST'delete-policy'
response←ReturnDeletePolicy request
:Case GetVersion_REST'credential-report'
response←ReturnCredentialReport request
:Case GetVersion_REST'usage-data'
response←ReturnUsageData request
:Case GetVersion_REST'group-homepage'
response←HandleGroupHomePage request
:Case GetVersion_REST'group-homepage-edit'
response←EditGroupHomepage request
:Case GetVersion_REST'group-homepage-create'
response←EditGroupHomepage request
:Case GetVersion_REST'get-licenses'
response←ReturnLicenses request
:Case GetVersion_REST'dependencies'
response←ReturnDependencies request
:Else
⍝ Something new?
response←request RespondWithHTML 400 'Invalid Request' ⍝ Not a valid REST version 1 request
:EndSelect
:EndIf
:EndIf
⍝Done
response←Handle_PUT_And_POST request;filename;path;path2;groupName;apiKey;b
request.RequestTarget←('/'=1⍴request.RequestTarget)↓request.RequestTarget
:If ∨/'save-group-homepage'⍷request.Content
request←HandleFormData request
:EndIf
:If 0=≢apiKey←request R.GetQueryParameter'api-key'
apiKey←'api-key'GetFromHeaders request.Headers
groupName←Reg.GetGroupName request.RequestTarget
:Else
groupName←request R.GetQueryParameter'group'
:EndIf
:If G.Credentials AcceptCredential apiKey groupName
:If 0=≢'email'Reg.GetGroupData G.RegistryPath groupName
:AndIf 'group-homepage-save'{⍺≢(-≢⍺)↑⍵}request.RequestTarget
:AndIf 0 G.INI.Get'CONFIG:EnforceEmailAddress'
response←request Respond 400
response.Content←'You cannot publish without defining an email address for your group. Create a home page for your group for that'
:Else
:If Reg.IsValidPackageID_Complete request.RequestTarget
response←SavePackage request
:ElseIf request IsREST_v1 request.RequestTarget
response←request Handle_PUT_And_POST_REST_Version1 request.RequestTarget
:Else
response←request Respond 400  ⍝ 400 ←→ Bad Request
response.Content←'Neither valid package ID nor proper REST request'
:EndIf
:EndIf
:Else
response←request RespondWithHTML 401 'Unauthorized request'    ⍝ 401 ←→ Unauthorized
:EndIf
⍝Done
response←request Handle_PUT_And_POST_REST_Version1 path_;packageID;json;path;data;html;regFolder;specialCommands
⍝ Handles all PUT and POST-related commands defined in version 1 of the REST interface
path_↓⍨←-'/'=¯1↑path_
:If 1='/'+.=path_
path←path_
packageID←''
:Else
(path packageID)←Reg.SeparateUriAndPackageID path_
path↓⍨←-'/'=¯1↑path
:EndIf
path←⎕C path
specialCommands←GetSpecialCommands request.Method
:If (⊂path)∊(⊂'v1/'),¨specialCommands
response←request ProcessTestCommands(⎕C path) ⍝ specialCommands
:Else
:Select path
:Case GetVersion_REST'group-homepage-save'
response←SaveGroupHompeage request
:Case GetVersion_REST'deprecate'
response←Deprecate request
:Else
⍝ Something new?
response←request Respond 400 1 ⍝ Not a valid REST version 1 request
:EndSelect
:EndIf
⍝Done
yesNo←HasGroupHomePage groupName;folder;dcfFilename
folder←'expand'F.NormalizePath G.HTDOCS,'/../Groups/'
dcfFilename←folder,groupName,'.dcf'
yesNo←⎕NEXISTS dcfFilename
⍝Done
(
'# HashPasswords'
''
'## Overview'
''
'This package gives you the tools you need to generate the hash for a salted password.'
''
'Note that there are several reasons for salting a password:'
''
'* Ensure that passwords that are too short to be secure by normal standards are secure anyway,'
'  at least as far as the length is concerned'
'* Prevent an attacker from realising when users are sharing the same password'
''
'By salting a password with a randomly generated salt, we increase security.'
''
'Note that the salt must be stored as clear text. And no, this is not a security risk!'
''
'For more information see <https://en.m.wikipedia.org/wiki/Salt_(cryptography)>'
''
'## Conga DLLs'
''
'On Windows, .NET is used for solving the task.'
''
'On other platforms `HashPasswords` needs the Conga DLL `libconga??ssl64.*` when `??` stands for the '
'version number like "34".'
''
'If the global variable `HashPasswords.PathToCongaDLLs` is empty (that''s the default) then '
'`HashPasswords` tries to use the Conga DLL the currently running APL is coming with.'
''
'If this is not suitable (for example in an application with a runtime EXE and a limited set of'
'Dyalog files while no Dyalog is installed) then make sure that `PathToCongaDLLs` point to a '
'folder where suitable DLLs can be found.'
''
'## Examples'
''
'```'
'      ≢salt1←HashPasswords.CreateSalt 10'
'10'
'      hash1←HashPasswords.Hash salt1,''123456'''
'      salt2←HashPasswords.CreateSalt 10'
'      ⎕←hash2←HashPasswords.Hash salt2,''123456'''
'      hash1≢hash2'
('1'⋄)
'      hash1≡HashPasswords.Hash salt1,''123456'''
('1'⋄)
'      hash2≡HashPasswords.Hash salt2,''123456'''
('1'⋄)
'```'
)
CreateSalt←{##.CreateSalt ⍵}
Dispose
Hash←{##.Hash ⍵}
Init_SHA256←{⍺←⊢ ⋄ 1:shy←⍺ ##.Init_SHA256 ⍵}
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}
salt←CreateSalt length;⎕RL;alp
⍝ Creates (pseudo)-randomly a salt with `length` characters. Only ASCII chars and digits are used as input.
⎕DL 0.0001×?100
⎕RL←+/⎕TS
alp←(⎕C ⎕A),⎕A,⎕D
salt←alp[?length⍴≢alp]
Dispose
⍝ Clean up
⎕EX'SHA256'
hash←Hash password
⍝ Returns the hash for `password`.\\
⍝ In case `HashPasswords` has not yet been initialized, `Hash` takes care of that.
:If 0=⎕NC'SHA256'
Init_SHA256 ⍬
:EndIf
hash←,Hex SHA256.ComputeHash⊂'UTF-8'⎕UCS password
⍝Done
Hex←{  ⍝ Transform integers to hex and vice versa\\
⍝ `⍵` simple dec- or hex-array\\
⍝ `←` simple hex- or dec-array\\
⍝ Accepts hex as uppercase or lowercase but always return lowercase.\\
⎕IO←0
t←0∊⊃⍬⍴0⍴⊂⍵
a←⎕D,'abcdef',⎕D,'ABCDEF'
t:⍉a⌷⍨⊂16⊥⍣¯1⊢⍉⍵
⍉16⊥16|a⍳⍉⍵
}
(
'* 1.0.1 ⋄ 2023-07-16'
'  * Did not work with 32-bit-version of Dyalog'
'* 1.0.0'
'  * First version'
)
{r}←{force}Init_SHA256 dummy;extn;⎕USING;filename;path;OS
⍝ Make the necessary preparations for hashing a password.\\
⍝ Once initiallized, the function does not run its code again, except when a 1 is passed as `⍺`.
force←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'force'
'⍺ must be a Boolean'Assert(⊂force)∊0 1
:If 9≠⎕NC'SHA256'
:OrIf force
OS←APLTreeUtils2.GetOperatingSystem ⍬
:If 'Win'≡OS
⎕USING←',System.Security.Cryptography.Algorithms',((,'1')≢2 ⎕NQ'.' 'GetEnvironment' 'DYALOG_NETCORE')/'.dll'
SHA256←⎕NEW System.Security.Cryptography.SHA256Managed
:Else
'SHA256'⎕NS''
:If 0=≢path←PathToCongaDLLs
path←(2 ⎕NQ #'GetEnvironment' 'Dyalog'),'/lib/'
:EndIf
filename←⊃FilesAndDirs.ListFiles path,'libconga??ssl',((1+Is64Bit)⊃'32' '64'),'.',(1+'Mac'≡OS)⊃'so' 'dylib'
'Conga DLL not found'Assert 0<≢filename
'Init'SHA256.⎕NA filename,'|nettle_sha256_init >I1[112]'
'Update'SHA256.⎕NA filename,'|nettle_sha256_update =I1[112] U8 <T1[]'
'Digest'SHA256.⎕NA filename,'|nettle_sha256_digest =I1[112] U8 >U1[32]'
SHA256.⎕FX'digest←ComputeHash data;ctx' 'data←⎕UCS⊃data' 'ctx←Init 112' 'ctx←Update ctx(⍴data)data' '(ctx digest)←Digest ctx 32 32'
:EndIf
:EndIf
r←Is64Bit
r←∨/'-64'⍷1⊃'#'⎕WG'APLVersion'
''
r←Public
r←'Init_SHA256' 'CreateSalt' 'Hash' 'Dispose'
r←Version
⍝ See also `History`
r←'HashPasswords' '1.0.1' '2023-07-16'
html←HtmlHeader add;caption;title
⍝ Strictly speaking this does not only return a header: it also returns...
⍝ * the DOC type
⍝ * an opening html tag
⍝ * an opening body tag
⍝ * some more stuff shared by all Tatin HTML pages
html←''
html,←⊂'<!DOCTYPE html>'
html,←⊂'<html lang="en">'
html,←⊂'<head>'
title←⊃G.INI.Get'Config:Title'
html,←⊂'<title>',title,'</title>'
html,←⊂'<meta charset="UTF-8">'
html,←⊂'<meta name="robots" content="noindex">'
html,←⊂'<link rel="stylesheet" type="text/css" href="/Assets/CSS/screen.css" media="screen">'
⍝html,←⊂'<link rel="stylesheet" type="text/css" href="/Assets/CSS/print.css" media="screen">'   ⍝ Can be useful for debugging the "Print" CSS
html,←⊂'<link rel="stylesheet" type="text/css" href="/Assets/CSS/print.css" media="print">'
html,←⊂'<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/jq-3.6.0/dt-1.12.1/r-2.3.0/datatables.min.css">'
html,←⊂'<script src="https://cdn.datatables.net/v/dt/jq-3.6.0/dt-1.12.1/r-2.3.0/datatables.min.js"></script>'
html,←⊂'<link rel="icon" type="image/x-icon" href="/Assets/img/favicon.ico">'
html,←FetchBackground G.INI
html,←⍕¨⊆add
html,←⊂'<link rel="stylesheet" type="text/css" href="/Assets/CSS/screen-tweaks.css" media="screen">'
html,←⊂'<link rel="stylesheet" type="text/css" href="/Assets/CSS/print-tweaks.css" media="print">'
html,←⊂'</head>'
html,←⊂'<body>'
html,←⊂'<div id="my-logo">'
caption←⊃G.INI.Get'Config:Caption'
html,←⊂'<a href="/"><img id="logo" src="/Assets/img/tatin.png" title="Link to ',title,' main page" alt="Link to ',title,' main page"></a>'
html,←⊂'<h1>',caption,'</h1>'
html,←⊂'</div>'
html←,¨html
⍝Done
IsJsonRequest←{
headers←⍵
bool←'accept'∘≡¨⊃¨headers
0=+/bool:0
'application/json'≡2⊃⊃¯1↑bool/headers
}
r←request IsREST_v1 url
r←'v1/'{⍺≡(≢⍺)↑⍵}url
⍝Done
r←ListMajorVersions packageID;registryPath;packageID;group;name;version;regEx;pattern;list2;list;noOfVersions
⍝ Takes a package ID without version number and returns a matrix with 3 columns:
⍝ [1] group & package
⍝ [2] major version number
⍝ [3] number of versions
r←0 3⍴'' ''
:If 0<≢list2←F.ListDirs G.RegistryPath,packageID,'-*'
list2←'/\'∘A.Last¨list2
list2←Reg.RemoveMinorAndPatch¨list2
list←⌽∪list2
noOfVersions←⌽{≢⍵}⌸3⊃¨'-'A.Split¨list2
r←(↑{⍵{(⍵↓⍺)(1↓⍵↑⍺)}-'-'⍳⍨⌽⍵}¨list),noOfVersions
:EndIf
⍝Done
{r}←{server}Log msg
⍝ Uses Plodder's (and therefore ultimately Rumba's) `Log` function to log stuff.
⍝ Expects the Global `G` to be around which holds an instance of the Rumba Servera as G.Server.
⍝ If `G` is not avaiable (too early, for example) the server instance must be provided as ⍺.
server←{0<⎕NC ⍵:⍎⍵ ⋄ G.Server}'server'
:If 0≠server.LogFileTie
r←server ##.Plodder.Log msg
:EndIf
⍝Done
{r}←LogError msg
⍝ Uses Plodder's `LogError` (and therefore ultimately Rumba's) `Log` function to log errors.
⍝ Expects the Global `G` to be around which holds an instance of the Rumba Server as G.Server.
⍝ If `G` is not avaiable (too early, for example) the server instance must be provided as ⍺.
r←##.Plodder.LogError msg
⍝Done
{r}←CreateZipFile filename;zipFilename;zip;folder
⍝ Creates a ZIP file from `filename`.
r←⍬
zipFilename←(¯4↓filename),'.zip'
zip←⎕NEW ##.ZipArchive(,⊂zipFilename)
folder←⊃⎕nparts filename
folder zip.Add(≢folder)↓filename
⍝Done
{r}←CreateZippedBackup(folder year);zipFilename;zip;filename;bkpFilename
⍝ Takes a folder as ⍵ and expect it to contain a file "folder,'/app-log.txt'"
⍝ It creates a copy of that file by replacing the extension by "bkp".
⍝ Then this file is zipped into a file "app-log-<year>.bkp.zip".
⍝ Finally the BKP file is deleted.
r←⍬
filename←folder,GetLogFilename
bkpFilename←(¯4↓filename),'-',year,'.bkp'
bkpFilename ⎕NCOPY filename
zipFilename←folder,'app-log-',year,'.bkp.zip'
zip←⎕NEW ##.ZipArchive(,⊂zipFilename)
folder zip.Add(≢folder)↓bkpFilename
⍝Done
r←GetLastMonthSaved folder;list
:If 0<≢list←##.F.ListFiles folder,'usage-data-????-*.csv'     ⍝ All monthly data saved
list←{⊃,/1↓⎕NPARTS ⍵}¨list
r←##.A.ToNum(⊃list[≢list])[1 2+≢'usage-data-2024-']  ⍝ Last month saved
:Else
r←0
:EndIf
⍝Done
r←GetLogFilename
r←'app-log.txt'
r←ProcessLogData data;date;packageIDs;date2;isPkgID
⍝ Takes the data saved in the log file and reduces them to the essentials, aggregate just by day
r←0 4⍴⊂''
:If 0<≢data←(∨/¨' GET 200 '∘⍷¨data)/data       ⍝ We are interested only in successful GET operations
data←(1=(↑data)+.='/')⌿data                ⍝ Only lines with a single "/" are of interest
data←(2=(19↓[2]↑data)+.='-')/data          ⍝ A package ID carries precisely two hyphens
data←(~∨/¨'(test)'∘⍷¨data)/data            ⍝ Remove any requests initiated by test runs
:AndIf 0<≢data←↑data
date←10↑[2]data
date2←(⊃∘{⊃(//)⎕VFI ⍵}¨↓data[;⍳4]),(⊃∘{⊃(//)⎕VFI ⍵}¨↓data[;5+⍳2]),[1.5](⊃∘{⊃(//)⎕VFI ⍵}¨↓data[;8+⍳2])
packageIDs←↓(≢'YYYY-MM-DD hh:mm:ss GET 200 /')↓[2]data
isPkgID←##.##.Registry.IsValidPackageID_Complete¨packageIDs~¨' '   ⍝ The bad boys might send crazy stuff, but it will hardly match a valid, complete package ID
packageIDs←↑{ind←⍸'-'=⍵ ⋄ ((ind[1]-1)↑⍵)((ind[2]-1+ind[1])↑ind[1]↓⍵)(ind[2]↓⍵)}¨packageIDs
r←packageIDs,date2
r←r[⍋r[;3];]
r←r[⍋r[;2];]
r←r[⍋r[;1];]
r←r[⍋r[;6];]
r←r[⍋r[;5];]
r←r[⍋r[;4];]
r←isPkgID⌿r
r[;3]←r[;3]~¨' '       ⍝ Version number might well carry trailing blanks
r←{⍺,≢⍵}⌸r[;6~⍨⍳2⊃⍴r]  ⍝ Without the day
:EndIf
⍝Done
{r}←ProcessLogFile(folder TS);filename;raw;y;b;data;y2;m;m_;until;f;lms;flag;⎕TRAP
⍝ Old years are removed from the log file
⍝ Months of the current year are accumulated until the current month-1 (TS[2])
⍝ * `folder` is where the log files live
⍝ * `TS` is todays timestamp: Y M D
filename←folder,GetLogFilename
raw←⊃⎕NGET filename 1
→(0=≢raw)/0
y←4↑¨raw
b←∧/(↑y)∊⎕D                                                ⍝ Row of interest all start with a year
raw←b/raw                                                  ⍝ Throw away stuff we are...
y←b/y                                                      ⍝ ... not interested in
flag←0                                                     ⍝ Used to tell that raw data needs to be written back to disk
:While ≢/y[1,≢y]                                           ⍝ Any old data found?
b←y≡¨y[1]
data←b/raw                                             ⍝ The year we are interested in
raw←(~b)/raw                                           ⍝ Throw...
y←(~b)/y                                               ⍝ ... away
data←ProcessLogData data                               ⍝ Aggregate
y2←⍕⊃data[1;4]
:If flag=0                                             ⍝ First time?
CreateZippedBackup folder y2
:EndIf
SaveAsCSV(folder,'usage-data-',y2)data                 ⍝ Save
CreateZipFile folder,'usage-data-',y2,'.csv'
flag←1
:EndWhile
{}(⊂raw)⎕NPUT⍣flag⊢filename 1                              ⍝ Save back the raw data (from current year only)
m←(⊃⊃(//)⎕VFI(⊃raw[≢raw])[6 7])                            ⍝ Month of last entry
:If 1<m                                                    ⍝ If current one is January we have no data yet
lms←GetLastMonthSaved folder                           ⍝ Last month saved
m_←({⊃⊃(//)⎕VFI ⍵}¨↓(↑raw)[;6 7])                      ⍝ All months in raw
:AndIf ((≢m_)⊃m_)>lms+1                                    ⍝ New month?! (But never Jan until current month is at least Feb)
b←m_<m                                                 ⍝ All before the current month
data←b/raw                                             ⍝ We are interested in everything but the current month
data←ProcessLogData data                               ⍝ Aggregate
:AndIf 0<≢data
y2←⍕⊃data[1;4]
until←¯2↑'00',⍕5⊃data[≢data;]
f←folder,'usage-data-',y2,'-',until
SaveAsCSV f data                                       ⍝ Save
CreateZipFile f,'.csv'
:EndIf
⍝Done
{r}←{colTitles}SaveAsCSV(filename data);colTitles
⍝ Save `data` in `filename` as CSV
r←⍬
:If 0=⎕NC'colTitles'
colTitles←'Group' 'Name' 'Version' 'Year' 'Month' 'Downloads'
:EndIf
filename,←('.csv'≢⎕C ¯4↑filename)/'.csv'
1 ⎕NDELETE filename
data colTitles ⎕CSV filename
json←MakeGroupHomepageLink json;i;item;propName;groupName;a
⍝ For groups that actually have a homepage the propName of the group becomes a link to that page.
json←1↓json
:For i :In ⍳≢json
item←i⊃json
propName←{' '~⍨⍵↑⍨¯1+⍵⍳':'}item
:If 'group'≡propName
groupName←'"'~⍨{⍵/⍨{⍵∨≠\⍵}⍵='"'}item
:AndIf HasGroupHomePage groupName
a←'<a href="',(('/',GetVersion_REST'group-homepage?name='),groupName),'" title="Link the the group`s homepage">'
a,←groupName,'</a>'
(i⊃json)←((+/∧\' '=item)⍴' '),'group: "',a,'"'
:Return
:EndIf
:EndFor
⍝Done
r←MakeLinkToPackage packageID;filename
filename←G.RegistryPath,'/',packageID,'/',Reg.DependenciesFilename
:If F.IsFile filename
r←'<a href="',Reg.VersionOf_REST,'/packages/dependencies/',packageID,'" title="Link to dependencies">',packageID,'</a>'
:Else
r←'<span title="Has no dependencies">',packageID,'</span>'
:EndIf
⍝Done
r←MakeURLsLinks json
⍝ Makes any URLs an HTML <a> anchor
r←'"(http[s]://[^"]+)"'⎕R'"<a href="\1" target="_blank"  rel=noopener title="Link is opened in a new tab">\1</a>"'⊣json
⍝Done
MassageHTML←{
0=≢⍵:⍵
(⊃,/⍵,¨⊂⎕UCS 13 10),⎕UCS 13 10
}
r←MassageMarkdown md;CRLF;length;drop;b
CRLF←⎕UCS 13 10
r←md
b←CRLF⍷r
r[⍸b]←⊂CRLF,CRLF
r←∊r
r←{(CRLF⍷⍵)⊂⍵}CRLF,md
r~¨←⊂CRLF
drop←-+/∧\0=⌽≢¨r
r←drop↓r
⍝Done
MassageProjectURL←{
'http://'{⍺≡(≢⍺)↑⍵}⍵:{⍵↑⍨¯1+⍵⍳'/'}(≢'http://')↓⍵
'https://'{⍺≡(≢⍺)↑⍵}⍵:{⍵↑⍨¯1+⍵⍳'/'}(≢'https://')↓⍵
⍵
}
r←Months
r←'January' 'February' 'March' 'April' 'May' 'June' 'July' 'August' 'September' 'October' 'November' 'December'
r←NL
r←⎕UCS 13 10
{r}←OnHouseKeeping msg;savedAt;rideable;rideableOld;rideActive;qdmx
⍝ Used for these purposes:
⍝ * Check ∆SHUTDOWN; if this is 1 shut the server down
⍝ * Check whether the WS has been updated since it was loaded. If so reload.
⍝ * Check the INI file; if it has been changed re-instantiate the INI file
⍝ * Check whether the file "year" in the log folder is identical to ⊃⎕TS; if it
⍝   is not then take action.
r←0
:Trap 0
ReportNumberOfThreads G.INI
:If 1=∆SHUTDOWN
∆SHUTDOWN←¯1  ⍝ In case this function runs again before it comes to an end
{}⎕NQ'#'GetQuitDQEvent
P.WindowsEventLog'Shutting down'
P.G.Server Log'Tatin Server is shutting down'
:If ~A.IsDevelopment
⎕OFF
:EndIf
:ElseIf ¯1≠∆SHUTDOWN
:If 0<⎕NC'∆WS_HASH'
ReloadThisWorkspaceIfChanged G.INI
:EndIf
:If F.IsFile G.RegistryPath,'/Credentials.txt'
:OrIf G.CredentialsTimestamp≢Reg.Timestamp2Float⊃⊃('type' 3)F.Dir G.RegistryPath,'/Credentials.csv'
G←ProcessCredentials G         ⍝  Credentials have changed, so we read them again
:EndIf
savedAt←Reg.Timestamp2Float⊃⊃('type' 3)F.Dir G.INI.IniFilename
:If G.INI.EstablishedAt<savedAt
rideActive←0 G.INI.Get'RIDE:active'
P.G(P.ProcessIniFile)←G.INI.IniFilename  ⍝ ... we initialize from scratch
Log'INI file re-instantiated because it was changed on disk'
rideable←P.CheckForRide P.G.INI
:If rideActive≠rideable
:If rideable
msg←'Ride is now enabled'
:Else
msg←'Ride is now disabled'
:EndIf
:EndIf
Log msg
:EndIf
Logs.ProcessLogFile(∊P.LogFolder)(3↑⎕TS)
ExecuteMaintenanceCode G
:EndIf
:Else
qdmx←⎕DMX
:Trap 0
P.G.Server Log'Housekeeping error: ',qdmx.EM,'; RC=',⍕qdmx.EN
P.G.Server Log'Tatin cannot continue'
:Else
⎕OFF 125
:EndTrap
⎕SIGNAL 11  ⍝ Let Rumba's "ServerLoop" take over
:EndTrap
⍝Done
response←OnRequest request;logMsg;trapWas
⍝ Main handler for requests. Requests are first split by HTTP verb.
:If '/ping'≡request.Path
response←request R.Respond 200
:Else
:If G.TestFlag∧(⊂'stop')∊request.QueryParameters[;1]    ⍝ For development only: allow a client to trigger a "stop vector"
⎕SHADOW'⎕TRAP'
trapWas←⎕TRAP
⎕TRAP←0 'S'
∘∘∘  ⍝ The client want the server to stop
:EndIf
:Hold 'App-Log'   ⍝ Used by `Logs.CheckLogFile` for blocking all requests when dealing with the APP log file (once a year)
:If 0=G.INI.Get'Trap:Policy'
:AndIf ~request.Connection.Server.Trap
⍝ Invalidate Rumba's top level error trapping
⎕SHADOW'⎕TRAP'
⎕TRAP←0 'S'
:EndIf
:If 0<≢logMsg←CheckTatinVersion request
:AndIf 'v1/version'≢⎕C{('/'=⊃⍵)↓⍵}request.Path
response←request Respond 400 0
response.Content←logMsg
:Else
:Select request.Method
:CaseList 'GET' 'HEAD'
response←Handle_GET request
:CaseList 'PUT' 'POST'
response←Handle_PUT_And_POST request
:Case 'DELETE'
response←Handle_Delete request
:Else
response←ReturnNOT_IMPLEMENTED request
:EndSelect
logMsg←request.Method,' ',(⍕response.StatusCode),' ',request.RequestTarget
:If ∨/'test-request' 'yes'∘≡¨request.Headers
logMsg,←' (test)'
:EndIf
:If 200≠response.StatusCode
⍝ Add potential error message in case something went wrong:
logMsg,←((~∨/'<!DOCTYPE html>'⍷∊response.Content)∧326≠⎕DR response.Content)/'; ',response.Content
:EndIf
:EndIf
P.AppLog logMsg
:EndHold
:EndIf
⍝Done
r←OnStart server;path
r←0
∆SHUTDOWN←0
server Log ##.Plodder.CollectStartParms ⍬
⍝Done
flag←PackageHasDependencies packageID;filename;tno
⍝ It is not enough to look for the file: if it once had dependencies but they got removed
⍝ at some point the file might well be empty, so we need to check that as well.
flag←0
filename←G.RegistryPath,packageID,'/',Reg.DependenciesFilename
:If F.IsFile filename
flag←{tno←⍵ ⎕NTIE 0 64 ⋄ flag←0<⎕NSIZE tno ⋄ flag⊣⎕NUNTIE tno}filename
:EndIf
⍝Done
html←PrepareHTMLforAllSpecialCommands dummy
html←HtmlHeader''
html,←⊂'<h2>All Special REST Commands</h2>'
html,←AddSpecialMessage ⍬
html,←⊂H.Para'Note that these sepcial commands are supposed to be available on test servers only. Testing Tatin that is!'
html,←⊂'<h3>GET commands</h3>'
html,←⊂'<ul>'
html,←H.LI¨GetSpecialCommands'GET'
html,←⊂'</ul>'
html,←⊂'<h3>PUT commands</h3>'
html,←⊂'<ul>'
html,←H.LI¨GetSpecialCommands'PUT'
html,←⊂'</ul>'
html←⊃,/CR,¨html
⍝Done
html←PrepareHtmlPageForDependencies deps
html←HtmlHeader GetDataTableStuff ⍬
html,←⊂'<h2>Dependencies of "',packageID,'"</h2>'
html,←AddSpecialMessage ⍬
html,←⊂H.OpenTable 2+⌈/≢¨deps
html,←⊂'<thead>'
html,←⊂'<tr class="my-first-th">'
html,←{'<th>',⍵,'</th>'}¨⊆'Dependencies'
html,←⊂'</thead>'
html,←⊂'<tbody>'
deps←MakeLinkToPackage¨deps
html,←{'<tr><td><code>',⍵,'</code></td></tr>'}¨deps
html,←⊂'</tbody>'
html,←⊂'</table>'
html,←⊆GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
⍝Done
html←PrepareHtmlPageForDeprecatedList list;colTitles;col1;col2;data;links
html←HtmlHeader GetDataTableStuff ⍬
html,←⊂'<h2>List of deprecated packages</h2>'
html,←AddSpecialMessage ⍬
data←((⍪list),⊂'Config')
colTitles←'Package name' 'Config'
html,←⊂H.OpenTable colTitles CalcTableWidth data
html,←⊂'<thead>'
html,←⊂'<tr class="my-first-th">'
html,←{'<th>',⍵,'</th>'}¨colTitles
html,←⊂'</thead>'
html,←⊂'<tbody>'
:If 0<≢list
col1←{'<td><code>',⍵,'</code></td>'}¨data[;1]
links←{'<a href="',Reg.VersionOf_REST,'/packages/details/',⍵,'" title="Link to the package configuration">Show</a>'}¨data[;1]
col2←{'<td>',⍵,'</td>'}¨links
html,←{'<tr>',⍵,'</tr>'}¨col1,¨col2
:EndIf
html,←⊂'</tbody>'
html,←⊂'</table>'
html,←⊆GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
⍝Done
html←packageIDs PrepareHtmlPageForFullPackageList data;col1;col2;col3;buff;col4;col5;col6;⎕TRAP;bool
buff←{(≢⍵)}⌸(⍪Reg.RemoveVersionNumber¨data[;1]),1
html←HtmlHeader GetDataTableStuff ⍬
html,←⊂'<h2>List of all packages</h2>'
html,←AddSpecialMessage ⍬
html,←⊂'<p>List with ',(⍕≢data),' items from ',(⍕≢buff),' different packages</p>'
html,←⊂H.OpenTable CalcTableWidth data
html,←⊂'<thead>'
html,←⊂'<tr class="my-first-th">'
html,←'<th></th>' '<th>Pkg</th>' '<th>Name</th>' '<th>Published at</th>' '<th>Config</th>' '<th>Dependencies</th>'
html,←⊂'</thead>'
html,←⊂'<tbody>'
:If 0<≢data
col1←{'<td>',⍵,'</td>'}¨' →'[{1+(⍵⍳⍵)=⍳≢⍵}Reg.RemoveMinorAndPatch¨data[;1]]
col2←{'<td>',⍵,'.</td>'}∘⍕¨⊃,/⍳¨buff
col3←{'<td><code>',⍵,'</code></td>'}¨data[;1]
col4←{'<td><code>',⍵,'</code></td>'}¨data[;2]
col5←{'<td><a href="',Reg.VersionOf_REST,'/packages/details/',⍵,'" title="Link to the package configuration">Show</a></td>'}¨data[;1]
bool←PackageHasDependencies¨data[;1]
col6←bool{⍺:'<td><a href="',Reg.VersionOf_REST,'/packages/dependencies/',⍵,'" title="Link to the dependency definition">Show</a></td>' ⋄ '<td>None</td>'}¨data[;1]
html,←⊃,/{(⊂'<tr>'),⍵,⊂('</tr>')}¨↓col1,col2,col3,col4,col5,⍪col6
:EndIf
html,←⊂'</tbody>'
html,←⊂'</table>'
html,←⊆GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
⍝Done
html←PrepareHtmlPageForGroupList list
html←HtmlHeader GetDataTableStuff ⍬
html,←⊂'<h2>List of all groups</h2>'
html,←AddSpecialMessage ⍬
html,←⊂H.OpenTable CalcTableWidth list
html,←⊂'<thead>'
html,←⊂'<tr><th>Group name</th><th>Packages<sup>[1]</sup></th></tr>'
html,←⊂'</thead>'
html,←⊂'<body>'
:If 0<≢list
:If ⊃G.INI.Get'Config:GroupHomePages'
list[;1]←{⍵{'<a href="',⍵,'" title="Link to the group`s home page">',⍺,'</a>'}('/',GetVersion_REST'group-homepage?name='),⍵}¨list[;1]
:EndIf
html,←{'<tr><td>',(1⊃⍵),'</td><td>',(⍕2⊃⍵),'</td></tr>'}¨↓list
:EndIf
html,←⊂'</body>'
html,←⊂'</table>'
html,←⊂'<p>1. Number of published packages of that group</p>'
html,←GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
⍝Done
html←PrepareHtmlPageForMajorVersionList(packageID data);colTitles
html←HtmlHeader ''
html,←⊂'<h2>Major versions of "',packageID,'"</h2>'
html,←AddSpecialMessage ⍬
colTitles←'Package name' 'Major version' 'Number of<br>minor versions'
html,←⊂H.OpenTable colTitles CalcTableWidth data
html,←⊂'<thead>'
html,←⊂'<tr class="my-first-th">'
html,←{'<th>',⍵,'</th>'}¨colTitles
html,←⊂'</thead>'
html,←⊂'<tbody>'
html,←{'<tr><td><a href="',Reg.VersionOf_REST,'/packages/versions/',(1⊃⍵),'-',(2⊃⍵),'" title="List all versions"><code>',(1⊃⍵),'</code></a></td><td>',(2⊃⍵),'</td><td align="right">',(⍕3⊃⍵),'</td></tr>'}¨↓data
html,←⊂'</tbody>'
html,←⊂'</table>'
html,←⊆GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
⍝Done
html←PrepareHtmlPageForPackageDetails(ID json url version);ID_;major;majorMinor
html←HtmlHeader''
:Select version
:Case 'full'
html,←⊂'<h2>Details of &lt;',ID,'&gt;</h2>'
:Case 'major'
(ID_ major)←{⍵{(⍵↓⍺)((1+⍵)↑⍺)}-'-'⍳⍨⌽⍵}ID
html,←⊂'<h2>Details of latest package for &lt;',ID_,'&gt; of major version ',(,major),'</h2>'
:Case 'major+minor'
(ID_ majorMinor)←{⍵{(⍵↓⍺)((1+⍵)↑⍺)}-'-'⍳⍨⌽⍵}ID
html,←⊂'<h2>Details of latest patch for &lt;',ID_,'&gt; for version ',(,majorMinor),'</h2>'
:Case 'none'
html,←⊂'<h2>Details of latest package for &lt;',ID,'&gt;</h2>'
:Else
∘∘∘ ⍝ Paranioa: should not happen of course
:EndSelect
html,←AddSpecialMessage ⍬
json←EscapeSpecialChars json
html,←⊂'<pre><json>',1⊃json
json←MakeURLsLinks json
:If ⊃G.INI.Get'Config:GroupHomePages'
html,←MakeGroupHomepageLink json
:Else
html,←1↓json
:EndIf
html,←⊂'</json></pre>'
html,←⊆GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
⍝Done
html←packageIDs PrepareHtmlPageForPackageList mat;col1;col2;col3;col4;col5;colTitles;col6;col7;colDescription
html←HtmlHeader GetDataTableStuff ⍬
html,←⊂'<h2>List of packages</h2>'
html,←AddSpecialMessage ⍬
colTitles←'Package name' 'Description' 'Major<br>Versions' 'Project URL' 'OS' 'UC' 'Tags'
colDescription←'' '' 'Number of major versions' '' 'Operating System' 'User Command' ''
html,←⊂H.OpenTable+/(≢¨colTitles[2,2~⍨⍳2⊃⍴mat])⌈(≢⍕⌈/mat[;2]),⌈⌿≢¨mat[;2~⍨⍳2⊃⍴mat]
html,←⊂'<thead>'
html,←⊂'<tr class="my-first-th">'
html,←colDescription{'<th ',((0<≢⍺)/'title="',⍺,'" '),'style="align: left">',⍵,'</th>'}¨colTitles
html,←⊂'</thead>'
html,←⊂'<tbody>'
:If 0<≢mat
col1←{'<td><code>',({'<a href="',Reg.VersionOf_REST,'/packages/major_versions/',⍵,'" title="List major versions">',⍵,'</a>'}⍵),'</code></td>'}¨mat[;1]
col2←{'<td>',⍵,'</td>'}¨⍕¨mat[;3]
col3←{'<td align="right">',⍵,'</td>'}¨⍕¨mat[;2]
col4←{'<td>',⍵,'</td>'}¨mat[;1]{0=≢⍵:'- ' ⋄ '<a href="',⍵,'" title="Opens ',⍵,' in a new tab" target="_blank" rel=noopener>',(MassageProjectURL ⍵),'</a>'}¨mat[;4]
col5←{'<td>',⍵,'</td>'}¨mat[;5]
col6←{'<td>',⍵,'</td>'}¨mat[;6]
col7←{'<td>',⍵,'</td>'}¨mat[;7]
html,←⊃,/{(⊂'<tr>'),⍵,(⊂'</tr>')}¨↓⍉↑col1 col2 col3 col4 col5 col6 col7
html,←⊂'</tr>'
:EndIf
html,←⊂'</tbody>'
html,←⊂'</table>'
html,←⊆GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
⍝Done
html←PrepareHtmlPageForServerVersionNo data;links
html←HtmlHeader''
html,←⊂'<h2>Tatin Version</h2>'
html,←AddSpecialMessage ⍬
html,←⊂'<p>Tatin Version running on this server:</p>'
html,←⊆data
html,←⊆GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
⍝Done
html←PrepareHtmlPageForTagList data;noOfCols;colTitles
html←HtmlHeader GetDataTableStuff ⍬
html,←⊂'<h2>List of all tags</h2>'
html,←AddSpecialMessage ⍬
colTitles←'Tag' 'Occurances'
data[;2]←⍕¨data[;2]
html,←⊂H.OpenTable colTitles CalcTableWidth data
html,←⊂'<thead>'
html,←⊂'<tr class="my-first-th">'
html,←{'<th>',⍵,'</th>'}¨colTitles
html,←⊂'</thead>'
html,←⊂'<tbody>'
:If 0<≢data
html,←AddJavaScript data
html,←⊃¨{'<tr><td>',⍺,'</td><td>',⍵,'</td></tr>'}/¨↓data
:EndIf
html,←⊂'</tbody>'
html,←⊂'</table>'
html,←⊆GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
⍝Done
html←PrepareHtmlPageForVersionList(packageID data);links;col1;col2;col3;col4;bool;colTitles
data←⊖data
html←HtmlHeader ''
html,←⊂'<h2>All versions of "',packageID,'"</h2>'
html,←AddSpecialMessage ⍬
colTitles←'Package ID' 'Publishing date' 'Config' 'Dependencies'
html,←⊂H.OpenTable colTitles CalcTableWidth data
html,←⊂'<thead>'
html,←⊂'<tr class="my-first-th">'
html,←{'<th>',⍵,'</th>'}¨colTitles
html,←⊂'</thead>'
html,←⊂'<tbody>'
col1←{'<td><code>',⍵,'</code></td>'}¨data[;1]         ⍝ The package ID
col2←{'<td>',(⍕⍵),'</td>'}¨data[;2]                   ⍝ The publishing Date
links←{'<a href="',Reg.VersionOf_REST,'/packages/details/',⍵,'" title="Link to the package configuration">Show</a>'}¨data[;1]
col3←{'<td>',⍵,'</td>'}¨links
bool←PackageHasDependencies¨data[;1]
links←bool{⍺:'<a href="',Reg.VersionOf_REST,'/packages/dependencies/',⍵,'" title="Link to the dependency definition">Show</a>' ⋄ 'None'}¨data[;1]
col4←{'<td>',⍵,'</td>'}¨links
html,←{'<tr>',⍵,'</tr>'}¨col1,¨col2,¨col3,¨col4
html,←⊂'</tr>'
html,←⊂'</tbody>'
html,←⊂'</table>'
html,←⊆GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
⍝Done
G←ProcessCredentials G;filename;credentials;body;newCredentialsFilename;newCredentials
⍝ Returns a matrix with {group} - Salt - API-key-hash combinations used for authentication.
newCredentialsFilename←(F.AddTrailingSep G.RegistryPath),'Credentials.txt'
filename←(F.AddTrailingSep G.RegistryPath),'Credentials.csv'
:If 0=F.Exists filename
''F.NPUT filename
:EndIf
:If 0=≢credentials←ReadCredentialFile filename
G.Credentials←0 3⍴''
:ElseIf (,'*')≡(∊credentials)~⎕TC,','
G.Credentials←1 3⍴'*' '' ''
:Else
G.Credentials←credentials
:EndIf
:If 0<≢newCredentials←ReadCredentialFile newCredentialsFilename
G.Credentials←G.Credentials ConvertCredentials newCredentials
(⊂⊃¨{⍺,',',⍵}/¨↓G.Credentials)F.NPUT filename 1
F.DeleteFile newCredentialsFilename
:EndIf
G.CredentialsTimestamp←Reg.Timestamp2Float⊃⊃('type' 3)F.Dir filename
⍝Done
response←request ProcessTestCommands path;version
⍝ This function must only be called when G.TestFlag is true
:If G.INI.Exist'CONFIG:SpecialCommands'
:AndIf G.INI.Get'CONFIG:SpecialCommands'
:Select ⎕C path
:Case GetVersion_REST'get-server-path'
response←ReturnRegistryPath request
:Case GetVersion_REST'recompile-index'
Reg.Index.Compile G.RegistryPath
response←request Respond 200
:Case GetVersion_REST'stop'
1 ⎕STOP'#.Tatin.Server.OnRequest'
response←request Respond 200
:Case GetVersion_REST'list-commands'
response←request Respond 200
response.Content←PrepareHTMLforAllSpecialCommands ⍬
:Case GetVersion_REST'set-delete-policy'
response←request Respond 200
response.Content←GetDeletePolicy
:If (⊂request.Content)∊'None' 'Any' 'JustBetas'
(0 1 2)['None' 'Any' 'JustBetas'⍳⊂request.Content]G.INI.Put'Config:DeletePackages'
:Else
response←request Respond 400 1
:EndIf
:Case GetVersion_REST'shutdown'
response←request Respond 200
∆SHUTDOWN←1
:Case GetVersion_REST'crash'
∘∘∘                                ⍝ Deliberate crash for testing error trapping
:Case GetVersion_REST'off'
:If A.IsDevelopment
∘∘∘                            ⍝ In runtime this would be ⎕OFF
:Else
⎕OFF
:EndIf
:Else
response←request RespondWithHTML 404 'Unknown REST command'
:EndSelect
:Else
response←request RespondWithHTML 404 'Unknown REST command'
:EndIf
r←ReadCredentialFile filename;buff
⍝ Read the credential file (either Credentials.txt or Credentials.csv), and remove any comments
⍝ (= lines that start with a semicolon) as well as empty lines.
⍝ Returns a matrix with 4 columns:
⍝ [1] Group name
⍝ [2] API key
⍝ [3] SALT (empty in case of Credentials.txt)
r←0 4⍴⊂''
:If F.IsFile filename
:AndIf 0<≢buff←⊃F.NGET filename 1
:AndIf 0<≢buff←(';'≠⊃¨buff)/buff
:AndIf 0<≢buff←(0<≢¨buff)/buff
buff←{','@(⍸'='=⍵)⊣⍵}¨buff  ⍝ Exchange the deprecated "=" against ","
r←3↑⍤1⊢(↑','A.Split¨buff),⊂''
:EndIf
r←list ReducePkgsList pkgs;pkg;pkgsMajor;pkgs_
r←⍬
pkgs_←⎕C Reg.RemoveVersionNumber¨pkgs
pkgsMajor←⎕C Reg.RemoveMinorAndPatch¨pkgs
:For pkg :In list
:If Reg.IsValidPackageID_WithoutVersionNo pkg
r,←(pkgs_≡¨⊂⎕C pkg)/pkgs
:ElseIf Reg.IsValidPackageID_WithMajorNo pkg
r,←(pkgsMajor≡¨⊂⎕C pkg)/pkgs
:Else
⍝ Ignored because invalid
:EndIf
:EndFor
{r}←ReloadThisWorkspaceIfChanged INI
⍝ Checks whether the current workspace was modified since the WS was loaded. If that is the case and
⍝ the INI entry "ReloadWS" is 1 then we issue a ⎕LOAD
r←⍬
:If ∆WS_HASH≢GetWorkspaceHash                  ⍝ Has the WS changed since it was loaded?
:If ⊃INI.Get'Config:ReloadWS'
0 INI.Put'Config:MaxNoOfThreads'       ⍝ Prevent anybody from connecting
Log'Workspace has changed on disk, therefore we do a reload...'
⎕DL 5+10×2<≢⎕TNUMS                     ⍝ Gives it at least 5 seconds and 15 if busy
⎕LOAD ⎕WSID
:EndIf
:EndIf
{r}←{threshold}ReportNumberOfThreads INI;maxNoOfThreads
⍝ If the number of threads is not limited to a very small number (`threshold`, which defaults to 20)
⍝ anyway and there is less than 20% between the threshold and the number of threads currently
⍝ running, then we report our findings to the log file.
⍝ Return 1 when it wrote something to the log and 0 otherwise
r←0
threshold←{0<⎕NC ⍵:⍎⍵ ⋄ 20}'threshold'
maxNoOfThreads←INI.Get'Config:MaxNoOfThreads'
:If threshold>maxNoOfThreads÷20   ⍝ Less than 20%?!
:AndIf 100<maxNoOfThreads          ⍝ Not limited to a very small number for any reason?
Log'Number of threads: ',(⍕≢⎕TNUMS),'; ⎕WA=',(⍕⌊⎕WA÷1000000),'MB'
r←0
:EndIf
r←x Respond y
⍝ Cover for Rumba's `Respond` with the purpose to add Tatin-specific custom headers, for example x-tatin, carrying the Tatin version number
⍝ x ←→ Message
⍝ y ←→ Status Code, [Include HTML Content 1|0]
r←x R.Respond y
r.Headers,←⊂Reg.TatinVersionAsHttpHeader
:If (⊂'application/json')∊request.Accept.MediaRange
r.ContentType←'application/json'
:EndIf
⍝Done
response←request RespondWithHTML y;html;msg;statusCode;caption
⍝ Compiles an HTML response with "caption" becoming an <h2> tag and
⍝ the (optional) "msg" one to many <p> tags.
(statusCode caption msg)←3↑(⊆y),'' '' ''
:If 0=≢caption
caption←GetReasonPhraseFor statusCode
:EndIf
response←request Respond statusCode
html←HtmlHeader''
html,←⊂'<h2>',caption,' (',(⍕statusCode),')</h2>'
html,←AddSpecialMessage ⍬
:If 0<≢msg
html,←{'<p>',⍵,'</p>'}¨⊆msg
:EndIf
html,←'</body>' '</html>'
response.Content←MassageHTML html
⍝Done
Return404←{
⍝ ⍵ is a request object. Call this for JSON requests only.
⍺←''
msg←⍺
request←⍵
response←request Respond 404 0
response.Content←msg
response
}
response←ReturnCredentialReport request;html
⍝ Returns a report on which groups (if any) require credentials and which don't.
html←HtmlHeader''
html,←⊂'<h2>Credential Report</h2>'
html,←AddSpecialMessage ⍬
html,←GetCredentialReport↓⍉G.Credentials[;1 2]
html,←⊆GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
response←request ReturnHTML html
⍝Done
response←ReturnDeletePolicy request
⍝ Returns the "delete" policy of the current server
response←R.NewResponse request
response.StatusCode←200
response.Content←GetDeletePolicy
⍝Done
response←ReturnDependencies request;level;packages;data;qdmx
⍝ Returns all dependencies for the given package(s)
:Trap Reg.ErrorNo
response←R.NewResponse request
response.StatusCode←200
level←⊃A.ToNum request R.GetQueryParameter'level'
packages←','A.Split ⎕C request R.GetQueryParameter'packages'
data←2 Reg.FindDependenciesLocally G.RegistryPath G.RegistryPath packages level
data←{⊃,/1↓⎕NPARTS ⍵}¨data
response←request ReturnJSON Reg.JSON data
:Else
qdmx←⎕DMX
response←request Respond 400 0
response.Content←qdmx.EM
:EndTrap
⍝Done
response←request ReturnDependencyFiles packageIDs;json;data;html;qdmx;packageID;filename;b
⍝ Returns config files or ⍬ for every packageID
:Trap Reg.ErrorNo
:If IsJsonRequest request.Headers
:If 0∊b←F.IsDir G.RegistryPath∘,¨{','∊⍵:','(≠⊆⊢)⍵ ⋄ ⊆⍵}packageIDs
response←R.NewResponse request
response←request Respond 404 0
response.Content←'Not found: ',⊃{⍺,',',⍵}/(~b)/{','∊⍵:','(≠⊆⊢)⍵ ⋄ ⊆⍵}packageIDs
:Else
json←ReturnDependencyFiles_ packageIDs
response←R.NewResponse request
response.Content←json
:EndIf
:Else
packageID←packageIDs               ⍝ For HTML it's a single one for sure
filename←G.RegistryPath,packageID,'/',Reg.DependenciesFilename
:If F.IsFile filename
data←⊃F.NGET filename 1
html←PrepareHtmlPageForDependencies data
response←request ReturnHTML html
:Else
response←request Respond 404 1
:EndIf
:EndIf
:Else
qdmx←⎕DMX
response←request Respond 400 0
response.Content←qdmx.EM
:EndTrap
⍝Done
json←ReturnDependencyFiles_ packageIDs;ns;packageID;deps;filename
⍝ Checks for every package ID whether it's hosted or not.
⍝ * If it is then the dependency file is returned for that package ID, or ⍬ if there is no such file.
⍝ * Packages not hosted are not mentioned at all.
ns←⎕NS''
ns.data←''
packageIDs←','A.Split packageIDs
:For packageID :In packageIDs
:If F.IsDir G.RegistryPath,packageID
filename←G.RegistryPath,packageID,'/',Reg.DependenciesFilename
:If F.IsFile filename
:AndIf 0<≢deps←⊃F.NGET filename 1
deps←deps GetAllDependencies deps
:Else
deps←⊂'null'
:EndIf
ns.data,←⊂packageID deps
:EndIf
:EndFor
json←Reg.JSON ns
⍝Done
response←request ReturnFiles filename;⎕TRAP
response←R.NewResponse request
:Select ⎕C 3⊃⎕NPARTS filename
:Case '.css'
response.ContentType←'text/css'
:Case '.ico'
response.ContentType←'image/x-icon'
:Case '.png'
response.ContentType←'image/png'
:Case '.gif'
response.ContentType←'image/gif'
:Case '.zip'
response.ContentType←'application/zip'
:Else
response.ContentType←'text/html'
:EndSelect
response.FilePath←F.ExpandPath,filename
:If F.IsFile response.FilePath
response.StatusCode←200
response.IsFile←1
response.Headers,←⊂'X-Robots-Tag' 'noindex'
response.Headers,←⊂'Cache-Control' 'public'   ⍝ Allow caching
:Else
response←request Respond 404
response.Content←'File not found'
:EndIf
⍝Done
response←ReturnGroupHomepage(groupName request);html;htmlFilename;folder;p;parms;email;caption;data;col1;col2;colTitles;col3;col4
response←R.NewResponse request
p←{'<p>',⍵,'</p>'}
folder←G.HTDOCS,'../Groups/'
'Create!'F.CheckPath folder
htmlFilename←folder,groupName,'.htm'
html←HtmlHeader GetDataTableStuff ⍬
html,←⊂'<h2>Home page of group "',groupName,'"</h2>'
html,←AddSpecialMessage ⍬
:If F.IsFile htmlFilename
html,←⊂⊃⎕NGET htmlFilename
html,←⊂'<br>'
html,←⊂'email'H.Label'Single email address:'
html,←⊂H.BR
email←'email'Reg.GetGroupData G.RegistryPath groupName
parms←⎕NS''
parms.(id name type value)←'email' 'email' 'email'email
html,←⊂'required disabled'H.Input parms
html,←⊂H.BR
html,←⊂'<br>'
html,←⊂'<form action="',('group-homepage-edit'),'">'
caption←'Edit'
:Else
html,←⊂p'There is no home page yet for the group "',groupName,'"'
html,←⊂'<br>'
html,←⊂'<form action="',('group-homepage-create'),'">'
caption←'Create'
:EndIf
parms←⎕NS''
parms.(name method type value class)←'name' 'post' 'submit'groupName'button'
parms.title←'You may ',(⎕C caption),' the home page if you can provide a valid password (API-key)'
html,←⊂parms H.Button caption
html,←⊂'</form>'
data←GetPackagesOfGroup groupName
:If 0<≢data
html,←⊂'<h3 style="padding-top:1em;">Packages owned by "',groupName,'"</h3>'
colTitles←'Package name' 'Description' 'OS' 'UC<sup>*</sup>'
html,←⊂H.OpenTable colTitles CalcTableWidth data
html,←⊂'<thead>'
html,←⊂'<tr>'
html,←{'<th>',⍵,'</th>'}¨colTitles
html,←⊂'</tr>'
html,←⊂'</thead>'
html,←⊂'<tbody>'
col1←{'<td><code>',({'<a href="',Reg.VersionOf_REST,'/packages/major_versions/',⍵,'" title="List major versions">',⍵,'</a>'}⍵),'</code></td>'}¨data[;1]
col2←{'<td>',⍵,'</td>'}¨data[;3]
col3←{'<td>',⍵,'</td>'}¨data[;5]
col4←{'<td>',⍵,'</td>'}¨data[;6]
html,←⊃,/{(⊂'<tr>'),⍵,(⊂'</tr>')}¨↓⍉↑col1 col2 col3 col4
html,←⊂'</tr>'
html,←⊂'</tbody>'
html,←⊂'</table>'
html,←⊂'<p>* UC means "User Command"</p'
:EndIf
html,←⊆GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
response←request ReturnHTML html
⍝Done
response←request ReturnHTML html;i;tag;where
⍝ Returns the HTML to the client
response←R.NewResponse request
response.Headers,←⊂Reg.TatinVersionAsHttpHeader
response.StatusCode←200
response.Content←MassageHTML html
response.Close←1
⍝Done
response←request ReturnJSON json
⍝ Returns the JSON to the client
response←R.NewResponse request
response.ContentType←'application/json; charset=utf-8'
response.StatusCode←200
response.Content←json
response.Headers,←⊂'X-Robots-Tag' 'noindex'
⍝Done
response←ReturnLicenses request;data;response;html;path;txt;html2;ns;names;urls
⍝ Returns information regarding the licenses tolerated by the server, if any.
:If IsJsonRequest request.Headers
:If G.INI.Exist'LICENSE'
data←G.INI.Get'LICENSE:'
:AndIf 0<≢⊃data[1;2]
response←R.NewResponse request
response.StatusCode←200
:If (,'1')≡,request R.GetQueryParameter'verbose'
response←request ReturnJSON Reg.JSON data
:Else
response←request ReturnJSON Reg.JSON 2⊃data[1;]
:EndIf
:EndIf
:Else
html←HtmlHeader''
html,←⊂'<h2>Licenses</h2>'
html,←AddSpecialMessage ⍬
html,←⊂'<div style="max-width: 1000px;">'
path←G.HTDOCS,'Assets/snippets/'
txt←⊃F.NGET(path,'Licensing.md')1
(html2 ns)←##.MarkAPL.Markdown2HTML txt
'Converting License markdown failed'Reg.Assert ns.report
html,←html2
names←⊃G.INI.Get'LICENSE:names'
urls←⊃G.INI.Get'LICENSE:urls'
(html2 ns)←##.MarkAPL.Markdown2HTML urls{'* [',⍵,'](',⍺,')'}¨names
'Converting License markdown failed'Reg.Assert ns.report
html,←html2
html,←⊂'</div>'
html←'</body'{⍵↑⍨¯1+((≢⍺)↑¨⍵)⍳⊂⍺}html
html,←GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
response←request ReturnHTML html
:EndIf
⍝Done
response←ReturnNOT_IMPLEMENTED request;p
response←R.NewResponse request
response.StatusCode←501
p←R.GetReasonPhrase response
response.Content←'Not implemented'
⍝Done
response←ReturnRegistryPath request
⍝ Returns the path of the currently managed Registry
response←R.NewResponse request
response.Content←'expand'F.NormalizePath G.RegistryPath
⍝Done
response←ReturnUsageData request;html;filename;list
⍝ Returns a page that offers information and download links for browser requests and lists
⍝ and files in case of a JSON request
response←R.NewResponse request
:If IsJsonRequest request.Headers
:If 'list'≢request.Query
list←','(≠⊆⊢)2⊃request.QueryParameters[1;]
:If 0=≢list
response.StatusCode←404
:Else
filename←(∊P.LogFolder),⊃request.QueryParameters[1;2]
response.IsFile←1
response.FilePath←filename
response.ContentType←'application/zip'
:EndIf
:Else                          ⍝ No, so we just return a list
:If 0<≢list←⊃F.Dir(∊P.LogFolder),'*.zip'
response.Content←⊃{⍺,',',⍵}/(≢∊P.LogFolder)↓¨list
:EndIf
:EndIf
:Else
html←HtmlHeader(⊂'<script type="text/javascript">'),(GetJavaScriptForTabbedInterface'info-tab'),(⊂'</script>')
html,←⊂'<h2>Usage data</h2>'
html,←AddSpecialMessage ⍬
html,←GetStatistics ⍬
html,←⊆GetFooter
html,←⊂'</body>'
html,←⊂'</html>'
response←request ReturnHTML html
:EndIf
⍝Done
response←request ReturnUsageDataFiles fullPath;filename
filename←{⍵↓⍨⌊/⍵⍳'/\'}fullPath
response←request ReturnFiles(∊P.LogFolder),filename
{r}←{iniFile}Run flag;⎕TRAP;parms;more;A;F;G;R;S;P;testFlag;trapFlag
⍝ This function starts the Tatin server
r←⍬
⎕IO←1 ⋄ ⎕ML←1
:If flag
trapFlag←¯1     ⍝ Will be defined by the INI file but you may overwrite with 0 or 1
testFlag←¯1     ⍝ Will be defined by the INI file but you may overwrite with 0 or 1
iniFile←{0<⎕NC ⍵:⍎⍵ ⋄ './server.ini'}'iniFile'
r←iniFile(##.Server.TatinAmendments ##.Plodder.Run)testFlag trapFlag   ⍝ <== Workhorse
⍝ Plodder.Run executes ⎕OFF in runtime or when the INI file says so,
⍝ therefore we get here only in development _and_ when the INI file does NOT say so.
∆SHUTDOWN←0
:EndIf
⍝Done
response←SaveGroupHompeage request;content;email;apiKey;groupName;html
:If ⊃G.INI.Get'Config:GroupHomePages'
groupName←request R.GetQueryParameter'group'
email←request R.GetQueryParameter'email'
apiKey←request R.GetQueryParameter'apiKey'
content←request.Content
SaveGroupHompeage_ groupName content email
response←ReturnGroupHomepage groupName request
:Else
response←RespondWithHTML 401 'Not authorized'
:EndIf
⍝Done
{r}←SaveGroupHompeage_(group markdown email);html;parms;folder;dcfFilename;htmlFilename;dcfTie;ns
parms←##.MarkAPL.CreateParms
parms.createFullHtmlPage←0
parms.verbose←0
parms.ignoreEmbeddedParms←1
parms.bookmarkLink←0
markdown←MassageMarkdown markdown
(html ns)←parms ##.MarkAPL.Markdown2HTML markdown
folder←'expand'F.NormalizePath G.HTDOCS,'/../Groups/'
'Create!'F.CheckPath folder
dcfFilename←folder,group,'.dcf'
htmlFilename←folder,group,'.htm'
:If 0=⎕NEXISTS dcfFilename
dcfTie←dcfFilename ⎕FCREATE 0
(1 3⍴0 ¯1 0)⎕FSTAC dcfTie ⍝ Let everyone do anything
(10↑'toc' 'group' 'markdown' 'email',10⍴⊂'')⎕FAPPEND dcfTie  ⍝ Table of contents with 10 items
group ⎕FAPPEND dcfTie
markdown ⎕FAPPEND dcfTie
email ⎕FAPPEND dcfTie
{''⎕FAPPEND ⍵}¨6⍴dcfTie
⎕FUNTIE dcfTie
:EndIf
dcfTie←dcfFilename ⎕FSTIE 0
markdown ⎕FREPLACE dcfTie 3
email ⎕FREPLACE dcfTie 4
⎕FUNTIE dcfTie
(⊂html)⎕NPUT htmlFilename 1
⍝Done
response←SavePackage request;packageID;target;tempFolder;filename;msg;statusCode;qdmx;exc;rc;list;list_lc;packageID2
⍝ `packageID` is a valid package ID
⍝ This function saves the data in the appropriate folder which of course must not exist.
packageID←request.RequestTarget
target←G.RegistryPath,'/',packageID
list←1 Reg.Index.GetRegistryIndex G.RegistryPath
:If (⊂packageID)∊list
response←request Respond 400
response.Content←'The package has already been published'
:Return
:EndIf
list←Reg.RemoveVersionNumber¨list
:If ~(⊂Reg.RemoveVersionNumber packageID)∊list
list_lc←⎕C list
packageID2←⎕C Reg.RemoveVersionNumber packageID
:AndIf (⊂packageID2)∊list_lc
response←request Respond 400
response.Content←'The package has already been published with a different spelling (case)'
:Return
:EndIf
tempFolder←F.GetTempSubDir''
filename←tempFolder,'/',packageID,'.zip'
⍝ Tatin 0.104.0 and earlier did Base64-encode zipped data. There is no need to do this when it
⍝ is properly indicated with on the HTTP header. We tell by the "Content-type".
:If 'application/octet-stream'≡'content-type'GetFromHeaders request.Headers
request.Content Reg.WriteNativeFile filename
:Else
(Reg.Base64 request.Content)Reg.WriteNativeFile filename
:EndIf
:Trap 90
(statusCode msg)←1 Reg.PublishPackage filename G.RegistryPath G
:Else
qdmx←⎕DMX
exc←⎕EXCEPTION
:If ∨/'Central Directory corrupt.'⍷⍕exc
response←request RespondWithHTML 400 'Corrupted zip file'
:Else
response←request RespondWithHTML 400 'Could not unzip'
:EndIf
:Return
:EndTrap
response←request Respond statusCode
response.Content←msg
:If response.StatusCode=200
Reg.Index.Compile G.RegistryPath
⎕DL 0.5
(rc msg)←Emails.SendMail_PublishedPkg G.INI packageID G.RegistryPath
:If rc≠0
P.AppLog⊆'*** Error'
P.AppLog⊆'Sending email to gatekeeper with notification of a published package failed: ',(⍕rc),'; ',⍕∊rc
:EndIf
:EndIf
F.RmDir tempFolder
⍝Done
{r}←{add}SendCrashMail y;rc;msg
⍝ When called via HandleError then `y` is a namespace with all sorts of information.
⍝ Might also be just ⍬.
⍝ `add` can be additional information when called "normally".
r←⍬
add←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'add'
(rc msg)←add Emails.SendCrashMail G.INI
:Trap (~G.TestFlag)/0
:If rc≠0
P.AppLog⊆'*** Error'
P.AppLog⊆'Sending crash report failed: ',(⍕rc),'; ',⍕∊msg
:EndIf
:EndTrap
⍝Done
r←StaticFolder
r←'Assets/'
r←TAB
r←⎕UCS 9
success←TatinAmendments G;congaPath
⍝ Called by Plodder's `Run` operator.
⍝ In charge for making Tatin amendments.
∆STARTED←60 ⎕DT⊂⎕TS
∆WS_HASH←GetWorkspaceHash
CreateAllRefs
P←##.Plodder
P.G.RegistryPath←F.ExpandPath⊃P.G.INI.Get'CONFIG:Registry'
P.LogFolder←P.G.INI.Get'LOGGING:Folder'
P.G←ProcessCredentials P.G
:If 0=P.G.INI.Exist'CONFIG:GroupHomePages'
0 P.G.INI.Put'CONFIG:GroupHomePages'  ⍝ INI entry was created in 0.72.0, and the default is 0
:EndIf
:If 9=#.⎕NC'ErrorParms'
:EndIf
ExecuteMaintenanceCode G
:If 'CLEAR WS'≡⎕WSID
congaPath←('expand'##.FilesAndDirs.NormalizePath G.RegistryPath,'..'),'/Server/Assets/Runtime/Conga'
:Else
congaPath←P.GetAssetPath,'/Runtime/Conga'
:EndIf
success←1
⍝Done
r←Version
r←##.Registry.Version
﻿:Namespace Tatin
⍝ This script directs calls to Tatin user command to Tatin itself.
⍝ It's just an interface that does not do anything by itself.
⍝ Version 0.4.0 ⋄ 2024-03-18 ⋄ Kai Jaeger
∇ PrintError dummy;msg
msg←''
:If 3=⎕NC'⎕SE._Tatin.Reg.Version'
msg←' Tatin is not installed correctly. Please remove and install again.'
:EndIf
⎕←msg
∇
∇ r←List;ref
r←''
:If 9=⎕NC'⎕SE._Tatin'
ref←GetRefToTatin''
:If 3=ref.UC.⎕NC'List'
r←ref.UC.List
:Else
PrintError''
:EndIf
:EndIf
∇
∇ r←level Help cmd;ref;SourceFile
r←0⍴⊂''
:If 9=⎕NC'⎕SE._Tatin'
ref←GetRefToTatin''
:If 3=ref.⎕NC'UC.List'
r←level ref.UC.Help cmd
:Else
PrintError''
:EndIf
:Else
⎕←'Tatin not found'
:EndIf
∇
∇ r←Run(cmd args);ref;SourceFile
r←''
SourceFile←##.SourceFile
:If 9=⎕NC'⎕SE._Tatin'
ref←GetRefToTatin''
:If 3=ref.⎕NC'UC.List'
r←ref.UC.Run(cmd args)
:Else
PrintError''
:EndIf
:Else
⎕←'Tatin not found'
:EndIf
∇
∇ ref←GetRefToTatin dummy;statuse
:If 0<⎕SE.⎕NC'Link'
statuse←⎕SE.Link.Status''
:AndIf 2=⍴⍴statuse
:AndIf (⊂'#.Tatin')∊statuse[;1]
:AndIf 0<⎕SE._Tatin.⎕NC'DEVELOPMENT'
:AndIf (,1)≡,⎕SE._Tatin.DEVELOPMENT
ref←#.Tatin
:Else
ref←⎕SE._Tatin
:EndIf
∇
:EndNamespace
Assert←{⍺←⊢ ⋄ 0∊⍵:⍺ ⎕SIGNAL ##.Registry.ErrorNo ⋄ shy←0}
CheckTempFolder(name ps);⎕TRAP
⎕TRAP←0 'S'
{⍵:.}0<≢⊃F.Dir(739⌶0),'/kai*'
⍝Done
Cleanup;F;folder;configFolder;rc;msg;res
F←##.FilesAndDirs
:If 0<⎕NC'∆P'  ⍝ ∆P is the server instance
∆ShutdownTestServer ⍬
:If 0<⎕NC'∆TEMP_SERVER_FOLDER'
{}F.RmDirByForce ∆TEMP_SERVER_FOLDER
⎕EX'∆TEMP_SERVER_FOLDER'
:EndIf
:EndIf
⎕SE._Tatin.Client.⎕EX'∆PrintToSession'
folder←(739⌶0),'/TatinTests/'
(rc msg)←F.RmDirByForce folder
Assert rc=0
⎕DL 0.2
Assert~F.IsDir folder
(rc msg res)←∆UCMD'Init '
Assert 0=rc
{}TC.InitUserSettings''
⎕EX'∆CongaFolder'
:If 0<⎕NC'∆CACHE_PARMS'
⎕SE.Tatin.MyUserSettings.caching←∆CACHE_PARMS
:EndIf
⎕EX'∆TEST'
:If 0<⎕NC'∆TEMP_REGISTRY_FOLDER'
{}F.RmDirByForce ∆TEMP_REGISTRY_FOLDER
⎕EX'∆TEMP_REGISTRY_FOLDER'
:EndIf
:If 0<⎕NC'∆TEMP_TEST_DATA'
{}F.RmDirByForce ∆TEMP_TEST_DATA
⎕EX'∆TEMP_TEST_DATA'
:EndIf
⍝Done
Cleanup_Cache;list;rc;msg
:If 0<≢list←F.ListDirs TC.GetPathToPackageCache,'/'
:AndIf 0<≢list←{⍵/⍨(⊂'temp')≢¨⍨2⊃¨⎕NPARTS¨⍵}list
(rc msg)←F.RmDirByForce¨{⍵/⍨(⊂'temp')≢¨⍨2⊃¨⎕NPARTS¨⍵}list
msg Assert rc=0
:EndIf
{}∆InitUserSettings 0
⍝Done
Cleanup_DeletePkg
∆RestoreMarkaplInTestServer 1
Cleanup_Log
:If 0<⎕NC'∆LOG_PATH'
{}F.RmDirByForce ∆LOG_PATH
⎕EX'∆LOG_PATH'
:EndIf
⎕EX'TS'
{r}←ExecQuadOff(successFlag caption)
r←⍬
:If 'OFF2='{0=+/b←⍺∘≡¨(≢⍺)↑¨⍵:0 ⋄ ⊃(//)⎕VFI(≢⍺)↓(b⍳1)⊃⍵}1 ⎕C¨⊣2 ⎕NQ #'GetCommandLineArgs'
:If successFlag
⎕OFF
:Else
⎕OFF 123
:EndIf
:Else
⎕←caption,' test suite was ',((~successFlag)/'un'),'successfully executed'
:EndIf
r←GetAllUserCommandFolder
⍝ Returns a list with all folders scanned by Dyalog for user commands.\\
⍝ Removes trailing (back-)slashes if any.
r←⎕SE.SALT.Settings'cmddir'
((':'=r)/r)←';' ⍝ Linux!
r←';'(≠⊆⊢)r
r←(-(⊃¨¯1↑¨r)∊¨⊂'/\')↓¨r
r←Initial parms;isWindows;autoStart;ini;reg;json;ns;local;rc;msg;res;flag;isBatch
r←1
RI←##.Client.RegistryIndices
isWindows←Reg.IsWindows
isBatch←{~(⊂⍵)∊''⍬:0 ⋄ ⍵.batchFlag}parms
:If isWindows
:AndIf autoStart←isBatch{⍺:1 ⋄ 1 ##.Client.YesOrNo ⍵}'Would you like to start the Tatin test server automatically?'
⍝ For an auto-start we must copy the test data into a temp folder first
∆TEMP_SERVER_FOLDER←F.GetTempSubDir'Tatin-Test-Server'
⎕←'Copying data for the test server...'
∆CopyTestServerDataTo ∆TEMP_SERVER_FOLDER
⎕←' Server data copied!'
∆TEMP_SERVER_FOLDER,←'/Registry/'
:Else
autoStart←0
ini←⎕NEW ##.IniFiles(,⊂##.CiderConfig.HOME,'/TestServer/Server/server.ini')
reg←⎕NEW ##.Client.DefineRegistry(,⊂'[localhost]https://localhost')
reg.port←⊃ini.Get'CONFIG:Port'
∆TEMP_SERVER_FOLDER←∆GetServerPath
:EndIf
⍝ Local folder (not managed):
∆TEMP_REGISTRY_FOLDER←F.GetTempSubDir'Tatin-Test-Registry'
⎕←'Copying data for the (un-managed) test registry...'
∆TEMP_REGISTRY_FOLDER∘{(⍺,'/')⎕NCOPY⍠1⊣⍵}¨F.ListDirs #.Tatin.CiderConfig.HOME,'/TestServer/Registry/*'
⎕←' Local test data copied!'
⍝ --------- Copy the test data to a temp folder
∆TEMP_TEST_DATA←F.GetTempSubDir'Tatin-Test-Data'
⎕←'Copying other test data for...'
∆TEMP_TEST_DATA∘{(⍺,'/')⎕NCOPY⍠1⊣⍵}¨⊃F.Dir #.Tatin.CiderConfig.HOME,'/TestData/*'
⎕←' Other test data copied!'
⍝ --------- Now we need to copy the test data to a different (from the server) temp folder for pure local tests
json←⊃⎕NGET ∆TEMP_TEST_DATA,'/tatin-client.json'
ns←⎕JSON⍠('Dialect' 'JSON5')⊣json
local←1⊃ns.registries
Assert'local'≡local.alias
local.uri←∆TEMP_REGISTRY_FOLDER
(1⊃ns.registries)←local
json←⎕JSON⍠('Dialect' 'JSON5')('Compact' 0)⊣ns
(⊂json)⎕NPUT(∆TEMP_TEST_DATA,'/tatin-client.json')1
(rc msg res)←∆UCMD'Init "',∆TEMP_TEST_DATA,'/"'
Assert 0=rc
⍝ --------------------------------------------
∆CACHE_PARMS←∆InitUserSettings 0
⎕SE._Tatin.Client.∆PrintToSession←0
{}''∆GetTempDir ⍬
∆TEST←1 ⍝ Used to add an HTTP header to any request. Influences only logging on the server side but implicitly also usage data
flag←0
:If autoStart
∆P←∆StartServerProcessForTests 0
:Repeat
:If 0=flag←1 TC.Ping'[localhost]'
:EndIf
:Until flag
:EndIf
⍝ T.exec_after_each_test←(⍕⎕THIS),'.CheckTempFolder'
⍝ T.exec_after_each_test←'#.Tatin.Admin.CheckExecuteTime'
⍝Done
r←Initial_Cache parms;path
r←1
path←(739⌶0),'/TatinTests/Cache'
F.MkDir path
TC.MyUserSettings←⎕NEW TC.UserSettings(,⊂path)
TC.MyUserSettings.caching←1 ⍝ Emphasize it (1 is the default anyway)
TC.MyUserSettings.path2cache←path
:If 0=parms.batchFlag
⎕←'*** Attention: all tests of the "Cache" group need to be executed one after the other'
:EndIf
⍝Done
Initial_DeletePkg
∆RestoreMarkaplInTestServer 1
success←Initial_Log parms;path
path←∆TEMP_TEST_DATA
∆LOG_PATH←(F.GetTempSubDir'Tatin-Log'),'/'
∆LOG_PATH ⎕NCOPY⍠('Wildcard' 1)⊣path,'/App-Log/*'
TS←##.Server
success←1
⍝Done
Initial_UC∆DeletePkg
∆RestoreMarkaplInTestServer 1
{codeCoverageFlag}←Prepare;testFilename;ask;answer;ignore
'This WS appears to be prepared for running as a Tatin Server'⎕SIGNAL 11/⍨0<##.Client.⎕NC''
'Not enough memory: should provide at least 128MB for the tests'Assert 100<⌊247813016÷1024×1024
:If 0=##.Client.⎕NC'MyUserSettings'
:EndIf
T←⎕NEW ##.Tester2 ⎕THIS
codeCoverageFlag←0
⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Might become usesul again one day ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
⍝ :If 0 ##.Client.YesOrNo'Check Temp\ folder for left-overs?'
⍝     T.exec_after_each_test←'#.Kai'
⍝     T.exec_after_each_test←'#.Tatin.Admin.CheckTempFolderAfterTestFunctionRun'
⍝ :ElseIf 0 ##.Client.YesOrNo'Check user settings?'
⍝     T.exec_after_each_test←'#.Tatin.Admin.CheckUserSettings'
⍝ :ElseIf 0 ##.Client.YesOrNo'Check user settings for no-caching?'
⍝     T.exec_before_each_test←'#.Tatin.Admin.Check_Caching_Before'
⍝     T.exec_after_each_test←'#.Tatin.Admin.Check_Caching_After'
⍝ :ElseIf 0 ##.Client.YesOrNo'Check user number of IP connections?'
⍝     T.exec_before_each_test←'#.Tatin.Admin.Check_IP_Before'
⍝     T.exec_after_each_test←'#.Tatin.Admin.Check_IP_After'
⍝ :ElseIf 0 ##.Client.YesOrNo'Checkfor permanent connections?'
⍝     T.exec_before_each_test←'#.Tatin.Admin.Check_PermanentConnection_Before'
⍝     T.exec_after_each_test←'#.Tatin.Admin.Check_PermanentConnection_After'
⍝ :EndIf
⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
testFilename←##.Admin.GetCoverageFilename
:If ⎕NEXISTS testFilename,'.profile'
ask←{⎕←⍵,'; 1=append, 2=replace, 3=no code coverage' ⋄ a←⎕ ⋄ ~(⊂a)∊1 2 3:∇ ⍵ ⋄ ⊃a}
answer←⊃ask'Coverage file already exists'
:If 2≡answer
1 ⎕NDELETE testFilename,'.profile'
1 ⎕NDELETE testFilename,'.cr'
:EndIf
:EndIf
codeCoverageFlag←answer∊1 2
:If 3≠answer
T.codeCoverage←⎕NEW ##.CodeCoverage(,⊂'#.Tatin.Client,#.Tatin.Registry,#.Tatin.Server')
T.codeCoverage.filename←testFilename
ignore←''
ignore,←⊂'#.Tatin.Client.InitUserSettings'
ignore,←⊂'#.Tatin.Registry.Create_UUID'
ignore,←⊂'#.Tatin.Client.GetUserHomeFolder'
ignore,←⊂'#.Tatin.Client.PublishPackageToRemoteRegistry_2'
ignore,←⊂'#.Tatin.Client.CreateAllRefs_Client'
ignore,←⊂'#.Tatin.Client.GetMyUCMDsFolder'
T.codeCoverage.ignore←⊃{⍺,',',⍵}/ignore
:EndIf
A←##.APLTreeUtils2
F←##.FilesAndDirs
TC←##.Client
Reg←##.Registry
D←TC.Dependencies
R←##.RumbaLean.Core
⍝Done
{r}←PrepareForBatchTesting dummy
r←⍬
T←⎕NEW ##.Tester2 ⎕THIS
A←##.APLTreeUtils2
F←##.FilesAndDirs
TC←##.Client
Reg←##.Registry
D←TC.Dependencies
R←##.RumbaLean.Core
⍝Done
{success}←{debugFlag}RunBatchTests flag;rc;log
success←0
:If flag
debugFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'debugFlag'
'Invalid left argument'Assert(⊂debugFlag)∊0 1
'Invalid right argument'Assert(⊂flag)∊0 1
PrepareForBatchTesting ⍬
(rc log)←T.RunBatchTests debugFlag
success←0=rc
SaveBatchTestLog log
ExecQuadOff success'Tatin client batch'
:EndIf
⍝Done
RunTests;htmlFilename;log;rc;codeCoverageFlag
codeCoverageFlag←Prepare
(rc log)←T.Run 1
:If codeCoverageFlag
:AndIf 0 ##.Client.YesOrNo'View CodeCoverage report?'
htmlFilename←##.CodeCoverage.ProcessDataAndCreateReport T.codeCoverage.filename
:EndIf
{r}←SaveBatchTestLog log;logFolder;F
r←⍬
F←##.FilesAndDirs
:If 0<≢logFolder←F.NormalizePath F.GetTempPath,'/TatinBatchTests/log.txt'
log←∊¨log                  ⍝ In order to circumvent bug #18 in Tester2
:If 'Create!'F.CheckPath logFolder
(⊂log)⎕NPUT(logFolder,'/log.txt')1
:EndIf
:EndIf
⍝Done
r←Test_API_001(stopFlag batchFlag);⎕TRAP;res1;qdmx
⍝ Exercise ⎕SE.Tatin.ListRegistries
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res1←⎕SE.Tatin.ListRegistries''
→T.PassesIf 2<≢res1
→T.PassesIf (¯1+≢RI.AllIndices)=2⊃⍴res1
res1←⎕SE.Tatin.ListRegistries 0
→T.PassesIf 2<≢res1
→T.PassesIf (¯1+≢RI.AllIndices)=2⊃⍴res1
res1←⎕SE.Tatin.ListRegistries 1
→T.PassesIf 2<≢res1
→T.PassesIf (≢RI.AllIndices)=2⊃⍴res1
:Trap ##.Registry.ErrorNo
res1←⎕SE.Tatin.ListRegistries 10
→T.FailsIf 1
:Else
qdmx←⎕DMX
→T.PassesIf'"type" (⍵) must be a Boolean or empty'≡qdmx.EM
:EndTrap
r←T._OK
⍝Done
r←Test_API_002(stopFlag batchFlag);⎕TRAP;res
⍝ Exercise ⎕SE.Tatin.GetUserHomeFolder
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←⎕SE.Tatin.GetUserHomeFolder''
→T.PassesIf F.IsDir res
res←⎕SE.Tatin.GetUserHomeFolder'Foo'
→T.PassesIf'Foo'≡'/\'A.Last res
r←T._OK
⍝Done
r←Test_API_003(stopFlag batchFlag);⎕TRAP;expected;res;GetVersion
⍝ Exercise ⎕SE.Tatin.ListVersions
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
GetVersion←{1↓⍵/⍨~2>+\'-'=⍵}
res←⎕SE.Tatin.ListVersions'[local]example-versions'
expected←⍪'0.1.0' '1.0.0-beta-1' '1.0.0' '1.0.1-This-fix' '1.0.1-That-fix' '1.0.12-aaa' '1.0.12-zzz'  '1.0.12-That-fix' '2.0.0'
→T.PassesIf expected≡GetVersion¨res
res←0 ⎕SE.Tatin.ListVersions'[local]example-versions'
→T.PassesIf expected≡GetVersion¨res
res←1 ⎕SE.Tatin.ListVersions'[local]example-versions'
→T.PassesIf expected≡⍪GetVersion¨res[;1]
→T.PassesIf∧/∨⌿↑(2='-'+.=¨res[;1])(2≤/res[;2],99999999)
r←T._OK
⍝Done
r←Test_API_004(stopFlag batchFlag);⎕TRAP;dir;src;zip;registryPath;body;cfg;packageID;rc;msg;zipFilename;list2;list1;cfg2;packageID2;zip2;src2
⍝ Delete two packages with ⎕SE.Tatin.DeletePackages on local Registry
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'zip'
F.MkDir src zip
(src2 zip2)←(⊂dir,'/'),¨'src2' 'zip2'
F.MkDir src2 zip2
registryPath←∆TEMP_REGISTRY_FOLDER,'/Registry'
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←⎕NS''
cfg.group←'test'
cfg.name←'Package_A'
cfg.version←'0.1.0'
cfg.source←'Test.apln'
cfg.license←'MIT'
cfg.tags←'foo,boo'
cfg.os_mac←1
cfg←TC.WritePackageConfigFile src cfg
packageID←'test-Package_A-0.1.0'
(rc msg zipFilename)←TC.PublishPackage src'[local]'
→T.GoToTidyUp 200≠rc
→T.GoToTidyUp 0≠≢msg
(⊂body)F.NPUT src2,'/Test.apln'
cfg2←⎕NS''
cfg2.group←'test'
cfg2.name←'Package_A'
cfg2.version←'0.2.0'
cfg2.source←'Test.apln'
cfg2.license←'MIT'
cfg2.tags←'foo,boo'
cfg2.os_mac←1
cfg2←TC.WritePackageConfigFile src2 cfg2
packageID2←'test-Package_A-0.2.0'
(rc msg zipFilename)←TC.PublishPackage src2'[local]'
→T.GoToTidyUp 200≠rc
→T.GoToTidyUp 0≠≢msg
list1←({ns←⍵ ⋄ ns.aggregate←0 ⋄ ns}⎕NS'')TC.ListPackages'[local]'
(rc msg)←⎕SE.Tatin.DeletePackages'[local]'(packageID packageID2)
Assert 200=rc
list2←({ns←⍵ ⋄ ns.aggregate←0 ⋄ ns}⎕NS'')TC.ListPackages'[local]'
→T.GoToTidyUp'test-Package_A-0.1.0' 'test-Package_A-0.2.0'≢list1[;1]~list2[;1]
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
(rc msg)←F.RmDirByForce registryPath,'/',packageID
msg Assert rc=0
(rc msg)←F.RmDirByForce registryPath,'/',packageID2
msg Assert rc=0
Assert F.DeleteFile zipFilename
⍝Done
r←Test_API_005(stopFlag batchFlag);⎕TRAP;res1;res2;res3;res4;res5;tempDir;res;expected;rc;msg
⍝ Exercise ⎕SE.Tatin.InstallPackages and ⎕SE.Tatin.LoadDependencies
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name                          ⍝ Precaution
'TEMP'#.⎕NS''
res←⎕SE.Tatin.InstallPackages'[local]aplteam-APLProcess-0.2'tempDir
→T.GoToTidyUp(∊res)≢∆TEMP_REGISTRY_FOLDER ∆GetBestVersionFor'aplteam-APLProcess-0.2'
(⊂'⍝aplteam-HashPassword-0.1.0')⎕NPUT(tempDir,'/apl-dependencies.txt')2    ⍝ Comments should be ignored
res←⎕SE.Tatin.LoadDependencies tempDir'#.TEMP'
expected←,⊂'#._tatin.aplteam_APLProcess_0_2_12'
→T.GoToTidyUp expected≢⍕¨res
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_API_006(stopFlag batchFlag);⎕TRAP;res1;res2;res3;res4;res5;res;tempDir;packageFolder;cfg;version;rc;more;zipfile;msg;parms
⍝ Exercise ⎕SE.Tatin.BuildPackage and ⎕SE.Tatin.PublishPackage
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name                           ⍝ Precaution
packageFolder←∆TEMP_TEST_DATA,'/Source/OS'
parms←⎕SE.Tatin.CreateBuildParms packageFolder
parms.targetPath←tempDir
res←⎕SE.Tatin.BuildPackage parms
res←⊃F.Dir tempDir,'/'
→T.GoToTidyUp 1≠≢res
zipfile←⊃res
→T.GoToTidyUp'.zip'≢⎕C ¯4↑zipfile
(F.NormalizePath tempDir,'/')⎕NCOPY F.NormalizePath⊃⊃F.Dir packageFolder,'/*.json'
cfg←Reg.GetJsonFromFile(⊃⊃F.Dir packageFolder,'/',TC.CFG_Name)0
version←{⍵↑⍨¯1+⍵⍳'+'}⊃{⍺,'-',⍵}/cfg.(group name version)
{}F.RmDirByForce ∆TEMP_REGISTRY_FOLDER,'/',version
res←⎕SE.Tatin.PublishPackage zipfile'[local]'
→T.GoToTidyUp 200≠1⊃res
→T.GoToTidyUp~F.IsDir ∆TEMP_REGISTRY_FOLDER,'/',version
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_API_007(stopFlag batchFlag);⎕TRAP;rc;res
⍝ Exercise ⎕SE.Tatin.GetDeletePolicy: request the delete policy from [localhost]
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←⎕SE.Tatin.GetDeletePolicy'[localhost]'
→T.PassesIf'Any'≡res
r←T._OK
⍝Done
r←Test_API_008(stopFlag batchFlag);⎕TRAP;rc
;dir;dir2;oldDependencies;oldBuildlist;msg;list;oldPkgList;newPkgList;newBuildlist;newDependencies
⍝ Exercise ⎕SE.Tatin.UnInstallPackages: un-install by alias
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY'TestData/UnInstall/'
dir2←dir,'/UnInstall'
oldDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
oldBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
oldPkgList←F.ListDirs dir2,'/'
(list msg)←⎕SE.Tatin.UnInstallPackages'EC@aplteam-EventCodes-3.0.1'dir2
→T.GoToTidyUp~(⊂'EC@aplteam-EventCodes-3.0.1')∊list
→T.GoToTidyUp 0≠≢msg
newDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
newBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
newPkgList←F.ListDirs dir2,'/'
→T.GoToTidyUp 1≠-/≢¨oldDependencies newDependencies
→T.GoToTidyUp 0=-/≢¨oldPkgList newPkgList
→T.GoToTidyUp~'aplteam-EventCodes-3.0.1'{(⊂⍺)∊(-≢⍺)↑¨⍵}oldPkgList~newPkgList
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_API_009(stopFlag batchFlag);⎕TRAP;rc
;dir;dir2;oldDependencies;oldBuildlist;msg;list;oldPkgList;newPkgList;newBuildlist;newDependencies
⍝ Exercise ⎕SE.Tatin.UnInstallPackages: un-install by alias a package that is also installed by just its package ID
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY'TestData/UnInstall6/'
dir2←dir,'/UnInstall6'
oldDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
oldBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
oldPkgList←F.ListDirs dir2,'/'
(list msg)←⎕SE.Tatin.UnInstallPackages'P@'dir2
→T.GoToTidyUp 0≠≢list
→T.GoToTidyUp 0≠≢msg
newDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
newBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
newPkgList←F.ListDirs dir2,'/'
→T.GoToTidyUp 1≠-/≢¨oldDependencies newDependencies
→T.GoToTidyUp 0≠-/≢¨oldPkgList newPkgList
(list msg)←⎕SE.Tatin.UnInstallPackages'aplteam-APLProcess-0.4.1'dir2
→T.GoToTidyUp~list ∆LazyMatch'aplteam-APLProcess-0.4.1' 'aplteam-APLTreeUtils2-1.1.1' 'aplteam-OS-3.0.1'
→T.GoToTidyUp 0≠≢msg
newDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
newBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
newPkgList←F.ListDirs dir2,'/'
→T.GoToTidyUp 2≠-/≢¨oldDependencies newDependencies  ⍝ 2 because "OS" is a dependency
→T.GoToTidyUp 1≠≢newPkgList
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_API_010(stopFlag batchFlag);⎕TRAP;res;zipFilename;installFolder;rc;msg;list
⍝ Exercise "InstallPackages" with a package that's a user command
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
zipFilename←∆TEMP_REGISTRY_FOLDER,'/example-UC-1.0.0/example-UC-1.0.0.zip'
installFolder←TC.GetMyUCMDsFolder'UC'
res←TC.InstallPackages zipFilename'[myucmdS]'
→T.PassesIf'example-UC-1.0.0'≡∊res
→T.PassesIf TC.F.IsDir installFolder,'/example-UC-1.0.0'
→T.PassesIf TC.F.IsFile installFolder,'/UC.aplc'
(list msg)←TC.UnInstallPackages'UC' '[MyUCMDs]'
→T.PassesIf'example-UC-1.0.0'≡∊list
→T.PassesIf 0=≢msg
r←T._OK
∆TidyUp:
{}F.RmDirByForce ##.Client.GetMyUCMDsFolder'UC'
⍝Done
r←Test_API_011(stopFlag batchFlag);⎕TRAP;res;rc;msg;list;zip1;zip2;expected;Done
⍝ Exercise "InstallPackages" with multiple packages that are user commands
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
zip1←∆TEMP_REGISTRY_FOLDER,'/example-UC-1.0.0/example-UC-1.0.0.zip'
zip2←∆TEMP_REGISTRY_FOLDER,'/example-UC_2-1.0.0/example-UC_2-1.0.0.zip'
res←TC.InstallPackages(zip1,',',zip2)'[myucmdS]'
expected←'example-UC-1.0.0' 'example-UC_2-1.0.0'
→T.GoToTidyUp expected≢res
→T.GoToTidyUp~TC.F.IsDir TC.GetMyUCMDsFolder'UC/example-UC-1.0.0'
→T.GoToTidyUp~TC.F.IsDir TC.GetMyUCMDsFolder'UC_2/example-UC_2-1.0.0'
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce TC.GetMyUCMDsFolder'UC'
Assert rc=0
(rc msg)←F.RmDirByForce TC.GetMyUCMDsFolder'UC_2'
Assert rc=0
⍝Done
r←Test_API_012(stopFlag batchFlag);⎕TRAP;res;rc;msg;list;zip1;zip2;Done;qdmx
⍝ Exercise "InstallPackages" with two user command packages but specify a name after [MyUCMDs] (invalid if multiple)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
zip1←∆TEMP_SERVER_FOLDER,'example-UC-1.0.0/example-UC-1.0.0.zip'
zip2←∆TEMP_SERVER_FOLDER,'example-UC_2-1.0.0/example-UC_2-1.0.0.zip'
:Trap ##.Registry.ErrorNo
res←TC.InstallPackages(zip1,',',zip2)'[myucmdS]Foo'
→T.FailsIf 1
:Else
qdmx←⎕DMX
→T.PassesIf'You must not specify a name after [MyUCMDs] when installing more than one package'≡qdmx.EM
:EndTrap
r←T._OK
⍝Done
r←Test_API_020(stopFlag batchFlag);⎕TRAP;res2;dir;res1;res3;rc;msg
⍝ Exercise ⎕SE.Tatin.ListPackages; simple case: all packages aggregated by {major}
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
res1←⎕SE.Tatin.ListPackages'[local]'
→T.GoToTidyUp 2≠|≡res1
→T.GoToTidyUp 0=≢res1
→T.GoToTidyUp 2≠⍴⍴res1
res2←⎕SE.Tatin.ListPackages ∆TEMP_REGISTRY_FOLDER,'/'
→T.GoToTidyUp 2≠|≡res1
→T.GoToTidyUp 0=≢res1
→T.GoToTidyUp 2≠⍴⍴res1
res3←⎕SE.Tatin.ListPackages(dir,'/')
→T.GoToTidyUp 0≠≢res3
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_API_022(stopFlag batchFlag);⎕TRAP;res1;parms
⍝ Exercise ⎕SE.Tatin.ListPackages with "group" option
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.group←'example'
res1←parms ⎕SE.Tatin.ListPackages'[local]'
→T.PassesIf 0<≢res1
→T.PassesIf 2=|≡res1
→T.PassesIf 2=⍴⍴res1
r←T._OK
r←Test_API_023(stopFlag batchFlag);⎕TRAP;res1;parms
⍝ Exercise ⎕SE.Tatin.ListPackages with "os_mac←1"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.os_mac←1
res1←parms ⎕SE.Tatin.ListPackages'[localhost]'
→T.PassesIf 0<≢res1
→T.PassesIf 2=|≡res1
→T.PassesIf 2=⍴⍴res1
r←T._OK
r←Test_API_024(stopFlag batchFlag);⎕TRAP;res1;parms;res2
⍝ Exercise ⎕SE.Tatin.ListPackages with several "os_*" mutations
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.os_mac←1
res1←parms ⎕SE.Tatin.ListPackages'[localhost]'
→T.PassesIf 0<≢res1
→T.PassesIf 2=|≡res1
→T.PassesIf 2=⍴⍴res1
parms←⎕NS''
parms.os_win←1
res2←parms ⎕SE.Tatin.ListPackages'[localhost]'
→T.PassesIf 0<≢res2
→T.PassesIf 2=|≡res2
→T.PassesIf 2=⍴⍴res2
→T.PassesIf </≢¨res1 res2
r←T._OK
r←Test_API_030(stopFlag batchFlag);⎕TRAP;res1;dir;rc;msg
⍝ Exercise ⎕SE.Tatin.ListTags for all tags with defaults
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
res1←⎕SE.Tatin.ListTags'[localhost]'
→T.GoToTidyUp~0<≢res1
→T.GoToTidyUp~2=⍴⍴res1
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_API_031(stopFlag batchFlag);⎕TRAP;res1;dir;parms;rc;msg
⍝ Exercise ⎕SE.Tatin.ListTags for a particular tag
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
parms←⎕NS''
parms.tags←'comparisson'    ⍝ deliberate typos: should have been 'comparrison'
res1←parms ⎕SE.Tatin.ListTags'[localhost]'
→T.GoToTidyUp~0<≢res1
→T.GoToTidyUp~2=⍴⍴res1
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_API_033(stopFlag batchFlag);⎕TRAP;res1;dir;parms;res2;msg;rc
⍝ Exercise ⎕SE.Tatin.ListTags with several -os*= mutations
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
parms←⎕NS''
parms.os_lin←1
parms.os_mac←1
res1←parms ⎕SE.Tatin.ListTags'[localhost]'
→T.GoToTidyUp~0<≢res1
→T.GoToTidyUp~2=⍴⍴res1
parms←⎕NS''
parms.os_win←1
res2←parms ⎕SE.Tatin.ListTags'[localhost]'
→T.GoToTidyUp~0<≢res2
→T.GoToTidyUp~2=⍴⍴res2
→T.GoToTidyUp~</≢¨res1 res2
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_API_034(stopFlag batchFlag);⎕TRAP;res
⍝ Exercise ⎕SE.Tatin.ListLicenses with and without -verbose
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←⎕SE.Tatin.ListLicenses '[localhost]'
→T.PassesIf 2=≡res
→T.PassesIf 1=⍴⍴res
res←1 ⎕SE.Tatin.ListLicenses'[localhost]'
→T.PassesIf 2=≡res
→T.PassesIf 2=⍴⍴res
r←T._OK
⍝Done
r←Test_API_040(stopFlag batchFlag);⎕TRAP;res1
⍝ Exercise ⎕SE.Tatin.Version
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res1←⎕SE.Tatin.Version
→T.PassesIf res1≡##.Registry.Version
r←T._OK
⍝Done
r←Test_API_042(stopFlag batchFlag);⎕TRAP;res1
⍝ Exercise ⎕SE.Tatin.GetDependencyTree
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res1←⎕SE.Tatin.GetDependencyTree ∆TEMP_REGISTRY_FOLDER,'/aplteam-MarkAPL-9.1.13'
→T.PassesIf 0<≢res1
→T.PassesIf 2=⍴⍴res1
r←T._OK
⍝Done
r←Test_API_043(stopFlag batchFlag);⎕TRAP;res1;dir;list;json;msg;rc
⍝ Exercise ⎕SE.Tatin.InitialisePackage and ⎕SE.Tatin.ReadPackageConfigFile
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
res1←⎕SE.Tatin.InitialisePackage dir
→T.GoToTidyUp~0<≢res1.⎕NL 2
list←⊃F.Dir dir,'/'
→T.GoToTidyUp 1≠≢list
→T.GoToTidyUp'apl=package.json'{⍺≡(-≢⍺)↑⍵}⊃list
json←⎕SE.Tatin.ReadPackageConfigFile dir
→T.GoToTidyUp 0=≢json.⎕NL 2
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_API_050(stopFlag batchFlag);⎕TRAP;dir;US;myReg1;msg;rc
⍝ Exercise ⎕SE.Tatin.UserSettings and ⎕SE.Tatin.DefineRegistry: create a temporay user config file
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
US←⎕NEW ⎕SE.Tatin.UserSettings(,⊂dir)
myReg1←⎕NEW ⎕SE.Tatin.DefineRegistry(,⊂'[my]https://MyCompany.com/')
→T.GoToTidyUp'my'≢myReg1.alias
→T.GoToTidyUp'https://MyCompany.com/'≢myReg1.uri
US.AddRegistry myReg1
→T.GoToTidyUp~'my' 'tatin' 'tatin-test'∆LazyMatch US.registries.alias
→T.GoToTidyUp~'https://MyCompany.com/' 'https://tatin.dev/' 'https://test.tatin.dev/'∆LazyMatch US.registries.uri
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_API_061(stopFlag batchFlag);⎕TRAP;res
⍝ Exercise ⎕SE.Tatin.LoadPackages
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←⎕SE.Tatin.LoadPackages'aplteam-APLProcess-0.2.9' '#.TEMP'
→T.GoToTidyUp 0=res
→T.GoToTidyUp'0.2.9'≢∆RemoveBuildFromVersion 2⊃#.TEMP.APLProcess.Version
r←T._OK
∆TidyUp:
:If 0<≢#.TEMP.APLProcess.##.TatinVars.HOME
{}F.RmDir #.TEMP.APLProcess.##.TatinVars.HOME,'\..'
:EndIf
⍝Done
r←Test_API_062(stopFlag batchFlag);⎕TRAP;res;rc;en;msg
⍝ Exercise ⎕SE.Tatin.LoadPackages on a beta package
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←⎕SE.Tatin.LoadPackages'[local]example-versions-1.0.0-beta-1' '#.TEMP'
→T.GoToTidyUp 0=res
→T.GoToTidyUp'1.0.0-beta-1'≢∆RemoveBuildFromVersion 2⊃#._tatin.example_versions_1_0_0_beta_1.MyCode.Version
r←T._OK
∆TidyUp:
:If 0<≢#.TEMP.versions.##.TatinVars.HOME
(rc en msg)←F.RmDir'expand'F.NormalizePath #.TEMP.versions.##.TatinVars.HOME,'/..'
msg Assert 0=rc
:EndIf
⍝Done
r←Test_API_063(stopFlag batchFlag);⎕TRAP;qdmx;res1
⍝ Exercise ⎕SE.Tatin.LoadPackages on a package that has just betas but with "noBetas←1"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res1←1 ⎕SE.Tatin.LoadPackages'[local]Laguntza' '#.TEMP'
→T.GoToTidyUp res1≠0
r←T._OK
∆TidyUp:
⍝Done
r←Test_API_065(stopFlag batchFlag);⎕TRAP;res
⍝ Exercise ⎕SE.Tatin.GetPathToPackageCache
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
→T.PassesIf 0<≢res←TC.GetPathToPackageCache
r←T._OK
⍝Done
r←Test_API_066(stopFlag batchFlag);⎕TRAP;res
⍝ Exercise ⎕SE.Tatin.GetNoCachingFlag
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←TC.GetNoCachingFlag'tatin.dev'
→T.PassesIf res∊0 1
res←TC.GetNoCachingFlag'[tatin]'
→T.PassesIf res∊0 1
r←T._OK
⍝Done
r←Test_API_067(stopFlag batchFlag);⎕TRAP;res
⍝ Exercise ⎕SE.Tatin.ListCache
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←TC.ListCache''
res←TC.ListCache'tatin.dev'
res←TC.ListCache'[tatin]'
r←T._OK
⍝Done
r←Test_API_070(stopFlag batchFlag);⎕TRAP;version
⍝ Exercise ⎕SE.Tatin.CheckForLaterVersion
⍝ Already tested but not called via ⎕SE.Tatin, so one more time because this function was introduced pretty late
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
version←⎕SE.Tatin.CheckForLaterVersion'TestData\Packages\Local-One\'
→T.PassesIf 1=≢version
→T.PassesIf'aplteam-APLTreeUtils-6.0.11'≡TC.GetPackageIDFrom⊃1 2⌷version  ⍝ But NOT 7.0.0!
r←T._OK
⍝Done
r←Test_API_071(stopFlag batchFlag);⎕TRAP;json;ns;name
⍝ Exercise ⎕SE.Tatin.ReadPackageConfigFile on an Apache-managed Registry (was once a bug)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
json←⎕SE.Tatin.ReadPackageConfigFile'[tatin]aplteam-FilesAndDirs-5.1.3'
ns←Reg.JSON json
name←{⍵↑⍨¯1+⍵⍳'+'}⊃{⍺,'-',⍵}/ns.(group name version)
→T.PassesIf name≡'aplteam-FilesAndDirs-5.1.3'
r←T._OK
⍝Done
r←Test_API_100(stopFlag batchFlag);⎕TRAP;rc;msg
⍝ Exercise ⎕SE.Tatin.DeprecatePackage on an unknown package
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg)←⎕SE.Tatin.DeprecatePackage'[localhost]' 'See JohnDoe instead' 'examples-does_not_exist'
→T.PassesIf 1≡rc
→T.PassesIf'Package not found'≡msg
r←T._OK
⍝Done
r←Test_BuildPackage_001(stopFlag batchFlag);⎕TRAP;rc;msg;parms
;dir;src;dist;body;cfg;zipfile;ns;list;expected
⍝ Build a package with a single file with a namespace.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir src dist
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0'
cfg.source←'Test.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
list←∆GetFileListFromZipArchive zipfile
expected←'apl-package.json' 'Test.apln'
→T.GoToTidyUp~expected ∆LazyMatch list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_BuildPackage_003(stopFlag batchFlag);⎕TRAP;rc;msg;parms
;dir;src;dist;cfg;zipfile;ns;list;expected
⍝ Build a package with multiple files into special source folder
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/APLSource')dist
('foo1←{1}')F.NPUT src,'/APLSource/foo1.apln'
('foo2←{2}')F.NPUT src,'/APLSource/foo2.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
list←∆GetFileListFromZipArchive zipfile
expected←'apl-package.json' 'APLSource/foo1.apln' 'APLSource/foo2.apln'
→T.GoToTidyUp~expected ∆LazyMatchPaths list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_BuildPackage_004(stopFlag batchFlag);⎕TRAP;rc;msg;parms
;dir;src;dist;cfg;zipfile;ns;list;expected
⍝ Build a package with multiple files spreaded over several levels into special source folder
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/APLSource/SubDir')dist
('foo1←{1}')F.NPUT src,'/APLSource/foo1.apln'
('foo2←{2}')F.NPUT src,'/APLSource/SubDir/foo2.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
list←∆GetFileListFromZipArchive zipfile
expected←'apl-package.json' 'APLSource/foo1.apln' 'APLSource/SubDir/foo2.apln'
→T.GoToTidyUp~expected ∆LazyMatchPaths list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_BuildPackage_005(stopFlag batchFlag);⎕TRAP;rc;msg;parms
;dir;src;dist;cfg;zipfile;ns;list;expected
⍝ Build a package with one code file together with an asset
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/source')dist
('foo1←{1}')F.NPUT src,'/source/foo1.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0'
cfg.source←'source'
'Create!'F.CheckPath src,'/Assets'
(F.ExpandPath src,'/Assets/README.md')⎕NCOPY F.ExpandPath'README.md'
cfg.assets←'Assets'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
list←∆GetFileListFromZipArchive zipfile
expected←'apl-package.json' 'source/foo1.apln' 'Assets/README.md'
→T.GoToTidyUp~expected ∆LazyMatchPaths list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_BuildPackage_006(stopFlag batchFlag);⎕TRAP;rc;msg;parms
;dir;src;dist;cfg;zipfile;ns;list;expected
⍝ Build a package with one code file together with an assets folder
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/source')dist
('foo1←{1}')F.NPUT src,'/source/foo1.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0'
cfg.source←'source'
'Create!'F.CheckPath src,'/Assets'
(F.ExpandPath src,'/Assets/README.md')⎕NCOPY F.ExpandPath'README.md'
(F.ExpandPath src,'/Assets/Managing_packages_with_Tatin.md')⎕NCOPY F.ExpandPath'docs_archive/Managing_packages_with_Tatin.md'
cfg.assets←'Assets'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
list←∆GetFileListFromZipArchive zipfile
expected←'apl-package.json' 'source/foo1.apln' 'Assets\README.md' 'Assets\Managing_packages_with_Tatin.md'
→T.GoToTidyUp~expected ∆LazyMatchPaths list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_BuildPackage_007(stopFlag batchFlag);⎕TRAP;dir;src;dist;cfg;zipfile;ns;list;expected;rc;msg;parms
⍝ Build a package with a code file with a file and a directory as "assets"
⍝ Requires "source" in Client Config to point to correct folder
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/source')dist(src,'/docs')
('foo1←{1}')F.NPUT src,'/source/foo1.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0'
cfg.source←'source'
(F.ExpandPath src,'/LICENSE')⎕NCOPY F.ExpandPath'LICENSE'
(F.ExpandPath src,'/docs/Managing_packages_with_Tatin.md')⎕NCOPY F.ExpandPath'docs_archive/Managing_packages_with_Tatin.md'
cfg.assets←'docs/Managing_packages_with_Tatin.md'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
list←∆GetFileListFromZipArchive zipfile
expected←'apl-package.json' 'source/foo1.apln' 'LICENSE' 'docs/Managing_packages_with_Tatin.md'
→T.GoToTidyUp~expected ∆LazyMatchPaths list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_BuildPackage_008(stopFlag batchFlag);⎕TRAP;rc;msg;parms
;dir;src;dist;cfg;zipfile;ns;list;expected;clientConfigFile;registries;deps
⍝ Build a package with one source file with a single dependency in a folder APLSource\
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/APLSource')dist(src,'/docs')
('foo1←{1}')F.NPUT src,'/APLSource/foo1.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
TC.MyUserSettings.AddRegistry'[Dyalog]https://packages.dyalog.com'
TC.MyUserSettings.AddRegistry'[MyCompany]https://packages.my-company.com'
src D.Add'[tatin]aplteam-APLTreeUtils-1.0.0'
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
list←∆GetFileListFromZipArchive zipfile
expected←'apl-package.json' 'APLSource/foo1.apln'TC.Reg.DependenciesFilename
→T.GoToTidyUp~expected ∆LazyMatchPaths list
r←T._OK
∆TidyUp:
Assert TC.MyUserSettings.RemoveRegistry'[dyalog]'
Assert TC.MyUserSettings.RemoveRegistry'[myCompany]'
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_BuildPackage_009(stopFlag batchFlag);⎕TRAP;rc;msg;parms
;dir;src;dist;zipfile;ns;list;expected;dep;cfg
⍝ Build a package with two source files with multiple dependencies from a folder APLSource\
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/APLSource')dist(src,'/docs')
('foo1←{1}')F.NPUT src,'/APLSource/foo1.apln'
('foo2←{1}')F.NPUT src,'/APLSource/foo2.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
TC.MyUserSettings.AddRegistry'[Dyalog]https://packages.dyalog.com'
TC.MyUserSettings.AddRegistry'[MyCompany]https://packages.my-company.com'
src D.Add'[tatin]aplteam-APLTreeUtils-5.0.0' '[tatin]aplteam-FilesAndDirs-3.1.1' '[tatin]aplteam-OS-9.0.1'
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
list←∆GetFileListFromZipArchive zipfile
expected←'apl-package.json' 'APLSource/foo1.apln' 'APLSource/foo2.apln'TC.Reg.DependenciesFilename
→T.GoToTidyUp~expected ∆LazyMatchPaths list
r←T._OK
∆TidyUp:
Assert TC.MyUserSettings.RemoveRegistry'[Dyalog]'
Assert TC.MyUserSettings.RemoveRegistry'[MyCompany]'
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_BuildPackage_010(stopFlag batchFlag);⎕TRAP;src2;src3;rc;msg;parms
;dir;src;dist;body;cfg;zipfile;ns;list;expected
⍝ Build a package that has a folder as "assets" property.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir src dist
F.MkDir src2←src,'/TheSource'
F.MkDir src3←src,'/Assets'
body←'r←Hello' 'r←''World'''
(⊂body)F.NPUT src2,'/Hello.aplf'
(⊂'/myFirst.dll')F.NPUT src3,'/myFirst.dll'
(⊂'/mySecond.dll')F.NPUT src3,'/mySecond.dll'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Hello'
cfg.version←'0.1.0'
cfg.source←'TheSource/'
cfg.assets←'Assets/'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
list←∆GetFileListFromZipArchive zipfile
expected←F.NormalizePath'Assets/myFirst.dll' 'Assets/mySecond.dll' 'TheSource\Hello.aplf' 'apl-package.json'
→T.GoToTidyUp~expected ∆LazyMatch list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_BuildPackage_011(stopFlag batchFlag);⎕TRAP;src2;src3;rc;msg;parms
;dir;src;dist;body;cfg;zipfile;ns;list;expected
⍝ Package that has a folder and a file as "assets" property.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir src dist
F.MkDir src2←src,'/TheSource'
F.MkDir src3←src,'/Assets/DLLs'
body←'r←Hello' 'r←''World'''
(⊂body)F.NPUT src2,'/Hello.aplf'
body←'r←Hello2' 'r←''World2'''
(⊂body)F.NPUT src2,'/Hello2.aplf'
(⊂'/myFirst.dll')F.NPUT src3,'/myFirst.dll'
(⊂'/mySecond.dll')F.NPUT src3,'/mySecond.dll'
(⊂'/LICENSE')F.NPUT src,'/LICENSE'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Hello'
cfg.version←'0.1.0'
cfg.source←'TheSource/'
cfg.assets←'Assets/'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
list←∆GetFileListFromZipArchive zipfile
expected←{(1+≢⍵)↓¨{⍵/⍨F.IsFile ⍵}⊃('recursive' 1)F.Dir ⍵,'/'}src
→T.GoToTidyUp~expected ∆LazyMatch list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_BuildPackage_012(stopFlag batchFlag);⎕TRAP;rc;msg;parms
;dir;src;dist;cfg;zipfile;ns;list;expected
⍝ Build multiple files with default "source"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/source')dist
('foo1←{1}')F.NPUT src,'/source/foo1.apln'
('foo2←{2}')F.NPUT src,'/source/foo2.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0'
cfg.source←'source'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
TC.MyUserSettings.source←'source'
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
list←∆GetFileListFromZipArchive zipfile
expected←'apl-package.json' 'source/foo1.apln' 'source/foo2.apln'
→T.GoToTidyUp~expected ∆LazyMatchPaths list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
TC.MyUserSettings.source←''
⍝Done
r←Test_BuildPackage_020(stopFlag batchFlag);⎕TRAP;rc;msg;parms
;dir;src;dist;body;cfg;zipfile;ns;qdmx
⍝ Build a single file (function) with an incompatible "source" setting.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir src dist
body←'r←Hello' 'r←''World'''
(⊂body)F.NPUT src,'/Hello.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Hello'
cfg.version←'0.1.0'
cfg.source←'Firlefanz.aplf'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
:Trap ##.Registry.ErrorNo
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp~∨/'"Firlefanz.aplf" is neither file nor folder'⍷qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_BuildPackage_030(stopFlag batchFlag);⎕TRAP;rc;msg;parms
;dir;src;dist;cfg;zipfile;ns;list;expected
⍝ Has assets and does not specify the source which is a folder
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/source')dist
F.MkDir(src,'/documents')dist
F.MkDir src,'/assets'
('foo1←{1}')F.NPUT src,'/source/foo1.apln'
('foo2←{2}')F.NPUT src,'/source/foo2.apln'
(⊂'a=1' 'b=2')F.NPUT src,'/assets/config.txt'
(⊂'This' 'That')F.NPUT src,'/documents/user_guide.txt'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0'
cfg.assets←'assets'
cfg.files←'documents/user_guide.txt'
cfg.source←'source'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
list←∆GetFileListFromZipArchive zipfile
expected←'apl-package.json' 'assets\config.txt' 'source\foo1.apln' 'source\foo2.apln' 'user_guide.txt'
→T.GoToTidyUp~expected ∆LazyMatchPaths list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Don
r←Test_BuildPackage_035(stopFlag batchFlag);⎕TRAP;rc;msg;parms
;dir;src;dist;cfg;zipfile;ns;list;expected
⍝ Has several assets and does not specify the source which is single namespace script
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/assets')dist
('foo←{1}')F.NPUT src,'/foo.apln'
(⊂'a=1' 'b=2')F.NPUT src,'/assets/config.txt'
(⊂'This' 'That')F.NPUT src,'/user_guide.txt'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0'
cfg.assets←'assets/'
cfg.files←'user_guide.txt'
cfg.source←'foo.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
list←∆GetFileListFromZipArchive zipfile
expected←'apl-package.json' 'assets\config.txt' 'foo.apln' 'user_guide.txt'
→T.GoToTidyUp~expected ∆LazyMatchPaths list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Don
r←Test_BuildPackage_040(stopFlag batchFlag);⎕TRAP;rc;msg;parms
;dir;src;dist;cfg;zipfile;ns
⍝ Package with a build number
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/source')dist
F.MkDir src,'/assets'
('foo1←{1}')F.NPUT src,'/source/foo1.apln'
('foo2←{2}')F.NPUT src,'/source/foo2.apln'
(⊂'a=1' 'b=2')F.NPUT src,'/assets/config.txt'
(⊂'This' 'That')F.NPUT src,'/user_guide.txt'
(⊂'Somthing else')F.NPUT src,'/ReadMe.txt'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0+456'
cfg.assets←'assets'
cfg.files←'user_guide.txt,ReadMe.txt'
cfg.source←'source'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
→T.GoToTidyUp'Example-Package_B-0.1.0'≢2⊃⎕NPARTS zipfile
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Don
r←Test_BuildPackage_041(stopFlag batchFlag);⎕TRAP;rc;msg;parms
;dir;src;dist;cfg;zipfile;ns;list;expected
⍝ Package with a patch number with additional information ("1-beta-2")
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/source')dist
F.MkDir src,'/assets'
('foo1←{1}')F.NPUT src,'/source/foo1.apln'
('foo2←{2}')F.NPUT src,'/source/foo2.apln'
(⊂'a=1' 'b=2')F.NPUT src,'/assets/config.txt'
(⊂'This' 'That')F.NPUT src,'/user_guide.txt'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0-beta-2'
cfg.assets←'assets'
cfg.files←'user_guide.txt'
cfg.source←'source'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
→T.GoToTidyUp'Example-Package_B-0.1.0-beta-2'≢2⊃⎕NPARTS zipfile
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Don
r←Test_BuildPackage_042(stopFlag batchFlag);⎕TRAP;rc;msg;parms
;dir;src;dist;cfg;zipfile;ns;list;expected
⍝ Package with a patch number with additional information ("1-beta-2") and a built number (separated by "."; deprecated)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/source')dist
F.MkDir src,'/assets'
('foo1←{1}')F.NPUT src,'/source/foo1.apln'
('foo2←{2}')F.NPUT src,'/source/foo2.apln'
(⊂'a=1' 'b=2')F.NPUT src,'/assets/config.txt'
(⊂'This' 'That')F.NPUT src,'/user_guide.txt'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0-beta-2+456'
cfg.assets←'assets'
cfg.files←'user_guide.txt'
cfg.source←'source'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
→T.GoToTidyUp'Example-Package_B-0.1.0-beta-2'≢2⊃⎕NPARTS zipfile
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Don
r←Test_BuildPackage_043(stopFlag batchFlag);⎕TRAP;rc;msg;parms
;dir;src;dist;cfg;zipfile;ns;list;expected
⍝ Package with a patch number with additional information ("1-beta-2") and a built number (separated by "+")
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/source')dist
F.MkDir src,'/assets'
('foo1←{1}')F.NPUT src,'/source/foo1.apln'
('foo2←{2}')F.NPUT src,'/source/foo2.apln'
(⊂'a=1' 'b=2')F.NPUT src,'/assets/config.txt'
(⊂'This' 'That')F.NPUT src,'/user_guide.txt'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0-beta-2+456'
cfg.assets←'assets'
cfg.files←'user_guide.txt'
cfg.source←'source'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
→T.GoToTidyUp'Example-Package_B-0.1.0-beta-2'≢2⊃⎕NPARTS zipfile
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Don
r←Test_BuildPackage_044(stopFlag batchFlag);⎕TRAP;qdmx;rc;msg
;dir;src;dist;cfg;ns;list;expected
⍝ Package with an invalid built number (separated by "+")
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/source')dist
F.MkDir src,'/assets'
('foo1←{1}')F.NPUT src,'/source/foo1.apln'
('foo2←{2}')F.NPUT src,'/source/foo2.apln'
(⊂'a=1' 'b=2')F.NPUT src,'/assets/config.txt'
(⊂'This' 'That')F.NPUT src,'/user_guide.txt'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0+4a'
cfg.assets←'assets/' 'user_guide.txt'
cfg.source←'source'
:Trap ##.Registry.ErrorNo
TC.WritePackageConfigFile src cfg
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Build number must be nothing but digits'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Don
r←Test_BuildPackage_045(stopFlag batchFlag);⎕TRAP;qdmx;rc;msg
;dir;src;dist;cfg;zipfile;ns;list;expected
⍝ Package with "files" pointing to a non-existent file
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/source')dist
(⊂'foo1←{1}')F.NPUT src,'/source/foo1.apln'
(⊂'Bla')F.NPUT src,'/ReadMe'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0+456'
cfg.files←'does-not-exist,ReadMe,does-also-not-exist'
cfg.source←'source'
cfg.os_win←1
:Trap ##.Registry.ErrorNo
TC.WritePackageConfigFile src cfg
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'"files": does-not-exist,does-also-not-exist not found/not a directory'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Don
r←Test_BuildPackage_046(stopFlag batchFlag);⎕TRAP;qdmx;rc;msg
;dir;src;dist;cfg;zipfile;ns;list;expected
⍝ Package with "files" pointing to a directory
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
F.MkDir(src,'/source')(src,'/FOO')dist
(⊂'foo1←{1}')F.NPUT src,'/source/foo1.apln'
(⊂'Bla')F.NPUT src,'/ReadMe'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_B'
cfg.version←'0.1.0+456'
cfg.files←'FOO,ReadMe'
cfg.source←'source'
cfg.os_win←1
:Trap ##.Registry.ErrorNo
TC.WritePackageConfigFile src cfg
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'"files": FOO not found/not a directory'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Don
r←Test_BuildPackage_050(stopFlag batchFlag);⎕TRAP;zipFileName;list;cfg;cfg2;oldBuildNo;newBuildNo;oldVersion;newVersion;parms;tempPath;path;msg;rc;success
⍝ Build a package that has dependencies in a non-default folder and is a Cider project
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempPath←∆GetTempDir'/'
path←∆TEMP_TEST_DATA,'/Build/CiderProject/'
tempPath ⎕NCOPY path
tempPath,←'CiderProject/'
cfg←TC.ReadPackageConfigFile tempPath,'apl-package.json'
parms←TC.CreateBuildParms tempPath
parms.targetPath←tempPath
parms.version←'+0.0.1'
zipFileName←TC.BuildPackage parms
list←TC.ZipArchive.ListZipContents zipFileName
→T.GoToTidyUp~(⊂F.EnforceSlash'apl-dependencies.txt')∊F.EnforceSlash¨list
cfg2←TC.ReadPackageConfigFile tempPath,'apl-package.json'
oldBuildNo←A.ToNum{⍵↓⍨⍵⍳'+'}cfg.version
newBuildNo←A.ToNum{⍵↓⍨⍵⍳'+'}cfg2.version
→T.GoToTidyUp newBuildNo≠1+oldBuildNo
(oldVersion newVersion)←{⍵↑⍨⌊/¯1+⍵⍳'+-'}¨cfg.version cfg2.version
⍝ Here we check only for a change, increasing the version number has its own (exhaustive) test:
→T.GoToTidyUp oldVersion≡newVersion
r←T._OK
∆TidyUp:
Assert success←F.DeleteFile zipFileName
(rc msg)←F.RmDirByForce tempPath,'..'
msg Assert rc=0
⍝Don
r←Test_BuildPackage_051(stopFlag batchFlag);⎕TRAP;path;zipFileName;list;cfg;cfg2;oldBuildNo;newBuildNo;oldVersion;newVersion;parms
⍝ Build a package that is not a Cider project and has dependencies in the default folder
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
path←∆TEMP_TEST_DATA,'/Build/Default/'
cfg←TC.ReadPackageConfigFile path,'apl-package.json'
parms←TC.CreateBuildParms path
parms.targetPath←path
zipFileName←TC.BuildPackage parms
list←TC.ZipArchive.ListZipContents zipFileName
→T.GoToTidyUp~(⊂F.EnforceSlash'apl-dependencies.txt')∊F.EnforceSlash¨list
cfg2←TC.ReadPackageConfigFile path,'apl-package.json'
oldBuildNo←A.ToNum{⍵↓⍨⍵⍳'+'}cfg.version
newBuildNo←A.ToNum{⍵↓⍨⍵⍳'+'}cfg2.version
→T.GoToTidyUp newBuildNo≠1+oldBuildNo
(oldVersion newVersion)←{⍵↑⍨⌊/¯1+⍵⍳'+-'}¨cfg.version cfg2.version
⍝ Here we check only for a change, increasing the version number has its own (exhaustive) test:
→T.GoToTidyUp oldVersion≢newVersion
r←T._OK
∆TidyUp:
F.DeleteFile zipFileName
⍝Don
r←Test_BuildPackage_052(stopFlag batchFlag);⎕TRAP;path;zipFileName;list;cfg2;oldBuildNo;newBuildNo;oldVersion;newVersion;cfg;deps;tempDir;parms
⍝ Build a package that is a Cider project but we specify a different folder (takes precedence)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
path←∆TEMP_TEST_DATA,'/Build/Special/'
cfg←TC.ReadPackageConfigFile path,'apl-package.json'
parms←TC.CreateBuildParms path
parms.targetPath←path
parms.dependencyFolder←'dependencies'
zipFileName←TC.BuildPackage parms
list←TC.ZipArchive.ListZipContents zipFileName
→T.GoToTidyUp~(⊂F.EnforceSlash'apl-dependencies.txt')∊F.EnforceSlash¨list
tempDir←∆GetTempDir'-ZIP'
zipFileName TC.ZipArchive.UnzipTo tempDir
deps←⊃F.NGET(tempDir,'/apl-dependencies.txt')1
→T.GoToTidyUp(,⊂'aplteam-FilesAndDirs-5.2.1')≢deps
cfg2←TC.ReadPackageConfigFile path,'apl-package.json'
oldBuildNo←A.ToNum{⍵↓⍨⍵⍳'+'}cfg.version
newBuildNo←A.ToNum{⍵↓⍨⍵⍳'+'}cfg2.version
→T.GoToTidyUp newBuildNo≠1+oldBuildNo
(oldVersion newVersion)←{⍵↑⍨⌊/¯1+⍵⍳'+-'}¨cfg.version cfg2.version
⍝ Here we check only for a change, increasing the version number has its own (exhaustive) test:
→T.GoToTidyUp oldVersion≢newVersion
r←T._OK
∆TidyUp:
{}F.RmDirByForce tempDir
F.DeleteFile zipFileName
⍝Done
r←Test_BuildPackage_053(stopFlag batchFlag);⎕TRAP;path;zipFileName;list;cfg2;newBuildNo;cfg;tempDir;tempDir2;deps;parms
⍝ Build a package and specify a specific version number with a build number
⍝ In this case the build number is NOT bumped
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
tempDir ⎕NCOPY ∆TEMP_TEST_DATA,'/Build/Special'
path←tempDir,'/Special/'
cfg←TC.ReadPackageConfigFile path,'apl-package.json'
parms←TC.CreateBuildParms path
parms.targetPath←path
parms.dependencyFolder←'dependencies'
parms.version←'4.0.0+135'
zipFileName←TC.BuildPackage parms
list←TC.ZipArchive.ListZipContents zipFileName
→T.GoToTidyUp~(⊂F.EnforceSlash'apl-dependencies.txt')∊F.EnforceSlash¨list
tempDir2←∆GetTempDir'-ZIP'
zipFileName TC.ZipArchive.UnzipTo tempDir2
deps←⊃F.NGET(tempDir2,'/apl-dependencies.txt')1
→T.GoToTidyUp(,⊂'aplteam-FilesAndDirs-5.2.1')≢deps
cfg2←TC.ReadPackageConfigFile path,'apl-package.json'
newBuildNo←A.ToNum{⍵↓⍨⍵⍳'+'}cfg2.version
→T.GoToTidyUp newBuildNo≠135
r←T._OK
∆TidyUp:
{}F.RmDirByForce tempDir
{}F.RmDirByForce tempDir2
⍝Done
r←Test_BuildPackage_054(stopFlag batchFlag);⎕TRAP;path;zipFileName;list;cfg2;oldBuildNo;newBuildNo;cfg;tempDir;tempDir2;deps;msg;rc;parms
⍝ Build a package and specify a specific version number without a build number
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
tempDir ⎕NCOPY ∆TEMP_TEST_DATA,'/Build/Special'
path←tempDir,'/Special/'
cfg←TC.ReadPackageConfigFile path,'apl-package.json'
parms←TC.CreateBuildParms path
parms.targetPath←path
parms.dependencyFolder←'dependencies'
parms.version←'9.0.1'
zipFileName←TC.BuildPackage parms
list←TC.ZipArchive.ListZipContents zipFileName
→T.GoToTidyUp~(⊂F.EnforceSlash'apl-dependencies.txt')∊F.EnforceSlash¨list
tempDir2←∆GetTempDir'-ZIP'
zipFileName TC.ZipArchive.UnzipTo tempDir2
deps←⊃F.NGET(tempDir2,'/apl-dependencies.txt')1
→T.GoToTidyUp(,⊂'aplteam-FilesAndDirs-5.2.1')≢deps
cfg2←TC.ReadPackageConfigFile path,'apl-package.json'
oldBuildNo←A.ToNum{⍵↓⍨⍵⍳'+'}cfg.version
newBuildNo←A.ToNum{⍵↓⍨⍵⍳'+'}cfg2.version
→T.GoToTidyUp newBuildNo≠oldBuildNo+1
r←T._OK
∆TidyUp:
F.DeleteFile zipFileName
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
(rc msg)←F.RmDirByForce tempDir2
msg Assert rc=0
⍝Done
r←Test_BuildPackage_055(stopFlag batchFlag);⎕TRAP;path;zipFileName;list;cfg2;cfg;tempDir;parms
⍝ Build a package and specify a specific version number with a build number and "-beta-2"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
tempDir ⎕NCOPY ∆TEMP_TEST_DATA,'/Build/Special'
path←tempDir,'/Special/'
cfg←TC.ReadPackageConfigFile path,'apl-package.json'
parms←TC.CreateBuildParms path
parms.targetPath←path
parms.version←'4.0.0-beta-2+99'
parms.dependencyFolder←'dependencies'
zipFileName←TC.BuildPackage parms
list←TC.ZipArchive.ListZipContents zipFileName
→T.GoToTidyUp~(⊂F.EnforceSlash'apl-dependencies.txt')∊F.EnforceSlash¨list
cfg2←TC.ReadPackageConfigFile path,'apl-package.json'
→T.GoToTidyUp cfg2.version≢'4.0.0-beta-2+99'   ⍝ We've specified a build number, therefore it's not bumped
r←T._OK
∆TidyUp:
F.DeleteFile zipFileName
{}F.RmDirByForce tempDir
⍝Done
r←Test_BuildPackage_060(stopFlag batchFlag);⎕TRAP;path;cfg;zipFileName;tempPath;msg;rc;res;parms
⍝ Build package, install as a user command and load it as such into ⎕SE
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempPath←∆GetTempDir''
path←∆TEMP_TEST_DATA,'/Build/UserCommand/'
cfg←TC.ReadPackageConfigFile path,'apl-package.json'
parms←TC.CreateBuildParms path
parms.targetPath←tempPath
zipFileName←TC.BuildPackage parms
res←TC.InstallPackages zipFileName'[myucmds]'
→T.GoToTidyUp~F.IsFile TC.GetMyUCMDsFolder'APLGit2ForTests/APLGit2ForTests_UC.dyalog'
res←TC.LoadDependencies'[myucmDS]/APLGit2ForTests' '⎕SE'
→T.GoToTidyUp 0=⎕SE.⎕NC'APLGit2ForTests'
→T.GoToTidyUp~⎕NEXISTS TC.GetMyUCMDsFolder'APLGit2ForTests/APLGit2ForTests_UC.dyalog'
r←T._OK
∆TidyUp:
F.DeleteFile zipFileName
(rc msg)←F.RmDirByForce tempPath
msg Assert rc=0
(rc msg)←F.RmDirByForce TC.GetMyUCMDsFolder'APLGit2ForTests'
msg Assert rc=0
⍝Done
r←Test_BuildPackage_070(stopFlag batchFlag);⎕TRAP;path;zipFileName;msg;rc;parms;tempPath;list
⍝ Build package and use the `exclude` property with one file
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempPath←∆GetTempDir''
path←∆TEMP_TEST_DATA,'/Build/NuGet1/'
parms←TC.CreateBuildParms path
parms.targetPath←tempPath
zipFileName←TC.BuildPackage parms
list←TC.ZipArchive.ListZipContents zipFileName
→T.PassesIf 0=∨/∨/'⎕IO.apla'⍷⍕⍪list
r←T._OK
∆TidyUp:
F.DeleteFile zipFileName
(rc msg)←F.RmDirByForce tempPath
msg Assert rc=0
⍝Done
r←Test_BuildPackage_071(stopFlag batchFlag);⎕TRAP;path;zipFileName;msg;rc;parms;tempPath;list;buff
⍝ Build package and use the `exclude` property with two files and one dir
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempPath←∆GetTempDir''
path←∆TEMP_TEST_DATA,'/Build/NuGet2/'
parms←TC.CreateBuildParms path
parms.targetPath←tempPath
zipFileName←TC.BuildPackage parms
list←TC.ZipArchive.ListZipContents zipFileName
buff←⍕⍪list
→T.PassesIf 0=∨/∨/'⎕IO.apla'⍷buff
→T.PassesIf 0=∨/∨/'⎕ML.apla'⍷buff
→T.PassesIf 0=∨/∨/'/Tests/'⍷buff
r←T._OK
∆TidyUp:
F.DeleteFile zipFileName
(rc msg)←F.RmDirByForce tempPath
msg Assert rc=0
⍝Done
r←Test_BuildPackage_072(stopFlag batchFlag);⎕TRAP;path;zipFileName;msg;rc;parms;tempPath;list;buff
⍝ Build package and use the `exclude` property with two files and one dir but "wrong" casing
⍝ Under Windows that must not matter, which is why it's not executed elsewhere
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
:If 'Win'≢3↑⊃# ⎕WG'APLVersion'
r←T._WindowsOnly ⋄ →0
:EndIf
tempPath←∆GetTempDir''
path←∆TEMP_TEST_DATA,'/Build/NuGet2/'
parms←TC.CreateBuildParms path
parms.targetPath←tempPath
zipFileName←TC.BuildPackage parms
list←TC.ZipArchive.ListZipContents zipFileName
buff←⍕⍪list
→T.PassesIf 0=∨/∨/'⎕IO.apla'⍷buff
→T.PassesIf 0=∨/∨/'⎕ML.apla'⍷buff
→T.PassesIf 0=∨/∨/'/Tests/'⍷buff
r←T._OK
∆TidyUp:
F.DeleteFile zipFileName
(rc msg)←F.RmDirByForce tempPath
msg Assert rc=0
⍝Done
r←Test_BuildPackage_073(stopFlag batchFlag);⎕TRAP;path;zipFileName;msg;rc;parms;tempPath;qdmx
⍝ Build package and use the `exclude` property with two files that both do not exist (was once a bug)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempPath←∆GetTempDir''
path←∆TEMP_TEST_DATA,'/Build/NuGet4/'
parms←TC.CreateBuildParms path
parms.targetPath←tempPath
:Trap 998
zipFileName←TC.BuildPackage parms
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Not a valid path for "exclude": DoesNotExist.txt'≢∊qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempPath
msg Assert rc=0
:If 0<⎕NC'zipFileName'
F.DeleteFile zipFileName
:EndIf
⍝Done
r←Test_Cache_001(stopFlag batchFlag);⎕TRAP;res;tempDir;rc;msg
⍝ Install a package with plenty of dependencies and check the cache before and after
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir'/packages'
res←TC.InstallPackages'[tatin]aplteam-HandleError'tempDir
→T.GoToTidyUp~∨/'-HandleError-'⍷∊res
→T.GoToTidyUp 0=≢F.ListDirs tempDir,'/'
→T.GoToTidyUp 0=≢F.ListDirs TC.GetPathToPackageCache,'/tatin.dev'
→T.GoToTidyUp 0≠≢F.ListDirs TC.GetPathToPackageCache,'/temp/'
TC.LoadDependencies tempDir #.TEMP
→T.GoToTidyUp 9≠#.TEMP.⎕NC'HandleError'
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce ∆GetTempDir''
msg Assert rc=0
⍝Done
r←Test_Cache_011(stopFlag batchFlag);⎕TRAP;res
⍝ Load a package with plenty of dependencies and check the cache before and after
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←TC.LoadPackages'[tatin]aplteam-Tester2'#.TEMP
→T.PassesIf 9=#.TEMP.⎕NC'Tester2'
→T.PassesIf 1<≢F.ListDirs TC.GetPathToPackageCache,'/tatin.dev'
→T.PassesIf 0=≢F.ListDirs TC.GetPathToPackageCache,'/temp/'
r←T._OK
⍝Done
r←Test_Cache_021(stopFlag batchFlag);⎕TRAP;res;tempDir;rc;msg
⍝ Load a package with plenty of dependencies most of which were loaded by the preceding test cases
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir'/packages'
res←TC.InstallPackages'[tatin]aplteam-MarkAPL'tempDir
→T.GoToTidyUp~∨/'-MarkAPL-'⍷∊res
→T.GoToTidyUp~1<≢F.ListDirs tempDir,'/'
→T.GoToTidyUp~1<≢F.ListDirs TC.GetPathToPackageCache,'/tatin.dev'
→T.GoToTidyUp~0=≢F.ListDirs TC.GetPathToPackageCache,'/temp/'
TC.LoadDependencies tempDir #.TEMP
→T.GoToTidyUp~9=#.TEMP.⎕NC'MarkAPL'
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce ∆GetTempDir''
msg Assert rc=0
⍝Done
r←Test_Cache_022(stopFlag batchFlag);⎕TRAP;res;cacheDir;domain;path;pkgName;noOf;tempFolder
⍝ Load a package and check whether noCaching←1 is honoured
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
cacheDir←TC.GetPathToPackageCache
domain←'tatin.dev'
path←cacheDir,'/',TC.CompileNameFromUrl domain
pkgName←'WinSys'
noOf←≢F.ListDirs path,'/'
TC.MyUserSettings.registries.noCaching←1
res←TC.LoadPackages('https://',domain,'/',pkgName)'#.TEMP'
→T.GoToTidyUp 1≠res
→T.GoToTidyUp noOf≠≢F.ListDirs path,'/'
r←T._OK
∆TidyUp:
TC.MyUserSettings.registries.noCaching←0
tempFolder←'expand'F.NormalizePath #.TEMP.WinSys.##.TatinVars.HOME,'/..'
F.RmDir tempFolder
⍝Done
r←Test_Cache_031(stopFlag batchFlag);⎕TRAP;res;tempFolder
⍝ Load a package from the local server which also has a port number ⍝
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←TC.LoadPackages(∆LocalHostAndPort,'example-versions')'#.TEMP'
→T.GoToTidyUp 1≥≢F.ListDirs TC.GetPathToPackageCache,'/tatin.dev'
→T.GoToTidyUp 0≠≢F.ListDirs TC.GetPathToPackageCache,'/temp/'
→T.GoToTidyUp 9≠#.TEMP.⎕NC'versions'
r←T._OK
∆TidyUp:
tempFolder←'expand'F.NormalizePath #.TEMP.versions.##.TatinVars.HOME,'/..'
F.RmDir tempFolder
⍝Done
r←Test_Cache_081(stopFlag batchFlag);⎕TRAP;res
⍝ List packages for all domains represented in the Tatin package cache with at least one package
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←TC.ListCache''
→T.PassesIf 1=≢res
→T.PassesIf(≢¨res)∧.=2
→T.PassesIf(|≡¨2⊃¨res)∧.=2
→T.PassesIf 0∧.<≢¨2⊃¨res
→T.PassesIf~∧/{∨/'/\'∊⍵}¨1⊃¨res
→T.PassesIf~∧/∧/¨{∨/'/\'∊⍵}¨¨2⊃¨res
r←T._OK
⍝Done
r←Test_Cache_082(stopFlag batchFlag);⎕TRAP;res
⍝ List packages for a specific domain represented in the Tatin package cache with at least one package
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←TC.ListCache'tatin.dev'
→T.PassesIf 1=≢res
→T.PassesIf(≢¨res)∧.=2
→T.PassesIf(|≡¨2⊃¨res)∧.=2
→T.PassesIf 0∧.<≢¨2⊃¨res
→T.PassesIf~∧/{∨/'/\'∊⍵}¨1⊃¨res
→T.PassesIf~∧/∧/¨{∨/'/\'∊⍵}¨¨2⊃¨res
r←T._OK
⍝Done
r←Test_Cache_083(stopFlag batchFlag);⎕TRAP;res
⍝ List packages for all domains represented in the Tatin package cache with at least one package but ask for full paths
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←1 TC.ListCache''
→T.PassesIf∧/{∨/'/\'∊⍵}¨1⊃¨res
→T.PassesIf∧/∧/¨{∨/'/\'∊⍵}¨¨2⊃¨res
r←T._OK
⍝Done
r←Test_Cache_084(stopFlag batchFlag);⎕TRAP;res
⍝ List packages for a specific domain represented in the Tatin package cache with at least one package but ask for full paths
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←1 TC.ListCache'tatin.dev'
→T.PassesIf∧/{∨/'/\'∊⍵}¨1⊃¨res
→T.PassesIf∧/∧/¨{∨/'/\'∊⍵}¨¨2⊃¨res
r←T._OK
⍝Done
r←Test_Cache_999(stopFlag batchFlag);⎕TRAP;tno;report;rc;filename
⍝ Clear the Tatin package cache
⍝ Must be executed as the very last cache-related test case because nothing will be left in the cache
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
filename←TC.GetPathToPackageCache,'/tatin.dev/aplteam-OS-3.0.1/apl-dependencies.txt'
:If 'Win'≡##.APLTreeUtils2.GetOperatingSystem ⍬
tno←filename ⎕NTIE 0 16 ⍝ Exclusive tie, preventing deletion!
(rc report)←TC.ClearCache''
→T.GoToTidyUp 0=rc
→T.GoToTidyUp 0=+/'aplteam-OS-3.0.1'⍷report
⎕NUNTIE tno
:EndIf
(rc report)←TC.ClearCache''
→T.GoToTidyUp 0≠rc
→T.GoToTidyUp 0≠≢report
r←T._OK
∆TidyUp:
:Trap 6 11 ⋄ {}⎕NUNTIE tno ⋄ :EndTrap
⍝Done
r←Test_CheckVersions_001(stopFlag batchFlag);⎕TRAP;version
⍝ Run CheckForLaterVersion on an installed package that is the best anyway
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
version←TC.CheckForLaterVersion ∆TEMP_TEST_DATA,'/Packages/Local-No-Better'
→T.PassesIf 1=≢version
r←T._OK
⍝Done
r←Test_CheckVersions_002(stopFlag batchFlag);⎕TRAP;version
⍝ Run CheckForLaterVersion on a single installed package when there is a better version available
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
version←TC.CheckForLaterVersion'TestData\Packages\Local-One\'
→T.PassesIf 1=≢version
→T.PassesIf'aplteam-APLTreeUtils-6.0.11'≡TC.GetPackageIDFrom⊃1 2⌷version  ⍝ But NOT 7.0.0!
r←T._OK
⍝Done
r←Test_CheckVersions_003(stopFlag batchFlag);⎕TRAP;versions;expected
⍝ Run CheckForLaterVersion on a package with multiple packages and even more dependencies
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
versions←TC.CheckForLaterVersion'TestData\Packages\Local-Many\'
→T.PassesIf 2=≢versions
expected←'aplteam-APLProcess-0.3.0' 'aplteam-HandleError-3.0.18'
→T.PassesIf versions[;4]∧.=1
r←T._OK
⍝Done
r←Test_CheckVersions_004(stopFlag batchFlag);⎕TRAP;dir;versions;result;rc;msg;tempDir;buff
⍝ Run CheckForLaterVersion on a package that has a later major version
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY⍠('Wildcard' 1)⊣∆TEMP_TEST_DATA,'/Packages/Install-template/*'
tempDir←∆GetTempDir'_install'
versions←1 TC.CheckForLaterVersion dir
→T.PassesIf 1=≢versions
buff←⎕SE.Tatin.InstallPackages'[localhost]aplteam-MarkAPL'tempDir
→T.GoToTidyUp(⊃buff)≢TC.GetPackageIDFrom⊃1 2⌷versions
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_CheckVersions_050(stopFlag batchFlag);⎕TRAP;versions;dir;result;msg;rc
⍝ Run CheckForLaterVersion on a package and then install the better version with default (=ignore better major versions)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY⍠('Wildcard' 1)⊣∆TEMP_TEST_DATA,'/Packages/Install-template/*'
versions←TC.CheckForLaterVersion dir
→T.PassesIf 1=≢versions
→T.GoToTidyUp'aplteam-MarkAPL-9.1.13'≢TC.GetPackageIDFrom⊃1 2⌷versions
result←TC.InstallPackages(⊃1 2⌷versions)dir
→T.GoToTidyUp'aplteam-MarkAPL-9.1.13'≢⊃,/TC.GetPackageIDFrom¨result
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_CheckVersions_051(stopFlag batchFlag);⎕TRAP;dir;versions;result;rc;msg;tempDir;buff
⍝ Run CheckForLaterVersion on a package and then install the better version with -all (include better major versions)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY⍠('Wildcard' 1)⊣∆TEMP_TEST_DATA,'/Packages/Install-template/*'
tempDir←∆GetTempDir'_install'
versions←1 TC.CheckForLaterVersion dir
→T.PassesIf 1=≢versions
buff←⎕SE.Tatin.InstallPackages'[localhost]aplteam-MarkAPL'tempDir
→T.GoToTidyUp(⊃buff)≢TC.GetPackageIDFrom⊃1 2⌷versions
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_CheckVersions_060(stopFlag batchFlag);⎕TRAP;dir;versions;result;oldPriorities;json;buff;rc;msg
⍝ Run CheckForLaterVersion on package from Registry not on Tatin Registry search path (priority←0)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY⍠('Wildcard' 1)⊣∆TEMP_TEST_DATA,'/myproj/*'
json←##.Client.MyUserSettings.GetRegistry'https://test.tatin.dev/'
oldPriorities←json.priority
json.priority←0
buff←1 TC.CheckForLaterVersion dir,'/packages'
→T.GoToTidyUp~∨/'<<< Not found anywhere >>>'⍷⎕FMT buff
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
json.priority←oldPriorities
⍝Done
r←Test_ClientConfig_001(stopFlag batchFlag);⎕TRAP;reg;uri
⍝ Check the default values after initializing the DefineRegistry class
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
uri←'tatin.mycompany.com'
reg←⎕NEW TC.DefineRegistry(,⊂'http://',uri)
→T.PassesIf≢reg.uri≡uri
→T.PassesIf 0=≢⊃,/reg.(alias api_key)
→T.PassesIf 0≡reg.port
→T.PassesIf ⎕NULL≡reg.priority
r←T._OK
⍝Done
r←Test_ClientConfig_002(stopFlag batchFlag);⎕TRAP;reg
⍝ Check invalid assignments for the DefineRegistry class
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣⎕NEW TC.DefineRegistry(,⊂⍵)}⊂'Wrong depth'
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣⎕NEW TC.DefineRegistry(,⊂⍵)}⊂1 2 3
reg←⎕NEW TC.DefineRegistry(,⊂'https://foo.com')
→T.PassesIf{2::1 ⋄ 0⊣reg.uri←⍵}'johndoe.org'
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.alias←⍵}⊂'Wrong depth'
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.alias←⍵}⊂1                   ⍝ Wrong data type
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.api_key←⍵}⊂'foo'             ⍝ Wrong depth
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.api_key←⍵}⊂1                 ⍝ Wrong data type
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.port←⍵}⊂,1                   ⍝ Wrong dapth
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.port←⍵}1 2                   ⍝ Wrong length
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.port←⍵}¯1                    ⍝ Wrong value
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.port←⍵}70000                 ⍝ Wrong value
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.port←⍵}⊂'foo'                ⍝ Wrong data type
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.priority←⍵}⊂'foo'            ⍝ Wrong data type
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.priority←⍵}⎕NULL             ⍝ Wrong data type
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.priority←⍵}¯1                ⍝ Invalid domain
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.priority←⍵}32768             ⍝ Invalid domain
r←T._OK
⍝Done
r←Test_ClientConfig_003(stopFlag batchFlag);⎕TRAP;reg;ns;expected
⍝ Exercise DefineRegistry's "Get" function
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
reg←⎕NEW TC.DefineRegistry(,⊂'[boo]http://localhost')
reg.api_key←'Firlefanz'
reg.port←61250
reg.alias←'foo'
reg.priority←400
ns←reg.Get ⍬
→T.PassesIf∧/(' '~¨⍨↓ns.⎕NL⍳16)∊reg.varsList
expected←'foo' 'Firlefanz' 61250 'http://localhost/' 400 0 ''
→T.PassesIf expected ∆LazyMatch reg.Get¨reg.varsList~⊂'id'
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.Get ⍵}1                  ⍝ Wrong data type
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.Get ⍵}⊂'foo'             ⍝ Wrong depth
→T.PassesIf{##.Registry.ErrorNo::1 ⋄ 0⊣reg.Get ⍵}'DoesNotExist'
r←T._OK
⍝Done
r←Test_ClientConfig_004(stopFlag batchFlag);⎕TRAP;res1;res2
⍝ List all registries
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res1←⎕SE.Tatin.MyUserSettings.ListRegistries ⍬
→T.PassesIf 0<≢res1
res2←1 ⎕SE.Tatin.MyUserSettings.ListRegistries ⍬
→T.PassesIf>/≢¨res1 res2
r←T._OK
⍝Done
r←Test_ClientConfig_010(stopFlag batchFlag);⎕TRAP;dir
⍝ Attempt to delete the one and only Registry; must result in an error
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←'ConfigFile'∆GetTempDir''
F.DeleteFile dir,'/',TC.UserSettings.cfg_name
TC.InitUserSettings dir
:Trap 0
TC.MyUserSettings.RemoveRegistry'[tatin]'
→T.GoToTidyUp 1
:EndTrap
r←T._OK
∆TidyUp:
{}0 TC.InitUserSettings ∆TEMP_TEST_DATA
⍝Done
r←Test_ClientConfig_020(stopFlag batchFlag);⎕TRAP;reg;ns;reg2;expected
⍝ Use the namespace returned by the "Get" method as template for creating a new instance of DefineRegistry
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
reg←⎕NEW TC.DefineRegistry(,⊂'http://foo.com')
reg.api_key←'firlefanz'
reg.port←61250
reg.alias←'foo'
reg.priority←500
ns←reg.Get ⍬
reg2←⎕NEW TC.DefineRegistry(,ns)
expected←'http://foo.com/' 'foo' 61250 'firlefanz' 500 0 ''
→T.PassesIf expected ∆LazyMatch reg{⍺⍎⍵}¨TC.DefineRegistry.varsList~⊂'id'
r←T._OK
⍝Done
r←Test_ClientConfig_101(stopFlag batchFlag);⎕TRAP;tempDir;settings;rc;msg
⍝ Create a new config file and check it
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name                           ⍝ Precaution
settings←∆NewUserSettings(,⊂tempDir)
→T.GoToTidyUp~F.IsFile settings.path2config
→T.GoToTidyUp≢/F.ExpandPath¨settings.path2config(tempDir,'/',settings.cfg_name)
→T.GoToTidyUp 0≠≢settings.source
→T.GoToTidyUp 2≠≢settings.registries
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_ClientConfig_103(stopFlag batchFlag);⎕TRAP;tempDir;settings;reg2;reg1;ns;rc;msg
⍝ Exercise AddRegistry, ListRegistries, ReplaceRegistry and RemoveRegistry on a config file with 1 to 2 registries
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name                           ⍝ Precaution
settings←∆NewUserSettings(,⊂tempDir)
→T.GoToTidyUp 2≠≢settings.registries
reg2←⎕NEW TC.DefineRegistry(,⊂'https://localhost')
settings.AddRegistry reg2
→T.GoToTidyUp 3≠≢settings.registries
reg2.alias←'foo'
reg2.api_key←'Firlefanz'
ns←reg2.Get ⍬
settings.ReplaceRegistry reg2
settings.Save 1
⎕EX'settings'
settings←∆NewUserSettings(,⊂tempDir)
→T.GoToTidyUp 3≠≢settings.registries
→T.GoToTidyUp(settings.GetRegistry'[foo]')≢settings.GetRegistry'https://localhost'
→T.GoToTidyUp 1≠settings.RemoveRegistry'https://localhost'
settings.AddRegistry reg2
→T.GoToTidyUp 3≠≢settings.registries
→T.GoToTidyUp 1≠settings.Exist'[foo]'
→T.GoToTidyUp 1≠settings.RemoveRegistry'[foo]'
→T.GoToTidyUp 0≠settings.Exist'[foo]'
→T.GoToTidyUp 2≠≢settings.registries
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_ClientConfig_104(stopFlag batchFlag);⎕TRAP;tempDir;settings;ns;list;rc;msg
⍝ Exercise both AddRegistry and ReplaceRegistry with ⎕NS''
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name                           ⍝ Precaution
settings←∆NewUserSettings(,⊂tempDir)
→T.GoToTidyUp 2≠≢settings.registries
ns←⎕NS''
ns.uri←'https://localhost'
settings.AddRegistry ns
list←1 settings.ListRegistries ⍬
→T.PassesIf 3=≢list
→T.PassesIf list[;1]∆LazyMatch'tatin' 'tatin-test' ''
ns←⎕NS''
ns.uri←'https://localhost/'
ns.priority←999
ns.api_key←'xxx'
ns.alias←'foo'
settings.ReplaceRegistry ns
list←1 settings.ListRegistries ⍬
→T.PassesIf 3=≢list
→T.PassesIf list[;1]≡'foo' 'tatin' 'tatin-test'
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_ClientConfig_105(stopFlag batchFlag);⎕TRAP;tempDir;settings;reg1;reg2;qdmx;msg;rc
⍝ Exercise ReplaceRegistry on a registry that does not exist
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name                           ⍝ Precaution
settings←∆NewUserSettings(,⊂tempDir)
→T.GoToTidyUp 2≠≢settings.registries
reg1←⎕NEW TC.DefineRegistry(,⊂'https://localhost')
reg1.alias←'foo'
reg1.api_key←'Firlefanz'
:Trap 997
settings.ReplaceRegistry reg1
→T.FailsIf 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'There is no such registry yet'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_ClientConfig_106(stopFlag batchFlag);⎕TRAP;tempDir;settings;ns;rc;msg
⍝ Exercise AddRegistry and and RemoveRegistry with a character vector specifying just a URL (without alias)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name                           ⍝ Precaution
settings←∆NewUserSettings(,⊂tempDir)
→T.GoToTidyUp 2≠≢settings.registries
settings.AddRegistry'https://localhost'
→T.GoToTidyUp 3≠≢settings.registries
→T.GoToTidyUp~(∊¯1↑¨settings.registries.uri)∧.='/'
→T.GoToTidyUp 1≠settings.RemoveRegistry'https://localhost'
→T.GoToTidyUp 2≠≢settings.registries
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_ClientConfig_107(stopFlag batchFlag);⎕TRAP;tempDir;settings;ns;rc;msg
⍝ Exercise AddRegistry & RemoveRegistry with a character vector defining alias and URL, delete by URL
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name               ⍝ Precaution
settings←∆NewUserSettings(,⊂tempDir)
→T.GoToTidyUp 2≠≢settings.registries
settings.AddRegistry'[foo]https://localhost'
→T.GoToTidyUp 3≠≢settings.registries
→T.GoToTidyUp 1≠settings.RemoveRegistry'https://localhost'     ⍝ Delete by URL
→T.GoToTidyUp 2≠≢settings.registries
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_ClientConfig_108(stopFlag batchFlag);⎕TRAP;tempDir;settings;ns;rc;msg
⍝ Exercise AddRegistry and RemoveRegistry with a character vector defining alias+URL, delete by alias
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name               ⍝ Precaution
settings←∆NewUserSettings(,⊂tempDir)
→T.GoToTidyUp 2≠≢settings.registries
settings.AddRegistry'[foo]https://localhost'
→T.GoToTidyUp 3≠≢settings.registries
→T.GoToTidyUp 1≠settings.RemoveRegistry'[foo]'     ⍝ Delete by alias
→T.GoToTidyUp 2≠≢settings.registries
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_ClientConfig_110(stopFlag batchFlag);⎕TRAP;settings;defaultFile;origData
⍝ Instantiate the "UserSettings" class without an argument
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
defaultFile←TC.GetUserHomeFolder TC.UserSettings.cfg_name
:If F.IsFile defaultFile
origData←⊃F.NGET defaultFile
:Else
origData←''
:EndIf
settings←⎕NEW TC.UserSettings
r←T._OK
∆TidyUp:
:If 0<≢origData
(⊂origData)F.NPUT defaultFile 1
:Else
F.DeleteFile defaultFile
:EndIf
⍝Done
r←Test_ClientConfig_111(stopFlag batchFlag);⎕TRAP;settings;tempDir;buff;reg;myRegDef;rc;msg
⍝ Instantiate the "UserSettings" class with a path, add registry, Save, call MakeDefaultFile and then re-instantiate
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name   ⍝ Precaution
settings←∆NewUserSettings(,⊂tempDir)
→T.GoToTidyUp≢/F.ExpandPath¨settings.path2config(tempDir,'/',settings.cfg_name)
settings.MakeDefaultFile 1
buff←⊃F.NGET TC.GetUserHomeFolder'.tatin'          ⍝ Must now exist and...
→T.GoToTidyUp tempDir{⍺≢(≢⍺)↑⍵}buff                ⍝ ... have the correct contents
myRegDef←'[my]https://tatin.dev/'
reg←⎕NEW TC.DefineRegistry(,⊂myRegDef)
settings.AddRegistry reg
settings.Save 1
⎕EX'settings'
settings←⎕NEW TC.UserSettings
→T.GoToTidyUp myRegDef≢⊃{'[',⍺,']',⍵}/(settings.GetRegistry'[my]').(alias uri)
→T.GoToTidyUp 1≠settings.Delete 1
→T.GoToTidyUp 0≠settings.Delete 1                  ⍝ Second time cannot be successful
settings.Save 1
→T.GoToTidyUp F.IsFile⊃{⍺,'/',⍵}/settings.(path2config cfg_name)
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
F.DeleteFile TC.GetUserHomeFolder'.tatin'
⍝Done
r←Test_ClientConfig_112(stopFlag batchFlag);⎕TRAP;settings;tempDir;reg;myRegDef1;myRegDef2;rc;msg
⍝ Check whether the priorities are reset in case a new registry is added but the lowest priority is 1; standard order
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
settings←∆NewUserSettings(,⊂tempDir)
→T.GoToTidyUp≢/F.ExpandPath¨settings.path2config(tempDir,'/',settings.cfg_name)
myRegDef1←'[test]https://test.tatin.dev/'
reg←⎕NEW TC.DefineRegistry(,⊂myRegDef1)
reg.priority←1
settings.AddRegistry reg
→T.GoToTidyUp'tatin' 'test' 'tatin-test'≢(1 settings.ListRegistries 0)[;1]
myRegDef2←'[my-tatin]https://tatin.dev/'
reg←⎕NEW TC.DefineRegistry(,⊂myRegDef2)
settings.AddRegistry reg
→T.GoToTidyUp'tatin' 'test' 'my-tatin' 'tatin-test'≢(1 settings.ListRegistries 0)[;1]
→T.GoToTidyUp 400 300 100 0≢settings.registries.priority
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_ClientConfig_113(stopFlag batchFlag);⎕TRAP;settings;tempDir;reg;myRegDef1;myRegDef2;rc;msg
⍝ Check whether the priorities are reset in case a new registry is added but the lowest priority is 1; non-standard order
⍝ Note that priority is not touched if it is not in the way. Here 9000 survives!
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
settings←∆NewUserSettings(,⊂tempDir)
→T.GoToTidyUp≢/F.ExpandPath¨settings.path2config(tempDir,'/',settings.cfg_name)
settings.registries.priority←1 0
myRegDef1←'[test]https://test.tatin.dev/'
reg←⎕NEW TC.DefineRegistry(,⊂myRegDef1)
reg.priority←9000
settings.AddRegistry reg
→T.GoToTidyUp'test' 'tatin' 'tatin-test'≢(1 settings.ListRegistries 0)[;1]
myRegDef2←'[my-tatin]https://tatin.dev/'
reg←⎕NEW TC.DefineRegistry(,⊂myRegDef2)
settings.AddRegistry reg
→T.GoToTidyUp 9000 300 100 0≢settings.registries.priority
→T.GoToTidyUp'test' 'tatin' 'my-tatin' 'tatin-test'≢(1 settings.ListRegistries 0)[;1]
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_ClientConfig_114(stopFlag batchFlag);⎕TRAP;tempDir;settings;data1;data2;rc;msg
⍝ Check "json" property
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
settings←⎕NEW TC.UserSettings(,⊂tempDir)
data1←∆JSON settings.json
data2←∆JSON⊃⎕NGET(tempDir,'/tatin-client.json')
→T.GoToTidyUp~∧/⊃{(⍺∊⍵)∧(⍵∊⍺)}/{⍵⍎¨(' '~⍨¨↓⍵.⎕NL 2)~⊂'registries'}¨data1 data2
→T.GoToTidyUp~data1.registries.uri ∆LazyMatch data2.registries.uri
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0 tempDir
⍝Done
r←Test_ClientConfig_122(stopFlag batchFlag);⎕TRAP;tempDir;parms;qdmx
⍝ Attempt to define a URL with an alias (invalid)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.uri←'[alias]https://localhost'  ⍝ Invalid!
parms.api_key←'First-one'
:Trap ##.Registry.ErrorNo
{}⎕NEW TC.DefineRegistry(,⊂parms)
→T.FailsIf 1
:Else
qdmx←⎕DMX
→T.PassesIf'"uri" must not carry []'≡qdmx.EM
:EndTrap
r←T._OK
⍝Done
r←Test_CopyReg_002(stopFlag batchFlag);⎕TRAP;parms;msg;rc;list1;list2;list3;list4;groups
⍝ Exercise the option "group="
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←##.Client.CreateCopyRegistryParms ⍬
parms.path←(F.GetTempSubDir⊃⎕SI),'/'
parms.url←##.Client.ReplaceRegistryAlias'[localhost]'
parms.dependencies←0
parms.dry←1
list1←##.Client.CopyRegistry parms
→T.GoToTidyUp~0<≢list1
→T.GoToTidyUp~1<≢∪Reg.GetGroupFromPackageID¨list1
parms.group←'example'
list2←##.Client.CopyRegistry parms
→T.GoToTidyUp~>/≢¨list1 list2
groups←Reg.GetGroupFromPackageID¨list2
→T.GoToTidyUp~1<≢groups
→T.GoToTidyUp'example'≢∊∪,groups
parms.group←'DoesNotExist'
list3←##.Client.CopyRegistry parms
→T.GoToTidyUp 0≠≢list3
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce parms.path
msg Assert rc=0
⍝Done
r←Test_CopyReg_003(stopFlag batchFlag);⎕TRAP;parms;msg;rc;list;expected;tempDir;buff;filename;list2;list3
⍝ Exercise the "list=" option with all valid flavours
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
parms←##.Client.CreateCopyRegistryParms ⍬
parms.path←(F.GetTempSubDir⊃⎕SI),'/'
parms.url←##.Client.ReplaceRegistryAlias'[localhost]'
parms.list←'#.TEMP.MyPkgs'
parms.dry←1
parms.latest←1
parms.dependencies←0
list←##.Client.CopyRegistry parms
expected←'example-Boo-1.0.0' 'example-versions-2.0.0'
→T.GoToTidyUp expected≢,list
parms.latest←0
list2←##.Client.CopyRegistry parms
expected←'aplteam-SevenZip-3.0.0' 'aplteam-SevenZip-3.0.1' 'aplteam-SevenZip-4.0.4'
→T.GoToTidyUp expected≢,list2
tempDir←F.GetTempSubDir⊃⎕SI
buff←'aplteam-APLTreeUtils' 'example-versions'
filename←tempDir,'/pkg-list.txt'
(⊂buff)⎕NPUT filename 1
parms.list←'file://',filename
parms.latest←1
list3←##.Client.CopyRegistry parms
→T.GoToTidyUp 2≠≢list3
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce parms.path
msg Assert rc=0
:If 0<⎕NC'tempDir'
{}F.RmDirByForce tempDir
:EndIf
⍝Done
r←Test_CopyReg_004(stopFlag batchFlag);⎕TRAP;parms;qdmx;rc;msg
⍝ Exercise the "list=" option with invalid options
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←##.Client.CreateCopyRegistryParms ⍬
parms.path←(F.GetTempSubDir⊃⎕SI),'/'
parms.url←##.Client.ReplaceRegistryAlias'[localhost]'
parms.dry←1
parms.list←'aplteam'   ⍝ Invalid
:Trap 998
{}##.Client.CopyRegistry parms
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp~∨/'"list" is not consistanty/correctly defined'⍷qdmx.EM
:EndTrap
parms.list←'aplteam-APLTreeUtils,aplteam-SevenZip-4'  ⍝ Inconsistent
:Trap 998
{}##.Client.CopyRegistry parms
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp~∨/'"list" is not consistanty/correctly defined'⍷qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce parms.path
msg Assert rc=0
⍝Done
r←Test_CopyReg_005(stopFlag batchFlag);⎕TRAP;parms;list;groups;rc;msg
⍝ Check whether dependencies are added
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←##.Client.CreateCopyRegistryParms ⍬
parms.path←(F.GetTempSubDir⊃⎕SI),'/'
parms.url←##.Client.ReplaceRegistryAlias'[localhost]'
parms.dry←1
parms.group←'example'
list←##.Client.CopyRegistry parms
→T.PassesIf 0<≢list
groups←∪Reg.GetGroupFromPackageID¨list
→T.PassesIf 1<≢groups  ⍝ Some packages depend on stuff from the "aplteam" group, so there must be more than one
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce parms.path
msg Assert rc=0
⍝Done
r←Test_CopyReg_010(stopFlag batchFlag);⎕TRAP;parms;msg;rc;list1;list2;list3;list1_a;parms2;list4;b
⍝ Exercise the default as well as the flag "latest"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←##.Client.CreateCopyRegistryParms ⍬
parms.path←(F.GetTempSubDir⊃⎕SI),'/'
parms.url←##.Client.ReplaceRegistryAlias'[localhost]'
parms.dependencies←0
parms.verbose←1
list1←##.Client.CopyRegistry parms
→T.GoToTidyUp~1<≢∪##.Registry.GetGroupName¨list1
parms2←##.Registry.CheckParmsForListPackages ⍬
parms2.aggregate←0
list1_a←,parms2 ##.Client.ListPackages parms.url
→T.GoToTidyUp~∧/∨/¨'deprecated'∘⍷¨list1[;1]~list1_a
→T.GoToTidyUp(≢list1)≠(≢list1_a)+≢list1[;1]~list1_a
parms.latest←1
list3←##.Client.CopyRegistry parms
→T.GoToTidyUp~>/≢¨list1 list3
{}F.RmDirByForce parms.path,'aplteam-RideClient-0.7.1'
list4←##.Client.CopyRegistry parms
→T.GoToTidyUp 1≠+/b←list4[;2]≡¨⊂'Fetched'
→T.GoToTidyUp'aplteam-RideClient-0.7.1'≢1⊃list4[⊃⍸b;]
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce parms.path
msg Assert 0=rc
⍝Done
r←Test_CopyReg_020(stopFlag batchFlag);⎕TRAP;parms;list1;list2;msg;rc
⍝ Copy full Registry, then delete some packages and sync
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←##.Client.CreateCopyRegistryParms ⍬
parms.path←(F.GetTempSubDir⊃⎕SI),'/'
parms.url←##.Client.ReplaceRegistryAlias'[localhost]'
parms.verbose←1
list1←##.Client.CopyRegistry parms
→T.GoToTidyUp~1<≢∪##.Registry.GetGroupName¨list1
(rc msg)←↓⍉↑F.RmDirByForce¨parms.path∘,¨list1[3 6 7;1]
(1↓⊃,/';',¨msg)Assert rc∧.=0
F.DeleteFile¨F.ListFiles parms.path,(1⊃list1[12;]),'/'
(rc msg)←↓⍉↑F.RmDirByForce¨F.ListDirs parms.path,(1⊃list1[12;]),'/'
(1↓⊃,/';',¨msg)Assert rc∧.=0
Assert 0=≢⊃F.Dir parms.path,(1⊃list1[12;]),'/'
list2←##.Client.CopyRegistry parms
→T.GoToTidyUp 3≠+/list2[;2]≡¨⊂'Fetched'
→T.GoToTidyUp~∧/⎕NEXISTS¨parms.path∘,¨list1[3 6 7;1]
→T.GoToTidyUp 0≠≢⊃F.Dir parms.path,(1⊃list1[12;]),'/'  ⍝ That one remains unchanged because just the contents was deleted!
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce parms.path
msg Assert 0=rc
⍝Done
R←Test_CreateAPI_011(stopFlag batchFlag);⎕TRAP;noOf;folder;res;cfg
⍝ Exercise CreateAPIfromCFG on all possible types of objects with a namespace
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
'TEMP'#.⎕NS''
folder←∆TEMP_TEST_DATA,'/MyApp'
res←⎕SE.Link.Import'#.TEMP'folder
Assert∨/'Imported:'⍷res
Assert~∨/'Error:'⍷res
cfg←##.Registry.GetJsonFromFile folder,'/apl-package.json'
noOf←##.Client.CreateAPIfromCFG #.TEMP cfg
→T.PassesIf noOf=≢F.ListFiles folder   ⍝ Minus 1 for the package config file but plus 1 for the sub folder (=namespace)
→T.PassesIf'Universe'≡#.TEMP.My_API.HelloVars
→T.PassesIf'Galaxy'≡#.TEMP.My_API.class1.Hello2
→T.PassesIf'Niladic'≡#.TEMP.My_API.fn1
→T.PassesIf'Monadic'≡#.TEMP.My_API.fn2 ⍬
→T.PassesIf'Dyadic'≡⍬ #.TEMP.My_API.fn3 ⍬
→T.PassesIf'Ambivalent'≡#.TEMP.My_API.fn4 ⍬
:Trap 0
→T.PassesIf 1
:Else
→T.PassesIf 0
:EndTrap
→T.PassesIf 3.14≡#.TEMP.ns2.PI
→T.PassesIf 6≡#.TEMP.dfn1⍳3
→T.PassesIf 9 7≡#.TEMP.dfn2 9 2
→T.PassesIf 9≡4 #.TEMP.dfn3 5
→T.PassesIf 0<#.TEMP.My_API.⎕NC'interface1'
→T.PassesIf'Galaxy'≡#.TEMP.My_API.ns1.Hello
→T.PassesIf 4∧.=⊃∘#.TEMP.My_API.⎕NC¨'op1' 'op2' 'op3' 'op4'
→T.PassesIf 6≡+/#.TEMP.op1⍳3
→T.PassesIf 21≡+/#.TEMP.op2{⍵}2 3⍴⍳12
→T.PassesIf ¯220≡10-#.TEMP.op3×22
→T.PassesIf ¯6≡×/#.TEMP.op4+⍳3
→T.PassesIf 0∧.≠#.TEMP.My_API.⎕NC↑'HelloVars' 'Hello'
→T.PassesIf'World'≡#.TEMP.My_API.Hello
→T.PassesIf 1 0 0 0 0≡{¯1=⊃⊃⎕AT'#.TEMP.fn',⍵}¨'12345'
R←T._OK
⍝Done
R←Test_CreateAPI_012(stopFlag batchFlag);⎕TRAP;noOf;folder;res;cfg
⍝ Exercise CreateAPIfromCFG on all possible types of objects with a namespace with an additional level
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
'TEMP'#.⎕NS''
folder←∆TEMP_TEST_DATA,'/MyApp3'
res←⎕SE.Link.Import'#.TEMP'folder
Assert∨/'Imported:'⍷res
Assert~∨/'Error:'⍷res
cfg←##.Registry.GetJsonFromFile folder,'/apl-package.json'
noOf←##.Client.CreateAPIfromCFG #.TEMP cfg
→T.PassesIf noOf=≢#.TEMP.sub.⎕NL⍳16
→T.PassesIf'Universe'≡#.TEMP.API.sub.HelloVars
→T.PassesIf'Galaxy'≡#.TEMP.API.sub.class1.Hello2
→T.PassesIf'Niladic'≡#.TEMP.API.sub.fn1
→T.PassesIf'Monadic'≡#.TEMP.API.sub.fn2 ⍬
→T.PassesIf'Dyadic'≡⍬ #.TEMP.API.sub.fn3 ⍬
→T.PassesIf'Ambivalent'≡#.TEMP.API.sub.fn4 ⍬
:Trap 0
→T.PassesIf 1
:Else
→T.PassesIf 0
:EndTrap
→T.PassesIf 3.14≡#.TEMP.API.sub.ns2.PI
→T.PassesIf 6≡#.TEMP.API.sub.dfn1⍳3
→T.PassesIf 9 7≡#.TEMP.API.sub.dfn2 9 2
→T.PassesIf 9≡4 #.TEMP.API.sub.dfn3 5
→T.PassesIf 0<#.TEMP.API.sub.⎕NC'interface1'
→T.PassesIf'Galaxy'≡#.TEMP.API.sub.ns1.Hello
→T.PassesIf 4∧.=⊃∘#.TEMP.API.sub.⎕NC¨'op1' 'op2' 'op3' 'op4'
→T.PassesIf 6≡+/#.TEMP.sub.op1⍳3
→T.PassesIf 21≡+/#.TEMP.sub.op2{⍵}2 3⍴⍳12
→T.PassesIf ¯220≡10-#.TEMP.sub.op3×22
→T.PassesIf ¯6≡×/#.TEMP.sub.op4+⍳3
→T.PassesIf 0∧.≠#.TEMP.API.sub.⎕NC↑'HelloVars' 'Hello'
→T.PassesIf'World'≡#.TEMP.API.sub.Hello
R←T._OK
⍝Done
R←Test_CreateAPI_013(stopFlag batchFlag);⎕TRAP;noOf;folder;res;cfg;names
⍝ Exercise CreateAPIfromCFG with a left argument (list of names)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
'TEMP'#.⎕NS''
folder←∆TEMP_TEST_DATA,'/MyApp'
res←⎕SE.Link.Import'#.TEMP'folder
Assert∨/'Imported:'⍷res
Assert~∨/'Error:'⍷res
cfg←##.Registry.GetJsonFromFile folder,'/apl-package.json'
names←'HelloVars' 'fn1' 'ns2.PI'
noOf←names ##.Client.CreateAPIfromCFG #.TEMP cfg
→T.PassesIf noOf=≢names
→T.PassesIf'Universe'≡#.TEMP.My_API.HelloVars
→T.PassesIf'Niladic'≡#.TEMP.My_API.fn1
→T.PassesIf 3.14≡#.TEMP.ns2.PI
R←T._OK
⍝Done
R←Test_CreateAPI_014(stopFlag batchFlag);⎕TRAP;noOf;cfg
⍝ Exercise CreateAPI on a namespace with one function and two operators, one monadic and one dyadic
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
'TEMP'#.⎕NS''
Assert' '=1↑0⍴#.TEMP.⎕FX'r←Hello' 'r←''World'''
Assert' '=1↑0⍴#.TEMP.⎕FX'r←x (fns Opr1) y' 'r←x fns y'
Assert' '=1↑0⍴#.TEMP.⎕FX'r←x (fns1 Opr2 fns2) y' 'r←x.fns2 y'
Assert' '=1↑0⍴#.TEMP.⎕FX'r←Public' 'r←''Hello'' ''Opr1'' ''Opr2'''
cfg←##.Client.InitPackageConfig ⍬
cfg.api←'API'
noOf←##.Client.CreateAPIfromCFG #.TEMP cfg
→T.PassesIf noOf=≢#.TEMP.Public
→T.PassesIf #.TEMP.Public ∆LazyMatch(⊂'Public')~⍨' '~⍨¨↓#.TEMP.⎕NL 3 4
R←T._OK
⍝Done
R←Test_CreateAPI_016(stopFlag batchFlag);⎕TRAP;noOf;cfg
⍝ Exercise CreateAPIfromCFG on a namespace with a niladic function that does not provide a result (was once a bug)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
'TEMP'#.⎕NS''
Assert' '=1↑0⍴#.TEMP.⎕FX'Dispose' '⎕EX ''GlobalVars'''
cfg←##.Client.InitPackageConfig ⍬
cfg.api←'My_API'
noOf←##.Client.CreateAPIfromCFG #.TEMP cfg
Assert noOf=≢(' '~⍨¨↓#.TEMP.⎕nl ⍳16)~⊂cfg.api
→T.PassesIf 0=#.TEMP.⎕NC'GlobalVars'
R←T._OK
⍝Done
R←Test_CreateAPI_017(stopFlag batchFlag);⎕TRAP;noOf;folder;res;cfg
⍝ Exercise CreateAPIfromCFG on all types of objects with many of them in a sub namespace
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
'TEMP'#.⎕NS''
folder←∆TEMP_TEST_DATA,'/MyApp2'
res←⎕SE.Link.Import'#.TEMP'folder
Assert∨/'Imported:'⍷res
Assert~∨/'Error:'⍷res
cfg←##.Client.InitPackageConfig ⍬
cfg.api←'My_API'
noOf←##.Client.CreateAPIfromCFG #.TEMP cfg
→T.PassesIf noOf=≢(' '~⍨¨↓#.TEMP.Sub.⎕NL⍳16),(' '~⍨¨↓#.TEMP.⎕NL⍳16)~cfg.api'Public' 'ns2' 'Sub'
→T.PassesIf'Universe'≡#.TEMP.My_API.Sub.HelloVars
→T.PassesIf'Galaxy'≡#.TEMP.My_API.Sub.class1.Hello2
→T.PassesIf'Niladic'≡#.TEMP.My_API.Sub.fn1
→T.PassesIf'Monadic'≡#.TEMP.My_API.Sub.fn2 ⍬
→T.PassesIf'Dyadic'≡⍬ #.TEMP.My_API.Sub.fn3 ⍬
→T.PassesIf'Ambivalent'≡#.TEMP.My_API.Sub.fn4 ⍬
→T.PassesIf'Ambivalent'≡⍬ #.TEMP.My_API.Sub.fn4 ⍬
:Trap 0
:Else
→T.PassesIf 0
:EndTrap
∆Go:
→T.PassesIf 0<#.TEMP.My_API.Sub.⎕NC'interface1'
→T.PassesIf'Galaxy'≡#.TEMP.My_API.Sub.ns1.Hello
→T.PassesIf 0∧.≠#.TEMP.My_API.Sub.⎕NC↑'HelloVars' 'Hello'
→T.PassesIf'World'≡#.TEMP.My_API.Sub.Hello
→T.PassesIf'op1'≡(+#.TEMP.My_API.Sub.op1)1
→T.PassesIf'op2'≡(+#.TEMP.My_API.Sub.op2=)1
→T.PassesIf'op3'≡2(+#.TEMP.My_API.Sub.op3=)1
→T.PassesIf'op4'≡(+#.TEMP.My_API.Sub.op4=)1
→T.PassesIf'op4'≡2(+#.TEMP.My_API.Sub.op4=)1
R←T._OK
⍝Done
r←Test_DeletePkg_01(stopFlag batchFlag);⎕TRAP;dir;src;zip;serverPath;body;cfg;packageID;rc;msg;zipFilename;list2;list1
⍝ Delete a single package with `DeletePackages` on local Tatin server
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'zip'
F.MkDir src zip
serverPath←∆TEMP_SERVER_FOLDER
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'test'
cfg.name←'Package_A'
cfg.version←'0.1.0'
cfg.source←'Test.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
packageID←'test-Package_A-0.1.0'
(rc msg zipFilename)←TC.PublishPackage src'[local]'
→T.GoToTidyUp 200≠rc
→T.GoToTidyUp 0≠≢msg
list1←({⍵.aggregate←0 ⋄ ⍵}⎕NS'')TC.ListPackages'[local]'
(rc msg)←TC.DeletePackages'[local]' packageID
Assert 200=rc
list2←({⍵.aggregate←0 ⋄ ⍵}⎕NS'')TC.ListPackages'[local]'
→T.GoToTidyUp'test-Package_A-0.1.0'≢∊list1[;1]~list2[;1]
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert 0=⊃F.RmDir serverPath,'/',packageID
F.DeleteFile(739⌶0),'/',packageID,'.zip'
⍝Done
r←Test_DeletePkg_02(stopFlag batchFlag);⎕TRAP;rc;msg;list2;list
⍝ Delete two packages with `DeletePackages` (can only run once)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg)←TC.DeletePackages'[localhost]'('example-MarkAPL-12.1.1' 'example-MarkAPL-9.1.1')
→T.PassesIf rc≡200
→T.PassesIf 0=≢msg
list←TC.ListVersions'[localhost]example-MarkAPL'
→T.PassesIf 0=+/'example-MarkAPL-12.1.1' 'example-MarkAPL-9.1.1'∊list
r←T._OK
⍝Done
r←Test_Demo_001(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted
;dir;src;body;cfg;reg;list;index;expected;zipped;src2;src3;refs
⍝ Publish a package with a single class, no API
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
F.MkDir src2←src,'/Arithmetic'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←''
body,←'∇r←x Plus y' ':Access Public Shared' 'r←x+y' '∇'
body,←'∇r←x Times y' ':Access Public Shared' 'r←x×y' '∇'
body←(⊂':Class MyClass'),body,(⊂':EndClass')
(⊂body)F.NPUT src2,'/Arithmetic.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Arithmetic' '1.0.0'
cfg.source←'Arithmetic.apln'
cfg.os_win←1
cfg.tags←'foo,boo'
⍝ cfg.api←'MyClass'
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
refs←TC.LoadPackages(reg,'/Example-Arithmetic-1.0.0')#.TEMP
→T.GoToTidyUp 7≠3 #.TEMP.Arithmetic.MyClass.Plus 4
→T.GoToTidyUp 12≠3 #.TEMP.Arithmetic.MyClass.Times 4
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Demo_002(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted
;dir;src;body;cfg;reg;list;index;expected;zipped;src2;src3;refs
⍝ Publish a package with a single class, with API
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
F.MkDir src2←src,'/Arithmetic'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←''
body,←'∇r←x Plus y' ':Access Public Shared' 'r←x+y' '∇'
body,←'∇r←x Times y' ':Access Public Shared' 'r←x×y' '∇'
body←(⊂':Class MyClass'),body,(⊂':EndClass')
(⊂body)F.NPUT src2,'/Arithmetic.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Arithmetic' '1.0.0'
cfg.source←'Arithmetic.apln'
cfg.api←'MyClass'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
refs←TC.LoadPackages(reg,'/Example-Arithmetic-1.0.0')#.TEMP
→T.GoToTidyUp 7≠3 #.TEMP.Arithmetic.Plus 4
→T.GoToTidyUp 12≠3 #.TEMP.Arithmetic.Times 4
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Demo_003(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted
;dir;src;body;cfg;reg;list;index;expected;zipped;src2;src3;refs
⍝ Publish a package with a three classes, no API
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
F.MkDir src2←src,'/APLSource'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Class MyClass1' '∇r←x Plus y' ':Access Public Shared' 'r←x+y' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/Arithmetic1.aplc'
body←':Class MyClass2' '∇r←x Times y' ':Access Public Shared' 'r←x×y' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/Arithmetic2.aplc'
body←':Class MyClass3' '∇r←x Power y' ':Access Public Shared' 'r←x*y' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/Arithmetic3.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Arithmetic' '1.0.0'
cfg.source←'APLSource'
⍝ cfg.api←'MyClass1'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
(rc msg zipFilename)←TC.PublishPackage src reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
refs←TC.LoadPackages(reg,'/Example-Arithmetic-1.0.0')#.TEMP
→T.GoToTidyUp 0 0 4≢≢¨#.TEMP.Arithmetic.⎕NL¨3 4 9
→T.GoToTidyUp 7≠3 #.TEMP.Arithmetic.MyClass1.Plus 4
→T.GoToTidyUp 12≠3 #.TEMP.Arithmetic.MyClass2.Times 4
→T.GoToTidyUp 81≠3 #.TEMP.Arithmetic.MyClass3.Power 4
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Demo_004(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted
;dir;src;body;cfg;reg;list;index;expected;zipped;src2;src3;refs
⍝ Publish a package with a three sub-classes and one class that acts as API
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
F.MkDir src2←src,'/APLSource'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Class MyClass1' '∇r←x Plus y' ':Access Public Shared' 'r←x+y' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/Arithmetic1.aplc'
body←':Class MyClass2' '∇r←x Times y' ':Access Public Shared' 'r←x×y' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/Arithmetic2.aplc'
body←':Class MyClass3' '∇r←x Power y' ':Access Public Shared' 'r←x*y' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/Arithmetic3.aplc'
body←''
body,←'∇r←x Plus y' '  :Access Public Shared' '  r←x ##.MyClass1.Plus y' '∇'
body,←'∇r←x Times y' '  :Access Public Shared' '  r←x ##.MyClass2.Times y' '∇'
body,←'∇r←x Power y' '  :Access Public Shared' '  r←x ##.MyClass3.Power y' '∇'
body←(⊂':Class MyClass'),body,(⊂':EndClass')
(⊂body)F.NPUT src2,'/MyClass.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Arithmetic' '1.0.0'
cfg.source←'APLSource'
cfg.api←'MyClass'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
(rc msg zipFilename)←TC.PublishPackage src reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
refs←TC.LoadPackages(reg,'/Example-Arithmetic-1.0.0')#.TEMP
→T.GoToTidyUp 0≠≢#.TEMP.Arithmetic.⎕NL⍳16
→T.GoToTidyUp 3≠≢#.TEMP.Arithmetic.⎕NL-⍳16
→T.GoToTidyUp 3≠≢#.TEMP.Arithmetic.⎕NL-3
→T.GoToTidyUp 7≠3 #.TEMP.Arithmetic.Plus 4
→T.GoToTidyUp 12≠3 #.TEMP.Arithmetic.Times 4
→T.GoToTidyUp 81≠3 #.TEMP.Arithmetic.Power 4
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Demo_005(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted
;dir;src;body;cfg;reg;list;index;expected;zipped;src2;src3;refs
⍝ Publish a package with all sorts of stuff and an API that has just one function: `Run`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
src2←src,'/APLSource'
F.MkDir src3←src2,'/API'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Class MyClass1' '∇r←x Plus y' ':Access Public Shared' 'r←x+y' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/Arithmetic1.aplc'
body←':Class MyClass2' '∇r←x Times y' ':Access Public Shared' 'r←x×y' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/Arithmetic2.aplc'
body←':Class MyClass3' '∇r←x Power y' ':Access Public Shared' 'r←x*y' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/Arithmetic3.aplc'
body←':Namespace MyNS' '∇r←Hello' 'r←''World''' '∇' ':EndNamespace'
(⊂body)F.NPUT src2,'/MyNS.apln'
body←'∇r←Hello1' 'r←''Universe''' '∇'
(⊂body)F.NPUT src2,'/Hello1.aplf'
body←'∇r←Hello2' 'r←''Galaxy''' '∇'
(⊂body)F.NPUT src2,'/Hello2.aplf'
body←'∇r←Run' '  r←''Hello '',##.Hello2' '∇'
(⊂body)F.NPUT src3,'/Run.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'MyProject' '1.0.0'
cfg.source←'APLSource'
cfg.api←'API'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
(rc msg zipFilename)←TC.PublishPackage src reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
refs←TC.LoadPackages(reg,'/Example-MyProject-1.0.0')#.TEMP
→T.GoToTidyUp 1≠≢#.TEMP.MyProject.⎕NL⍳16
→T.GoToTidyUp 1≠≢#.TEMP.MyProject.⎕NL-⍳16
→T.GoToTidyUp 1≠≢#.TEMP.MyProject.⎕NL 3
→T.GoToTidyUp'Hello Galaxy'≢#.TEMP.MyProject.Run
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Demo_020(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted;src2_
;dir;src;body;cfg;reg;list;index;expected;zipped;src2;src3;refs
⍝ Publish a package with a non-scripted namespace with two fns & one op, no dependencies, no API
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
F.MkDir src2←src,'/package_A'
F.MkDir src2_←src2,'/APLSource/Sub_NS'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←'Times←{' '⍺←1' '×/⍺,⍵' '}'
(⊂body)F.NPUT src2_,'/Times.aplf'
body←'r←(fns MyOp) array' 'r←fns array'
(⊂body)F.NPUT src2_,'/MyOp.aplo'
body←'r←NiladicFn' '  r←1'
(⊂body)F.NPUT src2_,'/../Niladic.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'NS' '1.0.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
refs←TC.LoadPackages(reg,'/Example-NS-1.0.0')#.TEMP
→T.GoToTidyUp 1≠#.TEMP.NS.NiladicFn
→T.GoToTidyUp 24≠(#.TEMP.NS.Sub_NS.Times #.TEMP.NS.Sub_NS.MyOp)1 2 3 4
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Demo_021(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted;src2_
;dir;src;body;cfg;reg;list;index;expected;zipped;src2;src3;refs
⍝ Publish a package with a non-scripted namespace with two fns and an API
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
F.MkDir src2←src,'/package_A'
F.MkDir src2_←src2,'/APLSource/Sub_NS'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←'Times←{' '⍺←1' '×/⍺,⍵' '}'
(⊂body)F.NPUT src2_,'/Times.aplf'
body←'r←(fns MyOp) array' 'r←fns array'
(⊂body)F.NPUT src2_,'/MyOp.aplo'
body←'r←NiladicFn' '  r←1'
(⊂body)F.NPUT src2_,'/../Niladic.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'NS' '1.0.0'
cfg.source←'APLSource'
cfg.api←'Sub_NS'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
refs←TC.LoadPackages(reg,'/Example-NS-1.0.0')#.TEMP
→T.GoToTidyUp 0≠#.TEMP.NS.⎕NC'NiladicFn'
→T.GoToTidyUp 24≠(#.TEMP.NS.Times #.TEMP.NS.MyOp)1 2 3 4
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Demo_042(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted
;dir;src;body;cfg;reg;list;index;expected;zipped;src2;src3
⍝ Publish a package with a single function, no API
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
F.MkDir src2←src,'/Arithmetic'
F.MkDir src2,'/APLSource'
F.MkDir src3←src,'/UseCase'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←'r←x Plus y' 'r←x+y'
(⊂body)F.NPUT src2,'/APLSource/Plus.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Arithmetic' '1.0.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
{}TC.LoadPackages(reg,'/Example-Arithmetic-1.0.0')#.TEMP
→T.GoToTidyUp 7≠3 #.TEMP.Arithmetic.Plus 4
body←'r←x Call y' 'r←x Arithmetic.Plus y'
(⊂body)F.NPUT src3,'/Call.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Calls' '1.0.0'
cfg.source←'Call.aplf'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
src3 TC.Dependencies.Add'Example-Arithmetic-1.0.0'
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
{}TC.LoadPackages(reg,'/Example-Calls-1.0.0')#.TEMP
→T.GoToTidyUp 7≠3 #.TEMP.Calls.Call 4
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Demo_043(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;qdmx
;dir;src;body;cfg;reg;list;index;expected;zipped;src2;src3;refs
⍝ Publish a package with two functions but with an API picking one of them (invalid)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
F.MkDir src2←src,'/Arithmetic'
F.MkDir src2,'/APLSource'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←'r←x Plus y' 'r←x+y'
(⊂body)F.NPUT src2,'/APLSource/Plus.aplf'
body←'r←x Times y' 'r←x×y'
(⊂body)F.NPUT src2,'/APLSource/Times.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Arithmetic' '1.0.0'
cfg.source←'APLSource'
cfg.api←'Times'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
:Trap 0
(rc msg zipFilename)←TC.PublishPackage src2 reg
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp~∨/'API is defined but neither a namespace nor a script'⍷qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
⍝Done
r←Test_FindDeps_010(stopFlag batchFlag);⎕TRAP;list;buff
⍝ Exercise FindDependencies with defaults on just a package name
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←##.Client.FindDependencies'filesanddirs,Tester2,doesnotexist'##.CiderConfig.HOME
→T.PassesIf 1=≢list                                            ⍝ Just one URL
→T.PassesIf 2=≢1⊃list                                          ⍝ Hosts the "URL" and the list of hits
→T.PassesIf≡/F.NormalizePath¨##.CiderConfig.HOME(1 1⊃list)     ⍝ Must match the right argument provided to FindDependencies
→T.PassesIf 0<≢1 2⊃list                                        ⍝ Must not be empty, of course
buff←{⎕C⊃,/1↓⎕NPARTS ⍵}¨F.ListDirs 1 2 1⊃list                  ⍝ Get the package IDs from the paths
→T.PassesIf 1 1 0≡∨/¨∨/¨¨(⊂¨'filesanddirs' 'tester2' 'doesnotexist')⍷¨¨⊂buff  ⍝ They all must turn up except "doesnotexist"...
r←T._OK
r←Test_FindDeps_020(stopFlag batchFlag);⎕TRAP;list
⍝ Exercise FindDependencies with level←1 on just a package name
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←##.Client.FindDependencies'Inno,Tester2'∆TEMP_TEST_DATA 1
→T.PassesIf 0<≢list
→T.PassesIf 1=≢list
→T.PassesIf 2=≡1 2⊃list
→T.PassesIf 2∧.≤{'-'+.=⊃,/1↓⎕NPARTS ⍵}¨1 2⊃list  ⍝ Must be valid package names and therefore have AT LEAST two hyphens
r←T._OK
r←Test_FindDeps_030(stopFlag batchFlag);⎕TRAP;list
⍝ Exercise FindDependencies with defaults on a group and a package name
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←##.Client.FindDependencies'davin-DateAndTime' ∆TEMP_TEST_DATA
→T.PassesIf 1=≢list
→T.PassesIf 2=≡1 2⊃list
→T.PassesIf F.IsDir 1 2 1⊃list
→T.PassesIf(,'B')≡2⊃⎕NPARTS 1 2 1⊃list
r←T._OK
r←Test_FindDeps_040(stopFlag batchFlag);⎕TRAP;list
⍝ Exercise FindDependencies with level←1 on a group and a package name
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←##.Client.FindDependencies'davin-DateAndTime'(∆TEMP_TEST_DATA,'/')1
→T.PassesIf 1=≢list
→T.PassesIf 2=≡1 2⊃list
→T.PassesIf F.IsDir 1 1⊃list
→T.PassesIf 2∧.≤{'-'+.=⊃,/1↓⎕NPARTS ⍵}¨1 2⊃list  ⍝ Must be valid package names and therefor have AT LEAST two hyphens
→T.PassesIf'davin-DateAndTime-1.0.0'≡⊃,/1↓⎕NPARTS∊1 2⊃list
r←T._OK
r←Test_FindDeps_050(stopFlag batchFlag);⎕TRAP;list
⍝ Exercise FindDependencies with defaults on a group and a package name and major version number
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←##.Client.FindDependencies'davin-DateAndTime-1'(∆TEMP_TEST_DATA,'/')
→T.PassesIf 1=≢list
→T.PassesIf 2=≡1 2⊃list
→T.PassesIf F.IsDir 1 2⊃list
→T.PassesIf(,'B')≡2⊃⎕NPARTS ∊1 2⊃list
r←T._OK
r←Test_FindDeps_060(stopFlag batchFlag);⎕TRAP;list
⍝ Exercise FindDependencies with defaults on a group and a package name and a full version number
⍝ Only the major number will be taken into account.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←##.Client.FindDependencies'davin-DateAndTime-1.0.0'(∆TEMP_TEST_DATA,'/')
→T.PassesIf 1=≢list
→T.PassesIf 2=≡1 2⊃list
→T.PassesIf F.IsDir 1 1⊃list
→T.PassesIf∧/F.IsDir¨1 2⊃list
→T.PassesIf(,'B')≡2⊃⎕NPARTS∊1 2⊃list
r←T._OK
r←Test_FindDeps_070(stopFlag batchFlag);⎕TRAP;list;expected
⍝ Exercise FindDependencies on a nested folder structure with both level←0 and level←1
⍝ Was once a bug
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←##.Client.FindDependencies'OS'(∆TEMP_TEST_DATA,'/FindTatinDependencies2')
expected←'aplteam-FilesAndDirs' 'aplteam-MakeHelpers'
→T.PassesIf expected≡{Reg.RemoveVersionNumber⊃,/1↓⎕NPARTS ⍵}¨1 2⊃list
list←##.Client.FindDependencies'OS'(##.CiderConfig.HOME,'/TestData/FindTatinDependencies2')1
expected←'aplteam-OS-3.0.1' 'aplteam-OS-3.0.1'
→T.PassesIf expected≡{⊃,/1↓⎕NPARTS ⍵}¨1 2⊃list
r←T._OK
r←Test_FindDeps_100(stopFlag batchFlag);⎕TRAP;list
⍝ Exercise FindDependencies on the test server for a single package
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←##.Client.FindDependencies'OS' '[localhost]'
→T.PassesIf 80<≢1 2⊃list
r←T._OK
r←Test_FindDeps_110(stopFlag batchFlag);⎕TRAP;data
⍝ Exercise FindDependencies on the test server for two packages
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
data←##.Client.FindDependencies'HandleError,OS' '[localhost]'
→T.PassesIf 2=≡1 2⊃data
→T.PassesIf(##.Client.ReplaceRegistryAlias '[localhost]')≡1 1⊃data
r←T._OK
r←Test_FindDeps_120(stopFlag batchFlag);⎕TRAP;data
⍝ Exercise FindDependencies on all known Registries
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
data←##.Client.FindDependencies'HandleError,OS' '[*]'
→T.PassesIf 3=≢data
→T.PassesIf ¯3 ¯3 ¯3≡≡¨data
r←T._OK
r←Test_HTTP_001(stopFlag batchFlag);⎕TRAP;res
⍝ List all packages managed by the principal Tatin server
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←TC.ListPackages'https://tatin.dev'
→T.PassesIf 0<≢res
r←T._OK
⍝Done
r←Test_HTTP_002(stopFlag batchFlag);⎕TRAP;res
⍝ Get dependency tree for a packae managed by the principal Tatin server
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←TC.GetDependencyTree'https://tatin.dev/aplteam-HandleError-4.0.2'
{}TC.CloseConnections 1
→T.PassesIf 0<≢res
→T.PassesIf 1+.=res[;1]
r←T._OK
⍝Done
r←Test_HTTP_003(stopFlag batchFlag);⎕TRAP;res
⍝ List tags on the principal Tatin server
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←TC.ListTags'https://tatin.dev/'
→T.PassesIf 0<≢res
r←T._OK
⍝Done
r←Test_HTTP_004(stopFlag batchFlag);⎕TRAP;res
⍝ List version of a particular package mangaged by the principal Tatin server
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←TC.ListVersions'https://tatin.dev/aplteam-HandleError'
→T.PassesIf 0<≢res
r←T._OK
⍝Done
r←Test_HTTP_005(stopFlag batchFlag);⎕TRAP;res
⍝ Download a particular package from the principal Tatin server
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
res←TC.LoadPackages'https://tatin.dev/aplteam-HandleError-4.0.2'#.TEMP
→T.PassesIf 0<res
r←T._OK
⍝Done
r←Test_HTTP_006(stopFlag batchFlag);⎕TRAP;res;qdmx
⍝ Attempt to download a package by specifying an invalid package ID
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
:Trap ##.Registry.ErrorNo
res←TC.LoadPackages'https://tatin.dev/HandleError-4.0.0' '#.TEMP'
→T.FailsIf 1
:Else
qdmx←⎕DMX
→T.PassesIf'Invalid package ID'≡qdmx.EM
:EndTrap
r←T._OK
⍝Done
r←Test_InstallAndLoad_001(stopFlag batchFlag);⎕TRAP;res;parms
;dir;src;zip;body;cfg;zipfile;installFolder;expected
⍝ Build a package with a single file into a ZIP file, install and load it.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src zip
body←':Namespace Constants' '∇r←PI' 'r←3.14' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/Constants.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '0.1.0'
cfg.source←'Constants.apln'
cfg.api←'Constants'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
zipfile←TC.BuildPackage parms
installFolder←∆GetTempDir'/MyAppPackages'
res←TC.InstallPackages('file://',zipfile)installFolder
→T.GoToTidyUp(∊res)≢TC.GetPackageIDFrom zipfile
expected←,⊂TC.GetPackageIDFrom⊃{⍺,'-',⍵}/cfg.(group name version)
→T.GoToTidyUp~expected ∆LazyMatch(1+≢installFolder)↓¨F.ListDirs installFolder
→T.GoToTidyUp~F.Exists installFolder,'/',TC.Reg.DependenciesFilename
{}TC.LoadDependencies installFolder #.TEMP
→T.GoToTidyUp #.TEMP.Constants.PI≢3.14
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_InstallAndLoad_002(stopFlag batchFlag);⎕TRAP;res;parms
;dir;src;zip;body;cfg;zipfile;installFolder;expected;src2
⍝ Build a package with multiple files (classes) into a ZIP file and then install it. One class depends on the other.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
src2←src,'/APLSource/'
F.MkDir src2 zip
body←':Class MyConstants' '∇r←PI' ':Access Public Shared' 'r←3.14' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/MyConstants.aplc'
body←':Class Calc:MyConstants' '∇r←Times v' ':Access Public Shared' 'r←PI××/v' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/Calc.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'MyConstants' '0.1.0'
cfg.source←'APLSource'
cfg.api←'Calc'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
zipfile←TC.BuildPackage parms
installFolder←∆GetTempDir'/Tatin_AppPackages'
res←TC.InstallPackages('file://',zipfile)installFolder
→T.GoToTidyUp(∊res)≢TC.GetPackageIDFrom zipfile
expected←,⊂TC.GetPackageIDFrom⊃{⍺,'-',⍵}/cfg.(group name version)
→T.GoToTidyUp~expected ∆LazyMatch(1+≢installFolder)↓¨F.ListDirs installFolder
→T.GoToTidyUp~F.Exists installFolder,'/',TC.Reg.DependenciesFilename
{}TC.LoadDependencies installFolder #.TEMP
→T.GoToTidyUp(12×3.14)≠#.TEMP.MyConstants.Times 3 4
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_InstallAndLoad_003(stopFlag batchFlag);⎕TRAP;res;parms
;dir;src;zip;body;cfg;zipfile;installFolder;expected;src2
⍝ Build a package with multiple files (classes) into a ZIP file and then install it. One class depends on the other.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
src2←src,'/APLSource/'
F.MkDir src2 zip
body←':Class MyConstants' '∇r←PI' ':Access Public Shared' 'r←3.14' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/MyConstants.aplc'
body←':Class Calc:MyConstants' '∇r←Times v' ':Access Public Shared' 'r←PI××/v' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/Calc.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'MyStuff' '0.1.0'
cfg.source←'APLSource'
⍝ cfg.api←'Calc.Times'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
zipfile←TC.BuildPackage parms
installFolder←∆GetTempDir'/Tatin_AppPackages'
res←TC.InstallPackages('file://',zipfile)installFolder
→T.GoToTidyUp(∊res)≢TC.GetPackageIDFrom zipfile
expected←,⊂TC.GetPackageIDFrom⊃{⍺,'-',⍵}/cfg.(group name version)
→T.GoToTidyUp~expected ∆LazyMatch(1+≢installFolder)↓¨F.ListDirs installFolder
→T.GoToTidyUp~F.Exists installFolder,'/',TC.Reg.DependenciesFilename
{}TC.LoadDependencies installFolder #.TEMP
→T.GoToTidyUp(12×3.14)≠#.TEMP.MyStuff.Calc.Times 3 4
→T.GoToTidyUp 3.14≠#.TEMP.MyStuff.MyConstants.PI
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_InstallAndLoad_004(stopFlag batchFlag);⎕TRAP;installFolder;noOf;rc;msg;zipFilename;toBeDeleted
;dir;src;body;cfg;reg;list;index;expected;zipped;src2;src3;refs
⍝ Publish three packages (consisting of functions) with dependencies, install (specific Registry) and load.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
F.MkDir src2←src,'/package_A'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace A' '  Times_←{' '    ##.Arithmetic.Times ⍵' '  }' ':EndNamespace'
(⊂body)F.NPUT src2,'/A.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'A' '1.0.0'
cfg.source←'A.apln'
cfg.api←'A'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
src2 TC.Dependencies.Add'Example-Arithmetic-1.0.0'
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
F.MkDir src3←src,'/B'
body←'r←Call arg' '  r←A.Times_ arg'
(⊂body)F.NPUT src3,'/Call.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'B' '1.0.0'
cfg.source←'Call.aplf'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
src3 TC.Dependencies.Add'Example-A-1.0.0'
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
F.MkDir src3←src,'/Arithmetic'
body←' r←Times v' '  r←×/v'
(⊂body)F.NPUT src3,'/Times.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Arithmetic' '1.0.0'
cfg.source←'Times.aplf'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
installFolder←∆GetTempDir'/Tatin_AppPackages'
refs←TC.InstallPackages('[local2]Example-B-1.0.0')installFolder
expected←'Example-A-1.0.0' 'Example-B-1.0.0' 'Example-Arithmetic-1.0.0'
→T.GoToTidyUp~expected ∆LazyMatch TC.GetPackageIDFrom¨F.ListDirs installFolder,'/*'
→T.GoToTidyUp~F.IsFile installFolder,'/',TC.Reg.DependenciesFilename
noOf←≢TC.LoadDependencies installFolder #.TEMP
→T.GoToTidyUp 1≠noOf
→T.GoToTidyUp 12≢#.TEMP.B.Call 3 4
r←T._OK
∆TidyUp:
Assert 0=1⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_InstallAndLoad_005(stopFlag batchFlag);⎕TRAP
;refs;dir
⍝ Install a package without specifying a Registry
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
refs←TC.InstallPackages'aplteam-APLProcess-0.2.9'dir
→T.GoToTidyUp 0=≢refs
r←T._OK
∆TidyUp:
Assert 0=1⊃F.RmDir dir
⍝Done
r←Test_InstallAndLoad_006(stopFlag batchFlag);⎕TRAP;res;parms
;dir;src;zip;body;cfg;zipfile;installFolder;expected
⍝ Build a package with a single file into a ZIP file, install and load it with an alias.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src zip
body←':Namespace Constants' '∇r←PI' 'r←3.14' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/Constants.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '0.1.0'
cfg.source←'Constants.apln'
cfg.api←'Constants'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
zipfile←TC.BuildPackage parms
installFolder←∆GetTempDir'/MyAppPackages'
res←TC.InstallPackages('X@file://',zipfile)installFolder
→T.GoToTidyUp(∊res)≢'X@',TC.GetPackageIDFrom zipfile
expected←,⊂TC.GetPackageIDFrom⊃{⍺,'-',⍵}/cfg.(group name version)
→T.GoToTidyUp~expected ∆LazyMatch(1+≢installFolder)↓¨F.ListDirs installFolder
→T.GoToTidyUp~F.Exists installFolder,'/',TC.Reg.DependenciesFilename
{}TC.LoadDependencies installFolder #.TEMP
→T.GoToTidyUp #.TEMP.X.PI≢3.14
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_InstallAndLoad_007(stopFlag batchFlag);⎕TRAP;dir;refs;list1;list2;res
⍝ Install a package into a folder with already installed packages (must be added)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir'/'
dir ⎕NCOPY⍠('Wildcard' 1)⊢∆TEMP_TEST_DATA,'/InstallFromList/*'
list1←(≢dir)↓¨⊃TC.F.Dir dir
refs←TC.InstallPackages'[localhost]example-versions'dir
→T.GoToTidyUp 1≠≢refs
list2←(≢dir)↓¨⊃TC.F.Dir dir
→T.GoToTidyUp≢/1 0+≢¨list1 list2
→T.GoToTidyUp~∧/list1∊list2
→T.GoToTidyUp 1≠+/'-versions-'⍷∊list2
res←TC.LoadDependencies dir #.TEMP
→T.GoToTidyUp 1≠+/'_versions_'⍷⍕res
r←T._OK
∆TidyUp:
Assert 0=1⊃F.RmDirByForce dir
⍝Done
r←Test_InstallAndLoad_010(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted;res
;dir;src;body;cfg;zipfile;installFolder;src2;src3;src4;src5;reg
⍝ Two packages that depend on the same package but different versions; all are classes
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
src2←src,'/Example-Constants-0.1.0/'
src3←src,'/Example-Constants-0.2.0/'
src4←src,'/Example-MyPiUtils1-1.0.0/'
src5←src,'/Example-MyPiUtils2-1.1.0/'
F.MkDir reg
F.MkDir src2 src3 src4 src5,¨⊂'/APLSource'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Class Constants' '∇r←PI' ':Access Public Shared' 'r←3.14' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/APLSource/Constants.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '0.1.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←':Class Constants' '∇r←PI' ':Access Public Shared' 'r←3.1415926' '∇' ':EndClass'
(⊂body)F.NPUT src3,'/APLSource/Constants.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '0.2.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←':Class MyPiUtils1' '∇r←GetPI' ':Access Public Shared' 'r←##.Constants.PI' '∇' ':EndClass'
(⊂body)F.NPUT src4,'/APLSource/MyPiUtils1.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'MyPiUtils1' '1.0.0'
cfg.source←'APLSource'
cfg.api←'MyPiUtils1'
cfg.os_win←1
TC.WritePackageConfigFile src4 cfg
src4 TC.Dependencies.Add'Example-Constants-0.1.0'
(rc msg zipFilename)←TC.PublishPackage src4 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←':Class MyPiUtils2' '∇r←GetPI' ':Access Public Shared' 'r←##.Constants.PI' '∇' ':EndClass'
(⊂body)F.NPUT src5,'/APLSource/MyPiUtils2.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'MyPiUtils2' '1.0.0'
cfg.source←'APLSource'
cfg.api←'MyPiUtils2'
cfg.os_win←1
TC.WritePackageConfigFile src5 cfg
src5 TC.Dependencies.Add'Example-Constants-0.2.0'
(rc msg zipFilename)←TC.PublishPackage src5 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
installFolder←∆GetTempDir'/Tatin_AppPackages'
res←TC.InstallPackages('[local2]Example-MyPiUtils1-1.0.0')installFolder
→T.GoToTidyUp(∊res)≢'Example-MyPiUtils1-1.0.0'
res←TC.InstallPackages('[local2]Example-MyPiUtils2-1.0.0')installFolder
→T.GoToTidyUp(∊res)≢'Example-MyPiUtils2-1.0.0'
→T.GoToTidyUp 4≠≢F.ListDirs installFolder
→T.GoToTidyUp 2≠≢F.ListFiles installFolder
→T.GoToTidyUp'Example-MyPiUtils1-1.0.0' 'Example-MyPiUtils2-1.0.0'≢TC.Dependencies.Get installFolder
{}TC.LoadDependencies installFolder #.TEMP
→T.GoToTidyUp 3.1415926≠#.TEMP.MyPiUtils1.GetPI   ⍝ Because the "better" version...
→T.GoToTidyUp 3.1415926≠#.TEMP.MyPiUtils2.GetPI   ⍝ ... is used in both cases!
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_InstallAndLoad_030(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted;res;GoToTidyUp
;dir;src;body;cfg;zipfile;installFolder;src2;src3;src4;src5;reg
⍝ Two packages that depend on the same package but different versions; all are classes
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
src2←src,'/Example-Constants-0.1.0/'
src3←src,'/Example-Constants-0.2.0/'
src4←src,'/Example-MyClass_AAA-1.0.0/'
src5←src,'/Example-MyClass_BBB-1.1.0/'
F.MkDir reg
F.MkDir src2 src3 src4 src5,¨⊂'/APLSource'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Class Constants' '∇r←PI' ':Access Public Shared' 'r←3.14' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/APLSource/Constants.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '0.1.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←':Class Constants' '∇r←PI' ':Access Public Shared' 'r←3.1415926' '∇' ':EndClass'
(⊂body)F.NPUT src3,'/APLSource/Constants.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '0.2.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←':Class MyClass_AAA' '∇r←GetPI' ':Access Public Shared' 'r←##.Constants.PI' '∇' ':EndClass'
(⊂body)F.NPUT src4,'/APLSource/MyClass_AAA.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'MyClass_AAA' '1.0.0'
cfg.source←'APLSource'
cfg.api←'MyClass_AAA'
cfg.os_win←1
TC.WritePackageConfigFile src4 cfg
src4 TC.Dependencies.Add'Example-Constants-0.1.0'
(rc msg zipFilename)←TC.PublishPackage src4 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←':Class MyClass_BBB' '∇r←GetPI' ':Access Public Shared' 'r←##.Constants.PI' '∇' ':EndClass'
(⊂body)F.NPUT src5,'/APLSource/MyClass_BBB.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'MyClass_BBB' '1.0.0'
cfg.source←'APLSource'
cfg.api←'MyClass_BBB'
cfg.os_win←1
TC.WritePackageConfigFile src5 cfg
src5 TC.Dependencies.Add'Example-Constants-0.2.0'
(rc msg zipFilename)←TC.PublishPackage src5 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
installFolder←∆GetTempDir'/Tatin_AppPackages'
res←TC.InstallPackages('[local2]Example-MyClass_AAA-1.0.0')installFolder
→T.GoToTidyUp(∊res)≢'Example-MyClass_AAA-1.0.0'
res←TC.InstallPackages('[local2]Example-MyClass_BBB-1.0.0')installFolder
→T.GoToTidyUp(∊res)≢'Example-MyClass_BBB-1.0.0'
→T.GoToTidyUp 4≠≢F.ListDirs installFolder
→T.GoToTidyUp 2≠≢F.ListFiles installFolder
→T.GoToTidyUp'Example-MyClass_AAA-1.0.0' 'Example-MyClass_BBB-1.0.0'≢TC.Dependencies.Get installFolder
{}TC.LoadDependencies installFolder #.TEMP
→T.GoToTidyUp 3.1415926≠#.TEMP.MyClass_AAA.GetPI   ⍝ Because the "better" version...
→T.GoToTidyUp 3.1415926≠#.TEMP.MyClass_BBB.GetPI   ⍝ ... is used in both cases!
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_InstallAndLoad_031(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted;res
;dir;src;body;cfg;installFolder;src2;src3;reg
⍝ A package that depend on another package that has several functions
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
src2←src,'/Example-Constants-0.1.0/'
src3←src,'/Example-MyMath-0.2.0/'
F.MkDir reg
F.MkDir src2 src3,¨⊂'/APLSource'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Class Constants' '∇r←PI' ':Access Public Shared' 'r←3.14' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/APLSource/Constants.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '0.1.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'MyMath' '0.2.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
src3 TC.Dependencies.Add'Example-Constants-0.1.0'
Assert' '=1↑0⍴#.TEMP2.⎕FX'r←x Times y' 'r←Constants.PI× x×y'
Assert' '=1↑0⍴#.TEMP2.⎕FX'r←Total x' 'r←+/x'
Assert' '=1↑0⍴#.TEMP2.⎕FX'r←x Power y' 'r←x*y'
Assert' '=1↑0⍴#.TEMP2.⎕FX'r←Public' 'r←''Total'' ''Power'''
res←⎕SE.Link.Create #.TEMP2(src3,cfg.source)
Assert{(∨/'Linked: #.TEMP2 →'⍷⍵)∨(∨/'Linked: #.TEMP2 ←→'⍷⍵)}∊res
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
installFolder←∆GetTempDir'/Tatin_AppPackages'
res←TC.InstallPackages('Example-MyMath-0.2.0')installFolder
→T.GoToTidyUp(∊res)≢'Example-MyMath-0.2.0'
→T.GoToTidyUp 2≠≢F.ListDirs installFolder
→T.GoToTidyUp 2≠≢F.ListFiles installFolder
→T.GoToTidyUp(,⊂'Example-MyMath-0.2.0')≢TC.Dependencies.Get installFolder
{}TC.LoadDependencies installFolder #.TEMP
→T.GoToTidyUp(3.14×3×4)≠3 #.TEMP.MyMath.Times 4
→T.GoToTidyUp 1≠≢#.TEMP.⎕NL⍳16
r←T._OK
∆TidyUp:
{}⎕SE.Link.Break'#.TEMP2'
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_InstallAndLoad_032(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted;res
;dir;src;body;cfg;installFolder;src2;src3;reg
⍝ A package that depend on another package that has several functions within a namespace
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
src2←src,'/Example-Constants-0.1.0/'
src3←src,'/Example-MyMath-0.2.0/'
F.MkDir reg
F.MkDir src2 src3,¨⊂'/APLSource'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Class Constants' '∇r←PI' ':Access Public Shared' 'r←3.14' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/APLSource/Constants.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '0.1.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←⊂':Namespace MyMath'
body,←'∇r←x Times y' 'r←##.Constants.PI× x×y' '∇'
body,←'∇r←Total x' 'r←+/x' '∇'
body,←'∇r←x Power y' 'r←x*y' '∇'
body,←⊂':EndNamespace'
(⊂body)F.NPUT src3,'/APLSource/MyMath.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'MyMath' '0.2.0'
cfg.source←'APLSource'
cfg.api←'MyMath'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
src3 TC.Dependencies.Add'Example-Constants-0.1.0'
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
installFolder←∆GetTempDir'/Tatin_AppPackages'
res←TC.InstallPackages('Example-MyMath-0.2.0')installFolder
→T.GoToTidyUp(∊res)≢'Example-MyMath-0.2.0'
→T.GoToTidyUp 2≠≢F.ListDirs installFolder
→T.GoToTidyUp 2≠≢F.ListFiles installFolder
→T.GoToTidyUp(,⊂'Example-MyMath-0.2.0')≢TC.Dependencies.Get installFolder
{}TC.LoadDependencies installFolder #.TEMP
→T.GoToTidyUp(3.14×3×4)≠3 #.TEMP.MyMath.Times 4
→T.GoToTidyUp 7≠#.TEMP.MyMath.Total 3 4
→T.GoToTidyUp 81≠3 #.TEMP.MyMath.Power 4
→T.GoToTidyUp 1≠≢#.TEMP.⎕NL⍳16
→T.GoToTidyUp 2≠≢#._tatin.⎕NL⍳16
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_InstallAndLoad_033(stopFlag batchFlag);⎕TRAP;src4;rc;msg;zipFilename;toBeDeleted;res1;res2
;dir;src;body;cfg;installFolder;src2;src3;reg
⍝ Two packages A<B and two packages C<B - make sure that B is installed and loaded only once
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
src2←src,'/Example-Constants-0.1.0/'
src3←src,'/Example-MyMath-0.2.0/'
src4←src,'/Example-MyTests-0.3.0/'
F.MkDir reg
F.MkDir src2 src3 src4,¨⊂'/APLSource'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Class Constants' '∇r←PI' ':Access Public Shared' 'r←3.14' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/APLSource/Constants.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '0.1.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←⊂':Namespace MyMath'
body,←'∇r←x Times y' 'r←##.Constants.PI × x × y' '∇'
body,←'∇r←Total x' 'r←+/x' '∇'
body,←'∇r←x Power y' 'r←x*y' '∇'
body,←⊂':EndNamespace'
(⊂body)F.NPUT src3,'/APLSource/MyMath.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'MyMath' '0.2.0'
cfg.source←'APLSource'
cfg.api←'MyMath'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
src3 TC.Dependencies.Add'Example-Constants-0.1.0'
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←⊂':Namespace MyTests'
body,←'∇r←x Test1 y' 'r←##.Constants.PI × x × y' '∇'
body,←'∇r←Test2 x' 'r←+/x' '∇'
body,←'∇r←x Test3 y' 'r←x*y' '∇'
body,←⊂':EndNamespace'
(⊂body)F.NPUT src4,'/APLSource/MyTests.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'MyTests' '0.3.0'
cfg.source←'APLSource'
cfg.api←'MyTests'
cfg.os_win←1
TC.WritePackageConfigFile src4 cfg
src4 TC.Dependencies.Add'Example-Constants-0.1.0'
(rc msg zipFilename)←TC.PublishPackage src4 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
installFolder←∆GetTempDir'/Tatin_AppPackages'
res1←TC.InstallPackages('[local2]Example-MyMath-0.2.0')installFolder
→T.GoToTidyUp(∊res1)≢'Example-MyMath-0.2.0'
res2←TC.InstallPackages('[local2]Example-MyTests-0.3.0')installFolder
→T.GoToTidyUp(∊res2)≢'Example-MyTests-0.3.0'
→T.GoToTidyUp 3≠+/F.IsDir⊃F.Dir installFolder,'/*'
→T.GoToTidyUp 2≠≢TC.Dependencies.Get installFolder
{}TC.LoadDependencies installFolder #.TEMP
→T.GoToTidyUp 2≠≢#.TEMP.⎕NL⍳16
→T.GoToTidyUp(3.14×3×4)≠3 #.TEMP.MyMath.Times 4
→T.GoToTidyUp 7≠#.TEMP.MyMath.Total 3 4
→T.GoToTidyUp(2*3)≠2 #.TEMP.MyMath.Power 3
→T.GoToTidyUp(3.14×3×4)≠3 #.TEMP.MyTests.Test1 4
→T.GoToTidyUp 7≠#.TEMP.MyTests.Test2 3 4
→T.GoToTidyUp(2*3)≠2 #.TEMP.MyTests.Test3 3
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_InstallAndLoad_040(stopFlag batchFlag);⎕TRAP;dir;installFolder;src4;list1;list2;refs
⍝ Install and load both APL_process and CompareSimple: they have plenty of dependencies
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
F.MkDir installFolder←dir,'/Tatin_AppPackages'
list1←TC.InstallPackages(∆TEMP_REGISTRY_FOLDER,'/aplteam-APLProcess')installFolder ⍝ No version number at all
→T.GoToTidyUp 0=≢list1
list2←TC.InstallPackages(∆TEMP_REGISTRY_FOLDER,'/aplteam-CompareSimple-3.0.2')installFolder
→T.GoToTidyUp 0=≢list2
refs←TC.LoadDependencies installFolder'#.TEMP'
→T.GoToTidyUp 0=≢refs
→T.GoToTidyUp~'1.0.0'∆LazyMatch 2⊃#.TEMP.APLProcess.Version
→T.GoToTidyUp~'3.0.2'∆LazyMatch 2⊃#.TEMP.CompareSimple.Version
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_InstallAndLoad_041(stopFlag batchFlag);⎕TRAP;dir;installFolder;src;zip;body;cfg;zipfile;parms
;src4;list1;list2;refs
⍝ Install and load simple package with crazy name into ⎕SE.
⍝ We do this because we cannot temper with ⎕SE._tatin!
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
⎕SE.⎕SHADOW'TEMP' ⋄ 'TEMP'⎕SE.⎕NS'' ⍝ Used to load stuff into
dir←∆GetTempDir''
(src zip)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src zip
body←':Namespace CrazyName___' '∇r←PI' 'r←3.14' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/CrazyName___.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'CrazyName___' '0.1.0'
cfg.source←'CrazyName___.apln'
cfg.api←'CrazyName___'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
zipfile←TC.BuildPackage parms
installFolder←∆GetTempDir'/MyAppPackages'
{}TC.InstallPackages('file://',zipfile)installFolder
{}TC.LoadDependencies installFolder ⎕SE.TEMP
→T.GoToTidyUp ⎕SE.TEMP.CrazyName___.PI≢3.14
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⎕SE._tatin.⎕EX'Example_CrazyName____0_1_0'
⍝Done
r←Test_InstallAndLoad_042(stopFlag batchFlag);⎕TRAP;dir;src;zip;body;cfg;zipfile;installFolder;res;rc;msg;parms
⍝ Install and load simple package without specifying a target namespace; was once a bug
⍝ Must be loaded into #
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
(src zip)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src zip
body←':Namespace CrazyName___' '∇r←PI' 'r←3.14' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/CrazyName___.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'CrazyName___' '0.1.0'
cfg.source←'CrazyName___.apln'
cfg.api←'CrazyName___'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
zipfile←TC.BuildPackage parms
installFolder←∆GetTempDir'/MyAppPackages'
{}TC.InstallPackages('file://',zipfile)installFolder
res←TC.LoadDependencies⊆installFolder    ⍝ Only one argument
→T.GoToTidyUp'#._tatin.Example_CrazyName____0_1_0'≢⍕⊃,/res
→T.GoToTidyUp 9≠#._tatin.⎕NC'Example_CrazyName____0_1_0'
→T.GoToTidyUp 9≠#.⎕NC'CrazyName___'
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
Assert 0=rc
⍝Done
r←Test_InstallAndLoad_045(stopFlag batchFlag);⎕TRAP;src4;list2;rc;msg;zipFilename;toBeDeleted;res1
;dir;src;body;cfg;installFolder;src2;src3;reg
⍝ Install a package that depends on two packages (first a class, second a function), no API
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
src2←src,'/Example-Constants-0.1.0/'
src3←src,'/Example-UtilFns-0.2.0/'
src4←src,'/Example-MyTests-0.3.0/'
F.MkDir reg
F.MkDir src2 src3 src4,¨⊂'/APLSource'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Class Constants' '∇r←PI' ':Access Public Shared' 'r←3.14' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/APLSource/Constants.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '0.1.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←'r←x Times y' 'r←x×y'
(⊂body)F.NPUT src3,'/APLSource/Times.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'UtilFns' '0.2.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←⊂':Namespace MyTests'
body,←' ∇r←Test1 y' '  r←##.Constants.PI ##.UtilFns.Times y' '∇'
body,←⊂':EndNamespace'
(⊂body)F.NPUT src4,'/APLSource/MyTests.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'MyTests' '0.3.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src4 cfg
src4 TC.Dependencies.Add'Example-Constants-0.1.0'
src4 TC.Dependencies.Add'Example-UtilFns-0.2.0'
(rc msg zipFilename)←TC.PublishPackage src4 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
installFolder←∆GetTempDir'/Tatin_AppPackages'
res1←TC.InstallPackages('[local2]Example-MyTests-0.3.0')installFolder
→T.GoToTidyUp'Example-MyTests-0.3.0'≢∊res1
→T.GoToTidyUp 3≠+/F.IsDir⊃F.Dir installFolder,'/*'
→T.GoToTidyUp 1≠≢TC.Dependencies.Get installFolder
{}TC.LoadDependencies installFolder #.TEMP
→T.GoToTidyUp(3.14×3)≢#.TEMP.MyTests.MyTests.Test1 3
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_InstallAndLoad_046(stopFlag batchFlag);⎕TRAP;src4;list2;rc;msg;zipFilename;toBeDeleted;res1
;dir;src;body;cfg;installFolder;src2;src3;reg
⍝ Install a package that depends on two packages which consist of a class and a function, with APIs
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
src2←src,'/Example-Constants-0.1.0/'
src3←src,'/Example-UtilFns-0.2.0/'
src4←src,'/Example-MyTests-0.3.0/'
F.MkDir reg
F.MkDir src2 src3 src4,¨⊂'/APLSource'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Class Constants' '∇r←PI' ':Access Public Shared' 'r←3.14' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/APLSource/Constants.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '0.1.0'
cfg.source←'APLSource'
cfg.api←'Constants'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←'r←x Times y' 'r←x×y'
(⊂body)F.NPUT src3,'/APLSource/Times.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'UtilFns' '0.2.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←⊂':Namespace MyTests'
body,←'∇r←Test1 y' 'r←##.Constants.PI ##.UtilFns.Times y' '∇'
body,←⊂':EndNamespace'
(⊂body)F.NPUT src4,'/APLSource/MyTests.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'MyTests' '0.3.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src4 cfg
src4 TC.Dependencies.Add'Example-Constants-0.1.0'
src4 TC.Dependencies.Add'Example-UtilFns-0.2.0'
(rc msg zipFilename)←TC.PublishPackage src4 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
installFolder←∆GetTempDir'/Tatin_AppPackages'
res1←TC.InstallPackages('[local2]Example-MyTests-0.3.0')installFolder
→T.GoToTidyUp(∊res1)≢'Example-MyTests-0.3.0'
→T.GoToTidyUp 3≠+/F.IsDir⊃F.Dir installFolder,'/*'
→T.GoToTidyUp 1≠≢TC.Dependencies.Get installFolder
{}TC.LoadDependencies installFolder #.TEMP
→T.GoToTidyUp(3.14×3)≢#.TEMP.MyTests.MyTests.Test1 3
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_InstallAndLoad_050(stopFlag batchFlag);⎕TRAP;regPath;targetPath;paths1;paths2;json
⍝ Install two packages of wich one is also a dependency of the other
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
targetPath←∆GetTempDir ⍬
regPath←'TestData/Tatin/Registry/'     ⍝ Where we install projects from
paths2←TC.InstallPackages(regPath,'aplteam-OS-3.0.1\aplteam-OS-3.0.1.zip')targetPath
paths1←TC.InstallPackages(regPath,'aplteam-FilesAndDirs-5.0.1\aplteam-FilesAndDirs-5.0.1.zip')targetPath
json←∆JSON⊃F.NGET targetPath,'/',Reg.BuildListFilename
→T.GoToTidyUp json.principal≢1 1 0
→T.GoToTidyUp json.packageID≢'aplteam-OS-3.0.1' 'aplteam-FilesAndDirs-5.0.1' 'aplteam-APLTreeUtils2-1.1.1'
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir targetPath
⍝Done
r←Test_InstallAndLoad_051(stopFlag batchFlag);⎕TRAP;targetPath;msg;rc;en;res1;res2;res3
⍝ Install and load two packages of which the second brings in a better version of the first one as dependency (was a bug)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
targetPath←∆GetTempDir ⍬
res1←TC.InstallPackages'[localhost]aplteam-APLProcess-0.2.10'targetPath
→T.GoToTidyUp(,⊆'aplteam-APLProcess-0.2.10')≢res1
res2←TC.InstallPackages'[localhost]example-Boo-1.0.0'targetPath
→T.GoToTidyUp(,⊆'example-Boo-1.0.0')≢res2
res3←TC.LoadDependencies targetPath #.TEMP
→T.GoToTidyUp'#._tatin.example_Boo_1_0_0' '#._tatin.aplteam_APLProcess_0_3_0'≢⍕¨res3
→T.GoToTidyUp'0.3.0'≢{⍵/⍨3>+\'.'=⍵}2⊃#.TEMP.APLProcess.Version
→T.GoToTidyUp'0.3.0'≢{⍵/⍨3>+\'.'=⍵}2⊃#.TEMP.Boo.Version
r←T._OK
∆TidyUp:
(rc en msg)←F.RmDir targetPath
msg Assert 0=rc
⍝Done
r←Test_InstallAndLoad_052(stopFlag batchFlag);⎕TRAP;res;list;expected;ref;parms
;dir;src;dist;body;vars1;vars2;vars3;vars4;vars5;vars6;vars7;vars8;vars9;cfg;src2;zipfile
⍝ Save variables of all sorts and make sure they are installed as well.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
src2←src,'/APLSource'
F.MkDir src2 dist
body←'r←Hello' 'r←''World'''
(⊂body)F.NPUT src2,'/Test.aplf'
vars1←1                    ⍝ Numeric scalar
vars2←'a'                  ⍝ Char scalar
vars3←1 2 3                ⍝ Numeric vector
vars4←'FOO'                ⍝ Char vector
vars5←'APL is Great'       ⍝ VTV
vars6←(1 2)(3 4)           ⍝ Nested numeric vector
vars7←↑vars5
vars8←↑vars6
vars9←vars1 vars2 vars3 vars4 vars5 vars6 vars7 vars8
(⊂⎕SE.Dyalog.Array.Serialise vars1)F.NPUT(src2,'/vars1.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars2)F.NPUT(src2,'/vars2.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars3)F.NPUT(src2,'/vars3.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars4)F.NPUT(src2,'/vars4.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars5)F.NPUT(src2,'/vars5.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars6)F.NPUT(src2,'/vars6.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars7)F.NPUT(src2,'/vars7.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars8)F.NPUT(src2,'/vars8.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars9)F.NPUT(src2,'/vars9.apla')
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Variables'
cfg.version←'0.1.0'
cfg.source←'APLSource/'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
list←∆GetFileListFromZipArchive zipfile
list←{⊃,/1↓⎕NPARTS ⍵}¨list
expected←'apl-package.json' 'Test.aplf' 'vars1.apla' 'vars2.apla' 'vars3.apla' 'vars4.apla'
expected,←'vars5.apla' 'vars6.apla' 'vars7.apla' 'vars8.apla' 'vars9.apla'
→T.GoToTidyUp~expected ∆LazyMatch list
{}⎕SE.Tatin.LoadPackages zipfile'#.TEMP'
→T.GoToTidyUp 9≠≢#.TEMP.Variables.⎕NL 2
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
:If 9=#.⎕NC'TEMP.Variables'
:AndIf 0<≢#.TEMP.Variables.TatinVars.HOME
F.RmDir #.TEMP.Variables.TatinVars.HOME,'/..'
:EndIf
⍝Done
r←Test_InstallAndLoad_060(stopFlag batchFlag);⎕TRAP;res;list;expected;ref;parms
;dir;src;dist;body;vars1;vars2;vars3;vars4;vars5;vars6;vars7;vars8;vars9;cfg;src2;zipfile
⍝ Save variables of all sorts natively and make sure they are installed as well.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
src2←src,'/APLSource'
F.MkDir src2 dist
body←'r←Hello' 'r←''World'''
(⊂body)F.NPUT src2,'/Test.aplf'
vars1←1                    ⍝ Numeric scalar
vars2←'a'                  ⍝ Char scalar
vars3←1 2 3                ⍝ Numeric vector
vars4←'FOO'                ⍝ Char vector
vars5←'APL is Great'       ⍝ VTV
vars6←(1 2)(3 4)           ⍝ Nested numeric vector
vars7←↑vars5
vars8←↑vars6
vars9←vars1 vars2 vars3 vars4 vars5 vars6 vars7 vars8
(⊂⎕SE.Dyalog.Array.Serialise vars1)F.NPUT(src2,'/vars1.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars2)F.NPUT(src2,'/vars2.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars3)F.NPUT(src2,'/vars3.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars4)F.NPUT(src2,'/vars4.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars5)F.NPUT(src2,'/vars5.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars6)F.NPUT(src2,'/vars6.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars7)F.NPUT(src2,'/vars7.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars8)F.NPUT(src2,'/vars8.apla')
(⊂⎕SE.Dyalog.Array.Serialise vars9)F.NPUT(src2,'/vars9.apla')
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Variables'
cfg.version←'0.1.0'
cfg.source←'APLSource/'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←dist
zipfile←TC.BuildPackage parms
→T.GoToTidyUp 0≥≢zipfile
list←∆GetFileListFromZipArchive zipfile
list←{⊃,/1↓⎕NPARTS ⍵}¨list
expected←'apl-package.json' 'Test.aplf' 'vars1.apla' 'vars2.apla' 'vars3.apla' 'vars4.apla'
expected,←'vars5.apla' 'vars6.apla' 'vars7.apla' 'vars8.apla' 'vars9.apla'
→T.GoToTidyUp~expected ∆LazyMatch list
{}⎕SE.Tatin.LoadPackages zipfile'#.TEMP'
→T.GoToTidyUp 9≠≢#.TEMP.Variables.⎕NL 2
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
:If 9=#.⎕NC'TEMP.Variables'
:AndIf 0<≢#.TEMP.Variables.TatinVars.HOME
F.RmDir #.TEMP.Variables.TatinVars.HOME,'/..'
:EndIf
⍝Done
r←Test_InstallAndLoad_061(stopFlag batchFlag);⎕TRAP;res;ref;parms;parms2
;dir;src;dist;vars1;vars2;vars3;vars4;vars5;vars6;vars7;vars8;vars9;cfg;src2;zipfile
⍝ Create namespace with all sorts of variables, Link it, create a package from it and load that package
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
src2←src,'/APLSource'
F.MkDir src2 dist
'TEMP1'#.⎕NS'' ⋄ 'TEMP2'#.⎕NS''
parms←⎕NS''
parms.arrays←1
{}parms ⎕SE.Link.Create #.TEMP1 src2
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Variables'
cfg.version←'0.2.0'
cfg.source←'APLSource/'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms2←TC.CreateBuildParms src
parms2.targetPath←dist
zipfile←TC.BuildPackage parms2
→T.GoToTidyUp 0≥≢zipfile
{}⎕SE.Tatin.LoadPackages zipfile'#.TEMP2'
→T.GoToTidyUp 9≠≢#.TEMP2.Variables.⎕NL 2
r←T._OK
∆TidyUp:
{}⎕SE.Link.Break'#.TEMP1'
Assert 0=⊃F.RmDir dir
:If 9=#.⎕NC'TEMP2.Variables'
:AndIf 0<≢#.TEMP2.Variables.TatinVars.HOME
F.RmDir #.TEMP2.Variables.TatinVars.HOME,'/..'
:EndIf
⍝Done
r←Test_InstallAndLoad_062(stopFlag batchFlag);⎕TRAP;res;ref;parms;parms2
;dir;src;dist;vars1;vars2;vars3;vars4;vars5;vars6;vars7;vars8;vars9;cfg;src2;zipfile
⍝ Create namespace with all sorts of variables, Link it with caseCode=1, create a package from it and load that package,
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
src2←src,'/APLSource'
F.MkDir src2 dist
'TEMP1'#.⎕NS'' ⋄ 'TEMP2'#.⎕NS''
parms←⎕NS''
parms.arrays←1
parms.caseCode←1
{}parms ⎕SE.Link.Create #.TEMP1 src2
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Variables'
cfg.version←'0.1.0'
cfg.source←'APLSource/'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms2←TC.CreateBuildParms src
parms2.targetPath←dist
zipfile←TC.BuildPackage parms2
→T.GoToTidyUp 0≥≢zipfile
{}⎕SE.Tatin.LoadPackages zipfile'#.TEMP2'
→T.GoToTidyUp 10≠≢#.TEMP2.Variables.⎕NL 2
→T.GoToTidyUp~∨/'vars9' 'Vars9'∊' '~¨⍨↓#.TEMP2.Variables.⎕NL 2
r←T._OK
∆TidyUp:
{}⎕SE.Link.Break'#.TEMP1'
Assert 0=⊃F.RmDir dir
:If 9=#.⎕NC'TEMP2.Variables'
:AndIf 0<≢#.TEMP2.Variables.TatinVars.HOME
F.RmDir #.TEMP2.Variables.TatinVars.HOME,'/..'
:EndIf
⍝Done
r←Test_InstallAndLoad_063(stopFlag batchFlag);⎕TRAP;res;ref;parms;msg;rc;parms2
;dir;src;dist;vars1;vars2;vars3;vars4;vars5;vars6;vars7;vars8;vars9;cfg;src2;zipfile
⍝ Create namespace with all sorts of variables but name only two of them, Link it, create a package from it and load that package
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist)←(⊂dir,'/'),¨'src' 'dist'
src,←'/v0.1.0'
src2←src,'/APLSource'
F.MkDir src2 dist
'TEMP1'#.⎕NS'' ⋄ 'TEMP2'#.⎕NS''
parms←⎕NS''
parms.arrays←'#.TEMP1.vars1,#.TEMP1.vars9'
{}parms ⎕SE.Link.Create #.TEMP1 src2
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Variables'
cfg.version←'0.2.0'
cfg.source←'APLSource/'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms2←TC.CreateBuildParms src
parms2.targetPath←dist
zipfile←TC.BuildPackage parms2
→T.GoToTidyUp 0≥≢zipfile
{}⎕SE.Tatin.LoadPackages zipfile'#.TEMP2'
→T.GoToTidyUp 2≠≢#.TEMP2.Variables.⎕NL 2
r←T._OK
∆TidyUp:
{}⎕SE.Link.Break'#.TEMP1'
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
:If 9=#.⎕NC'TEMP2.Variables'
:AndIf 0<≢#.TEMP2.Variables.TatinVars.HOME
F.RmDir #.TEMP2.Variables.TatinVars.HOME,'/..'
:EndIf
⍝Done
r←Test_InstallAndLoad_090(stopFlag batchFlag);⎕TRAP;html;ns;expected;qdmx;dir;msg;rc
⍝ Attempt to install a package as a ZIP file from Github
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
:Trap ##.Registry.ErrorNo
TC.InstallPackages'https://github.com/aplteam/DotNetZip/releases/download/v1.0.0/aplteam-DotNetZip-1.0.0.zip'dir
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'ZIP files cannot be installed via HTTP'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
(rc msg)←##.FilesAndDirs.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_InstallAndLoad_091(stopFlag batchFlag);⎕TRAP;dir;res
⍝ Install and load two packages and check minimal version selection with aliases used (was once a bug)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
res←TC.InstallPackages'[localhost]aplteam-APLTreeUtils2'dir
→T.GoToTidyUp'aplteam-APLTreeUtils2-1.2.0'≢∊res
res←TC.InstallPackages'[localhost]aplteam-APLGit'dir
→T.GoToTidyUp'aplteam-APLGit-0.24.5'≢∊res
res←TC.LoadDependencies dir #.TEMP
→T.GoToTidyUp 2≠≢res
→T.GoToTidyUp'1.2.0'≢{⍵↑⍨¯1+⍵⍳'+'}2⊃#.TEMP.APLTreeUtils2.Version
→T.GoToTidyUp'1.2.0'≢{⍵↑⍨¯1+⍵⍳'+'}2⊃#.TEMP.APLTreeUtils2.Version
→T.GoToTidyUp'1.2.0'≢{⍵↑⍨¯1+⍵⍳'+'}2⊃#.TEMP.APLGit.##.A.Version      ⍝ Because of minimal version selection!
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_InstallAndLoad_092(stopFlag batchFlag);⎕TRAP;targetDir;res;zipFilename;rc;msg
⍝ Install and load a package from a ZIP file that had a dependency (was once a bug)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
targetDir←∆GetTempDir''
zipFilename←∆TEMP_TEST_DATA,'/ZipWithDeps/aplteam-MyApp1-1.0.0.zip'
res←TC.InstallPackages zipFilename targetDir
→T.GoToTidyUp'aplteam-MyApp1-1.0.0'≢∊res
res←TC.LoadDependencies targetDir #.TEMP
→T.GoToTidyUp'#._tatin.aplteam_MyApp1_1_0_0'≢' '~⍨⍕res
→T.GoToTidyUp'Universe'≢#.TEMP.MyApp1.Zoo.Hello3
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce targetDir
msg Assert rc=0
⍝Done
r←Test_InstallLatest_001(stopFlag batchFlag);⎕TRAP;dir;refs2
;refs
⍝ Install and then load latest version of a package from a given Registry by specifying {group}-{name}-{major}
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
dir←∆GetTempDir ⍬
refs←TC.InstallPackages'[local]aplteam-APLProcess-0'dir
→T.PassesIf 0<≢refs
refs2←TC.LoadDependencies dir #.TEMP
→T.PassesIf'0.5.1'≡∆GetMajorMinorPatch 2⊃#.TEMP.APLProcess.Version
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_InstallLatest_002(stopFlag batchFlag);⎕TRAP;dir;refs2
;refs
⍝ Install and then load latest version of a package from a given Registry by specifying {group}-{name}
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
dir←∆GetTempDir ⍬
refs←TC.InstallPackages'[local]aplteam-APLProcess'dir
→T.PassesIf 0<≢refs
refs2←TC.LoadDependencies dir #.TEMP
→T.PassesIf'1.0.0'≡∆GetMajorMinorPatch 2⊃#.TEMP.APLProcess.Version
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_InstallLatest_004(stopFlag batchFlag);⎕TRAP;dir;refs;expected;refs2
⍝ Install & load best version from given Registry with {group}-{name}-{major-{minor}
⍝ Since there is a non-beta version that one is going to be selected.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
dir←∆GetTempDir ⍬
refs←TC.InstallPackages'[local]example-versions-0.1'dir
→T.GoToTidyUp 0≥≢refs
refs2←TC.LoadDependencies dir #.TEMP
Assert 1=≢refs2
expected←'MyCode' '0.1.0' '2020-01-01'
→T.GoToTidyUp expected≢#.TEMP.versions.Version
expected←'example_versions_0_1_0'
→T.GoToTidyUp expected≢3⊃'.'(≠⊆⊢)⍕#.TEMP.versions
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_InstallLatest_005(stopFlag batchFlag);⎕TRAP;dir;expected;res
⍝ Install & load latest version from given Registry with {group}-{name}-{major-{minor}-{patch}, betas to be ignored.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
dir←∆GetTempDir ⍬
res←TC.InstallPackages'[local]example-versions-1.0.0'dir
→T.GoToTidyUp'example-versions-1.0.0'≢∊res
res←TC.LoadDependencies dir #.TEMP
→T.GoToTidyUp 1≠≢res
expected←'MyCode' '1.0.0' '2020-01-11'
→T.GoToTidyUp expected≢#.TEMP.versions.Version
expected←'example_versions_1_0_0'
→T.GoToTidyUp expected≢3⊃'.'(≠⊆⊢)⍕#.TEMP.versions
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_InstallLatest_006(stopFlag batchFlag);⎕TRAP;dir;refs2;refs;expected;qdmx
⍝ Install & load latest version from given Registry with {group}-{name}-{fullVersion}. Version does not exist
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
:Trap ##.Registry.ErrorNo
TC.InstallPackages'[local]example-versions-1.0.12'dir
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp 1≠≢'File <[^>]+> does not exist'⎕S 0⍠('Greedy' 0)⊣qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_InstallLatest_007(stopFlag batchFlag);⎕TRAP;dir;qdmx
⍝ Install & load a specific version ith {group}-{name}-{major-{minor}-{patch} that does not exist but has betas
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
:Trap ##.Registry.ErrorNo
{}TC.InstallPackages'[local]example-versions-1.0.12'dir
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp 1≠≢'File <[^>]+> does not exist'⎕S 0⍠('Greedy' 0)⊣qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_InstallLatest_008(stopFlag batchFlag);⎕TRAP;dir;refs;expected;res
⍝ Install & load a specific version with {group}-{name}-{major-{minor-beta}-{patch} that is an existing beta
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
dir←∆GetTempDir ⍬
res←TC.InstallPackages'[local]example-versions-1.0.12-zzz'dir
→T.GoToTidyUp'example-versions-1.0.12-zzz'≢∊res
res←TC.LoadDependencies dir #.TEMP
→T.GoToTidyUp 1≠≢res
expected←'MyCode' '1.0.12-zzz' '2020-01-05'
→T.GoToTidyUp expected≢#.TEMP.versions.Version
expected←'example_versions_1_0_12_zzz'
→T.GoToTidyUp expected≢3⊃'.'(≠⊆⊢)⍕#.TEMP.versions
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_InstallLatest_020(stopFlag batchFlag);⎕TRAP;dir;refs2;refs;expected
⍝ Install & load latest version from given Registry with just {group}-{name} when there are beta versions around (to be ignored)
⍝ Since there is a non-beta version that one is going to be selected.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
dir←∆GetTempDir ⍬
refs←1 TC.InstallPackages'[local]example-versions-1'dir
→T.GoToTidyUp 0≥≢refs
refs2←TC.LoadDependencies dir #.TEMP
Assert 1=≢refs2
expected←'MyCode' '1.0.0' '2020-01-11'
→T.GoToTidyUp expected≢#.TEMP.versions.Version
expected←'example_versions_1_0_0'
→T.GoToTidyUp expected≢3⊃'.'(≠⊆⊢)⍕#.TEMP.versions
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_InstallLatest_021(stopFlag batchFlag);⎕TRAP;dir;refs2;refs;expected
⍝ Install & load latest version from given Registry with just {group}-{name} but ask for including betas
⍝ Since there is a non-beta version that one is going to be selected.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
dir←∆GetTempDir ⍬
refs←0 TC.InstallPackages'[local]example-versions-1'dir
→T.GoToTidyUp 0≥≢refs
refs2←TC.LoadDependencies dir #.TEMP
Assert 1=≢refs2
expected←'MyCode' '1.0.12-That-fix' '2020-06-30'
→T.GoToTidyUp expected≢#.TEMP.versions.Version
expected←'example_versions_1_0_12_That_fix'
→T.GoToTidyUp expected≢3⊃'.'(≠⊆⊢)⍕#.TEMP.versions
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_InstallLatest_022(stopFlag batchFlag);⎕TRAP;dir;refs2
;refs
⍝ Install and then load latest version of a package from a given Registry by specifying {group}-{name}-{major}
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
dir←∆GetTempDir ⍬
refs←TC.InstallPackages'[localhost]JustOneBeta'dir
→T.PassesIf 0<≢refs
refs2←TC.LoadDependencies dir #.TEMP
→T.PassesIf'0.1.0-beta-1'≡∆GetMajorMinorPatch 2⊃#.TEMP.JustOneBeta.Version
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_InstallLatest_100(stopFlag batchFlag);⎕TRAP;dir;qdmx
⍝ Attempt to install a latest version of a package from a given Registry that does not exist
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
res←TC.InstallPackages'[local]DoesNot-Exist'dir
→T.GoToTidyUp 0≠≢res
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_LX_001(stopFlag batchFlag);⎕TRAP;dir;body;src;cfg;zipFilename;parms
⍝ There should be no vars LX if there is no `lx` function
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
src←dir,'/ns/'
F.MkDir src
body←'r←PI' 'r←3.14'
(⊂body)F.NPUT src,'/PI.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'LX' '1.0.0'
cfg.source←'ns/'
cfg.os_win←1
TC.WritePackageConfigFile dir cfg
parms←TC.CreateBuildParms dir
zipFilename←TC.BuildPackage parms
{}TC.LoadPackages zipFilename #.TEMP
→T.GoToTidyUp 3.14≢#.TEMP.LX.PI
→T.GoToTidyUp 0≠#._tatin.Example_LX_1_0_0.⎕NC'LX'
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_LX_002(stopFlag batchFlag);⎕TRAP;dir;body;src;cfg;zipFilename;parms
⍝ There should be a vars LX because there is a niladic `lx` function but it should be empty (no result)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
src←dir,'/ns/'
F.MkDir src
body←'r←PI' 'r←3.14'
(⊂body)F.NPUT src,'/PI.aplf'
body←'foo' '⍝ something useful goes here' 'GLOBAL←''Hello world'''
(⊂body)F.NPUT src,'/foo.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'LX' '1.0.0'
cfg.lx←'foo'
cfg.source←'ns/'
cfg.os_win←1
TC.WritePackageConfigFile dir cfg
parms←TC.CreateBuildParms dir
zipFilename←TC.BuildPackage parms
{}TC.LoadPackages zipFilename #.TEMP
→T.GoToTidyUp 3.14≢#.TEMP.LX.PI
→T.GoToTidyUp 2≠#._tatin.Example_LX_1_0_0.TatinVars.⎕NC'LX'
→T.GoToTidyUp 0≠≢#._tatin.Example_LX_1_0_0.TatinVars.LX
→T.GoToTidyUp 2≠#._tatin.Example_LX_1_0_0.⎕NC'GLOBAL'
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_LX_003(stopFlag batchFlag);⎕TRAP;dir;body;src;cfg;zipFilename;parms
⍝ There should be a vars LX because there is a monadic `lx` function but it should be empty (no result)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
src←dir,'/ns/'
F.MkDir src
body←'r←PI' 'r←3.14'
(⊂body)F.NPUT src,'/PI.aplf'
body←'foo' '⍝ something useful goes here' 'GLOBAL←''Hello world'''
(⊂body)F.NPUT src,'/foo.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'LX' '1.0.0'
cfg.lx←'foo'
cfg.source←'ns/'
cfg.os_win←1
TC.WritePackageConfigFile dir cfg
parms←TC.CreateBuildParms dir
zipFilename←TC.BuildPackage parms
{}TC.LoadPackages zipFilename #.TEMP
→T.GoToTidyUp 3.14≢#.TEMP.LX.PI
→T.GoToTidyUp 2≠#._tatin.Example_LX_1_0_0.TatinVars.⎕NC'LX'
→T.GoToTidyUp 0≠≢#._tatin.Example_LX_1_0_0.TatinVars.LX
→T.GoToTidyUp 2≠#._tatin.Example_LX_1_0_0.⎕NC'GLOBAL'
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_LX_004(stopFlag batchFlag);⎕TRAP;dir;body;src;cfg;zipFilename;parms;msg;en;rc
⍝ There should be a vars LX because there is a monadic `lx` function, and there should be a right argument
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
src←dir,'/ns/'
F.MkDir src
body←'r←PI' 'r←3.14'
(⊂body)F.NPUT src,'/PI.aplf'
body←'r←foo y' '⍝ something useful goes here' 'GLOBAL←''Hello world''' 'r←y'
(⊂body)F.NPUT src,'/foo.aplf'
(⊂'Bla')F.NPUT dir,'/goo.txt'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'LX' '1.0.0'
cfg.lx←'foo'
cfg.assets←'goo.txt'
cfg.source←'ns/'
cfg.os_win←1
TC.WritePackageConfigFile dir cfg
parms←TC.CreateBuildParms dir
zipFilename←TC.BuildPackage parms
{}TC.LoadPackages zipFilename #.TEMP
→T.GoToTidyUp 3.14≢#.TEMP.LX.PI
→T.GoToTidyUp 2≠#._tatin.Example_LX_1_0_0.TatinVars.⎕NC'LX'
→T.GoToTidyUp 2≠#._tatin.Example_LX_1_0_0.⎕NC'GLOBAL'
r←T._OK
∆TidyUp:
(rc en msg)←F.RmDir dir
msg Assert 0=rc
(rc en msg)←F.RmDir'expand'F.NormalizePath #.TEMP.LX.TatinVars.HOME,'/..'
msg Assert 0=rc
⍝Done
r←Test_LX_005(stopFlag batchFlag);⎕TRAP;dir;body;src;cfg;zipFilename;parms
⍝ A buggy `lx` was not fully executed but the error is trapped (kept silent)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
src←dir,'/ns/'
F.MkDir src
body←'r←PI' 'r←3.14'
(⊂body)F.NPUT src,'/PI.aplf'
body←'r←foo y' '⍝ something useful goes here' 'GLOBAL←''Hello world''' '∘∘∘'
(⊂body)F.NPUT src,'/foo.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'LX' '1.0.0'
cfg.lx←'foo'
cfg.source←'ns/'
cfg.os_win←1
TC.WritePackageConfigFile dir cfg
parms←TC.CreateBuildParms dir
zipFilename←TC.BuildPackage parms
{}TC.LoadPackages zipFilename #.TEMP
→T.GoToTidyUp 0≠#._tatin.Example_LX_1_0_0.TatinVars.⎕NC'LX'
→T.GoToTidyUp 2≠#._tatin.Example_LX_1_0_0.⎕NC'GLOBAL'
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_ListPkgs_001(stopFlag batchFlag);⎕TRAP;mat;noOf;buff;last;deprecated
⍝ List all packages with defaults (aggregate=1)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
mat←TC.ListPackages'[localhost]'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 2=2⊃⍴mat
buff←{⊃,/1↓⎕NPARTS ⍵}¨F.ListDirs ∆TEMP_REGISTRY_FOLDER,'\'
buff←∪{⍵↑⍨+/∧\⌽'.'≠⌽⍵}¨buff
buff←{⍵/⍨2>+\'-'=⍵}¨buff
noOf←≢{≢⍵}⌸buff
Assert 0<noOf
deprecated←TC.ListDeprecated'[localhost]'
→T.PassesIf noOf≡(≢mat)+≢deprecated
r←T._OK
⍝Done
r←Test_ListPkgs_003(stopFlag batchFlag);⎕TRAP;list1;parms;list2;mat;noOf
⍝ Make sure the format and number of packages returned is correct
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←TC.Reg.CheckParmsForListPackages ⍬
parms.aggregate←0
mat←parms TC.ListPackages'[localhost]'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 1=2⊃⍴mat
noOf←≢F.ListDirs ∆TEMP_SERVER_FOLDER,'/'
Assert 0<noOf
→T.PassesIf noOf≡(≢mat)+≢1 TC.ListDeprecated'[localhost]'
r←T._OK
⍝Done
r←Test_ListPkgs_004(stopFlag batchFlag);⎕TRAP;mat;noOf;parms
⍝ List all packages with date←1
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←TC.Reg.CheckParmsForListPackages ⍬
parms.date←1
mat←parms TC.ListPackages'[localhost]'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 2=2⊃⍴mat
noOf←≢F.ListDirs ∆TEMP_SERVER_FOLDER
Assert 0<noOf
→T.PassesIf noOf≡(≢mat)+≢1 TC.ListDeprecated '[localhost]'
→T.PassesIf∧/∧/¨mat[;2]∊¨⊂⎕D,' :-'  ⍝ Dates
r←T._OK
⍝Done
r←Test_ListPkgs_011(stopFlag batchFlag);⎕TRAP;mat
⍝ List all packages of group "doesnotexist"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
mat←TC.ListPackages'[local]doesnotexist'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 1=2⊃⍴mat
→T.PassesIf 0≡≢mat
r←T._OK
⍝Done
r←Test_ListPkgs_012(stopFlag batchFlag);⎕TRAP;mat;parms
⍝ List all packages of group "doesnotexist" with `aggregate←0`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←TC.Reg.CheckParmsForListPackages ⍬
parms.aggregate←0
mat←parms TC.ListPackages'[local]doesnotexist'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 1=2⊃⍴mat
→T.PassesIf 0≡≢mat
r←T._OK
⍝Done
r←Test_ListPkgs_013(stopFlag batchFlag);⎕TRAP;mat
⍝ List all packages of group "aplteam"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
mat←TC.ListPackages'[local]aplteam'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 2=2⊃⍴mat
→T.PassesIf 0<≢mat
→T.PassesIf∧/'aplteam-'{⍺∘≡¨(≢⍺)↑¨⍵}mat[;1]
→T.PassesIf 2≤≢∪mat[;2]
r←T._OK
⍝Done
r←Test_ListPkgs_014(stopFlag batchFlag);⎕TRAP;mat;parms
⍝ List all packages of group "aplteam" with `aggregate←0`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←TC.Reg.CheckParmsForListPackages ⍬
parms.aggregate←0
mat←parms TC.ListPackages'[local]aplteam'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 2=2⊃⍴mat
→T.PassesIf 0<≢mat
→T.PassesIf∧/'aplteam-'{⍺∘≡¨(≢⍺)↑¨⍵},mat[;1]
r←T._OK
⍝Done
r←Test_ListPkgs_021(stopFlag batchFlag);⎕TRAP;mat
⍝ List all vewrsions of package "doesnotexist-foo"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
mat←TC.ListPackages'[local]doesnotexist-foo'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 1=2⊃⍴mat
→T.PassesIf 0≡≢mat
r←T._OK
⍝Done
r←Test_ListPkgs_022(stopFlag batchFlag);⎕TRAP;mat;parms
⍝ List all versions of package "aplteam-APLProcess" with `aggregate←0`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←TC.Reg.CheckParmsForListPackages ⍬
parms.aggregate←0
mat←parms TC.ListPackages'[local]aplteam-APLProcess'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 2=2⊃⍴mat
→T.PassesIf∧/'aplteam-APLProcess-'{⍺∘≡¨(≢⍺)↑¨⍵}mat[;1]
→T.PassesIf 0<≢mat
r←T._OK
⍝Done
r←Test_ListPkgs_023(stopFlag batchFlag);⎕TRAP;mat
⍝ List all versions of package "aplteam-APLProcess"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
mat←TC.ListPackages'[local]aplteam-APLProcess'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 2=2⊃⍴mat
→T.PassesIf 0<≢mat
→T.PassesIf∧/'aplteam-APLProcess'{⍺∘≡¨(≢⍺)↑¨⍵}mat[;1]
r←T._OK
⍝Done
r←Test_ListPkgs_031(stopFlag batchFlag);⎕TRAP;mat
⍝ List all versions of package "doesnotexist-foo-0"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
mat←TC.ListPackages'[local]doesnotexist-foo-0'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 1=2⊃⍴mat
→T.PassesIf 0≡≢mat
r←T._OK
⍝Done
r←Test_ListPkgs_032(stopFlag batchFlag);⎕TRAP;mat;parms
⍝ List all versions of package "aplteam-APLProcess-0" with `aggregate←0`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←TC.Reg.CheckParmsForListPackages ⍬
parms.aggregate←0
mat←parms TC.ListPackages'[local]aplteam-APLProcess-0'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 2=2⊃⍴mat
→T.PassesIf∧/'aplteam-APLProcess-0.'{⍺∘≡¨(≢⍺)↑¨⍵}mat[;1]
→T.PassesIf 0<≢mat
r←T._OK
⍝Done
r←Test_ListPkgs_033(stopFlag batchFlag);⎕TRAP;mat
⍝ List all versions of package "aplteam-APLProcess-0"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
mat←TC.ListPackages'[local]aplteam-APLProcess-0'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 2=2⊃⍴mat
→T.PassesIf 0<≢mat
→T.PassesIf 0<⊃mat[1;2]
→T.PassesIf∧/'aplteam-APLProcess-0'{⍺∘≡¨(≢⍺)↑¨⍵}mat[;1]
r←T._OK
⍝Done
r←Test_ListPkgs_041(stopFlag batchFlag);⎕TRAP;mat
⍝ List all versions of package "aplteam-APLProcess-0-2"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
mat←TC.ListPackages'[local]aplteam-APLProcess-0.2'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 2=2⊃⍴mat
→T.PassesIf 1=≢mat
→T.PassesIf'aplteam-APLProcess-0.2'≡⊃mat[;1]
r←T._OK
⍝Done
r←Test_ListPkgs_043(stopFlag batchFlag);⎕TRAP;mat;parms
⍝ List all packages of group "aplteam" with their publishing dates
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.date←1
parms.group←'aplteam'
mat←parms TC.ListPackages'[local]'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 2=2⊃⍴mat
→T.PassesIf 1<≢mat
→T.PassesIf∧/{∧/⍵∊⎕D,' :-'}¨mat[;2]                ⍝ Formatted dates?
→T.PassesIf∧/'aplteam-'{((≢⍺)↑[2]⍵)∧.=⍺}↑mat[;1]   ⍝ Only group "aplteam"?
r←T._OK
⍝Done
r←Test_ListPkgs_044(stopFlag batchFlag);⎕TRAP;mat;parms
⍝ List all packages with the tag "zip" with their publishing dates
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.date←1
parms.tags←'zip'
mat←parms TC.ListPackages'[localhost]'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 2=2⊃⍴mat
→T.PassesIf 1<≢mat
→T.PassesIf∧/{∧/⍵∊⎕D,' :-'}¨mat[;2]                                ⍝ Formatted dates?
r←T._OK
⍝Done
r←Test_ListPkgs_046(stopFlag batchFlag);⎕TRAP;mat;parms
⍝ List all packages with their project_url
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.project_url←1
mat←parms TC.ListPackages'[local]'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 3=2⊃⍴mat
→T.PassesIf 1<≢mat
→T.PassesIf∨/'https://'∘{((≢⍺)↑[2]⍵)∧.=⍺}↑mat[;3]      ⍝ Some but not all are URLs
r←T._OK
⍝Done
r←Test_ListPkgs_047(stopFlag batchFlag);⎕TRAP;mat;parms
⍝ List all packages of group "aplteam" with their project_url
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.project_url←1
parms.group←'aplteam'
mat←parms TC.ListPackages'[local]'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 3=2⊃⍴mat
→T.PassesIf 1<≢mat
→T.PassesIf∨/'https://'{((≢⍺)↑[2]⍵)∧.=⍺}↑mat[;3]   ⍝ Majority must be URLs
→T.PassesIf∧/83∧.=∪⎕DR¨mat[;2]                     ⍝ Integer (no. of packages
→T.PassesIf∧/'aplteam-'{((≢⍺)↑[2]⍵)∧.=⍺}↑mat[;1]   ⍝ Only group "aplteam"?
r←T._OK
⍝Done
r←Test_ListPkgs_048(stopFlag batchFlag);⎕TRAP;mat;parms
⍝ List all packages with the tag "zip" with their project_url
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.project_url←1
parms.tags←'zip'
mat←parms TC.ListPackages'[localhost]'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 3=2⊃⍴mat
→T.PassesIf 1<≢mat
→T.PassesIf∨/'https://'{((≢⍺)↑[2]⍵)∧.=⍺}↑mat[;3]   ⍝ Majority must be URLs
→T.PassesIf∧/83∧.=∪⎕DR¨mat[;2]                     ⍝ Integer (no. of packages
r←T._OK
⍝Done
r←Test_ListPkgs_050(stopFlag batchFlag);⎕TRAP;parms;mat1;mat2
⍝ List all packages from a certain date by specifying "since" as an integer YYYYMMDD
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
mat1←TC.ListPackages'[local]'         ⍝ All
parms←⎕NS''
parms.since←20200501
mat2←parms TC.ListPackages'[local]'   ⍝ Limited number
→T.PassesIf 2=⍴⍴mat2
→T.PassesIf 2=2⊃⍴mat2
→T.PassesIf 1<≢mat2
→T.PassesIf∧/parms.since≤⊃∘A.ToNum¨'-'~¨⍨∪10↑¨mat2[;2]
r←T._OK
⍝Done
r←Test_ListPkgs_051(stopFlag batchFlag);⎕TRAP;mat;parms
⍝ List all packages from a certain date by specifying "since" by international date format
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.since←'2020-05-01'
mat←parms TC.ListPackages'[local]'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 2=2⊃⍴mat
→T.PassesIf 1<≢mat
→T.PassesIf∧/(⊃A.ToNum parms.since~'-')≤⊃∘A.ToNum¨'-'~¨⍨∪10↑¨mat[;2]
r←T._OK
⍝Done
r←Test_ListPkgs_060(stopFlag batchFlag);⎕TRAP;parms;mat
⍝ List all packages that are user commands
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.userCommand←1
mat←parms TC.ListPackages'[localhost]'
→T.PassesIf 2=⍴⍴mat
→T.PassesIf 2=2⊃⍴mat
→T.PassesIf 2=≢mat
r←T._OK
⍝Done
r←Test_ListPkgs_070(stopFlag batchFlag);⎕TRAP;mat;parms;buff
⍝ List all packages with their dependencies
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.dependencies←1
parms.aggregate←1      ⍝ This will be ignored because "dependencies" takes preceence
mat←parms TC.ListPackages'[localhost]'
→T.PassesIf 1=2⊃⍴mat
buff←(↑mat[;1])[;1 2]     ⍝ Dependencies are indentet by two spaces
→T.PassesIf 1<+/buff∧.≠'  '
→T.PassesIf 1<+/buff∧.='  '
r←T._OK
⍝Done
r←Test_ListPkgs_080(stopFlag batchFlag);⎕TRAP;mat;parms;buff;all
⍝ List latest version of all packages
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.aggregate←0
all←parms TC.ListPackages'[localhost]'
parms←⎕NS''
parms.latest←1
mat←parms TC.ListPackages'[localhost]'
→T.PassesIf 1=2⊃⍴mat
→T.PassesIf mat≡{⍪⍵⌿⍨⌽{(⍵⍳⍵)=⍳≢⍵}#.Tatin.Registry.RemoveMinorAndPatch¨⌽⍵},all
r←T._OK
⍝Done
r←Test_ListPkgs_099(stopFlag batchFlag);⎕TRAP;list;qdmx
⍝ Specify an invalid package ID: no result
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←Reg.ListPackages(∆TEMP_REGISTRY_FOLDER,'/DoesNotExist')(Reg.CheckParmsForListPackages'')
→T.PassesIf 0=≢list
r←T._OK
⍝Done
r←Test_ListRegistries_001(stopFlag batchFlag);⎕TRAP;list
⍝ List all packages
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←TC.ListRegistries''
→T.PassesIf 0<≢list
r←T._OK
⍝Done
r←Test_ListTags_001(stopFlag batchFlag);⎕TRAP;list
⍝ List all tags
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←TC.ListTags'[localhost]'
→T.PassesIf 0<≢list
→T.PassesIf 2=|≡list
r←T._OK
⍝Done
r←Test_ListTags_002(stopFlag batchFlag);⎕TRAP;list;parms
⍝ List all tags stemming from projects that share the tag "tesd-framevork"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.tags←'tesd-framevork'
list←parms TC.ListTags'[localhost]'
→T.PassesIf 0<≢list
→T.PassesIf 2=|≡list
r←T._OK
⍝Done
r←Test_ListTags_003(stopFlag batchFlag);⎕TRAP;list;parms
⍝ List all tags stemming from projects that share the tag "winndoze-services"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.tags←'winndoze-services'
list←parms TC.ListTags'[localhost]'
→T.PassesIf 0<≢list
→T.PassesIf 2=|≡list
r←T._OK
⍝Done
r←Test_ListTags_004(stopFlag batchFlag);⎕TRAP;fuzzy;list1;list2;list3;list4;allPackages;parms
⍝ List all packages with a tag "zip-tools"; tests the internal function `FindTag`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.aggregate←0
allPackages←0 Reg.GetAllPackages ∆TEMP_SERVER_FOLDER
(fuzzy list1)←1 Reg.FindTag ∆TEMP_SERVER_FOLDER'zip-tools'allPackages
→T.PassesIf 0=fuzzy
→T.PassesIf 4=≢list1
→T.PassesIf∧/⊃∨/∨/¨'-SevenZip-' '-Seven7Zip-' '-DotNetZip-'⍷¨⊂↑,list1
(fuzzy list1)←1 Reg.FindTag ∆TEMP_SERVER_FOLDER'zip-tool'allPackages
→T.PassesIf 1=fuzzy
→T.PassesIf 4=≢list1
→T.PassesIf∧/⊃∨/∨/¨'-SevenZip-' '-Seven7Zip-' '-DotNetZip-'⍷¨⊂↑,list1
(fuzzy list2)←1 Reg.FindTag ∆TEMP_SERVER_FOLDER'zip'allPackages
→T.PassesIf 1=fuzzy
→T.PassesIf 4=≢list2
→T.PassesIf∧/⊃∨/∨/¨'-SevenZip-' '-Seven7Zip-' '-DotNetZip-'⍷¨⊂↑,list2
(fuzzy list3)←1 Reg.FindTag ∆TEMP_SERVER_FOLDER'winndows-servized'allPackages
→T.PassesIf 2=fuzzy
→T.PassesIf 1=≢list3
(fuzzy list4)←1 Reg.FindTag ∆TEMP_SERVER_FOLDER'testd-fraemwork'allPackages
→T.PassesIf 2=fuzzy
→T.PassesIf 1=≢list4
r←T._OK
⍝Done
r←Test_ListTags_006(stopFlag batchFlag);⎕TRAP;fuzzy;list1;list2;list3;list4;path;allPackages;parms
⍝ List all packages with tag ←→ "err-trappinck"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
path←∆TEMP_SERVER_FOLDER,'/'
parms←⎕NS''
parms.aggregate←0
allPackages←Reg.ListPackages path parms
(fuzzy list1)←1 Reg.FindTag path 'err-trappinck' allPackages
→T.PassesIf 2=fuzzy
→T.PassesIf 1=≢list1
→T.PassesIf∧/∨/'-HandleError-'⍷↑list1
r←T._OK
⍝Done
r←Test_ListTags_010(stopFlag batchFlag);⎕TRAP;list;parms
⍝ List all tags stemming from projects that share the tag "does-not-exist": none!
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
parms.tags←'does-not-exist'
list←parms TC.ListTags'[localhost]'
→T.PassesIf 0=≢list
r←T._OK
⍝Done
r←Test_ListVersions_001(stopFlag batchFlag);⎕TRAP;list;noOf
⍝ List all versions of one particular package by specifying just {group}-{name}
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←TC.ListVersions'[local]aplteam-APLTreeUtils'
noOf←≢{⍵↓⍨-1+≢'-'A.Last ⍵}¨F.ListDirs ∆TEMP_SERVER_FOLDER,'\aplteam-APLTreeUtils-*'
→T.PassesIf 0<noOf
→T.PassesIf noOf≡≢list
r←T._OK
⍝Done
r←Test_ListVersions_002(stopFlag batchFlag);⎕TRAP;list;noOf
⍝ List all versions of one particular package  by specifying just {group}-{name}-{major}
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←TC.ListVersions'[local]aplteam-APLTreeUtils-7'
noOf←≢{⍵↓⍨-1+≢'-'A.Last ⍵}¨F.ListDirs ∆TEMP_SERVER_FOLDER,'\aplteam-APLTreeUtils-7.*'
→T.PassesIf 0<noOf
→T.PassesIf noOf≡≢list
r←T._OK
⍝Done
r←Test_ListVersions_003(stopFlag batchFlag);⎕TRAP;list;noOf
⍝ List all versions of one particular package by specifying just {group}-{name}-{major.minor}
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←TC.ListVersions'[local]AplTeam-APLprocess-0.2'
noOf←≢{⍵↓⍨-1+≢'-'A.Last ⍵}¨F.ListDirs ∆TEMP_SERVER_FOLDER,'\aplteam-APLProcess-0.2*'
→T.PassesIf 0<noOf
→T.PassesIf noOf≡≢list
r←T._OK
⍝Done
r←Test_ListVersions_004(stopFlag batchFlag);⎕TRAP;list;noOf
⍝ List all versions of one particular package that has beta by specifying just {group}-{name}-{major.minor}
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←TC.ListVersions'[local]example-versions-1.0'
noOf←≢{⍵↓⍨-1+≢'-'A.Last ⍵}¨F.ListDirs ∆TEMP_SERVER_FOLDER,'\example-versions-1.0*'
→T.PassesIf 0<noOf
→T.PassesIf noOf≡≢list
r←T._OK
⍝Done
r←Test_ListVersions_005(stopFlag batchFlag);⎕TRAP;list;noOf
⍝ List all versions of one particular package that has beta by specifying just {group}-{name}-{major}
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←TC.ListVersions'[local]example-versions-1'
noOf←≢{⍵↓⍨-1+≢'-'A.Last ⍵}¨F.ListDirs ∆TEMP_SERVER_FOLDER,'\example-versions-1*'
→T.PassesIf 0<noOf
→T.PassesIf noOf≡≢list
r←T._OK
⍝Done
r←Test_ListVersions_006(stopFlag batchFlag);⎕TRAP;list;noOf;expected
⍝ List all versions of one particular package that has beta by specifying just {group}-{name}
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←,TC.ListVersions'[local]example-versions'
expected←'example-versions-2.0.0'  'example-versions-1.0.12-That-fix'  'example-versions-1.0.12-zzz'  'example-versions-1.0.12-aaa'  'example-versions-1.0.1-That-fix'
expected,←'example-versions-1.0.1-This-fix' 'example-versions-1.0.0'  'example-versions-1.0.0-beta-1'  'example-versions-0.1.0'
→T.PassesIf list≡⌽expected          ⍝ Note that the publishing date dictates this sort order
noOf←≢{⍵↓⍨-1+≢'-'A.Last ⍵}¨F.ListDirs ∆TEMP_SERVER_FOLDER,'\example-versions-*'
→T.PassesIf 0<noOf
→T.PassesIf noOf≡≢list
r←T._OK
⍝Done
r←Test_ListVersions_007(stopFlag batchFlag);⎕TRAP;list
⍝ List all versions of a package name that exists within two different groups
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←,TC.ListVersions'[localhost]Boo'
→T.PassesIf (,⊂'Boo')≡∪{2⊃'-'(≠⊆⊢)⍵}¨list
r←T._OK
⍝Done
r←Test_ListVersions_008(stopFlag batchFlag);⎕TRAP;list;noOf
⍝ List all versions of one particular package by specifying {group}-{name} but all in lowercase
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←TC.ListVersions'[local]aplteam-apltreeutils'
noOf←≢{⍵↓⍨-1+≢'-'A.Last ⍵}¨F.ListDirs ∆TEMP_SERVER_FOLDER,'\aplteam-APLTreeUtils-*'
→T.PassesIf 0<noOf
→T.PassesIf noOf≡≢list
r←T._OK
⍝Done
r←Test_ListVersions_009(stopFlag batchFlag);⎕TRAP;list;noOf
⍝ List all versions of one particular package by specifying {group}-{name} but all in UPPERCASE
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←TC.ListVersions'[local]APLTEAM-APLTREEUTILS'
noOf←≢{⍵↓⍨-1+≢'-'A.Last ⍵}¨F.ListDirs ∆TEMP_SERVER_FOLDER,'\aplteam-APLTreeUtils-*'
→T.PassesIf 0<noOf
→T.PassesIf noOf≡≢list
r←T._OK
⍝Done
r←Test_ListVersions_010(stopFlag batchFlag);⎕TRAP;list;noOf
⍝ List all versions of one particular package that does not exist
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←TC.ListVersions'[local]DoesNot-Exit'
→T.PassesIf 0≡≢list
r←T._OK
⍝Done
r←Test_ListVersions_020(stopFlag batchFlag);⎕TRAP;list;noOf
⍝ List all versions of all packages at all Registries with special syntax
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←TC.ListVersions'[*]MarkAPL'
→T.PassesIf 0<≢list
→T.PassesIf 1<≢∪list[;1]
r←T._OK
⍝Done
r←Test_LoadBest_001(stopFlag batchFlag);⎕TRAP
⍝ Load best version of a package from a given Registry by specifying [<RegistryAlias>]{group}-{name}-{major}
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
{}TC.LoadPackages'[local]aplteam-APLProcess-0'#.TEMP
→T.GoToTidyUp'0.5.1'≢∆GetMajorMinorPatch 2⊃#.TEMP.APLProcess.Version
r←T._OK
∆TidyUp:
⍝Done
r←Test_LoadBest_002(stopFlag batchFlag);⎕TRAP
⍝ Load best version of a package from a given Registry by specifying [<RegistryAlias>]{group}-{name}
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
{}TC.LoadPackages'[local]aplteam-APLProcess'#.TEMP
→T.GoToTidyUp'1.0.0'≢∆GetMajorMinorPatch 2⊃#.TEMP.APLProcess.Version
r←T._OK
∆TidyUp:
⍝Done
r←Test_LoadBest_003(stopFlag batchFlag);⎕TRAP;res
⍝ Load best version of a package from a given Registry by specifying [<RegistryAlias>]{group}-{name} that does not exist
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
res←TC.LoadPackages'[local]DoesNot-Exist'#.TEMP
→T.PassesIf 0=res
r←T._OK
⍝Done
r←Test_LoadBest_004(stopFlag batchFlag);⎕TRAP
⍝ Load best version of a package from a given Registry by specifying [local]aplteam-WinReg; there is also WinRegSimple (was once a bug)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
{}TC.LoadPackages'[local]aplteam-WinReg'#.TEMP
→T.GoToTidyUp'4.0.0'≢∆GetMajorMinorPatch 2⊃#.TEMP.WinReg.Version
r←T._OK
∆TidyUp:
⍝Done
r←Test_Load_001(stopFlag batchFlag);⎕TRAP;noOf;parms
;dir;src;zip;body;cfg;zipfile
⍝ Build a package into a ZIP file and then load it. Must not leave anything behind in the file system.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src zip
body←':Namespace Constants' '∇r←PI' 'r←3.14' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/Constants.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '0.1.0'
cfg.source←'Constants.apln'
cfg.api←'Constants'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
zipfile←TC.BuildPackage parms
noOf←TC.LoadPackages('file://',zipfile)#.TEMP
Assert 3=#.TEMP.Constants.⎕NC'PI'
→T.PassesIf 3.14=#.TEMP.Constants.PI
→T.PassesIf 0<≢#.TEMP.Constants.##.TatinVars.URI
→T.PassesIf 0=≢#.TEMP.Constants.##.TatinVars.HOME
→T.PassesIf 0<noOf
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Load_003(stopFlag batchFlag);⎕TRAP;res;noOfRefs
⍝ Exercise ⎕SE.Tatin.LoadPackages on a package with an alias
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←1 TC.LoadPackages'A@[localhost]APLTreeUtils' '#.TEMP'
→T.GoToTidyUp 0=res
→T.GoToTidyUp 3.1≢|A.⎕NC⊂'Create_UUID'
r←T._OK
∆TidyUp:
:Trap 0 ⋄ F.RmDir res ⋄ :EndTrap
⍝Done
r←Test_Load_004(stopFlag batchFlag);⎕TRAP;res;noOfRefs;qdmx
⍝ Exercise ⎕SE.Tatin.LoadPackages on two different packages both with the same alias (must throw an error)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←1 TC.LoadPackages'A@[localhost]APLTreeUtils' '#.TEMP'
→T.GoToTidyUp 0=res
→T.GoToTidyUp~∨/'.aplteam_APLTreeUtils_7_'⍷⍕#.TEMP.A
res←1 TC.LoadPackages'ZOO@[localhost]Zoo' '#.TEMP'
→T.GoToTidyUp~∨/'.example_Zoo_3_'⍷⍕#.TEMP.ZOO
:Trap ##.Registry.ErrorNo
res←1 TC.LoadPackages'A@[localhost]OS' '#.TEMP'
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Name "A" already in use and therefore not suitable as alias (⎕NC=9)'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
F.RmDir'expand'F.NormalizePath #.TEMP.ZOO.##.TatinVars.HOME,'/..'
⍝Done
r←Test_Load_005(stopFlag batchFlag);⎕TRAP;res;noOfRefs;qdmx
⍝ Exercise ⎕SE.Tatin.LoadPackages on two packages that differ only by patch number both with the same alias
⍝ This is supposed to work, and it't the user who is responsible in case of `LoadPackages`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←1 TC.LoadPackages'A@[localhost]aplteam-APLTreeUtils-6.0.10' '#.TEMP'
→T.GoToTidyUp~∨/'.aplteam_APLTreeUtils_6_0_10.'⍷⍕#.TEMP.A
res←1 TC.LoadPackages'A@[localhost]aplteam-APLTreeUtils-6.0.11' '#.TEMP'
→T.GoToTidyUp~∨/'.aplteam_APLTreeUtils_6_0_11'⍷⍕#.TEMP.A
r←T._OK
∆TidyUp:
⍝Done
r←Test_Load_006(stopFlag batchFlag);⎕TRAP;res;noOfRefs;qdmx
⍝ Exercise ⎕SE.Tatin.LoadPackages on two packages that differ only by major number both with the same alias
⍝ This MUST NOT work because package with different major numbers are considered different packages
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
res←1 TC.LoadPackages'A@[localhost]aplteam-APLTreeUtils-6' '#.TEMP'
→T.GoToTidyUp~∨/'.aplteam_APLTreeUtils_6_0_'⍷⍕#.TEMP.A
:Trap ##.Registry.ErrorNo
res←1 TC.LoadPackages'A@[localhost]aplteam-APLTreeUtils-7' '#.TEMP'
→T.GoToTidyUp 0
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Name "A" already in use and therefore not suitable as alias (⎕NC=9)'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
:Trap 0 ⋄ F.RmDir res ⋄ :EndTrap
⍝Done
r←Test_Load_007(stopFlag batchFlag);⎕TRAP;res;noOfRefs;qdmx
⍝ Exercise ⎕SE.Tatin.LoadPackages with an alias that is already used as a variable name
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
:Trap ##.Registry.ErrorNo
res←1 TC.LoadPackages'A@[localhost]aplteam-APLTreeUtils-7' '#.TEMP'
→T.GoToTidyUp 0
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Name "A" already in use and therefore not suitable as alias (⎕NC=2)'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
⍝Done
r←Test_Load_008(stopFlag batchFlag);⎕TRAP;res;noOfRefs
⍝ Exercise ⎕SE.Tatin.LoadPackages with an alias on a package that has already been loaded without alias
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
res←1 TC.LoadPackages'[localhost]aplteam-APLTreeUtils-6' '#.TEMP'
→T.GoToTidyUp 0≠#.TEMP.⎕NC'A'
res←1 TC.LoadPackages'A@[localhost]aplteam-APLTreeUtils-6' '#.TEMP'
→T.GoToTidyUp 0
→T.GoToTidyUp~∨/'.aplteam_APLTreeUtils_6_0_'⍷⍕#.TEMP.A
r←T._OK
∆TidyUp:
⍝Done
r←Test_Load_010(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;parms
;dir;src;reg1;reg2;body;cfg;zipfile;refs
⍝ Publish simple package to the second registry and then load it from there
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg1 reg2)←(⊂dir,'/'),¨'src' 'reg1' 'reg2'
F.MkDir src reg1 reg2
TC.Reg.CreateRegistry reg1
TC.MyUserSettings.AddRegistry'[Private]',reg1
TC.Reg.CreateRegistry reg2
TC.MyUserSettings.AddRegistry'[local2]',reg2
body←':Namespace Test' '∇r←Hello' 'r←''Word''' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Test' '1.0.0'
cfg.source←'Test.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
zipfile←TC.BuildPackage parms
(rc msg zipFilename)←TC.PublishPackage zipfile'[local2]'
Assert 200=rc
body←':Namespace Constants' '∇r←PI' 'r←3.14' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/Constants.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '1.0.0'
cfg.source←'Constants.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
zipfile←TC.BuildPackage parms
(rc msg zipFilename)←TC.PublishPackage zipfile'[local2]'
Assert 200=rc
refs←TC.LoadPackages('[local2]Example-Constants-1.0.0')'#.TEMP'
→T.GoToTidyUp(,⊂'Example_Constants_1_0_0')≢' '~⍨¨↓#._tatin.⎕NL 9
→T.GoToTidyUp 2≠≢F.ListDirs reg2
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[Private]'
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
⍝Done
r←Test_Load_011(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;parms
;dir;src;reg1;reg2;body;cfg;zipfile;refs
⍝ Publish simple package to the second registry and then load it from there using just a package ID.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg1 reg2)←(⊂dir,'/'),¨'src' 'reg1' 'reg2'
F.MkDir src reg1 reg2
TC.Reg.CreateRegistry reg1
TC.MyUserSettings.AddRegistry'[Private]',reg1
TC.Reg.CreateRegistry reg2
TC.MyUserSettings.AddRegistry'[local2]',reg2
body←':Namespace Test' '∇r←Hello' 'r←''Word''' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Test' '1.0.0'
cfg.source←'Test.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
zipfile←TC.BuildPackage parms
(rc msg zipFilename)←TC.PublishPackage zipfile'[local2]'
Assert 200=rc
body←':Namespace Constants' '∇r←PI' 'r←3.14' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/Constants.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '1.0.0'
cfg.source←'Constants.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
zipfile←TC.BuildPackage parms
(rc msg zipFilename)←TC.PublishPackage zipfile'[local2]'
Assert 200=rc
refs←TC.LoadPackages'Example-Constants-1.0.0'#.TEMP
→T.GoToTidyUp'Example_Constants_1_0_0'≢⊃' '~⍨¨↓#._tatin.⎕NL 9
→T.GoToTidyUp 2≠≢F.ListDirs reg2
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[Private]'
Assert TC.MyUserSettings.RemoveRegistry'[Local2]'
⍝Done
r←Test_Load_012(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;parms
;dir;src;reg1;reg2;body;cfg;zipfile;refs;path
⍝ Publish simple package to the second registry and then load it from there using the folder name.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg1 reg2)←(⊂dir,'/'),¨'src' 'reg1' 'reg2'
F.MkDir src reg1 reg2
TC.Reg.CreateRegistry reg1
TC.MyUserSettings.AddRegistry'[Private]',reg1
TC.Reg.CreateRegistry reg2
TC.MyUserSettings.AddRegistry'[local2]',reg2
body←':Namespace Constants' '∇r←PI' 'r←3.14' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/Constants.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '1.0.0'
cfg.source←'Constants.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
zipfile←TC.BuildPackage parms
(rc msg zipFilename)←TC.PublishPackage zipfile'[local2]'
Assert 200=rc
path←dir,'/reg2/',⊃{⍺,'-',⍵}/cfg.(group name version)
refs←TC.LoadPackages('file://',path)#.TEMP
→T.GoToTidyUp'Example_Constants_1_0_0'≢⊃' '~⍨¨↓#._tatin.⎕NL 9
→T.GoToTidyUp 1≠≢F.ListDirs reg2
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[Private]'
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
⍝Done
r←Test_Load_013(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;parms
;dir;src;body;cfg;zipfile;refs;path;reg
⍝ Publish several versions of a package to a registry and then load it without version number (best one)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace Constants' '∇r←PI' 'r←3.0' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/Constants.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '0.1.0'
cfg.source←'Constants.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
zipfile←TC.BuildPackage parms
(rc msg zipFilename)←TC.PublishPackage zipfile'[local2]'
Assert 200=rc
body←':Namespace Constants' '∇r←PI' 'r←3.1' '∇' ':EndNamespace'
(⊂body)F.NPUT(src,'/Constants.apln')1
cfg.(group name version)←'Example' 'Constants' '0.2.0'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
zipfile←TC.BuildPackage parms
(rc msg zipFilename)←TC.PublishPackage zipfile'[local2]'
Assert 200=rc
body←':Namespace Constants' '∇r←PI' 'r←3.14' '∇' ':EndNamespace'
(⊂body)F.NPUT(src,'/Constants.apln')1
cfg.(group name version)←'Example' 'Constants' '1.0.0'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
zipfile←TC.BuildPackage parms
(rc msg zipFilename)←TC.PublishPackage zipfile'[local2]'
Assert 200=rc
path←dir,'/reg/',⊃{⍺,'-',⍵}/cfg.(group name)
refs←TC.LoadPackages path #.TEMP
→T.GoToTidyUp'Example_Constants_1_0_0'≢⊃' '~⍨¨↓#._tatin.⎕NL 9
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
⍝Done
r←Test_Load_014(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;parms
;dir;src;reg;prjPath;zipfile;path;refs
⍝ Publish two classes and one namespace script. The classes :Include the NS script.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
prjPath←∆TEMP_TEST_DATA,'/Source'      ⍝ Already populated; current directory must be where Tatin Client lives
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
parms←TC.CreateBuildParms prjPath,'/APLTree'
parms.targetPath←src
zipfile←TC.BuildPackage parms
src ⎕NCOPY prjPath,'/APLTree/apl-package.json'
(rc msg zipFilename)←TC.PublishPackage zipfile'[local2]'
Assert 200=rc
Assert 0=⊃F.RmDir src ⋄ F.MkDir src ⍝ Necessary to overcome bug <01722>
parms←TC.CreateBuildParms prjPath,'/F-D'
parms.targetPath←src
zipfile←TC.BuildPackage parms
src ⎕NCOPY⍠('IfExists' 'Replace')⊣prjPath,'/F-D/apl-package.json'
(rc msg zipFilename)←TC.PublishPackage zipfile'[local2]'
Assert 200=rc
Assert 0=⊃F.RmDir src ⋄ F.MkDir src ⍝ Necessary to overcome bug <01722>
parms←TC.CreateBuildParms prjPath,'/OS'
parms.targetPath←src
zipfile←TC.BuildPackage parms
src ⎕NCOPY⍠('IfExists' 'Replace')⊣prjPath,'/OS/apl-package.json'
(rc msg zipFilename)←TC.PublishPackage zipfile'[local2]'
Assert 200=rc
Assert 0=⊃F.RmDir src ⋄ F.MkDir src ⍝ Necessary to overcome bug <01722>
path←dir,'/reg/aplteam-APLTreeUtils-6.0.0'
refs←TC.LoadPackages path #.TEMP
→T.GoToTidyUp 0=≢⎕SRC #.TEMP.APLTreeUtils
→T.GoToTidyUp 9≠⎕NC⍕#.TEMP.APLTreeUtils
path←dir,'/reg/aplteam-FilesAndDirs-3.0.0'
refs←TC.LoadPackages path #.TEMP
→T.GoToTidyUp 0=≢⎕SRC #.TEMP.FilesAndDirs
→T.GoToTidyUp 9≠⎕NC⍕#.TEMP.FilesAndDirs
path←dir,'/reg/aplteam-OS-2.0.0'
refs←TC.LoadPackages path #.TEMP
→T.GoToTidyUp 0=≢⎕SRC #.TEMP.OS
→T.GoToTidyUp 9≠⎕NC⍕#.TEMP.OS
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
⍝Done
r←Test_Load_015(stopFlag batchFlag);⎕TRAP
;dir;reg;qdmx
⍝ Try to load a package with an undefined Registry alias
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
reg←dir,'/reg'
F.MkDir reg
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]file://',reg
:Trap ##.Registry.ErrorNo
TC.LoadPackages'[DoesNotExist]Example-MyPackage-0.1.0'#.TEMP
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Unknown alias'{⍺≢(≢⍺)↑⍵}qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
⍝Done
r←Test_Load_020(stopFlag batchFlag);⎕TRAP;res;noOfRefs;pkgs;expected;qdmx
⍝ Exercise ⎕SE.Tatin.LoadPackages on three packages from a particular Registry with a typo on the second one.
⍝ Therefore only the first and third will get loaded.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
pkgs←'[localhost]aplteam-APLTreeUtils-6.0.10,[localhost]does-notExist-1.2.1,[localhost]aplteam-CompareSimple-3.0.2'
:Trap ##.Registry.ErrorNo
res←1 TC.LoadPackages pkgs'#.TEMP'
→T.FailsIf 1
:Else
qdmx←⎕DMX
→T.PassesIf∨/'Not found: does-notExist-1.2.1'⍷qdmx.EM
:EndTrap
r←T._OK
⍝Done
r←Test_Load_021(stopFlag batchFlag);⎕TRAP;res;noOfRefs;qdmx;pkgs;expected
⍝ Exercise ⎕SE.Tatin.LoadPackages on three packages without a particular Registry with the third one non-existent
⍝ Therefore only the first and the second one will get loaded.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
pkgs←'aplteam-APLTreeUtils-6.0.10,aplteam-CompareSimple-3.0.2,does-notExist-1.2.1'
res←1 TC.LoadPackages pkgs'#.TEMP'
→T.PassesIf 2=res
→T.PassesIf 2=≢#.TEMP.⎕NL⍳16
expected←'#._tatin.aplteam_APLTreeUtils_6_0_10.APLTreeUtils' '#._tatin.aplteam_CompareSimple_3_0_2.CompareSimple'
→T.PassesIf expected≡⍕¨#.TEMP.{⍎¨⎕NL ⍵}¯9
r←T._OK
⍝Done
r←Test_Load_022(stopFlag batchFlag);⎕TRAP;noOfRefs;pkgs;expected;res
⍝ Exercise ⎕SE.Tatin.LoadPackages on two packages with incomplete package IDs and also a typo on the third one.
⍝ Therefore only the first and the second one will get loaded.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
pkgs←'APLTreeUtils,notExist'
res←1 TC.LoadPackages pkgs'#.TEMP'
→T.PassesIf 1=res
→T.PassesIf 1=≢#.TEMP.⎕NL⍳16
expected←,⊂'#._tatin.aplteam_APLTreeUtils_7_0_0.APLTreeUtils'
→T.PassesIf expected≡⍕¨#.TEMP.{⍎¨⎕NL ⍵}¯9
r←T._OK
⍝Done
r←Test_Load_023(stopFlag batchFlag);⎕TRAP;res;noOfRefs;qdmx;pkgs
⍝ Exercise ⎕SE.Tatin.LoadPackages on two packages both of which do not exist
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
pkgs←'DoesNotExist,DoesAlsoNotExist'
res←1 TC.LoadPackages pkgs'#.TEMP'
→T.PassesIf 0=res
→T.PassesIf 0=#.⎕nc'TEMP'
r←T._OK
⍝Done
r←Test_Load_050(stopFlag batchFlag);⎕TRAP;toBeDeleted;rc;msg;zipFilename
;dir;src;body;cfg;reg;list;index;expected;zipped;src2;src3;refs
⍝ Publish two packages consisting of a single function with the second depending on the first, then load them.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
F.MkDir src2←src,'/Package_A'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←'Times←{' '  Package_B.Times ⍵' '}'
(⊂body)F.NPUT src2,'/Package_A.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Package_A' '1.0.0'
cfg.source←'Package_A.apln'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
src2 TC.Dependencies.Add'Example-Package_B-1.0.0'
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
F.MkDir src3←src,'/Package_B'
body←'r←Times y' '  r←×/ y'
(⊂body)F.NPUT src3,'/Times.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Package_B' '1.0.0'
cfg.source←'Times.aplf'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
refs←TC.LoadPackages(reg,'/Example-Package_A-1.0.0')#.TEMP
→T.GoToTidyUp 12≠#.TEMP.Package_A.Times 3 4
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Load_051(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted
;dir;src;body;cfg;reg;list;index;expected;zipped;src2;src3;refs
⍝ Publish 2 packages consisting of single fn with the second depending on the first.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
F.MkDir src2←src,'/package_A'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace Functions' 'Times←{' '×/⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src2,'/Package_A.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Package_A' '1.0.0'
cfg.source←'Package_A.apln'
cfg.api←'Functions'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
F.MkDir src3←src,'/Times'
body←'r←Times y' '  r←Package_A.Times y'
(⊂body)F.NPUT src3,'/Times.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Times_' '1.0.0'
cfg.source←'Times.aplf'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
src3 TC.Dependencies.Add'Example-Package_A-1.0.0'
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
refs←TC.LoadPackages(reg,'/Example-Times_-1.0.0')#.TEMP
→T.GoToTidyUp 12≠#.TEMP.Times_.Times 3 4
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Load_052(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted
;dir;src;body;cfg;reg;list;index;expected;zipped;src2;src3;refs
⍝ Publish three packages (two consisting of functions, one of a namespace) with dependencies, then load them
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
F.MkDir src2←src,'/package_A'
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace A' 'foo←{' '  ##.Times.Times ⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src2,'/A.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'A' '1.0.0'
cfg.source←'A.apln'
cfg.api←'A.foo'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
src2 TC.Dependencies.Add'Example-Times-1.0.0'
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
F.MkDir src3←src,'/B'
body←'r←Call arg' '  r←A arg'
(⊂body)F.NPUT src3,'/Call.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'B' '1.0.0'
cfg.source←'Call.aplf'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
src3 TC.Dependencies.Add'Example-A-1.0.0'
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
F.MkDir src3←src,'/Times'
body←'r←Times v' '  r←×/v'
(⊂body)F.NPUT src3,'/Times.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Times' '1.0.0'
cfg.source←'Times.aplf'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
refs←TC.LoadPackages(reg,'/Example-B-1.0.0')#.TEMP
→T.GoToTidyUp 12≠#.TEMP.B.Call 3 4
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Load_053(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted
;dir;src;body;cfg;reg;list;index;expected;zipped;src2;src3;refs
⍝ Publish three packages two of wich depend on each other (circle), then load from specific Registry.
⍝ "A" depends on "B" which depends on "C" while "C" depends on "B".
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
toBeDeleted←''
F.MkDir src2←src,'/package_A'
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace A' 'foo←{' '  ##.B.FB2 ⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src2,'/A.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'A_' '1.0.0'
cfg.source←'A.apln'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
src2 TC.Dependencies.Add'Example-B-1.0.0'
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
F.MkDir src3←src,'/B'
body←':Namespace B' 'FB1←{' '1+⍵' '}' 'FB2←{' '  ⍵+##.C.FC2 2' '}' ':EndNamespace'
(⊂body)F.NPUT src3,'/B.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'B' '1.0.0'
cfg.source←'B.apln'
cfg.api←'B'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
src3 TC.Dependencies.Add'Example-C-1.0.0'
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
F.MkDir src3←src,'/C'
body←':Namespace C' 'FC1←{' '⍵+3' '}' 'FC2←{' '  4+##.B.FB1 ⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src3,'/C.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'C' '1.0.0'
cfg.source←'C.apln'
cfg.api←'C'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
src3 TC.Dependencies.Add'Example-B-1.0.0'
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
refs←TC.LoadPackages(reg,'/Example-A_-1.0.0')#.TEMP
→T.GoToTidyUp 37≠#.TEMP.A_.A.foo 30
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Load_055(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;toBeDeleted
;dir;src;body;cfg;reg;list;index;expected;zipped;src2;src3;refs
⍝ Publish two packages (consisting of classes) with a dependency, then load from specific Registry.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
F.MkDir src2←src,'/MyClass/'
F.MkDir src3←src,'/MyBaseClass/'
{F.MkDir ⍵,'/source'}¨src2 src3
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Class MyClass:MyBaseClass' '∇r←Math arg' ':Access Public Shared' 'r←×/arg' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/source/MyClass.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'MyCompany' 'MyClass' '1.0.0'
cfg.source←'source'
cfg.api←'MyClass'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
src2 TC.Dependencies.Add'MyCompany-MyBaseClass-1.0.0'
(rc msg zipFilename)←TC.PublishPackage src2 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←':Class MyBaseClass' '∇r←Copyright' ':Access Public Shared' 'r←''Copyright This and that 2020''' '∇' ':EndClass'
(⊂body)F.NPUT src3,'/source/MyBaseClass.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.source←'source'
cfg.(group name version)←'MyCompany' 'MyBaseClass' '1.0.0'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
(rc msg zipFilename)←TC.PublishPackage src3 reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
refs←TC.LoadPackages(reg,'/MyCompany-MyClass-1.0.0')#.TEMP
→T.GoToTidyUp 12≠#.TEMP.MyClass.Math 3 4
→T.GoToTidyUp'Copyright This and that 2020'≢#.TEMP.MyClass.Copyright
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Load_056(stopFlag batchFlag);⎕TRAP;reg1;reg2;reg3;rc;msg;zipFilename
;dir;src;body;cfg;list;index;expected;zipped;src2;refs
⍝ Publish a package, then load it from any Registry by specifying just the package name (no group, no version, no Registry)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg1 reg2 reg3)←(⊂dir,'/'),¨'src' 'reg1' 'reg2' 'reg3'
F.MkDir src2←src,'/Math/Source'
F.MkDir reg1 reg2 reg3
TC.Reg.CreateRegistry¨reg1 reg2 reg3
TC.MyUserSettings.AddRegistry'[lOcal2]',reg1
TC.MyUserSettings.AddRegistry'[MycoMpany]',reg2
TC.MyUserSettings.AddRegistry'[PriVate]',reg3
body←':Class Math' '∇r←x Times y' ':Access Public Shared' 'r←x×y' '∇' ':EndClass'
(⊂body)F.NPUT src2,'/Math.aplc'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'MyDepartment' 'Math' '1.0.0'
cfg.source←'Math.aplc'
cfg.api←'Math'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg2
Assert 200=rc
refs←TC.LoadPackages'Math'#.TEMP
→T.GoToTidyUp 12≠3 #.TEMP.Math.Times 4
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[Local2]'
Assert TC.MyUserSettings.RemoveRegistry'[MYCOMPANy]'
Assert TC.MyUserSettings.RemoveRegistry'[private]'
F.DeleteFile zipFilename
⍝Done
r←Test_Load_057(stopFlag batchFlag);⎕TRAP;src0;rc;msg;zipFilename;toBeDeleted
;dir;body;cfg;list;index;expected;zipped;src2;refs;reg1;reg2;reg3;src1;src3
⍝ Publish several versions of a package to different Registries, then load all of them by package ID
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src0 src1 src2 src3)←(⊂dir,'/'),¨'src0' 'src1' 'src2' 'src3'
(reg1 reg2 reg3)←(⊂dir,'/'),¨'reg1' 'reg2' 'reg3'
src0←src0,'/Math/Source'
(src1 src2 src3)←{⍵,'/Math/Source'}¨src1 src2 src3
F.MkDir src0 src1 src2 src3
F.MkDir reg1 reg2 reg3
toBeDeleted←''
TC.Reg.CreateRegistry¨reg1 reg2 reg3
TC.MyUserSettings.AddRegistry'[MyCompany]',reg1
TC.MyUserSettings.AddRegistry'[Private]',reg2
TC.MyUserSettings.AddRegistry'[local2]',reg3
body←':Namespace Foo' '∇r←PI' 'r←3.14' '∇' ':EndNamespace'
(⊂body)F.NPUT src0,'/Foo.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'MyDepartment' 'Foo' '1.0.0'
cfg.source←'Foo.apln'
cfg.os_win←1
TC.WritePackageConfigFile src0 cfg
(rc msg zipFilename)←TC.PublishPackage src0 reg1
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←':Namespace Math' '∇r←x Times y' 'r←x×y' '∇' '∇r←Version' 'r←''1.0.0''' '∇' ':EndNamespace'
(⊂body)F.NPUT src1,'/Math.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'MyDepartment' 'Math' '1.0.0'
cfg.source←'Math.apln'
cfg.os_win←1
TC.WritePackageConfigFile src1 cfg
(rc msg zipFilename)←TC.PublishPackage src1 reg2
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←':Namespace Math' '∇r←x Times y' 'r←x×y' '∇' '∇r←Version' 'r←''3.0.0''' '∇' ':EndNamespace'
(⊂body)F.NPUT(src2,'/Math.apln')
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'MyDepartment' 'Math' '3.0.0'
cfg.source←'Math.apln'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg1
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←':Namespace Math' '∇r←x Times y' 'r←x×y' '∇' '∇r←Version' 'r←''2.0.0''' '∇' ':EndNamespace'
(⊂body)F.NPUT src3,'/Math.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'MyDepartment' 'Math' '2.0.0'
cfg.source←'Math.apln'
cfg.api←'Math'
cfg.os_win←1
TC.WritePackageConfigFile src3 cfg
(rc msg zipFilename)←TC.PublishPackage src3 reg3
toBeDeleted,←⊂zipFilename
Assert 200=rc
refs←TC.LoadPackages'MyDepartment-Math-2.0.0'#.TEMP
→T.GoToTidyUp 12≠3 #.TEMP.Math.Times 4
→T.GoToTidyUp'2.0.0'≢#.TEMP.Math.Version
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
Assert TC.MyUserSettings.RemoveRegistry'[MYCOMPANy]'
Assert TC.MyUserSettings.RemoveRegistry'[Private]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Load_060(stopFlag batchFlag);⎕TRAP;refs
⍝ Try to load a particular package without specifying a registry
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
refs←TC.LoadPackages'aplteam-APLProcess-0.2.7'#.TEMP
→T.GoToTidyUp 0≠≢#._tatin.aplteam_APLProcess_0_2_7.TatinVars.HOME
→T.GoToTidyUp'0.2.7'{⍺≢(≢⍺)↑⍵}2⊃#.TEMP.APLProcess.Version
r←T._OK
∆TidyUp:
⍝Done
r←Test_Load_061(stopFlag batchFlag);⎕TRAP;refs
⍝ Try to load a particular package without specifying a registry and without a patch number
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
refs←TC.LoadPackages'aplteam-APLProcess-0.2'#.TEMP
→T.GoToTidyUp'#._tatin.aplteam_APLProcess_0_2_12.APLProcess'≢⍕#.TEMP.APLProcess
r←T._OK
∆TidyUp:
⍝Done
r←Test_Load_062(stopFlag batchFlag);⎕TRAP;refs
⍝ Try to load a particular package without specifying a registry and without minor and patch number
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
refs←TC.LoadPackages'aplteam-APLProcess-0'#.TEMP
→T.GoToTidyUp'#._tatin.aplteam_APLProcess_0_5_1.APLProcess'≢⍕#.TEMP.APLProcess
r←T._OK
∆TidyUp:
⍝Done
r←Test_Load_063(stopFlag batchFlag);⎕TRAP;refs
⍝ Try to load a particular package by specifying just group and name (no Registry, no version)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
refs←TC.LoadPackages'aplteam-APLProcess'#.TEMP
→T.GoToTidyUp'#._tatin.aplteam_APLProcess_1_0_0.APLProcess'≢⍕#.TEMP.APLProcess
r←T._OK
∆TidyUp:
⍝Done
r←Test_Load_064(stopFlag batchFlag);⎕TRAP;refs
⍝ Try to load a particular package by specifying just the name (no Registry, no group, no version)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
refs←TC.LoadPackages'APLTreeUtils'#.TEMP
→T.GoToTidyUp'#._tatin.aplteam_APLTreeUtils_7_0_0.APLTreeUtils'≢⍕#.TEMP.APLTreeUtils
r←T._OK
∆TidyUp:
⍝Done
r←Test_Load_065(stopFlag batchFlag);⎕TRAP;refs;qdmx
⍝ Try to load a particular package by specifying just the name (no Registry, no group, no version) but it is found in 2 groups
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
:Trap ##.Registry.ErrorNo
refs←TC.LoadPackages'APLProcess'#.TEMP
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Package name found in 2 groups'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
⍝Done
r←Test_Load_070(stopFlag batchFlag);⎕TRAP;parms;msg;rc;en
;dir;src;zip;body;cfg;zipfile;refs
⍝ Build a package with a file asset and then load it
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src zip
body←':Namespace Constants' '∇r←PI' 'r←3.14' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/Constants.apln'
(⊂'My DLL')F.NPUT src,'/file.dll'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '0.1.0'
cfg.source←'Constants.apln'
cfg.api←'Constants'
cfg.assets←'file.dll'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
zipfile←TC.BuildPackage parms
refs←TC.LoadPackages('file://',zipfile)#.TEMP
Assert 3=#.TEMP.Constants.⎕NC'PI'
→T.GoToTidyUp 3.14≠#.TEMP.Constants.PI
→T.GoToTidyUp 0≥≢#.TEMP.Constants.##.TatinVars.URI
→T.GoToTidyUp 0≥≢#.TEMP.Constants.##.TatinVars.HOME
→T.GoToTidyUp~(⊂'file.dll')∊⊃¨,/¨1↓¨⎕NPARTS¨⊃0 ⎕NINFO⍠('Wildcard' 1)⊣#.TEMP.Constants.##.TatinVars.HOME,'/*'
r←T._OK
∆TidyUp:
(rc en msg)←F.RmDir dir
msg Assert 0=rc
(rc en msg)←F.RmDir'expand'F.NormalizePath #.TEMP.Constants.##.TatinVars.HOME,'/..'
msg Assert 0=rc
⍝Done
r←Test_Load_073(stopFlag batchFlag);⎕TRAP;assets;res;parms;msg;en;rc
;dir;src;zip;body;cfg;zipfile;refs
⍝ Build a package with several files in an asset folder and then load it
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
assets←src,'/assets'
F.MkDir src zip
F.MkDir assets
(⊂'first')F.NPUT assets,'/first.dll'
(⊂'second')F.NPUT assets,'/second.dll'
body←':Namespace Foo' '∇r←GetAssetList' 'r←⊃⎕NINFO⍠(''Wildcard'' 1)⊢##.TatinVars.HOME,''/assets/*''' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/Foo.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Foo' '0.1.0'
cfg.source←'Foo.apln'
cfg.api←'Foo'
cfg.assets←assets
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
zipfile←TC.BuildPackage parms
refs←TC.LoadPackages('file://',zipfile)#.TEMP
→T.GoToTidyUp 3≠#.TEMP.Foo.⎕NC'GetAssetList'
res←#.TEMP.Foo.GetAssetList
→T.GoToTidyUp~∧/res∘{∨/∨/¨⍵∘⍷¨⍺}¨'first.dll' 'second.dll'
r←T._OK
∆TidyUp:
(rc en msg)←F.RmDir dir
msg Assert 0=rc
F.DeleteFile zipfile
(rc en msg)←F.RmDir'expand'F.NormalizePath #.TEMP.Foo.##.TatinVars.HOME,'/..'
msg Assert 0=rc
⍝Done
r←Test_Load_074(stopFlag batchFlag);⎕TRAP;parms;msg;en;rc
;dir;src;zip;assets;body;cfg;zipfile;refs;res
⍝ Build a package with several files and folders as assets
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
assets←src,'/assets'
F.MkDir src zip
F.MkDir assets
(⊂'first')F.NPUT assets,'/first.dll'
(⊂'second')F.NPUT assets,'/second.dll'
(⊂'third')F.NPUT assets,'/third.dll'
body←'∇r←GetAssetList dummy' 'r←⊃⎕NINFO⍠(''Wildcard'' 1)⊢##.TatinVars.HOME,''/assets/*''' '∇'
body←,¨(⊂':Namespace Foo'),body,(⊂':EndNamespace')
(⊂body)F.NPUT src,'/Foo.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Foo' '0.1.0'
cfg.source←'Foo.apln'
cfg.api←'Foo'
cfg.assets←'assets'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
zipfile←TC.BuildPackage parms
refs←TC.LoadPackages('file://',zipfile)#.TEMP
→T.GoToTidyUp 3≠#.TEMP.Foo.⎕NC'GetAssetList'
res←#.TEMP.Foo.GetAssetList ⍬
→T.GoToTidyUp 3≠≢res
→T.GoToTidyUp~∧/res∘{∨/∨/¨⍵∘⍷¨⍺}¨'first.dll' 'second.dll' 'third.dll'
r←T._OK
∆TidyUp:
(rc en msg)←F.RmDir dir
msg Assert 0=rc
(rc en msg)←F.RmDir'expand'F.NormalizePath #.TEMP.Foo.##.TatinVars.HOME,'/..'
msg Assert 0=rc
⍝Done
r←Test_Load_080(stopFlag batchFlag);⎕TRAP;refs;html;ns;expected;rc;en;msg
⍝ Load a package that has several dependencies (local & remote) into non-existing #.TEMP.Foo
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
refs←TC.LoadPackages(∆TEMP_TEST_DATA,'/Tatin/Registry/aplteam-MarkAPL-11.0.3')'#.TEMP.Foo'
→T.GoToTidyUp 0=≢refs
(html ns)←#.TEMP.Foo.MarkAPL.Markdown2HTML'A Para' '' '* This' '* That'
expected←'<p>A Para</p>' '<ul>' '<li>This</li>' '<li>That</li>' '</ul>'
→T.GoToTidyUp expected≢html
→T.GoToTidyUp~1<≢#._tatin.⎕NL 9
→T.GoToTidyUp~0<≢#.TEMP.Foo.MarkAPL.##.TatinVars.ASSETS
r←T._OK
∆TidyUp:
(rc en msg)←F.RmDir'expand'F.NormalizePath #.TEMP.Foo.MarkAPL.##.TatinVars.HOME,'/..'
msg Assert 0=rc
⍝Done
r←Test_Load_081(stopFlag batchFlag);⎕TRAP;refs;html;ns;expected;msg;rc;en
⍝ Load a package that has several dependencies (local & remote) into non-existing ⎕SE.TEMP.Foo
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
⎕SE.⎕SHADOW'TEMP' ⋄ 'TEMP'⎕SE.⎕NS''    ⍝ Used to load stuff into
refs←TC.LoadPackages (∆TEMP_TEST_DATA,'/Tatin/Registry/aplteam-MarkAPL-11.0.3') '⎕SE.TEMP.Foo'
→T.GoToTidyUp 0=≢refs
(html ns)←⎕SE.TEMP.Foo.MarkAPL.Markdown2HTML'A Para' '' '* This' '* That'
expected←'<p>A Para</p>' '<ul>' '<li>This</li>' '<li>That</li>' '</ul>'
→T.GoToTidyUp expected≢html
→T.GoToTidyUp~1<≢⎕SE._tatin.⎕NL 9
→T.GoToTidyUp~0<≢⎕SE.TEMP.Foo.MarkAPL.##.TatinVars.ASSETS
r←T._OK
∆TidyUp:
(rc en msg)←F.RmDir'expand'F.NormalizePath ⎕SE.TEMP.Foo.MarkAPL.##.TatinVars.HOME,'/..'
msg Assert 0=rc
⍝Done
r←Test_Load_082(stopFlag batchFlag);⎕TRAP;expected
⍝ Load a package by specifying just group, name and major number; should load a beta version
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
{}TC.LoadPackages'[localhost]example-JustOneBeta-0' '#.TEMP'
expected←'JustOneBeta' '0.1.0-beta-1+18' '2020-01-10'
→T.GoToTidyUp expected≢#.TEMP.JustOneBeta.Version
r←T._OK
∆TidyUp:
⍝Done
r←Test_Load_083(stopFlag batchFlag);⎕TRAP
⍝ Load a package by specifying just group, name and major number; should NOT load a beta version
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
{}1 TC.LoadPackages'[localhost]example-JustOneBeta-0' '#.TEMP'
→T.GoToTidyUp 0<≢#.TEMP.⎕nl⍳16
r←T._OK
∆TidyUp:
⍝Done
r←Test_Load_084(stopFlag batchFlag);⎕TRAP;dir;src;zip;body;cfg;zipfile;parms
⍝ Load a package that has more than just two or less hyphens (was once a bug)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src zip
body←':Namespace Constants' '∇r←PI' 'r←3.14' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/Constants.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '1.2.3-test-1-a'
cfg.source←'Constants.apln'
cfg.api←'Constants'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
zipfile←TC.BuildPackage parms
{}TC.LoadPackages('file://',zipfile)#.TEMP
Assert 3=#.TEMP.Constants.⎕NC'PI'
→T.PassesIf 3.14=#.TEMP.Constants.PI
→T.PassesIf 0<≢#.TEMP.Constants.##.TatinVars.URI
→T.PassesIf 0=≢#.TEMP.Constants.##.TatinVars.HOME
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Load_085(stopFlag batchFlag);⎕TRAP;tempFolder;res
⍝ Load dependencies were the build list has aliases defined. Was once a bug
⍝ Crashed CompileBuildList because aliase confused it
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempFolder←(F.GetTempSubDir⊃⎕SI),'/'
tempFolder ⎕NCOPY⍠('Wildcard' 1)⊣∆TEMP_TEST_DATA,'/Aliase3/*'
res←TC.LoadDependencies tempFolder #.TEMP
→T.PassesIf 7=≢res
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir tempFolder
⍝Done
r←Test_Load_086(stopFlag batchFlag);⎕TRAP;tempFolder;qdmx;expected
⍝ Load dependencies were the dependency file and the build list contradict each other
⍝ Note that in this particular test case the timestamp doesn't allow spotting the problem
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempFolder←(F.GetTempSubDir⊃⎕SI),'/'
tempFolder ⎕NCOPY⍠('Wildcard' 1)('PreserveAttributes' 1)⊣∆TEMP_TEST_DATA,'/InconsistentDefinitionFiles/*'
:Trap ##.Registry.ErrorNo
TC.LoadDependencies tempFolder #.TEMP
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
expected←'The build list in' 'refers to a package that is not installed:' 'aplteam-Tester2-3.5.0'
→T.GoToTidyUp 0≠+/expected{~∨/⍺⍷⍵}¨⊂qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir tempFolder
⍝Done
r←Test_Load_087(stopFlag batchFlag);⎕TRAP;tempFolder;qdmx
⍝ Load dependencies were the installed packages dont' fit the dependency list; was once bug
⍝ This can happen by updating the installed packages in a folder and then checking out another branch
⍝ of the project: the packages will survive (because they are .gitignored) but the dependency list
⍝ will go back to an older version, referring potentially to packages that are now only available in
⍝ a later version.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempFolder←(F.GetTempSubDir⊃⎕SI),'/'
tempFolder ⎕NCOPY⍠('Wildcard' 1)⊣∆TEMP_TEST_DATA,'/PksDontFitBuildList/*'
:Trap ##.Registry.ErrorNo
TC.LoadDependencies tempFolder #.TEMP
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp~∧/∨/¨'The build list in' 'refers to packages that are not installed:'⍷¨⊂qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir tempFolder
⍝Done
r←Test_Load_088(stopFlag batchFlag);⎕TRAP;tempFolder;qdmx;expected
⍝ Load dependencies were the installed packages dont' fit the dependency list; was once bug
⍝ This can happen by updating the installed packages in a folder and then checking out another branch
⍝ of the project: the packages will survive (because they are .gitignored) but the dependency list
⍝ will go back to an older version, referring potentially to packages that are now only available in
⍝ a later version.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempFolder←(F.GetTempSubDir⊃⎕SI),'/'
tempFolder ⎕NCOPY⍠('Wildcard' 1)('PreserveAttributes' 1)⊣∆TEMP_TEST_DATA,'/InconsistentDefinitionFiles/*'
:Trap ##.Registry.ErrorNo
TC.LoadDependencies tempFolder #.TEMP
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
expected←'The build list in' 'refers to a package that is not installed:' 'aplteam-Tester2-3.5.0'
→T.GoToTidyUp~∧/expected{∨/⍺⍷⍵}¨⊂qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir tempFolder
⍝Done
r←Test_Load_089(stopFlag batchFlag);⎕TRAP;dir;src;zip;body;cfg;zipfile;parms;path2Namespace
⍝ Load a package into a sub-namespace of the current namespace
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'Foo'#.TEMP.⎕NS''
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src zip
body←':Namespace Constants' '∇r←PI' 'r←3.14' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/Constants.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '1.2.3-test-1-a'
cfg.source←'Constants.apln'
cfg.api←'Constants'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
path2Namespace←⍕TC
zipfile←TC.BuildPackage parms
:With #.TEMP
{}TC.LoadPackages('file://',zipfile)#.TEMP
:EndWith
Assert 3=#.TEMP.Constants.⎕NC'PI'
→T.PassesIf 3.14=#.TEMP.Constants.PI
→T.PassesIf 0<≢#.TEMP.Constants.##.TatinVars.URI
→T.PassesIf 0=≢#.TEMP.Constants.##.TatinVars.HOME
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Load_090(stopFlag batchFlag);⎕TRAP;html;ns;expected;qdmx
⍝ Try to load a package as a ZIP file via HTTP - not supported
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
:Trap ##.Registry.ErrorNo
TC.LoadPackages'https://github.com/aplteam/ZipArchive/releases/download/v1.0.0/aplteam-ZipArchive-1.0.0.zip' '#.TEMP'
→T.FailsIf 1
:Else
qdmx←⎕DMX
→T.PassesIf∨/'ZIP files cannot be'⍷qdmx.EM
:EndTrap
r←T._OK
⍝Done
r←Test_Load_091(stopFlag batchFlag);⎕TRAP
⍝ Try to load a package with an alias
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
{}TC.LoadPackages'[tatin]A@APLTreeUtils2' '#.TEMP'
→T.PassesIf 3.14=#.TEMP.A.ToNum'3.14'
r←T._OK
⍝Done
r←Test_Load_100(stopFlag batchFlag);⎕TRAP
⍝ Load two packages and check minimal version selection with aliases used
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
{}TC.LoadPackages'[localhost]aplteam-APLTreeUtils2' '#.TEMP'
→T.GoToTidyUp'1.2.0'≢{⍵↑⍨¯1+⍵⍳'+'}2⊃#.TEMP.APLTreeUtils2.Version
{}TC.LoadPackages'[localhost]aplteam-APLGit' '#.TEMP'
→T.GoToTidyUp'1.2.0'≢{⍵↑⍨¯1+⍵⍳'+'}2⊃#.TEMP.APLTreeUtils2.Version
→T.GoToTidyUp'1.1.1'≢{⍵↑⍨¯1+⍵⍳'+'}2⊃#.TEMP.APLGit.##.A.Version   ⍝ Because the packages where laoded rather than installed: minimal version selection is only done for each package independently
r←T._OK
∆TidyUp:
⍝Done
r←Test_Log_001(stopFlag batchFlag);⎕TRAP
⍝ Simulates 2021 11 15: no data is available for October
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
TS.Logs.ProcessLogFile ∆LOG_PATH(2021 11 15)
→T.PassesIf 0=⎕NEXISTS ∆LOG_PATH,'usage-data-2021-11.csv'
→T.PassesIf 0=⎕NEXISTS ∆LOG_PATH,'usage-data-2021-11.zip'
→T.PassesIf 10=⊃⊃(//)⎕VFI ⎕TC~⍨⊃⎕NGET ∆LOG_PATH,'month'
→T.PassesIf 2021=⊃⊃(//)⎕VFI ⎕TC~⍨⊃⎕NGET ∆LOG_PATH,'year'
r←T._OK
⍝Done
r←Test_Log_002(stopFlag batchFlag);⎕TRAP
⍝ Simulates 2021 12 31: there is data available for November
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
TS.Logs.ProcessLogFile ∆LOG_PATH(2021 12 31)
→T.PassesIf 1=⎕NEXISTS ∆LOG_PATH,'usage-data-2021.csv'
→T.PassesIf 1=⎕NEXISTS ∆LOG_PATH,'usage-data-2021.zip'
r←T._OK
⍝Done
r←Test_Log_003(stopFlag batchFlag);⎕TRAP
⍝ Simulates 2022 01 01: creates data for the whole of 2021 but nothing yet for 2022
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
TS.Logs.ProcessLogFile ∆LOG_PATH(2022 1 1)
→T.PassesIf 0=≢⊃F.Dir ∆LOG_PATH,'usage-data-2021-*'
→T.PassesIf 1=⎕NEXISTS ∆LOG_PATH,'usage-data-2021.csv'
→T.PassesIf 1=⎕NEXISTS ∆LOG_PATH,'usage-data-2021.zip'
r←T._OK
⍝Done
r←Test_Log_004(stopFlag batchFlag);⎕TRAP;data
⍝ Simulates 2022 02 15: creates data for 2022-01 and leaves data from 2021 alone
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
TS.Logs.ProcessLogFile ∆LOG_PATH(2022 2 15)
→T.PassesIf 0=≢⊃F.Dir ∆LOG_PATH,'usage-data-2021-*'
→T.PassesIf 1=⎕NEXISTS ∆LOG_PATH,'usage-data-2021.csv'
→T.PassesIf 1=⎕NEXISTS ∆LOG_PATH,'usage-data-2021.zip'
data←⎕CSV ∆LOG_PATH,'usage-data-2021.csv'
→T.PassesIf~(⊂'Must-NotShow')∊⊃¨{⍺,'.',⍵}/¨↓2↑[2]1↓data ⍝ Because that is flagged as a test case
r←T._OK
⍝Done
r←Test_Log_051(stopFlag batchFlag);⎕TRAP;list;folder
⍝ Exercise the "Download" method with a filename
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←TC.UsageDataGetList'[localhost]'
→T.PassesIf 0<≢list
folder←TC.UsageDataGetFiles'[localhost]'list
→T.PassesIf 0<≢folder
→T.PassesIf F.IsDir folder
list←F.ListFiles folder
→T.PassesIf 0<≢list
→T.PassesIf(,⊂'.zip')≡∪¯4↑¨list
r←T._OK
⍝Done
r←Test_Log_100(stopFlag batchFlag);⎕TRAP;tempDir;msg;rc;L;list;expected
⍝ Uses data from mid 2022 until 2024-03 to simulate turn of year
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir'-Log/'
rc←'Create!'F.CheckPath tempDir
Assert rc
tempDir ⎕NCOPY ∆TEMP_TEST_DATA,'/LogFile/app-log.txt'
L←##.Server.Logs
L.ProcessLogFile tempDir(2024 3 4)
list←{⊃,/1↓⎕NPARTS ⍵}¨F.ListFiles tempDir,'usage-data-20*.csv'
→T.GoToTidyUp 3≠≢list
expected←'usage-data-2022.csv' 'usage-data-2023.csv' 'usage-data-2024-02.csv'
→T.GoToTidyUp~list ∆LazyMatch expected
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_Misc_001(stopFlag batchFlag);⎕TRAP;tags
⍝ Request all tags
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tags←Reg.GetTags ∆TEMP_SERVER_FOLDER
→T.PassesIf 0<≢tags
→T.PassesIf 2=|≡tags
→T.PassesIf 2=⍴⍴tags
r←T._OK
⍝Done
r←Test_Misc_002(stopFlag batchFlag);⎕TRAP;qdmx
;dir;noOfBytes;deps
⍝ Create a dependency file, add and remove dependencies from it and finally delete it.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
F.MkDir dir
TC.MyUserSettings.AddRegistry'[Dyalog]https://packages.dyalog.com/'
TC.MyUserSettings.AddRegistry'[MyCompany]https://packages.my-company.com'
dir D.Add'[tatin]/aplteam-APLTreeUtils-5.0.0'
deps←1 D.Get dir
→T.GoToTidyUp deps≢,⊂((TC.MyUserSettings.GetRegistry'[tatin]').uri),'aplteam-APLTreeUtils-5.0.0'
dir D.Add'[DYALOG]dyalog-Conga-3.2.0'
deps←1 D.Get dir
→T.GoToTidyUp deps≢((TC.MyUserSettings.GetRegistry¨'[tatin]' '[dyalog]').uri),¨'aplteam-APLTreeUtils-5.0.0' 'dyalog-Conga-3.2.0'
dir D.Add'[tatin]aplteam-FilesAndDirs-3.4.9' ';[Foo]C:/Temp/MyGroup-MyPkg-0.1.0' '[tatin]aplteam-APLTreeUtils-4.9.0'
deps←1 D.Get dir
→T.GoToTidyUp 4≠≢deps
(⊂'[tatin]aplteam-OS-2.3.0')F.NPUT(dir,'/',D.DEP_NAME)2          ⍝ Make sure that the file contains an alias
deps←1 D.Get dir
→T.GoToTidyUp 5≠≢deps
→T.GoToTidyUp~∧/'https'{⍺∘≡¨(≢⍺)↑¨⍵}deps
deps←D.Get dir
→T.GoToTidyUp 5≠≢deps
dir D.Add'[tatin]R@carlisle-Rumba-2.3.0'                         ⍝ Make sure that the file contains an alias together with Registry alias
deps←1 D.Get dir
→T.GoToTidyUp 6≠≢deps
→T.GoToTidyUp~∧/∨/¨'https'∘⍷¨deps
:Trap ##.Registry.ErrorNo
dir D.Add'R@[tatin]carlisle-Rumba-2.3.0'                     ⍝ Invalid alias
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Invalid dependency'≢qdmx.EM
:EndTrap
dir D.Add'http://tatin.aplteam.com/R@carlisle-Rumba2-1.0.0'      ⍝ Make sure that the file contains an alias but no Registry alias
deps←1 D.Get dir
→T.GoToTidyUp 7≠≢deps
→T.GoToTidyUp~∧/{≢'https*://'⎕S 0⊣⍵}¨deps
F.MkDir dir,'/MyFolder'
dir D.Add dir,'/MyFolder/example-packageName-1.2.3'
deps←D.Get dir
→T.GoToTidyUp 8≠≢deps
dir D.Add dir,'/MyFolder/example-packageName-1.2.3.zip'
deps←D.Get dir
→T.GoToTidyUp 8≠≢deps
r←T._OK
∆TidyUp:
Assert TC.MyUserSettings.RemoveRegistry'[Dyalog]'
Assert TC.MyUserSettings.RemoveRegistry'[MyCompany]'
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Misc_003(stopFlag batchFlag);⎕TRAP
;dir;cfg;cfgFilename;cfg2
⍝ Exercise the `InitialisePackage` method
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'MyPackage'
cfg.version←'0.1.0'
0 TC.WritePackageConfigFile dir cfg
cfgFilename←dir,'/',TC.CFG_Name
:Trap ##.Registry.ErrorNo
TC.InitialisePackage dir
→T.GoToTidyUp 1
:Else
→T.GoToTidyUp 0=∨/'already exists'⍷1⊃⎕DM
:EndTrap
F.DeleteFile cfgFilename
{}TC.InitialisePackage dir
→T.GoToTidyUp 0=F.Exists cfgFilename
→T.GoToTidyUp 0=F.Exists dir,'/',cfg.source
F.DeleteFile cfgFilename
cfg.group←'aplteam'
cfg.name←'MyPackage'
cfg.version←'1.2.0'
cfg.source←'APLSource/'
{}cfg TC.InitialisePackage dir
cfg2←TC.ReadPackageConfigFile dir
→T.GoToTidyUp 0=F.Exists cfgFilename
→T.GoToTidyUp 0=F.Exists dir,'/',cfg.source
→T.GoToTidyUp cfg2.(group name version)≢'aplteam' 'MyPackage' '1.2.0'
→T.GoToTidyUp cfg2.source≢'APLSource/'
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Misc_004(stopFlag batchFlag);⎕TRAP
⍝ Exercise the `IsValidPackageID*` functions
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
⍝ ------------- IsValidPackageID_Complete
→T.PassesIf Reg.IsValidPackageID_Complete'group-name-1.0.0'
→T.PassesIf Reg.IsValidPackageID_Complete'Group-Name-1.0.0'
→T.PassesIf Reg.IsValidPackageID_Complete'Group-Na_me-1.0.0'
→T.PassesIf Reg.IsValidPackageID_Complete'Group-Name2-1.0.0'
→T.PassesIf Reg.IsValidPackageID_Complete'Group-Name2-1.0.0-beta'
→T.PassesIf Reg.IsValidPackageID_Complete'Group-Name2-1.0.0-beta-3'
→T.PassesIf Reg.IsValidPackageID_Complete'Group-Name2-1.0.0-beta.1'
→T.FailsIf Reg.IsValidPackageID_Complete'_Group-Name-1.0.0'
→T.FailsIf Reg.IsValidPackageID_Complete'Group-_Name-1.0.0'
→T.FailsIf Reg.IsValidPackageID_Complete'Group--Name-1.0.0'
→T.FailsIf Reg.IsValidPackageID_Complete'GroupName-1.0.0'
→T.FailsIf Reg.IsValidPackageID_Complete'Group-Name-1-0-0'
→T.FailsIf Reg.IsValidPackageID_Complete'A Group-Name-1.0.0'
→T.FailsIf Reg.IsValidPackageID_Complete'Group-Name-1.0.0 A'
→T.FailsIf Reg.IsValidPackageID_Complete'GroupName-1.0.0∆'
⍝ ------------- IsValidPackageID_WithoutVersionNo
→T.PassesIf Reg.IsValidPackageID_WithoutVersionNo'group-name'
→T.PassesIf Reg.IsValidPackageID_WithoutVersionNo'Group-Name'
→T.PassesIf Reg.IsValidPackageID_WithoutVersionNo'Group-Na_me'
→T.PassesIf Reg.IsValidPackageID_WithoutVersionNo'Group-Name2'
→T.FailsIf Reg.IsValidPackageID_WithoutVersionNo'_Group-Name'
→T.FailsIf Reg.IsValidPackageID_WithoutVersionNo'Group-_Name'
→T.FailsIf Reg.IsValidPackageID_WithoutVersionNo'Group--Name'
→T.FailsIf Reg.IsValidPackageID_WithoutVersionNo'GroupName'
→T.FailsIf Reg.IsValidPackageID_WithoutVersionNo'A GroupName'
→T.FailsIf Reg.IsValidPackageID_WithoutVersionNo'Group-Name A'
→T.FailsIf Reg.IsValidPackageID_WithoutVersionNo'Group-Name2-1'
→T.FailsIf Reg.IsValidPackageID_WithoutVersionNo'Group-Name2-1.2.3'
⍝ ------------- IsValidPackageID_WithMajorNo
→T.PassesIf Reg.IsValidPackageID_WithMajorNo'group-name-1'
→T.PassesIf Reg.IsValidPackageID_WithMajorNo'Group-Name-23'
→T.FailsIf Reg.IsValidPackageID_WithMajorNo'Group-Name'
→T.FailsIf Reg.IsValidPackageID_WithMajorNo'Group-Name-1.2.3'
r←T._OK
⍝Done
r←Test_Misc_005(stopFlag batchFlag);⎕TRAP
⍝ Exercise all constants used somewhere
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
→T.PassesIf(⎕UCS 10)≡TC.LF
→T.PassesIf(⎕UCS 13)≡##.Server.CR
→T.PassesIf(⎕UCS 13 10)≡##.Server.NL
r←T._OK
⍝Done
r←Test_Misc_006(stopFlag batchFlag);⎕TRAP
⍝ Exercise all sorts of functions
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
→T.PassesIf(⎕UCS 10)≡TC.LF
→T.PassesIf(⎕UCS 13)≡##.Server.CR
→T.PassesIf(⎕UCS 13 10)≡##.Server.NL
→T.PassesIf 0<≢##.Registry.Create_UUID ⍬
r←T._OK
⍝Done
r←Test_Misc_007(stopFlag batchFlag);⎕TRAP;list
⍝ List all groups of a given Registry
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←Reg.ListGroups ∆TEMP_SERVER_FOLDER
→T.PassesIf 0<≢list
→T.PassesIf(⊂'aplteam')∊list
r←T._OK
⍝Done
r←Test_Misc_008(stopFlag batchFlag);⎕TRAP;text;version;bool;row;date
⍝ Checks whether the file ReleaseNotes.md contains information regarding the current version
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
text←⊃TC.F.NGET(##.CiderConfig.HOME,'/docs/ReleaseNotes.md')1
version←{⍵↑⍨¯1+⌊/⍵⍳'-+'}2⊃TC.Version
bool←∨/¨version∘⍷¨text             ⍝ Error? The release notes ...
Assert∨/bool                       ⍝ ... don't know about this version!
row←⌊/⍸bool
→T.PassesIf 0<≢row
date←5⊃' '(≠⊆⊢)row⊃text
→T.PassesIf date≡3⊃TC.Version      ⍝ Error? Verion's date and the date in the release notes dot not match!
r←T._OK
⍝Done
r←Test_Misc_009(stopFlag batchFlag);⎕TRAP;result
⍝ Exercise the "GetServerVersion" function
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
result←TC.GetServerVersion'[tatin]'
→T.PassesIf 0<≢result
→T.PassesIf'Tatin'≡1⊃result
→T.PassesIf 3=≢result
r←T._OK
⍝Done
r←Test_Misc_010(stopFlag batchFlag);⎕TRAP;dir;src;reg;body;cfg;rc;msg;zipFilename;toBeDeleted;instance;en
⍝ Access assets via HOME from the instance of a class
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←''
body,←'∇r←PI' ':Access Public Instance' 'home←(⊃⊃⎕CLASS ⎕THIS).##.TatinVars.HOME' 'filename←home,''/pi.txt''' 'r←⊃(//)⎕VFI(⊃⎕NGET filename)~⎕TC' '∇'
body,←'∇r←AssetFolder' ':Access Public Shared' 'r←##.TatinVars.HOME' '∇'
body←(⊂':Class MyClass'),body,(⊂':EndClass')
(⊂body)F.NPUT src,'/AssetAccess.aplc'
(⊂,⊂'3.14')F.NPUT src,'/pi.txt'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'AssetAccess' '1.0.0'
cfg.source←'AssetAccess.aplc'
cfg.assets←'pi.txt'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
(rc msg zipFilename)←TC.PublishPackage src reg
toBeDeleted,←⊂zipFilename
Assert 200=rc
{}TC.LoadPackages(reg,'/Example-AssetAccess-1.0.0')#.TEMP
instance←⎕NEW #.TEMP.AssetAccess.MyClass
→T.GoToTidyUp 3.14≠instance.PI
→T.GoToTidyUp'Example-AssetAccess-1.0.0'≢⊃,/1↓⎕NPARTS #.TEMP.AssetAccess.MyClass.AssetFolder
r←T._OK
∆TidyUp:
(rc en msg)←F.RmDir dir
msg Assert 0=rc
(rc en msg)←F.RmDir'expand'F.NormalizePath #.TEMP.AssetAccess.TatinVars.HOME,'/..'
msg Assert 0=rc
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Misc_011(stopFlag batchFlag);⎕TRAP;credentials;S;res;expected
⍝ Exercise the `GetCredentialReport` function
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
S←##.Server
credentials←0 2⍴''
res←S.GetCredentialReport↓⍉credentials
expected←,⊂'<p>Anybody can publish anything.</p>'
→T.PassesIf expected≡res
credentials←0 2⍴'' ''
credentials⍪←'group1' 'api-key-1'
credentials⍪←'group2' 'api-key-2'
res←S.GetCredentialReport↓⍉credentials
expected←,⊂'<p>All groups require a specific API key.</p>'
→T.PassesIf expected≡res
credentials⍪←'*' 'api-key-3'
res←S.GetCredentialReport↓⍉credentials
expected←'<p>These groups require a specific API key:</p>' '<ul>' '<li><code>group1</code></li>' '<li><code>group2</code></li>' '</ul>'
expected,←⊂'<p>All other groups require a generic API key.</p>'
→T.PassesIf expected≡res
credentials←1 2⍴'*' ''
res←S.GetCredentialReport↓⍉credentials
expected←,⊂'<p>Anybody can publish anything.</p>'
→T.PassesIf expected≡res
credentials←0 2⍴'' ''
credentials⍪←'group1' 'api-key-1'
credentials⍪←'group2' 'api-key-2'
credentials⍪←'group3' ''
res←S.GetCredentialReport↓⍉credentials
expected←'<p>These groups do <b>not</b> require an API key:</p>' '<ul>' '<li><code>group3</code></li>' '</ul>'
expected,←'<p>These groups require a specific API key:</p>' '<ul>' '<li><code>group1</code></li>' '<li><code>group2</code></li>' '</ul>'
→T.PassesIf expected≡res
credentials←0 2⍴'' ''
credentials⍪←'group1' 'api-key-1'
credentials⍪←'group2' 'api-key-2'
credentials⍪←'*' ''
res←S.GetCredentialReport↓⍉credentials
expected←'<p>These groups require a specific API key:</p>' '<ul>' '<li><code>group1</code></li>' '<li><code>group2</code></li>' '</ul>' '<p>Anybody can publish any other group.</p>'
→T.PassesIf expected≡res
credentials←0 2⍴'' ''
credentials⍪←'group1' 'api-key-1'
credentials⍪←'group2' 'api-key-2'
credentials⍪←'group3' ''
credentials⍪←'*' ''
res←S.GetCredentialReport↓⍉credentials
expected←'<p>These groups do <b>not</b> require an API key:</p>' '<ul>' '<li><code>group3</code></li>' '</ul>'
expected,←'<p>These groups require a specific API key:</p>' '<ul>' '<li><code>group1</code></li>' '<li><code>group2</code></li>' '</ul>' '<p>Anybody can publish any other group.</p>'
→T.PassesIf expected≡res
r←T._OK
⍝Done
r←Test_Misc_012(stopFlag batchFlag);⎕TRAP;dir;src;zip;serverPath;body;cfg;packageID;rc;msg;zipFilename;list2;list1
⍝ Delete a single package with `DeletePackages` on local Tatin server
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'zip'
F.MkDir src zip
serverPath←'TestServer/Registry'
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'test'
cfg.name←'Package_A'
cfg.version←'0.1.0'
cfg.source←'Test.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
packageID←'test-Package_A-0.1.0'
(rc msg zipFilename)←TC.PublishPackage src'[local]'
→T.GoToTidyUp 200≠rc
→T.GoToTidyUp 0≠≢msg
list1←({⍵.aggregate←0 ⋄ ⍵}⎕NS'')TC.ListPackages'[local]'
(rc msg)←TC.DeletePackages'[local]' packageID
Assert 200=rc
list2←({⍵.aggregate←0 ⋄ ⍵}⎕NS'')TC.ListPackages'[local]'
→T.GoToTidyUp'test-Package_A-0.1.0'≢∊list1[;1]~list2[;1]
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert 0=⊃F.RmDir serverPath,'/',packageID
F.DeleteFile(739⌶0),'/',packageID,'.zip'
⍝Done
r←Test_Misc_013(stopFlag batchFlag);⎕TRAP;exec
⍝ Exercise `ValidateVersion`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
→T.PassesIf 0=≢TC.ValidateVersion'1.3.4'
→T.PassesIf 0=≢TC.ValidateVersion'100.3.4'
→T.PassesIf 0=≢TC.ValidateVersion'1.300.4'
→T.PassesIf 0=≢TC.ValidateVersion'1.3.400'
→T.PassesIf 0=≢TC.ValidateVersion'1.3.4-Beta1'
→T.PassesIf 0=≢TC.ValidateVersion'1.3.4-Beta1+123'
→T.PassesIf 0=≢TC.ValidateVersion'1.3.4-Beta-1+123'
→T.PassesIf 0=≢TC.ValidateVersion'1.3.4-Beta_1+123'
→T.PassesIf 0=≢TC.ValidateVersion'1.3.4-That-particular-fix+123'
exec←{0::1 ⋄ 0⊣TC.ValidateVersion ⍵}
→T.PassesIf exec'1.3'
→T.PassesIf exec'1.2.3.4.5'
→T.PassesIf exec'1.2.3-betaß'                      ⍝ Not ANSI
r←T._OK
⍝Done
r←Test_Misc_014(stopFlag batchFlag);⎕TRAP;G;filename;res;expected;filename2
⍝ Exercise `ProcessCredentials` locally
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
G←⎕NS''
G.RegistryPath←##.FilesAndDirs.GetTempSubDir''
filename←G.RegistryPath,'/Credentials.txt'
filename2←G.RegistryPath,'/Credentials.csv'
G←##.Server.ProcessCredentials G
→T.GoToTidyUp 0≠≢G.Credentials
res←##.Server.GetCredentialReport↓⍉G.Credentials[;1 2]
→T.GoToTidyUp'<p>Anybody can publish anything.</p>'≢∊res
⎕NDELETE filename2
(⊂'*=')##.FilesAndDirs.NPUT filename 1
G←##.Server.ProcessCredentials G
→T.GoToTidyUp 0=≢G.Credentials
res←##.Server.GetCredentialReport↓⍉G.Credentials[;1 2]
→T.GoToTidyUp'<p>Anybody can publish anything.</p>'≢∊res
⎕NDELETE filename2
(⊂'abc=xyz')##.FilesAndDirs.NPUT filename 1
G←##.Server.ProcessCredentials G
→T.GoToTidyUp 1≠≢G.Credentials
res←##.Server.GetCredentialReport↓⍉G.Credentials[;1 2]
→T.GoToTidyUp'<p>All groups require a specific API key.</p>'≢∊res
⎕NDELETE filename2
(⊂'abc=xyz' 'ABC,XYZ')##.FilesAndDirs.NPUT filename 1
G←##.Server.ProcessCredentials G
→T.GoToTidyUp 2≠≢G.Credentials
res←##.Server.GetCredentialReport↓⍉G.Credentials[;1 2]
→T.GoToTidyUp'<p>All groups require a specific API key.</p>'≢∊res
⎕NDELETE filename2
(⊂'abc=xyz' '*=')##.FilesAndDirs.NPUT filename 1
G←##.Server.ProcessCredentials G
→T.GoToTidyUp 2≠≢G.Credentials
res←##.Server.GetCredentialReport↓⍉G.Credentials[;1 2]
expected←''
expected,←⊂'<p>These groups require a specific API key:</p>'
expected,←⊂'<ul>'
expected,←⊂'<li><code>abc</code></li>'
expected,←⊂'</ul>'
expected,←⊂'<p>Anybody can publish any other group.</p>'
→T.GoToTidyUp expected≢res
⎕NDELETE filename2
(⊂'abc=xyz' 'foo=' '*=other')##.FilesAndDirs.NPUT filename 1
G←##.Server.ProcessCredentials G
→T.GoToTidyUp 3≠≢G.Credentials
res←##.Server.GetCredentialReport ↓⍉G.Credentials[;1 2]
expected←''
expected,←⊂'<p>These groups do <b>not</b> require an API key:</p>'
expected,←⊂'<ul>'
expected,←⊂'<li><code>foo</code></li>'
expected,←⊂'</ul>'
expected,←⊂'<p>These groups require a specific API key:</p>'
expected,←⊂'<ul>'
expected,←⊂'<li><code>abc</code></li>'
expected,←⊂'</ul>'
expected,←⊂'<p>Anybody can publish any other group.</p>'
→T.GoToTidyUp expected≢res
⎕NDELETE filename2
r←T._OK
∆TidyUp:
⍝Done
r←Test_Misc_015(stopFlag batchFlag);⎕TRAP
⍝ Exercise `Ping`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
→T.PassesIf TC.Ping'[localhost]'
→T.PassesIf TC.Ping ∆LocalHostAndPort
→T.PassesIf TC.Ping'[local]'
→T.PassesIf~TC.Ping'/does/not/exist/for/sure'
r←T._OK
⍝Done
r←Test_Misc_017(stopFlag batchFlag);⎕TRAP;data;list;ind;dir;assetFolder;msg;en;rc
⍝ Does "HOME" return '' in case a package has no home anymore?
⍝ This can happen in case you create a WS, load packages into it, save the WS and then move
⍝ the WS somewhere else, without the folder the packages where loaded from.
⍝ In that case the folder the packages where loaded from is actually unkown, and the results
⍝ of HOME, ASSETS and GetFullPath2Assets must reflect that,
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY ∆TEMP_REGISTRY_FOLDER,'/example-Zoo-3.0.0/example-Zoo-3.0.0.zip'
{}TC.LoadPackages(dir,'/example-Zoo-3.0.0.zip')#.TEMP
assetFolder←#.TEMP.Zoo.##.TatinVars.HOME
→T.GoToTidyUp 0=≢assetFolder                   ⍝ Must not be empty because that package has assets
→T.GoToTidyUp~F.IsDir #.TEMP.Zoo.##.TatinVars.GetFullPath2AssetsFolder
(assetFolder,'_')⎕NMOVE assetFolder            ⍝ Make sure that HOME does not exist anymore
assetFolder,←'_'
→T.GoToTidyUp 0≠≢#.TEMP.Zoo.##.TatinVars.HOME  ⍝ Does not exist anymore, therefore '' must be returned
→T.GoToTidyUp'MyAssets'≢#.TEMP.Zoo.##.TatinVars.ASSETS~'/\'
→T.GoToTidyUp'MyAssets'≢#.TEMP.Zoo.##.TatinVars.GetFullPath2AssetsFolder~'/\'
r←T._OK
∆TidyUp:
(rc en msg)←F.RmDir dir
msg Assert 0=rc
(rc en msg)←F.RmDir'expand'F.NormalizePath assetFolder,'/..'
msg Assert 0=rc
⍝Done
r←Test_Misc_018(stopFlag batchFlag);⎕TRAP;clientCfg;expected;tree;tree2;path;qdmx;dir;zipFiles;∆BuildDir;∆BuildSrc;∆BuildReg
⍝ Save build list on disk. Exercises `GetDependencyTree`, `SaveBuildList` and `LoadBuildList`.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
∆BuildDir←'Build_Tests'∆GetTempDir''
∆BuildSrc←∆BuildDir,'/src/'
∆BuildReg←∆BuildDir,'/reg/'
Assert F.MkDir ∆BuildSrc
Assert F.MkDir ∆BuildReg
Reg.CreateRegistry ∆BuildReg
dir←'ConfigFile'∆GetTempDir''
F.DeleteFile dir,'/',TC.UserSettings.cfg_name
TC.InitUserSettings dir
TC.MyUserSettings.caching←0
TC.MyUserSettings.AddRegistry'[Build]',∆BuildReg
zipFiles←∆CreateExampleForMinimalVersionSelection1 ∆BuildDir
path←∆BuildReg,'minimalversion-A-1.0.0'
tree←TC.GetDependencyTree'file://',path
expected←'A-1.0.0' 'B-1.1.2' 'C-1.1.2' 'D-1.1.4' 'E-1.1.2'  ⍝ But not 'D-1.1.3'!
expected←'minimalversion-'∘,¨expected
→T.PassesIf expected ∆LazyMatch tree[;2]
TC.SaveBuildList tree path
tree2←TC.LoadBuildList path
→T.PassesIf∧/tree2[;2]∊tree[;2]
TC.Dependencies.Delete path                                  ⍝ Now we re-create the dependency file
path TC.Dependencies.Add'minimalversion-B-1.1.2'             ⍝ That is the same as before
path TC.Dependencies.Add'minimalversion-C-1.1.3'             ⍝ But that is now 1.1.3 rather than 1.1.2
⍝ Note that C-1.1.2 required D-1.1.4  while B-1.1.2 required D-1.1.3
⍝ C-1.1.3 does not require D at all anymore, but rather F-1.1.1
⍝ However, we DO NOT fall back to D-1.1.3, we stick with D-1.1.4 although strictly speaking that
⍝ version is not requested any longer by any of the packages, but we stick with the latest we have.
tree2←TC.GetDependencyTree'file://',path
→T.GoToTidyUp~∧/(tree[;2]~⊂'minimalversion-C-1.1.2')∊tree2[;2] ⍝ Because C-1.1.2 is neither requested nor needed
→T.GoToTidyUp∧/(tree[;2]~⊂'minimalversion-C-1.1.3')∊tree2[;2]  ⍝ But C-1.1.3 isrequested!
⍝ We compromise here: rather rebuilding everything in a second and third test case we use what we have right now
path TC.Dependencies.Add'DoesNotExist-APLTreeUtils-6.0.1'      ⍝ Modify it: that does not exist
'TEMP'#.⎕NS''
:Trap ##.Registry.ErrorNo
TC.LoadDependencies path'#.TEMP'
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
expected←'The build list in' 'refers to packages that are not installed:'
→T.GoToTidyUp~∧/∨/¨expected⍷¨⊂qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
{}0 TC.InitUserSettings ∆TEMP_TEST_DATA
F.RmDir ∆BuildDir
⎕EX'∆BuildDir'
F.DeleteFile zipFiles
r←Test_Misc_019(stopFlag batchFlag);⎕TRAP
⍝ Exercise the `IncreaseBuildNumber` function
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
→T.PassesIf'1.2.3+1'≡TC.IncreaseBuildNumber'1.2.3'
→T.PassesIf'1.2.3-beta-1+1'≡TC.IncreaseBuildNumber'1.2.3-beta-1'
→T.PassesIf'1.2.3+457'≡TC.IncreaseBuildNumber'1.2.3+456'
→T.PassesIf'1.2.3-beta-1+457'≡TC.IncreaseBuildNumber'1.2.3-beta-1+456'
r←T._OK
⍝Done
r←Test_Misc_020(stopFlag batchFlag);⎕TRAP
⍝ Exercise the `AddToVersion` function
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
→T.PassesIf'0.0.2'≡'+0.0.1'TC.AddToVersion'0.0.1'
→T.PassesIf'0.1.1'≡'+0.0.1'TC.AddToVersion'0.1.0'
→T.PassesIf'0.0.3'≡'+0.0.1'TC.AddToVersion'0.0.2'
→T.PassesIf'0.2.0'≡'+0.1.0'TC.AddToVersion'0.1.0'
→T.PassesIf'0.2.0'≡'+0.1.0'TC.AddToVersion'0.1.9'
→T.PassesIf'2.0.0'≡'+1.0.0'TC.AddToVersion'1.0.0'
→T.PassesIf'1.0.0'≡'+1.0.0'TC.AddToVersion'0.1.9'
→T.PassesIf'2.0.0'≡'+1.0.0'TC.AddToVersion'1.1.9'
→T.PassesIf'0.0.2+1'≡'+0.0.1'TC.AddToVersion'0.0.1+1'
→T.PassesIf'0.1.1+1'≡'+0.0.1'TC.AddToVersion'0.1.0+1'
→T.PassesIf'0.0.3+1'≡'+0.0.1'TC.AddToVersion'0.0.2+1'
→T.PassesIf'0.2.0+1'≡'+0.1.0'TC.AddToVersion'0.1.0+1'
→T.PassesIf'0.2.0+1'≡'+0.1.0'TC.AddToVersion'0.1.9+1'
→T.PassesIf'2.0.0+1'≡'+1.0.0'TC.AddToVersion'1.0.0+1'
→T.PassesIf'1.0.0+1'≡'+1.0.0'TC.AddToVersion'0.1.9+1'
→T.PassesIf'2.0.0+1'≡'+1.0.0'TC.AddToVersion'1.1.9+1'
→T.PassesIf'0.0.2+1'≡'+0.0.1'TC.AddToVersion'0.0.1-beta-1+1'
→T.PassesIf'0.1.1+1'≡'+0.0.1'TC.AddToVersion'0.1.0-beta-1+1'
→T.PassesIf'0.0.3+1'≡'+0.0.1'TC.AddToVersion'0.0.2-beta-1+1'
→T.PassesIf'0.2.0+1'≡'+0.1.0'TC.AddToVersion'0.1.0-beta-1+1'
→T.PassesIf'0.2.0+1'≡'+0.1.0'TC.AddToVersion'0.1.9-beta-1+1'
→T.PassesIf'2.0.0+1'≡'+1.0.0'TC.AddToVersion'1.0.0-beta-1+1'
→T.PassesIf'1.0.0+1'≡'+1.0.0'TC.AddToVersion'0.1.9-beta-1+1'
→T.PassesIf'2.0.0+1'≡'+1.0.0'TC.AddToVersion'1.1.9-beta-1+1'
→T.PassesIf'0.0.2+1'≡'+0.0.1'TC.AddToVersion'0.0.1-beta-1+1'
→T.PassesIf'0.1.1+1'≡'+0.0.1'TC.AddToVersion'0.1.0-beta-1+1'
→T.PassesIf'0.0.3+1'≡'+0.0.1'TC.AddToVersion'0.0.2-beta-1+1'
→T.PassesIf'0.2.0+1'≡'+0.1.0'TC.AddToVersion'0.1.0-beta-1+1'
→T.PassesIf'0.2.0+1'≡'+0.1.0'TC.AddToVersion'0.1.9-beta-1+1'
→T.PassesIf'2.0.0+1'≡'+1.0.0'TC.AddToVersion'1.0.0-beta-1+1'
→T.PassesIf'1.0.0+1'≡'+1.0.0'TC.AddToVersion'0.1.9-beta-1+1'
→T.PassesIf'2.0.0+1'≡'+1.0.0'TC.AddToVersion'1.1.9-beta-1+1'
r←T._OK
⍝Done
r←Test_Misc_021(stopFlag batchFlag);⎕TRAP;dir;orig;buff;new;fileList
⍝ Exercise `ReInstallDependencies`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
dir ⎕NCOPY⍠('Wildcard' 1)⊣∆TEMP_TEST_DATA,'/dependencies/*'
orig←F.ListDirs dir,'/*'
buff←TC.ReInstallDependencies dir
new←F.ListDirs dir,'/*'
→T.PassesIf≡/∪¨{{⍵/⍨2>+\⍵='-'}⊃,/1↓⎕NPARTS ⍵}¨¨orig new
fileList←F.ListFiles dir,'/*.zip'
→T.PassesIf 2=≢fileList
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_Misc_022(stopFlag batchFlag);⎕TRAP
⍝ Exercise `IsBeta`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
→T.PassesIf 0=TC.Reg.IsBeta'group-foo-1.0.0'
→T.PassesIf 0=TC.Reg.IsBeta'group-foo-1.0.0+123'
→T.PassesIf 1=TC.Reg.IsBeta'group-foo-1.0.0-beta1+123'
→T.PassesIf 0=TC.Reg.IsBeta'/path/to/group-foo-1.0.0.zip'
→T.PassesIf 0=TC.Reg.IsBeta'/path/to/group-foo-1.0.0+123.zip'
→T.PassesIf 1=TC.Reg.IsBeta'/path/to/group-foo-1.0.0-beta1+123.ZIP'
r←T._OK
⍝Done
r←Test_Misc_030(stopFlag batchFlag);⎕TRAP
⍝ Exercise `CheckTatinVersion_`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
→T.PassesIf 0=≢'0.75'TC.##.Server.CheckTatinVersion_'0.75'
→T.PassesIf 0<≢'0.76'TC.##.Server.CheckTatinVersion_'0.75'
→T.PassesIf 0=≢'0.75.1'TC.##.Server.CheckTatinVersion_'0.75.1'
→T.PassesIf 0<≢'0.75.2'TC.##.Server.CheckTatinVersion_'0.75.1'
→T.PassesIf 0<≢'1.0.0'TC.##.Server.CheckTatinVersion_'2.0.0'
→T.PassesIf 0=≢'1.1.0'TC.##.Server.CheckTatinVersion_'1.1.0'
→T.PassesIf 0<≢'1.2.0'TC.##.Server.CheckTatinVersion_'1.1.0'
→T.PassesIf 0<≢'1.2.5'TC.##.Server.CheckTatinVersion_'1.1.2'
r←T._OK
⍝Done
r←Test_Misc_050(stopFlag batchFlag);⎕TRAP;res;qdmx
⍝ Passes [MyUCMDs]/foo as package to be loaded into #
⍝ This will fail because "foo" is (hopefully) not an installed user command, but we make sure that [MyUCMDs] is understood
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
:Trap ##.Registry.ErrorNo
res←⎕SE.Tatin.LoadDependencies'[myucmds]foo'#
→T.FailsIf 1
:Else
qdmx←⎕DMX
→T.PassesIf qdmx.EM{⍵≡⎕C(-≢⍵)↑⍺}F.CurrentSep{⍺,⍵,⍺,'foo'}'myucmds'
:EndTrap
r←T._OK
⍝Done
r←Test_Misc_090(stopFlag batchFlag);⎕TRAP;dir;filename;html
⍝ Exercise `Client.CreateUserCommandsReference`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
filename←##.Admin.CreateUserCommandsReference dir
html←⊃⎕NGET filename
→T.PassesIf∨/'<h1 data-id="Tatin-User-Command-Syntax">Tatin User Command Syntax</h1>'⍷∊html
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_Misc_110(stopFlag batchFlag);⎕TRAP;list;ind;folder;expected
⍝ Test function Registry.SortIndexForPackageIDs for producing the correct sort index
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
folder←∆TEMP_SERVER_FOLDER
list←##.FilesAndDirs.ListDirs folder,'aplteam-APLTreeUtils-*'
ind←##.Registry.SortIndexForPackageIDs list
expected←'aplteam-APLTreeUtils-7.0.0' 'aplteam-APLTreeUtils-6.0.11' 'aplteam-APLTreeUtils-6.0.10'
expected,←'aplteam-APLTreeUtils-6.0.9' 'aplteam-APLTreeUtils-6.0.1' 'aplteam-APLTreeUtils-6.0.0'
→T.PassesIf(⌽expected)≡(≢folder)↓¨list[ind]
r←T._OK
⍝Done
r←Test_Misc_111(stopFlag batchFlag);⎕TRAP;data;list;ind
⍝ Test function Registry.SortIndexForPackageIDs for producing the correct sort index
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
data←0 3⍴⍬
data⍪←'aplteam-versions-1.0.0' 20210426.052708 99999999
data⍪←'aplteam-versions-1.0.0' 20210426.053736 20210426.053736
data⍪←'aplteam-versions-1.0.1' 20210426.054013 20210426.054013
data⍪←'aplteam-versions-1.0.1' 20210629.053907 20210629.053907
data⍪←'aplteam-versions-1.0.12' 20210720.010101 99999999
data⍪←'aplteam-versions-1.0.12' 20210426.053928 20210426.053928
data⍪←'aplteam-versions-1.0.12' 20210426.053959 20210426.053959
ind←##.Registry.SortIndexForPackageIDs data
→T.PassesIf 2 1 3 4 6 7 5≡ind
r←T._OK
⍝Done
r←Test_Misc_112(stopFlag batchFlag);⎕TRAP;list;ind;folder;data;expected
⍝ Test function Registry.SortIndexForPackageIDs for producing the correct sort index
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
folder←∆TEMP_SERVER_FOLDER
list←##.FilesAndDirs.ListDirs folder,'example-versions-*'
data←##.Registry.InjectPublishingDate list
ind←##.Registry.SortIndexForPackageIDs data
expected←'example-versions-0.1.0' 'example-versions-1.0.0-beta-1' 'example-versions-1.0.0'
expected,←'example-versions-1.0.1-This-fix' 'example-versions-1.0.1-That-fix' 'example-versions-1.0.12-aaa'
expected,←'example-versions-1.0.12-zzz' 'example-versions-1.0.12-That-fix' 'example-versions-2.0.0'
→T.PassesIf expected≡(≢folder)↓¨data[ind;1]
r←T._OK
⍝Done
r←Test_PkgCfg_001(stopFlag batchFlag);⎕TRAP;dir;dist;cfg;cfg2;qdmx
⍝ Check whether the "tags" is checked for invalid characters
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
dir←∆GetTempDir ⍬
F.MkDir dir
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Hello'
cfg.version←'0.1.0'
cfg.source←'TheSource/'
cfg.tags←'APLTeam,FOO!goo'
cfg.os_win←1
:Trap ##.Registry.ErrorNo
cfg2←TC.WritePackageConfigFile dir cfg
→T.FailsIf 1
:Else
qdmx←⎕DMX
→T.PassesIf'Package property "tag" contains an invalid character: !'≡qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_PkgCfg_002(stopFlag batchFlag);⎕TRAP;dir;dist;cfg;cfg2
⍝ Check whether the "tags" property is converted into lowercase and ";" into ","
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
dir←∆GetTempDir ⍬
F.MkDir dir
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Hello'
cfg.version←'0.1.0'
cfg.source←'TheSource/'
cfg.tags←'APLTeam;FOO,goo'
cfg.os_win←1
cfg2←TC.WritePackageConfigFile dir cfg
→T.PassesIf cfg2.tags≡'aplteam,foo,goo'
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_PkgCfg_003(stopFlag batchFlag);⎕TRAP;dir;dist;cfg;cfg2
;dir;src;zip;cfg;zipfile;refs;assets
⍝ Create package config file with an absolutely addressed asset file but within the package (corrected automatically)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
assets←src,'/assets'
F.MkDir src zip
F.MkDir assets
(⊂'first')F.NPUT assets,'/first.dll'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Foo' '0.1.0'
cfg.source←'Foo.apln'
cfg.api←'Foo'
cfg.assets←assets
cfg.os_win←1
cfg←TC.WritePackageConfigFile src cfg
→T.GoToTidyUp'assets'≢cfg.assets
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_PkgCfg_004(stopFlag batchFlag);⎕TRAP;res;qdmx
;dir;src;zip;cfg;refs
⍝ Create a package config file with two asset files that are addressed incorrectly
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src zip
F.MkDir(739⌶0),'/',⊃⎕SI
(⊂'first')F.NPUT(739⌶0),'/',(⊃⎕SI),'/first.dll'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Foo' '0.1.0'
cfg.source←'Foo.apln'
cfg.api←'Foo'
cfg.assets←dir,'/first.dll'
cfg.os_win←1
:Trap ##.Registry.ErrorNo
TC.WritePackageConfigFile src cfg
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'"assets" must be addressed by a relativ path'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
F.DeleteFile(739⌶0),'/',(⊃⎕SI),'/first.dll'
⍝Done
r←Test_PkgCfg_006(stopFlag batchFlag);⎕TRAP;dir;dist;cfg;cfg2;qdmx
;dir;src;zip;cfg;refs;assets
⍝ Build a package with assets that are addressed incorrectly (absolute path outside the package)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
assets←src,'/assets'
F.MkDir src zip
F.MkDir assets
(⊂'first')F.NPUT assets,'/first.dll'
(⊂'second')F.NPUT assets,'/secnd.dll'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Foo' '0.1.0'
cfg.source←'Foo.apln'
cfg.api←'Foo'
cfg.os_win←1
cfg.assets←'./first.dll'
:Trap ##.Registry.ErrorNo
TC.WritePackageConfigFile src cfg
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'"assets" must be addressed by a relativ path'≢qdmx.EM
:EndTrap
cfg.assets←dir,'/first.dll'
:Trap ##.Registry.ErrorNo
TC.WritePackageConfigFile src cfg
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'"assets" must be addressed by a relativ path'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_PkgCfg_007(stopFlag batchFlag);⎕TRAP;dir;dist;cfg;cfg2;qdmx
;dir;src;zip;cfg;refs;assets
⍝ Build a package with an assets that does not exist
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
assets←src,'/assets'
F.MkDir src zip
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Foo' '0.1.0'
cfg.source←'Foo.apln'
cfg.api←'Foo'
cfg.assets←assets
cfg.os_win←1
:Trap ##.Registry.ErrorNo
TC.WritePackageConfigFile src cfg
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'The asset folder does not exist: assets'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_PkgCfg_008(stopFlag batchFlag);⎕TRAP;dir;dist;cfg;cfg2;qdmx
;dir;src;zip;cfg;refs
⍝ Build a package with non-Tatin variables that do not start with an underscore
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
:If 1
→0 ⋄ r←T._Inactive   ⍝ Not checked anymore
:EndIf
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src zip
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Foo' '0.1.0'
cfg.source←'Foo.apln'
cfg.api←'Foo'
cfg.myVars←'Foo'
:Trap ##.Registry.ErrorNo
TC.WritePackageConfigFile src cfg
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp~'Invalid property in config namespace:'∆LazyMatch qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_PkgCfg_009(stopFlag batchFlag);⎕TRAP;dir;dist;cfg;cfg2
;dir;src;zip;cfg;refs
⍝ Build a package with a valid non-Tatin variable (name start with `_`)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src zip
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Foo' '0.1.0'
cfg.source←'Foo.apln'
cfg.api←'Foo'
cfg._myVars←'Foo'
cfg.os_win←1
cfg2←TC.WritePackageConfigFile src cfg
→T.GoToTidyUp'Foo'≢cfg2._myVars
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_PkgCfg_020(stopFlag batchFlag);⎕TRAP;dir;cfg;cfg2
⍝ Check the "documentation" property being a URL
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
F.MkDir dir
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Hello'
cfg.version←'0.1.0'
cfg.source←'TheSource/'
cfg.documentation←'https://aplwiki.com/wiki/Tatin'
cfg.os_win←1
cfg2←TC.WritePackageConfigFile dir cfg
→T.GoToTidyUp cfg2.documentation≢cfg.documentation
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_PkgCfg_021(stopFlag batchFlag);⎕TRAP;dir;cfg;cfg2
⍝ Check the "documentation" property being a relative path
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
F.MkDir dir
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Hello'
cfg.version←'0.1.0'
cfg.source←'TheSource/'
cfg.documentation←'./path/to/reference'
cfg.os_win←1
cfg2←TC.WritePackageConfigFile dir cfg
→T.GoToTidyUp cfg2.documentation≢cfg.documentation
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_PkgCfg_022(stopFlag batchFlag);⎕TRAP;dir;cfg;cfg2
⍝ Check the "documentation" property being a function call
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
F.MkDir dir
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Hello'
cfg.version←'0.1.0'
cfg.source←'TheSource/'
cfg.documentation←'⎕This.FunctionCall'
cfg.os_win←1
cfg2←TC.WritePackageConfigFile dir cfg
→T.GoToTidyUp cfg2.documentation≢cfg.documentation
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_PkgCfg_023(stopFlag batchFlag);⎕TRAP;dir;cfg;qdmx
⍝ Check the "documentation" property being something invalid
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
F.MkDir dir
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Hello'
cfg.version←'0.1.0'
cfg.source←'TheSource/'
cfg.documentation←'.\invalid'
cfg.os_win←1
:Trap 0
{}TC.WritePackageConfigFile dir cfg
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Package property "documentation" is invalid'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_PkgCfg_030(stopFlag batchFlag);⎕TRAP;dir;cfg;cfg2
⍝ Check the "maintainer" property for being a valid email address
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
F.MkDir dir
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Hello'
cfg.version←'0.1.0'
cfg.source←'TheSource/'
cfg.maintainer←'my.name@my-domain.com'
cfg.os_win←1
cfg2←TC.WritePackageConfigFile dir cfg
→T.GoToTidyUp cfg2.maintainer≢cfg.maintainer
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_PkgCfg_031(stopFlag batchFlag);⎕TRAP;dir;cfg;cfg2
⍝ Check the "maintainer" property for being a valid email address
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
F.MkDir dir
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Hello'
cfg.version←'0.1.0'
cfg.source←'TheSource/'
cfg.maintainer←'My Name <my.name@my-domain.com>'
cfg.os_win←1
cfg2←TC.WritePackageConfigFile dir cfg
→T.GoToTidyUp cfg2.maintainer≢cfg.maintainer
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_PkgCfg_032(stopFlag batchFlag);⎕TRAP;dir;cfg;qdmx
⍝ Check the "maintainer" property for being an invalid email address
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
F.MkDir dir
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Hello'
cfg.version←'0.1.0'
cfg.source←'TheSource/'
cfg.maintainer←'this and that <<invalid@email.address>'
cfg.os_win←1
:Trap ##.Registry.ErrorNo
{}TC.WritePackageConfigFile dir cfg
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Package property "maintainer" is invalid'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_PkgCfg_033(stopFlag batchFlag);⎕TRAP;dir;cfg;qdmx
⍝ Check the "maintainer" property for being an invalid email address
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
F.MkDir dir
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Hello'
cfg.version←'0.1.0'
cfg.source←'TheSource/'
cfg.maintainer←'<invalid@email.address> this and that'
cfg.os_win←1
:Trap 0
{}TC.WritePackageConfigFile dir cfg
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Package property "maintainer" is invalid'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Publish_001(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;parms
;dir;src;body;cfg;reg;list;zipfile;zip;list2
⍝ Publish a ZIP file
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg zip)←(⊂dir,'/'),¨'src' 'reg' 'zip'
F.MkDir src reg zip
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'1.0.0'
cfg.source←'Test.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
zipfile←TC.BuildPackage parms
zip ⎕NCOPY src,'/',TC.CFG_Name
(rc msg zipFilename)←TC.PublishPackage zipfile'[local2]'
Assert 200=rc
→T.GoToTidyUp 1≠≢list←F.ListDirs reg
→T.GoToTidyUp(,⊂'Example-Package_A-1.0.0')≢{⊃,/1↓⎕NPARTS ⍵}¨list
→T.GoToTidyUp 2≠≢list2←F.ListFiles(1⊃list),'/'
→T.GoToTidyUp 0=+/'/Example-Package_A-1.0.0.zip'∘{⍺≢(-≢⍺)↑⍵}¨list2
→T.GoToTidyUp 1≠≢(Reg.Index.GetRegistryIndex reg)+.=⎕UCS 10
r←T._OK
∆TidyUp:
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Publish_002(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;parms
;dir;src;body;cfg;reg;list;expected;zipfile;zip;list2
⍝ Publish a ZIP file via a URI
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg zip)←(⊂dir,'/'),¨'src' 'reg' 'zip'
F.MkDir src reg zip
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'1.0.0'
cfg.source←'Test.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
zipfile←TC.BuildPackage parms
zip ⎕NCOPY src,'/',TC.CFG_Name
(rc msg zipFilename)←TC.PublishPackage zipfile reg
Assert 200=rc
→T.GoToTidyUp 1≠≢list←F.ListDirs reg
→T.GoToTidyUp(,⊂'Example-Package_A-1.0.0')≢{⊃,/1↓⎕NPARTS ⍵}¨list
→T.GoToTidyUp 2≠≢list2←F.ListFiles(1⊃list),'/'
→T.GoToTidyUp 0=+/∨/'/Example-Package_A-1.0.0.zip'∘{⍺≢(-≢⍺)↑⍵}¨list2
→T.GoToTidyUp 1≠≢(Reg.Index.GetRegistryIndex reg)+.=⎕UCS 10
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
⍝Done
r←Test_Publish_003(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;parms
;dir;src;body;cfg;reg;list;zipfile;zip;list2
⍝ Publish a ZIP file via 'file://...'
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg zip)←(⊂dir,'/'),¨'src' 'reg' 'zip'
F.MkDir src reg zip
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'1.0.0'
cfg.source←'Test.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
zipfile←TC.BuildPackage parms
zip ⎕NCOPY src,'/',TC.CFG_Name
(rc msg zipFilename)←TC.PublishPackage zipfile reg
Assert 200=rc
→T.GoToTidyUp 1≠≢list←F.ListDirs reg
→T.GoToTidyUp(,⊂'Example-Package_A-1.0.0')≢{⊃,/1↓⎕NPARTS ⍵}¨list
→T.GoToTidyUp 2≠≢list2←F.ListFiles(1⊃list),'/'
→T.GoToTidyUp 0=+/'/Example-Package_A-1.0.0.zip'∘{⍺≢(-≢⍺)↑⍵}¨list2
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
⍝Done
r←Test_Publish_004(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;src2;zipfile2;zip2;deps;depsFilename;parms
;dir;src;body;cfg;reg;list;zipfile;zip;list2
⍝ Publish a package with a dependency that is defined with "file://" on a Registry not managed by a server
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg zip src2 zip2)←(⊂dir,'/'),¨'src' 'reg' 'zip' 'src2' 'zip2'
F.MkDir src reg zip src2 zip2
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace Test' '∇r←Hello' 'r←##.Hello.Hello' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'1.0.0'
cfg.source←'Test.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
body←':Namespace Hello' '∇r←Hello' 'r←''World''' '∇' ':EndNamespace'
(⊂body)F.NPUT src2,'/Hello.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Hello'
cfg.version←'1.2.0'
cfg.source←'Hello.apln'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
parms←TC.CreateBuildParms src2
parms.targetPath←zip2
zipfile2←TC.BuildPackage parms
zip2 ⎕NCOPY src2,'/',TC.CFG_Name
src TC.Dependencies.Add'file://',zipfile2
parms←TC.CreateBuildParms src
parms.targetPath←zip
zipfile←TC.BuildPackage parms
zip ⎕NCOPY src,'/',TC.CFG_Name
(rc msg zipFilename)←TC.PublishPackage zipfile reg
Assert 200=rc
→T.GoToTidyUp 1≠≢list←F.ListDirs reg
→T.GoToTidyUp(,⊂'Example-Package_A-1.0.0')≢{⊃,/1↓⎕NPARTS ⍵}¨list
→T.GoToTidyUp 3≠≢list2←F.EnforceSlash¨F.ListFiles(1⊃list),'/'
→T.GoToTidyUp 1≠+/'/Example-Package_A-1.0.0.zip'∘{⍺≡(-≢⍺)↑⍵}¨list2
depsFilename←reg,'/Example-Package_A-1.0.0/apl-dependencies.txt'
Assert ⎕NEXISTS depsFilename
deps←⊃⎕NGET depsFilename 1
→T.GoToTidyUp 1≠≢deps
→T.GoToTidyUp~⎕NEXISTS(≢'file://')↓1⊃deps
{}TC.LoadPackages(reg,'/Example-Package_A-1.0.0')'#.TEMP'
→T.GoToTidyUp'World'≢#.TEMP.Package_A.Hello.Hello
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
⍝Done
r←Test_Publish_005(stopFlag batchFlag);⎕TRAP;zipfile;qdmx
⍝ Attempt to publish a package that differs from an already published one only by case; must ERR
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
zipfile←∆TEMP_TEST_DATA,'/CaseTest/example-goo-2.1.0.zip'
:Trap ##.Registry.ErrorNo
{}TC.PublishPackage zipfile'[localhost]'
→T.FailsIf 1
:Else
qdmx←⎕DMX
→T.PassesIf∨/'Server: The package has already been published with a different spelling (case)'⍷qdmx.EM
:EndTrap
r←T._OK
⍝Done
r←Test_Publish_006(stopFlag batchFlag);⎕TRAP;dir;src;body;cfg;zip;qdmx
⍝ Publish a package with a dependency that is defined with "file://" to a server-managed Registry (must error)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'zip'
F.MkDir src zip
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'1.0.0'
cfg.source←'Test.apln'
cfg.license←'MIT'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
src TC.Dependencies.Add'file://./TestServer/Registry/aplteam-APLTreeUtils-6.0.6'
:Trap ##.Registry.ErrorNo
{}TC.PublishPackage src'[localhost]'
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp~∨/'failed; dependency uses file:// protocol'⍷qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Publish_007(stopFlag batchFlag);⎕TRAP;zipfile;qdmx
⍝ Attempt to publish a package with a new version number that differs from an already published one only by case; must ERR
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
zipfile←∆TEMP_TEST_DATA,'/CaseTest/example-goo-2.9.0.zip'
:Trap ##.Registry.ErrorNo
{}TC.PublishPackage zipfile'[localhost]'
→T.FailsIf 1
:Else
qdmx←⎕DMX
→T.PassesIf∨/'Server: The package has already been published with a different spelling (case)'⍷qdmx.EM
:EndTrap
r←T._OK
⍝Done
r←Test_Publish_008(stopFlag batchFlag);⎕TRAP;dir;src;reg;zipfile2;zipfile1;msg;rc;en
⍝ Attempt to publish a package with a name that is identical with existing one but case
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
zipfile1←∆TEMP_REGISTRY_FOLDER,'/example-Goo-2.1.0/example-Goo-2.1.0.zip'
(rc msg)←2↑TC.PublishPackage zipfile1'[local2]'
msg Assert rc=200
zipfile2←∆TEMP_TEST_DATA,'/CaseTest/example-goo-2.9.0.zip'
(rc msg)←2↑TC.PublishPackage zipfile2'[local2]'
→T.GoToTidyUp 400≠rc
→T.GoToTidyUp~∨/'There is already such a package but with a different spelling (case)'⍷msg
r←T._OK
∆TidyUp:
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
(rc en msg)←F.RmDir dir
msg Assert 0=rc
⍝Done⍝Done
r←Test_Publish_010(stopFlag batchFlag);⎕TRAP;expected;zipped;rc;zipFilename;msg
;dir;src;dist;body;cfg;reg;list;list2
⍝ Publish a really simple package (single source file, no dependencies, no assets)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist reg)←(⊂dir,'/'),¨'src' 'dist' 'reg'
F.MkDir src dist reg
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'1.0.0'
cfg.source←'Test.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
(rc msg zipFilename)←TC.PublishPackage src'[local2]'
Assert 200=rc
→T.GoToTidyUp 1≠≢list←F.ListDirs reg
→T.GoToTidyUp(,⊂'Example-Package_A-1.0.0')≢{⊃,/1↓⎕NPARTS ⍵}¨list
→T.GoToTidyUp 2≠≢list2←F.ListFiles(1⊃list),'/'
→T.GoToTidyUp 0=+/'/Example-Package_A-1.0.0.zip'∘{⍺≢(-≢⍺)↑⍵}¨list2
expected←TC.CFG_Name'Test.apln'
zipped←Reg.ZipArchive.ListZipContents list2 ∆GetByExtension'.ZIP'
→T.GoToTidyUp~expected ∆LazyMatch zipped
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile zipFilename
⍝Done
r←Test_Publish_011(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename
;dir;src;dist;body;cfg;reg;list;list2
⍝ Publish a really simple package (single source file, no dependencies, no assets) via the URI
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist reg)←(⊂dir,'/'),¨'src' 'dist' 'reg'
F.MkDir src dist reg
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'1.0.0'
cfg.source←'Test.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
(rc msg zipFilename)←TC.PublishPackage src reg
Assert 200=rc
→T.GoToTidyUp 1≠≢list←F.ListDirs reg
→T.GoToTidyUp(,⊂'Example-Package_A-1.0.0')≢{⊃,/1↓⎕NPARTS ⍵}¨list
→T.GoToTidyUp 2≠≢list2←F.ListFiles(1⊃list),'/'
→T.GoToTidyUp 0=+/'/Example-Package_A-1.0.0.zip'∘{⍺≢(-≢⍺)↑⍵}¨list2
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile zipFilename
⍝Done
r←Test_Publish_012(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename
;dir;src;dist;body;cfg;reg;list;list2
⍝ Publish a really simple package (single source file, no dependencies, no assets) via 'file://....'
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist reg)←(⊂dir,'/'),¨'src' 'dist' 'reg'
F.MkDir src dist reg
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'1.0.0'
cfg.source←'Test.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
(rc msg zipFilename)←TC.PublishPackage src reg
Assert 200=rc
→T.GoToTidyUp 1≠≢list←F.ListDirs reg
→T.GoToTidyUp(,⊂'Example-Package_A-1.0.0')≢{⊃,/1↓⎕NPARTS ⍵}¨list
→T.GoToTidyUp 2≠≢list2←F.ListFiles(1⊃list),'/'
→T.GoToTidyUp 0=+/'/Example-Package_A-1.0.0.zip'∘{⍺≢(-≢⍺)↑⍵}¨list2
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile zipFilename
⍝Done
R←Test_Publish_020(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename
;dir;src;dist;body;cfg;reg;list;zipped;expected;list2
⍝ Publish a package with two source files in default folder ("source")
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
dir←∆GetTempDir ⍬
(src dist reg)←(⊂dir,'/'),¨'src' 'dist' 'reg'
F.MkDir src dist reg
F.MkDir src,'/source'
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/source/Test.apln'
body←'R←Hello' 'r←''World'''
(⊂body)F.NPUT src,'/source/Hello.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'1.0.0'
cfg.source←'source'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
(rc msg zipFilename)←TC.PublishPackage src'[local2]'
Assert 200=rc
→T.GoToTidyUp 1≠≢list←F.ListDirs reg
→T.GoToTidyUp(,⊂'Example-Package_A-1.0.0')≢{⊃,/1↓⎕NPARTS ⍵}¨list
→T.GoToTidyUp 2≠≢list2←F.ListFiles(1⊃list),'/'
→T.GoToTidyUp 0=+/'/Example-Package_A-1.0.0.zip'∘{⍺≢(-≢⍺)↑⍵}¨list2
zipped←Reg.ZipArchive.ListZipContents list2 ∆GetByExtension'.ZIP'
expected←TC.CFG_Name'source/Test.apln' 'source/Hello.aplf'
→T.GoToTidyUp~expected ∆LazyMatchPaths zipped
R←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile zipFilename
⍝Done
R←Test_Publish_021(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename
;dir;src;dist;body;cfg;reg;list;zipped;expected;list2
⍝ Publish a package with two source files in folder APLSource/
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
dir←∆GetTempDir ⍬
(src dist reg)←(⊂dir,'/'),¨'src' 'dist' 'reg'
F.MkDir src dist reg
F.MkDir src,'/APLSource'
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/APLSource/Test.apln'
body←'R←Hello' 'r←''World'''
(⊂body)F.NPUT src,'/APLSource/Hello.aplf'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'1.0.0'
cfg.source←'APLSource'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
(rc msg zipFilename)←TC.PublishPackage src'[local2]'
Assert 200=rc
→T.GoToTidyUp 1≠≢list←F.ListDirs reg
→T.GoToTidyUp(,⊂'Example-Package_A-1.0.0')≢{⊃,/1↓⎕NPARTS ⍵}¨list
→T.GoToTidyUp 2≠≢list2←F.ListFiles(1⊃list),'/'
→T.GoToTidyUp 0=+/'/Example-Package_A-1.0.0.zip'∘{⍺≢(-≢⍺)↑⍵}¨list2
expected←TC.CFG_Name'APLSource/Test.apln' 'APLSource/Hello.aplf'
zipped←Reg.ZipArchive.ListZipContents list2 ∆GetByExtension'.ZIP'
→T.GoToTidyUp~expected ∆LazyMatchPaths zipped
R←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile zipFilename
⍝Done
r←Test_Publish_030(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename
;dir;src;dist;body;cfg;reg;list;expected;zipped;list2
⍝ Publish a simple package with a single non-source file
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src dist reg)←(⊂dir,'/'),¨'src' 'dist' 'reg'
F.MkDir src dist reg
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
(⊂'DLL')F.NPUT src,'/my.dll'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'1.0.0'
cfg.source←'Test.apln'
cfg.assets←'my.dll'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
(rc msg zipFilename)←TC.PublishPackage src reg
Assert 200=rc
→T.GoToTidyUp 1≠≢list←F.ListDirs reg
→T.GoToTidyUp(,⊂'Example-Package_A-1.0.0')≢{⊃,/1↓⎕NPARTS ⍵}¨list
→T.GoToTidyUp 2≠≢list2←F.ListFiles(1⊃list),'/'
→T.GoToTidyUp 0=+/'/Example-Package_A-1.0.0.zip'∘{⍺≢(-≢⍺)↑⍵}¨list2
expected←'apl-package.json' 'Test.apln' 'my.dll'
zipped←Reg.ZipArchive.ListZipContents list2 ∆GetByExtension'.ZIP'
→T.GoToTidyUp~expected ∆LazyMatch zipped
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile zipFilename
⍝Done
r←Test_Publish_031(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename
;dir;src;body;cfg;reg;list;expected;zipped;list2
⍝ Publish a simple package with two non-source files
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
F.MkDir src,'/myAssets'
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
(⊂'First DLL')F.NPUT src,'/myAssets/myFirst.dll'
(⊂'Second DLL')F.NPUT src,'/myAssets/mySecond.dll'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'1.0.0'
cfg.source←'Test.apln'
cfg.assets←'myAssets'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
(rc msg zipFilename)←TC.PublishPackage src reg
Assert 200=rc
→T.GoToTidyUp 1≠≢list←F.ListDirs reg
→T.GoToTidyUp(,⊂'Example-Package_A-1.0.0')≢{⊃,/1↓⎕NPARTS ⍵}¨list
→T.GoToTidyUp 2≠≢list2←F.ListFiles(1⊃list),'/'
→T.GoToTidyUp 0=+/'/Example-Package_A-1.0.0.zip'∘{⍺≢(-≢⍺)↑⍵}¨list2
expected←'apl-package.json' 'Test.apln' 'myAssets/myFirst.dll' 'myAssets/mySecond.dll'
zipped←Reg.ZipArchive.ListZipContents list2 ∆GetByExtension'.ZIP'
→T.GoToTidyUp~expected ∆LazyMatch zipped
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile zipFilename
⍝Done
r←Test_Publish_050(stopFlag batchFlag);⎕TRAP;installFolder;rc;msg;zipFilename;qdmx
;dir;src;body;cfg;reg;list;index;expected;zipped;src;src3;refs
⍝ Publish a package with an invalid dependency
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src reg
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace A' 'foo←{' '##.Times ⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/A.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'A' '1.0.0'
cfg.source←'A.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
src TC.Dependencies.Add'DoesNot-Exist-1.0.0'           ⍝ Invalid dependency
(rc msg zipFilename)←TC.PublishPackage src reg         ⍝ You might want to install a package with a not yet published dependency
Assert 200=rc
installFolder←∆GetTempDir'/Tatin_AppPackages'
:Trap 998
refs←TC.InstallPackages('[local2]/Example-A-1.0.0')installFolder
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp≢/##.FilesAndDirs.EnforceSlash¨'File <DoesNot-Exist-1.0.0/DoesNot-Exist-1.0.0.zip> does not exist'qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile zipFilename
Assert 0=⊃F.RmDir installFolder
⍝Done
r←Test_Publish_052(stopFlag batchFlag);⎕TRAP;qdmx;rc;msg;zipFilename;src1;src2;toBeDeleted
;dir;src;body;cfg;reg;list;index;expected;zipped;src;src3
⍝ Publish a package with a dependency were the specified version does not exist
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src reg)←(⊂dir,'/'),¨'src' 'reg'
(src1 src2)←src∘,¨'/A' '/Foo'
F.MkDir src1 src2 reg
toBeDeleted←''
TC.Reg.CreateRegistry reg
TC.MyUserSettings.AddRegistry'[local2]',reg
body←':Namespace Foo' 'Times←{' '##.Times ⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src2,'/Foo.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Foo' '1.0.0'
cfg.source←'Foo.apln'
cfg.os_win←1
TC.WritePackageConfigFile src2 cfg
(rc msg zipFilename)←TC.PublishPackage src2 reg             ⍝ You might want to install a package with a not yet published dependency
toBeDeleted,←⊂zipFilename
Assert 200=rc
body←':Namespace A' 'foo←{' '##.Times ⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src1,'/A.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'A' '1.0.0'
cfg.source←'A.apln'
cfg.os_win←1
TC.WritePackageConfigFile src1 cfg
src1 TC.Dependencies.Add'Example-Foo-2.0.0'         ⍝ Only version 1.0.0 does exist!
(rc msg zipFilename)←TC.PublishPackage src1 reg             ⍝ You might want to install a package with a not yet published dependency
toBeDeleted,←⊂zipFilename
→T.GoToTidyUp rc≠200                                        ⍝ And that should work!
→T.GoToTidyUp 0=≢zipFilename
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert TC.MyUserSettings.RemoveRegistry'[local2]'
F.DeleteFile toBeDeleted
⍝Done
r←Test_Publish_055(stopFlag batchFlag);⎕TRAP;dir;body;cfg;rc;msg;zipFilename;qdmx
⍝ Attempt to publish a package we have no valid API key for
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
body←':Namespace A' 'foo←{' '##.Times ⍵' '}' ':EndNamespace'
(⊂body)F.NPUT dir,'/A.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'DoesNot' 'Exist' '1.0.0'
cfg.source←'A.apln'
cfg.os_win←1
TC.WritePackageConfigFile dir cfg
:Trap ##.Registry.ErrorNo
(rc msg zipFilename)←TC.PublishPackage dir'[tatin]'
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Server: Unauthorized request (401)'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
F.DeleteFile(739⌶0),'/',(⊃{⍺,'-',⍵}/cfg.(group name version)),'.zip'
⍝Done
r←Test_Publish_056(stopFlag batchFlag);⎕TRAP;dir;body;cfg;rc;msg;zipFilename;qdmx;ind
⍝ Attempt to publish a package that requires an API key without specifying one
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
body←':Namespace A' 'foo←{' '##.Times ⍵' '}' ':EndNamespace'
(⊂body)F.NPUT dir,'/A.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'DoesNot' 'Exist' '1.0.0'
cfg.source←'A.apln'
cfg.os_win←1
TC.WritePackageConfigFile dir cfg
ind←TC.MyUserSettings.registries.alias⍳⊂'tatin'
'There should not be an API key for [tatin]?!'Assert 0=≢(ind⊃TC.MyUserSettings.registries.api_key)
:Trap ##.Registry.ErrorNo
(rc msg zipFilename)←TC.PublishPackage dir'[tatin]'
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Server: Unauthorized request (401)'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
F.DeleteFile(739⌶0),'/',(⊃{⍺,'-',⍵}/cfg.(group name version)),'.zip'
⍝Done
r←Test_Publish_060(stopFlag batchFlag);⎕TRAP;path;zipFileName;statusCode;errMsg;list;tempPath;rc;msg
⍝ Attempt to publish a package that has dependencies in a non-default folder and is a Cider project
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
path←∆TEMP_TEST_DATA,'/Build/CiderProject/'
tempPath←∆GetTempDir'/'
tempPath ⎕NCOPY path
tempPath,←'CiderProject/'
(statusCode errMsg zipFileName)←TC.PublishPackage tempPath'[local]'
errMsg Assert statusCode=200
list←TC.ZipArchive.ListZipContents zipFileName
→T.GoToTidyUp~(⊂F.EnforceSlash'apl-dependencies.txt')∊F.EnforceSlash¨list
r←T._OK
∆TidyUp:
F.DeleteFile zipFileName
⎕DL 0.1
(rc msg)←F.RmDirByForce tempPath,'..'
msg Assert rc=0
(rc msg)←F.RmDirByForce ∆TEMP_REGISTRY_FOLDER,'/aplteam-Seven7Zip-9.0.1'
msg Assert rc=0
∆RecompileIndexOnServer
⍝Done
r←Test_Publish_061(stopFlag batchFlag);⎕TRAP;path;zipFileName;statusCode;errMsg;list;msg;rc
⍝ Attempt to publish a package that is not a Cider project and has dependencies in the default folder
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
path←∆TEMP_TEST_DATA,'/Build/Default/'
(statusCode errMsg zipFileName)←TC.PublishPackage path'[local]'
Assert statusCode=200
list←TC.ZipArchive.ListZipContents zipFileName
→T.GoToTidyUp~(⊂F.EnforceSlash'apl-dependencies.txt')∊F.EnforceSlash¨list
r←T._OK
∆TidyUp:
F.DeleteFile zipFileName
(rc msg)←F.RmDirByForce ∆TEMP_REGISTRY_FOLDER,'/aplteam-Seven7Zip-9.0.1'
msg Assert 0=rc
⍝Don
r←Test_Publish_062(stopFlag batchFlag);⎕TRAP;path;zipFileName;statusCode;errMsg;list;rc;msg
⍝ Attempts to publish a package that is a Cider project but we specify a different folder (takes precedence)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
path←∆TEMP_TEST_DATA,'/Build/Special/'
(statusCode errMsg zipFileName)←'dependencies'TC.PublishPackage path'[local]'
Assert statusCode=200
list←TC.ZipArchive.ListZipContents zipFileName
→T.GoToTidyUp~(⊂F.EnforceSlash'apl-dependencies.txt')∊F.EnforceSlash¨list
r←T._OK
∆TidyUp:
F.DeleteFile zipFileName
(rc msg)←F.RmDirByForce ∆TEMP_REGISTRY_FOLDER,'/aplteam-Seven7Zip-9.0.1'
msg Assert 0=rc
∆RecompileIndexOnServer
⍝Don
r←Test_Publish_100(stopFlag batchFlag);⎕TRAP;path;statusCode;errMsg
⍝ Try to publish a package that has already been published with a different case ("APLProcess"←→"APLprocess")
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
path←∆TEMP_TEST_DATA,'/DifferentCase/'
(statusCode errMsg)←2↑TC.PublishPackage path'[local]'
→T.PassesIf statusCode=400
→T.PassesIf∨/'There is already such a package but with a different spelling (case)'⍷errMsg
r←T._OK
⍝Don
r←Test_ReInstall_001(stopFlag batchFlag);⎕TRAP;dir;refs;new;res
⍝ Re-install two versions of the same package. Only the better one will survive.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
res←TC.InstallPackages'[localhost]example-versions-1.0.1-That-fix'dir
Assert'example-versions-1.0.1-That-fix'≡∊res
res←TC.InstallPackages'[localhost]example-versions-1.0.12-zzz'dir
Assert'example-versions-1.0.12-zzz'≡∊res
refs←TC.ReInstallDependencies dir
new←(1+≢dir)↓¨F.ListDirs dir,'/*'
→T.PassesIf(,⊂'example-versions-1.0.12-zzz')≡new
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_ReInstall_002(stopFlag batchFlag);⎕TRAP;dir;refs;new;res;expected
⍝ Re-install two versions of the same package but assign an alias to one of them. Both will survive.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
res←TC.InstallPackages'[localhost]example-versions-1.0.1-That-fix'dir
Assert'example-versions-1.0.1-That-fix'≡∊res
res←TC.InstallPackages'[localhost]V@example-versions-1.0.12-zzz'dir     ⍝ Alias!
Assert'V@example-versions-1.0.12-zzz'≡∊res
refs←TC.ReInstallDependencies dir
new←(1+≢dir)↓¨F.ListDirs dir,'/*'
expected←'example-versions-1.0.1-That-fix' 'example-versions-1.0.12-zzz'
→T.PassesIf expected ∆LazyMatch new
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_ReInstall_003(stopFlag batchFlag);⎕TRAP;dir;refs;new;res;expected;parms
⍝ Re-install two versions of the same package. Then re-install with "update" set.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
res←TC.InstallPackages'[localhost]example-versions-1.0.1-That-fix'dir
Assert'example-versions-1.0.1-That-fix'≡∊res
res←TC.InstallPackages'[localhost]V@example-versions-1.0.12-zzz'dir     ⍝ Alias!
Assert'V@example-versions-1.0.12-zzz'≡∊res
parms←TC.CreateReInstallParms
parms.update←1
refs←parms TC.ReInstallDependencies dir
new←(1+≢dir)↓¨F.ListDirs dir,'/*'
expected←(,⊂'example-versions-1.0.12-That-fix')
→T.PassesIf expected≡new
res←TC.LoadDependencies dir'#.TEMP'
→T.GoToTidyUp(,¨'V' 'versions')≢' '~⍨¨↓#.TEMP.⎕NL 9
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_ReInstall_004(stopFlag batchFlag);⎕TRAP;dir;orig;buff;new;fileList
⍝ Exercise `ReInstallDependencies with some dependencies
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
dir ⎕NCOPY⍠('Wildcard' 1)⊣∆TEMP_TEST_DATA,'/dependencies/*'
orig←F.ListDirs dir,'/*'
buff←TC.ReInstallDependencies dir
new←F.ListDirs dir,'/*'
→T.GoToTidyUp≢/∪¨{{⍵/⍨2>+\⍵='-'}⊃,/1↓⎕NPARTS ⍵}¨¨orig new
fileList←F.ListFiles dir,'/*.zip'
→T.GoToTidyUp 2≠≢fileList
r←T._OK
∆TidyUp:
F.RmDir dir
⍝Done
r←Test_ReInstall_005(stopFlag batchFlag);⎕TRAP;dir;orig;buff;new;parms
⍝ Exercise `ReInstallDependencies with the -dry flag
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
dir ⎕NCOPY⍠('Wildcard' 1)⊣∆TEMP_TEST_DATA,'/dependencies/*'
orig←F.ListDirs dir,'/*'
parms←TC.CreateReInstallParms
parms.dry←1
buff←parms TC.ReInstallDependencies dir
→T.GoToTidyUp 12=≢buff
new←F.ListDirs dir,'/*'
→T.GoToTidyUp≢/∪¨{{⍵/⍨2>+\⍵='-'}⊃,/1↓⎕NPARTS ⍵}¨¨orig new
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_ReInstall_006(stopFlag batchFlag);⎕TRAP;localWas;dir;list;parms;indTest;testWas;indLocalhost;res
⍝ Exercise `ReInstallDependencies on a packages
⍝ For this we need to change the priorities!
⍝ Note that we install a package from "local" that
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
⍝ Make sure we re-install from "tatin test"
indTest←TC.MyUserSettings.registries.alias⍳⊂'tatin-test'
testWas←indTest⊃TC.MyUserSettings.registries.priority
(indTest⊃TC.MyUserSettings.registries).priority←100+⌈/TC.MyUserSettings.registries.priority
res←TC.InstallPackages'example-Goo'dir
→T.GoToTidyUp'example-Goo-2.0.0'≢∊res
list←F.ListDirs dir
→T.GoToTidyUp 1≠≢list
⍝ Make sure we re-install from "localhost"
indLocalhost←TC.MyUserSettings.registries.alias⍳⊂'localhost'
localWas←indLocalhost⊃TC.MyUserSettings.registries.priority
(indLocalhost⊃TC.MyUserSettings.registries).priority←100+⌈/TC.MyUserSettings.registries.priority
→T.GoToTidyUp'example-Goo-2.0.0'≢∊TC.ReInstallDependencies dir
list←F.ListDirs dir
→T.GoToTidyUp 1≠≢list
parms←TC.CreateReInstallParms
parms.update←1
→T.GoToTidyUp'example-Goo-2.1.0'≢∊parms TC.ReInstallDependencies dir
list←F.ListDirs dir
→T.GoToTidyUp 1≠≢list
r←T._OK
∆TidyUp:
indLocalhost←TC.MyUserSettings.registries.alias⍳⊂'localhost'
(indLocalhost⊃TC.MyUserSettings.registries).priority←localWas
indTest←TC.MyUserSettings.registries.alias⍳⊂'tatin-test'
(indTest⊃TC.MyUserSettings.registries).priority←testWas
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_ReInstall_007(stopFlag batchFlag);⎕TRAP;indLocal;localWas;indTest;testWas;dir;list;expected;body;res;parms
⍝ Exercise `ReInstallDependencies on a packages
⍝ The package has just one dependency which lives on both the development test server and test.tatin.dev
⍝ but with different versions.
⍝ Yes, that should never happen, but it allows us to tell (and check) where it was loaded from.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
⍝ Make sure we install from "local"
indLocal←TC.MyUserSettings.registries.alias⍳⊂'local'
localWas←indLocal⊃TC.MyUserSettings.registries.priority
(indLocal⊃TC.MyUserSettings.registries).priority←0
dir←∆GetTempDir ⍬
res←TC.InstallPackages'example-Too'dir
→T.GoToTidyUp'example-Too-1.0.0'≢∊res
list←F.ListDirs dir
→T.GoToTidyUp 2≠≢list
expected←'example-Goo-2.0.0' 'example-Too-1.0.0'
→T.GoToTidyUp~expected ∆LazyMatch{⍵↑⍨1+-⌊/'/\'⍳⍨⌽⍵}¨list
body←⊃⎕NGET(dir,'/example-Goo-2.0.0/Goo.aplc')
→T.GoToTidyUp~∨/'Galaxy from the developer''''s test server'⍷body
⍝ Now for the ReInstall we give the test server a higher priority then "local"
indTest←TC.MyUserSettings.registries.alias⍳⊂'tatin-test'
testWas←indTest⊃TC.MyUserSettings.registries.priority
(indTest⊃TC.MyUserSettings.registries).priority←105
parms←TC.CreateReInstallParms
parms.update←1                 ⍝ That must not make a difference here
→T.GoToTidyUp'example-Too-1.0.0'≢∊parms TC.ReInstallDependencies dir
body←⊃⎕NGET(dir,'/example-Goo-2.0.0/Goo.aplc')
→T.GoToTidyUp~∨/'Galaxy from 2.0.0 on Test Server'⍷body
r←T._OK
∆TidyUp:
indLocal←TC.MyUserSettings.registries.alias⍳⊂'local'
(indLocal⊃TC.MyUserSettings.registries).priority←localWas
indTest←TC.MyUserSettings.registries.alias⍳⊂'tatin-test'
(indTest⊃TC.MyUserSettings.registries).priority←testWas
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_ReInstall_010(stopFlag batchFlag);⎕TRAP;zipFilename;installFolder;res;rc;msg
⍝ Exercise `ReInstallDependencies on a user command package (install into [MyUCMDs])
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
zipFilename←∆TEMP_SERVER_FOLDER,'/example-UC-1.0.0/example-UC-1.0.0.zip'
installFolder←TC.GetMyUCMDsFolder'UC'
res←TC.InstallPackages zipFilename'[myucmdS]'
Assert'example-UC-1.0.0'≡∊res
res←TC.ReInstallDependencies'[myucmds]UC'(∆TEMP_SERVER_FOLDER,'/')
→T.GoToTidyUp'example-UC-1.0.0'≢∊res
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce TC.GetMyUCMDsFolder'UC'
msg Assert rc=0
⍝Done
r←Test_ScanRegistries_002(stopFlag batchFlag);⎕TRAP;path
⍝ Search for a specific package without specifying a Registry in order to force Tatin to perform a scan
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
path←TC.EstablishRegistry'aplteam-APLProcess'
→T.PassesIf≡/F.AddTrailingSep¨F.NormalizePath¨∆TEMP_REGISTRY_FOLDER path
path←TC.EstablishRegistry'aplteam-APLProcess-0'
→T.PassesIf≡/F.AddTrailingSep¨F.NormalizePath¨∆TEMP_REGISTRY_FOLDER path
path←TC.EstablishRegistry'aplteam-APLProcess-0.3'
→T.PassesIf≡/F.AddTrailingSep¨F.NormalizePath¨∆TEMP_REGISTRY_FOLDER path
r←T._OK
⍝Done
r←Test_ScanRegistries_003(stopFlag batchFlag);⎕TRAP;path;ind;qdmx
⍝ Enforce a Registry scan after defining a non-existing Registry in order to provoke a problem
⍝ Here we call it as an API function, and that should result in an error
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
TC.MyUserSettings.AddRegistry'[DoesNotExist]https://does-not-exist.forsure'
ind←TC.MyUserSettings.registries.alias⍳⊂⎕C'DoesNotExist'
(ind⊃TC.MyUserSettings.registries).priority←1+⌈/TC.MyUserSettings.registries.priority
:Trap 345 347
path←TC.EstablishRegistry'[DoesNotExist]aplteam-APLProcess'
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp~∧/∨/¨'did not respond' 'https://does-not-exist.forsure/'⍷¨⊂⎕c qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
TC.MyUserSettings.RemoveRegistry'[DoesNotExist]'
⍝Done
r←Test_ScanRegistries_004(stopFlag batchFlag);⎕TRAP;path;ind;askUser
⍝ Enforce a Registry scan after defining a non-existing Registry in order to provoke a problem (simulate user command)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
TC.MyUserSettings.AddRegistry'[DoesNotExist]https://does-not-exist.forsure'
ind←TC.MyUserSettings.registries.alias⍳⊂⎕C'DoesNotExist'
(ind⊃TC.MyUserSettings.registries).priority←1+⌈/TC.MyUserSettings.registries.priority
askUser←1
TC.CommTools.Select_Choices←1 2⍴'https://does-not-exist.forsure/ did not respond when interrogated for aplteam-APLProcess' 'Skip'
path←askUser TC.EstablishRegistry'aplteam-APLProcess'
r←T._OK
∆TidyUp:
TC.CommTools.Cleanup
TC.MyUserSettings.RemoveRegistry'[DoesNotExist]'
⍝Done
r←Test_ScanRegistries_005(stopFlag batchFlag);⎕TRAP;ind;qdmx
⍝ Enforce a Registry scan. The first "Registry" returns HTML rather JSON5
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
TC.MyUserSettings.AddRegistry'[NotTatinServer]https://guardian.co.uk'
ind←TC.MyUserSettings.registries.alias⍳⊂⎕C'NotTatinServer'
(ind⊃TC.MyUserSettings.registries).priority←1+⌈/TC.MyUserSettings.registries.priority
:Trap ##.Registry.ErrorNo
{}TC.EstablishRegistry'aplteam-APLProcess'
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Failed with status code 301'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
TC.MyUserSettings.RemoveRegistry'[NotTatinServer]'
⍝Done
r←Test_Server_001(stopFlag batchFlag);⎕TRAP;ind;version;serverVersion;request;res
⍝ Check whether the Tatin server carries the same version number as the client
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
request←R.NewRequest 0
request.RequestTarget←'/'
res←TC.SendAndReceive(TC.ReplaceRegistryAlias'[localhost]')request
Assert 200≡res.StatusCode
→T.PassesIf(≢res.Headers)≥ind←(⊃¨res.Headers)⍳⊂'x-tatin'
version←2⊃Reg.Version
serverVersion←ind 2⊃res.Headers
→T.PassesIf version≡serverVersion
r←T._OK
⍝Done
r←Test_Server_002(stopFlag batchFlag);⎕TRAP
;response;q
⍝ Requests a package that does not exist.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
response←'[localhost]'TC.GetPackageViaHTTP_'aplteam-DoesNotExist-1.9.2'
→T.PassesIf 404≡response.StatusCode
r←T._OK
⍝Done
r←Test_Server_003(stopFlag batchFlag);⎕TRAP;filename;response;q
⍝ Requests an existing package with a full package ID (= including the version number) in lowercase
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
response←'[localhost]'TC.GetPackageViaHTTP_'aplteam-filesanddirs-3.2.1'
→T.PassesIf 200=response.StatusCode
filename←∆TEMP_SERVER_FOLDER,{'/',⍵,'/',⍵,'.zip'}'aplteam-FilesAndDirs-3.2.1'
→T.PassesIf response.Content≡Reg.ReadNativeFile filename
r←T._OK
⍝Done
r←Test_Server_004(stopFlag batchFlag);⎕TRAP;request;res
⍝ URL is neither a package ID nor a specific REST command: no version; therefore it's not a valid request.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
request←R.NewRequest 0
request.RequestTarget←'/does_not_exist'
res←TC.SendAndReceive(TC.ReplaceRegistryAlias'[localhost]')request
→T.PassesIf 404≡res.StatusCode
r←T._OK
⍝Done
r←Test_Server_005(stopFlag batchFlag);⎕TRAP;request;res
⍝ Requests index.html. Must led to the home page being displayed.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
request←R.NewRequest 0
request.RequestTarget←'/index.html'
res←TC.SendAndReceive(TC.ReplaceRegistryAlias'[localhost]')request
→T.PassesIf∨/'Tatin Tests (local)'⍷res.Content
r←T._OK
⍝Done
r←Test_Server_006(stopFlag batchFlag);⎕TRAP;ind;version;serverVersion;request;res
⍝ Simulate a request from an outdated version of Tatin. Must result in a 400 (bad request)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
request←R.NewRequest 0
request.RequestTarget←'/'
request.Headers,←⊂'x-tatin' '0.1'
r←TC.SendAndReceive(TC.ReplaceRegistryAlias'[localhost]')request
→T.PassesIf r.StatusCode=400
→T.PassesIf∨/'Request came from an outdated version of Tatin. Please update your Tatin client.'⍷r.Content
r←T._OK
⍝Done
r←Test_Server_007(stopFlag batchFlag);⎕TRAP;policy
⍝ Exercise `GetDeletePolicy`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
policy←TC.GetDeletePolicy'[tatin]'
→T.PassesIf'None'≡policy
r←T._OK
⍝Done
r←Test_Server_008(stopFlag batchFlag);⎕TRAP;request;response
⍝ Send a request that lacks the leading / after "GET " which is required by Apache etc.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
request←TC.R.NewRequest 0
request.RequestTarget←'v1/list-packages'
response←TC.SendAndReceive(TC.ReplaceRegistryAlias'[localhost]')request
→T.PassesIf response.StatusCode≡400
r←T._OK
⍝Done
r←Test_Server_009(stopFlag batchFlag);⎕TRAP;request;response;folder;noOf;ini;m
⍝ Send a request that makes the server crash and then check email and look for dump files
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
ini←⎕NEW ##.IniFiles(,⊂∆TEMP_SERVER_FOLDER,'/../Server/server.ini')
folder←⊃ini.Get'TRAP:Folder'
folder←'<TEMP>'⎕R(739⌶0)⊣folder
folder←¯1↓1⊃⎕NPARTS(¯1×(¯1↑folder)∊'/\')↓folder
'Create!'F.CheckPath folder,'/Errors'
noOf←≢F.ListFiles folder,'/Errors'
request←TC.R.NewRequest 0
request.RequestTarget←'v1/crash'
response←TC.SendAndReceive(TC.ReplaceRegistryAlias'[localhost]')request
→T.PassesIf response.StatusCode≡500
→T.PassesIf(2+noOf)=≢F.ListFiles folder,'/Errors'   ⍝ The HTML file and the DCF file
:If ~batchFlag
:AndIf 'kai'≡⎕AN
m←'You should have received an email from the local test server reporting a crash, correct?'
→T.PassesIf 1 TC.YesOrNo m
:EndIf
r←T._OK
⍝Done
r←Test_Server_010(stopFlag batchFlag);⎕TRAP;installFolder;packageIDs;listOfPackages2
;filename;q
⍝ Install a package from the server
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
installFolder←∆GetTempDir'/Installed Packages'
packageIDs←TC.InstallPackages'[localhost]/aplteam-FilesAndDirs-3.2.1'installFolder
filename←installFolder,'/',Reg.DependenciesFilename
→T.GoToTidyUp'aplteam-FilesAndDirs-3.2.1'≢∊packageIDs
r←T._OK
∆TidyUp:
Assert 0=1⊃F.RmDir ∆GetTempDir''
⍝Done
r←Test_Server_011(stopFlag batchFlag);⎕TRAP;installFolder;paths;ref
⍝ Load a package that depends on a package on the server, and use an alias for it
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
ref←⍎'TEMP'#.⎕NS''
installFolder←∆GetTempDir'/Installed Packages'
paths←TC.InstallPackages(∆TEMP_TEST_DATA,'/Aliase/MyApp1/aplteam-MyApp1-1.0.0.zip')installFolder
{}TC.LoadDependencies installFolder #.TEMP
→T.GoToTidyUp 9.4≠#.TEMP.MyApp1.⎕NC⊂,'F'
→T.GoToTidyUp'World'≢#.TEMP.MyApp1.Hello 1
→T.GoToTidyUp'Galaxy'≢#.TEMP.MyApp1.Hello 2
→T.GoToTidyUp 0=≢⊃#.TEMP.MyApp1.Hello 3
r←T._OK
∆TidyUp:
Assert 0=1⊃F.RmDir ∆GetTempDir''
⍝Done
r←Test_Server_012(stopFlag batchFlag);⎕TRAP;paths;res;ref
⍝ Load a package that depends on a package on the server, and use an alias for it (with overwrite flag)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
ref←⍎'TEMP'#.⎕NS''
res←TC.LoadDependencies(∆TEMP_TEST_DATA,'/Aliase2')#.TEMP
→T.GoToTidyUp 9.4≠#._tatin.aplteam_APLGit_0_24_0.⎕NC⊂,'F'
res←TC.LoadDependencies(∆TEMP_TEST_DATA,'/Aliase2')#.TEMP
→T.GoToTidyUp 9.4≠#._tatin.aplteam_APLGit_0_24_0.⎕NC⊂,'F'
→T.GoToTidyUp 0=#._tatin.aplteam_APLGit_0_24_0.⎕NC'I_WAS_HERE'
res←1 TC.LoadDependencies(∆TEMP_TEST_DATA,'/Aliase2')#.TEMP
→T.GoToTidyUp 9.4≠#._tatin.aplteam_APLGit_0_24_0.⎕NC⊂,'F'
→T.GoToTidyUp 0≠#._tatin.aplteam_APLGit_0_24_0.⎕NC'I_WAS_HERE'
r←T._OK
∆TidyUp:
⍝Done
r←Test_Server_050(stopFlag batchFlag);⎕TRAP
;list
⍝ List all packages in the given Registry
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←TC.ListPackages(TC.ReplaceRegistryAlias'[localhost]')
→T.PassesIf 0<≢list
→T.PassesIf 2=⍴⍴list
→T.PassesIf∧/Reg.IsValidPackageID_WithoutVersionNo¨(list[;1])
→T.PassesIf(list[;1]+.=¨'-')∧.=1
r←T._OK
⍝Done
r←Test_Server_059(stopFlag batchFlag);⎕TRAP
;list
⍝ List all versions for a given package in a given Registry for a specific {group}-{name}-{major.minor}
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←,TC.ListVersions'[localhost]/aplteam-APLProcess-0.2'
→T.PassesIf(,⊂'aplteam-APLProcess-0.2')≡∪{⍵↓⍨{-⍵⍳'.'}⌽⍵}¨list
list←,TC.ListVersions'[localhost]/aplteam-APLProcess-1.0'
→T.PassesIf(,⊂'aplteam-APLProcess-1.0')≡∪{⍵↓⍨{-⍵⍳'.'}⌽⍵}¨list
r←T._OK
⍝Done
r←Test_Server_060(stopFlag batchFlag);⎕TRAP;list
⍝ List all tags
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
list←TC.ListTags(TC.ReplaceRegistryAlias'[localhost]')
→T.PassesIf 0<≢list
→T.PassesIf 2=|≡list
r←T._OK
⍝Done
r←Test_Server_061(stopFlag batchFlag);⎕TRAP;parms;list1;list2;list3
⍝ List all packages with a particular tag
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
parms←⎕NS''
list1←parms TC.ListPackages(TC.ReplaceRegistryAlias'[localhost]')
→T.PassesIf 0<≢list1
parms.tags←'winndows-servizes'
list2←parms TC.ListPackages(TC.ReplaceRegistryAlias'[localhost]')
→T.PassesIf 0<≢list2
→T.PassesIf>/≢¨list1 list2
parms.group←'aplteam'
list3←parms TC.ListPackages(TC.ReplaceRegistryAlias'[localhost]')
→T.PassesIf 0<≢list3
→T.PassesIf>/≢¨list1 list3
r←T._OK
⍝Done
r←Test_Server_100(stopFlag batchFlag);filename;zipFilename;⎕TRAP;rc;msg
;serverPath;packageID;index1;index2;zip;cfg;body;clientCfg;dir;src;res
⍝ Publish a package without dependencies to the server.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'zip'
F.MkDir src zip
serverPath←∆TEMP_SERVER_FOLDER,'/'
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'0.1.0-beta-2+123'
cfg.source←'Test.apln'
cfg.os_win←1
cfg.license←'MIT'
TC.WritePackageConfigFile src cfg
packageID←'Example-Package_A-0.1.0-beta-2'
filename←serverPath,'/',Reg.Index.GetIndexFilename
Assert F.IsFile filename ⍝ If that fails the server probably does not run locally?!
index1←1⊃F.NGET filename 1
(rc msg zipFilename)←TC.PublishPackage src'[localhost]'
Assert 200=rc
index2←1⊃F.NGET(serverPath,'/',Reg.Index.GetIndexFilename)1
→T.GoToTidyUp(1+≢index1)≠≢index2
→T.GoToTidyUp 0=F.IsDir serverPath,packageID
→T.GoToTidyUp 0=F.IsFile serverPath,packageID,'/',packageID,'.zip'
→T.GoToTidyUp 0=F.IsFile serverPath,packageID,'/apl-package.json'
→T.GoToTidyUp 1=F.IsFile serverPath,packageID,'/',TC.Reg.DependenciesFilename
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert 0=⊃F.RmDir serverPath,'/',packageID  ⍝ Error? Try →⎕LC
∆RecompileIndexOnServer
F.DeleteFile zipFilename
⍝Done
r←Test_Server_101(stopFlag batchFlag);⎕TRAP;zipFilename;msg;rc
;packageID;serverPath;index1;index2;zip;cfg;body;clientCfg;dir;src;res
⍝ Publish a package with dependencies to the server.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'zip'
F.MkDir src zip
serverPath←∆TEMP_SERVER_FOLDER
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'0.1.0'
cfg.source←'Test.apln'
cfg.os_win←1
cfg.license←'MIT'
TC.WritePackageConfigFile src cfg
(⊂'aplteam-APLTreeUtils-6.0.0')F.NPUT src,'/',Reg.DependenciesFilename
packageID←'Example-Package_A-0.1.0'
index1←1⊃F.NGET(serverPath,'/',Reg.Index.GetIndexFilename)1
(rc msg zipFilename)←TC.PublishPackage src(TC.ReplaceRegistryAlias'[localhost]')
Assert 200=rc
index2←1⊃F.NGET(serverPath,'/',Reg.Index.GetIndexFilename)1
→T.GoToTidyUp(1+≢index1)≠≢index2
→T.GoToTidyUp 0=F.IsDir serverPath,'/',packageID
→T.GoToTidyUp 0=F.IsFile serverPath,'/',packageID,'/',packageID,'.zip'
→T.GoToTidyUp 0=F.IsFile serverPath,'/',packageID,'/apl-package.json'
→T.GoToTidyUp 0=F.IsFile serverPath,'/',packageID,'/',Reg.DependenciesFilename
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⎕DL 0.1
Assert 0=⊃F.RmDir serverPath,'/',packageID  ⍝ Error? Try →⎕LC
:Trap 6 ⋄ F.DeleteFile zipFilename ⋄ :EndTrap
∆RecompileIndexOnServer
⍝Done
r←Test_Server_103(stopFlag batchFlag);⎕TRAP;dir;src;zip;unzip;serverPath;body;cfg;packageID;rc;msg;zipFilename;ts
⍝ Publish a package with dependencies to the server, then load it and check "date" in the config. Was once a bug
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
dir←∆GetTempDir ⍬
(src zip unzip)←(⊂dir,'/'),¨'src' 'zip' 'unzip'
F.MkDir src zip unzip
serverPath←∆TEMP_SERVER_FOLDER
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'0.1.0'
cfg.source←'Test.apln'
cfg.os_win←1
cfg.license←'MIT'
TC.WritePackageConfigFile src cfg
(rc msg zipFilename)←TC.PublishPackage src(TC.ReplaceRegistryAlias'[localhost]')
Assert 200=rc
packageID←'Example-Package_A-0.1.0'
{}TC.InstallPackages((TC.ReplaceRegistryAlias'[localhost]'),'/',packageID)unzip
ts←{⍵.date}TC.Reg.GetJsonFromFile unzip,'/',packageID,'/apl-package.json'
→T.GoToTidyUp 645≠⎕DR ts
→T.GoToTidyUp(⌊ts)≠60 ⎕DT⊂3↑⎕TS
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⎕DL 0.1
Assert 0=⊃F.RmDir serverPath,'/',packageID  ⍝ Error? Try →⎕LC
F.DeleteFile zipFilename
∆RecompileIndexOnServer
⍝Done
r←Test_Server_105(stopFlag batchFlag);⎕TRAP;zipFilename;rc;msg
;serverPath;qdmx;zip;cfg;body;clientCfg;dir;src;res
⍝ Publish a package twice - the second time must result in an error
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'zip'
F.MkDir src zip
serverPath←∆TEMP_SERVER_FOLDER
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'0.1.0'
cfg.source←'Test.apln'
cfg.os_win←1
cfg.license←'MIT'
TC.WritePackageConfigFile src cfg
(rc msg zipFilename)←TC.PublishPackage src(TC.ReplaceRegistryAlias'[localhost]')
Assert 200=rc
:Trap ##.Registry.ErrorNo
TC.PublishPackage src(TC.ReplaceRegistryAlias'[localhost]')
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Server: The package has already been published'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert 0=⊃F.RmDir serverPath,'/Example-Package_A-0.1.0'
∆RecompileIndexOnServer
F.DeleteFile zipFilename
⍝Done
r←Test_Server_200(stopFlag batchFlag);⎕TRAP;packageID;tree
⍝ Request a build list for a package with no dependencies
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
packageID←'example-Zoo-3.0.0'
tree←TC.GetDependencyTree(TC.ReplaceRegistryAlias'[localhost]'),packageID
{}TC.CloseConnections 1
→T.PassesIf 1 'example-Zoo-3.0.0' (TC.ReplaceRegistryAlias'[localhost]')≡,tree
r←T._OK
⍝Done
r←Test_Server_201(stopFlag batchFlag);⎕TRAP;packageID;tree;expected
⍝ Request a build list for a package with one dependency that lives on a different server
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
packageID←'elsewhere-Boo-3.1.2'
tree←TC.GetDependencyTree(TC.ReplaceRegistryAlias '[localhost]'),packageID
{}TC.CloseConnections 1
→T.PassesIf 6=≢tree
expected←'elsewhere-Boo-3.1.2' 'example-Foo-1.0.0' 'elsewhere-strange-1.0.0' 'aplteam-APLTreeUtils-6.0.5' 'example-Goo-2.0.0' 'example-Zoo-3.0.0'
→T.PassesIf expected ∆LazyMatch tree[;2]
expected←1 0 0 0 0 0
→T.PassesIf expected≡tree[;1]
r←T._OK
⍝Done
r←Test_Server_202(stopFlag batchFlag);⎕TRAP;qdmx
⍝ Ask for best version of an invalid package ID
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
:Trap ##.Registry.ErrorNo
TC.GetBestVersionNumber'1IamInvalid' 'https://localhost'
→T.FailsIf 1
:Else
qdmx←⎕DMX
→T.PassesIf'Invalid package ID'≡qdmx.EM
:EndTrap
r←T._OK
⍝Done
r←Test_Server_203(stopFlag batchFlag);⎕TRAP;result;best;statusCode;errMsg
⍝ Ask for best version of a package ID with major number but without minor and patch number
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(statusCode errMsg result)←TC.GetBestVersionNumber'aplteam-APLProcess-0'(TC.ReplaceRegistryAlias'[localhost]')
→T.PassesIf statusCode=200
best←∆TEMP_SERVER_FOLDER ∆GetBestVersionFor'aplteam-APLProcess-0*'
→T.PassesIf≡/{⍵↓⍨¨≢¨TC.RemovePackageID¨⍵}result best
r←T._OK
⍝Done
r←Test_Server_204(stopFlag batchFlag);⎕TRAP;qdmx;result;best;statusCode;errMsg
⍝ Ask for best version of a package ID with major and minor number but without a patch number
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(statusCode errMsg result)←TC.GetBestVersionNumber'aplteam-APLProcess-0.2' (TC.ReplaceRegistryAlias '[localhost]')
→T.PassesIf statusCode=200
best←∆TEMP_SERVER_FOLDER ∆GetBestVersionFor'aplteam-APLProcess-0.2*'
→T.PassesIf≡/{⍵↓⍨¨≢¨TC.RemovePackageID¨⍵}result best
r←T._OK
⍝Done
r←Test_Server_205(stopFlag batchFlag);⎕TRAP;result;statusCode;errMsg
⍝ Ask for best version of a complete package ID (does not make much sense but may confirm the existence)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(statusCode errMsg result)←TC.GetBestVersionNumber'aplteam-APLProcess-0.2.11' (TC.ReplaceRegistryAlias '[localhost]')
→T.PassesIf statusCode=200
→T.PassesIf result≡(TC.ReplaceRegistryAlias '[localhost]'),'aplteam-APLProcess-0.2.11'
r←T._OK
⍝Done
r←Test_Server_207(stopFlag batchFlag);⎕TRAP;result;best;expected;statusCode;errMsg
⍝ Ask for best version of a package ID with major number without minor and patch number; excludes betas
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(statusCode errMsg result)←1 TC.GetBestVersionNumber'example-versions-1' (TC.ReplaceRegistryAlias '[localhost]')
→T.PassesIf statusCode=200
expected←(TC.ReplaceRegistryAlias '[localhost]'),'example-versions-1.0.0'
→T.PassesIf expected≡result
r←T._OK
⍝Done
r←Test_Server_220(stopFlag batchFlag);⎕TRAP;result;reg;res;packageID
⍝ Request a package config file
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
packageID←(TC.ReplaceRegistryAlias'[localhost]'),'aplteam-OS-2.0.1'
res←TC.ReadPackageConfigFile packageID
→T.PassesIf 0<≢res
→T.PassesIf'{}'≡∊res[1,≢res]
r←T._OK
⍝Done
r←Test_Server_300(stopFlag batchFlag);⎕TRAP;dir;res;url
⍝ Install a particular package via http.
⍝ Supposed to deliver the best one
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
url←TC.ReplaceRegistryAlias'[localhost]'
res←TC.InstallPackages(url,'aplteam-APLProcess-0.2.1')dir
→T.PassesIf 1=≢res
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Server_302(stopFlag batchFlag);⎕TRAP;dir;was;localReg;res
⍝ Install particular package without specifying a Registry. Should find it on the test server
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
localReg←TC.MyUserSettings.GetRegistry'[local]'
was←localReg.priority
localReg.priority←1  ⍝ Make sure it goes to the end of the food chain
TC.MyUserSettings.ReplaceRegistry ⎕NEW TC.DefineRegistry(,⊂localReg)
localReg.priority←was
res←TC.InstallPackages'aplteam-APLProcess-0.2.1'dir
→T.PassesIf 1=≢res
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
TC.MyUserSettings.ReplaceRegistry ⎕NEW TC.DefineRegistry(,⊂localReg)
⍝Done
r←Test_Server_304(stopFlag batchFlag);⎕TRAP;dir;noOf
⍝ Load particular package with just a major number.
⍝ Should find the best minor+patch number on the test server.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
noOf←TC.LoadPackages((TC.ReplaceRegistryAlias '[localhost]'),'aplteam-APLProcess-0')#.TEMP
→T.GoToTidyUp 1≠noOf
→T.GoToTidyUp'0.5.1'≢∆RemoveBuildFromVersion 2⊃#.TEMP.APLProcess.Version
r←T._OK
∆TidyUp:
⍝Done
r←Test_Server_350(stopFlag batchFlag);⎕TRAP;res
⍝ Load particular package via http
⍝ Supposed to deliver the best one
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
'TEMP'#.⎕NS''
res←TC.LoadPackages((TC.ReplaceRegistryAlias '[localhost]'),'aplteam-APLProcess-0.2.1')#.TEMP
→T.PassesIf 1=res
→T.PassesIf 3=≢#.TEMP.APLProcess.Version
r←T._OK
∆TidyUp:
⍝Done
r←Test_Server_400(stopFlag batchFlag);⎕TRAP;html
⍝ Ask for the home page; pretends to be a Browser
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
html←∆GetHtmlFromServer'[tatin-test]'
→T.PassesIf∨/'<h2>Main page</h2>'⍷html
r←T._OK
⍝Done
r←Test_Server_401(stopFlag batchFlag);⎕TRAP;html
⍝ Ask for a list of all packages but aggregated; pretends to be a Browser
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
html←∆GetHtmlFromServer'[localhost]',Reg.VersionOf_REST,'/packages'
→T.PassesIf∨/'<h2>List of packages</h2>'⍷html
r←T._OK
∆TidyUp:
⍝Done
r←Test_Server_402(stopFlag batchFlag);⎕TRAP;html
⍝ Ask for a list of all groups; pretends to be a Browser
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
html←∆GetHtmlFromServer'[localhost]/v1/groups'
→T.PassesIf∨/'<h2>List of all groups</h2>'⍷html
r←T._OK
⍝Done
r←Test_Server_403(stopFlag batchFlag);⎕TRAP;html
⍝ Ask for a list of all versions for a particular package ID; pretends to be a Browser
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
html←∆GetHtmlFromServer'[localhost]',Reg.VersionOf_REST,'/packages/versions/aplteam-APLTreeUtils'
→T.PassesIf∨/'All versions of "aplteam-APLTreeUtils"</h2>'⍷html
r←T._OK
∆TidyUp:
⍝Done
r←Test_Server_404(stopFlag batchFlag);⎕TRAP;html
⍝ Ask for a the details of a particular package ID; pretends to be a Browser
⍝ Supposed to deliver the best one
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
html←∆GetHtmlFromServer'[localhost]',Reg.VersionOf_REST,'/packages/details/aplteam-APLTreeUtils'
→T.PassesIf∨/'<h2>Details of latest package for &lt;aplteam-APLTreeUtils&gt;</h2>'⍷html
→T.PassesIf∨/'version: "7.0.0"'⍷html
html←∆GetHtmlFromServer'[localhost]',Reg.VersionOf_REST,'/packages/details/aplteam-APLTreeUtils-6'
→T.PassesIf∨/'<h2>Details of latest package for &lt;aplteam-APLTreeUtils&gt; of major version 6</h2>'⍷html
→T.PassesIf∨/'version: "6.0.11"'⍷html
r←T._OK
⍝Done
r←Test_Server_405(stopFlag batchFlag);⎕TRAP;result
⍝ Ask for the file Assets/img/packkman.png
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
result←∆GetHtmlFromServer'[localhost]/Assets/img/tatin.png'
→T.PassesIf'PNG'≡3↑1↓result
r←T._OK
∆TidyUp:
⍝Done
r←Test_Server_406(stopFlag batchFlag);⎕TRAP;result
⍝ Ask for a particular CSS files
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
result←∆GetHtmlFromServer'[localhost]/Assets/MarkAPL/Files/MarkAPL_screen.css'
→T.PassesIf∨/'MarkAPL'⍷∊result
r←T._OK
⍝Done
r←Test_Server_407(stopFlag batchFlag);⎕TRAP;result;request;res
⍝ Try the HTTP "PATCH" verb: not implemented
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
request←R.NewRequest 0
request.Method←'PATCH'
request.RequestTarget←'/Foo'
request.Headers,←⊂'Accept' 'application/json'
res←TC.SendAndReceive ∆LocalHostAndPort request
→T.PassesIf 501=res.StatusCode
r←T._OK
⍝Done
r←Test_Server_408(stopFlag batchFlag);⎕TRAP;result;request;res;target;uri
⍝ Request package details
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
target←Reg.VersionOf_REST,'/packages/details/'
uri←TC.ReplaceRegistryAlias'[localhost]'
request←R.NewRequest 0
request.RequestTarget←target,'aplteam-APLProcess'
request.Headers,←⊂'Accept' 'application/json'
res←TC.SendAndReceive uri request
→T.PassesIf 200≡res.StatusCode
→T.PassesIf∨/'version: "1.0.0"'⍷res.Content
request←R.NewRequest 0
request.RequestTarget←target,'aplteam-APLProcess-0'
request.Headers,←⊂'Accept' 'application/json'
res←TC.SendAndReceive uri request
→T.PassesIf 200≡res.StatusCode
→T.PassesIf∨/'version: "0.5.1'⍷res.Content
request←R.NewRequest 0
request.RequestTarget←target,'aplteam-APLProcess-0.2'
request.Headers,←⊂'Accept' 'application/json'
res←TC.SendAndReceive uri request
→T.PassesIf 200≡res.StatusCode
→T.PassesIf∨/'version: "0.2.12"'⍷res.Content
request←R.NewRequest 0
request.RequestTarget←target,'aplteam-APLProcess-0.2.9'
request.Headers,←⊂'Accept' 'application/json'
res←TC.SendAndReceive uri request
→T.PassesIf 200≡res.StatusCode
→T.PassesIf∨/'version: "0.2.9"'⍷res.Content
request←R.NewRequest 0
request.RequestTarget←target,'aplteam-APLProcess-11.12.13'
request.Headers,←⊂'Accept' 'application/json'
res←TC.SendAndReceive uri request
→T.PassesIf 404≡res.StatusCode
r←T._OK
⍝Done
r←Test_Server_409(stopFlag batchFlag);⎕TRAP;html
⍝ Ask for a list of all tags; pretends to be a Browser
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
html←∆GetHtmlFromServer'[localhost]/v1/tags'
→T.PassesIf∨/'<h2>List of all tags</h2>'⍷html
r←T._OK
∆TidyUp:
⍝Done
r←Test_Server_410(stopFlag batchFlag);⎕TRAP;html
⍝ Ask for a list of all major versions of a specific package; pretends to be a browser
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
html←∆GetHtmlFromServer'[localhost]',Reg.VersionOf_REST,'/packages/major_versions/aplteam-APLProcess'
→T.PassesIf∨/'<h2>Major versions of "aplteam-APLProcess"</h2>'⍷html
→T.PassesIf 2=+/'<tr>'⍷html
r←T._OK
⍝Done
r←Test_Server_411(stopFlag batchFlag);⎕TRAP;html
⍝ Ask for version information
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
html←∆GetHtmlFromServer'[localhost]/v1/version-information'
→T.PassesIf∨/'minimum version required on the client side'⍷html
r←T._OK
⍝Done
r←Test_Server_412(stopFlag batchFlag);⎕TRAP;html
⍝ Ask for the documentation home page; pretends to be a Browser
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
html←∆GetHtmlFromServer'[localhost]/v1/documentation'
→T.PassesIf 1=≢'<h2[^>]*>Tatin Documentation Center</h2>'⎕S 0⍠('Greedy' 0)⊣html
r←T._OK
∆TidyUp:
⍝Done
r←Test_Server_413(stopFlag batchFlag);⎕TRAP;html
⍝ Ask for all packages; pretends to be a Browser
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
html←∆GetHtmlFromServer'[localhost]/v1/all_packages'
→T.PassesIf∨/'<h2>List of all packages</h2>'⍷html
r←T._OK
⍝Done
r←Test_Server_414(stopFlag batchFlag);⎕TRAP;html
⍝ Ask for the version of Tatin on the server; pretends to be a Browser
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
html←∆GetHtmlFromServer'[localhost]/v1/version'
→T.PassesIf∨/'<h2>Tatin Version</h2>'⍷html
r←T._OK
∆TidyUp:
⍝Done
r←Test_Server_415(stopFlag batchFlag);⎕TRAP;html
⍝ Ask for a list of all packages; pretends to be a Browser
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
html←∆GetHtmlFromServer'[localhost]/v1/all_packages'
→T.PassesIf∨/'<h2>List of all packages</h2>'⍷html
r←T._OK
∆TidyUp:
⍝Done
r←Test_Server_500(stopFlag batchFlag);⎕TRAP;packageID;serverPath;qdmx;reg;oldCredentials;buff
;zip;cfg;body;clientCfg;dir;src;res
⍝ Try to publish a package with an invalid API key
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'zip'
F.MkDir src zip
serverPath←∆TEMP_SERVER_FOLDER
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'Example'
cfg.name←'Package_A'
cfg.version←'0.1.0'
cfg.source←'Test.apln'
cfg.license←'MIT'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
packageID←'Example-Package_A-0.1.0'
reg←TC.MyUserSettings.GetRegistry(TC.ReplaceRegistryAlias'[localhost]')
oldCredentials←reg.api_key
reg.api_key←'Firlefanz'
TC.MyUserSettings.ReplaceRegistry ⎕NEW TC.DefineRegistry(,⊂reg)
:Trap ##.Registry.ErrorNo
buff←TC.PublishPackage src(TC.ReplaceRegistryAlias'[localhost]')
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Server: Unauthorized request (401)'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
reg.api_key←oldCredentials
TC.MyUserSettings.ReplaceRegistry ⎕NEW TC.DefineRegistry(,⊂reg)
Assert 0=⊃F.RmDir dir
Assert 0=⊃F.RmDir serverPath,'/',packageID
∆RecompileIndexOnServer
F.DeleteFile(739⌶0),'/',(⊃{⍺,'-',⍵}/cfg.(group name version)),'.zip'
⍝Done
r←Test_Server_501(stopFlag batchFlag);⎕TRAP;packageID;serverPath;qdmx;reg;oldCredentials
;zip;cfg;body;clientCfg;dir;src;res
⍝ Publish a package with a group name that requires a specific API key but use the generic one
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'zip'
F.MkDir src zip
serverPath←∆TEMP_SERVER_FOLDER
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'ProtectedGroup'
cfg.name←'Package_A'
cfg.version←'0.1.0'
cfg.source←'Test.apln'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
packageID←'ProtectedGroup-Package_A-0.1.0'
reg←TC.MyUserSettings.GetRegistry(TC.ReplaceRegistryAlias'[localhost]')
oldCredentials←reg.api_key
reg.api_key←'Test-API-Key'        ⍝ This should NOT fit this particular group (though any other)
:Trap ##.Registry.ErrorNo
TC.PublishPackage src(TC.ReplaceRegistryAlias'[localhost]')
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'Server: Unauthorized request (401)'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
reg.api_key←oldCredentials
TC.MyUserSettings.ReplaceRegistry ⎕NEW TC.DefineRegistry(,⊂reg)
Assert 0=⊃F.RmDir dir
Assert 0=⊃F.RmDir serverPath,'/',packageID
F.DeleteFile(739⌶0),'/',packageID,'.zip'
∆RecompileIndexOnServer
⍝Done
r←Test_Server_502(stopFlag batchFlag);⎕TRAP;dir;src;zip;serverPath;body;cfg;reg;packageID;zipFilename;rc;msg;oldCredentials
⍝ Publish a package and then attempt to delete it with an invalid API key
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'zip'
F.MkDir src zip
serverPath←∆TEMP_SERVER_FOLDER
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'test'
cfg.name←'Package_A'
cfg.version←'0.1.0'
cfg.source←'Test.apln'
cfg.os_win←1
cfg.license←'MIT'
TC.WritePackageConfigFile src cfg
packageID←'test-Package_A-0.1.0'
(rc msg zipFilename)←TC.PublishPackage src(TC.ReplaceRegistryAlias'[localhost]')
Assert 200=rc
reg←TC.MyUserSettings.GetRegistry(TC.ReplaceRegistryAlias'[localhost]')
oldCredentials←reg.api_key     ⍝ We need to reset this later
reg.api_key←'Invalid'
TC.MyUserSettings.ReplaceRegistry ⎕NEW TC.DefineRegistry(,⊂reg)
(rc msg)←TC.DeletePackages(TC.ReplaceRegistryAlias'[localhost]')packageID
→T.GoToTidyUp rc≠401
→T.GoToTidyUp'Server: Unauthorized request'≢∊msg
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert 0=⊃F.RmDir serverPath,'/',packageID
F.DeleteFile(739⌶0),'/',packageID,'.zip'
reg.api_key←oldCredentials
TC.MyUserSettings.ReplaceRegistry ⎕NEW TC.DefineRegistry(,⊂reg)
∆RecompileIndexOnServer
⍝Done
r←Test_Server_503(stopFlag batchFlag);⎕TRAP;dir;src;zip;serverPath;body;cfg;packageID;rc;msg;list1;list2;oldPolicy;zipFilename
⍝ Publish a package and then delete it
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'zip'
F.MkDir src zip
serverPath←∆TEMP_SERVER_FOLDER
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'test'
cfg.name←'Package_A'
cfg.version←'0.1.0'
cfg.source←'Test.apln'
cfg.license←'MIT'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
packageID←'test-Package_A-0.1.0'
(rc msg zipFilename)←TC.PublishPackage src(TC.ReplaceRegistryAlias'[localhost]')
→T.GoToTidyUp 200≠rc
→T.GoToTidyUp 0≠≢msg
list1←({⍵.aggregate←0 ⋄ ⍵}⎕NS'')TC.ListPackages(TC.ReplaceRegistryAlias'[localhost]')
oldPolicy←∆SetServerPolicy'Any'
(rc msg)←TC.DeletePackages((TC.ReplaceRegistryAlias'[localhost]'))packageID
Assert 200=rc
list2←({⍵.aggregate←0 ⋄ ⍵}⎕NS'')TC.ListPackages(TC.ReplaceRegistryAlias'[localhost]')
→T.GoToTidyUp'test-Package_A-0.1.0'≢∊list1[;1]~list2[;1]
r←T._OK
∆TidyUp:
∆SetServerPolicy oldPolicy
Assert 0=⊃F.RmDir dir
Assert 0=⊃F.RmDir serverPath,'/',packageID
F.DeleteFile(739⌶0),'/',packageID,'.zip'
∆RecompileIndexOnServer
⍝Done
r←Test_Server_504(stopFlag batchFlag);⎕TRAP;dir;src;zip;serverPath;body;cfg;packageID;rc;msg;oldPolicy;zipFilename
⍝ Publish a non-beta package and attempt to delete it when the server's delete policy is "betas only"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'zip'
F.MkDir src zip
serverPath←∆TEMP_SERVER_FOLDER
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'test'
cfg.name←'Package_A'
cfg.version←'0.1.0'
cfg.source←'Test.apln'
cfg.os_win←1
cfg.license←'MIT'
TC.WritePackageConfigFile src cfg
packageID←'test-Package_A-0.1.0'
(rc msg zipFilename)←TC.PublishPackage src(TC.ReplaceRegistryAlias'[localhost]')
→T.GoToTidyUp 200≠rc
→T.GoToTidyUp 0≠≢msg
oldPolicy←∆SetServerPolicy'JustBetas'
(rc msg)←TC.DeletePackages((TC.ReplaceRegistryAlias'[localhost]'))packageID
→T.GoToTidyUp rc≠405
→T.GoToTidyUp~∧/∨/¨'test-Package_A-0.1.0' 'Not a beta version but the server policies allows deletion of betas only'⍷¨⊂msg
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
F.DeleteFile(739⌶0),'/',packageID,'.zip'
Assert 0=⊃F.RmDir serverPath,'/',packageID
∆RecompileIndexOnServer
:If 0<⎕NC'oldPolicy'
∆SetServerPolicy oldPolicy
:EndIf
⍝Done
r←Test_Server_505(stopFlag batchFlag);⎕TRAP;dir;src;zip;serverPath;body;cfg;packageID;rc;msg;list1;list2;oldPolicy;zipFilename
⍝ Publish a beta package and attempt to delete it when the server's delete policy is "just betas"
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'zip'
F.MkDir src zip
serverPath←∆TEMP_SERVER_FOLDER
packageID←'test-Package_A-0.1.0-alpha-1'
Assert 0=⊃F.RmDir serverPath,'/',packageID
∆RecompileIndexOnServer
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'test'
cfg.name←'Package_A'
cfg.version←'0.1.0-alpha-1'
cfg.source←'Test.apln'
cfg.os_win←1
cfg.license←'MIT'
TC.WritePackageConfigFile src cfg
(rc msg zipFilename)←TC.PublishPackage src(TC.ReplaceRegistryAlias'[localhost]')
→T.GoToTidyUp 200≠rc
→T.GoToTidyUp 0≠≢msg
∆RecompileIndexOnServer
list1←({⍵.aggregate←0 ⋄ ⍵}⎕NS'')TC.ListPackages(TC.ReplaceRegistryAlias'[localhost]')
oldPolicy←∆SetServerPolicy'JustBetas'
(rc msg)←TC.DeletePackages((TC.ReplaceRegistryAlias'[localhost]'))packageID
Assert 200=rc
list2←({⍵.aggregate←0 ⋄ ⍵}⎕NS'')TC.ListPackages(TC.ReplaceRegistryAlias'[localhost]')
→T.GoToTidyUp'test-Package_A-0.1.0-alpha-1'≢∊list1[;1]~list2[;1]
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
Assert 0=⊃F.RmDir serverPath,'/',packageID
F.DeleteFile(739⌶0),'/',packageID,'.zip'
∆RecompileIndexOnServer
∆SetServerPolicy oldPolicy
⍝Done
r←Test_Server_506(stopFlag batchFlag);⎕TRAP;packageID;serverPath;oldCredentials;reg
;zip;cfg;body;clientCfg;dir;src;res
⍝ Publish a package with a group name that requires no API key at all
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'zip'
F.MkDir src zip
serverPath←∆TEMP_SERVER_FOLDER
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'NeedsNoAPIkey'
cfg.name←'Package_M'
cfg.version←'0.1.0'
cfg.source←'Test.apln'
cfg.os_win←1
cfg.license←'MIT'
TC.WritePackageConfigFile src cfg
packageID←'NeedsNoAPIkey-Package_M-0.1.0'
reg←TC.MyUserSettings.GetRegistry(TC.ReplaceRegistryAlias'[localhost]')
oldCredentials←reg.api_key
reg.api_key←''                 ⍝ We do not provide an API key here!
res←TC.PublishPackage src(TC.ReplaceRegistryAlias'[localhost]')
→T.GoToTidyUp 200≢1⊃res
r←T._OK
∆TidyUp:
reg.api_key←oldCredentials
TC.MyUserSettings.ReplaceRegistry ⎕NEW TC.DefineRegistry(,⊂reg)
Assert 0=⊃F.RmDir dir
Assert 0=⊃F.RmDir serverPath,'/',packageID
F.DeleteFile(739⌶0),'/',packageID,'.zip'
∆RecompileIndexOnServer
⍝Done
r←Test_Server_600(stopFlag batchFlag);⎕TRAP;res1;res2;res3;res4;res5;res;msg;rc;dir;src;zip;serverPath;body;cfg;zipFilename;stop
⍝ Exercise ]Tatin.DeletePackages on a just-published package on the server
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'zip'
F.MkDir src zip
serverPath←∆TEMP_SERVER_FOLDER
body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
(⊂body)F.NPUT src,'/Test.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'test'
cfg.name←'Package_A'
cfg.version←'0.1.0'
cfg.source←'Test.apln'
cfg.os_win←1
cfg.license←'MIT'
TC.WritePackageConfigFile src cfg
(rc msg zipFilename)←TC.PublishPackage src(TC.ReplaceRegistryAlias'[localhost]')
→T.GoToTidyUp 200≠rc
→T.GoToTidyUp 0≠≢msg
→T.GoToTidyUp 0=F.IsDir serverPath,'/test-Package_A-0.1.0'
stop←0
(rc msg res)←stop ∆UCMD'DeletePackages [localhost]/test-Package_A-0.1.0'
→T.GoToTidyUp(rc≠0)∨(0<≢msg)
→T.GoToTidyUp 1=F.IsDir serverPath,'/test-Package_A-0.1.0'
r←T._OK
∆TidyUp:
F.DeleteFile zipFilename
F.RmDir dir
F.RmDir serverPath,'/test-Package_A-0.1.0'
⍝Done
r←Test_Server_601(stopFlag batchFlag);⎕TRAP;rc;msg;res
⍝ Exercise ]Tatin.GetDeletePolicy on the server
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg res)←∆UCMD'GetDeletePolicy ',(TC.ReplaceRegistryAlias'[localhost]')
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf'Any'≡res
r←T._OK
⍝Done
r←Test_Server_700(stopFlag batchFlag);⎕TRAP;request;res
⍝ Exercise the HEAD method on index.html.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
request←R.NewRequest 0
request.RequestTarget←'/index.html'
request.Method←'HEAD'
res←TC.SendAndReceive ∆LocalHostAndPort request
→T.PassesIf 0=≢res.Content
→T.PassesIf 0<res.ContentLength
r←T._OK
⍝Done
r←Test_Server_701(stopFlag batchFlag);⎕TRAP;request;res
⍝ Exercise the HEAD method on a package (=file)
⍝ There must be no content but there must be a content length
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
request←R.NewRequest 0
request.RequestTarget←'aplteam-Compare-5.0.0'
request.Method←'HEAD'
res←TC.SendAndReceive (TC.ReplaceRegistryAlias '[localhost]') request
→T.PassesIf 200≡res.StatusCode
→T.PassesIf 0=≢res.Content
→T.PassesIf 0<res.ContentLength
r←T._OK
⍝Done
r←Test_Server_720(stopFlag batchFlag);⎕TRAP;toPath;counter;flag;path;json;data;tempDir;zipFilename;json2;data2;max
⍝ Copy a maintenance file over and check whether it did it's job
⍝ Eventually the amended package is restored
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
toPath←⊃,/1 ⎕NPARTS ∆TEMP_SERVER_FOLDER,'/../Server/Maintenance/'
toPath ⎕NCOPY ∆TEMP_TEST_DATA,'/MaintenanceFiles/Modify_example_foo_1_0_0.aplf'
counter←flag←0
max←15
:Repeat  ⍝ We must wait until the server performs housekeeping
⎕DL 1
flag←⎕NEXISTS toPath,'Modify_example_foo_1_0_0.aplf.executed'
:Until flag∨max<counter←counter+1
→T.GoToTidyUp max=counter
path←∆TEMP_SERVER_FOLDER,'/example-Foo-1.0.0/'
json←⊃F.NGET path,'apl-package.json'
data←∆JSON json
→T.GoToTidyUp data.description≢'Modified by maintenance file'
tempDir←∆GetTempDir''
zipFilename←path,'example-Foo-1.0.0.zip'
zipFilename ##.ZipArchive.UnzipTo tempDir
json2←⊃F.NGET tempDir,'/apl-package.json'
data2←∆JSON json2
→T.GoToTidyUp data2.description≢'Modified by maintenance file'
r←T._OK
∆TidyUp:
F.DeleteFile toPath,'Modify_example_foo_1_0_0.aplf.executed'
:Trap 0 ⋄ 'apl-package.json'{(⍵,⍺)⎕NCOPY⍠('IfExists' 'Replace')⊢(⍵,⍺,'.bkp')}path ⋄ :EndTrap
:Trap 0 ⋄ 'example-Foo-1.0.0.zip'{(⍵,⍺)⎕NCOPY⍠('IfExists' 'Replace')⊢(⍵,⍺,'.bkp')}path ⋄ :EndTrap
{}F.RmDirByForce tempDir
r←Test_Server_721(stopFlag batchFlag);⎕TRAP;toPath;counter;flag;max
⍝ Copy a maintenance file over that will cause a crash and check whether it was deal with properly
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
toPath←⊃,/1 ⎕NPARTS ∆TEMP_SERVER_FOLDER,'/../Server/Maintenance/'
toPath ⎕NCOPY ∆TEMP_TEST_DATA,'/MaintenanceFiles/Crash.aplf'
counter←flag←0
max←15
:Repeat  ⍝ We must wait until the server performs housekeeping
⎕DL 1
flag←⎕NEXISTS toPath,'Crash.aplf.crashed'
:Until flag∨max<counter←counter+1
→T.GoToTidyUp max=counter
r←T._OK
:If ~batchFlag
flag←1 TC.YesOrNo'Did you receive an email regarding the crash of a maintenance file?'
r←(1+flag)⊃T.(_Failed _OK)
:EndIf
∆TidyUp:
F.DeleteFile toPath,'Crash.aplf.crashed'
⍝Done
r←Test_Server_901(stopFlag batchFlag);⎕TRAP;request;response
⍝ Sends "list-commands" to the server.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
request←R.NewRequest 0
request.RequestTarget←'/v1/list-commands'
response←TC.SendAndReceive (TC.ReplaceRegistryAlias'[localhost]') request
→T.PassesIf 200=response.StatusCode
→T.PassesIf∨/'<h2>All Special REST Commands</h2>'⍷response.Content
r←T._OK
⍝Done
r←Test_UC_001(stopFlag batchFlag);⎕TRAP;rc;msg;res1;res2
⍝ Exercise ]Tatin.ListRegistries
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg res1)←∆UCMD'listregistries'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf(2=⍴⍴res1)∧0<≢res1
(rc msg res2)←∆UCMD'listregistries NoArgsAllowed'
→T.PassesIf(rc>0)∧0<≢msg
r←T._OK
⍝Done
r←Test_UC_002(stopFlag batchFlag);⎕TRAP;rc;tempDir;packageFolder;zipfile;res;more;version;json;cfg;msg;statusCode;errMsg;ref
⍝ Exercise ]Tatin.PublishPackages with an already published package and different spelling (case)
⍝ We publish under group "SomeGroup" twice but with different spelling (case)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name           ⍝ Precaution
packageFolder←F.ExpandPath ∆TEMP_TEST_DATA,'/Source/OS'
tempDir ⎕NCOPY packageFolder,'/OS.aplc'
tempDir ⎕NCOPY packageFolder,'/apl-package.json'
json←⊃F.NGET tempDir,'/apl-package.json'
cfg←⎕JSON⍠('Dialect' 'JSON5')⊢json
cfg.group←'SomeGroup'
cfg.version←'1.0.0'
cfg.license←'MIT'
json←TC.Reg.JSON cfg
json TC.Reg.SaveJSON(tempDir,'/apl-package.json')1
(rc msg res)←∆UCMD'PublishPackage "',tempDir,'" [localhost]'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp'Package published on'{⍺≢(≢⍺)↑⍵}res
cfg.version←'1.1.0'
cfg.name←'os'
json←TC.Reg.JSON cfg
json TC.Reg.SaveJSON(tempDir,'/apl-package.json')1
ref←∆GetRefToTatin
ref.Client.CommTools.YesOrNo_Answers←1 2⍴'Test_UC_002 already published on' 'n'
(rc msg res)←∆UCMD'PublishPackage "',tempDir,'" [localhost]'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp'Server: The package has already been published with a different spelling (case)'≢res
r←T._OK
∆TidyUp:
ref.Client.CommTools.Cleanup
Assert 0=⊃F.RmDir tempDir
(statusCode errMsg)←TC.DeletePackages'[localhost]' 'SomeGroup-OS-1.0.0'
Assert statusCode∧.=200
⍝Done
r←Test_UC_003(stopFlag batchFlag);⎕TRAP;rc;msg;res1;res2;res3;res4;res5;res
⍝ Exercise ]Tatin.ListVersions
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg res1)←∆UCMD'ListVersions [local]aplteam-DoesNotExist'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf∨/'Not found:'⍷∊res1
(rc msg res1)←∆UCMD'ListVersions [local]aplteam-APLProcess'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 2<≢res1
(rc msg res2)←∆UCMD'ListVersions [local]aplteam-APLProcess-0'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 2<≢res2
(rc msg res3)←∆UCMD'ListVersions [local]aplteam-APLProcess-0.2'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 2<≢res3
(rc msg res4)←∆UCMD'ListVersions [local]aplteam-APLProcess-0.3'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 2<≢res4
(rc msg res5)←∆UCMD'ListVersions [local]aplteam-APLProcess-1'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 2<≢res5
→T.PassesIf((¯3+3×2)+≢res1)=+/≢¨res3 res4 res5
(rc msg res)←∆UCMD'ListVersions [localhost]example-versions'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 0<≢res
(rc msg res)←∆UCMD'ListVersions [localhost]example-versions -date'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 0<≢res
(rc msg res)←∆UCMD'ListVersions [localhost]Boo'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 0<≢res
(rc msg res)←∆UCMD'ListVersions [localhost]Boo-1'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 0<≢res
(rc msg res)←∆UCMD'ListVersions [localhost]example-Boo'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 0<≢res
r←T._OK
⍝Done
R←Test_UC_004(stopFlag batchFlag);⎕TRAP;rc;msg;res1;res3;res4;res5;res;ref
⍝ Exercise ]Tatin.ListVersions; would normally interacts with the user
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
ref←∆GetRefToTatin
ref.Client.CommTools.Select_Choices←1 2⍴'Please select a Registry:' 'https://tatin.dev/'
(rc msg res)←∆UCMD'ListVersions [?]aplprocess'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp 0=≢res
R←T._OK
∆TidyUp:
ref.Client.CommTools.Cleanup
⍝Done
r←Test_UC_005(stopFlag batchFlag);⎕TRAP;path;statusCode;errMsg;rc;msg;res;stop;ref
⍝ Try to publish a package that has a dependency that comes from a specific URL (user should be warned)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
path←∆TEMP_TEST_DATA,'/ForeignURL'
ref←∆GetRefToTatin
ref.Client.CommTools.YesOrNo_Answers←1 2⍴'CheckPkgDeps@' 'n'
stop←0
(rc msg res)←stop ∆UCMD'PublishPackage "',path,'" [localhost] -dependencies=packages'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp'Publishing cancelled'≢res
r←T._OK
∆TidyUp:
ref.Client.CommTools.Cleanup
⍝Done
r←Test_UC_007(stopFlag batchFlag);⎕TRAP;rc;tempDir;packageFolder;zipfile;res;more;version;json;cfg;msg;statusCode;errMsg
⍝ Exercise ]Tatin.PublishPackages with an already published package (was once a bug)
⍝ We publish under group "SomeGroup" twice
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name           ⍝ Precaution
packageFolder←F.ExpandPath ∆TEMP_TEST_DATA,'/Source/OS'
tempDir ⎕NCOPY packageFolder,'/OS.aplc'
tempDir ⎕NCOPY packageFolder,'/apl-package.json'
json←⊃F.NGET tempDir,'/apl-package.json'
cfg←⎕JSON⍠('Dialect' 'JSON5')⊢json
cfg.group←'SomeGroup'
cfg.version←'1.0.0'
cfg.license←'MIT'
json←TC.Reg.JSON cfg
(⊂json)F.NPUT(tempDir,'/apl-package.json')1
(rc msg res)←∆UCMD'PublishPackage "',tempDir,'" [localhost]'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp'Package published on'{⍺≢(≢⍺)↑⍵}res
cfg.version←'1.1.0'
json←TC.Reg.JSON cfg
json TC.Reg.SaveJSON(tempDir,'/apl-package.json')1
(rc msg res)←∆UCMD'PublishPackage "',tempDir,'" [localhost]'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp'Package published on'{⍺≢(≢⍺)↑⍵}res
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir tempDir
(statusCode errMsg)←TC.DeletePackages'[localhost]'('SomeGroup-OS-1.0.0' 'SomeGroup-OS-1.1.0')
Assert statusCode∧.=200
⍝Done
r←Test_UC_008(stopFlag batchFlag);⎕TRAP;rc;msg;res1;res2;res3;res4;res5;res;tempDir;ns;config
⍝ Exercise ]Tatin.PackageConfig locally
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
:If batchFlag
→0,r←T._NoBatchTest
:EndIf
:If ~1 TC.YesOrNo'This test requires you to specify both "name" & "group" in a ⎕ED window; continue?'
→0,r←T._Inactive ⍝ the user did cancel
:EndIf
tempDir←∆GetTempDir''
ns←TC.InitPackageConfig ⍬
ns.description←'This and that'
ns.source←'source'
ns.project_url←'https://github.com/aplteam/Tatin'
ns.os_win←1
TC.WritePackageConfigFile tempDir ns
(rc msg res)←∆UCMD'PackageConfig ',tempDir,' -edit -quiet'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~F.IsFile tempDir,'/',Reg.CFG_Name
(rc msg res)←∆UCMD'PackageConfig ',tempDir
→T.GoToTidyUp~(rc=0)∧0=≢msg
config←∆JSON∊res
→T.GoToTidyUp~∨/'[JSON object]'⍷⍕config
→T.GoToTidyUp~0∧.<≢¨config.(name group)
(rc msg res)←∆UCMD'PackageConfig ',tempDir,' -delete -quiet'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp 0≠F.IsFile tempDir,'/',Reg.CFG_Name
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_UC_010(stopFlag batchFlag);⎕TRAP;tempDir;rc;msg;res
⍝ Exercise ]Tatin.UserSettings
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name                           ⍝ Precaution
(rc msg res)←∆UCMD'UserSettings'
→T.GoToTidyUp~(rc=0)∧0=≢msg
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir tempDir
⍝Done
r←Test_UC_011(stopFlag batchFlag);⎕TRAP;installFolder;paths;res;msg;rc;ref
⍝ Exercise ]Tatin.Dependencies on packages with alias below top level with -overwrite flag
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
ref←⍎'TEMP'#.⎕NS''
installFolder←∆GetTempDir'/Installed Packages'
(rc msg res)←∆UCMD'InstallPackages "',∆TEMP_TEST_DATA,'/Aliase/MyApp1/aplteam-MyApp1-1.0.0.zip" "',installFolder,'"'
Assert(0=rc)∧0=≢msg
(rc msg res)←∆UCMD'LoadDependencies "',installFolder,'" #.TEMP -overwrite'
Assert(0=rc)∧0=≢msg
→T.GoToTidyUp 9.4≠#.TEMP.MyApp1.⎕NC⊂,'F'
→T.GoToTidyUp'World'≢#.TEMP.MyApp1.Hello 1
→T.GoToTidyUp'Galaxy'≢#.TEMP.MyApp1.Hello 2
→T.GoToTidyUp 0=≢⊃#.TEMP.MyApp1.Hello 3
r←T._OK
∆TidyUp:
Assert 0=1⊃F.RmDir ∆GetTempDir''
⍝Done
r←Test_UC_012(stopFlag batchFlag);⎕TRAP;paths;res;msg;rc;ref;buildList
⍝ Exercise ]Tatin.Dependencies on packages with alias below top level and overwrite
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
ref←⍎'TEMP'#.⎕NS''
(rc msg res)←∆UCMD'LoadDependencies "',∆TEMP_TEST_DATA,'/Aliase2" #.TEMP -overwrite'
Assert(0=rc)∧0=≢msg
→T.GoToTidyUp 9.4≠#._tatin.aplteam_APLGit_0_24_0.⎕NC⊂,'F'
buildList←∆JSON⊃F.NGET ∆TEMP_TEST_DATA,'/Aliase2/apl-buildlist.json'
→T.GoToTidyUp 12∨.≠≢¨buildList.(principal packageID url)
r←T._OK
∆TidyUp:
⍝Done
r←Test_UC_013(stopFlag batchFlag);⎕TRAP;msg;rc;res;stop
⍝ Exercise ]Tatin.Ping with an argument
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'Ping'
Assert 0=rc
→T.PassesIf 1 1 1≡res[;2]
r←T._OK
⍝Done
r←Test_UC_014(stopFlag batchFlag);⎕TRAP;rc;msg;result;stop
⍝ Exercise ]Tatin.Ping without an argument (all)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg result)←stop ∆UCMD'Ping'
Assert 0=rc
→T.PassesIf∧/result[;2]∊0 1
→T.PassesIf 1<≢result
r←T._OK
⍝Done
r←Test_UC_020(stopFlag batchFlag);⎕TRAP;rc;msg;res1;res2;dir
⍝ Exercise ]Tatin.ListPackages; simple case
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
(rc msg res1)←∆UCMD'ListPackages [local]'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~(2=⍴⍴res1)∧0<≢res1
→T.GoToTidyUp 2≠2⊃⍴res1
(rc msg res2)←∆UCMD'ListPackages ',(dir,'')
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~res2≡'No packages found'
r←T._OK
∆TidyUp:
Assert 0=1⊃F.RmDir dir
r←Test_UC_021(stopFlag batchFlag);⎕TRAP;rc;msg;res1;res2;dir;stop
⍝ Exercise ]Tatin.ListPackages on an install folder
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
stop←0
(rc msg res1)←stop ∆UCMD'ListPackages ',∆TEMP_TEST_DATA,'/ListPackages'
→T.GoToTidyUp~0<≢res1
→T.GoToTidyUp~2=⍴⍴res1
(rc msg res2)←∆UCMD'ListPackages ',(dir,'')
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~'No packages found'≡res2
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
r←Test_UC_022(stopFlag batchFlag);⎕TRAP;rc;msg;res1;dir
⍝ Exercise ]Tatin.ListPackages with -group option
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
(rc msg res1)←∆UCMD'ListPackages [local] -group=aplteam'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~0<≢res1
→T.GoToTidyUp~2=⍴⍴res1
r←T._OK
∆TidyUp:
Assert 0=1⊃F.RmDir dir
r←Test_UC_023(stopFlag batchFlag);⎕TRAP;rc;msg;res1;dir
⍝ Exercise ]Tatin.ListPackages with -tags option
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
(rc msg res1)←∆UCMD'ListPackages [tatin] -tags=winndow,'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~0<≢res1
→T.GoToTidyUp~2=⍴⍴res1
r←T._OK
∆TidyUp:
Assert 0=1⊃F.RmDir dir
r←Test_UC_024(stopFlag batchFlag);⎕TRAP;rc;msg;res;ref
⍝ Exercise ]Tatin.ListPackages without an argument
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
ref←∆GetRefToTatin
ref.Client.CommTools.Select_Choices←1 2⍴'SelectRegistry@' '[tatin]'
(rc msg res)←∆UCMD'ListPackages ?'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~(2=⍴⍴res)∧0<≢res
→T.GoToTidyUp~20<≢res
r←T._OK
∆TidyUp:
ref.Client.CommTools.Cleanup
⍝Done
r←Test_UC_025(stopFlag batchFlag);⎕TRAP;rc;msg;res
⍝ Exercise ]Tatin.ListPackages with -date
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg res)←∆UCMD'ListPackages [local] -date'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf(2=⍴⍴res)∧0<≢res
→T.PassesIf 20<≢res
→T.PassesIf∧/{∧/⍵∊⎕D,' :-'}¨3↓res[;2]        ⍝ Publishing date?
r←T._OK
r←Test_UC_026(stopFlag batchFlag);⎕TRAP;rc;msg;res
⍝ Exercise ]Tatin.ListPackages with -project_url and -group=
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg res)←∆UCMD'ListPackages [local] -project_url -group=aplteam'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf(2=⍴⍴res)∧0<≢res
→T.PassesIf 0<≢res
→T.PassesIf 83∧.=∪⎕DR¨∪3↓res[;2]                     ⍝ No. of packages (all integers)
→T.PassesIf 3=2⊃⍴res
r←T._OK
r←Test_UC_027(stopFlag batchFlag);⎕TRAP;rc;msg;res
⍝ Exercise ]Tatin.ListPackages with -since=20200501
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg res)←∆UCMD'ListPackages [local] -since=20200501'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf(2=⍴⍴res)∧0<≢res
→T.PassesIf∧/20200501≤{⍎(10↑⍵)~'-'}¨3↓res[;2]
r←T._OK
r←Test_UC_028(stopFlag batchFlag);⎕TRAP;rc;msg;res
⍝ Exercise ]Tatin.ListPackages with -since=2020-05-01
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg res)←∆UCMD'ListPackages [local] -since=2020-05-01'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf(2=⍴⍴res)∧0<≢res
→T.PassesIf∧/20200501≤{⍎(10↑⍵)~'-'}¨3↓res[;2]
r←T._OK
r←Test_UC_029(stopFlag batchFlag);⎕TRAP;rc;msg;res
⍝ Exercise ]Tatin.ListPackages with -project_url
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg res)←∆UCMD'ListPackages [local] -project_url'
→T.PassesIf(rc=0)∧0=≢msg
res←3↓res
→T.PassesIf(2=⍴⍴res)∧0<≢res
→T.PassesIf 0<≢res
→T.PassesIf 83∧.=∪⎕DR¨∪res[;2]                     ⍝ No. of packages (all integers)
→T.PassesIf 3=2⊃⍴res
r←T._OK
r←Test_UC_030(stopFlag batchFlag);⎕TRAP;rc;msg;res1;dir;res3;res2;res4
⍝ Exercise ]Tatin.ListPackages with several os* mutations
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg res1)←∆UCMD'ListPackages [localhost] -os=lin'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 0<≢res1
(rc msg res2)←∆UCMD'ListPackages [localhost] -os=mac'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 0<≢res2
(rc msg res3)←∆UCMD'ListPackages [localhost] -os=win'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 0<≢res3
→T.PassesIf(+/≢¨3↓¨res1 res2)<≢res3
(rc msg res4)←∆UCMD'ListPackages [localhost] -os=lin,mac'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 0<≢res4
r←T._OK
r←Test_UC_031(stopFlag batchFlag);⎕TRAP;rc;msg;res
⍝ Exercise ]Tatin.ListPackages on packages that are user commands
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg res)←∆UCMD'ListPackages [localhost] -uc'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 3<≢res
r←T._OK
r←Test_UC_032(stopFlag batchFlag);⎕TRAP;rc;msg;res
⍝ Exercise ]Tatin.ListLicenses with and without -verbose
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg res)←∆UCMD'ListLicenses [localhost]'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 2=≡res
→T.PassesIf 1=⍴⍴res
(rc msg res)←∆UCMD'ListLicenses [localhost] -verbose'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 2=≡res
→T.PassesIf 2=⍴⍴res
r←T._OK
r←Test_UC_050(stopFlag batchFlag);⎕TRAP;res;msg;rc;path;stop
⍝ Exercise ]Tatin.CheckForLaterVersion with the -major flag
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
path←∆TEMP_TEST_DATA,'/Packages/Update-Check-Multiple'
stop←0
res←TC.ListVersions'aplteam-Markapl'
:Select A.GetOperatingSystem''
:Case 'Win'
→T.PassesIf 0<+/'C:/'{⍺∘≡¨(≢⍺)↑¨⍵}res[;1]
:Case 'Mac'
→T.PassesIf 0<+/'/private/tmp/'{⍺∘≡¨(≢⍺)↑¨⍵}res[;1]
:Else
→T.PassesIf 0<+/'/tmp/'{⍺∘≡¨(≢⍺)↑¨⍵}res[;1]
:EndSelect
→T.PassesIf 0<+/'https://localhost/'{⍺∘≡¨(≢⍺)↑¨⍵}res[;1]
res←TC.ListVersions'aplteam-EventCodes'
:Select A.GetOperatingSystem''
:Case 'Win'
→T.PassesIf 0<+/'C:/'{⍺∘≡¨(≢⍺)↑¨⍵}res[;1]
:Case 'Mac'
→T.PassesIf 0<+/'/private/tmp/'{⍺∘≡¨(≢⍺)↑¨⍵}res[;1]
:Else
→T.PassesIf 0<+/'/tmp/'{⍺∘≡¨(≢⍺)↑¨⍵}res[;1]
:EndSelect
→T.PassesIf 0<+/'https://localhost/'{⍺∘≡¨(≢⍺)↑¨⍵}res[;1]
(rc msg res)←stop ∆UCMD'CheckForLaterVersion ',path,' -major'
→T.PassesIf 0=rc
→T.PassesIf 0=≢msg
→T.PassesIf 7=≢res
→T.PassesIf 2=+/⊃∨/∨/¨'aplteam-MarkAPL-12.1.1' 'aplteam-EventCodes-2.1.2'⍷¨⊂⎕FMT res
r←T._OK
r←Test_UC_051(stopFlag batchFlag);⎕TRAP;path;stop;rc;msg;res
⍝ Exercise ]Tatin.CheckForLaterVersion without the -major flag
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
path←∆TEMP_TEST_DATA,'/Packages/Update-Check-Multiple'
stop←0
(rc msg res)←stop ∆UCMD'CheckForLaterVersion ',path
Assert 0=rc
→T.PassesIf∨/∨/'aplteam-EventCodes-1.8.4  <<< Not found anywhere >>>'⍷⎕FMT res
r←T._OK
⍝Done
r←Test_UC_052(stopFlag batchFlag);⎕TRAP;res;msg;rc;path;stop;buff;more;en
⍝ Exercise ]Tatin.CheckForLaterVersion with the -major flag
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
path←∆TEMP_TEST_DATA,'/Packages/Update-Check-Single'
buff←⊃⌽,2↓3⊃∆UCMD'ListVersions [local]aplteam-MarkAPL'
stop←0
(rc msg res)←stop ∆UCMD'CheckForLaterVersion ',path,' -major'
→T.PassesIf 0=rc
→T.PassesIf 0=≢msg
→T.PassesIf 6=≢res
→T.PassesIf∨/∨/(⊃buff)⍷⎕FMT res
r←T._OK
r←Test_UC_053(stopFlag batchFlag);⎕TRAP;res;msg;rc;path;stop
⍝ Exercise ]Tatin.CheckForLaterVersion without the -major flag
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
path←∆TEMP_TEST_DATA,'/Packages/Update-Check-Single'
stop←0
(rc msg res)←stop ∆UCMD'CheckForLaterVersion ',path
→T.PassesIf 0=rc
→T.PassesIf 0=≢msg
→T.PassesIf 6=≢res
→T.PassesIf∨/∨/'aplteam-MarkAPL-9.1.13'⍷⎕FMT res
r←T._OK
r←Test_UC_060(stopFlag batchFlag);⎕TRAP;msg;rc;cmd;list;help
⍝ Exercise all help calls
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg list)←∆UCMD' -?'
→T.PassesIf 0=rc
→T.PassesIf 0=≢msg
list←{⍵/⍨0<≢¨⍵~¨' '}1↓list
→T.PassesIf 0<≢list
:For cmd :In list
cmd←cmd↓⍨cmd⍳'.'
(rc msg help)←∆UCMD cmd,' -?'
→T.PassesIf 0=rc
→T.PassesIf 0=≢msg
:EndFor
:For cmd :In list
cmd←cmd↓⍨cmd⍳'.'
(rc msg help)←∆UCMD cmd,' -??'
→T.PassesIf 0=rc
→T.PassesIf 0=≢msg
:EndFor
:For cmd :In list
cmd←cmd↓⍨cmd⍳'.'
(rc msg help)←∆UCMD cmd,' -???'
→T.PassesIf 0=rc
→T.PassesIf 0=≢msg
:EndFor
r←T._OK
r←Test_UC_065(stopFlag batchFlag);⎕TRAP;rc;dir;dir2;oldDependencies;oldBuildlist;oldPkgList;newDependencies;newBuildlist;newPkgList;msg;list;res
⍝ Exercise ]Tatin.UnInstallPackages with a package ID as argument
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY'TestData/UnInstall/'
dir2←dir,'/UnInstall'
oldDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
oldBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
oldPkgList←F.ListDirs dir2,'/'
(rc msg list)←∆UCMD'UnInstallPackages EC@aplteam-EventCodes-3.0.1 "',dir2,'"'
Assert rc=0
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~∨/' EC@aplteam-EventCodes-3.0.1 '⍷∊' ',¨list,¨' '
→T.GoToTidyUp 0≠≢msg
newDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
newBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
newPkgList←F.ListDirs dir2,'/'
→T.GoToTidyUp 1≠+/~oldDependencies∊newDependencies
→T.GoToTidyUp 1≠+/~oldPkgList∊newPkgList
(rc msg res)←∆UCMD'UnInstallPackages aplteam-EventCodes-3.0.1 "',dir2,'"'
→T.GoToTidyUp~∨/'Package is not installed'⍷msg
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_UC_066(stopFlag batchFlag);⎕TRAP;dir;rc;msg;list;expected
⍝ Exercise ]Tatin.UnInstallPackages with a package ID as argument
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY⍠('Wildcard' 1)⊣∆TEMP_TEST_DATA,'/UnInstall2/*'
(rc msg list)←∆UCMD'UnInstallPackages P@aplteam-APLProcess-1.0.0 "',dir,'"'
Assert 0=rc
Assert 0=≢msg
expected←'P@aplteam-APLProcess-1.0.0' 'aplteam-APLTreeUtils-6.0.0'
→T.GoToTidyUp~∧/expected∊list
→T.GoToTidyUp 1≠≢F.ListDirs dir
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_UC_071(stopFlag batchFlag);⎕TRAP;dir;old;res;rc;msg;new;stop
⍝ Exercise ]Tatin.ReInstallDependencies
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY⍠('Wildcard' 1)⊣'TestData/UnInstall/*'
old←(1+≢dir)↓¨##.FilesAndDirs.ListDirs dir,'/'
stop←0
(rc msg res)←stop ∆UCMD'ReInstallDependencies "',dir,'" -force'
→T.GoToTidyUp 0≠rc
→T.GoToTidyUp 0≠≢msg
new←(1+≢dir)↓¨##.FilesAndDirs.ListDirs dir,'/'
→T.GoToTidyUp~∧/(TC.Reg.RemoveMinorAndPatch¨old)∊TC.Reg.RemoveMinorAndPatch¨new
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_UC_072(stopFlag batchFlag);⎕TRAP;rc;msg;res;dir;list;stop
⍝ Exercise ]Tatin.ReInstallDependencies with the -dry flag
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY⍠('Wildcard' 1)⊣'TestData/UnInstall/',##.Registry.DependenciesFilename
stop←0
(rc msg res)←stop ∆UCMD'ReInstallDependencies "',dir,'" -dry -force'
→T.GoToTidyUp 0≠rc
→T.GoToTidyUp 0≠≢msg
list←⊃##.FilesAndDirs.Dir dir,'/'
→T.GoToTidyUp 1≠≢list   ⍝ Because nothing happened due to the -dry flag
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_UC_073(stopFlag batchFlag);⎕TRAP;dir;res;rc;msg;list;stop;expected
⍝ Exercise ]Tatin.ReInstallDependencies with the -update flag
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
res←TC.InstallPackages'[localhost]example-versions-1.0.1-That-fix'dir
Assert'example-versions-1.0.1-That-fix'≡∊res
res←TC.InstallPackages'[localhost]V@example-versions-1.0.12-zzz'dir     ⍝ Alias!
Assert'V@example-versions-1.0.12-zzz'≡∊res
stop←0
(rc msg list)←stop ∆UCMD'ReInstallDependencies "',dir,'" -update -force'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp 0≠≢msg
→T.GoToTidyUp 3≠≢⊃F.Dir dir,'/'
expected←'example-versions-1.0.12-That-fix' 'V@example-versions-1.0.12-That-fix'
→T.GoToTidyUp~expected ∆LazyMatch⊃F.NGET(dir,'/',TC.Reg.DependenciesFilename)1
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
Assert rc=0
⍝Done
r←Test_UC_074(stopFlag batchFlag);⎕TRAP;dir;res;rc;msg;list;expected
⍝ Exercise ]Tatin.UnInstallPackages without a package ID but with -cleanup: remove all superfluous packages
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
res←⎕SE.Tatin.InstallPackages'[localhost]aplteam-APLTreeUtils-6.0.0'dir
Assert'aplteam-APLTreeUtils-6.0.0'≡∊res
res←⎕SE.Tatin.InstallPackages'[localhost]aplteam-APLTreeUtils-6.0.1'dir
Assert'aplteam-APLTreeUtils-6.0.1'≡∊res
res←⎕SE.Tatin.InstallPackages'[localhost]aplteam-APLTreeUtils-6.0.9'dir
Assert'aplteam-APLTreeUtils-6.0.9'≡∊res
(rc msg list)←∆UCMD'UnInstallPackages "',dir,'" -cleanup'
Assert 0=rc
Assert 0=≢msg
expected←'aplteam-APLTreeUtils-6.0.0' 'aplteam-APLTreeUtils-6.0.1'
→T.GoToTidyUp~∧/expected∊list
→T.GoToTidyUp 1≠≢F.ListDirs dir
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_UC_075(stopFlag batchFlag);⎕TRAP;rc;msg;list
⍝ Exercise ]Tatin.UnInstallPackages without argument must fail
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg list)←∆UCMD'UnInstallPackages'
→T.PassesIf 0=≢list
r←T._OK
⍝Done
r←Test_UC_081(stopFlag batchFlag);⎕TRAP;res1;res2;res3;res4;res5;rc;msg;en
⍝ Exercise ]Tatin.LoadPackages
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg res1)←∆UCMD'LoadPackages [local]aplteam-APLProcess-0.2.9 #.TEMP'
→T.PassesIf(rc=0)∧0=≢msg
msg Assert 0=rc
(rc msg res2)←∆UCMD'LoadPackages [local]aplteam-APLProcess-0.2 #.TEMP'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf'0.2.12'≡∆RemoveBuildFromVersion 2⊃#.TEMP.APLProcess.Version
(rc msg res3)←∆UCMD'LoadPackages [local]aplteam-APLProcess-0 #.TEMP'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf'0.5.1'≡∆RemoveBuildFromVersion 2⊃#.TEMP.APLProcess.Version
(rc msg res4)←∆UCMD'LoadPackages [local]aplteam-APLProcess #.TEMP'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf'1.0.0'≡∆RemoveBuildFromVersion 2⊃#.TEMP.APLProcess.Version
(rc msg res5)←∆UCMD'LoadPackages [local]aplteam-APLProcess #.TEMP'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf'1.0.0'≡∆RemoveBuildFromVersion 2⊃#.TEMP.APLProcess.Version
r←T._OK
⍝Done
r←Test_UC_082(stopFlag batchFlag);⎕TRAP;res;rc;msg
⍝ Exercise ]Tatin.LoadPackages on a beta package
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg res)←∆UCMD'LoadPackages [local]example-versions-1.0.0-beta-1 #.TEMP'
→T.GoToTidyUp~(rc=0)∧0=≢msg    ⍝ Error?! 1043 Conga?!  just do →⎕lc-1
→T.GoToTidyUp'1.0.0-beta-1'≢∆RemoveBuildFromVersion 2⊃#._tatin.example_versions_1_0_0_beta_1.MyCode.Version
r←T._OK
∆TidyUp:
⍝Done
r←Test_UC_083(stopFlag batchFlag);⎕TRAP;res;msg;rc;stop
⍝ Exercise ]Tatin.LoadPackages on a package that has only betas but suppress betas
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'LoadPackages [local]Laguntza #.TEMP -nobetas'
→T.GoToTidyUp'0 packages loaded into #.TEMP'≢res
r←T._OK
∆TidyUp:
:Trap 0 ⋄ F.RmDir res ⋄ :EndTrap
⍝Done
r←Test_UC_084(stopFlag batchFlag);⎕TRAP;res;msg;rc;stop
⍝ Exercise ]Tatin.LoadPackages on several packages of which two do not exist
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'LoadPackages [local]APLTreeUtils2,Does-NotExist,[tatin]Does-AlsoNotExist #.TEMP -nobetas'
Assert 0=rc
→T.GoToTidyUp'1 package loaded into #.TEMP'≢res
r←T._OK
∆TidyUp:
:Trap 0 ⋄ F.RmDir res ⋄ :EndTrap
⍝Done
R←Test_UC_085(stopFlag batchFlag);⎕TRAP
⍝ Exercise ]Tatin.LoadPackages from within a namespace
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
:With #.Foo
∆res←⎕SE.UCMD'Tatin.LoadPackages [tatin]APLTreeUtils2'
:EndWith
→T.GoToTidyUp 9≠#.Foo.⎕NC'APLTreeUtils2'
→T.GoToTidyUp'1 package loaded into #.Foo'≢#.Foo.∆res
R←T._OK
∆TidyUp:
⍝Done
r←Test_UC_088(stopFlag batchFlag);⎕TRAP;dir;src;zip;body;cfg;zipfile;parms;path2Namespace;rc;msg;res
⍝ Load a package into a sub-namespace of the current namespace
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir ⍬
(src zip)←(⊂dir,'/'),¨'src' 'reg'
F.MkDir src zip
body←':Namespace Constants' '∇r←PI' 'r←3.14' '∇' ':EndNamespace'
(⊂body)F.NPUT src,'/Constants.apln'
cfg←TC.InitPackageConfig ⍬
cfg.(group name version)←'Example' 'Constants' '1.2.3-test-1-a'
cfg.source←'Constants.apln'
cfg.api←'Constants'
cfg.os_win←1
TC.WritePackageConfigFile src cfg
parms←TC.CreateBuildParms src
parms.targetPath←zip
path2Namespace←⍕TC
zipfile←TC.BuildPackage parms
((⊃⎕SI),'_Foo')⎕NS''
(rc msg res)←#.Tatin.TestCases.∆UCMD'LoadPackages file://',zipfile,' Foo'
Assert 0=rc
Assert 3=Foo.Constants.⎕NC'PI'
→T.PassesIf 3.14=Foo.Constants.PI
→T.PassesIf 0<≢Foo.Constants.##.TatinVars.URI
r←T._OK
∆TidyUp:
⎕EX(⊃⎕SI),'_Foo'
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_UC_090(stopFlag batchFlag);⎕TRAP;res;msg;rc;stop
⍝ Exercise ]Tatin.GetDeletePolicy on an alias (was once a bug)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'GetDeletePolicy [tatin]'
→T.PassesIf 0=rc
→T.PassesIf'None'≡res
r←T._OK
⍝Done
r←Test_UC_091(stopFlag batchFlag);⎕TRAP;res;msg;rc;stop
⍝ Exercise ]Tatin.GetDeletePolicy on a URL
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'GetDeletePolicy https://tatin.dev'
→T.PassesIf 0=rc
→T.PassesIf'None'≡res
r←T._OK
⍝Done
r←Test_UC_092(stopFlag batchFlag);⎕TRAP;res;msg;rc;stop
⍝ Exercise ]Tatin.GetDeletePolicy without argument (goes for the principal Tatin server)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'GetDeletePolicy'
→T.PassesIf 0=rc
→T.PassesIf'[tatin]''s delete policy is: None'≡res
r←T._OK
⍝Done
r←Test_UC_093(stopFlag batchFlag);⎕TRAP;res;msg;rc;stop
⍝ Exercise ]Tatin.GetDeletePolicy on all known Registries
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'GetDeletePolicy *'
→T.PassesIf 0=rc
→T.PassesIf({⍵~'[]'}¨res[;1])∆LazyMatch(⎕SE.Tatin.ListRegistries'')[;1]
r←T._OK
⍝Done
r←Test_UC_094(stopFlag batchFlag);⎕TRAP;res;msg;rc;stop;ref
⍝ Exercise ]Tatin.GetDeletePolicy with user interaction
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
ref←∆GetRefToTatin
ref.Client.CommTools.Select_Choices←1 2⍴'SelectRegistry@'(2 4)
stop←0
(rc msg res)←stop ∆UCMD'GetDeletePolicy ?'
→T.GoToTidyUp 0≠rc
→T.GoToTidyUp'[tatin]' '[tatin-test]'≢res[;1]
r←T._OK
∆TidyUp:
ref.Client.CommTools.Cleanup
⍝Done
r←Test_UC_100(stopFlag batchFlag);⎕TRAP;res;rc;msg
⍝ Exercise ]Tatin.Version
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg res)←∆UCMD'version'
→T.PassesIf 0=rc
→T.PassesIf 0=≢msg
→T.PassesIf 3=≢res
(rc msg res)←res←∆UCMD'version [tatin]'
⍝ (rc msg res)←∆UCMD'version https://localhost'
→T.PassesIf 0=rc
→T.PassesIf 0=≢msg
→T.PassesIf 3=≢res
r←T._OK
r←Test_UC_110(stopFlag batchFlag);⎕TRAP;rc;msg;res1;dir
⍝ Exercise ]Tatin.ListTags
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
(rc msg res1)←∆UCMD'ListTags [localhost]'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~0<≢res1
→T.GoToTidyUp~2=⍴⍴res1
r←T._OK
∆TidyUp:
Assert 0=1⊃F.RmDir dir
r←Test_UC_111(stopFlag batchFlag);⎕TRAP;rc;msg;res1;dir
⍝ Exercise ]Tatin.ListTags with -tags option
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
(rc msg res1)←∆UCMD'ListTags [localhost] -tags=zip'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~0<≢res1
→T.GoToTidyUp~2=⍴⍴res1
r←T._OK
∆TidyUp:
Assert 0=1⊃F.RmDir dir
r←Test_UC_112(stopFlag batchFlag);⎕TRAP;rc;msg;res1;dir;res2;res3;res4
⍝ Exercise ]Tatin.ListTags with -os= option in several ways
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
(rc msg res1)←∆UCMD'ListTags [localhost] -os=mac'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~0<≢res1
→T.GoToTidyUp~2=⍴⍴res1
(rc msg res2)←∆UCMD'ListTags [localhost] -os=lin'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~0<≢res2
→T.GoToTidyUp~2=⍴⍴res2
(rc msg res3)←∆UCMD'ListTags [localhost] -os=mac,lin'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~0<≢res3
→T.GoToTidyUp~2=⍴⍴res3
(rc msg res4)←∆UCMD'ListTags [localhost] -os=win'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~0<≢res4
→T.GoToTidyUp~2=⍴⍴res4
→T.GoToTidyUp~∧/(≢¨res1 res2 res3)<≢res4
r←T._OK
∆TidyUp:
Assert 0=1⊃F.RmDir dir
r←Test_UC_120(stopFlag batchFlag);⎕TRAP;rc;msg;res1;res2;res3;res4;res5;tempDir;res
⍝ Exercise ]Tatin.InstallPackages and ]Tatin.LoadDependencies
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name                           ⍝ Precaution
(rc msg res)←∆UCMD'InstallPackages [local]aplteam-APLProcess-0.2 ',tempDir
→T.GoToTidyUp~(rc=0)∧0=≢msg
(rc msg res)←∆UCMD'LoadDependencies ',tempDir,' #.TEMP'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp'0.2.12'≢∆RemoveBuildFromVersion 2⊃#.TEMP.APLProcess.Version
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir tempDir
⍝Done
r←Test_UC_121(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;res;installFolder;stop;ref
⍝ Exercise ]Tatin.InstallPackages on a package that is a user command
⍝ Should install into a sub-folder that is named after the package because only [MyUCMDs] is paased
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
zipFilename←∆TEMP_SERVER_FOLDER,'/example-UC-1.0.0/example-UC-1.0.0.zip'
installFolder←TC.GetMyUCMDsFolder'UC'
'Check!'Assert 0=⎕NEXISTS installFolder  ⍝ Should not exist. If it does, is it a leftover from an earlier test?!
ref←∆GetRefToTatin
ref.Client.CommTools.YesOrNo_Answers←1 2⍴'Sure you want to install' 'y'
stop←0
(rc msg res)←stop ∆UCMD'InstallPackages "',zipFilename,'" [myucmds]'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~∨/' example-UC-1.0.0 '⍷∊' ',¨res,¨' '
→T.GoToTidyUp~⎕NEXISTS installFolder,'/UC.aplc'
r←T._OK
∆TidyUp:
ref.Client.CommTools.Cleanup
(rc msg)←F.RmDirByForce installFolder
Assert rc=0
⍝Done
r←Test_UC_122(stopFlag batchFlag);⎕TRAP;rc;msg;zipFilename;res;installFolder;stop;ref
⍝ Exercise ]Tatin.InstallPackages on a user command package with a specific name that differs from the package
⍝ Usually no name is given, and therefore the package name is used.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
zipFilename←∆TEMP_SERVER_FOLDER,'/example-UC-1.0.0/example-UC-1.0.0.zip'
installFolder←TC.GetMyUCMDsFolder'Foo_UC'
'Check!'Assert 0=⎕NEXISTS installFolder  ⍝ Should not exist. If it does, is it a leftover from an earlier test?!
ref←∆GetRefToTatin
ref.Client.CommTools.YesOrNo_Answers←1 2⍴'Sure you want to install' 'y'
stop←0
(rc msg res)←stop ∆UCMD'InstallPackages "',zipFilename,'" [myucmds]Foo_UC'
→T.GoToTidyUp~(rc=0)∧(0=≢msg)
→T.GoToTidyUp~∨/' example-UC-1.0.0 '⍷∊' ',¨res,¨' '
→T.GoToTidyUp~⎕NEXISTS installFolder,'/UC.aplc'
r←T._OK
∆TidyUp:
ref.Client.CommTools.Cleanup
(rc msg)←F.RmDirByForce installFolder
Assert rc=0
⍝Done
r←Test_UC_123(stopFlag batchFlag);⎕TRAP;rc;msg;zip1;zip2;stop
⍝ Exercise ]Tatin.InstallPackages on multiple user command packages with a name after [MyUCMDs] (invalid)
⍝ Should install into a sub-folder that is named after the package because only [MyUCMDs] is paased
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
zip1←∆TEMP_SERVER_FOLDER,'example-UC-1.0.0/example-UC-1.0.0.zip'
zip2←∆TEMP_SERVER_FOLDER,'example-UC_2-1.0.0/example-UC_2-1.0.0.zip'
stop←0
(rc msg)←2↑stop ∆UCMD'InstallPackages "',zip1,',',zip2,'" [myucmds]Foo'
→T.PassesIf 0≠rc
→T.PassesIf∨/'You must not specify a name after [MyUCMDs] when installing more than one package'⍷msg
r←T._OK
⍝Done
r←Test_UC_125(stopFlag batchFlag);⎕TRAP;rc;msg;tempDir;list1;res;list2
⍝ Exercise ]Tatin.InstallPackages on a folder that is not empty
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir'/'
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name                           ⍝ Precaution
tempDir ⎕NCOPY⍠('Wildcard' 1)⊢∆TEMP_TEST_DATA,'/InstallFromList/*'
list1←(≢tempDir)↓¨⊃TC.F.Dir tempDir
(rc msg res)←∆UCMD'InstallPackages [localhost]versions ',tempDir
→T.GoToTidyUp~(rc=0)∧0=≢msg
list2←(≢tempDir)↓¨⊃TC.F.Dir tempDir
→T.GoToTidyUp≢/1 0+≢¨list1 list2
→T.GoToTidyUp~∧/list1∊list2
→T.GoToTidyUp 1≠+/'-versions-'⍷∊list2
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir tempDir
⍝Done
r←Test_UC_140(stopFlag batchFlag);⎕TRAP;rc;msg;tempDir;packageFolder;zipfile;res;more;cfg;version
⍝ Exercise ]Tatin.BuildPackage and ]Tatin.PublishPackage
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name                           ⍝ Precaution
packageFolder←F.ExpandPath ∆TEMP_TEST_DATA,'/Source/OS'
(rc msg zipfile)←∆UCMD'BuildPackage "',packageFolder,'" "',tempDir,'"'
→T.GoToTidyUp~(rc=0)∧0=≢msg
res←⊃F.Dir tempDir,'/'
→T.GoToTidyUp 0=≢zipfile
→T.GoToTidyUp'.zip'≢⎕C ¯4↑zipfile
cfg←Reg.GetJsonFromFile(⊃⊃F.Dir packageFolder,'/',TC.CFG_Name)0
version←⊃{⍺,'-',⍵}/cfg.(group name version)
F.RmDir ∆TEMP_SERVER_FOLDER,version
(rc msg res)←∆UCMD'PublishPackage "',zipfile,'" [local]'
→T.GoToTidyUp~(rc=0)∧0=≢msg
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir tempDir
⍝Done
r←Test_UC_141(stopFlag batchFlag);⎕TRAP;rc;msg;tempDir;packageFolder;zipfile;res;more;cfg;version;tempDir2;deps
⍝ Exercise ]Tatin.BuildPackage and ]Tatin.PublishPackage with a non-default dependency folder
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
F.DeleteFile tempDir,'/',TC.UserSettings.cfg_name                           ⍝ Precaution
packageFolder←F.ExpandPath ∆TEMP_TEST_DATA,'/Build/Special'
(rc msg zipfile)←∆UCMD'BuildPackage "',packageFolder,'" "',tempDir,'" -dependencies=dependencies'
→T.GoToTidyUp~(rc=0)∧0=≢msg
res←⊃F.Dir tempDir,'/'
→T.GoToTidyUp 0=≢zipfile
→T.GoToTidyUp'.zip'≢⎕C ¯4↑zipfile
tempDir2←∆GetTempDir'-ZIP'
zipfile TC.ZipArchive.UnzipTo tempDir2
deps←⊃F.NGET(tempDir2,'/apl-dependencies.txt')1
→T.GoToTidyUp(,⊂'aplteam-FilesAndDirs-5.2.1')≢deps
Assert 0=⊃F.RmDirByForce tempDir2
tempDir2←∆GetTempDir'-ZIP'
cfg←Reg.GetJsonFromFile(⊃⊃F.Dir packageFolder,'/',TC.CFG_Name)0
version←⊃{⍺,'-',⍵}/cfg.(group name version)
F.RmDir ∆TEMP_REGISTRY_FOLDER,'/',version
(rc msg res)←∆UCMD'PublishPackage "',zipfile,'" [local] -dependencies=dependencies'
→T.GoToTidyUp(rc≠0)∨(0<≢msg)
→T.GoToTidyUp~∨/'Package publish'⍷res
(∆TEMP_REGISTRY_FOLDER,'/aplteam-Seven7Zip-9.0.1/aplteam-Seven7Zip-9.0.1.zip')TC.ZipArchive.UnzipTo tempDir2
deps←⊃F.NGET(tempDir2,'/apl-dependencies.txt')1
→T.GoToTidyUp(,⊂'aplteam-FilesAndDirs-5.2.1')≢deps
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDirByForce tempDir
Assert 0=⊃F.RmDirByForce tempDir2
Assert 0=⊃F.RmDirByForce ∆TEMP_REGISTRY_FOLDER,'/aplteam-Seven7Zip-9.0.1'
⍝Done
r←Test_UC_142(stopFlag batchFlag);⎕TRAP;rc;msg;tempDir;packageFolder;zipfile;cfg
⍝ Exercise ]Tatin.BuildPackage bumping the version number (path)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
tempDir ⎕NCOPY'TestData/Build/Special'
packageFolder←tempDir,'/Special'
(rc msg zipfile)←∆UCMD'BuildPackage "',packageFolder,'" "',tempDir,'" -bump=patch'
→T.GoToTidyUp~(rc=0)∧0=≢msg
'Load the package failed?!'Assert TC.LoadPackages zipfile'#.TEMP'
cfg←⎕JSON⍠('Dialect' 'JSON5')⊣#.TEMP.Seven7Zip.TatinVars.CONFIG
→T.GoToTidyUp'9.0.2'≢{⍵↑⍨¯1+⍵⍳'+'}cfg.version
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDirByForce tempDir
⍝Done
r←Test_UC_143(stopFlag batchFlag);⎕TRAP;rc;msg;tempDir;packageFolder;zipfile;cfg
⍝ Exercise ]Tatin.BuildPackage bumping the version number (minor)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
tempDir ⎕NCOPY'TestData/Build/Special'
packageFolder←tempDir,'/Special'
(rc msg zipfile)←∆UCMD'BuildPackage "',packageFolder,'" "',tempDir,'" -bump=minor'
→T.GoToTidyUp~(rc=0)∧0=≢msg
'Load the package failed?!'Assert TC.LoadPackages zipfile'#.TEMP'
cfg←⎕JSON⍠('Dialect' 'JSON5')⊣#.TEMP.Seven7Zip.TatinVars.CONFIG
→T.GoToTidyUp'9.1.0'≢{⍵↑⍨¯1+⍵⍳'+'}cfg.version
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDirByForce tempDir
⍝Done
r←Test_UC_144(stopFlag batchFlag);⎕TRAP;rc;msg;tempDir;packageFolder;zipfile;cfg
⍝ Exercise ]Tatin.BuildPackage bumping the version number (major)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
tempDir ⎕NCOPY'TestData/Build/Special'
packageFolder←tempDir,'/Special'
(rc msg zipfile)←∆UCMD'BuildPackage "',packageFolder,'" "',tempDir,'" -bump=major'
→T.GoToTidyUp~(rc=0)∧0=≢msg
'Load the package failed?!'Assert TC.LoadPackages zipfile'#.TEMP'
cfg←⎕JSON⍠('Dialect' 'JSON5')⊣#.TEMP.Seven7Zip.TatinVars.CONFIG
→T.GoToTidyUp'10.0.0'≢{⍵↑⍨¯1+⍵⍳'+'}cfg.version
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDirByForce tempDir
⍝Done
r←Test_UC_161(stopFlag batchFlag);⎕TRAP;rc;msg;tempDir;packageFolder;zipfile;cfg
⍝ Exercise ]Tatin.BuildPackage with an invalid setting of `api`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
tempDir ⎕NCOPY'TestData/Build/FilesAndDirs'
packageFolder←tempDir,'/FilesAndDirs'
cfg←⎕JSON⍠('Dialect' 'JSON5')⊣⊃⎕NGET packageFolder,'/apl-package.json'
cfg.api←'AddTrailingSep' ⍝ Invalid: must be a namespace or a script
(⊂⎕JSON⍠('Dialect' 'JSON5')('Compact' 0)⊣cfg)⎕NPUT(packageFolder,'/apl-package.json')1
(rc msg zipfile)←∆UCMD'BuildPackage "',packageFolder,'" "',tempDir,'"'
:If rc=0
{}F.DeleteFile zipfile
→T.GoToTidyUp 1
:Else
→T.GoToTidyUp rc≠911
→T.GoToTidyUp~∨/'API is defined but neither a namespace nor a script'⍷msg
:EndIf
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDirByForce tempDir
⍝Done
r←Test_UC_162(stopFlag batchFlag);⎕TRAP;rc;msg;tempDir;packageFolder;zipfile;cfg
⍝ Exercise ]Tatin.BuildPackage with an invalid setting of `api`
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir''
tempDir ⎕NCOPY'TestData/Build/FilesAndDirs'
packageFolder←tempDir,'/FilesAndDirs'
cfg←⎕JSON⍠('Dialect' 'JSON5')⊣⊃⎕NGET packageFolder,'/apl-package.json'
cfg.api←'Does_Not_Exist' ⍝ Invalid: must be a namespace or a script
(⊂⎕JSON⍠('Dialect' 'JSON5')('Compact' 0)⊣cfg)⎕NPUT(packageFolder,'/apl-package.json')1
(rc msg zipfile)←∆UCMD'BuildPackage "',packageFolder,'" "',tempDir,'"'
:If rc=0
{}F.DeleteFile zipfile
→T.GoToTidyUp 1
:Else
→T.GoToTidyUp rc≠911
→T.GoToTidyUp~∨/'API does not exist'⍷msg
:EndIf
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDirByForce tempDir
⍝Done
r←Test_UC_200(stopFlag batchFlag);⎕TRAP;rc;msg;res;stop;report;was
⍝ Exercise all flavours of ]Tatin.Cache
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
:If 0=≢(⊂'temp')~⍨2⊃¨⎕NPARTS¨F.ListDirs #.Tatin.Client.GetPathToPackageCache
⍝ We need something in the cache
was←⎕SE.Tatin.MyUserSettings.caching
⎕SE.Tatin.MyUserSettings.caching←1
{}⎕SE.Tatin.LoadPackages'[tatin]aplteam-HandleError'#.TEMP
⎕SE.Tatin.MyUserSettings.caching←was
:EndIf
(rc msg res)←stop ∆UCMD'Cache'
→T.PassesIf 0=rc
→T.PassesIf 1=|≡res
(rc msg res)←stop ∆UCMD'Cache -path'
→T.PassesIf 0=rc
→T.PassesIf 1=|≡res
(rc msg res)←stop ∆UCMD'Cache -clear -force'
→T.PassesIf 0=rc
→T.PassesIf 1=|≡res
(rc msg res)←stop ∆UCMD'Cache -clear -force'
→T.PassesIf 0=rc
→T.PassesIf 1=|≡res               ⍝ The cache is by now emptied but it must still go through
r←T._OK
⍝Done
r←Test_UC_240(stopFlag batchFlag);⎕TRAP;list1;list2;msg;rc;stop;tempDir
⍝ Copy full Registry, then delete some stuff and sync
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir⊃⎕SI
stop←0
(rc msg list1)←stop ∆UCMD'CopyRegistry [localhost] "',tempDir,'" -verbose=1'
msg Assert 0=rc
→T.GoToTidyUp~1<≢∪##.Registry.GetGroupName¨list1[;1]
(rc msg)←↓⍉↑F.RmDirByForce¨(⊂tempDir,'/'),¨list1[3 6 7;1]
(1↓⊃,/';',¨msg)Assert rc∧.=0
F.DeleteFile¨F.ListFiles tempDir,'/',(1⊃list1[12;]),'/'
(rc msg)←↓⍉↑F.RmDirByForce¨F.ListDirs tempDir,'/',(1⊃list1[12;]),'/'
(1↓⊃,/';',¨msg)Assert rc∧.=0
Assert 0=≢⊃F.Dir tempDir,'/',(1⊃list1[12;]),'/'
(rc msg list2)←stop ∆UCMD'CopyRegistry [localhost] "',tempDir,'" -verbose=1'
msg Assert 0=rc
→T.GoToTidyUp 3≠+/list2[;2]≡¨⊂'Fetched'
→T.GoToTidyUp~∧/⎕NEXISTS¨(⊂tempDir,'/'),¨list1[3 6 7;1]
→T.GoToTidyUp 0≠≢⊃F.Dir tempDir,'/',(1⊃list1[12;]),'/'  ⍝ That one remains unchanged because just the contents was deleted!
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert 0=rc
⍝Done
r←Test_UC_241(stopFlag batchFlag);⎕TRAP;list1;list2;msg;rc;stop;tempDir
⍝ Copy a particular group from a Registry, first without dependencies, then with dependencies
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir⊃⎕SI
stop←0
(rc msg list1)←stop ∆UCMD'CopyRegistry [localhost] "',tempDir,'" -verbose=1 -group=example -dependencies=0'
msg Assert 0=rc
→T.GoToTidyUp 1≠≢∪##.Registry.GetGroupName¨list1[;1]
(rc msg list2)←stop ∆UCMD'CopyRegistry [localhost] "',tempDir,'" -verbose=1'
msg Assert 0=rc
→T.GoToTidyUp~</≢¨list1 list2
→T.GoToTidyUp~1<≢∪##.Registry.GetGroupName¨list2[;1]
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert 0=rc
⍝Done
r←Test_UC_242(stopFlag batchFlag);⎕TRAP;list1;list2;msg;rc;stop;tempDir
⍝ Copy some specific packages, first without, then with dependencies
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir⊃⎕SI
stop←0
(rc msg list1)←stop ∆UCMD'CopyRegistry [localhost] "',tempDir,'" -verbose=1 -list=aplteam-OS,aplteam-rideclient -dependencies=0 -latest'
msg Assert 0=rc
→T.GoToTidyUp 2≠≢list1
(rc msg list2)←stop ∆UCMD'CopyRegistry [localhost] "',tempDir,'" -verbose=1 -list=aplteam-OS,aplteam-rideclient -latest'
msg Assert 0=rc
→T.GoToTidyUp~</≢¨list1 list2
→T.GoToTidyUp~∧/⎕NEXISTS¨(⊂tempDir,'/'),¨list1[;1]
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert 0=rc
⍝Done
r←Test_UC_243(stopFlag batchFlag);⎕TRAP;msg;rc;stop;tempDir;list1;list2
⍝ Copy some specific packages defined via a variable
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir⊃⎕SI
'TEMP'#.⎕NS''
stop←0
(rc msg list1)←stop ∆UCMD'CopyRegistry [localhost] "',tempDir,'" -verbose=1 -list=#.TEMP.ThesePkgs1 -dependencies=0 -latest'
msg Assert 0=rc
→T.GoToTidyUp 2≠≢list1
(rc msg list2)←stop ∆UCMD'CopyRegistry [localhost] "',tempDir,'" -verbose=1 -list=#.TEMP.ThesePkgs2 -dependencies=0 -latest'
msg Assert 0=rc
→T.GoToTidyUp 2≠≢list2
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert 0=rc
⍝Done
r←Test_UC_244(stopFlag batchFlag);⎕TRAP;msg;rc;stop;tempDir;filename;list
⍝ Copy some specific packages defined via a file
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
tempDir←∆GetTempDir⊃⎕SI
filename←tempDir,'/These Pkgs.txt'
(⊂'aplteam-OS' 'aplteam-rideclient')⎕NPUT filename 1
stop←0
(rc msg list)←stop ∆UCMD'CopyRegistry [localhost] "',tempDir,'" -verbose=1 -list=file://"',filename,'" -dependencies=0 -latest'
msg Assert 0=rc
→T.GoToTidyUp 2≠≢list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce tempDir
msg Assert 0=rc
⍝Done
r←Test_UC_245(stopFlag batchFlag);⎕TRAP;msg;rc;stop;list
⍝ Copy some specific packages defined via a file
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg list)←stop ∆UCMD'CopyRegistry [localhost] -verbose=1 -dry'
msg Assert 0=rc
→T.PassesIf 0<≢list
r←T._OK
⍝Done
R←Test_UC_260(stopFlag batchFlag);⎕TRAP;buildList
⍝ Exercise ]Tatin.LoadDependencies from within a namespace
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
⍝#.Foo.fn←stop∘⎕THIS.{⍺ ∆UCMD'LoadDependencies ',⍵}
:With #.Foo
∆res←⎕SE.UCMD'Tatin.LoadDependencies ',#.Tatin.TestCases.∆TEMP_TEST_DATA,'/InstallFromList'
:EndWith
→T.GoToTidyUp'Dependencies loaded into #.Foo:'{⍺≢(≢⍺)↑⍵}∊#.Foo.∆res
buildList←∆JSON⊃⎕NGET ∆TEMP_TEST_DATA,'/InstallFromList/apl-buildlist.json'
→T.GoToTidyUp 9∨.≠⊃¨#.Foo.⎕NC¨{1↓1⊃('-'=⍵)⊂⍵}¨buildList.(principal/packageID)
R←T._OK
∆TidyUp:
⍝Done
R←Test_UC_261(stopFlag batchFlag);⎕TRAP;stop;msg;rc
⍝ Exercise ]Tatin.LoadDependencies with [MyUCMDs]foo as argument ("foo" does not exist)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
stop←0
(rc msg)←2↑stop ∆UCMD'LoadDependencies [MyUCMDs]foo'
→T.PassesIf 0≠rc
→T.PassesIf∨/'Folder does not exist:'⍷msg
→T.PassesIf'/MyUCMDs/foo'{≡/⎕C ⍺((-≢⍺)↑⍵)}F.EnforceSlash msg
R←T._OK
⍝Done
R←Test_UC_262(stopFlag batchFlag);⎕TRAP;stop;msg;rc;tempDir;parms;res;parms2;res2;cfg;cfgFilename;noOf
⍝ Exercise ]Tatin.LoadDependencies without an argument
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
:If 0=⎕SE.⎕NC'Cider'
R←T._NotApplicable ⋄ →0
:EndIf
tempDir←∆GetTempDir ⍬
parms←⎕SE.Cider.CreateCreateProjectParms tempDir
res←⎕SE.Cider.CreateProject parms
Assert 0=≢res
parms2←⎕SE.Cider.CreateOpenParms ⍬
parms2.folder←tempDir
parms2.parent←'#.TEMP'
parms2.projectSpace←'Foo'
parms2.batch←1
parms2.ignoreUserExec←1
parms2.watch←'ns'
res2←⎕SE.Cider.OpenProject parms2
Assert∨/'Project successfully opened and established in "#.TEMP.Foo"'⍷∊res2
cfgFilename←parms2.folder,'/cider.config'
cfg←⎕JSON⍠('Dialect' 'JSON5')⊢⊃⎕NGET cfgFilename
cfg.CIDER.parent←'#.TEMP'
cfg.CIDER.projectSpace←'Foo'
cfg.CIDER.dependencies.tatin←'MyPackages'
(⊂⎕JSON⍠('Dialect' 'JSON5')('Compact' 0)⊢cfg)⎕NPUT cfgFilename 1
res←⎕SE.Tatin.InstallPackages'[local]example-JustOneBeta'(parms2.folder,'/MyPackages')
Assert'example-JustOneBeta-0.1.0-beta-1'≡∊res
stop←0
(rc msg)←2↑stop ∆UCMD'LoadDependencies'
→T.GoToTidyUp 0≠rc
→T.GoToTidyUp 0<≢msg
→T.GoToTidyUp'JustOneBeta'≢⊃#.TEMP.Foo.JustOneBeta.Version
R←T._OK
∆TidyUp:
noOf←0 ⎕SE.Cider.CloseProject #.TEMP.Foo
'Unable to close #.TEMP.Foo?!'Assert 1=noOf
(rc msg)←F.RmDirByForce tempDir
msg Assert rc=0
⍝Done
r←Test_UC_300(stopFlag batchFlag);⎕TRAP;rc;msg;res;stop
⍝ Exercise ]Tatin.UsageData with just an alias to get a list of all files available for download
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'UsageData [localhost]'
→T.PassesIf 0=rc
→T.PassesIf 0<≢res
→T.PassesIf 2=≡res
r←T._OK
⍝Done
r←Test_UC_301(stopFlag batchFlag);⎕TRAP;rc;msg;res;stop;ref
⍝ Exercise ]Tatin.UsageData with -download flag
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
ref←∆GetRefToTatin
ref.Client.CommTools.Select_Choices←1 2⍴'SelectRegistry@' '[localhost]'
ref.Client.CommTools.Select_Choices⍪←'Please select the file(s) you wish to download:' 1
stop←0
(rc msg res)←stop ∆UCMD'UsageData -download'
→T.GoToTidyUp 0≠rc
→T.GoToTidyUp 0=≢res
→T.GoToTidyUp 1≠≢F.ListFiles res
r←T._OK
∆TidyUp:
F.RmDir res
ref.Client.CommTools.Cleanup
⍝Done
r←Test_UC_302(stopFlag batchFlag);⎕TRAP;rc;msg;res;stop
⍝ Exercise ]Tatin.UsageData with -download flag
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'UsageData [localhost] -download -all'
→T.GoToTidyUp 0≠rc
→T.GoToTidyUp 0=≢res
→T.GoToTidyUp~0<≢F.ListFiles res
r←T._OK
∆TidyUp:
F.RmDir res
⍝Done
r←Test_UC_303(stopFlag batchFlag);⎕TRAP;rc;msg;res;stop;tempFolder
⍝ Exercise ]Tatin.UsageData with -download flag and the -folder= option
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
tempFolder←F.GetTempSubDir⊃⎕SI
(rc msg res)←stop ∆UCMD'UsageData [localhost] -download -all -folder=',tempFolder
→T.GoToTidyUp 0≠rc
→T.GoToTidyUp tempFolder≢res
→T.GoToTidyUp~0<≢F.ListFiles res
r←T._OK
∆TidyUp:
F.RmDir tempFolder
⍝Done
r←Test_UC_304(stopFlag batchFlag);⎕TRAP;rc;msg;res;stop
⍝ Exercise ]Tatin.UsageData with -download and the -unzip flag
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'UsageData [localhost] -download -unzip -all'
→T.GoToTidyUp 0≠rc
→T.GoToTidyUp~0<≢F.ListFiles res
r←T._OK
∆TidyUp:
F.RmDir res
⍝Done
r←Test_UC_400(stopFlag batchFlag);⎕TRAP;msg;rc;stop;res;ref
⍝ Exercise ]DeprecatePackage on an existing package twice
⍝ First time it should work, second time it shouldn't because it is already deprecated.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
ref←∆GetRefToTatin
ref.Client.CommTools.YesOrNo_Answers←1 2⍴('Sure that you want to deprecate <example-versions-1> on ',∆LocalHostAndPort,' ?')'Y'
stop←0
(rc msg res)←stop ∆UCMD'DeprecatePackage [localhost]/example-versions-1 "Reason for deprecation"'
→T.GoToTidyUp 0≠rc
→T.GoToTidyUp 1≠⎕NEXISTS ∆TEMP_SERVER_FOLDER,'/example-versions-1.1.0'
→T.GoToTidyUp 1≠⎕NEXISTS ∆TEMP_SERVER_FOLDER,'/example-versions-1.1.0/example-versions-1.1.0.zip'
→T.GoToTidyUp~∨/'Successfully deprecated: example-versions-1 on'⍷res
(rc msg res)←stop ∆UCMD'DeprecatePackage [localhost]/example-versions-1 "Reason for deprecation" -force'
→T.GoToTidyUp 0≠rc
→T.GoToTidyUp~∨/'Package was already deprecated'⍷res
r←T._OK
∆TidyUp:
F.RmDir ∆TEMP_SERVER_FOLDER,'/example-versions-1.1.0'
ref.Client.CommTools.Cleanup
⍝Done
r←Test_UC_401(stopFlag batchFlag);⎕TRAP;msg;rc;stop;res
⍝ Exercise ]DeprecatePackage on an non-existing package
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'DeprecatePackage [localhost]/does-notExist-1 "firlefanz" -force'
→T.PassesIf 0=rc
→T.PassesIf'Package not found'≡res
r←T._OK
⍝Done
r←Test_UC_402(stopFlag batchFlag);⎕TRAP;msg;rc;stop;res
⍝ Exercise ]DeprecatePackage on an non-existing major version of an existing package
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'DeprecatePackage [localhost]/example-versions-9 "firlefanz" -force'  ⍝ Major version 9 does not exist
→T.PassesIf 0=rc
→T.PassesIf∧/∨/¨'Deprecating example-versions-9 on' 'failed: Package not found'⍷¨⊂res
r←T._OK
⍝Done
r←Test_UC_403(stopFlag batchFlag);⎕TRAP;msg;rc;stop;res
⍝ Exercise ]Deprecate on an existing package without specifying a major version number
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'DeprecatePackage [localhost]/example-versions "Reason for deprecation" -force'
→T.GoToTidyUp 0≠rc
⍝ Has three major versions, and for those there now must be new minor versions available:
→T.GoToTidyUp 1≠⎕NEXISTS ∆TEMP_SERVER_FOLDER,'/example-versions-0.2.0'
→T.GoToTidyUp 1≠⎕NEXISTS ∆TEMP_SERVER_FOLDER,'/example-versions-1.1.0'
→T.GoToTidyUp 1≠⎕NEXISTS ∆TEMP_SERVER_FOLDER,'/example-versions-2.1.0'
r←T._OK
∆TidyUp:
F.RmDir ∆TEMP_SERVER_FOLDER,'/example-versions-0.2.0'
F.RmDir ∆TEMP_SERVER_FOLDER,'/example-versions-1.1.0'
F.RmDir ∆TEMP_SERVER_FOLDER,'/example-versions-2.1.0'
⍝Done
r←Test_UC_500(stopFlag batchFlag);⎕TRAP;rc;msg;result;stop
⍝ Exercise ]Tatin.FindDependencies for two packages without folder (defaults to current directory)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg result)←stop ∆UCMD'FindDependencies APLTreeUtils2,Tester2'
Assert 0=rc
→T.PassesIf 2=⍴⍴result
→T.PassesIf ∆CheckForHavingDependencyFile result
r←T._OK
⍝Done
r←Test_UC_501(stopFlag batchFlag);⎕TRAP;rc;msg;result;stop
⍝ Exercise ]Tatin.FindDependencies of two packages and the folder
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg result)←stop ∆UCMD'FindDependencies APLTreeUtils2,Tester2 ',##.CiderConfig.HOME
Assert 0=rc
→T.PassesIf 0<≢result
→T.PassesIf∧/∆CheckForHavingDependencyFile result
r←T._OK
⍝Done
r←Test_UC_502(stopFlag batchFlag);⎕TRAP;rc;msg;result;stop
⍝ Exercise ]Tatin.FindDependencies with -verbose
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg result)←stop ∆UCMD'FindDependencies APLTreeUtils2,Tester2 ',##.CiderConfig.HOME,' -verbose'
Assert 0=rc
→T.PassesIf 2=⍴⍴result
→T.PassesIf ∆CheckVerboseResult result'APLTreeUtils2,Tester2'
r←T._OK
⍝Done
r←Test_UC_503(stopFlag batchFlag);⎕TRAP;rc;msg;result;stop
⍝ Exercise ]Tatin.FindDependencies with an invalid package list
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg result)←stop ∆UCMD'FindDependencies 1APLTreeUtils2,Tester2 ./'
→T.PassesIf rc∊911 ##.Registry.ErrorNo
→T.PassesIf∨/'Invalid package definition'⍷msg
r←T._OK
⍝Done
r←Test_UC_510(stopFlag batchFlag);⎕TRAP;rc;msg;res;stop
⍝ Exercise ]Tatin.FindDependencies with on a local directory with a single package
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'FindDependencies OS ',##.CiderConfig.HOME
→T.PassesIf rc=0
→T.PassesIf 2=⍴⍴res
→T.PassesIf ∆CheckForHavingDependencyFile res
r←T._OK
⍝Done
r←Test_UC_511(stopFlag batchFlag);⎕TRAP;rc;msg;res;stop
⍝ Exercise ]Tatin.FindDependencies with on a local directory with multiple package
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'FindDependencies APLTreeUtils2,tester2 ',##.CiderConfig.HOME
→T.PassesIf rc=0
→T.PassesIf 2=⍴⍴res
→T.PassesIf ∆CheckForHavingDependencyFile res
r←T._OK
⍝Done
r←Test_UC_512(stopFlag batchFlag);⎕TRAP;rc;msg;res;stop
⍝ Exercise ]Tatin.FindDependencies with one package on the locally running test server
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'FindDependencies APLTreeUtils2,tester2 [localhost]'
→T.PassesIf rc=0
→T.PassesIf 2=⍴⍴res
→T.PassesIf 50<≢res
r←T._OK
⍝Done
r←Test_UC_513(stopFlag batchFlag);⎕TRAP;rc;msg;res;stop;regList
⍝ Exercise ]Tatin.FindDependencies with on all servers with a priority greater than 0 for two common packages
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'FindDependencies APLTreeUtils2,tester2 [*]'
→T.PassesIf rc=0
→T.PassesIf 2=⍴⍴res
regList←TC.ListRegistries''
regList←(regList[;RI.priority]>0)⌿regList
→T.PassesIf(≢regList)=+/0<≢¨res[;1]
r←T._OK
⍝Done
r←Test_UC_514(stopFlag batchFlag);⎕TRAP;rc;msg;res;stop;regList
⍝ Exercise ]Tatin.FindDependencies with on all servers with a priority greater than 0 for a non-existend package
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'FindDependencies DosNotExist [*]'
→T.PassesIf rc=0
→T.PassesIf 2=⍴⍴res
→T.PassesIf 0=+/≢¨res[;2]              ⍝ No hits
regList←TC.ListRegistries''
regList←(regList[;RI.priority]>0)⌿regList
→T.PassesIf(≢regList)=+/0<≢¨res[;1]
r←T._OK
⍝Done
r←Test_UC_600(stopFlag batchFlag);⎕TRAP;rc;msg;res;filename;folder
⍝ Exercise ]Tatin.PackageDependencies with defaults
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
(rc msg res)←∆UCMD'PackageDependencies TestData/Boo-Project/packages_dev/aplteam-FilesAndDirs-5.7.1'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf 0<≢res
res←(⎕UCS 10)(≠⊆⊢)res
→T.PassesIf∧/'aplteam-'∘{⍺≡(≢⍺)↑⍵}¨res
r←T._OK
⍝Done
r←Test_UC_601(stopFlag batchFlag);⎕TRAP;rc;msg;res
⍝ Exercise ]Tatin.PackageDependencies with defaults
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
:If batchFlag
→0,r←T._OK
:EndIf
(rc msg res)←∆UCMD'PackageDependencies TestData/Boo-Project/packages_dev/aplteam-FilesAndDirs-5.7.1 -edit'
→T.PassesIf(rc=0)∧0=≢msg
r←T._OK
⍝Done
r←Test_UC_602(stopFlag batchFlag);⎕TRAP;rc;msg;res;parms;ref
⍝ Exercise ]Tatin.PackageDependencies acting on an open Cider project
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
:If 0=⎕SE.⎕NC'Cider'
r←T._NotApplicable ⋄ →0
:EndIf
parms←⎕SE.Cider.CreateOpenParms''
parms.batch←1
parms.folder←'TestData/Boo-Project'
parms.ignoreUserExec←1
parms.verbose←0
res←⎕SE.Cider.OpenProject parms
Assert∨/'Project successfully opened and established in "#.booproj"'⍷∊res
ref←⎕SE._Tatin.Tatin.GetRefToTatin ⍬
ref.Client.C.Select_Choices←1 2⍴'SelectCiderProject@' '#.booproj'
ref.Client.C.Select_Choices⍪←'SelectPackageFolder@' 'packages/'
(rc msg res)←∆UCMD'PackageDependencies'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp'dyalog-HttpCommand-4.0.24'≢⎕TC~⍨∊res
r←T._OK
∆TidyUp:
{}0 ⎕SE.Cider.CloseProject'#.booproj'
ref.Client.C.Cleanup
⍝Done
r←Test_UC_603(stopFlag batchFlag);⎕TRAP;rc;msg;res;parms;ref
⍝ Exercise ]Tatin.PackageDependencies acting on an open Cider project
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
:If 0=⎕SE.⎕NC'Cider'
r←T._NotApplicable ⋄ →0
:EndIf
parms←⎕SE.Cider.CreateOpenParms''
parms.batch←1
parms.folder←'TestData/Boo-Project'
parms.ignoreUserExec←1
parms.verbose←0
res←⎕SE.Cider.OpenProject parms
Assert∨/'Project successfully opened and established in "#.booproj"'⍷∊res
ref←⎕SE._Tatin.Tatin.GetRefToTatin ⍬
ref.Client.C.Select_Choices←1 2⍴'SelectCiderProject@' '#.booproj'
ref.Client.C.Select_Choices⍪←'SelectPackageFolder@' 'packages_dev/'
(rc msg res)←∆UCMD'PackageDependencies'
→T.GoToTidyUp~(rc=0)∧0=≢msg
res←(⎕UCS 10)(≠⊆⊢)res
→T.GoToTidyUp~res ∆LazyMatch⊃⎕NGET'TestData/Boo-Project/packages_dev/apl-dependencies.txt' 1
r←T._OK
∆TidyUp:
{}0 ⎕SE.Cider.CloseProject'#.booproj'
ref.Client.C.Cleanup
⍝Done
r←Test_UC_800(stopFlag batchFlag);⎕TRAP;res;rc;msg;aliasFilename;aliase;aliase2;alias;zipFilename;targetDir;qdmx;list;expected;ref
⍝ Exercise ]Tatin.InstallPackages with a Cider alias and load it
⍝ The Cider alias is introduced temporarily
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
zipFilename←'file://',∆TEMP_TEST_DATA,'/ZIP-file/aplteam-APLGit-0.24.0.zip'
aliasFilename←⎕SE.Cider.GetCiderAliasFilename
:If ~⎕NEXISTS aliasFilename
(⊂'')##.FilesAndDirs.NPUT aliasFilename
:EndIf
aliase←⊃##.FilesAndDirs.NGET aliasFilename 1
alias←(⊃⎕SI)~'_'
targetDir←∆GetTempDir''
aliase2←aliase,⊂alias,'=',targetDir
(⊂aliase2)##.FilesAndDirs.NPUT aliasFilename 1
'CREATE!'##.FilesAndDirs.CheckPath targetDir,'/packages'
targetDir ⎕NCOPY ∆TEMP_TEST_DATA,'/ConfigFile/cider.config'
ref←∆GetRefToTatin
ref.Client.CommTools.YesOrNo_Answers←1 2⍴'InstallConfirmation@' 'Y'
(rc msg list)←∆UCMD'InstallPackages "',zipFilename,'" [',alias,']'
msg Assert 0=rc
expected←,⊂'aplteam-APLGit-0.24.0'
→T.GoToTidyUp expected≢' '~⍨¨1↓¯2↓,list
res←TC.LoadDependencies(targetDir,'/packages')#.TEMP
→T.GoToTidyUp'#._tatin.aplteam_APLGit_0_24_0'≢' '~⍨⍕res
→T.GoToTidyUp 2≠⍴⍴#.TEMP.APLGit.Methods
r←T._OK
∆TidyUp:
ref.Client.CommTools.Cleanup
(⊂aliase)##.FilesAndDirs.NPUT aliasFilename 1
(rc msg)←F.RmDirByForce targetDir
msg Assert rc=0
⍝Done
r←Test_UC∆DeletePkg_001(stopFlag batchFlag);⎕TRAP;rc;msg;stop;res
⍝ Exercise ]Tatin.DeletePackages on a single package with a complete package ID
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'DeletePackages [localhost]example-markapl-10.0.0'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf'1 package successfully deleted'≡res
r←T._OK
⍝Done
r←Test_UC∆DeletePkg_002(stopFlag batchFlag);⎕TRAP;rc;msg;res2;stop;res;ref
⍝ Exercise ]Tatin.DeletePackages on example-markapl-9, deleting all of that major version
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
ref←∆GetRefToTatin
ref.Client.CommTools.YesOrNo_Answers←1 2⍴'DeleteThisPkg@' 'y'
ref.Client.CommTools.Select_Choices←1 2⍴'SelectVersionsForDeletion@' 'a'
stop←0
(rc msg res)←stop ∆UCMD'DeletePackages [localhost]example-markapl-9'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp~' packages successfully deleted'{⍺≡(-≢⍺)↑⍵}res
→T.GoToTidyUp 0≠≢TC.ListVersions'[localhost]example-Markapl-9'
r←T._OK
∆TidyUp:
ref.Client.CommTools.Cleanup
⍝Done
r←Test_UC∆DeletePkg_003(stopFlag batchFlag);⎕TRAP;rc;msg;res2;stop;res;ref
⍝ Exercise ]Tatin.DeletePackages on example-markapl-11, deleting all of that major version
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
ref←∆GetRefToTatin
ref.Client.CommTools.YesOrNo_Answers←1 2⍴'DeleteThisPkg@' 'y'
ref.Client.CommTools.Select_Choices←1 2⍴'SelectVersionsForDeletion@' 'a'
stop←0
(rc msg res)←stop ∆UCMD'DeletePackages [localhost]example-markapl-11'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp'1 package successfully deleted'≢res
→T.GoToTidyUp 0≠≢TC.ListVersions'[localhost]example-Markapl-11'
r←T._OK
∆TidyUp:
ref.Client.CommTools.Cleanup
⍝Done
r←Test_UC∆DeletePkg_005(stopFlag batchFlag);⎕TRAP;rc;msg;res2;stop;res;ref
⍝ Exercise ]Tatin.DeletePackages on markapl (without a group name)
⍝ The user must select a group; The question whether anything should be deleted in answerd with "n".
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
ref←∆GetRefToTatin
ref.Client.CommTools.Select_Choices←1 2⍴'SelectGroup@' 'example'
ref.Client.CommTools.YesOrNo_Answers←1 2⍴'DeleteThisPkg@' 'n'
stop←0
(rc msg res)←stop ∆UCMD'DeletePackages [localhost]markapl'
→T.GoToTidyUp~(rc=0)∧0=≢msg
→T.GoToTidyUp'Cancelled by user'≢res
r←T._OK
∆TidyUp:
ref.Client.CommTools.Cleanup
⍝Done
r←Test_UC∆DeletePkg_010(stopFlag batchFlag);⎕TRAP;rc;msg;res2;stop;res
⍝ Exercise ]Tatin.DeletePackages on example-markapl, deleting all remaining packages
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'DeletePackages [localhost]example-markapl -force'
→T.PassesIf(rc=0)∧0=≢msg
→T.PassesIf∧/∨/¨'package' 'successfully' 'deleted'⍷¨⊂res
r←T._OK
⍝Done
r←Test_UC∆DeletePkg_901(stopFlag batchFlag);⎕TRAP;rc;msg;stop;res
⍝ Exercise ]Tatin.DeletePackages on example-markapl-999 which does not exist
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
stop←0
(rc msg res)←stop ∆UCMD'DeletePackages [localhost]example-markapl-999'
→T.PassesIf rc≠0
→T.PassesIf∨/'No matching packages found'⍷msg
→T.PassesIf 0=≢res
r←T._OK
⍝Done
r←Test_Uninstall_001(stopFlag batchFlag);⎕TRAP;rc
;dir;dir2;oldDependencies;oldBuildlist;msg;list;oldPkgList;newPkgList;newBuildlist;newDependencies
⍝ Attempt to uninstall a package by ID that has an alias assigned to it; must fail
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY'TestData/UnInstall/'
dir2←dir,'/UnInstall'
oldDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
oldBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
oldPkgList←F.ListDirs dir2,'/'
(list msg)←TC.UnInstallPackages'aplteam-EventCodes-3.0.1'dir2          ⍝ Without alias it must not be removed!
→T.GoToTidyUp 0≠≢list
→T.GoToTidyUp'Cannot uninstall: package has an alias assigned'≢msg
(list msg)←TC.UnInstallPackages'EC@aplteam-EventCodes-3.0.1'dir2
→T.GoToTidyUp~(⊂'EC@aplteam-EventCodes-3.0.1')∊list
→T.GoToTidyUp 0≠≢msg
newDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
newBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
newPkgList←F.ListDirs dir2,'/'
→T.GoToTidyUp 1≠-/≢¨oldDependencies newDependencies
→T.GoToTidyUp 0=-/≢¨oldPkgList newPkgList
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_Uninstall_002(stopFlag batchFlag);⎕TRAP;dir;dir2;msg;list
⍝ Uninstall a package that is not installed
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY'TestData/UnInstall/'
dir2←dir,'/UnInstall'
(list msg)←TC.UnInstallPackages'aplteam-DoesNotExit-1.0.0'dir2
→T.GoToTidyUp'Package is not installed'≢msg
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Uninstall_003(stopFlag batchFlag);⎕TRAP;expected;rc
;dir;dir2;oldDependencies;oldBuildlist;msg;list;oldPkgList;newPkgList;newBuildlist;newDependencies
⍝ Uninstall a package that has several dependencies
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY'TestData/UnInstall/'
dir2←dir,'/UnInstall'
oldDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
oldBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
oldPkgList←F.ListDirs dir2,'/'
(list msg)←TC.UnInstallPackages'aplteam-HandleError-4.0.2'dir2
→T.GoToTidyUp 0≠≢msg
expected←'aplteam-FilesAndDirs-5.0.1' 'aplteam-HandleError-4.0.2' 'aplteam-OS-3.0.1'
→T.GoToTidyUp~∧/expected∊list
newDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
newBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
newPkgList←F.ListDirs dir2,'/'
→T.GoToTidyUp 1≠-/≢¨oldDependencies newDependencies
→T.GoToTidyUp 3>-/≢¨oldPkgList newPkgList
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_Uninstall_004(stopFlag batchFlag);⎕TRAP;rc
;dir;dir2;oldDependencies;oldBuildlist;msg;list;oldPkgList;newPkgList;newBuildlist;newDependencies
⍝ Uninstall a package by its alias that has no dependencies
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY'TestData/UnInstall/'
dir2←dir,'/UnInstall'
oldDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
oldBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
oldPkgList←F.ListDirs dir2,'/'
(list msg)←TC.UnInstallPackages'EC@'dir2
→T.GoToTidyUp~(⊂'EC@aplteam-EventCodes-3.0.1')∊list
→T.GoToTidyUp 0≠≢msg
newDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
newBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
newPkgList←F.ListDirs dir2,'/'
→T.GoToTidyUp 1≠-/≢¨oldDependencies newDependencies
→T.GoToTidyUp 0=-/≢¨oldPkgList newPkgList
→T.GoToTidyUp'aplteam-EventCodes-3.0.1'{(⊂⍺)∊(-≢⍺)↑⍵}1⊃oldPkgList~newPkgList
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_Uninstall_005(stopFlag batchFlag);⎕TRAP;dir;dir2;list;msg
⍝ Attempt to uninstall a package by a non-existent alias
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY'TestData/UnInstall/'
dir2←dir,'/UnInstall'
(list msg)←TC.UnInstallPackages'DoesNotExist@'dir2
→T.GoToTidyUp'Package is not installed'≢msg
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Uninstall_006(stopFlag batchFlag);⎕TRAP;rc
;dir;dir2;oldDependencies;oldBuildlist;msg;list;oldPkgList;newPkgList;newBuildlist;newDependencies
⍝ Uninstall a package that has no dependencies but just its alias
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY'TestData/UnInstall/'
dir2←dir,'/UnInstall'
oldDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
oldBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
oldPkgList←F.ListDirs dir2,'/'
(list msg)←TC.UnInstallPackages'EC@'dir2
→T.GoToTidyUp~(⊂'EC@aplteam-EventCodes-3.0.1')∊list
→T.GoToTidyUp 0≠≢msg
newDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
newBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
newPkgList←F.ListDirs dir2,'/'
→T.GoToTidyUp 1≠-/≢¨oldDependencies newDependencies
→T.GoToTidyUp 0=-/≢¨oldPkgList newPkgList
→T.GoToTidyUp'aplteam-EventCodes-3.0.1'{(⊂⍺)∊(-≢⍺)↑⍵}1⊃oldPkgList~newPkgList
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_Uninstall_007(stopFlag batchFlag);⎕TRAP;dir;dir2;list;msg
⍝ Uninstall a package by {name} that does not exist
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY'TestData/UnInstall/'
dir2←dir,'/UnInstall'
(list msg)←TC.UnInstallPackages'Does-NotExist'dir2
→T.GoToTidyUp 0≠≢list
→T.GoToTidyUp msg≢'Package is not installed'
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Uninstall_008(stopFlag batchFlag);⎕TRAP
;dir;dir2;oldDependencies;oldBuildlist;msg;list;oldPkgList;newPkgList;newBuildlist;newDependencies
⍝ Uninstall a package that has no dependencies
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY'TestData/UnInstall5/'
dir2←dir,'/UnInstall5'
oldDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
oldBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
oldPkgList←F.ListDirs dir2,'/'
(list msg)←TC.UnInstallPackages'aplteam-Execute-3.0.2'dir2
→T.GoToTidyUp('aplteam-Execute-3.0.2' 'aplteam-APLTreeUtils2-1.1.1')≢list
→T.GoToTidyUp 0≠≢msg
newDependencies←1⊃F.NGET(dir2,'/',TC.Reg.DependenciesFilename)1
newBuildlist←Reg.GetJsonFromFile dir2,'/',TC.Reg.BuildListFilename
newPkgList←F.ListDirs dir2,'/'
→T.GoToTidyUp 1≠-/≢¨oldDependencies newDependencies
→T.GoToTidyUp 2≠-/≢¨oldPkgList newPkgList
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Uninstall_010(stopFlag batchFlag);⎕TRAP;dir;res;msg;list;expected
⍝ Install three versions of the same package, then un-install one of them.
⍝ The superfluous package is removed as well.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY⍠('Wildcard' 1)⊣∆TEMP_TEST_DATA,'/UnInstall4/*'
(list msg)←TC.UnInstallPackages'aplteam-APLTreeUtils-6.0.0'dir
Assert 0=≢msg
expected←,⊂'aplteam-APLTreeUtils-6.0.0'
→T.GoToTidyUp~expected ∆LazyMatch list
→T.GoToTidyUp 2≠≢F.ListDirs dir
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Uninstall_012(stopFlag batchFlag);⎕TRAP;expected;dir;dir2;msg;list;rc
⍝ Attempt to uninstall a package that is not a principal package; must fail
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY'TestData/UnInstall'
dir2←dir,'/UnInstall'
(list msg)←TC.UnInstallPackages'aplteam-APLTreeUtils2-1.1.1'dir2
Assert 0=≢list
→T.GoToTidyUp'Cannot uninstall: is not a principal package'≢msg
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_Uninstall_013(stopFlag batchFlag);⎕TRAP;dir;msg;list;expected
⍝ Install two packages, one of them in two versions, then un-install the single one
⍝ Uninstalls the unused version of APlTreeUtils as well
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY⍠('Wildcard' 1)⊣∆TEMP_TEST_DATA,'/UnInstall2/*'
(list msg)←TC.UnInstallPackages'P@aplteam-APLProcess-1.0.0'dir
Assert 0=≢msg
expected←'P@aplteam-APLProcess-1.0.0' 'aplteam-APLTreeUtils-6.0.0'
→T.GoToTidyUp≢/∊¨expected list
→T.GoToTidyUp 1≠≢F.ListDirs dir
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Uninstall_014(stopFlag batchFlag);⎕TRAP;dir;msg;list;rc
⍝ Specify an empty packageID; uninstalls any superfluous packages as a side effect
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY⍠('Wildcard' 1)⊣∆TEMP_TEST_DATA,'/UnInstall2/*'
(list msg)←TC.UnInstallPackages''dir
Assert 0=≢msg
→T.GoToTidyUp(,⊂'aplteam-APLTreeUtils-6.0.0')≢list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_Uninstall_015(stopFlag batchFlag);⎕TRAP;dir;msg;list;expected
⍝ Start with three packages, one of them in two versions, then un-install the single one
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY⍠('Wildcard' 1)⊣∆TEMP_TEST_DATA,'/UnInstall2/*'
(list msg)←TC.UnInstallPackages'P@'dir
Assert 0=≢msg
expected←'P@aplteam-APLProcess-1.0.0' 'aplteam-APLTreeUtils-6.0.0'
→T.GoToTidyUp expected≢list
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Uninstall_016(stopFlag batchFlag);⎕TRAP;dir;msg;list;expected;rc
⍝ Start with three packages, one of them in two versions, then un-install the single one
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY⍠('Wildcard' 1)⊣∆TEMP_TEST_DATA,'/UnInstall3/*'
(list msg)←TC.UnInstallPackages'davin-FilePlus-0.1.2'dir
Assert 0=≢msg
→T.GoToTidyUp'davin-FilePlus-0.1.2'≢∊list
(list msg)←TC.UnInstallPackages'Davin-Tester-0.1.0-test'dir
Assert 0=≢msg
→T.GoToTidyUp'Davin-Tester-0.1.0-test'≢∊list
(list msg)←TC.UnInstallPackages'davin-SQLFns-0.2.0'dir
Assert 0=≢msg
→T.GoToTidyUp'davin-SQLFns-0.2.0'≢∊list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
msg Assert rc=0
⍝Done
r←Test_Uninstall_020(stopFlag batchFlag);⎕TRAP;dir;dir2;list;msg;rc
⍝ Uninstall a package just by {name} (no group, no version)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY'TestData/UnInstall/'
dir2←dir,'/UnInstall'
(list msg)←TC.UnInstallPackages'Tester2'dir2
→T.GoToTidyUp 2≠≢list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
Assert rc=0
⍝Done
r←Test_Uninstall_021(stopFlag batchFlag);⎕TRAP;dir;dir2;list;msg;rc
⍝ Uninstall a package just by {name} (no group, no version)
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
dir ⎕NCOPY'TestData/UnInstall/'
dir2←dir,'/UnInstall'
(list msg)←TC.UnInstallPackages'aplteam-Tester2'dir2
→T.GoToTidyUp 2≠≢list
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce dir
Assert rc=0
⍝Done
r←Test_Uninstall_030(stopFlag batchFlag);⎕TRAP;dir;res;msg;list;qdmx
⍝ Try to uninstall when the dependency file is empty (bad data).
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
dir←∆GetTempDir''
res←⎕SE.Tatin.InstallPackages(∆TEMP_TEST_DATA,'/ExamplePackages/Packages/aplteam-MultipleObjectsNoAPI-0.1.0.zip')dir
Assert'aplteam-MultipleObjectsNoAPI-0.1.0'≡∊res
res←⎕SE.Tatin.InstallPackages(∆TEMP_TEST_DATA,'/ExamplePackages/Packages/aplteam-SingleClassWithAPI-0.1.0.zip')dir
Assert'aplteam-SingleClassWithAPI-0.1.0'≡∊res
(⊂'')F.NPUT(dir,'/apl-dependencies.txt')1
:Trap ##.Registry.ErrorNo
{}TC.UnInstallPackages'P@aplteam-APLProcess-1.0.0'dir
→T.GoToTidyUp 1
:Else
qdmx←⎕DMX
→T.GoToTidyUp'apl-dependencies.txt is empty'≢qdmx.EM
:EndTrap
r←T._OK
∆TidyUp:
Assert 0=⊃F.RmDir dir
⍝Done
r←Test_Uninstall_040(stopFlag batchFlag);⎕TRAP;res;msg;zipFilename;rc;list
⍝ Uninstall a user command package from [MyUCMDs]
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
zipFilename←∆TEMP_SERVER_FOLDER,'/example-UC-1.0.0/example-UC-1.0.0.zip'
res←⎕SE.Tatin.InstallPackages zipFilename'[MyUCMDs]'
Assert'example-UC-1.0.0'≡∊res
(list msg)←TC.UnInstallPackages'example-UC-1.0.0' '[Myucmds]'
→T.GoToTidyUp'example-UC-1.0.0'≢∊list
→T.GoToTidyUp 0≠≢msg
→T.GoToTidyUp F.IsDir TC.GetMyUCMDsFolder'UC'
r←T._OK
∆TidyUp:
{}F.RmDirByForce TC.GetMyUCMDsFolder'UC'
⍝Done
r←Test_Uninstall_041(stopFlag batchFlag);⎕TRAP;res;msg;zipFilename;rc;list
⍝ Uninstall a user command package from [MyUCMDs] but from a folder that carries other files as well
⍝ In this case the installation folder MUST NOT be removed!
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
zipFilename←∆TEMP_SERVER_FOLDER,'/example-UC-1.0.0/example-UC-1.0.0.zip'
res←⎕SE.Tatin.InstallPackages zipFilename'[MyUCMDs]'
Assert'example-UC-1.0.0'≡∊res
(⊂'Hello')⎕NPUT TC.GetMyUCMDsFolder'UC/World.txt'  ⍝ This file prevents the folder from being deleted
(list msg)←TC.UnInstallPackages'example-UC-1.0.0' '[Myucmds]'
→T.GoToTidyUp'example-UC-1.0.0'≢∊list
→T.GoToTidyUp 0≠≢msg
→T.GoToTidyUp~F.IsDir TC.GetMyUCMDsFolder'UC'
r←T._OK
∆TidyUp:
{}F.RmDirByForce TC.GetMyUCMDsFolder'UC'
⍝Done
r←Test_Uninstall_045(stopFlag batchFlag);⎕TRAP;res;msg;zipFilename;rc;list
⍝ Uninstall a user command package from a sub-folder in [MyUCMDs]; was once a bug
⍝ In reality this will probably never happen, but then, who knows...
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
zipFilename←∆TEMP_SERVER_FOLDER,'/example-UC-1.0.0/example-UC-1.0.0.zip'
res←⎕SE.Tatin.InstallPackages zipFilename'[MyUCMDs]/test-uninstall'
Assert'example-UC-1.0.0'≡∊res
zipFilename←∆TEMP_REGISTRY_FOLDER,'/aplteam-APLTreeUtils-7.0.0/aplteam-APLTreeUtils-7.0.0.zip'
res←⎕SE.Tatin.InstallPackages zipFilename'[MyUCMDs]/test-uninstall'
Assert'aplteam-APLTreeUtils-7.0.0'≡∊res
(list msg)←TC.UnInstallPackages'example-UC-1.0.0' '[Myucmds]test-uninstall'
→T.GoToTidyUp'example-UC-1.0.0'≢∊list
→T.GoToTidyUp 0≠≢msg
→T.GoToTidyUp F.IsFile TC.GetMyUCMDsFolder'test-uninstall/UC.aplc'
r←T._OK
∆TidyUp:
(rc msg)←F.RmDirByForce TC.GetMyUCMDsFolder,'/test-uninstall'
Assert 0=rc
⍝Done
R←Test_ZZZ_001(stopFlag batchFlag);⎕IO;⎕ML;⎕TRAP;allFolders;bool;msg;sourceFolder;plural
⍝ Checks whether the APLSource\ folder contains sub-folders Plodder and/or RumbaLean
⍝ That should not be the case because they are independent projects copied over.
⍝ However, if one edits a function then Link will save that function into APLSource\,
⍝ potentially causing confusion, therefore we test for this not being the case.
⎕IO←1 ⋄ ⎕ML←1
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
:If 0<##.⎕NC'CiderConfig'
sourceFolder←##.CiderConfig.(HOME,'/',CIDER.source),'/'
:Else
sourceFolder←F.PWD,'/APLSource/'
:EndIf
allFolders←{(≢⍵)↓¨F.ListDirs ⍵}sourceFolder
bool←'Plodder' 'RumbaLean'∊allFolders
:If 0<+/bool
plural←(1<+/bool)/'s'
⎕←'"',sourceFolder,'" contain',plural,' ',((1+1<+/bool)⊃'this' 'these'),' folder',plural,': ',⊃{⍺,', ',⍵}/bool/'Plodder/' 'RumbaLean/'
→T.FailsIf 1
:EndIf
R←T._OK
⍝Done
R←Test_ZZZ_002(stopFlag batchFlag);⎕IO;⎕ML;⎕TRAP;list;report;filename;ns;bool
⍝ Checks whether any build list refers to a non-local ZIP file.
⍝ Always returns OK but reports any bad findings to the session.
⍝ Not executed in batch mode.
⎕IO←1 ⋄ ⎕ML←1
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
:If batchFlag
R←T._NoBatchTest ⋄ →0
:EndIf
list←⊃('recursive' 1)F.Dir ##.CiderConfig.HOME,'/apl-buildlist.json*'
:If 0<≢list
:AndIf 0<≢list←(∨/¨'zip'∘⍷¨⊃∘F.NGET¨list)/list
report←''
:For filename :In list
ns←TC.Reg.GetJsonFromFile filename
:If 0<≢ns.url
bool←'.zip'{⍺∘≡¨(-≢⍺)↑¨⍵}ns.url
:If ∨/'./'∘≢¨2↑¨'file://'∘{⍵↓⍨(≢⍺)×⍺≡(≢⍺)↑⍵}¨bool/ns.url
report,←⊂filename
:EndIf
:EndIf
:EndFor
:AndIf 0<≢report
⎕←'>>> These build lists point to a non-local ZIP file:'
⎕←↑report
:EndIf
R←T._OK
⍝Done
R←Test_ZZZ_997(stopFlag batchFlag);⎕IO;⎕ML;⎕TRAP;report;buff;rf;candidate;lookFor1;lookFor2
⍝ Checks on two text vectors: "TODO" & "CHECK" embraced by "⍝"; never fails, just reports.
⎕IO←1 ⋄ ⎕ML←1
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
:If batchFlag
R←T._NoBatchTest
:Else
R←T._OK
report←''
rf←##.⎕THIS
lookFor1←'⍝ C H E C K ⍝'~' '                                   ⍝ To avoid finding this function
buff←rf T.FindSpecialString lookFor1
buff←(buff[;1]≢¨⎕XSI[1])⌿buff  ⍝ remove caller
:If 0≠≢buff
report,←↓(⊂' ',lookFor1,' found:'),(⊂'   '),¨buff
:EndIf
lookFor2←'⍝ T O D O ⍝'~' '                                     ⍝ To avoid finding this function
buff←rf T.FindSpecialString lookFor2
buff←(buff[;1]≢¨⎕XSI[1])⌿buff  ⍝ remove caller
candidate←9=⊃∘⎕NC¨buff[;1]
buff←(candidate{⍺:⍵≡⍕⍎⍵ ⋄ 1}¨buff[;1])⌿buff   ⍝ remove references
:If 0≠≢buff
report,←↓(⊂' ',lookFor2,' found:'),(⊂'   '),¨buff
:EndIf
:If 1=≢report
report,←⊂'    Nothing found!'
:Else
⎕←('Checking for ',lookFor1,' and ',lookFor2,' '){⍵↑,'--- ',⍺,' ',⍵⍴'-'}80⌊⎕PW-1
⎕←↑report
:EndIf
:EndIf
⍝Done
R←Test_ZZZ_998(stopFlag batchFlag);v;n;d;xml;rf;f1;f2;⎕TRAP;refs
⍝ Check the "Version" function.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
R←T._Failed
refs←#.Tatin.(Client Server)
:For rf :In refs
⍝ First we check whether "Version" returns a valid result:
(n v d)←rf.Version
d←{⍵/⍨3>+\'-'=⍵}d      ⍝ Remove trailing stuff like "-beta"
v←{⍵/⍨3>+\'.'=⍵}v      ⍝ Remove build ID separated by a dot (old & deprecated syntax)
v←(¯1+v⍳'+')↑v         ⍝ New syntax: build no. is separated by a "+"
f1←~5≤⍴v
f1∨←2≠'.'+.=v
f1∨←~∧/⎕D∊⍨'.'~⍨v/⍨2>+\v='.'
f1∨←10≠⍴d
f1∨←d[4 7+⎕IO]∨.≠'-'
f1∨←~∧/⎕D∊⍨d~'-'
:If f1
⎕←'Result of the "Version" function is invalid.'
:EndIf
→T.FailsIf f1
:EndFor
R←T._OK
r←∆CheckForHavingDependencyFile data
⍝ Takes the result of ]FindDependencies and checks whether all paths carry a file "apl-dependencies.txt"
data←(0<≢¨data[;1])⊂[1]data
r←∧/{∧/⎕NEXISTS((⊃⊃⍵)∘,¨1↓⍵[;2]),¨⊂'/apl-dependencies.txt'}¨data
⍝Done
r←∆CheckVerboseResult(data pkgList);bool1;data2;bool2
⍝ Takes the result of ]FindDependencies and checks whether paths have either a file "apl-dependencies.txt"
⍝ or carry one of "pkgList" in the name of the last part.
data←(0<≢¨data[;1])⊂[1]data
bool1←{⎕NEXISTS((⊃⊃⍵)∘,¨1↓⍵[;2]),¨⊂'/apl-dependencies.txt'}¨data
data2←(0,¨~bool1)⌿¨data
:If 2>≡pkgList
pkgList←','(≠⊆⊢)pkgList
:EndIf
pkgList←⎕C pkgList
data2←↑¨{{⎕C⊃,/1↓⎕NPARTS ⍵}¨⍵[;2]}¨data2
r←∧/¨bool1∨(~bool1)\¨pkgList∘{∨/⊃∨/⍺⍷¨⊂⍵}¨data2
⍝Done
∆CleanCache path
⍝ Deletes all folders but temp\ from the cache
F.RmDir¨{⍵/⍨(⊂'temp')≢¨2⊃¨⎕NPARTS¨⍵}F.ListDirs path,'/'
{r}←∆CopyTestServerDataTo toFolder
r←⍬
(toFolder,'/')⎕NCOPY⍠1⊣#.Tatin.CiderConfig.HOME,'/TestServer/*'
{r}←∆CreateExampleForMinimalVersionSelection1 dir;body;cfg;rc;msg;zipFilename;regDir;srcDir
⍝ This function establishes the first example of https://research.swtch.com/vgo-mvs
r←⍬
regDir←dir,'/reg'
srcDir←dir,'/src'
⍝ A
:If ~(⊂'minimalversion-A')∊TC.ListPackages regDir
body←':Namespace Test' 'Main←{' 'A-1.0.0' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'A'
cfg.version←'1.0.0'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(srcDir,'/packages')TC.Dependencies.Add'minimalversion-B-1.1.2'
(srcDir,'/packages')TC.Dependencies.Add'minimalversion-C-1.1.2'
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
:EndIf
⍝ B
body←':Namespace Test' 'Main←{' 'B-1.1.1' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'B'
cfg.version←'1.1.1'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(srcDir,'/packages')TC.Dependencies.Add'minimalversion-D-1.1.1'
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
body←':Namespace Test' 'Main←{' 'B-1.1.2' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'B'
cfg.version←'1.1.2'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(srcDir,'/packages')TC.Dependencies.Add'minimalversion-D-1.1.3'
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
⍝ C
body←':Namespace Test' 'Main←{' 'C-1.1.1' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'C'
cfg.version←'1.1.1'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
body←':Namespace Test' 'Main←{' 'C-1.1.2' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'C'
cfg.version←'1.1.2'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(srcDir,'/packages')TC.Dependencies.Add'minimalversion-D-1.1.4'
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
body←':Namespace Test' 'Main←{' 'C-1.1.3' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'C'
cfg.version←'1.1.3'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(srcDir,'/packages')TC.Dependencies.Add'minimalversion-F-1.1.1'
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
⍝ D
body←':Namespace Test' 'Main←{' 'D-1.1.1' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'D'
cfg.version←'1.1.1'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(srcDir,'/packages')TC.Dependencies.Add'minimalversion-E-1.1.1'
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
body←':Namespace Test' 'Main←{' 'D-1.1.2' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'D'
cfg.version←'1.1.2'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(srcDir,'/packages')TC.Dependencies.Add'minimalversion-E-1.1.1'
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
body←':Namespace Test' 'Main←{' 'D-1.1.3' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'D'
cfg.version←'1.1.3'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(srcDir,'/packages')TC.Dependencies.Add'minimalversion-E-1.1.2'
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
body←':Namespace Test' 'Main←{' 'D-1.1.4' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'D'
cfg.version←'1.1.4'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(srcDir,'/packages')TC.Dependencies.Add'minimalversion-E-1.1.2'
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
body←':Namespace Test' 'Main←{' 'D-1.2.0' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'D'
cfg.version←'1.2.0'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(srcDir,'/packages')TC.Dependencies.Add'minimalversion-E-1.1.2'
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
body←':Namespace Test' 'Main←{' 'D-2.0.0' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'D'
cfg.version←'2.0.0'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(srcDir,'/packages')TC.Dependencies.Add'minimalversion-E-1.1.2'
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
⍝ F
body←':Namespace Test' 'Main←{' 'F-1.1.1' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'F'
cfg.version←'1.1.1'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(srcDir,'/packages')TC.Dependencies.Add'minimalversion-G-1.1.1'
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
⍝ G
body←':Namespace Test' 'Main←{' 'G-1.1.1' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'G'
cfg.version←'1.1.1'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(srcDir,'/packages')TC.Dependencies.Add'minimalversion-F-1.1.1'
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
⍝ E
body←':Namespace Test' 'Main←{' 'E-1.1.1' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'E'
cfg.version←'1.1.1'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
body←':Namespace Test' 'Main←{' 'E-1.1.2' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'E'
cfg.version←'1.1.2'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
Assert F.MkDir srcDir
body←':Namespace Test' 'Main←{' 'E-1.1.3' '}' ':EndNamespace'
(⊂body)F.NPUT srcDir,'/Main.apln'
cfg←TC.InitPackageConfig ⍬
cfg.group←'minimalversion'
cfg.name←'E'
cfg.version←'1.1.3'
cfg.source←'Main.apln'
cfg.(os_lin os_mac os_win)←1
TC.WritePackageConfigFile srcDir cfg
(rc msg zipFilename)←TC.PublishPackage srcDir regDir
r,←⊂zipFilename
Assert 200=rc
Assert 0=1⊃F.RmDir srcDir
⍝Done
∆GetBestVersionFor←{
path←F.AddTrailingSep ⍺  ⍝ Either ∆TEMP_REGISTRY_FOLDER or ∆TEMP_SERVER_FOLDER
list←F.ListDirs path,⍵,'*'
data←Reg.InjectPublishingDate list
2⊃A.SplitPath⊃¯1↑list[Reg.SortIndexForPackageIDs data]
}
r←list ∆GetByExtension extension;bool
⍝ Useful in overcoming the fact that Windows and Linux provide different sort orders
extension←1 ⎕C extension
:If 1=+/bool←extension∘≡¨1 ⎕C 3⊃∘⎕NPARTS¨list
r←(bool⍳1)⊃list
:Else
r←bool⌿list
:EndIf
⍝Done
r←∆GetConfigPathForTests
r←(739⌶0),'/TatinTests/'
list←∆GetFileListFromZipArchive zipfile;tempDir
⍝ Unzip ⍵ into ⍺
tempDir←F.GetTempSubDir'Tatin'
zipfile ##.ZipArchive.UnzipTo tempDir,'/'
list←⊃('recursive' 1)F.Dir tempDir,'/*'
list←(F.IsFile list)/list
list←(1+≢tempDir)↓¨list
Assert 0=⊃F.RmDir tempDir
⍝Done
html←{accept}∆GetHtmlFromServer uri;request;res;path;host
⍝ Connects to server and returns the HTML, if any.
⍝ Requires an alias because it does not care about protocol.
⍝ In case the server does not return status code 200 an error is thrown. That's because "accept" (⍺)
⍝ defaults to 200. You may change this according to your needs.
accept←{0<⎕NC ⍵:⍎⍵ ⋄ 200}'accept'  ⍝ 200 (OK) is default
:If '/'∊uri
(host path)←uri{(⍵↑⍺)(⍵↓⍺)}¯1+uri⍳'/'
:Else
host←uri
path←'/'
:EndIf
host←TC.ReplaceRegistryAlias host
request←R.NewRequest 0
request.RequestTarget←path
request.Headers,←⊂'Accept' 'text/html'
request.Headers,←⊂'User-Agent' 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36'
res← TC.SendAndReceive host request
Assert accept∊res.StatusCode
html←¯4↓res.Content
⍝Done
∆GetMajorMinorPatch←{
r←⍵/⍨3>+\'.'=⍵
r↑⍨¯1+r⍳'+'
}
path←∆GetProjectPath
:If 0<##.⎕NC'CiderConfig'      ⍝ If it is an open Cider project...
path←##.CiderConfig.HOME   ⍝ ... then this rules the day
:Else
path←F.PWD                 ⍝ Otherwise we settle for the curren directory
:EndIf
ref←∆GetRefToTatin;statuse
:If 0<⎕SE.⎕NC'Link'
statuse←⎕SE.Link.Status''
:AndIf 2=⍴⍴statuse
:AndIf (⊂'#.Tatin')∊statuse[;1]
:AndIf 0<⎕SE._Tatin.⎕NC'DEVELOPMENT'
:AndIf (,1)≡,⎕SE._Tatin.DEVELOPMENT
ref←#.Tatin
:Else
ref←⎕SE._Tatin
:EndIf
path←∆GetServerPath;c;q;response
⍝ Works only with localhost and when the server runs in test mode.
⍝ Useful with the Tatin client test cases so that the existence of files and folders can be checked
⍝ and potentially be deleted after the test has been run successfully.
q←R.NewRequest 0
q.RequestTarget←'/v1/get-server-path'
response←TC.SendAndReceive (TC.ReplaceRegistryAlias '[localhost]') q
Assert response.StatusCode≡200
path←response.Content
:If ∧/':\'∊path
:AndIf 'W'≠⊃⊃# ⎕WG'APLVersion'
⍝ If the Server runs under Windows but the Client not then we assume that
⍝ the Client runs in WSL, which allows us to manipulate the path accordingly:
path←F.EnforceSlash{'/mnt/',⊃{(⎕C ⍺),⍵}/':'(≠⊆⊢)⍵}path
:EndIf
⍝Done
∆GetTempDir←{
⍺←⊃1↓⎕SI
dir←(739⌶0),'/TatinTests/',⍺
dir,←⍵
r1←F.RmDir dir
r2←F.MkDir dir
Assert r2:
dir
}
CACHE_PARMS←∆InitUserSettings caching
⎕se._Tatin.Client.MyUserSettings←TC.InitUserSettings ∆TEMP_TEST_DATA
CACHE_PARMS←⎕SE.Tatin.MyUserSettings.caching
TC.MyUserSettings.caching←caching
⍝Done
r←∆JSON json
r←⎕JSON⍠('Dialect' 'JSON5')⊣json
yes←x ∆LazyMatch y
:If 80=⎕DR y
yes←x≡(≢x)↑y
:Else
(x y)←,¨x y
yes←(∧/x∊y)∧(∧/y∊x)
:EndIf
r←path1 ∆LazyMatchPaths path2
r←⊃∆LazyMatch/F.NormalizePath¨path1 path2
r←∆LocalHostAndPort
r←'https://localhost:5001/'
r←∆NewUserSettings path
r←⎕NEW TC.UserSettings path
r.caching←0
{r}←∆RecompileIndexOnServer;response;request
⍝ Works only with localhost and when the server runs in test mode.
r←⍬
request←R.NewRequest 0
request.RequestTarget←'/v1/recompile-index'
response←TC.SendAndReceive(TC.ReplaceRegistryAlias'[localhost]')request
Assert response.StatusCode≡200
⍝Done
∆RemoveBuildFromVersion←{⍵/⍨3>+\⍵∊'.+'}
∆RemovePatchFromVersion←{⍵/⍨3>+\'.'=⍵}
{r}←∆RestoreMarkaplInTestServer flag;request;response;url;path;projects;projects_
⍝ The test cases in DeletePkg delete some example-MarkAPL packages.
⍝ This function copies them back into the test server's Registry and then issues a "recompile-index" command.
r←0
:If flag
path←∆TEMP_SERVER_FOLDER,'/..'
projects←F.ListDirs path,'\Data-Backup\'
projects_←2⊃¨A.SplitPath¨projects
∆TEMP_SERVER_FOLDER ⎕NCOPY⍠('IfExists' 'Replace')⊢projects
url←TC.ReplaceRegistryAlias'[localhost]'
request←R.NewRequest 0
request.RequestTarget←'/v1/recompile-index'
request.Method←'GET'
response←TC.SendAndReceive url request
Assert response.StatusCode=200
r←1
:EndIf
{r}←{uri}∆SetServerPolicy new;request;res
⍝ Tell the server the desired delete policiy and return the former setting.
⍝ 0 = None
⍝ 1 = Any
⍝ 2 = JustBetas
Assert(⊂new)∊'Any' 'None' 'JustBetas'
uri←{0<⎕NC ⍵:⍎⍵ ⋄ (TC.ReplaceRegistryAlias'[localhost]')}'uri'
request←R.NewRequest 0
request.RequestTarget←'/v1/set-delete-policy'
request.Method←'PUT'
request.Headers,←⊂'Accept' 'application/json'
request.Headers,←⊂'api-key'((TC.MyUserSettings.GetRegistry uri).api_key)
request.Content←new
res← TC.SendAndReceive uri request
Assert 200=res.StatusCode
r←res.Content
⍝Done
{success}←∆ShutdownTestServer dummy;request;response;counter;max;rc;msg
success←0
:If 0<⎕NC'∆P'
request←R.NewRequest 0
request.RequestTarget←'/v1/shutdown'
response←TC.SendAndReceive(TC.ReplaceRegistryAlias'[localhost]')request
success←200=response.StatusCode
counter←0
max←40
:Repeat
⎕DL 0.25
:Until ∆P.HasExited∨max<counter←counter+1
'Something went wrong with the server process - still running?!'Assert max>counter
⎕EX'∆P'
:EndIf
⍝Done
{r}←∆StartServerProcessForTests debugFlag;P;rc;parms
⍝ This function starts a server that acts on ∆TEMP_SERVER_FOLDER
⍝ It's the first version which uses aplteamm-APLProcess which works fine on Windows but not at all elsewhere
parms←##.APLProcess.CreateParms
parms.Exe←##.Admin.GetAPLVersion ⍬
:If 0  ⍝ Because "load" and "lx" do not work on Linux and Mac OS
:If 0<#.Tatin.⎕NC'CiderConfig'
parms.CommandLineArgs,←' load="',#.Tatin.CiderConfig.HOME,'/APLSource/Admin/LoadTatinAndStartServer.aplf" '
:Else
parms.CommandLineArgs,←' load="',F.PWD,'/APLSource/Admin/LoadTatinAndStartServer.aplf" '
:EndIf
:Else
parms.WorkspaceName←#.Tatin.CiderConfig.HOME,'/LoadTestServer.dws'
:If 0<#.Tatin.⎕NC'CiderConfig'
parms.CommandLineArgs,←' tatinHome="',#.Tatin.CiderConfig.HOME,'" '
:Else
parms.CommandLineArgs,←' tatinHome="',F.PWD,'" '
:EndIf
:EndIf
:If 0<⎕NC'∆TEMP_SERVER_FOLDER'
parms.CommandLineArgs,←'serverPath="',(F.ExpandPath ∆TEMP_SERVER_FOLDER,'..'),'" '
:EndIf
:If 0 ⍝ Because "load" and "lx" do not work on Linux and Mac OS
parms.CommandLineArgs,←'lx="',(debugFlag/'1 '),'#.LoadTatinAndStartServer 1" '
:EndIf
:If 0  ⍝ Only for analyzing problems:
parms.CommandLineArgs,←' -exec_setup=0 '
parms.CommandLineArgs,←' -stop_in_setup=1 '
:EndIf
:If 0
parms.CommandLineArgs,←' -x '
:Else
parms.CommandLineArgs,←'OFF2=1 '   ⍝ OFF=1 would work as well, but too early: Plodder would ⎕OFF rather than Tatin (No CodeCoverage then, for example)
:EndIf
parms.SessionFile←1
parms.WindowsStyle←'Normal'
parms.Wait←0
r←⎕NEW ##.APLProcess(,⊂parms)
⍝Done
{r}←∆StartServerProcessForTests_new debugFlag;P;rc;msg
⍝ This function starts a server that acts on ∆TEMP_SERVER_FOLDER
r←⎕NEW ##.APLProcess
r.Exe←##.Admin.GetAPLVersion ⍬
:If 0  ⍝ Because APLProcess does not process "load" and "lx" on Linux and Mac OS
:If 0<#.Tatin.⎕NC'CiderConfig'
r.Args,←' load="',#.Tatin.CiderConfig.HOME,'/APLSource/Admin/LoadTatinAndStartServer.aplf" '
:Else
r.Args,←' load="',F.PWD,'/APLSource/Admin/LoadTatinAndStartServer.aplf" '
:EndIf
:Else
r.Args←#.Tatin.CiderConfig.HOME,'/LoadTestServer.dws'
:If 0<#.Tatin.⎕NC'CiderConfig'
r.Args,←' tatinHome="',#.Tatin.CiderConfig.HOME,'" '
:Else
r.Args,←' tatinHome="',F.PWD,'" '
:EndIf
:EndIf
:If 0<⎕NC'∆TEMP_SERVER_FOLDER'
r.Args,←'serverPath="',∆TEMP_SERVER_FOLDER,'" '
:EndIf
:If 0 ⍝ Because APLProcess does not process "load" and "lx" on Linux and Mac OS
r.Args,←'lx="',(debugFlag/'1 '),'#.LoadTatinAndStartServer 1" '
:EndIf
:If 0  ⍝ Only for analyzing problems:
r.Args,←' -exec_setup=0 '
r.Args,←' -stop_in_setup=1 '
:EndIf
:If 0
r.Args,←' -x '
:Else
r.Args,←'OFF2=1 '   ⍝ OFF=1 would work as well, but too early: Plodder would ⎕OFF rather than Tatin (No CodeCoverage then, for example)
:EndIf
(rc msg)←r.Run
msg Assert rc=0
⍝Done
r←∆ThrownError
r←98 ⍝ error number thrown by the TC.Assert function
⍝Done
(rc msg result)←{stopFlag}∆UCMD arg;qdmx
rc←0 ⋄ result←msg←''
stopFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'stopFlag'
:Trap (~stopFlag)/0
result←⎕SE.UCMD'tatin.',arg,stopFlag/' -'
:Else
qdmx←⎕DMX
rc←qdmx.EN
msg←qdmx.EM
:EndTrap
Cleanup
⎕NUNTIE ⎕NNUMS
∆DeleteTempDir 1
⎕EX'∆P'
⎕EX'∆TEMP_SERVER_FOLDER'
⍝Done
Initial;testFilename;ignore
:If 0=##.⎕NC'Plodder'
:EndIf
:If 0<⎕NC'#.Tatin.CiderConfig.HOME'
∆TEMP_SERVER_FOLDER←##.FilesAndDirs.GetTempSubDir'Tatin-Test-Server'
:EndIf
testFilename←##.Admin.GetCoverageFilename
T.codeCoverage←⎕NEW ##.CodeCoverage(,⊂'#.Tatin.Registry,#.Tatin.Server')
T.codeCoverage.filename←testFilename
⍝Done
Prepare;ignore;testFilename;ask;answer
⍝ Use this to run the test server as a test case.
'This WS appears to be prepared for functioning as a Tatin Client'⎕SIGNAL 11/⍨0<##.Client.⎕NC'MyUserSettings'
:If 0=##.⎕NC'Plodder'
:EndIf
T←⎕NEW ##.Tester2 ⎕THIS
⍝ CodeCoverage: we always add, assuming that this test is running in parallel to the Client test
testFilename←##.Admin.GetCoverageFilename
T.codeCoverage←⎕NEW ##.CodeCoverage(,⊂'#.Tatin.Registry,#.Tatin.Server')
T.codeCoverage.filename←testFilename
ignore←''
ignore,←⊂'#.Tatin.Server.CopyDependencies'
ignore,←⊂'#.Tatin.Server.GetPackageConfigFilename'
ignore,←⊂'#.Tatin.Registry.Create_UUID'
ignore,←⊂'#.Tatin.Server.PROJECT_HOME'
ignore,←⊂'#.Tatin.Server.GetQuitDQEvent'
ignore,←⊂'#.Tatin.Server.Run'
:If 0<≢ignore
T.codeCoverage.ignore←⊃{⍺,',',⍵}/ignore
:EndIf
⍝Done
PrepareForBatchTests dummy;ignore;testFilename;ask;answer
⍝ Use this to run the test server as a test case for batch tests only
T←⎕NEW ##.Tester2 ⎕THIS
⍝Done
{success}←{debugFlag}RunBatchTests flag;log;rc
success←0
:If flag
debugFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'debugFlag'
PrepareForBatchTests ⍬
(rc log)←T.RunBatchTests debugFlag
success←0=rc
:EndIf
⍝Done
RunTests
Prepare
T.Run 1
r←Test_001(stopFlag batchFlag);⎕TRAP
⍝ Pro-forma test: the Server is implicitly tested by the main test suite in #.Tatin.TestCases
⍝ However, this is used to run the test server that responds to the client tests so that the coverage data
⍝ can be collected and later be merged with the Client's one.
⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
r←T._Failed
{}##.Admin.RunTestServer 1
r←T._OK
⍝Done
{rc}←∆DeleteTempDir flag;folder
⍝ Clean up the temp dir in case of left-overs from an earlier run
rc←0
:If flag
folder←∆GetTempDir
:EndIf
folder←∆GetTempDir;ini
⍝ Returns the name of the directory where crash info and the log files are kept
ini←⎕NEW ##.IniFiles(,⊂'./TestServer/Server/server.ini')
folder←⊃ini.Get'TRAP:Folder'
folder←'<TEMP>'⎕R(739⌶0)⊣folder
folder←¯1↓1⊃⎕NPARTS(¯1×(¯1↑folder)∊'/\')↓folder
⍝Done
:Class Tester2
⍝ This class provides a test framework for APL applications.
⍝ ## Warning
⍝ This is **not** an introduction into how the test framework works, and how you should organize your test cases.
⍝ This is, after all, a technical documentation.\\
⍝ More information for the _user_ of `Tester2` is available on
⍝ [`Tester2`'s home page on GitHub ](https://github.com/aplteam/Tester2).\\
⍝ Note that in case after running `RunGUI` the GUI stays around your have two choices of getting rid of the GUI
⍝ programmatically: either call the `CloseGUI` method from your instance or erase the instance altogether.
⍝ ## INI files
⍝ `Tester2` tries to find two INI files: "Testcases.INI" and "Testcases_{computername}.INI". If it finds one or
⍝ both of them it will merge and flatten them and assign them to the `INI` property of `Tester2` instance.
⍝ ## Dependencies
⍝ `Tester2` requires the classes `APLTreeUtils2` and `CodeCoverage`, but the latter only in case you want code
⍝ coverage to be checked; for that you need to set the `codeCoverage` property.
⍝ ## Misc
⍝ Home page: <https://github.com/aplteam/Tester2>\\
⍝ Author: Kai Jaeger
⎕IO←1 ⋄ ⎕ML←1
∇ r←Version
:Access Public shared
r←'Tester2' '3.9.1' '2024-10-03'
∇
∇ r←History
:Access Public shared
⍝ * 3.9.1 ⋄ 2024-10-03
⍝   * Comment added according to issue #25
⍝   * Bug fix: the new '?'-syntax did not work when 3 (for "Cleanup") was selected
⍝ * 3.9.0 ⋄ 2024-10-01
⍝   * The term `stopFlag` was used in two different ways: on the level of the test framework and inside
⍝     test functions. This required a change: inside test functions, what was initially called
⍝     `stopFlag` is now called `debugFlag`.\\
⍝     Note that the old name is still supported in order to support old test cases, so this is not a
⍝     breaking change.
⍝   * `stopFlag` is not necessarily a Boolean anymore, making the name a misnomer.
⍝     Therefore, it was renamed to `stop`.
⍝   * All `Run*`-functions that accept `stop` as a left argument now allow it to be "?".
⍝     This led to a list with all options the user may select from.
⍝ * 3.8.0 ⋄ 2024-08-03
⍝   * `RunThese` accepts now a list of names identifying test functions (like `Foo_001` or `Test_Foo_001)
⍝ * 3.7.0 ⋄ 2024-03-02
⍝   * The restriction that "," and "*" cannot go together has been lifted.
⍝   * The restriction that `~` could only be used at the beginning has been lifted
⍝   * Bug fixes
⍝     *
⍝ * 3.6.0 ⋄ 2024-01-11
⍝   * Any a general `Initial` function as well as any group-specific one can now return a text vector
⍝     rather than a Boolean. Empty=success, otherwise it is treated as an error msg and reported.
⍝   * So far, in case a test suite was executed in batch mode, there was no information provided which
⍝     line did cause a test case to fail.
⍝   * Shared method `Help` added that provides a full documentation of Tester2.
⍝ * 3.5.0 ⋄ 2023-04-28
⍝   * Helpers updated
⍝\\
⍝ For a full history (including older versions) see <https://github.com/aplteam/Tester2/releases>
r←↑{⍵↓⍨+/∧\∧⌿(↑⍵)=' '}{⍵↓⍨⍵⍳'⍝'}¨{⍵/⍨'⍝'=⊃¨⍵}{⍵↓⍨+/∧\(↑⍵)=' '}¨1↓⎕NR⊃⎕SI
∇
:Field Public Instance Readonly _OK←0
:Field Public Instance Readonly _Failed←1
:Field Public Instance Readonly _NoBatchTest←¯10
:Field Public Instance Readonly _Inactive←¯11
:Field Public Instance Readonly _WindowsOnly←¯12
:Field Public Instance Readonly _LinuxOnly←¯13
:Field Public Instance Readonly _MacOnly←¯14
:Field Public Instance Readonly _LinuxOrMacOnly←¯15
:Field Public Instance Readonly _LinuxOrWindowsOnly←¯16
:Field Public Instance Readonly _MacOrWindowsOnly←¯17
:Field Public Instance Readonly _NoAcreTest←¯18
:Field Public Instance Readonly _NoCiderTest←¯19
:Field Public Instance Readonly _NotApplicable←¯20
:Field Public Instance Readonly _NotImplemented←¯21
:Field Public Instance Readonly _IncompatibleVersion←¯22
:Field Public Instance Readonly _SkippedByUser←¯23
:Field Public Instance ReadOnly QuitEvent←993
:Field Public Instance ReadOnly PassEvent←994
:Field Public Instance TestFlag←0   ⍝ Used **only** for testing `Tester2`!
⍝ Setting this to 1 prevents `⎕DQ` from being run on `Tester2`'s own GUI, if any.
:Property custom_1
:Access Public Instance
∇ r←get
r←_custom_1
∇
∇ set arg;msg
msg←arg.NewValue
⎕SIGNAL/1 CheckCustomDef msg
_custom_1←msg
∇
:EndProperty
:Property custom_2
:Access Public Instance
∇ r←get
r←_custom_2
∇
∇ set arg;msg
msg←arg.NewValue
⎕SIGNAL/2 CheckCustomDef msg
_custom_2←msg
∇
:EndProperty
:Property custom_3
:Access Public Instance
∇ r←get
r←_custom_3
∇
∇ set arg;msg;value
msg←arg.NewValue
⎕SIGNAL/3 CheckCustomDef msg
_custom_3←msg
∇
:EndProperty
:Property custom_4
:Access Public Instance
∇ r←get
r←_custom_4
∇
∇ set arg;msg;value
msg←arg.NewValue
⎕SIGNAL/4 CheckCustomDef msg
_custom_4←msg
∇
:EndProperty
:Property custom_5
:Access Public Instance
∇ r←get
r←_custom_5
∇
∇ set arg;msg;value
msg←arg.NewValue
⎕SIGNAL/5 CheckCustomDef msg
_custom_5←msg
∇
:EndProperty
:Property custom_6
:Access Public Instance
∇ r←get
r←_custom_6
∇
∇ set arg;msg;value
msg←arg.NewValue
⎕SIGNAL/6 CheckCustomDef msg
_custom_6←msg
∇
:EndProperty
:Property custom_7
:Access Public Instance
∇ r←get
r←_custom_7
∇
∇ set arg;msg;value
msg←arg.NewValue
⎕SIGNAL/7 CheckCustomDef msg
_custom_7←msg
∇
:EndProperty
:Property custom_8
:Access Public Instance
∇ r←get
r←_custom_8
∇
∇ set arg;msg;value
msg←arg.NewValue
⎕SIGNAL/8 CheckCustomDef msg
_custom_8←msg
∇
:EndProperty
:Property custom_9
:Access Public Instance
∇ r←get
r←_custom_9
∇
∇ set arg;msg;value
msg←arg.NewValue
⎕SIGNAL/9 CheckCustomDef msg
_custom_9←msg
∇
:EndProperty
:Property codeCoverage
:Access Public Instance
⍝ If specified this must be an instance of the `CodeCoverage` class with all relevant properties set.
⍝ This is then used to collect code coverage data. The `CodeCoverage` class also offers methods to
⍝ aggregate the collected data and to generate an HTML report from it; see there for details.
∇ r←get
r←_codeCoverage
∇
∇ set value;buff;bool
'Is not an instance of the "CodeCoverage" class'Assert∨/'[CodeCoverage]'⍷⍕value.NewValue
:If 0<≢value.NewValue
_codeCoverage←value.NewValue
:Else
_codeCoverage←''
:EndIf
∇
:EndProperty
:Property IniFolder
:Access Public Instance
∇ r←get
r←_IniFolder
∇
∇ set arg
:If 0<≢arg.NewValue
'Must be a simple character vector'Assert 1=≡arg.NewValue
'Must be a simple character vector'Assert 0≠1↑0⍴∊arg.NewValue
'Must be a simple character vector'Assert 1=⍴⍴arg.NewValue
'Does not exist'Assert 0≠⎕NEXISTS arg.NewValue
'Is not a folder'Assert 1=1 ⎕NINFO arg.NewValue
:EndIf
_IniFolder←arg.NewValue
∇
:EndProperty
:Property exec_before_each_test
:Access Public Instance
∇ r←get
r←_exec_before_each_test
∇
∇ set arg
'Must be fully qualified name of a function'Assert' '=1↑0⍴∊arg.NewValue
'Must be fully qualified name of a function'Assert 3=⎕NC arg.NewValue
_exec_before_each_test←arg.NewValue
∇
:endproperty
:Property exec_after_each_test
:Access Public Instance
∇ r←get
r←_exec_after_each_test
∇
∇ set arg
'Must be fully qualified name of a function'Assert' '=1↑0⍴∊arg.NewValue
'Must be fully qualified name of a function'Assert 3=⎕NC arg.NewValue
_exec_after_each_test←arg.NewValue
∇
:endproperty
∇ make1 ref;parent
⍝ Requires a reference as the right argument which points to the namespace that hosts the test cases .\\
⍝ All instance methods will use that reference in order to find the test cases.
:Access Public Instance
:Implements Constructor
A←(⊃⊃⎕CLASS ⎕THIS).##.APLTreeUtils2
_ref←ref
_ref2GUI←⍬
_parms←CreateParms ⍬
_INI←⍬
_custom_1←_custom_2←_custom_3←_custom_4←_custom_5←_custom_6←_custom_7←_custom_8←_custom_9←⍬''
_exec_before_each_test←_exec_after_each_test←''
_codeCoverage←''
:If 0<≢parent←'AcreConfig'{⍵∊# ⎕SE:'' ⋄ 0<⍵.⎕NC ⍺:⍵ ⋄ ⍺ ∇ ⍵.##}_ref
_IniFolder←parent.AcreConfig.ProjectFolder
:ElseIf 9=_ref.⎕NC'CiderConfig'
_IniFolder←_ref.CiderConfig.HOME
:ElseIf 9=_ref.##.⎕NC'CiderConfig'
_IniFolder←_ref.##.CiderConfig.HOME
:Else
_IniFolder←''
:EndIf
∇
∇ Cleanup
⍝ Closes the GUI
:Implements Destructor
CloseGUI
∇
:Property INI
⍝ This is either `⍬` in case there was no INI file found when one of the `Run*` functions was executed or an instance
⍝ of the `IniFile` class. In the latter case it is a flat namespace with all the stuff defined in the (potentially)
⍝ two INI files into variables.
:Access Public Instance
∇ r←get
r←_INI
∇
:EndProperty
∇ {(rc log)}←{stop}Run debugFlag
⍝ Runs _all_ test cases, by default with error trapping.\\
⍝ The Boolean right argument decides whether with (0) or without (1) error trapping.\\
⍝ In addition you may specify an optional left argument which will make `Run` stop in certain circumstances:
⍝ * 1 = stop just before any test case is about to be executed
⍝ * 2 = stop in all `Initial*` functions
⍝ * 4 = stop in all `Cleanup*` functions
⍝ * ? = gives you a list to select from\\
⍝ You may also specify a sum of them, like 3, 5, 6 or 7
⍝ DO NOT localyze `_parms` in this function!
:Access Public Instance
stop←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'stop'
→(⍬≡stop←ProcessStop stop)/0
'Invalid left argument 'Assert(⊂stop)∊0 1 2 4 3 5 6 7
'Invalid left argument 'Assert 1=≡,stop
'Invalid left argument 'Assert 1=≢stop
'Invalid left argument 'Assert 83=⎕DR stop
'Invalid right argument 'Assert(⊂debugFlag)∊0 1
_parms←CreateParms ⍬
_parms.debugFlag←debugFlag
_parms.stop←stop
_parms.trapFlag←~debugFlag
(rc log)←Run__ _parms
⍝Done
∇
∇ {(rc log)}←{parms}RunGUI these
⍝ Runs `these` test cases, which defaults to _all_ in case `these` is empty.\\
⍝ The user can set all sorts of parameters via the GUI.\\
⍝ Note that this is a Windows-only feature.\\
⍝ The left argument is useful only for defining defaults on the GUI.\\
⍝ See also `Run` which does vasically the same but without a GUI.\\
⍝ DO NOT localyze `_parms` in this function!
:Access Public Instance
:If 'Win'≡A.GetOperatingSystem''
_parms←{0<⎕NC ⍵:⍎⍵ ⋄ CreateParms ⍬}'parms'
CloseGUI
_parms.testCaseNos←these
_parms.guiFlag←1
_parms.testCaseNos←these
(rc log)←Run__ _parms
:Else
'RunGUI is Windows-only'⎕SIGNAL 11
:EndIf
∇
∇ {(rc log)}←{stop}RunThese these;rc;ref2Gui
⍝ Run just the specified tests.
⍝ `these` can be one of:
⍝ * A scalar or vector of numbers identifying ungrouped test cases.
⍝ * A text string that uniquily identifies a group.
⍝ * A text string that ends with an asterisk (`*`) identifying one or more test groups.
⍝ * A nested vector with names of test functions (like `Test_Foo_002` or just `Foo_002`).\\
⍝   This is particularly useful if you want to execute, say, just the test cases that have recently been changed.
⍝ * A two-item vector with:
⍝   * A text string identifying one or more groups (with the wildcard syntax, **not** by specifying more than one).
⍝   * An integer vector identifying test cases within that group.\\
⍝ Note that you cannot mix different syntaxes.\\
⍝ You may specify an optional left argument which will make `RunThese` stop in certain circumstances:
⍝ * 1 = stop just before any test case is about to be executed
⍝ * 2 = stop in all `Initial*` functions
⍝ * 4 = stop in all `Cleanup*` functions
⍝ * ? = gives you a list to select from\\
⍝ You may also specify a sum of them, like 3, 5, 6 or 7.\\
⍝ The result:
⍝ 1. A return code. 0 means all test cases passed successfully.
⍝ 2. A vector of text vectors with the log. The log contains detailed information about what was carried out.
⍝ DO NOT localyze `_parms` in this function!
:Access Public Instance
stop←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'stop'
→(⍬≡stop←ProcessStop stop)/0
'Invalid left argument 'Assert(⊂stop)∊0 1 2 4 3 5 6 7
_parms←CreateParms ⍬
_parms.testCaseNos←these
_parms.debugFlag←1
_parms.trapFlag←0
_parms.stop←stop
(rc log)←Run__ _parms
∇
∇ {(rc log)}←{stop}RunBatchTests debugFlag
⍝ Runs all test cases but tells the test functions that this is a batch run, meaning that test cases in need
⍝ for any human being for interaction should abort themselves and return `_NoBatchTest` instead.\\
⍝ By default any errors are trapped.
⍝ In addition you can specify an optional left argument which will make `RunBatchTests` stop in certain circumstances:
⍝ * 1 = stop just before any test case is about to be executed
⍝ * 2 = stop in all `Initial*` functions
⍝ * 4 = stop in all `Cleanup*` functions
⍝ * ? = gives you a list to select from\\
⍝ You may also specify a sum of them, like 3, 5, 6 or 7.\\
⍝ This function does not trap errors in case `debugFlag` is 1.\\
⍝ Returns 0 for okay or a 1 as `rc` in case one or more test cases are broken or failed.\\
⍝ DO NOT localyze `_parms` in this function!
:Access Public Instance
stop←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'stop'
→(⍬≡stop←ProcessStop stop)/0
'Invalid left argument 'Assert(⊂stop)∊0 1 2 4 3 5 6 7
'Invalid right argument 'Assert(⊂debugFlag)∊0 1
_parms←CreateParms ⍬
_parms.debugFlag←debugFlag
_parms.stop←stop
_parms.batchFlag←1
_parms.trapFlag←~debugFlag
_parms.testCaseNos←⍬
(rc log)←Run__ _parms
∇
∇ r←Help
:Access Public Shared
r←']open ',##.TatinVars.GetFullPath2AssetsFolder,'Tester2-Reference.html'
∇
⍝⍝⍝ Private stuff
∇ r←CreateParms dummy
⍝ Creates a parameter space to be consumed by `Run__` and therefore by any of the `Run*` functions
⍝ that do call `Run__`. The namespace is populated with defaults.\\
⍝ 1. `trapFlag`: controls error trapping:
⍝    * 1 = failing test cases are reported, then the next one is executed.
⍝    * 0 = program halts in case of an error - use this for investigation.
⍝ 2. `debugFlag`: if it is 1 failing tests stop for investigation (stop on error).
⍝ 3. `batchFlag`: a 1 would mean that the test should quit itself if for example it
⍝     needs a human being in front of the monitor. Such test cases are supposed to
⍝     do nothing but return `_NoBatchTest` when this flag is on.
⍝ 4. `stop`: is treated as "stop just before the next test case is going to be executed" when 1.\\
⍝     Since version 2.4 this accepts also an integer that can be the sum of:
⍝     * 1=stop just before any test case is executed
⍝     * 2=stop in all `Initial*` functions
⍝     * 4=stop in all `Cleanup*` functions
⍝ 5. `testCaseNos`: the test cases to be executed (IDs or group or a mixture of both)
⍝ 6. `guiFlag`: is 0 when no GUI is required an 1 otherwise.
:Access Public Instance
r←⎕NS''
r.trapFlag←1
r.debugFlag←0
r.batchFlag←0
r.stop←0
r.guiFlag←0
r.testCaseNos←⍬
r.⎕FX'r←List' 'r←↑{⍵(⍎⍵)}¨'' ''~¨⍨↓⎕NL 2'
∇
∇ stop←ProcessStop stop;list;ind;vals
:If '?'≡stop
list←'Tests' 'Initial' 'Cleanup' 'Tests & Initial' 'Tests & Cleanup' 'Initial & Cleanup' 'Test, Initial & Cleanup' 'Nowhere' 'Cancel'
vals←1 2 4 3 5 6 7 8 9
ind←'WhereToStop@Stop just before...' 1 1 ##.CommTools.Select list
:If 0=≢ind
stop←0
:ElseIf ind≡9
stop←⍬
:ElseIf ind≡8
stop←0
:Else
stop←vals[ind]
:EndIf
:EndIf
∇
∇ {(rc log)}←Run__ ps;⎕TRAP;rc2;filename;tno;buff;res;initialFlag
⍝ Run all test cases to be found in `_ref`.\\
⍝ The right argument is a parameter space, typically created by calling `CreateParms ⍬`.\\
⍝ The shy explicit result is a two-element vector:
⍝ 1. `r ←→  0 <log>`  when all tests got executed succesfully.\\
⍝    `r ←→  1 <log>`  when at least one test failed
⍝    `r ←→  2 <log>   when `Initial` prevented any test case to be executed.\\
⍝ 2. Nested vector with the log information
:Access Public Instance
⎕TRAP←(QuitEvent'C' '→∆GetOutOfHere')(PassEvent'C'('⎕SIGNAL ',⍕PassEvent))((0 1000)'N')
_INI←⍬                   ⍝ Flatten any leftovers
ps.(log errCounter failedCounter totalCounter)←'' 0 0 0
ps.guiFlag∧←'Win'≡A.GetOperatingSystem ⍬  ⍝ Windows only, if at all
:If ps.guiFlag
_parms.ref2Gui←ps.ref2Gui←ps CreateGui ⍬
:EndIf
ShowLog{'--- Test framework "Tester2" version ',(2⊃⍵),' from ',(3⊃⍵),' ----'}Version
_ref←ProcessIniFiles _ref ps
ps.returnCodes←⍬
initialFlag←0 ⍝ Tells whether `Initial was executed or not
:If 0=≢ps.list←{⍵[;1]}ListTestFunctions''
→∆GetOutOfHere,rc←0
:EndIf
ProcessGroupAndTestCaseNumbers(_ref ps)
:If 0=≢ps.list
→∆GetOutOfHere,rc←0
:EndIf
→(0=≢ps.list)/∆GetOutOfHere
:If ps.guiFlag
:If 0<≢ps.list
ps.ref2Gui.∆n.Grid.Values[⍳≢ps.list;2]←(≢'Test_')↓¨ps.list
ps.ref2Gui.∆n.Grid.Values[⍳≢ps.list;3]←2↓¨_ref GetFirstCommentLine¨ps.list
{2 ⎕NQ ps.ref2Gui.∆n.Grid'SetColSize'⍵ ¯3}¨2 3
:EndIf
{}{_←⎕DQ ⍵ ⋄ ⎕DL 0.1}⍣(0=TestFlag)⊣ps.ref2Gui.∆n.Form
:If ps.ref2Gui.∆n.∆Closed
(rc log)←0 ''
:Return
:EndIf
ps←CopyGUI2Parms ps
:EndIf
:If initialFlag←0<≢ps.list
:If 0=ExecuteInitial _ref ps
:If ~CR∊⊃¯1↑ps.log
ShowLog'*** "Initial" could not initialize'
:EndIf
ps.errCounter←1
rc←2
ps.list←''
→∆GetOutOfHere
:Else
rc←0
:EndIf
:EndIf
ps.returnCodes←⍬
ps.processedGroups←''
ShowLog(,'--- Tests started at ',A.FormatDateTime ⎕TS),' on ',(⍕_ref),' ---'
buff←⌽(8⍴2)⊤ps.stop
:If 0<≢ps.testCaseNos
buff[1]∨←¯1∊×ps.testCaseNos
:EndIf
ps.stop←2⊥⌽buff
ProcessTestCases _ref ps
∆GetOutOfHere:
:If 0<⎕NC'∆TRAPS_IN_SESSION'
{}600⌶∆TRAPS_IN_SESSION ⍝ Restore former setting
⎕EX'∆TRAPS_IN_SESSION'
:EndIf
:If ps.guiFlag
:AndIf {6::1 ⋄ 0⊣⍵.Type}ps.ref2Gui.∆n.Form
⎕←'*** Tests cancelled'
log←ps.log
→0
:EndIf
_INI←⍬                    ⍝ Flatten any leftovers
:If 0<ps.⎕NC'list'        ⍝ Then no test cases got executed, probably because `Initial` failed.
:AndIf 0<≢ps.list
(rc2 log)←ReportTestResults ps
:If rc2≠2
rc←rc2
:EndIf
_ref.TestCasesExecutedAt←A.FormatDateTime ⎕TS
ShowLog'Time of execution recorded on variable ',(⍕_ref),'.TestCasesExecutedAt as: ',_ref.TestCasesExecutedAt
:EndIf
:If initialFlag
{}ExecuteCleanup _ref ps
:EndIf
:If 0<≢_codeCoverage
:If 0=≢res←_codeCoverage.Finalise 1
⎕←'Coverage report: nothing to report'
:Else
ShowLog'Coverage report: ',res
:EndIf
:EndIf
ShowLog'*** Tests done'
log←ps.log
:If ps.guiFlag
_ref2GUI←ps.ref2Gui
:If ps.ref2Gui.∆n.∆Closed   ⍝ The user has clicked the "Close" box but the GUI is still around
CloseGUI
:Else
ps.ref2Gui.∆n.(TrapErrors Debug Stop StartBtn PauseBtn).Active←0
:EndIf
:EndIf
∇
∇ {r}←CloseGUI
⍝ In case the global parameters carry a valid ref pointing to the GUI that GUI is closed.
⍝ Errors are trapped.\\
⍝ Always returns ⍬.
:Access Public Instance
r←⍬
:If 0<⎕NC'_ref2GUI'
:AndIf ⍬≢_ref2GUI
:Trap 6 11
2 ⎕NQ _parms.ref2Gui'Close'
_ref2GUI←⍬
:EndTrap
:EndIf
∇
∇ ref2Gui←Getref2Gui
⍝ Returns either a ref to `Tester2`'s GUI (if there is any) or ⍬.
:Access Public Instance
ref2Gui←⍬
:If 0<_parms.⎕NC'ref2Gui'
:AndIf ~(⊂_parms.ref2Gui)∊''⍬
ref2Gui←_parms.ref2Gui
:EndIf
∇
∇ ref←ProcessIniFiles(ref ps);iniFilenames;iniFilename;report;parent;cn
iniFilenames←''
iniFilename←_IniFolder,((0<≢_IniFolder)/'/'),'Testcases.ini'
report←,⊂'Searching for INI file ',iniFilename
:If ⎕NEXISTS iniFilename
iniFilenames,←⊂iniFilename
report[≢report]←⊂((≢report)⊃report),': found'
:Else
report[≢report]←⊂((≢report)⊃report),': not found'
:EndIf
:If 'Win'≡A.GetOperatingSystem ⍬
cn←2 ⎕NQ'#' 'GetEnvironment' 'Computername'
:Else
cn←⊃⎕SH'uname -n'
:EndIf
iniFilename←_IniFolder,((0<≢_IniFolder)/'/'),'Testcases-',cn,'.ini'
report,←⊂'Searching for INI file ',iniFilename
:If ⎕NEXISTS iniFilename
iniFilenames,←⊂iniFilename
report[≢report]←⊂((≢report)⊃report),': found'
:Else
report[≢report]←⊂((≢report)⊃report),': not found'
:EndIf
ShowLog¨report
:If 0≠≢iniFilenames
:Trap 6
_INI←'flat'(⎕NEW((⊃⊃⎕CLASS ⎕THIS).##.IniFiles)(iniFilenames 1)).Convert ⎕NS''
ShowLog'  INI file(s) "',(⊃{⍺,',',⍵}/iniFilenames),'" found and instantiated as INI'
ShowLog(⍕≢iniFilenames),' INI file',((1<≢iniFilenames)/'s'),' instantiated'
:Else
'The class "IniFiles" is needed but missing'⎕SIGNAL 6
:EndTrap
:EndIf
∇
GetTestNo←{
⍝ Take a string like "Test_001" or "Test_MyGroup_002" and return just the number
{A.ToNum⌽⍵↑⍨¯1+⍨⍵⍳'_'}⌽⍵
}
∇ {success}←ExecuteInitial(ref ps);report;buff;initMsg
success←1
report←'Looking for a function "Initial": '
initMsg←''
:If 3=ref.⎕NC'Initial'
:If 2⊃⌽(8⍴2)⊤ps.stop
(∪(⎕STOP 1⊃⎕SI),∆stop_before_initial_1,∆stop_before_initial_2,∆stop_before_initial_3,∆stop_before_initial_4)⎕STOP 1⊃⎕SI
:Else
((⎕STOP 1⊃⎕SI)~,∆stop_before_initial_1,∆stop_before_initial_2,∆stop_before_initial_3,∆stop_before_initial_4)⎕STOP 1⊃⎕SI
:EndIf
:Select ⊃(⎕IO+1)⊃1 ref.⎕AT'Initial'
:Case 0
:If 0=⊃⊃ref.⎕AT'Initial'
∆stop_before_initial_1:  ⍝ To switch off the stopping mechanism permanently, enter:   ps.stop←0
ref.Initial
:Else
∆stop_before_initial_2:  ⍝ To switch off the stopping mechanism permanently, enter:   ps.stop←0
buff←ref.Initial
:If ' '=1↑0⍴buff
success←0=≢buff
:If 0<≢buff
initMsg←buff
:EndIf
:Else
success←buff
:EndIf
:EndIf
:Case 1
:If 0=⊃⊃ref.⎕AT'Initial'
∆stop_before_initial_3:  ⍝ To switch off the stopping mechanism permanently, enter:   ps.stop←0
ref.Initial ps
:Else
∆stop_before_initial_4:  ⍝ To switch off the stopping mechanism permanently, enter:   ps.stop←0
buff←ref.Initial ps
:If ' '=1↑0⍴buff
success←0=≢buff
:If 0<≢buff
initMsg←buff
:EndIf
:Else
success←buff
:EndIf
:EndIf
:Else
11 ⎕SIGNAL⍨'The "Initial" function in ',(⍕ref),' has an invalid signature: it''s neither monadic nor niladic'
:EndSelect
:If success
report,←'found and executed successfully'
:Else
report,←'found and executed but it signalled failure'
:If 0<≢initMsg
report,←':',CR,initMsg
:EndIf
:EndIf
:Else
report,←'not found'
:EndIf
ShowLog report
∇
∇ ProcessGroupAndTestCaseNumbers(ref ps);rc;buff
ps.group←''
:If 0≠≢ps.testCaseNos
:If ' '=1↑0⍴∊ps.testCaseNos
:If 0 1∊⍨≡ps.testCaseNos
ps.group←ps.testCaseNos
ps.testCaseNos←⍬
:Else
:If ∧/{' '=⊃1↑0⍴⍵}¨ps.testCaseNos
:AndIf ∧/{(⊃1⊃⎕VFI ⍵↑⍨-¯1+'_'⍳⍨⌽⍵)∧0<+/'_'=⍵}¨ps.testCaseNos
ps.list←ps.testCaseNos
ps.testCaseNos←⍬
ps.list←{'Test_'≡(≢'Test_')↑⍵:⍵ ⋄ 'Test_',⍵}¨ps.list
:Return
:Else
ps.group←1⊃ps.testCaseNos
'Group definition must not carry "," or "~" in case test case number were specified'Assert~∨/',~'∊ps.group
ps.testCaseNos←∊1↓ps.testCaseNos
'Test case number(s) must be numeric'Assert~∨/~{⊃0=1↑0⍴⍵}¨ps.testCaseNos
:EndIf
:EndIf
:EndIf
:If 0≠≢ps.group
:If ','∊ps.group
ps.group←','(≠⊆⊢)ps.group
:Else
ps.group←,⊆ps.group
:EndIf
ref ProcessGroup ps
:EndIf
:EndIf
:If 0=≢ps.list
rc←0
:Return
:EndIf
:If (,0)≡,ps.testCaseNos
ps.testCaseNos←¯1
:Else
:If 0≠≢ps.testCaseNos
:If 0=≢ps.group
:If 0=≢ps.list←(1={'_'+.=⍵}¨ps.list)/ps.list
rc←0
:Return
:EndIf
:EndIf
ps.list←((⊃¨GetTestNo¨ps.list)∊|ps.testCaseNos)/ps.list   ⍝ Now select the numbers
:If 0=≢ps.list
rc←0
:Return
:EndIf
:EndIf
:EndIf
ps.groups←∪GetGroupName¨{⍵/⍨'_'∊¨⍵}ps.list
ps.group←ps.group[⍋ps.group]
ps.list←ps.list[⍋ps.list]
⍝Done
∇
∇ {r}←ref ProcessGroup ps;list;groups;grp;collect;without
⍝ `def` is a group definition or a specific test case.
⍝ This function
r←⍬
ps.group←ps.group[⍋'~'=⊃¨ps.group]    ⍝ Make sure "without" is handled at the very end
list←Remove∆Test_¨ps.list             ⍝ All
groups←Remove∆Test_¨ps.group
collect←''
:If 1=≢groups
:AndIf '~'=⊃⊃groups
collect←(≢'Test_')↓¨' '~⍨¨↓'Test_'{⍵⌿⍨((≢⍺)↑[2]⍵)∧.=⍺}'T'ref.⎕NL 3  ⍝ All
:Else
:For grp :In groups                   ⍝ Loops over group definitions and collect hits
:If '~'=1⍴grp
:Leave
:EndIf
:If '*'∊grp
collect,←(list{(↑⍺)[;⍳≢⍵]∧.=⍵}grp~'*')/list
:ElseIf ∧/grp∊⎕D                  ⍝ Specific test case rather than group?
collect,←((↑list)[;⍳≢grp]∧.=grp)/list
:ElseIf '_'∊grp
:AndIf ∧/({⍵↓⍨⍵⍳'_'}grp)∊⎕D
collect,←(list≡¨⊂grp)/list
:Else
collect,←(({~'_'∊⍵:'' ⋄ ⍵↑⍨¯1+⍵⍳'_'}¨list)≡¨⊂grp)/list
:EndIf
:EndFor
:EndIf
without←{⍵/⍨'~'=⊃¨⍵}groups
:If 0<≢collect
:For grp :In without                  ⍝ Loops over "without" definitions and removes stuff
:If '*'∊grp
collect←(~collect{(↑⍺)[;⍳≢⍵]∧.=⍵}grp~'~*')/collect
:EndIf
collect←((~collect{((≢⍵)↑[2](↑⍺))∧.=⍵}1↓grp))/collect
:EndFor
:EndIf
ps.list←'Test_'∘,¨∪collect
∇
∇ ProcessTestCases(ref ps);cw;max;noOf;length2;length;i;testFns;currentGroup;testNo;continueFlag;rc;comment;desc;marker
cw←≢max←⍕noOf←≢ps.list
length←2+⌈/≢¨ps.list
length2←length+≢'(',max,'/',max,')  '
:If ps.guiFlag
:If 0<≢ps.list
ps.ref2Gui.∆n.Grid.Values←(noOf,1↓⍴ps.ref2Gui.∆n.Grid.Values)⍴ps.ref2Gui.∆n.Grid.Values
ps.ref2Gui.∆n.Grid.CellTypes←(noOf,1↓⍴ps.ref2Gui.∆n.Grid.Values)⍴ps.ref2Gui.∆n.Grid.CellTypes
2 ⎕NQ ps.ref2Gui.∆n.Form'Flush'
:EndIf
:If ps.ref2Gui.∆n.∆Closed
⎕SIGNAL QuitEvent
:EndIf
ps.ref2Gui.∆n.Form.on9998←0
ps.ref2Gui.∆n.StartBtn.Active←0
ps.stop←⊃{⍵≡(≢⍵)↑1:0 ⋄ ⍵/0 1 2 4 3 5 7 6}ps.ref2Gui.∆n.Stop.SelItems
ps.trapFlag←ps.ref2Gui.∆n.TrapErrors.State
{2 ⎕NQ ps.ref2Gui.∆n.Grid'SetColSize'⍵ ¯3}¨¯1↓3↓⍳2⊃⍴ps.ref2Gui.∆n.Grid.Values
:EndIf
i←0
:Repeat
i+←1
testFns←i⊃ps.list
currentGroup←GetGroupName Remove∆Test_ testFns
currentGroup←(~∧/currentGroup∊⎕D)/currentGroup  ⍝ If it's just digits its a number rather than a group name
testNo←GetTestNo testFns
:Trap QuitEvent,ps.trapFlag/0
:If ps.guiFlag
:AndIf ps.ref2Gui.∆n.PauseBtn.State
ps.ref2Gui.∆n.Info.Text←'PAUSING'
{0=⍵.ref2Gui.∆n.PauseBtn.State:shy←1 ⋄ _←⎕DL 0.3 ⋄ ∇ ⍵}ps
:EndIf
¯1 ShowLog(length2↑(length↑testFns),' (',(cw 0⍕i),'/',max,')')
i AddToGui(length2↑(length↑'  ',testFns),' (',(cw 0⍕i),'/',max,')')
(continueFlag i noOf)←HandleInitialize(ref ps currentGroup i noOf)
:If continueFlag
HandleCleanup ref ps currentGroup i
:Continue
:EndIf
rc←ExecuteTestFunction ref ps testNo testFns
:If ' '=1↑0⍴rc   ⍝ Custom message?
:If (⊂rc)∊ListCustomMessages[;2]                      ⍝ Is it a valid custom message?
rc←-⍎¯1↑ListSymbolicNames{⊃⍺[1⍳⍨⍺[;2]≡¨⊂⍵;]}rc    ⍝ Translate custom msg into return code
:Else
⎕←'Current test function (',testFns,')'
⎕←'returned an invalid result: neither a valid numeric code (symbolic name) nor a custom message'
∘∘∘
:EndIf
:EndIf
ps.totalCounter+←1
ps.failedCounter+←rc=1
:If 0>rc
ps.returnCodes,←rc
:EndIf
ps AddReturnCodeToGrid rc i
comment←2↓ref GetFirstCommentLine testFns
desc←(⎕PW-length2){⍺<≢⍵:'...',⍨⍵↑⍨⍺-4 ⋄ ⍵}⍣(~ps.guiFlag)⊢comment
:If rc∊0 1
marker←('*✓'[1+rc=0])
:Else
marker←'⍝'
:EndIf
3 ShowLog marker,' ',desc,ReportLineNumber
i AddToGui(length2↑(length↑marker,' ',testFns),' (',(cw 0⍕i),'/',max,')'),' ⍝ ',desc,ReportLineNumber
⎕EX'∆FAILING_LINE'
:If ~rc∊_OK,_Failed
:AndIf ps.guiFlag
:AndIf ps.ref2Gui.∆n.∆Closed=0
(GetSymbolicName rc)ReportInactiveToGUI i ref testFns ps.ref2Gui.∆n
:EndIf
:If 0>rc
:If 0<ps.errCounter
rc←1
:EndIf
:EndIf
:Case QuitEvent
HandleCleanup ref ps currentGroup i
⎕SIGNAL QuitEvent
:Else
ps.errCounter+←1
ps.totalCounter+←1
comment←2↓ref GetFirstCommentLine testFns
desc←(⎕PW-length2){⍺<≢⍵:'...',⍨⍵↑⍨⍺-4 ⋄ ⍵}⍣(~ps.guiFlag)⊢comment
marker←'#'
¯2 ShowLog marker' ',desc
i AddToGui(length2↑(length↑marker,' ',testFns),' (',(cw 0⍕i),'/',max,')'),' ⍝ ',desc
:If ps.guiFlag
ps.ref2Gui.∆n.Grid.Values[i;4]←⊂'{Broken}'
:EndIf
:EndTrap
HandleCleanup ref ps currentGroup i
{}⎕WA  ⍝ Enforce a memory compaction in order to get rid of any rubbish.
:If ps.guiFlag
:AndIf 0=ps.ref2Gui.∆n.∆Closed
ps.stop←⊃{⍵≡(≢⍵)↑1:0 ⋄ ⍵/0 1 2 4 3 5 7 6}ps.ref2Gui.∆n.Stop.SelItems
ps.trapFlag←ps.ref2Gui.∆n.TrapErrors.State
ProcessGuiEvents ps.ref2Gui.∆n
:AndIf ps.ref2Gui.∆n.∆Closed
⎕SIGNAL QuitEvent
:EndIf
:Until i≥≢ps.list
:If ps.guiFlag
ps.ref2Gui.∆n.Info.Text←''
:EndIf
⍝Done
∇
∇ HandleStops(fns ps StopHere testNo fnsName)
:If 0<ps.stop
:AndIf 1⊃⌽(8⍴2)⊤⊃ps.stop
(∪(⎕STOP fns),StopHere)⎕STOP fns
⎕←'About to execute <',(⍕_ref),'.',fnsName,'> ...'
:Else
((⎕STOP fns)~StopHere)⎕STOP fns
:EndIf
∇
∇ (rc log)←ReportTestResults ps;noOf;constant;constants;comment
log←''
log,←⊂'-----'
log,←⊂'  ',(⍕ps.totalCounter),' test case',((1≠ps.totalCounter)/'s'),' of ',(⍕≢ps.list),' called'
log,←⊂'  ',(⍕ps.failedCounter),' test case',((1≠+/ps.failedCounter)/'s'),' failed',(0<ps.failedCounter)/' (flagged with "*")'
log,←⊂'  ',(⍕ps.errCounter),' test case',((1≠+/ps.errCounter)/'s'),' broken',(0<ps.errCounter)/' (flagged with "#")'
:If 0≠ps.totalCounter
constants←ListSymbolicNames
constants←(~constants[;1]∊'_OK' '_Failed')⌿constants
:For constant comment :In ↓constants
:If '_custom'{⍺≡(≢⍺)↑⍵}constant
:AndIf 0<≢comment
:AndIf 0<noOf←ps.returnCodes+.=-⊃(//)⎕VFI(≢'_custom_')↓constant
log,←⊂'  ',(⍕noOf),' test cases not executed because of "',comment,'" (flagged with "⍝")'
:ElseIf 0<noOf←ps.returnCodes+.=⍎constant
log,←⊂'  ',(⍕noOf),' test cases not executed because of "',(1↓constant),'" (flagged with "⍝")'
:EndIf
:EndFor
:Else
log,←⊂'0 test cases executed'
:EndIf
ShowLog log
rc←0<ps.failedCounter+ps.errCounter
∇
∇ {r}←ExecuteCleanup(ref ps);report
r←⍬
report←'Looking for a function "Cleanup": '
:If 3=ref.⎕NC'Cleanup'
:If 3⊃⌽(8⍴2)⊤ps.stop
(∆stop_before_cleanup_1 ∆stop_before_cleanup_2)⎕STOP 1⊃⎕SI
:Else
((⎕STOP 1⊃⎕SI)~∆stop_before_cleanup_1 ∆stop_before_cleanup_2)⎕STOP 1⊃⎕SI
:EndIf
:If 0=1 2⊃ref.⎕AT'Cleanup'
∆stop_before_cleanup_1:  ⍝ To switch off the stopping mechanism permanently, enter:   ps.stop←0
ref.Cleanup
report,←'found and executed'
:Else
∆stop_before_cleanup_2:  ⍝ To switch off the stopping mechanism permanently, enter:   ps.stop←0
ref.Cleanup ps
:EndIf
report,←' found and executed successfully'
:Else
report,←'not found'
:EndIf
ShowLog report
∇
∇ rc←ExecuteTestFunction(ref ps testNo fnsName);buff
:If 0=ps.batchFlag
:AndIf 0=+/'⎕TRAP'⍷1 ⎕C{⍵↑⍨⍵⍳'⍝'}{⊃,/⍵↑⍨1++/∧\';'=1↓⊃¨A.DLB ⍵}ref.⎕NR fnsName
ShowLog'  *** WARNING: ⎕TRAP is not localized in ',(⍕ref),'.',fnsName
:EndIf
:If 0<≢_codeCoverage
_codeCoverage.Start ⍬
:EndIf
HandleStops(1⊃⎕SI)ps ∆stop_before_test testNo fnsName
:If ps.guiFlag
ps.ref2Gui.∆n.Info.Text←'Executing ',(⍕ref),'.',fnsName,'...'
:EndIf
:If 0<≢_exec_before_each_test
:If 0=1 1⊃⎕AT _exec_before_each_test
⍎_exec_before_each_test,' fnsName ps'
:Else
:If 0<≢buff←⍎_exec_before_each_test,' fnsName ps'
⎕←buff
:EndIf
:EndIf
:EndIf
∆stop_before_test:  ⍝ To switch off the stopping mechanism permanently, enter:   ps.stop←0
rc←ref.⍎fnsName,' ',(⍕ps.debugFlag),' ',(⍕ps.batchFlag)
:If 0<≢_exec_after_each_test
:If 0=1 1⊃⎕AT _exec_after_each_test
⍎_exec_after_each_test,' fnsName ps'
:Else
:If 0<≢buff←⍎_exec_after_each_test,' fnsName ps'
⎕←buff
:EndIf
:EndIf
:EndIf
:If 0<≢_codeCoverage
_codeCoverage.Stop ⍬
:EndIf
⍝Done
∇
∇ QuitTests;was
⍝ Use this method to quit a test run prematurely and make sure that everything is tidied up,
⍝ meaning that a `Cleanup` function (if any) is executed.\\
:Access Public Instance
∆TRAPS_IN_SESSION←600⌶0  ⍝ Enable traps in the session and save original setting
⎕SIGNAL QuitEvent
∇
∇ {r}←{type}ShowLog msg;selog;buff
⍝ `type` may be 1 or 2 or 3 or ¯1 or ¯2:
⍝ * A 1 means an action message
⍝ * A 2 means the result of the execution attempt of a test function.
⍝ * A 3 means "to be appended the very last line in the log"
⍝ * A negative type means message with more to come
⍝ Requires semi-global `ps`: a parameter space with `ps.log` being, well, the log.
r←⍬
:If 0<≢msg
type←{0<⎕NC ⍵:⍎⍵ ⋄ 1}'type'
'Invalid type'Assert(⊂|type)∊1 2 3
:If ps.batchFlag∧0=ps.guiFlag
:If type=3
ps.log[≢ps.log]←⊂((≢ps.log)⊃ps.log),msg
:Else
:If 1<≡msg
ps.log,←msg
:Else
ps.log,←⊂msg
:EndIf
:EndIf
:Else
buff←{1=≡⍵:⊂⍵ ⋄ (3≠≢⍵)∨'---'≡3↑⊃⍵:⍵ ⋄ ⊂(1⊃⍵),' ',(2⊃⍵),' ',(3⊃⍵)}msg
:If ps.guiFlag
:If ps.ref2Gui.∆n.∆Closed
⎕SIGNAL QuitEvent
:EndIf
:If 3=type
:AndIf 1=≡msg
ps.ref2Gui.∆n.Log.Text[≢ps.ref2Gui.∆n.Log.Text]←⊂(⊃⌽ps.ref2Gui.∆n.Log.Text),msg
:Else
ps.ref2Gui.∆n.Log.Text,←⊆msg
:EndIf
ps.ref2Gui.∆n.Log.SelText←2⍴(≢ps.ref2Gui.∆n.Log.Text),¨1
:EndIf
:If type=3
ps.log[≢ps.log]←⊂((≢ps.log)⊃ps.log),⊃buff
:Else
ps.log,←buff
:EndIf
:If ~ps.guiFlag
:If type=3
⎕←⊃¯1↑ps.log
:ElseIf ¯1≠×type
selog←{1=≡⍵:⍵ ⋄ (3≠≢⍵)∨'---'≡3↑⊃⍵:⍪⍵ ⋄ (1⊃⍵),' ',(2⊃⍵),' ',(3⊃⍵)}msg
:If type<0
⍞←selog,(type=¯2)/CR
:Else
⎕←selog
:EndIf
:EndIf
:EndIf
:EndIf
:EndIf
∇
∇ {r}←ps CreateGui dummy;∆;n;width;scrollbarSize;items;bool
n←⎕NS''
∆←''
∆,←⊂'Caption'('Test cases in ',⍕{⊃⍵~1⍴⍵}⎕NSI)
∆,←⊂'Coord' 'Pixel'
∆,←⊂'Posn'(40 20)
∆,←⊂'Size'(600 1100)
n.Form←⎕NEW'Form'∆
n.Form.∆n←n  ⍝ Prevents the Form from disappearing
n.∆Closed←0
n.Form.onClose←'OnClose'
n.Form.on9999←1       ⍝ Used to end a ⎕DQ on the Form for processing events, in particular "Close"
n.Form.on9998←1       ⍝ Used to end a ⎕DQ at an early stage, before the tests are run. Deactivated then.
n.Form.onKeyPress←'OnKeyPress'
n.Font←⎕NEW'Font'(('PName' 'APL385 Unicode')('Size' 18))
n.Form.FontObj←n.Font
n.MyTipObj←⎕NEW⊂'TipField'
n.SB←n.Form.⎕NEW'Statusbar'(,⊂'Attach'('Bottom' 'Left' 'Bottom' 'Right'))
n.Info←n.SB.⎕NEW'StatusField'(('Coord' 'Prop')('Size'(⍬ 99))('Attach'('Bottom' 'Left' 'Bottom' 'Right')))
∆←''
∆,←⊂'Caption' '&Start'
∆,←⊂'Size'(⍬ 110)
∆,←⊂'Attach'(4⍴'Bottom' 'Left')
n.StartBtn←n.Form.⎕NEW'Button'∆
n.StartBtn.onSelect←1
n.StartBtn.Posn←(n.Form.Size[1]-n.StartBtn.Size[1]+5+n.SB.Size[1]),10
∆←''
∆,←⊂'Caption' '&Pause'
∆,←⊂'Size'(⍬ 110)
∆,←⊂'Style' 'Check'
∆,←⊂'Attach'(4⍴'Bottom' 'Left')
n.PauseBtn←n.Form.⎕NEW'Button'∆
n.PauseBtn.Posn←(n.StartBtn.Posn[1]),20++/2⊃+⌿↑n.StartBtn.(Posn Size)
∆←''
∆,←⊂'Style' 'Check'
∆,←⊂'Posn'(5 5)
∆,←⊂'Caption' '&Trap errors'
∆,←⊂'State'ps.trapFlag
∆,←⊂'Attach'(4⍴'Top' 'Left')
∆,←⊂'TipObj'n.MyTipObj
∆,←⊂'Tip'('Trap all errors in tests and report them as crashing.' 'The setting does NOT influcence the effect of the "debug" flag')
n.TrapErrors←n.Form.⎕NEW'Button'∆
∆←''
∆,←⊂'Style' 'Check'
∆,←⊂'Posn'(5,20+2⊃+⌿↑n.TrapErrors.(Posn Size))
∆,←⊂'Caption' '&Debug'
∆,←⊂'Attach'(4⍴'Top' 'Left')
∆,←⊂'State'ps.debugFlag
∆,←⊂'TipObj'n.MyTipObj
∆,←⊂'Tip'('Crash at failing tests for investigation rather than just reporting them.' 'The setting does NOT influcence "Trap Errors"')
n.Debug←n.Form.⎕NEW'Button'∆
∆←''
∆,←⊂'Posn'(5,20+2⊃+⌿↑n.Debug.(Posn Size))
items←(⊂'No stop'),'Stop on '∘,¨'tests' '"Initial"' '"Cleanup"' 'tests+"Initial"' 'tests+"Cleanup"' 'test+"Initial"+"Cleanup"' '"Initial"+"Cleanup"'
items,¨←'' ' (1)' ' (2)' ' (4)' ' (3)' ' (5)' ' (7)' ' (6)'
∆,←⊂'Items'items
bool←(≢items)⍴0
:If 0=+/(8⍴2)⊤ps.stop
bool[1]←1
:Else
bool[1+1 2 4 3 5 7 6⍳ps.stop]←1
:EndIf
∆,←⊂'SelItems'bool
∆,←⊂'Attach'(4⍴'Top' 'Left')
∆,←⊂'TipObj'n.MyTipObj
∆,←⊂'Tip'('Stop just before any test or any "Initial" or' 'any "Cleanup" functions gets executed.' 'Allows tracing those functions.')
n.Stop←n.Form.⎕NEW'Combo'∆
∆←''
∆,←⊂'Posn'((8+1⊃+⌿↑n.Stop.(Posn Size))0)
∆,←⊂'Attach'('Top' 'Left' 'Bottom' 'Right')
∆,←⊂'Size'((n.Form.Size[1]-20+(1⊃n.StartBtn.Size)+(1⊃n.SB.Size)+1⊃+⌿↑n.Stop.(Posn Size))⍬)
∆,←⊂'Event'('KeyPress' '##.OnKeyPress')
n.TB←n.Form.⎕NEW'TabControl'∆
n.TabBtn1←n.TB.⎕NEW'TabButton'(,⊂'Caption' 'Log')
n.TabBtn2←n.TB.⎕NEW'TabButton'(,⊂'Caption' 'Details')
n.SF1←n.TB.⎕NEW'SubForm'((,⊂'TabObj'n.TabBtn1))
n.SF2←n.TB.⎕NEW'SubForm'((,⊂'TabObj'n.TabBtn2))
2 ⎕NQ n.TabBtn1'Select'
∆←''
∆,←⊂'Coord' 'Prop'
∆,←⊂'Posn'(0 0)
∆,←⊂'Size'(100 100)
∆,←⊂'ReadOnly' 1
∆,←⊂'Style' 'Multi'
∆,←⊂'HScroll' ¯1
∆,←⊂'VScroll' ¯1
n.Log←n.SF1.⎕NEW'Edit'∆
n.Log.Text←''
n.Log.onKeyPress←'OnKeyPress'
∆←''
∆,←⊂'Coord' 'Prop'
∆,←⊂'Posn'(0 0)
∆,←⊂'Size'(100 100)
∆,←⊂'ColTitles'('' 'Name' 'Comments' 'Result' '')
∆,←⊂'ResizeCols' 1
n.Grid←n.SF2.⎕NEW'Grid'∆
n.Grid.Coord←'Pixel'
n.Grid.BCol←(255 255 255)(122 255 189)(10 10 10)(3↑255)(3⍴128) ⍝ Default, okay, broken, failed, inactive, not run yet
n.Grid.FCol←(0 0 0)(0 0 0)(255 255 0)(255 255 0)(3⍴255) ⍝ Default, okay, broken, failed, inactive
n.Grid.Values←2000 5⍴⊂''
n.Grid.CellTypes←2000 5⍴6
n.Grid.TitleWidth←70
width←20 200 0,(2+⌈/2⊃¨n.Grid.GetTextSize¨,ListSymbolicNames)   ⍝ Size of the "RC" column is calculated dynamically
n.Grid.CellWidths←width
scrollbarSize←35
n.Grid.CellWidths[3]←n.Form.Size[2]-scrollbarSize+n.Grid.TitleWidth++/width
n.Grid.CurCell←1 4
n.Grid.onContextMenu←'OnContextMenuInGrid'
n.Grid.onKeyPress←'OnKeyPress'
r←n.Form
⍝Done
∇
∇ r←OnContextMenuInGrid msg;n2;result;name;ref;row;caption;n;rc;log;ref2Gui;this;was;parms;cl;buff
:Access Public Shared
r←0
ref←1⊃,msg
n2←⎕NS''
n2.Menu←⎕NEW⊂'Menu'
row←⊃ref.CellFromPoint msg[4 5]
name←2⊃ref.Values[row;]
caption←' "',name,'"'
n2.Edit←n2.Menu.⎕NEW'MenuItem'(⊂('Caption'('Edit',caption)))
n2.Copy←n2.Menu.⎕NEW'MenuItem'(⊂('Caption' 'Copy names and comments to ⎕ED'))
{⍵.onSelect←1}¨'MenuItem'⎕WN n2.Menu
result←⎕DQ n2.Menu
:If 0<≢result
n←ref.##.##.##.∆n
:Select ⊃result
:Case n2.Edit
_ref.⎕ED'Test_',name
:Case n2.Copy
buff←¯1↓⊃,/{(A.DTB ⍵),CR}¨↓⎕FMT{((¯3↑¨⍕¨⍳≢⍵),¨⊂'. '),⍵}{⍵⌿⍨(≢¨⍵)∨.≠0 0}n.Grid.Values[;2 3]
{{}(#.⎕NS'').(⎕ED⍠('ReadOnly' 1)&{'ed'}ed←⍵)}buff
:Else
∘∘∘ ⍝ Huh?!
:EndSelect
:EndIf
∇
∇ r←OnClose msg;ref
⍝ Callback called in case the user closes the GUI, for example by clicking the "Close" box.\\
⍝ Note that this function changes the global `∆n.∆Closed` from 0 to 1.
:Access Public Shared
r←1
ref←1⊃,msg
ref{6::shy←⍬ ⋄ ⎕NQ ⍺ ⍵}9998
:Trap 6 ⋄ ref.∆n.∆Closed←1 ⋄ :EndTrap
⍝Done
∇
∇ r←OnKeyPress msg;ref;key;form
:Access Public Shared
r←1
:If 1<≢ref←1⊃,msg
⍝ For the TabControl we must use the old ('Event' ...) syntax, making it a name rather than a ref fur to bug <01655>
→(0=⎕NC'ps')/0
ref←ps.ref2Gui.∆n.TB
:EndIf
:If ⍬≢form←{0::⍬ ⋄ 'Form'≡⍵.Type:⍵ ⋄ ∇ ⍵.##}ref
key←⊃2↓msg
:If 'EP'≡key
⎕NQ form'Close'
:EndIf
:EndIf
∇
∇ {r}←row AddToGui msg;row;colHeaderHeight;noOfLines;cols
r←⍬
:If ps.guiFlag
n←ps.ref2Gui.∆n
:If 0=n.∆Closed
n.Grid.Values[row;1]←⊃msg
cols←1 2 3 4
:Select ⊃⊃msg
:Case '✓'
n.Grid{2 ⎕NQ ⍺'SetCellType'row ⍵ 2}¨cols
:CaseList '⍝-'
n.Grid{2 ⎕NQ ⍺'SetCellType'row ⍵ 5}¨cols
:Case '#'
n.Grid{2 ⎕NQ ⍺'SetCellType'row ⍵ 3}¨cols
:Case '*'
n.Grid{2 ⎕NQ ⍺'SetCellType'row ⍵ 4}¨cols
:EndSelect
n.Grid.CurCell←row 4
colHeaderHeight←25
noOfLines←⌊n.Grid.Size[1]÷⊃n.Grid.CellHeights
:If row=n.Grid.Index[1]+noOfLines-1
n.Grid.Index[1]←row-1
:EndIf
:EndIf
:EndIf
∇
∇ {r}←ProcessGuiEvents n
:Trap 6
{6::shy←⍬ ⋄ _←⎕DL 0.3 ⋄ 1:shy←⎕NQ ⍵.Form 9999}&n
r←⎕DQ n.Form
:EndTrap
∇
∇ r←FailsIf flag;ref
⍝ Usage : `→FailsIf x`, with `x` being a boolean scalar.
:Access Public Instance
ref←⊃⎕RSI                     ⍝ Called from...
r←ref PassesIf~flag           ⍝ Just PassesIf on negation
∇
∇ r←{ref}PassesIf flag;flag2
⍝ Usage : `→PassesIf x`, with `x` being a boolean scalar
:Access Public Instance
r←⍬
⎕EX'∆FAILING_LINE'
:If ~flag                     ⍝ Passes test, so →PassesIf x just continues
:If 0=⎕NC'ref'
ref←⊃⎕RSI             ⍝ Called from...
:EndIf
:If 0<ref.⎕NC'stopFlag'
:AndIf 0=ref.⎕NC'debugFlag'
flag2←ref.stopFlag
:Else
flag2←ref.debugFlag
:EndIf
:If flag2
⎕SIGNAL 999           ⍝ Cause a stop for investigation
:Else                     ⍝ Do not stop, continue with test suite
r←0
:If ref.batchFlag
∆FAILING_LINE←2⊃⎕LC
:EndIf
:EndIf
:EndIf
∇
∇ r←{label}GoToTidyUp flag;ref;flag2
⍝ Returns either an empty vector or `label, which defaults to `∆TidyUp`.\\
⍝ Signals 999 when `flag` is 1 and `debugFlag` is 1.
:Access Public Instance
⎕EX'∆FAILING_LINE'
ref←⊃⎕RSI
:If 0<ref.⎕NC'stopFlag'
:AndIf 0=ref.⎕NC'debugFlag'
flag2←ref.stopFlag
:Else
flag2←ref.debugFlag
:EndIf
:If flag∧flag2
⎕SIGNAL 999
:EndIf
label←{(0<⎕NC ⍵):⍎⍵ ⋄ r←ref.⍎'∆TidyUp'}'label'
r←flag/label
:If ref.batchFlag
∆FAILING_LINE←2⊃⎕LC
:EndIf
∇
∇ {list}←EditTestFunctions list;name
⍝ Get all functions into the editor starting their names with `Test_` in case `list` is empty.\\
⍝ If `list` is not empty it may be one of:
⍝ * A matrix with test function names in the first column; typically the result of `ListTestFunctions`.
⍝ * A vector of text vectors specifying names.
⍝ * A simple text vector with the name of a single test case.\\
⍝ Returns the list of names (vector of text vectors)  as a shy argument.
:Access Public Instance
:If 0=≢list
list←'T'_ref.⎕NL 3
:ElseIf 2=⍴⍴list
:If 2=|≡list
list←↑list[;1]
:Else
list←↑{⍵↑⍨+/∧\⍵≠' '}¨{⍵↓⍨+/∧\' '=⍵}¨↓list
:EndIf
:ElseIf 2=|≡list
list←⊃list
:Else
:If '*'=¯1↑list
name←'Test_'{(⍺/⍨⍺≢(≢⍺)↑⍵),⍵}¯1↓list
list←name{⍵⌿⍨((≢⍺)↑[2]⍵)∧.=⍺}'T'_ref.⎕NL 3
:Else
list←,[0.5]list
:EndIf
:EndIf
:If 0<≢list←' '~⍨¨↓'Test_'{⍵⌿⍨⍺∧.=⍨(≢⍺)↑[1+⎕IO]⍵}list
_ref{(0=≢⍵): ⋄ ⍺.⎕ED ⍵}&list
:EndIf
∇
∇ r←{x}ListTestFunctions groupName;r2;b;max;longestName;buff;numbers;view
⍝ Returns a matrix with two columns with the names of all test cases in the first column and the
⍝ first comment line in the second column.\\
⍝ If `groupName` is not empty then it will return only the members of that group (case dependent) or,
⍝ if the expression carries a wildcard, all groups matching the given string.\\
⍝ `groupName` may or may not start with `Test_`.\\
⍝ If the optional left argument (`numbers`)" is defined only those numbers are returned.
:Access Public Instance
x←{(0<⎕NC ⍵):⍎⍵ ⋄ ⍬}'x'
:If (≡x)∊0 1
:If 0=1↑0⍴x
numbers←x
view←0
:Else
view←'view'≡⎕C x
numbers←⍬
:EndIf
:Else
Assert 2=≢x
(view numbers)←(0=1↑0⍴1⊃x)⌽x
view←'view'≡⎕C view
:EndIf
r2←↓'Test_'{⍵⌿⍨((≢⍺)↑[2]⍵)∧.=⍺}'T'_ref.⎕NL 3
:If 0≠≢groupName
groupName←'Test_'{⍵↓⍨(≢⍺)×⍺≡(≢⍺)↑⍵}groupName
groupName←'Test_'{((⍺≢(≢⍺)↑⍵)/⍺),⍵}groupName
groupName,←('*'≠¯1↑groupName)/'_'
groupName←(-'*'=¯1↑groupName)↓groupName
r2/⍨←groupName∘≡¨(≢groupName)↑¨r2,¨' '
:EndIf
:If 0=≢r2
r←0 2⍴⊂''
:Else
r2←A.DTB r2
:If 0≠≢numbers
r2←((({⊃∘⊃∘(//)∘⎕VFI ⍵↑⍨-(-1)+'_'⍳⍨⌽⍵}¨r2))∊numbers)⌿r2
:EndIf
buff←1↓¨_ref GetFirstCommentLine¨r2
buff←A.DLB buff
r2←r2,[1.5]buff
r2←r2[⍋↑⎕C r2[;1];]
longestName←⌈/≢¨r2[;1]
longestName←⌈/≢¨r2[;1]
:If ~view
:AndIf 0<≢r2
:AndIf ⎕PW<longestName+3+⌈/≢¨r2[;2]
max←⎕PW-3+longestName
b←max<≢¨r2[;2]
(b⌿r2[;2])←((max-4)↑¨b/r2[;2]),¨⊂'...'
:EndIf
r←r2
:If view
{{}(#.⎕NS'').(⎕ED⍠('ReadOnly' 1)&{'ed'}ed←⍵)}r
r←0 0⍴⍬
:EndIf
:EndIf
∇
∇ r←ListGroups
⍝ Returns all groups as a two-column matrix.
⍝ The first column carries the group name.
⍝ The second column carries the number of test cases within that group.
:Access Public Instance
r←' '~¨⍨↓'Test_'{⍵⌿⍨((≢⍺)↑[2]⍵)∧.=⍺}'T'_ref.⎕NL 3
:If 0≠≢r←(2≤'_'+.=⍉↑r)⌿r
:AndIf 0≠≢r←{⍺,≢⍵}⌸{⊃{⍺,'_',⍵}/¯1↓'_'A.Split ⍵}¨r
r←r[⍋⎕C↑r[;1];]
:EndIf
∇
∇ r←ListSymbolicNames;A;buff1;buff2;buff3;bool
⍝ Returns a two-column matrix with all symbolic names.
⍝ The second column is empty for built-in constants but carries a description for custom ones.
:Access Public Instance
buff1←⍪' '~¨⍨↓'_'⎕NL 2.2
buff1←buff1,⊂''
buff2←' '~¨⍨↓'_'⎕NL 2.1
buff2←'_custom'{⍵/⍨⍺∘≡¨(≢⍺)↑¨⍵}buff2
buff3←⍎¨buff2
bool←0<+/¨≢¨¨buff3
:If 0=≢buff3←bool/buff3
r←buff1
:Else
r←buff1⍪(bool/buff2),[1.5]buff3
:EndIf
∇
∇ r←GetSymbolicName constant;names;values
⍝ Takes a constant and returns it symbolic name.\\
⍝ * If the constant is unknown `''` is returned
⍝ * If it is a single integer a string is returned
⍝ * If `constant` is more than one integer a vector of strings is returned
:Access Public Instance
'Invalid right argument: must be one or more integers'Assert∧/{(0 1 2∊⍨≡⍵)∧83∧.=⎕DR ⍵}¨1(2 3)
names←,ListSymbolicNames[;1]
values←⍎¨names
:If 1<≢constant
r←(names,⊂'')[values⍳constant]
:Else
r←(values⍳constant)⊃names,⊂''
:EndIf
∇
∇ r←{currentVersion}AtLeastVersion min;currentVersion
⍝ Returns 1 if the currently running version is at least `min`.
⍝ If the current version is 17.1 then:
⍝ 0 0 1 1 ←→ AtLeastVersion¨16 17 17.1 18
:Access Public Instance
currentVersion←{0<⎕NC ⍵:⍎⍵ ⋄ {⊃⊃(//)⎕VFI ⍵/⍨2>+\⍵='.'}2⊃'#'⎕WG'APLVersion'}'currentVersion'
'Right argument must be length 1'Assert 1=≢min
r←min≤currentVersion
∇
∇ r←{target}FindSpecialString what
⍝ Use this to search for stuff like "CHECK" or "TODO" enclosed between lamps `⍝`.
⍝ Without left argument the search starts in `_ref`.
:Access Public Instance
target←{0<⎕NC ⍵:⍎⍵ ⋄ ⍕_ref}'target'
r←⍉1↓[1+⎕IO]⎕SE.UCMD'locate "',what,'" -return=count -objects=',⍕target  ⍝ The quotes are essential because of the ⍝ symbol!
:If 0<≢r←(0<r[;⎕IO+1])⌿r                                    ⍝ Drop those with no hits
r[;⎕IO]←{2>'#'+.=⍵:⍵ ⋄ {⎕IO←0 ⋄ ⌽⍵↑⍨1+⍵⍳'#'}⌽⍵}¨r[;⎕IO]
:EndIf
∇
∇ {r}←oldName RenameTestFnsTo newName;body;rc;header;comment;res;name;right;left;delFilanme;list;this;no;buff;val;f1;f2
⍝ Renames a test function or a group of test functions and tells acre and Link.\\
⍝ `oldName` and `newName` **must not** contain a dot.\\
⍝ Note that names of test functions are supposed to start with "Test_", so if the arguments do not start
⍝ with "Test_" the string is added.
⍝ Examples:
⍝ ```
⍝ 'Test_999'   ← 'Test_001' T.RenameTestFnsTo 'Test_999'     ⍝ Rename a single test function without group
⍝ 'Test_BBB_2' ← 'Test_1' T.RenameTestFnsTo 'Test_BBB_2'     ⍝ Rename a single test function with group
⍝ 'Test_BBB_2' ← 'BBB_1' T.RenameTestFnsTo 'BBB_2'           ⍝ Rename a single test function with group without "Test_"
⍝ 'Test_CCC_3' ← 'Test_BBB_2' T.RenameTestFnsTo 'Test_CCC_3' ⍝ Change group and number
⍝ 'Test_YYY*'  ← 'Test_AAA; T.RenameTestFnsTo 'Test_YYY'     ⍝ Rename all members of a group with full name
⍝ 'Test_YYY*'  ← 'AAA' T.RenameTestFnsTo 'YYY'               ⍝ Rename all members of a group without "Test_"
⍝ 'Test_VVV*'  ← '' T.RenameTestFnsTo 'Test_VVV'             ⍝ all NOT belonging to a group are renamed
⍝ ```
⍝ `r ← ⍬`
:Access Public Instance
r←⍬
(oldName newName)←oldName newName~¨' '
'Names must not contain dots'Assert~↑∨/'.'∊¨oldName newName
(oldName newName)←'Test_'∘{⍺≡(≢⍺)↑⍵:⍵ ⋄ ⍺,⍵}¨oldName newName
:If 0=≢buff←ListGroups
f1←0
f2←0=≢Remove∆Test_ oldName
:Else
f1←(⊂Remove∆Test_ oldName)∊(≢'Test_')↓¨{⍵[;1]}buff     ⍝ Group name?
f2←0=≢Remove∆Test_ oldName
:EndIf
:If f1
'New name is invalid'Assert ¯1≠⎕NC Remove∆Test_ newName
:EndIf
:If f1∨f2
list←{⍵[;1]}ListTestFunctions Remove∆Test_ oldName
:If f2
list←((⊃∘Remove∆Test_¨list)∊⎕D)/list
:EndIf
:For this :In list
no←{⍵↑⍨-¯1+(⌽⍵)⍳'_'}this
:If 0<_ref.⎕NC'Test_',(Remove∆Test_ newName),'_',no  ⍝ Already occupied?
val←⊃(//)⎕VFI no
⍝ We need to establish the next free number:
no←(-≢no)↑((≢no)⍴'0'),' '~⍨⍕1+⌈/{⊃(//)⎕VFI ⍵↑⍨-¯1+(⌽⍵)⍳'_'}¨↓_ref.{l←'T'⎕NL 3 ⋄ l⌿⍨((≢⍵)↑[2]l)∧.=⍵}newName,'_'
:EndIf
this RenameTestFnsTo'Test_',(Remove∆Test_ newName),'_',no
:EndFor
→∆Go
:Else
'Function to be renamed not found'Assert 3=_ref.⎕NC oldName
'New name is already used'Assert 0≥_ref.⎕NC newName
'New name is invalid'Assert ¯1≠_ref.⎕NC newName
:EndIf
body←_ref.⎕NR oldName
header←⎕IO⊃body
(header comment)←header{⎕IO←0 ⋄ ⍺{(⍵↑⍺)(⍵↓⍺)}⍵⍳'⍝'}header
:If (_ref.⎕NC⊂oldName)∊3.2   ⍝ Dfns
:If 1=≢body
(oldName body)←{⎕IO←0 ⋄ ⍵{(⍵↑⍺)(⍵↓⍺)}⍵⍳'←'}⎕IO⊃body
body←,⊂newName,body
oldName~←' '
:Else
(⎕IO⊃body)←newName,'←{'
:EndIf
:Else
(res header)←header{⎕IO←0 ⋄ ⍺{~'←'∊⍺:''⍺ ⋄ ((1+⍵)↑⍺)((1+⍵)↓⍺)}⍵⍳'←'}header
:If '('∊header
(header right)←header{⎕IO←0 ⋄ ⍺{(⍵↑⍺)(⍵↓⍺)}⍵⍳'('}header
header←{⎕ML←3 ⋄ ⍵⊂⍨' '≠⍵}header
:Select ⍬⍴⍴header
:Case 1       ⍝ Monadic fns
name←header
left←''
:Case 2        ⍝ Dyadic fns
(left name)←header
:Else
.          ⍝ ?!
:EndSelect
:Else
header←{⎕ML←3 ⋄ ⍵⊂⍨' '≠⍵}header
:Select ⍬⍴⍴header
:Case 1        ⍝ Niladic fns
name←header
left←right←''
:Case 2        ⍝ Monadic fns
(name right)←header
left←''
:Case 3        ⍝ Dyadic fns
(name right left)←header
:Else
.          ⍝ ?!
:EndSelect
:EndIf
name←newName
(⎕IO⊃body)←res,left,' ',name,' ',right,comment
:EndIf
:If ' '≠1↑0⍴rc←_ref.⎕FX↑body
. ⍝ something went wrong
:EndIf
NotifyAcreAndLinkAndDeleteOldVersion oldName newName
∆Go:
_ref.⎕EX oldName
:If (⊃⎕SI)≢⊃1↓⎕SI
r←'***Done'
:EndIf
∇
∇ {r}←{groupName}GetTestTemplate no;newName;body;cl
:Access Public Instance
⍝ Injects the code (body) of the test template function into the namespace hosting the test cases if that is an
⍝ ordinary namespace. If it is a scripted one the user will be prompted for copying the body to the clipboard.
⍝ The user can then inject that code herself into the scripted namespace/class.
r←⍬
groupName←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'groupName'
'Invalid right argumet: must be an integer between 1 and 999'Assert(⊂no)∊(⍳999)
'Invalid left argumet: must be a char vector'Assert((≡groupName)∊0 1)∧' '≡⊃0⍴groupName
body←A.DTB↓180⌶'Test_000'
:If 0=≢groupName
newName←'Test_',(¯3↑'000',⍕no)
(1⊃body)←'←Test_000\('⎕R('←',newName,'(')⍠('Greedy' 0)⊣1⊃body
:Else
newName←'Test_',groupName,'_',(¯3↑'000',⍕no)
(1⊃body)←'←Test_000\('⎕R('←',newName,'(')⍠('Greedy' 0)⊣1⊃body
:EndIf
:If 0<_ref.⎕NC newName
:If 3=_ref.⎕NC newName
:If 0=1 YesOrNo'Function <',newName,'> already exists! Overwrite?'
:Return
:EndIf
:Else
11 ⎕SIGNAL⍨'The name <'.newName,'> is already taken!'
:EndIf
:EndIf
:If {16::0 ⋄ 1⊣⎕SRC ⍵}_ref
:If 1 YesOrNo'Cannot fix function in  a script; shall the body be copied to the clipboard?'
'cl'⎕WC'Clipboard'
cl.Text←2↓⊃,/(⊂CRLF),¨body
:Else
⎕←'No action taken'
:EndIf
:Else
_ref.⎕FX body
:EndIf
∇
∇ r←{force}EstablishHelpers ref;res
⍝ Establishes the three helpers `Prepare`, `RunTests` and `RunBatchTests` in `ref`.\\
⍝ The user is asked for confirmation, but you can prevent that (and enforce the operation) by passing
⍝ a 1 as the left argument `force`.\\
⍝ Returns an empty vector if force is ` or the user has not confirmed the operation, otherwise a message.
:Access Public Shared
r←''
force←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'force'
:If (⊂ref)∊''⍬
ref←⊃⎕RSI
:EndIf
'Cannot establish helpers in class instances/unnamed namespaces'Assert~'['∊⍕ref
:If force
:OrIf YesOrNo'Helpers@Sure you wanna establish three helpers "Prepare", "RunTests" & "RunTestsInBatchMode" in ',(⍕ref),' ?'
res←ref.⎕FX ⎕CR'Prepare'
('Fixing helper "Prepare" in ',(⍕ref),' failed on line(s) ',⍕res)Assert' '=1↑0⍴res
res←ref.⎕FX ⎕CR'RunTests'
('Fixing helper "RunTests" in ',(⍕ref),' failed on line(s) ',⍕res)Assert' '=1↑0⍴res
res←ref.⎕FX ⎕CR'RunTestsInBatchMode'
('Fixing helper "RunBatchTests" in ',(⍕ref),' failed on line(s) ',⍕res)Assert' '=1↑0⍴res
r←(~force)/'"Prepare", "RunTests" & "RunTestsInBatchMode" successfully established in ',⍕ref
r,←CR,'⍝ You might want to inform Link:'
r,←CR,'⍝ ⎕SE.Link.Add ',⊃,/('''','.',⍨⍕ref)∘,¨'Prepare'' ' 'RunTests'' ' 'RunTestsInBatchMode'' '
:EndIf
∇
∇ R←Test_000(debugFlag batchFlag);⎕TRAP
⍝ Model for a test function.
⍝ *** Watch out: assumes that the instance of Tester2 is called "T".
⎕TRAP←(999 'C' '∘∘∘ ⍝ Deliberate error')(0 'N')
R←T._Failed
⍝ Establish preconditions...
→T.PassesIf 1≡1
→T.FailsIf 1≢1
→T.GoToTidyUp 1≢1
R←T._OK
∆TidyUp: ⍝ Clean up after this label
⍝ ...
∇
CopyGUI2Parms←{
ps←⍵
ps.trapFlag←ps.ref2Gui.∆n.TrapErrors.State
ps.debugFlag←ps.ref2Gui.∆n.Debug.State
ps.stop←+/ps.ref2Gui.∆n.Stop.SelItems/0 1 2 4 3 5 7 6
ps
}
AddReturnCodeToGrid←{
0=ps.guiFlag:shy←⍬
ps←⍺
(rc row)←⍵
l←' '~¨⍨↓'_'⎕NL 2
v←⍎¨l
symbolic←(v⍳rc)⊃(1↓¨l),⊂⍕rc
symbolic←{2⊃ListCustomMessages[ListCustomNumbers⍳⊃⊃(//)⎕VFI ⍵;]}⍣(⊃⊃⎕VFI symbolic)⊣symbolic
6::shy←⍬
_←2 ⎕NQ ps.ref2Gui.∆n.Grid'SetColSize' 4 ¯3
ps.ref2Gui.∆n.Grid.Values[row;4]←⊂symbolic
1:shy←⍬
}
GetGroupName←{
{⍵↓⍨-'_'⍳⍨⌽⍵}Remove∆Test_¨⍵
}
∇ r←i CheckCustomDef msg;list
r←''⍬
:If ~(1=≡msg)∧(1=⍴⍴msg)∧' '=1↑0⍴∊msg
r←'Must be a simple text vector' 11
:Else
list←' '~¨⍨↓'_custom_'{⍵⌿⍨((≢⍺)↑[2]⍵)∧.=⍺}'_'⎕NL 2
list←↓'_custom_'{⍵⌿⍨((≢⍺)↑[2]⍵)∧.=⍺}↑list
list←(i≠∊(//)∘⎕VFI¨¯1↑¨list)/list     ⍝ Exclude itself
:If (⊂msg)∊⍎¨list
r←'Message is already defined' 11
:EndIf
:EndIf
∇
∇ r←ListCustomMessages
r←{⍵⌿⍨0<≢¨⍵[;2]}ListSymbolicNames
∇
∇ r←ListCustomNumbers
r←({⍵⌿⍨0<≢¨⍵[;2]}ListSymbolicNames)[;1]
r←-{⊃⊃(//)⎕VFI ¯1↑⍵}¨r
∇
GetFirstCommentLine←{
body←1↓⍺.⎕NR ⍵
body←(~body∧.=¨' ')/body
body←⊃⍺{⍵↓⍨+/∧\';'=⊃¨A.DLB ⍵}body
A.DLB body↓⍨¯1+body⍳'⍝'
}
∇ {r}←constant ReportInactiveToGUI(row ref testFns n);body;body2
⍝ Tries to find `constant` in the code of the test function (text and comments are ignored).
⍝ It then looks for a comment after the assignment. That comment, if there is any, will be
⍝ shown in the GUI's "Result` column.
⍝ `constant` is something like "_Inactive".
r←⍬
body←ref.⎕NR testFns
:If 0<≢body←(∨/¨('.',constant)∘⍷¨body)/body
body←'''[^'']+'''⎕R''⊣body
body2←({~∨\'⍝'=⍵}¨body)/¨body
body←(∨/¨('.',constant)∘⍷¨body2)/body
:AndIf 1=≢body
body←1⊃body
:AndIf '⍝'∊body
n.Grid.Values[row;4]←⊂(1↓constant),':',{⍵↓⍨⍵⍳'⍝'}body
2 ⎕NQ n.Grid'SetColSize' 4 ¯3
:EndIf
∇
Remove∆Test_←{'Test_'{l←≢⍺ ⋄ 0=l×←⍺≡l↑⍵:⍵ ⋄ l↓⍵}⍵}
∇ {r}←NotifyAcreAndLinkAndDeleteOldVersion(oldName newName);delFilanme;rc
r←⍬
:If 0<⎕SE.⎕NC'acre'
:Trap 22
rc←⎕SE.acre.SetChanged newName
:Else
∘∘∘ ⍝ Huh?! What's up?
:EndTrap
:If 0<≢rc
⎕SE.acre.Erase oldName
:Return
:EndIf
:EndIf
:If 3≤{⊃(//)⎕VFI ⍵↑⍨¯1+⍵⍳'.'}⎕SE.Link.Version
rc←⎕SE.Link.Add(⍕_ref),'.',newName
→('Not in a linked namespace: '{⍺≡(≢⍺)↑⍵}rc)/0
:If 'Added: '{⍺≡(≢⍺)↑⍵}rc
rc←⎕SE.Link.Expunge(⍕_ref),'.',oldName
:If ~rc
∘∘∘ ⍝ Huh?! What's up?
:EndIf
:EndIf
:Else
⎕←'Incompatible version of Link detected; we need 3.0.0 or better'
:EndIf
∇
∇ {(continueFlag i noOf)}←{force}HandleInitialize(ref ps currentGroup i noOf);at;result;buff
force←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'force'
continueFlag←0
currentGroup←Remove∆Test_ currentGroup
:If 0<≢currentGroup
:AndIf force∨currentGroup≢⊃⌽ps.processedGroups
ps.processedGroups,←⊂currentGroup
:If 3=ref.⎕NC'Initial_',currentGroup
at←1⊃ref.⎕AT'Initial_',currentGroup
:If 2⊃⌽(8⍴2)⊤ps.stop
(∪(⎕STOP 1⊃⎕SI),∆stop_before_initial_1,∆stop_before_initial_2,∆stop_before_initial_3)⎕STOP 1⊃⎕SI
:Else
((⎕STOP 1⊃⎕SI)~,∆stop_before_initial_1,∆stop_before_initial_2,∆stop_before_initial_3)⎕STOP 1⊃⎕SI
:EndIf
:If (2⊃at)∊1 ¯2           ⍝ Accepts a right argument (monadic=1, ambivalent=¯2)?
∆stop_before_initial_1:  ⍝ To switch off the stopping mechanism permanently, enter:   ps.stop←0
result←ps ref.{⍎⍵,' ⍺'}'Initial_',currentGroup
:ElseIf |1⊃at
∆stop_before_initial_2:  ⍝ To switch off the stopping mechanism permanently, enter:   ps.stop←0
result←ps ref.{⍎⍵}'Initial_',currentGroup
:Else
∆stop_before_initial_3:  ⍝ To switch off the stopping mechanism permanently, enter:   ps.stop←0
ref⍎'Initial_',currentGroup
result←1
:EndIf
:If ~(⊂result)∊⍬ 1
:AndIf ''≢result
buff←¯1↑ps.log
ps.log←¯1↓ps.log
:If ' '=1↑0⍴∊result
ShowLog'Function "Initial_',currentGroup,'" found and executed, but it returned an error message:',CR,result
:Else
ShowLog'Function "Initial_',currentGroup,'" found and executed but did not return a 1'
:EndIf
noOf←+/∨/('_',currentGroup,'_')⍷↑(i-1)↓ps.list
ShowLog'Therefore ',(⍕noOf),' member',((1<noOf)/'s'),' of the group "',currentGroup,'" will not be executed'
:If ps.guiFlag
ps.ref2Gui.∆n.Grid.Values[(i-1)+⍳noOf;4]←⊂'Prevented by Initial_',currentGroup
:EndIf
ps.log,←buff
i+←noOf-1
continueFlag←1
:Else
buff←¯1↑ps.log
ps.log←¯1↓ps.log
ShowLog'Function "Initial_',currentGroup,'" found and executed successfully'
ps.log,←buff
:EndIf
:EndIf
:EndIf
∇
∇ {r}←HandleCleanup(ref ps currentGroup i);at
r←0
currentGroup←Remove∆Test_ currentGroup
:If i=≢ps.list                                                            ⍝ Last one?
:OrIf currentGroup{0=≢⍺:0 ⋄ ⍺≢Remove∆Test_ GetGroupName(i+1)⊃⍵}ps.list    ⍝ Group change?!
:If 3=ref.⎕NC'Cleanup_',currentGroup
:If 3⊃⌽(8⍴2)⊤ps.stop
(∪(⎕STOP 1⊃⎕SI),∆stop_before_cleanup_1,∆stop_before_cleanup_2)⎕STOP 1⊃⎕SI
:Else
((⎕STOP 1⊃⎕SI)~,∆stop_before_cleanup_1,∆stop_before_cleanup_2)⎕STOP 1⊃⎕SI
:EndIf
at←1⊃ref.⎕AT'Cleanup_',currentGroup
:If (2⊃at)∊1 ¯2                                                   ⍝ Accepts a right argument (1=monadic, ¯2=ambivalent)?
∆stop_before_cleanup_1:  ⍝ To switch off the stopping mechanism permanently, enter:   ps.stop←0
ps ref.{6::1 ⋄ ⍎⍵,' ⍺'}'Cleanup_',currentGroup
:Else
∆stop_before_cleanup_2:  ⍝ To switch off the stopping mechanism permanently, enter:   ps.stop←0
ref.⍎'Cleanup_',currentGroup
:EndIf
:EndIf
:EndIf
∇
∇ r←{x}YesOrNo y
:If 0=⎕NC'x'
r←##.CommTools.YesOrNo y
:Else
r←x ##.CommTools.YesOrNo y
:EndIf
∇
∇ r←ReportLineNumber
r←''
:If 0<⎕NC'∆FAILING_LINE'
r←' [',(⍕∆FAILING_LINE),']'
:EndIf
∇
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}
∇ r←CR
r←⎕UCS 13
∇
∇ r←CRLF
r←⎕UCS 13 10
∇
:Section Helpers
∇ Prepare;testPath;testFilename;ask;answer;options;flag;ind
⍝ Creates an instance of the class `Tester2` named `T` and configures it for
⍝ Assumes that the project is handled by the project manager "Cider", and that there is
⍝ a namespace ##.CiderConfig available with the Cider config parameters.
⍝ As a side effect is creates a folder "TestResults" in the project's root folder if the
⍝ user wants to do code coverage with the `CodeCoverage` class.
⎕IO←1 ⋄ ⎕ML←1
T←⎕NEW Tester2 ⎕THIS
testPath←##.CiderConfig.HOME,'/TestResults'
testFilename←testPath,'/CodeCoverage'
flag←0
:If ⎕NEXISTS testPath
:If ⎕NEXISTS testFilename,'.profile'
ind←('Code Coverage' 0 1)CommTools.Select'Append' 'Replace' 'Neither'
→(3=ind)/0
flag←1
:If 2=ind
1 CodeCoverage.DeleteFiles testFilename
:EndIf
:Else
flag←0 CommTools.YesOrNo'Code coverage?'
:EndIf
:Else
flag←0 CommTools.YesOrNo'Code coverage?'
:EndIf
:If flag
3 ⎕MKDIR testPath  ⍝
T.codeCoverage←⎕NEW CodeCoverage(,⊂'#.',{⍵,'.',⍵}2↓⍕⎕THIS.##)
T.codeCoverage.filename←testFilename
:EndIf
∇
∇ RunTests;htmlFilename;verbose;option
⍝ 1. Prepares the test framework
⍝ 2. Runs all test cases
⍝ 3. Processes the code coverage data (if collected)
⍝ 4. Asks the user whether the code coverage report should be put on view
Prepare
T.Run 1
:If 0<≢T.codeCoverage
{}CodeCoverage.ProcessData T.codeCoverage.filename
option←'Type of code coverage report' 0 1 CommTools.Select'Overview' 'Verbose' 'None'
:If 3>option
verbose←2=option
htmlFilename←verbose CodeCoverage.CreateReport T.codeCoverage.filename
⎕←']Open file://',htmlFilename
:EndIf
:EndIf
∇
∇ (success log)←RunTestsInBatchMode;rc
⍝ Runs all test with the batch flag on and the debug flag off.
⍝ Returns a two-item vector:\\
⍝ [1] Boolean with 1 indicating success and 0 failure\\
⍝ [2] A vector of character vectors with the messages
Prepare
(rc log)←T.RunBatchTests 0
success←rc=0
∇
:EndSection
:EndClass
(
''
)
AddHeader←{0=≢⍺:⍺ ⋄ (⍵,[0.5]'-'⍴¨⍨≢¨⍵)⍪⍺}
AddSlash←{0=≢⍵:⍵ ⋄ ⍵,(~(¯1↑⍵)∊'/\')/'/'}
Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←3 ⋄ (⍕∊⍺)⎕SIGNAL 1↓(↑∊⍵),ErrNo}
zipFilename←BuildPackage Arg;filename;sourcePath;targetPath;prompt;msg;dependencies;version;openCiderProjects;ind;cfg;parms;ref2TatinVars;bump
(sourcePath targetPath)←Arg.(_1 _2)
prompt←0
zipFilename←''
:If 0≡sourcePath
:OrIf 0=≢sourcePath
openCiderProjects←⎕SE.Cider.ListOpenProjects 0
:If 1<≢openCiderProjects
ind←'Which Cider project would you like to act on?'TC.C.Select↓⎕FMT openCiderProjects
'Cancelled by user'Assert 0<≢ind
sourcePath←2⊃openCiderProjects[ind;]
:ElseIf 1=≢openCiderProjects
sourcePath←2⊃openCiderProjects[1;]
:Else
'No path specified & no open Cider projects found'Assert 0
:EndIf
:ElseIf (,'.')≡,sourcePath
sourcePath←TC.F.PWD
prompt∨←1
:EndIf
:If 0≡targetPath
:OrIf 0=≢targetPath
('No target path specified and no Cider config file found in ',sourcePath)Assert ⎕NEXISTS sourcePath,'/cider.config'
cfg←TC.Reg.GetJsonFromFile sourcePath,'/cider.config'
'No target path specified and project has no property "distributionFolder"'Assert 0<cfg.CIDER.⎕NC'distributionFolder' ⍝ was introduced in 0.26.0
targetPath←(TC.Reg.AddSlash sourcePath),cfg.CIDER.distributionFolder
prompt∨←1
:ElseIf (,'.')≡,targetPath
targetPath←sourcePath
prompt∨←1
:EndIf
dependencies←''Arg.Switch'dependencies'
version←''Arg.Switch'version'
bump←''Arg.Switch'bump'
'-bump= and -version= are mutually exclusive'Assert~∧/0≠≢¨bump version
:If 0<≢bump
:If 'patch'≡⎕C bump
version←'+0.0.1'
:ElseIf 'minor'≡⎕C bump
version←'+0.1.0'
:ElseIf 'major'≡⎕C bump
version←'+1.0.0'
:EndIf
:EndIf
:If 0<≢version
:AndIf '+'=1⍴version
'A rule for "version" must have two dots and just 0 and 1'Assert 2='.'+.=1↓version
'A rule for "version" must have two dots and just 0 and 1'Assert∧/('.'~⍨1↓version)∊'01'
:EndIf
(sourcePath targetPath)←AddSlash¨sourcePath targetPath
'Source path (⍵[1]) is not a directory'Assert TC.F.IsDir sourcePath
filename←sourcePath,TC.CFG_Name
('Could not find a file "',TC.CFG_Name,'" in ',sourcePath)Assert TC.F.IsFile filename
:If ~(1↑targetPath)∊'/\'
:AndIf (1↑1↓targetPath)≠':'
targetPath←sourcePath,targetPath
:EndIf
(sourcePath targetPath)←{⊃1 ⎕NPARTS ⍵,'/'}¨sourcePath targetPath
:If prompt
msg←⊂'Sure that you want to pack'
msg,←⊂'   ',sourcePath
msg,←⊂'into'
:If sourcePath≡targetPath
((≢msg)⊃msg)←((≢msg)⊃msg),' the same directory?'
:Else
msg,←⊂targetPath,'?'
:EndIf
:AndIf 0=1 TC.C.YesOrNo msg
⎕←'Cancelled by user'
:Return
:EndIf
:If 0=⎕NEXISTS targetPath
msg←'Target directory',CR
msg,←targetPath,CR
msg,←'does not exist yet; create it?'
:AndIf 1 TC.C.YesOrNo msg
TC.F.MkDir targetPath
:EndIf
'Target path (⍵[2]) is not a directory'Assert TC.F.IsDir targetPath
parms←TC.CreateBuildParms sourcePath
parms.dependencyFolder←dependencies
parms.version←version
parms.targetPath←targetPath
:If 0<≢ref2TatinVars←''Arg.Switch'tatinVars'
'Invalid: "tatinVars"'Assert 9=⎕NC ref2TatinVars
parms.tatinVars←⍎ref2TatinVars
:EndIf
zipFilename←TC.BuildPackage parms
r←CR
r←⎕UCS 13
r←Cache Arg;url;list;pathFlag;flag;report;rc
r←''
:If 0≡Arg._1
url←''
:Else
url←Arg._1
:EndIf
:If Arg.path
:OrIf Arg.clear
pathFlag←1
:Else
pathFlag←0
:EndIf
:If 0<≢list←pathFlag TC.ListCache url
:If Arg.clear
r←⎕FMT⍪{⍪('--- Entries in cache for ',(1⊃⍵),':')(⍪2⊃⍵)}¨list
:Else
r←⎕FMT⍪{⍪('--- Entries in cache for ',(1⊃⍵),':')(⍪2⊃⍵)}¨list
:EndIf
:Else
r←'Nothing found in ',TC.GetPathToPackageCache
:EndIf
:If 0<≢list
:AndIf Arg.clear
:If Arg.force
flag←1
:Else
⎕←r
flag←TC.C.YesOrNo'Sure that you want delete these from the Tatin package cache?'
:EndIf
:AndIf flag
(rc report)←TC.ClearCache url
:If 0=rc
r←'Cache successfully cleared'
:Else
r←'Attempt to delete these failed:',⊃,/CR¨,⊆report
:EndIf
:EndIf
CalledFrom←{⊃{⍵↓⍨+/∧\'⎕'=⊃¨⍵}{⍵↓⍨+/∧\⍵≡¨1⍴⍵}⍵}
errMsg←CheckDependencies txt;f1;f2;f3;f
⍝ Every single line must have at least a group name and a package name
⍝ but optionally also major.minor.patch
f1←TC.Reg.IsValidPackageID_Complete¨txt
f2←TC.Reg.IsValidPackageID_WithMajorNo¨txt
f3←TC.Reg.IsValidPackageID_WithoutVersionNo¨txt
errMsg←''
:If ∨/~f←f1+f2+f3
:If 1=+/~f
errMsg←'Not a valid package ID: ',⊃(~f)/txt
:Else
errMsg←'Not valid package IDs: ',⊃{⍺',',⍵}/(~f)/txt
:EndIf
:EndIf
r←CheckDependencyOrigins(source dependencies);deps;buff;q
⍝ Checks where dependencies come from and warn the user in case of something suspicious
r←1
:If ⎕NEXISTS source,'/',dependencies,'/',TC.Reg.BuildListFilename
deps←JSON⊃⎕NGET source,'/',dependencies,'/',TC.Reg.BuildListFilename
:AndIf ∨/deps.url≢¨⊂'https://tatin.dev/'
buff←⍕⍉↑,deps.(packageID url)
q←'CheckPkgDeps@Check the package dependencies:',,CR,' ',buff
q,←CR,'Sure you want to publish <',(⊃,/1↓⎕NPARTS source),'> ?'
r←TC.CommTools.YesOrNo q
:EndIf
{r}←CheckForInvalidVersion dmx;v;f2;f1
r←'' ⍬
f1←'Server: Request came from an invalid version of Tatin.'{⍺≡(≢⍺)↑⍵}dmx.EM
⍝ Workaround for Client and Server being out of sync after injecting the originally missing "an" into the message:
f2←'Server: Request came from invalid version of Tatin.'{⍺≡(≢⍺)↑⍵}dmx.EM
:If f1∨f2
:AndIf 1 TC.C.YesOrNo'You are using an outdated version of the Tatin client.',CR,'Would you like to update automatically?'
:Trap ErrNo
v←⊃TC.UpdateClient 1
⎕←'Tatin client updated to ',v,'; please execute the last Tatin user command again'
⎕←'Workspace has not been updated. Start a new instance of Dyalog.'
:Else
dmx←⎕DMX
:If ∨/'Check ⎕EXCEPTION for details'⍷dmx.Message
⎕EXCEPTION.Message ⎕SIGNAL ErrNo
:Else
dmx.EM ⎕SIGNAL ErrNo
:EndIf
:EndTrap
:ElseIf 'ERROR 345'≡dmx.EM
r←(dmx.EM,' (check your Internet connection)')dmx.EN
:Else
r←dmx.EM dmx.EN
:EndIf
r←CheckForLaterVersion Arg;path;question;this;b;flags;colHeaders;bool;buff;info1;info2;qdmx
r←''
path←Arg._1
flags←(1×Arg.major)+(2×Arg.dependencies)
:Trap ErrNo
r←flags TC.CheckForLaterVersion path
:Else
qdmx←⎕DMX
CheckForInvalidVersion qdmx
:EndTrap
:If 0<≢r
colHeaders←'Installed' 'Latest' 'Original URL' 'I' 'New URL'
r←colHeaders⍪' '⍪r
r[2;]←(⌈⌿≢¨r)⍴¨'-'
b←1≡¨r[;4]
r[⍸b;4]←'!'
r[2↓⍸~b;4]←⊂''
info1←info2←''
:If '!'∊r[;4]
info1←'! = Check version available'
:EndIf
:If ∨/bool←0={⍵[;5]}buff←(1 TC.ListRegistries'')
info2←'Not scanned because priority is zero: ',⊃{⍺,', ',⍵}/∪bool/buff[;1]
:EndIf
r←⍪↓⎕FMT r
:If 0<≢info1,info2
r⍪←⊂' '
:If 0<≢info1
r⍪←⊂info1
:EndIf
:If 0<≢info2
r⍪←⊂info2
:EndIf
:EndIf
:EndIf
(msg json)←CheckPackageConfigFile(json path);cfg2;ns;extensions;⎕TRAP;list
⍝ Returns an empty vector if everything is okay and an error message otherwise
msg←''
ns←TC.Reg.JSON json
:Trap ErrNo
cfg2←TC.InitPackageConfig ns
'name'TC.ValidateName ns.name
'group'TC.ValidateName ns.group
{}'api'TC.ValidateName⍣(0<≢ns.api)⊣ns.api
TC.ValidateVersion ns.version
ns←TC.ValidateTags ns
ns←TC.ValidateDescription ns
ns←TC.ValidateAplVersion ns
ns←TC.ValidateOSprops ns
:If 0=≢ns.source
list←(1+≢path)↓¨⊃TC.F.Dir path,'\'
list~←⊂TC.CFG_Name
:If 1=≢list
:AndIf ((⊂3⊃⎕NPARTS⊃list)∊'.apln' '.aplc')∨TC.F.IsDir path,⊃list
ns.source←⊃list
:Else
msg←'Invalid: "source"'
:Return
:EndIf
:EndIf
{}{{'source'TC.ValidateName ⍵}⍣(0<≢⍵)⊣⍵}ns.source~'/\'
:If '.'∊ns.source
'"source" carries an invalid extension'Assert(⊂3⊃⎕NPARTS ns.source)∊SupportedExtensions
:EndIf
:If 0<≢ns.project_url
⍝         :If 0=TC.FetchHTMLpage ns.project_url  ⍝ GitHub does not support HEAD
⍝                  msg←ns.project_url,' did not respond'
⍝                  :Return
⍝              :EndIf
:EndIf
json←TC.Reg.JSON ns
:Else
msg←⎕DMX.EM
:EndTrap
r←CopyRegistry arg;p;qdmx;b
p←⎕NS'' ⍝ For parameters
⍝ --- Handle arguments
:If 0≡arg._1
'No argument was specified but -dry is missing'Assert arg.dry
p.url←'[tatin]' ⍝ The default
p.path←''
:Else
:If TC.IsHTTP arg._1
:OrIf ']['≡2↑¯1⌽arg._1
p.url←arg._1
:If 0=arg.dry
'Not specified: path to target Registry'Assert 0≢arg._2
:EndIf
p.path←arg._2
:Else
p.url←'[tatin]' ⍝ The default
'Not specified: path to target Registry'Assert 0≢arg._1
p.path←arg._1
:EndIf
:EndIf
:If 0=arg.dry
p.path←TC.F.AddTrailingSep p.path
('Not a folder: ',1⊃⎕NPARTS ¯1↓p.path)Assert TC.F.IsDir 1⊃⎕NPARTS ¯1↓p.path
3 ⎕MKDIR ¯1↓p.path ⍝ Make sure the target exists
:EndIf
⍝ --- Handle flags
p.(dry force latest dependencies)←arg.(dry force latest dependencies)
p.verbose←TC.A.ToNum'0'arg.Switch'verbose'
p.dependencies←TC.A.ToNum'1'arg.Switch'dependencies'
⍝ --- Handle options
p.list←''arg.Switch'list'
:If 0<≢p.list
:If 'file://'{⍺≡(≢⍺)↑⍵}p.list
('Not a file: ',(≢'file://')↓p.list)Assert TC.F.IsFile(≢'file://')↓p.list
p.list←⊃⎕NGET((≢'file://')↓p.list)1
p.list←(0<≢¨p.list)/p.list
:ElseIf '#.'≡2↑p.list
:OrIf '⎕se.'≡⎕C 4↑p.list
⍝ Must point to a variable or a niladic function
('Neither a variable nor a function:  ',p.list)Assert(⎕NC p.list)∊2 3
:If 3=⎕NC p.list
('Is a function, but not niladic: ',p.list)Assert 0=1 2⊃⎕AT p.list
('Is a niladic function, but does not return a result: ',p.list)Assert 1=|1 1⊃⎕AT p.list
:EndIf
:Trap 0
p.list←⍎p.list
:Else
qdmx←⎕DMX
0 Assert⍨'Evaluating "',p.list,'" caused a ',qdmx.EM
:EndTrap
:If 0<≢p.list
:If 1=≡,p.list
p.list←','(≠⊆⊢)p.list
:EndIf
:If 1∊b←~(TC.Reg.IsValidPackageID_WithMajorNo¨p.list)∨TC.Reg.IsValidPackageID_WithoutVersionNo¨p.list
0 Assert⍨'Invalid entries found on "list": ',⊃{⍺,', ',⍵}/b/p.list
:EndIf
:EndIf
:Else
p.list←','(≠⊆⊢)p.list
:EndIf
:EndIf
p.group←''arg.Switch'group'
p.url←TC.ReplaceRegistryAlias p.url
r←TC.CopyRegistry p
⍝Done
{r}←CreatePackage Arg;path;filename;openCiderProjects;ind;project
Arg.(delete quiet)←0
Arg.edit←1
r←PackageConfig Arg
r←Debug arg;mode
:If 0=##.Client.⎕NC'DEBUG'
:EndIf
mode←{0≡⍵:'' ⋄ ⎕C ⍵}arg._1
r←((,¨'on' '1' 'off' '0')⍳⊂∊##.Client.DEBUG)⊃'on' 'on' 'off' 'off' '??'
:If 0<≢mode
'Invalid argument; must be one of "on", 1, "off", 0'Assert(⊂,mode)∊,¨'on' 'off' '1' '0'
r←'Was: ',r
:EndIf
msg←DeletePackages Arg;qdmx;url;group;list;list2;groups;packageIDs;b;ind;buff;msgs;statusCodes;force;flag;regID
:If '['=1⍴Arg._1
regID←{⍵↑⍨⍵⍳']'}Arg._1
:Else
regID←Arg._1
:EndIf
(url packageIDs)←TC.SplitUrlAndPackageID TC.ReplaceRegistryAlias Arg._1
'You must specify a Tatin server since the principal Tatin server does not allow deleting packages'Assert 0<≢url
'You must specify a Tatin server since the principal Tatin server does not allow deleting packages'Assert'https://tatin.dev'{⍺≢(≢⍺)↑⍵}url
force←Arg.Switch'force'
group←TC.Reg.GetGroupFromPackageID packageIDs
flag←0
:If 0=≢group
TC.EstablishEmptyPermanentConnections 1
TC.Connect2Client url
list←{⍵[;1]}TC.ListPackages url
list,←∪{⍵/⍨2>+\⍵='-'}¨,TC.ListDeprecated url
list2←↑{'-'(≠⊆⊢)⍵}¨list
groups←∪list2[;1]
:If 1=≢groups
group←1⊃groups
:Else
b←(⎕C list2[;2])≡¨⊂TC.Reg.RemoveVersionNumber ⎕C packageIDs
:If 0=+/b
msg←'Package(s) not found' ⋄ →∆Quit
:EndIf
list2←b⌿list2
:If 1=+/b
group←⊃list2
:Else
ind←'SelectGroup@Select group'TC.C.Select list2[;1]
:If 0=≢ind
msg←'Cancelled by user' ⋄ →∆Quit
:Else
group←ind⊃list2[;1]
:EndIf
:EndIf
:EndIf
packageIDs←group,'-',packageIDs
:EndIf
:If TC.Reg.IsValidPackageID_Complete packageIDs
packageIDs←⊆packageIDs
:Else
TC.EstablishEmptyPermanentConnections 1
TC.Connect2Client url
list←TC.ListVersions regID,packageIDs
'No matching packages found'Assert 0<≢list
packageIDs←,list
flag←1
:If ~force
:If ~flag
TC.Connect2Client url
list←TC.ListVersions url,packageIDs
:EndIf
:If 1=≢list
:If 1 TC.C.YesOrNo'DeleteThisPkg@Are you sure you want to delete the package',CR,('   ',⊃list),CR,'from ',url,' ?'
packageIDs←⊂⊃list
:Else
msg←'Cancelled by user' ⋄ →∆Quit
:EndIf
:Else
ind←'SelectVersionsForDeletion@Select versions for deletion' 1 TC.C.Select,list
:If 0=≢ind
msg←'Cancelled by user' ⋄ →∆Quit
:Else
packageIDs←,list[ind;]
:EndIf
:EndIf
:EndIf
:EndIf
:Trap ErrNo
(statusCodes msgs)←TC.DeletePackages regID packageIDs
:Else
TC.CloseConnections 1
qdmx←⎕DMX
⎕SIGNAL/CheckForInvalidVersion qdmx
0 Assert⍨'Deleting package',(()/'s'),' failed: ',qdmx.EM,' (rc=',(⍕qdmx.EN),')'
:EndTrap
:If statusCodes∧.=200
msg←{(⍕⍵),' package',(((1<⍵)/'s')),' successfully deleted'}≢packageIDs
:Else
msg←↑(⊂¨url{⍺∘,¨⊆⍵}packageIDs),¨(⊂∘,¨statusCodes),¨⊂¨⊆msgs
:EndIf
∆Quit:
TC.CloseConnections 1
⍝Done
r←DeprecatePackage Arg;id;force;uri;packageID;versions;msg;rc;comment
r←''
id←Arg._1
'You must specify a Tatin Registry and a package ID'Assert 0<≢id
force←Arg.force
comment←Arg._2
id←TC.ReplaceRegistryAlias id
'Tatin Registry not found'Assert 0<≢id
(uri packageID)←TC.Reg.SeparateUriAndPackageID id
'You must specify a package ID'Assert 0<≢packageID
'You must specify at least a group and a name'Assert 1≤'-'+.=id
packageID←TC.Reg.RemoveMinorAndPatch packageID
versions←TC.ListVersions uri,TC.Reg.RemoveVersionNumber packageID
:If 0=≢versions
r←'Package not found'
:Else
versions←∪↓TC.Reg.RemoveMinorAndPatch¨versions
:If 1='-'+.=packageID
:AndIf 1<≢versions
:If force
msg←'These major versions were found for ',packageID,' on ',uri,':',CR
msg,←⊃,/(⊂'  '),¨versions,¨CR
msg,←'Are you sure that you want to deprecate ALL these versions?'
:OrIf TC.C.YesOrNo msg
(rc msg)←TC.DeprecatePackage uri comment packageID
:If 0=rc
r←'Successfully deprecated: ',packageID,' on ',uri,CR
:Else
r←'Deprecating ',packageID,' on ',uri,' failed; ',msg,CR
:EndIf
:Else
r←'Cancelled by user'
:Return
:EndIf
:Else
:If force
:OrIf TC.C.YesOrNo'Sure that you want to deprecate <',packageID,'> on ',uri,' ?'
(rc msg)←TC.DeprecatePackage uri comment packageID
:If 0=rc
r←'Successfully deprecated: ',packageID,' on ',uri
:Else
r←'Deprecating ',packageID,' on ',uri,' failed: ',msg
:EndIf
:EndIf
:EndIf
:EndIf
r←Documentation Arg
r←0 0⍴⍬
{}⎕SE._Tatin.APLTreeUtils2.GoToWebPage tatinURL,'/v1/documentation'
ED←{⎕ED⍠('EditName' 'Disallow')⊣⍵}
r←EditJSON data;ns;flag
flag←0
ns←#.⎕NS''
ns.UserSettings←data
:Repeat
ns.⎕ED'UserSettings'
:If 0=≢ns.UserSettings
r←⍬
flag←1
:Else
:If {0::1 ⋄ 0⊣JSON ⍵}{b←';'≠⊃¨d←(⎕UCS 10)(≠⊆⊢)⍵ ⋄ 1↓⊃,/(⎕UCS 10),¨b/d}ns.UserSettings
:If ~1 TC.C.YesOrNo'The JSON is invalid; would you like to edit it again? ("N"=drop out without change)'
r←''
flag←1
:EndIf
:Else
r←ns.UserSettings
flag←1
:EndIf
:EndIf
:Until flag
⍝Done
(success newData)←(CheckFns EditJson)(name origData path);temp;msg;flag;json
⍝ Operator that allows the user to edit `origData` which is supposed to be JSON.\\
⍝ After editing it the function checks whether it is still valid JSON.
⍝ The user must either fix any problems or make sure that the JSON is empty,
⍝ in which case no action is taken
temp←⎕SE.⎕NS''
temp.⎕FX ⎕CR'ED'
⍎'temp.',name,'←origData'
flag←1
newData←temp.⍎name
success←1
:Repeat
temp.ED name
json←temp.⍎name
:If 0=≢(∊json)~' '
success←¯1 ⋄ →0
:EndIf
success←IsValidJSON json
:If ~success
msg←'This is not valid JSON; do you want to fix the problem? N=abandon changes'
flag←~TC.C.YesOrNo msg
:Else
(msg json)←CheckFns json path
:If 0<≢msg
:If ' did not respond'{⍺≡(-≢⍺)↑⍵}msg
:If TC.C.YesOrNo msg,'; edit again (N=accept the URL as it is) ?'
flag←0
:Else
newData←json
flag←1
:EndIf
:Else
flag←~1 TC.C.YesOrNo msg,CR,'Want to try fixing the problem (n=abandon ALL changes) ?'
:EndIf
:Else
flag←1
newData←json
:EndIf
:EndIf
:Until flag
(success newData)←(CheckFns EditText)(name origData);temp;msg;flag;txt
⍝ Operator that allows the user to edit `origData`. The function `CheckFns` is supposes to either
⍝ return an empty char vector (interpret3d as "okay") or an error message.\\
⍝ If you don't want to perform a check specify `{''}` as left operand.\\
⍝ The user must either fix any problems or make sure that the text is empty,
⍝ in which case no action is taken
temp←⎕SE.⎕NS''
temp.⎕FX ⎕CR'ED'
⍎'temp.',name,'←origData'
flag←1
success←0
newData←''
:Repeat
temp.ED name
:If origData≢temp.⍎name
txt←⊆temp.⍎name
txt←(0<≢¨txt)/txt
txt{TC.A.(DLB DTB)⍵}¨txt
:AndIf 0<≢(∊txt)~' '
:If 0<≢msg←CheckFns txt
⎕←msg
flag←~TC.C.YesOrNo'Woulde you like to fix the problem? (N=abandon changes)'
:Else
flag←1
newData←txt
:EndIf
:EndIf
:Until flag
EnforceSlash←{'/'@(⍸'\'=⍵)⊣⍵}
r←ErrNo
r←998
folder←{quietFlag}EstablishPackageFolder folder;list;ind;cfg;pkgFolders
⍝ Checks first whether it's meant to be an open Cider project (if Cider is around).
⍝ Next it tries to find it in the current dir.
⍝ The user should always be asked for confirmation.
⍝ If `folder` is relative and there are more than one Cider projects open then the user
⍝ is asked which one she wants to act on except when `quietFlag` is 1 (default is 0)
⍝ when an error is generated instead.
quietFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'quietFlag'
:If ~IsAbsolutePath folder
:If 0<⎕SE.⎕NC'Cider'
:If 1=≢list←⎕SE.Cider.ListOpenProjects 0
folder←'expand'TC.F.NormalizePath(2⊃list[1;]),'/',folder
folder,←(~(¯1↑folder)∊'/\')/'/'
:If 0=TC.F.IsFile folder,'apl-dependencies.txt'
cfg←TC.Reg.JSON⊃TC.F.NGET folder,'cider.config'
pkgFolders←(cfg.CIDER.(dependencies dependencies_dev).tatin)~⊂''
:If 0=≢pkgFolders
folder←''
:ElseIf 2=≢pkgFolders
ind←'Select target folder:'TC.CommTools.Select folder∘,¨{'='∊⍵:⍵↑⍨¯1+⍵⍳'=' ⋄ ⍵}¨pkgFolders
:If 0=≢ind
folder←''
:Else
folder,←ind⊃pkgFolders
:EndIf
:Else
folder←1⊃pkgFolders
:EndIf
:EndIf
folder←{⍵↑⍨¯1+⍵⍳'='}folder
:ElseIf 0=≢list
:If TC.F.IsDir TC.F.PWD,'/',folder
folder←TC.F.PWD,'/',folder
:Else
('Not found: ',folder)Assert 0
:EndIf
:Else
:If quietFlag
('Folder does not exist: ',folder)⎕SIGNAL ErrNo
:Else
ind←'For which project?'TC.C.Select↓⍕list
:If 0=≢ind
folder←0⍴⎕←'Cancelled by user'
:Else
folder←(⊃list[ind;2]),'/',folder
:If TC.F.IsDir folder
:OrIf TC.CommTools.YesOrNo'The folder'folder'does not yet exist! Shall it be created?'
'CREATE!'TC.F.CheckPath folder
:Else
('Folder does not exist: ',folder)Assert 0
:EndIf
:EndIf
:EndIf
:EndIf
:Else
:If TC.F.IsDir TC.F.PWD,'/',folder
folder←TC.F.PWD,'/',folder
:EndIf
:EndIf
:EndIf
r←FindDependencies Arg;pkgList;target;verbose;buff;bool
r←'Cancelled by user'
verbose←Arg.verbose
pkgList←','(≠⊆⊢)Arg._1
target←''Arg.Switch'_2'
'Invalid package definition'Assert 0∧.=(⎕NS''){⊃∘⍺.⎕NC¨{'_'@(⍸⍵∊'.-')⊣⍵}¨⍵}pkgList
:If 0<≢r←TC.FindDependencies(⊃{⍺,',',⍵}/pkgList)target verbose
buff←{((⊂''),⍪2⊃⍵)}¨r
r←{TC.F.EnforceSlash TC.F.AddTrailingSep⊃⍵}¨r
:If ∨/bool←{∨/'/\'∊↑⍵[;2]}¨buff ⍝ Only local data is a full path
(bool/buff)←(bool/r){l←≢⍺ ⋄ l↓¨⍵}¨(bool/buff)
(bool/buff)←{w←⍵ ⋄ w[;2]←TC.F.EnforceSlash¨⍵[;2] ⋄ w}¨bool/buff
:EndIf
r←r{((⊂⍺)'')⍪⍵}¨buff
r←⊃⍪/r
:EndIf
r←GetDeletePolicy Arg;uri;qdmx;check;info
r←⍬
uri←Arg._1
info←''
:If 0≡uri
uri←'[tatin]'
info←'[tatin]''s delete policy is: '
:ElseIf (,'?')≡,uri
→(⍬≡uri←1 SelectRegistry 0)/0
:ElseIf (,'*')≡,uri
→(0=≢uri←(GetListOfRegistriesForSelection 0)[;1])/0
:EndIf
:Trap ErrNo
check←0 Arg.Switch'check'
:If 1=≡,uri
:OrIf 1=≢uri
r←info,check TC.GetDeletePolicy(∊uri)
:Else
r←uri,[1.5]check∘{⍺ TC.GetDeletePolicy ⍵}¨uri
:EndIf
:Else
qdmx←⎕DMX
⎕SIGNAL/CheckForInvalidVersion qdmx
:EndTrap
r←GetListOfRegistriesForSelection type
⍝ `type←1` means all data (including API key) is listed
:If 0<≢r←TC.ListRegistries type
r[;1]←{0=≢⍵:'' ⋄ '[',⍵,']'}¨r[;1]
r[;2]←r[;2]{⍵∊0 80 443:⍺ ⋄ (¯1↓⍺),':',(⍕⍵),'/'}¨r[;4]
:EndIf
r←GetSourceFile
⍝ Make sure we can access the user command framework's "SourceFile" variable
r←({⍵⊃⍨1⍳⍨⍵≢¨⊃⍵}⎕RSI).SourceFile
r←GetTitleFromHtml html;offset
offset←⊃'<title[^>]*>([^<]+)'⎕S 0⍠('Greedy' 0)('IC' 1)('Mode' 'M')⊣html
r←offset↓html
r↓⍨←r⍳'>'
r↑⍨←¯1+r⍳'>'
r↑⍨←¯1+r⍳'<'
⍝Done